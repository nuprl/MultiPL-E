name: HumanEval_139_special_factorial
language: python
results:
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp800nxc00.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp800nxc00.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmp800nxc00.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n <= 0:\n        return 0\n\
    \    if n == 1:\n        return 1\n    return n * special_factorial(n - 1)\n\n\
    \ndef check(candidate):\n    assert candidate(4) == 288\n    assert candidate(5)\
    \ == 34560\n    assert candidate(7) == 125411328000\n    assert candidate(1) ==\
    \ 1\n\ndef test_check():\n    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbt61esrk.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpbt61esrk.py\", line 27,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpbt61esrk.py\"\
    , line 21, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4stdv5cs.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp4stdv5cs.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmp4stdv5cs.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqok4nxqg.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpqok4nxqg.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpqok4nxqg.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpejv7s9mc.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpejv7s9mc.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpejv7s9mc.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8vjog4kz.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp8vjog4kz.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmp8vjog4kz.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpc4kf518k.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpc4kf518k.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpc4kf518k.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_of463qy.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp_of463qy.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmp_of463qy.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n < 0:\n        return 0\n\
    \    if n == 0:\n        return 1\n    return n * special_factorial(n - 1)\n\n\
    \ndef check(candidate):\n    assert candidate(4) == 288\n    assert candidate(5)\
    \ == 34560\n    assert candidate(7) == 125411328000\n    assert candidate(1) ==\
    \ 1\n\ndef test_check():\n    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi7fkjr0t.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpi7fkjr0t.py\", line 27,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpi7fkjr0t.py\"\
    , line 21, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqy5q_vpx.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpqy5q_vpx.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpqy5q_vpx.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9juac__j.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp9juac__j.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmp9juac__j.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxwwlp02a.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpxwwlp02a.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpxwwlp02a.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvhsvjwhc.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpvhsvjwhc.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpvhsvjwhc.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph6lqamxq.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmph6lqamxq.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmph6lqamxq.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfdaia3hp.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpfdaia3hp.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpfdaia3hp.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return factorial(n) * special_factorial(n - 1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpm4koysjl.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpm4koysjl.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpm4koysjl.py\"\
    , line 19, in check\n    assert candidate(4) == 288\n  File \"/tmp/tmpm4koysjl.py\"\
    , line 15, in special_factorial\n    return factorial(n) * special_factorial(n\
    \ - 1)\nNameError: name 'factorial' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4h79bg1x.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp4h79bg1x.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmp4h79bg1x.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcrlgbrs7.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpcrlgbrs7.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpcrlgbrs7.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplhpao4af.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmplhpao4af.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmplhpao4af.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxw6r7sdk.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpxw6r7sdk.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpxw6r7sdk.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9jgjveyd.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp9jgjveyd.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmp9jgjveyd.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1td55903.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp1td55903.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmp1td55903.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe6lbly4m.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpe6lbly4m.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpe6lbly4m.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n <= 0:\n        return 0\n\
    \    return factorial(n) * special_factorial(n - 1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpeg96yo_7.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpeg96yo_7.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpeg96yo_7.py\"\
    , line 19, in check\n    assert candidate(4) == 288\n  File \"/tmp/tmpeg96yo_7.py\"\
    , line 15, in special_factorial\n    return factorial(n) * special_factorial(n\
    \ - 1)\nNameError: name 'factorial' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8shyjxx4.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp8shyjxx4.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmp8shyjxx4.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7upn63hs.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp7upn63hs.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmp7upn63hs.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi_ts1m_8.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpi_ts1m_8.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpi_ts1m_8.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpki4irg1p.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpki4irg1p.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpki4irg1p.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp490bnhij.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp490bnhij.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmp490bnhij.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7py2l7ha.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp7py2l7ha.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmp7py2l7ha.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv80lqef3.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpv80lqef3.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpv80lqef3.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    if n == 1:\n        return n\n    return n * special_factorial(n - 1)\n\n\
    \ndef check(candidate):\n    assert candidate(4) == 288\n    assert candidate(5)\
    \ == 34560\n    assert candidate(7) == 125411328000\n    assert candidate(1) ==\
    \ 1\n\ndef test_check():\n    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaxczl2up.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpaxczl2up.py\", line 27,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpaxczl2up.py\"\
    , line 21, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpc8s90hvp.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpc8s90hvp.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpc8s90hvp.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_296ozdr.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp_296ozdr.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmp_296ozdr.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpabqqm957.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpabqqm957.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpabqqm957.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4dnvtutd.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp4dnvtutd.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmp4dnvtutd.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n <= 0:\n        return 0\n\
    \    return factorial(n) * special_factorial(n - 1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphxvrllx8.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmphxvrllx8.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmphxvrllx8.py\"\
    , line 19, in check\n    assert candidate(4) == 288\n  File \"/tmp/tmphxvrllx8.py\"\
    , line 15, in special_factorial\n    return factorial(n) * special_factorial(n\
    \ - 1)\nNameError: name 'factorial' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqgge_kyn.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpqgge_kyn.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpqgge_kyn.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n <= 0:\n        return 0\n\
    \    return factorial(n) * special_factorial(n - 1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplfr1n10h.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmplfr1n10h.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmplfr1n10h.py\"\
    , line 19, in check\n    assert candidate(4) == 288\n  File \"/tmp/tmplfr1n10h.py\"\
    , line 15, in special_factorial\n    return factorial(n) * special_factorial(n\
    \ - 1)\nNameError: name 'factorial' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp02qj58n_.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp02qj58n_.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmp02qj58n_.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnx7zvqhh.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpnx7zvqhh.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpnx7zvqhh.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n <= 0:\n        return 0\n\
    \    return factorial(n) * factorial(n-1) * factorial(n-2)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwo3ma61b.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpwo3ma61b.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpwo3ma61b.py\"\
    , line 19, in check\n    assert candidate(4) == 288\n  File \"/tmp/tmpwo3ma61b.py\"\
    , line 15, in special_factorial\n    return factorial(n) * factorial(n-1) * factorial(n-2)\n\
    NameError: name 'factorial' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return factorial(n) * (n - 1) * special_factorial(n - 2)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5546p_tm.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp5546p_tm.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmp5546p_tm.py\"\
    , line 19, in check\n    assert candidate(4) == 288\n  File \"/tmp/tmp5546p_tm.py\"\
    , line 15, in special_factorial\n    return factorial(n) * (n - 1) * special_factorial(n\
    \ - 2)\nNameError: name 'factorial' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbao0r73s.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpbao0r73s.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpbao0r73s.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqb8c6qfg.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpqb8c6qfg.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpqb8c6qfg.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptgkxci4c.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmptgkxci4c.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmptgkxci4c.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp46s9932e.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp46s9932e.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmp46s9932e.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfyt6wisw.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpfyt6wisw.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpfyt6wisw.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1na6j73_.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp1na6j73_.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmp1na6j73_.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpc07wzp1l.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpc07wzp1l.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpc07wzp1l.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2qsq9wqz.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp2qsq9wqz.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmp2qsq9wqz.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsy5wfvsz.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpsy5wfvsz.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpsy5wfvsz.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n <= 0:\n        return 0\n\
    \    return factorial(n) * special_factorial(n - 1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppggm15id.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmppggm15id.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmppggm15id.py\"\
    , line 19, in check\n    assert candidate(4) == 288\n  File \"/tmp/tmppggm15id.py\"\
    , line 15, in special_factorial\n    return factorial(n) * special_factorial(n\
    \ - 1)\nNameError: name 'factorial' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpo8exoebd.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpo8exoebd.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpo8exoebd.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxwgp8uws.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpxwgp8uws.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpxwgp8uws.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprkq4k7s_.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmprkq4k7s_.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmprkq4k7s_.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp87xu7aej.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp87xu7aej.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmp87xu7aej.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n <= 0:\n        return 0\n\
    \    return factorial(n) * special_factorial(n - 1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw4szdnxw.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpw4szdnxw.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpw4szdnxw.py\"\
    , line 19, in check\n    assert candidate(4) == 288\n  File \"/tmp/tmpw4szdnxw.py\"\
    , line 15, in special_factorial\n    return factorial(n) * special_factorial(n\
    \ - 1)\nNameError: name 'factorial' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppi2dbjoc.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmppi2dbjoc.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmppi2dbjoc.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return factorial(n) * special_factorial(n - 1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8p92u1yn.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp8p92u1yn.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmp8p92u1yn.py\"\
    , line 19, in check\n    assert candidate(4) == 288\n  File \"/tmp/tmp8p92u1yn.py\"\
    , line 15, in special_factorial\n    return factorial(n) * special_factorial(n\
    \ - 1)\nNameError: name 'factorial' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp945ai3ry.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp945ai3ry.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmp945ai3ry.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2657k5z0.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp2657k5z0.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmp2657k5z0.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpds91fm4y.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpds91fm4y.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpds91fm4y.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3f3_hgjs.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp3f3_hgjs.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmp3f3_hgjs.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpj3da57zg.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpj3da57zg.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpj3da57zg.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpncqt12e1.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpncqt12e1.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpncqt12e1.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n <= 0:\n        return 0\n\
    \    if n == 1:\n        return 1\n    return n * special_factorial(n - 1)\n\n\
    \ndef check(candidate):\n    assert candidate(4) == 288\n    assert candidate(5)\
    \ == 34560\n    assert candidate(7) == 125411328000\n    assert candidate(1) ==\
    \ 1\n\ndef test_check():\n    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpl7ba4cmu.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpl7ba4cmu.py\", line 27,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpl7ba4cmu.py\"\
    , line 21, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyt_gr6ni.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpyt_gr6ni.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpyt_gr6ni.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n <= 0:\n        return 0\n\
    \    return factorial(n) * factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2kxdjyuy.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp2kxdjyuy.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmp2kxdjyuy.py\"\
    , line 19, in check\n    assert candidate(4) == 288\n  File \"/tmp/tmp2kxdjyuy.py\"\
    , line 15, in special_factorial\n    return factorial(n) * factorial(n - 1)\n\
    NameError: name 'factorial' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp87asyr1z.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp87asyr1z.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmp87asyr1z.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpt3mjpdao.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpt3mjpdao.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpt3mjpdao.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpa98dgopa.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpa98dgopa.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpa98dgopa.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpp0b9xpmi.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpp0b9xpmi.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpp0b9xpmi.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpczqdj9ob.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpczqdj9ob.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpczqdj9ob.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n <= 0:\n        return 0\n\
    \    return factorial(n) * special_factorial(n - 1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkgyb1t5u.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpkgyb1t5u.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpkgyb1t5u.py\"\
    , line 19, in check\n    assert candidate(4) == 288\n  File \"/tmp/tmpkgyb1t5u.py\"\
    , line 15, in special_factorial\n    return factorial(n) * special_factorial(n\
    \ - 1)\nNameError: name 'factorial' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppsj4mm92.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmppsj4mm92.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmppsj4mm92.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpucb0iowy.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpucb0iowy.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpucb0iowy.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return factorial(n) * special_factorial(n - 1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkrge_80v.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpkrge_80v.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpkrge_80v.py\"\
    , line 19, in check\n    assert candidate(4) == 288\n  File \"/tmp/tmpkrge_80v.py\"\
    , line 15, in special_factorial\n    return factorial(n) * special_factorial(n\
    \ - 1)\nNameError: name 'factorial' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe0y0unjx.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpe0y0unjx.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpe0y0unjx.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwy6u_c0n.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpwy6u_c0n.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpwy6u_c0n.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxlotpc6s.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpxlotpc6s.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpxlotpc6s.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n <= 0:\n        return 0\n\
    \    return factorial(n) * factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpz712jty4.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpz712jty4.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpz712jty4.py\"\
    , line 19, in check\n    assert candidate(4) == 288\n  File \"/tmp/tmpz712jty4.py\"\
    , line 15, in special_factorial\n    return factorial(n) * factorial(n - 1)\n\
    NameError: name 'factorial' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n <= 0:\n        return 0\n\
    \    return factorial(n) * special_factorial(n - 1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpf61cfn84.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpf61cfn84.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpf61cfn84.py\"\
    , line 19, in check\n    assert candidate(4) == 288\n  File \"/tmp/tmpf61cfn84.py\"\
    , line 15, in special_factorial\n    return factorial(n) * special_factorial(n\
    \ - 1)\nNameError: name 'factorial' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpb02o4qxr.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpb02o4qxr.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpb02o4qxr.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4xu7klmi.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp4xu7klmi.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmp4xu7klmi.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6cm8z2jn.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp6cm8z2jn.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmp6cm8z2jn.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return factorial(n) * special_factorial(n - 1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfvyr0_ra.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpfvyr0_ra.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpfvyr0_ra.py\"\
    , line 19, in check\n    assert candidate(4) == 288\n  File \"/tmp/tmpfvyr0_ra.py\"\
    , line 15, in special_factorial\n    return factorial(n) * special_factorial(n\
    \ - 1)\nNameError: name 'factorial' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfxxmwzuu.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpfxxmwzuu.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpfxxmwzuu.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgeyiy9pn.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpgeyiy9pn.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpgeyiy9pn.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpld5qvsf6.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpld5qvsf6.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpld5qvsf6.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphp3eexfs.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmphp3eexfs.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmphp3eexfs.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcyvgnoq8.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpcyvgnoq8.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpcyvgnoq8.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpu8gyaosh.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpu8gyaosh.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpu8gyaosh.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfb68oe2t.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpfb68oe2t.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpfb68oe2t.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0krvhyyd.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp0krvhyyd.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmp0krvhyyd.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqeaeqxw7.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpqeaeqxw7.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpqeaeqxw7.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n <= 0:\n        return 0\n\
    \    return factorial(n) * factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcsy2cuaq.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpcsy2cuaq.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpcsy2cuaq.py\"\
    , line 19, in check\n    assert candidate(4) == 288\n  File \"/tmp/tmpcsy2cuaq.py\"\
    , line 15, in special_factorial\n    return factorial(n) * factorial(n - 1)\n\
    NameError: name 'factorial' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmposw72vyi.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmposw72vyi.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmposw72vyi.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n <= 0:\n        return 0\n\
    \    return factorial(n) * factorial(n-1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbq0ys6s5.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpbq0ys6s5.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpbq0ys6s5.py\"\
    , line 19, in check\n    assert candidate(4) == 288\n  File \"/tmp/tmpbq0ys6s5.py\"\
    , line 15, in special_factorial\n    return factorial(n) * factorial(n-1)\nNameError:\
    \ name 'factorial' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return factorial(n) * special_factorial(n - 1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpypc6gemh.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpypc6gemh.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpypc6gemh.py\"\
    , line 19, in check\n    assert candidate(4) == 288\n  File \"/tmp/tmpypc6gemh.py\"\
    , line 15, in special_factorial\n    return factorial(n) * special_factorial(n\
    \ - 1)\nNameError: name 'factorial' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return factorial(n) * special_factorial(n - 1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpglzevd20.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpglzevd20.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpglzevd20.py\"\
    , line 19, in check\n    assert candidate(4) == 288\n  File \"/tmp/tmpglzevd20.py\"\
    , line 15, in special_factorial\n    return factorial(n) * special_factorial(n\
    \ - 1)\nNameError: name 'factorial' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n < 0:\n        return 0\n\
    \    if n == 0:\n        return 1\n    return n * special_factorial(n - 1)\n\n\
    \ndef check(candidate):\n    assert candidate(4) == 288\n    assert candidate(5)\
    \ == 34560\n    assert candidate(7) == 125411328000\n    assert candidate(1) ==\
    \ 1\n\ndef test_check():\n    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzzb2ioj4.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpzzb2ioj4.py\", line 27,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpzzb2ioj4.py\"\
    , line 21, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpog5rg7gf.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpog5rg7gf.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpog5rg7gf.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbgb0w7pi.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpbgb0w7pi.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpbgb0w7pi.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmnpl15c4.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpmnpl15c4.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpmnpl15c4.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return factorial(n) * special_factorial(n - 1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsgdhh9y1.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpsgdhh9y1.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpsgdhh9y1.py\"\
    , line 19, in check\n    assert candidate(4) == 288\n  File \"/tmp/tmpsgdhh9y1.py\"\
    , line 15, in special_factorial\n    return factorial(n) * special_factorial(n\
    \ - 1)\nNameError: name 'factorial' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpb0m8xt13.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpb0m8xt13.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpb0m8xt13.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1f44n6wy.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp1f44n6wy.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmp1f44n6wy.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe4soc4hz.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpe4soc4hz.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpe4soc4hz.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return factorial(n) * special_factorial(n - 1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpldv9p30c.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpldv9p30c.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpldv9p30c.py\"\
    , line 19, in check\n    assert candidate(4) == 288\n  File \"/tmp/tmpldv9p30c.py\"\
    , line 15, in special_factorial\n    return factorial(n) * special_factorial(n\
    \ - 1)\nNameError: name 'factorial' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpu6h2jp6n.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpu6h2jp6n.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpu6h2jp6n.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp34mpxi55.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp34mpxi55.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmp34mpxi55.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsppg7miz.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpsppg7miz.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpsppg7miz.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkskjgmdt.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpkskjgmdt.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpkskjgmdt.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n <= 0:\n        return 0\n\
    \    return factorial(n) * factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3kpg4q61.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp3kpg4q61.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmp3kpg4q61.py\"\
    , line 19, in check\n    assert candidate(4) == 288\n  File \"/tmp/tmp3kpg4q61.py\"\
    , line 15, in special_factorial\n    return factorial(n) * factorial(n - 1)\n\
    NameError: name 'factorial' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptbp8ohjr.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmptbp8ohjr.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmptbp8ohjr.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdoexak26.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpdoexak26.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpdoexak26.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n <= 0:\n        return 0\n\
    \    return factorial(n) * factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptyx650av.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmptyx650av.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmptyx650av.py\"\
    , line 19, in check\n    assert candidate(4) == 288\n  File \"/tmp/tmptyx650av.py\"\
    , line 15, in special_factorial\n    return factorial(n) * factorial(n - 1)\n\
    NameError: name 'factorial' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return factorial(n) * special_factorial(n - 1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpf45abztj.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpf45abztj.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpf45abztj.py\"\
    , line 19, in check\n    assert candidate(4) == 288\n  File \"/tmp/tmpf45abztj.py\"\
    , line 15, in special_factorial\n    return factorial(n) * special_factorial(n\
    \ - 1)\nNameError: name 'factorial' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxiav6kp2.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpxiav6kp2.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpxiav6kp2.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7j8u0x_v.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp7j8u0x_v.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmp7j8u0x_v.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return factorial(n) * factorial(n-1) * factorial(n-2)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8o83m250.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp8o83m250.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmp8o83m250.py\"\
    , line 19, in check\n    assert candidate(4) == 288\n  File \"/tmp/tmp8o83m250.py\"\
    , line 15, in special_factorial\n    return factorial(n) * factorial(n-1) * factorial(n-2)\n\
    NameError: name 'factorial' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphni3cws4.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmphni3cws4.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmphni3cws4.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpf_g8junr.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpf_g8junr.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpf_g8junr.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptp5c_1_q.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmptp5c_1_q.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmptp5c_1_q.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdnm6oxsq.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpdnm6oxsq.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpdnm6oxsq.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppp5dyv4j.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmppp5dyv4j.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmppp5dyv4j.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n <= 0:\n        return 0\n\
    \    return factorial(n) * special_factorial(n - 1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6vw02ozy.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp6vw02ozy.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmp6vw02ozy.py\"\
    , line 19, in check\n    assert candidate(4) == 288\n  File \"/tmp/tmp6vw02ozy.py\"\
    , line 15, in special_factorial\n    return factorial(n) * special_factorial(n\
    \ - 1)\nNameError: name 'factorial' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4eet49r3.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp4eet49r3.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmp4eet49r3.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8q4d1kvt.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp8q4d1kvt.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmp8q4d1kvt.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n <= 0:\n        return 0\n\
    \    return factorial(n) * special_factorial(n - 1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6spv7o3k.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp6spv7o3k.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmp6spv7o3k.py\"\
    , line 19, in check\n    assert candidate(4) == 288\n  File \"/tmp/tmp6spv7o3k.py\"\
    , line 15, in special_factorial\n    return factorial(n) * special_factorial(n\
    \ - 1)\nNameError: name 'factorial' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9pf4tufy.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp9pf4tufy.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmp9pf4tufy.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzjja0aq0.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpzjja0aq0.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpzjja0aq0.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    if n < 0:\n        return 0\n    return factorial(n) * special_factorial(n\
    \ - 1)\n\n\ndef check(candidate):\n    assert candidate(4) == 288\n    assert\
    \ candidate(5) == 34560\n    assert candidate(7) == 125411328000\n    assert candidate(1)\
    \ == 1\n\ndef test_check():\n    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6rvafuqk.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp6rvafuqk.py\", line 27,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmp6rvafuqk.py\"\
    , line 21, in check\n    assert candidate(4) == 288\n  File \"/tmp/tmp6rvafuqk.py\"\
    , line 17, in special_factorial\n    return factorial(n) * special_factorial(n\
    \ - 1)\nNameError: name 'factorial' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return factorial(n) * special_factorial(n - 1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfeqfdrbo.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpfeqfdrbo.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpfeqfdrbo.py\"\
    , line 19, in check\n    assert candidate(4) == 288\n  File \"/tmp/tmpfeqfdrbo.py\"\
    , line 15, in special_factorial\n    return factorial(n) * special_factorial(n\
    \ - 1)\nNameError: name 'factorial' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxehikeko.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpxehikeko.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpxehikeko.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfd2xo6xr.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpfd2xo6xr.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpfd2xo6xr.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8z53f__j.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp8z53f__j.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmp8z53f__j.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n <= 0:\n        return 0\n\
    \    return factorial(n) * special_factorial(n - 1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8hhst9nn.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp8hhst9nn.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmp8hhst9nn.py\"\
    , line 19, in check\n    assert candidate(4) == 288\n  File \"/tmp/tmp8hhst9nn.py\"\
    , line 15, in special_factorial\n    return factorial(n) * special_factorial(n\
    \ - 1)\nNameError: name 'factorial' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return factorial(n) * (n - 1) * (n - 2) * ... * (n - 1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpp47jip2m.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpp47jip2m.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpp47jip2m.py\"\
    , line 19, in check\n    assert candidate(4) == 288\n  File \"/tmp/tmpp47jip2m.py\"\
    , line 15, in special_factorial\n    return factorial(n) * (n - 1) * (n - 2) *\
    \ ... * (n - 1)\nNameError: name 'factorial' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n < 0:\n        return 0\n\
    \    if n == 0:\n        return 1\n    return n * special_factorial(n - 1)\n\n\
    \ndef check(candidate):\n    assert candidate(4) == 288\n    assert candidate(5)\
    \ == 34560\n    assert candidate(7) == 125411328000\n    assert candidate(1) ==\
    \ 1\n\ndef test_check():\n    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptix7nbb_.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmptix7nbb_.py\", line 27,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmptix7nbb_.py\"\
    , line 21, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3f11jh43.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp3f11jh43.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmp3f11jh43.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr4i7ugv_.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpr4i7ugv_.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpr4i7ugv_.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe39qmat0.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpe39qmat0.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpe39qmat0.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprjui6bkm.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmprjui6bkm.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmprjui6bkm.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprg4d96x1.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmprg4d96x1.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmprg4d96x1.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppsyf1zok.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmppsyf1zok.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmppsyf1zok.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpoe1ttrdb.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpoe1ttrdb.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpoe1ttrdb.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpncmmoulc.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpncmmoulc.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpncmmoulc.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbbb0zdaf.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpbbb0zdaf.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpbbb0zdaf.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n <= 0:\n        return 0\n\
    \    return factorial(n) * special_factorial(n - 1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcoj1f7d1.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpcoj1f7d1.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpcoj1f7d1.py\"\
    , line 19, in check\n    assert candidate(4) == 288\n  File \"/tmp/tmpcoj1f7d1.py\"\
    , line 15, in special_factorial\n    return factorial(n) * special_factorial(n\
    \ - 1)\nNameError: name 'factorial' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpohn7fc8_.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpohn7fc8_.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpohn7fc8_.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpg5g8m0_z.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpg5g8m0_z.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpg5g8m0_z.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphzudab68.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmphzudab68.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmphzudab68.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfag7ioq2.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpfag7ioq2.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpfag7ioq2.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp64tws0o1.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp64tws0o1.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmp64tws0o1.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2kgy27fq.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp2kgy27fq.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmp2kgy27fq.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return factorial(n) * special_factorial(n - 1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4_tylgal.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp4_tylgal.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmp4_tylgal.py\"\
    , line 19, in check\n    assert candidate(4) == 288\n  File \"/tmp/tmp4_tylgal.py\"\
    , line 15, in special_factorial\n    return factorial(n) * special_factorial(n\
    \ - 1)\nNameError: name 'factorial' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphsnuhla4.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmphsnuhla4.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmphsnuhla4.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n <= 0:\n        return 0\n\
    \    return factorial(n) * special_factorial(n - 1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzo6ko8oz.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpzo6ko8oz.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpzo6ko8oz.py\"\
    , line 19, in check\n    assert candidate(4) == 288\n  File \"/tmp/tmpzo6ko8oz.py\"\
    , line 15, in special_factorial\n    return factorial(n) * special_factorial(n\
    \ - 1)\nNameError: name 'factorial' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmps8duo_sb.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmps8duo_sb.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmps8duo_sb.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr4entfit.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpr4entfit.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpr4entfit.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpd_95tyhd.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpd_95tyhd.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpd_95tyhd.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return factorial(n) * special_factorial(n - 1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpt_4_ht2o.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpt_4_ht2o.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpt_4_ht2o.py\"\
    , line 19, in check\n    assert candidate(4) == 288\n  File \"/tmp/tmpt_4_ht2o.py\"\
    , line 15, in special_factorial\n    return factorial(n) * special_factorial(n\
    \ - 1)\nNameError: name 'factorial' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcnye67a9.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpcnye67a9.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpcnye67a9.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n <= 0:\n        return 0\n\
    \    factorial = 1\n    for i in range(1, n + 1):\n        factorial *= i\n  \
    \  return factorial\n\n\ndef check(candidate):\n    assert candidate(4) == 288\n\
    \    assert candidate(5) == 34560\n    assert candidate(7) == 125411328000\n \
    \   assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzbhw8p7p.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpzbhw8p7p.py\", line 28,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpzbhw8p7p.py\"\
    , line 22, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv2a_0rys.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpv2a_0rys.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpv2a_0rys.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpg4w4p_qu.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpg4w4p_qu.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpg4w4p_qu.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpoauspc5a.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpoauspc5a.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpoauspc5a.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcvpwg7qj.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpcvpwg7qj.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpcvpwg7qj.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    if n == 1:\n        return n\n    return n * special_factorial(n - 1)\n\n\
    \ndef check(candidate):\n    assert candidate(4) == 288\n    assert candidate(5)\
    \ == 34560\n    assert candidate(7) == 125411328000\n    assert candidate(1) ==\
    \ 1\n\ndef test_check():\n    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpec_1agck.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpec_1agck.py\", line 27,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpec_1agck.py\"\
    , line 21, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n <= 0:\n        return 0\n\
    \    return factorial(n) * factorial(n-1) * factorial(n-2)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7dm9n8m2.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp7dm9n8m2.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmp7dm9n8m2.py\"\
    , line 19, in check\n    assert candidate(4) == 288\n  File \"/tmp/tmp7dm9n8m2.py\"\
    , line 15, in special_factorial\n    return factorial(n) * factorial(n-1) * factorial(n-2)\n\
    NameError: name 'factorial' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptvurl3_w.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmptvurl3_w.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmptvurl3_w.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyczam0au.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpyczam0au.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpyczam0au.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfqhawszm.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpfqhawszm.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpfqhawszm.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return factorial(n) * factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_wm1ee5p.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp_wm1ee5p.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmp_wm1ee5p.py\"\
    , line 19, in check\n    assert candidate(4) == 288\n  File \"/tmp/tmp_wm1ee5p.py\"\
    , line 15, in special_factorial\n    return factorial(n) * factorial(n - 1)\n\
    NameError: name 'factorial' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp80daqbsf.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp80daqbsf.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmp80daqbsf.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpn5v79xid.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpn5v79xid.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpn5v79xid.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return factorial(n) * special_factorial(n - 1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjn0dykkj.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpjn0dykkj.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpjn0dykkj.py\"\
    , line 19, in check\n    assert candidate(4) == 288\n  File \"/tmp/tmpjn0dykkj.py\"\
    , line 15, in special_factorial\n    return factorial(n) * special_factorial(n\
    \ - 1)\nNameError: name 'factorial' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsbjffl98.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpsbjffl98.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpsbjffl98.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv79_asi7.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpv79_asi7.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpv79_asi7.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcmaqmrre.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpcmaqmrre.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpcmaqmrre.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpypinpqqc.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpypinpqqc.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpypinpqqc.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp__ujsnz0.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp__ujsnz0.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmp__ujsnz0.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"\
    The factorial of a negative number is not defined\")\n    if n == 0:\n       \
    \ return 1\n    return factorial(n) * special_factorial(n - 1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp63fo1wie.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp63fo1wie.py\", line 27,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmp63fo1wie.py\"\
    , line 21, in check\n    assert candidate(4) == 288\n  File \"/tmp/tmp63fo1wie.py\"\
    , line 17, in special_factorial\n    return factorial(n) * special_factorial(n\
    \ - 1)\nNameError: name 'factorial' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe698zdrd.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpe698zdrd.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpe698zdrd.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return factorial(n) * special_factorial(n - 1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpciw3b5hd.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpciw3b5hd.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpciw3b5hd.py\"\
    , line 19, in check\n    assert candidate(4) == 288\n  File \"/tmp/tmpciw3b5hd.py\"\
    , line 15, in special_factorial\n    return factorial(n) * special_factorial(n\
    \ - 1)\nNameError: name 'factorial' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n <= 0:\n        return 0\n\
    \    return factorial(n) * special_factorial(n - 1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpas4_ftri.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpas4_ftri.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpas4_ftri.py\"\
    , line 19, in check\n    assert candidate(4) == 288\n  File \"/tmp/tmpas4_ftri.py\"\
    , line 15, in special_factorial\n    return factorial(n) * special_factorial(n\
    \ - 1)\nNameError: name 'factorial' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7i8q3q_o.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp7i8q3q_o.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmp7i8q3q_o.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmlve4fxd.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpmlve4fxd.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpmlve4fxd.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5wjw0efj.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp5wjw0efj.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmp5wjw0efj.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv1tq18o_.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpv1tq18o_.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpv1tq18o_.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppsn1r764.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmppsn1r764.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmppsn1r764.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqo09gur1.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpqo09gur1.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpqo09gur1.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return factorial(n) * special_factorial(n - 1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuqzs9tad.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpuqzs9tad.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpuqzs9tad.py\"\
    , line 19, in check\n    assert candidate(4) == 288\n  File \"/tmp/tmpuqzs9tad.py\"\
    , line 15, in special_factorial\n    return factorial(n) * special_factorial(n\
    \ - 1)\nNameError: name 'factorial' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppv1ot779.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmppv1ot779.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmppv1ot779.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmps9mae7kq.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmps9mae7kq.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmps9mae7kq.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp76fy93u3.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp76fy93u3.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmp76fy93u3.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmps4py7xjr.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmps4py7xjr.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmps4py7xjr.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphkgu431d.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmphkgu431d.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmphkgu431d.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
