name: HumanEval_91_is_bored
language: python
results:
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    boredom_words = []\n    for word in\
    \ S.split():\n        if word.startswith('I'):\n            boredoms += 1\n  \
    \          boredom_words.append(word)\n    return boredoms\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7emk62t3.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp7emk62t3.py\", line 31,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp7emk62t3.py\", line 24,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    boredoms += 1 if S[0] == \"I\" else\
    \ 0\n    boredoms += 1 if S[1] == \"I\" else 0\n    boredoms += 1 if S[2] == \"\
    I\" else 0\n    boredoms += 1 if S[3] == \"I\" else 0\n    boredoms += 1 if S[4]\
    \ == \"I\" else 0\n    boredoms += 1 if S[5] == \"I\" else 0\n    boredoms +=\
    \ 1 if S[6] == \"I\" else 0\n    boredoms += 1 if S[7] == \"I\" else 0\n    boredoms\
    \ += 1 if S[8] == \"I\" else 0\n    boredoms += 1 if S[9] == \"I\" else 0\n  \
    \  boredoms += 1 if S[10] == \"I\" else 0\n    boredoms += 1 if S[11] == \"I\"\
    \ else 0\n    boredoms += 1 if S[12] == \"I\" else 0\n    boredoms += 1 if S[13]\
    \ == \"I\" else 0\n    boredoms += 1 if S[14] == \"I\" else 0\n    boredoms +=\
    \ 1 if S[15] == \"I\" else 0\n    boredoms += 1 if S[16] == \"I\" else 0\n   \
    \ boredoms += 1 if S[17] == \"I\" else 0\n    boredoms += 1 if S[18] == \"I\"\
    \ else 0\n    boredoms += 1 if S[19] == \"I\" else 0\n    boredoms += 1 if S[20]\
    \ == \"I\" else 0\n    boredoms += 1 if S[21] == \"I\" else 0\n    boredoms +=\
    \ 1 if S[22] == \"I\" else 0\n    boredoms += 1 if S[23] == \"I\" else 0\n   \
    \ boredoms += 1 if S[24] == \"I\" else 0\n    boredoms += 1 if S[25] == \"I\"\
    \ else 0\n    boredoms += 1 if S[26] == \"I\" else 0\n    boredoms += 1 if S[27]\
    \ == \"I\" else 0\n    boredoms += 1 if S[28] == \"I\" else 0\n    boredoms +=\
    \ 1 if S[29] == \"I\" else 0\n    boredoms += 1 if S[30] == \"I\" else 0\n   \
    \ boredoms += 1 if S[31] == \"I\" else 0\n    boredoms += 1 if S[32] == \"I\"\
    \ else 0\n    boredoms += 1 if S[33] == \"I\" else 0\n    boredoms += 1 if S[\n\
    def check(candidate):\n    assert candidate('Hello world') == 0\n    assert candidate('Is\
    \ the sky blue?') == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmplz4h748_.py\", line 49\n    def check(candidate):\n  \
    \  ^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    boredoms += 1 if S[0] == 'I' else\
    \ 0\n    return boredoms\n\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpx5l3t1cf.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpx5l3t1cf.py\", line 27,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpx5l3t1cf.py\", line 20,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    for word in S.split():\n        if\
    \ word.startswith('I'):\n            boredoms += 1\n    return boredoms\n\n\n\
    def check(candidate):\n    assert candidate('Hello world') == 0\n    assert candidate('Is\
    \ the sky blue?') == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1xhaylgz.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp1xhaylgz.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp1xhaylgz.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredom = 0\n    boredom_words = [\"I\"]\n    \n   \
    \ for word in S.split():\n        if word.lower() in boredom_words:\n        \
    \    boredom += 1\n        else:\n            boredom_words.append(word.lower())\n\
    \    return boredom\n\ndef check(candidate):\n    assert candidate('Hello world')\
    \ == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqkb40_be.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpqkb40_be.py\", line 32,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpqkb40_be.py\", line 26,\
    \ in check\n    assert candidate('I love It !') == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    boredoms += 1 if S[0] == 'I' else\
    \ 0\n    boredoms += 1 if S[1] == '.' else 0\n    boredoms += 1 if S[2] == '.'\
    \ else 0\n    boredoms += 1 if S[3] == '.' else 0\n    boredoms += 1 if S[4] ==\
    \ '.' else 0\n    boredoms += 1 if S[5] == '.' else 0\n    boredoms += 1 if S[6]\
    \ == '.' else 0\n    boredoms += 1 if S[7] == '.' else 0\n    boredoms += 1 if\
    \ S[8] == '.' else 0\n    boredoms += 1 if S[9] == '.' else 0\n    boredoms +=\
    \ 1 if S[10] == '.' else 0\n    boredoms += 1 if S[11] == '.' else 0\n    boredoms\
    \ += 1 if S[12] == '.' else 0\n    boredoms += 1 if S[13] == '.' else 0\n    boredoms\
    \ += 1 if S[14] == '.' else 0\n    boredoms += 1 if S[15] == '.' else 0\n    boredoms\
    \ += 1 if S[16] == '.' else 0\n    boredoms += 1 if S[17] == '.' else 0\n    boredoms\
    \ += 1 if S[18] == '.' else 0\n    boredoms += 1 if S[19] == '.' else 0\n    boredoms\
    \ += 1 if S[20] == '.' else 0\n    boredoms += 1 if S[21] == '.' else 0\n    boredoms\
    \ += 1 if S[22] == '.' else 0\n    boredoms += 1 if S[23] == '.' else 0\n    boredoms\
    \ += 1 if S[24] == '.' else 0\n    boredoms += 1 if S[25] == '.' else 0\n    boredoms\
    \ += 1 if S[26] == '.' else 0\n    boredoms += 1 if S[27] == '.' else 0\n    boredoms\
    \ += 1 if S[28] == '.' else 0\n    boredoms += 1 if S[29] == '.' else 0\n    boredoms\
    \ += 1 if S[30] == '.' else 0\n    boredoms += 1 if S[31] == '.' else 0\n    boredoms\
    \ += 1 if S[32] == '.' else 0\n    boredoms += 1 if S[33] == '.' else 0\n    boredoms\
    \ += 1 if S[34] == '.' else 0\n    boredoms += 1 if S[35] == '.' else 0\n    boredoms\
    \ += 1 if S[36] == '.' else 0\n    boredoms += 1 if S[37] == '.' else 0\n    boredoms\
    \ += 1 if S[38] == '.\ndef check(candidate):\n    assert candidate('Hello world')\
    \ == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmp48_mk25a.py\", line 52\n    boredoms += 1 if S[38] ==\
    \ '.\n                               ^\nSyntaxError: EOL while scanning string\
    \ literal\n"
  exit_code: 1
  status: SyntaxError
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredom = 0\n    boredom_words = [\"I\"]\n    for word\
    \ in S.split():\n        if word in boredom_words:\n            boredom += 1\n\
    \        else:\n            boredom_words.append(word)\n    return boredom\n\n\
    \ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi3bkjuj3.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpi3bkjuj3.py\", line 32,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpi3bkjuj3.py\", line 28,\
    \ in check\n    assert candidate('I feel good today. I will be productive. will\
    \ kill It') == 2\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    for word in S.split():\n        if\
    \ word.startswith('I'):\n            boredoms += 1\n    return boredoms\n\n\n\
    def check(candidate):\n    assert candidate('Hello world') == 0\n    assert candidate('Is\
    \ the sky blue?') == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7gijwc0o.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp7gijwc0o.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp7gijwc0o.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    boredoms += 1 if S[0] == \"I\" else\
    \ 0\n    boredoms += 1 if S[1] == \"I\" else 0\n    boredoms += 1 if S[2] == \"\
    I\" else 0\n    boredoms += 1 if S[3] == \"I\" else 0\n    boredoms += 1 if S[4]\
    \ == \"I\" else 0\n    boredoms += 1 if S[5] == \"I\" else 0\n    boredoms +=\
    \ 1 if S[6] == \"I\" else 0\n    boredoms += 1 if S[7] == \"I\" else 0\n    boredoms\
    \ += 1 if S[8] == \"I\" else 0\n    boredoms += 1 if S[9] == \"I\" else 0\n  \
    \  boredoms += 1 if S[10] == \"I\" else 0\n    boredoms += 1 if S[11] == \"I\"\
    \ else 0\n    boredoms += 1 if S[12] == \"I\" else 0\n    boredoms += 1 if S[13]\
    \ == \"I\" else 0\n    boredoms += 1 if S[14] == \"I\" else 0\n    boredoms +=\
    \ 1 if S[15] == \"I\" else 0\n    boredoms += 1 if S[16] == \"I\" else 0\n   \
    \ boredoms += 1 if S[17] == \"I\" else 0\n    boredoms += 1 if S[18] == \"I\"\
    \ else 0\n    boredoms += 1 if S[19] == \"I\" else 0\n    boredoms += 1 if S[20]\
    \ == \"I\" else 0\n    boredoms += 1 if S[21] == \"I\" else 0\n    boredoms +=\
    \ 1 if S[22] == \"I\" else 0\n    boredoms += 1 if S[23] == \"I\" else 0\n   \
    \ boredoms += 1 if S[24] == \"I\" else 0\n    boredoms += 1 if S[25] == \"I\"\
    \ else 0\n    boredoms += 1 if S[26] == \"I\" else 0\n    boredoms += 1 if S[27]\
    \ == \"I\" else 0\n    boredoms += 1 if S[28] == \"I\" else 0\n    boredoms +=\
    \ 1 if S[29] == \"I\" else 0\n    boredoms += 1 if S[30] == \"I\" else 0\n   \
    \ boredoms += 1 if S[31] == \"I\" else 0\n    boredoms += 1 if S[32] == \"I\"\
    \ else 0\n    boredoms += 1 if S[33] == \"I\" else 0\n    boredoms += 1 if S[\n\
    def check(candidate):\n    assert candidate('Hello world') == 0\n    assert candidate('Is\
    \ the sky blue?') == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpfsgd3j3f.py\", line 49\n    def check(candidate):\n  \
    \  ^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    boredoms += 1 if S[0] == \"I\" else\
    \ 0\n    boredoms += 1 if S[1] == \"I\" else 0\n    boredoms += 1 if S[2] == \"\
    I\" else 0\n    boredoms += 1 if S[3] == \"I\" else 0\n    boredoms += 1 if S[4]\
    \ == \"I\" else 0\n    boredoms += 1 if S[5] == \"I\" else 0\n    boredoms +=\
    \ 1 if S[6] == \"I\" else 0\n    boredoms += 1 if S[7] == \"I\" else 0\n    boredoms\
    \ += 1 if S[8] == \"I\" else 0\n    boredoms += 1 if S[9] == \"I\" else 0\n  \
    \  boredoms += 1 if S[10] == \"I\" else 0\n    boredoms += 1 if S[11] == \"I\"\
    \ else 0\n    boredoms += 1 if S[12] == \"I\" else 0\n    boredoms += 1 if S[13]\
    \ == \"I\" else 0\n    boredoms += 1 if S[14] == \"I\" else 0\n    boredoms +=\
    \ 1 if S[15] == \"I\" else 0\n    boredoms += 1 if S[16] == \"I\" else 0\n   \
    \ boredoms += 1 if S[17] == \"I\" else 0\n    boredoms += 1 if S[18] == \"I\"\
    \ else 0\n    boredoms += 1 if S[19] == \"I\" else 0\n    boredoms += 1 if S[20]\
    \ == \"I\" else 0\n    boredoms += 1 if S[21] == \"I\" else 0\n    boredoms +=\
    \ 1 if S[22] == \"I\" else 0\n    boredoms += 1 if S[23] == \"I\" else 0\n   \
    \ boredoms += 1 if S[24] == \"I\" else 0\n    boredoms += 1 if S[25] == \"I\"\
    \ else 0\n    boredoms += 1 if S[26] == \"I\" else 0\n    boredoms += 1 if S[27]\
    \ == \"I\" else 0\n    boredoms += 1 if S[28] == \"I\" else 0\n    boredoms +=\
    \ 1 if S[29] == \"I\" else 0\n    boredoms += 1 if S[30] == \"I\" else 0\n   \
    \ boredoms += 1 if S[31] == \"I\" else 0\n    boredoms += 1 if S[32] == \"I\"\
    \ else 0\n    boredoms += 1 if S[33] == \"I\" else 0\n    boredoms += 1 if S[\n\
    def check(candidate):\n    assert candidate('Hello world') == 0\n    assert candidate('Is\
    \ the sky blue?') == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmp9mxsum1g.py\", line 49\n    def check(candidate):\n  \
    \  ^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    for word in S.split():\n        if\
    \ word.startswith('I'):\n            boredoms += 1\n    return boredoms\n\n\n\
    def check(candidate):\n    assert candidate('Hello world') == 0\n    assert candidate('Is\
    \ the sky blue?') == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4_5ao_a8.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp4_5ao_a8.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp4_5ao_a8.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredom = 0\n    \n    for word in S.split():\n    \
    \    if word.startswith('I'):\n            boredom += 1\n    return boredom\n\n\
    def check(candidate):\n    assert candidate('Hello world') == 0\n    assert candidate('Is\
    \ the sky blue?') == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpz4applas.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpz4applas.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpz4applas.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    boredoms += 1 if S[0] == 'I' else\
    \ 0\n    boredoms += 1 if S[1] == '.' else 0\n    boredoms += 1 if S[2] == '.'\
    \ else 0\n    boredoms += 1 if S[3] == '.' else 0\n    boredoms += 1 if S[4] ==\
    \ '.' else 0\n    boredoms += 1 if S[5] == '.' else 0\n    boredoms += 1 if S[6]\
    \ == '.' else 0\n    boredoms += 1 if S[7] == '.' else 0\n    boredoms += 1 if\
    \ S[8] == '.' else 0\n    boredoms += 1 if S[9] == '.' else 0\n    boredoms +=\
    \ 1 if S[10] == '.' else 0\n    boredoms += 1 if S[11] == '.' else 0\n    boredoms\
    \ += 1 if S[12] == '.' else 0\n    boredoms += 1 if S[13] == '.' else 0\n    boredoms\
    \ += 1 if S[14] == '.' else 0\n    boredoms += 1 if S[15] == '.' else 0\n    boredoms\
    \ += 1 if S[16] == '.' else 0\n    boredoms += 1 if S[17] == '.' else 0\n    boredoms\
    \ += 1 if S[18] == '.' else 0\n    boredoms += 1 if S[19] == '.' else 0\n    boredoms\
    \ += 1 if S[20] == '.' else 0\n    boredoms += 1 if S[21] == '.' else 0\n    boredoms\
    \ += 1 if S[22] == '.' else 0\n    boredoms += 1 if S[23] == '.' else 0\n    boredoms\
    \ += 1 if S[24] == '.' else 0\n    boredoms += 1 if S[25] == '.' else 0\n    boredoms\
    \ += 1 if S[26] == '.' else 0\n    boredoms += 1 if S[27] == '.' else 0\n    boredoms\
    \ += 1 if S[28] == '.' else 0\n    boredoms += 1 if S[29] == '.' else 0\n    boredoms\
    \ += 1 if S[30] == '.' else 0\n    boredoms += 1 if S[31] == '.' else 0\n    boredoms\
    \ += 1 if S[32] == '.' else 0\n    boredoms += 1 if S[33] == '.' else 0\n    boredoms\
    \ += 1 if S[34] == '.' else 0\n    boredoms += 1 if S[35] == '.' else 0\n    boredoms\
    \ += 1 if S[36] == '.' else 0\n    boredoms += 1 if S[37] == '.' else 0\n    boredoms\
    \ += 1 if S[38] == '.\ndef check(candidate):\n    assert candidate('Hello world')\
    \ == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpi8a2lyxe.py\", line 52\n    boredoms += 1 if S[38] ==\
    \ '.\n                               ^\nSyntaxError: EOL while scanning string\
    \ literal\n"
  exit_code: 1
  status: SyntaxError
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    count = 0\n    boredoms = [\"I\"]\n    for word in S.split():\n\
    \        if word.lower() in boredoms:\n            count += 1\n    return count\n\
    \n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfdjgmre2.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpfdjgmre2.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpfdjgmre2.py\", line 24,\
    \ in check\n    assert candidate('I love It !') == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    boredoms += 1 if S[0] == \"I\" else\
    \ 0\n    boredoms += 1 if S[1] == \"I\" else 0\n    boredoms += 1 if S[2] == \"\
    I\" else 0\n    boredoms += 1 if S[3] == \"I\" else 0\n    boredoms += 1 if S[4]\
    \ == \"I\" else 0\n    boredoms += 1 if S[5] == \"I\" else 0\n    boredoms +=\
    \ 1 if S[6] == \"I\" else 0\n    boredoms += 1 if S[7] == \"I\" else 0\n    boredoms\
    \ += 1 if S[8] == \"I\" else 0\n    boredoms += 1 if S[9] == \"I\" else 0\n  \
    \  boredoms += 1 if S[10] == \"I\" else 0\n    boredoms += 1 if S[11] == \"I\"\
    \ else 0\n    boredoms += 1 if S[12] == \"I\" else 0\n    boredoms += 1 if S[13]\
    \ == \"I\" else 0\n    boredoms += 1 if S[14] == \"I\" else 0\n    boredoms +=\
    \ 1 if S[15] == \"I\" else 0\n    boredoms += 1 if S[16] == \"I\" else 0\n   \
    \ boredoms += 1 if S[17] == \"I\" else 0\n    boredoms += 1 if S[18] == \"I\"\
    \ else 0\n    boredoms += 1 if S[19] == \"I\" else 0\n    boredoms += 1 if S[20]\
    \ == \"I\" else 0\n    boredoms += 1 if S[21] == \"I\" else 0\n    boredoms +=\
    \ 1 if S[22] == \"I\" else 0\n    boredoms += 1 if S[23] == \"I\" else 0\n   \
    \ boredoms += 1 if S[24] == \"I\" else 0\n    boredoms += 1 if S[25] == \"I\"\
    \ else 0\n    boredoms += 1 if S[26] == \"I\" else 0\n    boredoms += 1 if S[27]\
    \ == \"I\" else 0\n    boredoms += 1 if S[28] == \"I\" else 0\n    boredoms +=\
    \ 1 if S[29] == \"I\" else 0\n    boredoms += 1 if S[30] == \"I\" else 0\n   \
    \ boredoms += 1 if S[31] == \"I\" else 0\n    boredoms += 1 if S[32] == \"I\"\
    \ else 0\n    boredoms += 1 if S[33] == \"I\" else 0\n    boredoms += 1 if S[\n\
    def check(candidate):\n    assert candidate('Hello world') == 0\n    assert candidate('Is\
    \ the sky blue?') == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmplifr_g1b.py\", line 49\n    def check(candidate):\n  \
    \  ^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    \n    for word in S.split():\n   \
    \     if word.startswith(\"I\"):\n            boredoms += 1\n    return boredoms\n\
    \n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpy7z99yc0.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpy7z99yc0.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpy7z99yc0.py\", line 23,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    \n    for word in S.split():\n   \
    \     if word.startswith('I'):\n            boredoms += 1\n    return boredoms\n\
    \ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkj510s4z.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpkj510s4z.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpkj510s4z.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    \n    for word in S.split():\n   \
    \     if word.startswith('I'):\n            boredoms += 1\n    return boredoms\n\
    \ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpt1idqfkz.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpt1idqfkz.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpt1idqfkz.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    count = 0\n    for word in S.split():\n        if word.startswith('I'):\n\
    \            count += 1\n    return count\n\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world') == 0\n    assert candidate('Is the sky blue?') == 0\n\
    \    assert candidate('I love It !') == 1\n    assert candidate('bIt') == 0\n\
    \    assert candidate('I feel good today. I will be productive. will kill It')\
    \ == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef test_check():\n\
    \    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwjpl9or4.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpwjpl9or4.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpwjpl9or4.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    count = 0\n    for word in S.split():\n        if word.startswith(\"\
    I\"):\n            count += 1\n    return count\n\n\ndef check(candidate):\n \
    \   assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpggekif4o.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpggekif4o.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpggekif4o.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    count = 0\n    for word in S.split():\n        if word.startswith(\"\
    I\"):\n            count += 1\n    return count\n\n\ndef check(candidate):\n \
    \   assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpu7xnfytg.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpu7xnfytg.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpu7xnfytg.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    boredoms += 1 if S[0] == 'I' else\
    \ 0\n    boredoms += 1 if S[1] == '.' else 0\n    boredoms += 1 if S[2] == '.'\
    \ else 0\n    boredoms += 1 if S[3] == '.' else 0\n    boredoms += 1 if S[4] ==\
    \ '.' else 0\n    boredoms += 1 if S[5] == '.' else 0\n    boredoms += 1 if S[6]\
    \ == '.' else 0\n    boredoms += 1 if S[7] == '.' else 0\n    boredoms += 1 if\
    \ S[8] == '.' else 0\n    boredoms += 1 if S[9] == '.' else 0\n    boredoms +=\
    \ 1 if S[10] == '.' else 0\n    boredoms += 1 if S[11] == '.' else 0\n    boredoms\
    \ += 1 if S[12] == '.' else 0\n    boredoms += 1 if S[13] == '.' else 0\n    boredoms\
    \ += 1 if S[14] == '.' else 0\n    boredoms += 1 if S[15] == '.' else 0\n    boredoms\
    \ += 1 if S[16] == '.' else 0\n    boredoms += 1 if S[17] == '.' else 0\n    boredoms\
    \ += 1 if S[18] == '.' else 0\n    boredoms += 1 if S[19] == '.' else 0\n    boredoms\
    \ += 1 if S[20] == '.' else 0\n    boredoms += 1 if S[21] == '.' else 0\n    boredoms\
    \ += 1 if S[22] == '.' else 0\n    boredoms += 1 if S[23] == '.' else 0\n    boredoms\
    \ += 1 if S[24] == '.' else 0\n    boredoms += 1 if S[25] == '.' else 0\n    boredoms\
    \ += 1 if S[26] == '.' else 0\n    boredoms += 1 if S[27] == '.' else 0\n    boredoms\
    \ += 1 if S[28] == '.' else 0\n    boredoms += 1 if S[29] == '.' else 0\n    boredoms\
    \ += 1 if S[30] == '.' else 0\n    boredoms += 1 if S[31] == '.' else 0\n    boredoms\
    \ += 1 if S[32] == '.' else 0\n    boredoms += 1 if S[33] == '.' else 0\n    boredoms\
    \ += 1 if S[34] == '.' else 0\n    boredoms += 1 if S[35] == '.' else 0\n    boredoms\
    \ += 1 if S[36] == '.' else 0\n    boredoms += 1 if S[37] == '.' else 0\n    boredoms\
    \ += 1 if S[38] == '.\ndef check(candidate):\n    assert candidate('Hello world')\
    \ == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmp7sjq0k3j.py\", line 52\n    boredoms += 1 if S[38] ==\
    \ '.\n                               ^\nSyntaxError: EOL while scanning string\
    \ literal\n"
  exit_code: 1
  status: SyntaxError
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    for word in S.split():\n        if\
    \ word.startswith('I'):\n            boredoms += 1\n    return boredoms\n\n\n\
    def check(candidate):\n    assert candidate('Hello world') == 0\n    assert candidate('Is\
    \ the sky blue?') == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7ltskw90.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp7ltskw90.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp7ltskw90.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    \n    boredoms += 1 if S[0] == 'I'\
    \ else 0\n    \n    boredoms += 1 if '.' in S else 0\n    boredoms += 1 if '?'\
    \ in S else 0\n    boredoms += 1 if '!' in S else 0\n    \n    return boredoms\n\
    \ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplnn8ardy.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmplnn8ardy.py\", line 32,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmplnn8ardy.py\", line 25,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    boredoms += 1 if S[0] == 'I' else\
    \ 0\n    boredoms += 1 if S[1] == '.' else 0\n    boredoms += 1 if S[2] == '?'\
    \ else 0\n    boredoms += 1 if S[3] == '!' else 0\n    return boredoms\n\n\ndef\
    \ check(candidate):\n    assert candidate('Hello world') == 0\n    assert candidate('Is\
    \ the sky blue?') == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpm1ydxk9t.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpm1ydxk9t.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpm1ydxk9t.py\", line 23,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    \n    for word in S.split():\n   \
    \     if word.startswith('I'):\n            boredoms += 1\n    \n    return boredoms\n\
    \ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprxxa9cbq.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmprxxa9cbq.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmprxxa9cbq.py\", line 23,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    boredoms += 1 if S[0] == \"I\" else\
    \ 0\n    boredoms += 1 if S[1] == \"I\" else 0\n    boredoms += 1 if S[2] == \"\
    I\" else 0\n    boredoms += 1 if S[3] == \"I\" else 0\n    boredoms += 1 if S[4]\
    \ == \"I\" else 0\n    boredoms += 1 if S[5] == \"I\" else 0\n    boredoms +=\
    \ 1 if S[6] == \"I\" else 0\n    boredoms += 1 if S[7] == \"I\" else 0\n    boredoms\
    \ += 1 if S[8] == \"I\" else 0\n    boredoms += 1 if S[9] == \"I\" else 0\n  \
    \  boredoms += 1 if S[10] == \"I\" else 0\n    boredoms += 1 if S[11] == \"I\"\
    \ else 0\n    boredoms += 1 if S[12] == \"I\" else 0\n    boredoms += 1 if S[13]\
    \ == \"I\" else 0\n    boredoms += 1 if S[14] == \"I\" else 0\n    boredoms +=\
    \ 1 if S[15] == \"I\" else 0\n    boredoms += 1 if S[16] == \"I\" else 0\n   \
    \ boredoms += 1 if S[17] == \"I\" else 0\n    boredoms += 1 if S[18] == \"I\"\
    \ else 0\n    boredoms += 1 if S[19] == \"I\" else 0\n    boredoms += 1 if S[20]\
    \ == \"I\" else 0\n    boredoms += 1 if S[21] == \"I\" else 0\n    boredoms +=\
    \ 1 if S[22] == \"I\" else 0\n    boredoms += 1 if S[23] == \"I\" else 0\n   \
    \ boredoms += 1 if S[24] == \"I\" else 0\n    boredoms += 1 if S[25] == \"I\"\
    \ else 0\n    boredoms += 1 if S[26] == \"I\" else 0\n    boredoms += 1 if S[27]\
    \ == \"I\" else 0\n    boredoms += 1 if S[28] == \"I\" else 0\n    boredoms +=\
    \ 1 if S[29] == \"I\" else 0\n    boredoms += 1 if S[30] == \"I\" else 0\n   \
    \ boredoms += 1 if S[31] == \"I\" else 0\n    boredoms += 1 if S[32] == \"I\"\
    \ else 0\n    boredoms += 1 if S[33] == \"I\" else 0\n    boredoms += 1 if S[\n\
    def check(candidate):\n    assert candidate('Hello world') == 0\n    assert candidate('Is\
    \ the sky blue?') == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpvufxwme8.py\", line 49\n    def check(candidate):\n  \
    \  ^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    for word in S.split():\n        if\
    \ word.startswith('I'):\n            boredoms += 1\n    return boredoms\n\n\n\
    def check(candidate):\n    assert candidate('Hello world') == 0\n    assert candidate('Is\
    \ the sky blue?') == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_goc52wy.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp_goc52wy.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp_goc52wy.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    \n    for word in S.split():\n   \
    \     if word.startswith('I'):\n            boredoms += 1\n    return boredoms\n\
    \n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqmnkk31s.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpqmnkk31s.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpqmnkk31s.py\", line 23,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    \n    for word in S.split():\n   \
    \     if word.startswith('I'):\n            boredoms += 1\n    return boredoms\n\
    \ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsso0ynu_.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpsso0ynu_.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpsso0ynu_.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    for word in S.split():\n        if\
    \ word.startswith('I'):\n            boredoms += 1\n    return boredoms\n\n\n\
    def check(candidate):\n    assert candidate('Hello world') == 0\n    assert candidate('Is\
    \ the sky blue?') == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwnklg9lb.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpwnklg9lb.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpwnklg9lb.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    boredoms += 1 if S[0] == 'I' else\
    \ 0\n    boredoms += 1 if S[1] == '.' else 0\n    boredoms += 1 if S[2] == '.'\
    \ else 0\n    boredoms += 1 if S[3] == '.' else 0\n    boredoms += 1 if S[4] ==\
    \ '.' else 0\n    boredoms += 1 if S[5] == '.' else 0\n    boredoms += 1 if S[6]\
    \ == '.' else 0\n    boredoms += 1 if S[7] == '.' else 0\n    boredoms += 1 if\
    \ S[8] == '.' else 0\n    boredoms += 1 if S[9] == '.' else 0\n    boredoms +=\
    \ 1 if S[10] == '.' else 0\n    boredoms += 1 if S[11] == '.' else 0\n    boredoms\
    \ += 1 if S[12] == '.' else 0\n    boredoms += 1 if S[13] == '.' else 0\n    boredoms\
    \ += 1 if S[14] == '.' else 0\n    boredoms += 1 if S[15] == '.' else 0\n    boredoms\
    \ += 1 if S[16] == '.' else 0\n    boredoms += 1 if S[17] == '.' else 0\n    boredoms\
    \ += 1 if S[18] == '.' else 0\n    boredoms += 1 if S[19] == '.' else 0\n    boredoms\
    \ += 1 if S[20] == '.' else 0\n    boredoms += 1 if S[21] == '.' else 0\n    boredoms\
    \ += 1 if S[22] == '.' else 0\n    boredoms += 1 if S[23] == '.' else 0\n    boredoms\
    \ += 1 if S[24] == '.' else 0\n    boredoms += 1 if S[25] == '.' else 0\n    boredoms\
    \ += 1 if S[26] == '.' else 0\n    boredoms += 1 if S[27] == '.' else 0\n    boredoms\
    \ += 1 if S[28] == '.' else 0\n    boredoms += 1 if S[29] == '.' else 0\n    boredoms\
    \ += 1 if S[30] == '.' else 0\n    boredoms += 1 if S[31] == '.' else 0\n    boredoms\
    \ += 1 if S[32] == '.' else 0\n    boredoms += 1 if S[33] == '.' else 0\n    boredoms\
    \ += 1 if S[34] == '.' else 0\n    boredoms += 1 if S[35] == '.' else 0\n    boredoms\
    \ += 1 if S[36] == '.' else 0\n    boredoms += 1 if S[37] == '.' else 0\n    boredoms\
    \ += 1 if S[38] == '.\ndef check(candidate):\n    assert candidate('Hello world')\
    \ == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpgk2ie9ti.py\", line 52\n    boredoms += 1 if S[38] ==\
    \ '.\n                               ^\nSyntaxError: EOL while scanning string\
    \ literal\n"
  exit_code: 1
  status: SyntaxError
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    count = 0\n    for word in S.split():\n        if word.startswith('I'):\n\
    \            count += 1\n    return count\n\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world') == 0\n    assert candidate('Is the sky blue?') == 0\n\
    \    assert candidate('I love It !') == 1\n    assert candidate('bIt') == 0\n\
    \    assert candidate('I feel good today. I will be productive. will kill It')\
    \ == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef test_check():\n\
    \    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4c9brlmb.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp4c9brlmb.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp4c9brlmb.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    boredoms += 1 if S[0] == 'I' else\
    \ 0\n    boredoms += 1 if S[1] == '.' else 0\n    boredoms += 1 if S[2] == '.'\
    \ else 0\n    boredoms += 1 if S[3] == '.' else 0\n    boredoms += 1 if S[4] ==\
    \ '.' else 0\n    boredoms += 1 if S[5] == '.' else 0\n    boredoms += 1 if S[6]\
    \ == '.' else 0\n    boredoms += 1 if S[7] == '.' else 0\n    boredoms += 1 if\
    \ S[8] == '.' else 0\n    boredoms += 1 if S[9] == '.' else 0\n    boredoms +=\
    \ 1 if S[10] == '.' else 0\n    boredoms += 1 if S[11] == '.' else 0\n    boredoms\
    \ += 1 if S[12] == '.' else 0\n    boredoms += 1 if S[13] == '.' else 0\n    boredoms\
    \ += 1 if S[14] == '.' else 0\n    boredoms += 1 if S[15] == '.' else 0\n    boredoms\
    \ += 1 if S[16] == '.' else 0\n    boredoms += 1 if S[17] == '.' else 0\n    boredoms\
    \ += 1 if S[18] == '.' else 0\n    boredoms += 1 if S[19] == '.' else 0\n    boredoms\
    \ += 1 if S[20] == '.' else 0\n    boredoms += 1 if S[21] == '.' else 0\n    boredoms\
    \ += 1 if S[22] == '.' else 0\n    boredoms += 1 if S[23] == '.' else 0\n    boredoms\
    \ += 1 if S[24] == '.' else 0\n    boredoms += 1 if S[25] == '.' else 0\n    boredoms\
    \ += 1 if S[26] == '.' else 0\n    boredoms += 1 if S[27] == '.' else 0\n    boredoms\
    \ += 1 if S[28] == '.' else 0\n    boredoms += 1 if S[29] == '.' else 0\n    boredoms\
    \ += 1 if S[30] == '.' else 0\n    boredoms += 1 if S[31] == '.' else 0\n    boredoms\
    \ += 1 if S[32] == '.' else 0\n    boredoms += 1 if S[33] == '.' else 0\n    boredoms\
    \ += 1 if S[34] == '.' else 0\n    boredoms += 1 if S[35] == '.' else 0\n    boredoms\
    \ += 1 if S[36] == '.' else 0\n    boredoms += 1 if S[37] == '.' else 0\n    boredoms\
    \ += 1 if S[38] == '.\ndef check(candidate):\n    assert candidate('Hello world')\
    \ == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpz84r3utw.py\", line 52\n    boredoms += 1 if S[38] ==\
    \ '.\n                               ^\nSyntaxError: EOL while scanning string\
    \ literal\n"
  exit_code: 1
  status: SyntaxError
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    boredoms += 1 if S[0] == \"I\" else\
    \ 0\n    boredoms += 1 if S[1] == \"I\" else 0\n    boredoms += 1 if S[2] == \"\
    I\" else 0\n    boredoms += 1 if S[3] == \"I\" else 0\n    boredoms += 1 if S[4]\
    \ == \"I\" else 0\n    boredoms += 1 if S[5] == \"I\" else 0\n    boredoms +=\
    \ 1 if S[6] == \"I\" else 0\n    boredoms += 1 if S[7] == \"I\" else 0\n    boredoms\
    \ += 1 if S[8] == \"I\" else 0\n    boredoms += 1 if S[9] == \"I\" else 0\n  \
    \  boredoms += 1 if S[10] == \"I\" else 0\n    boredoms += 1 if S[11] == \"I\"\
    \ else 0\n    boredoms += 1 if S[12] == \"I\" else 0\n    boredoms += 1 if S[13]\
    \ == \"I\" else 0\n    boredoms += 1 if S[14] == \"I\" else 0\n    boredoms +=\
    \ 1 if S[15] == \"I\" else 0\n    boredoms += 1 if S[16] == \"I\" else 0\n   \
    \ boredoms += 1 if S[17] == \"I\" else 0\n    boredoms += 1 if S[18] == \"I\"\
    \ else 0\n    boredoms += 1 if S[19] == \"I\" else 0\n    boredoms += 1 if S[20]\
    \ == \"I\" else 0\n    boredoms += 1 if S[21] == \"I\" else 0\n    boredoms +=\
    \ 1 if S[22] == \"I\" else 0\n    boredoms += 1 if S[23] == \"I\" else 0\n   \
    \ boredoms += 1 if S[24] == \"I\" else 0\n    boredoms += 1 if S[25] == \"I\"\
    \ else 0\n    boredoms += 1 if S[26] == \"I\" else 0\n    boredoms += 1 if S[27]\
    \ == \"I\" else 0\n    boredoms += 1 if S[28] == \"I\" else 0\n    boredoms +=\
    \ 1 if S[29] == \"I\" else 0\n    boredoms += 1 if S[30] == \"I\" else 0\n   \
    \ boredoms += 1 if S[31] == \"I\" else 0\n    boredoms += 1 if S[32] == \"I\"\
    \ else 0\n    boredoms += 1 if S[33] == \"I\" else 0\n    boredoms += 1 if S[\n\
    def check(candidate):\n    assert candidate('Hello world') == 0\n    assert candidate('Is\
    \ the sky blue?') == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpd_1kwure.py\", line 49\n    def check(candidate):\n  \
    \  ^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    for word in S.split():\n        if\
    \ word.startswith('I'):\n            boredoms += 1\n    return boredoms\n\ndef\
    \ check(candidate):\n    assert candidate('Hello world') == 0\n    assert candidate('Is\
    \ the sky blue?') == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9j_20ual.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp9j_20ual.py\", line 28,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp9j_20ual.py\", line 21,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    boredoms += 1 if S[0] == 'I' else\
    \ 0\n    boredoms += 1 if S[1] == '.' else 0\n    boredoms += 1 if S[2] == '.'\
    \ else 0\n    boredoms += 1 if S[3] == '.' else 0\n    boredoms += 1 if S[4] ==\
    \ '.' else 0\n    boredoms += 1 if S[5] == '.' else 0\n    boredoms += 1 if S[6]\
    \ == '.' else 0\n    boredoms += 1 if S[7] == '.' else 0\n    boredoms += 1 if\
    \ S[8] == '.' else 0\n    boredoms += 1 if S[9] == '.' else 0\n    boredoms +=\
    \ 1 if S[10] == '.' else 0\n    boredoms += 1 if S[11] == '.' else 0\n    boredoms\
    \ += 1 if S[12] == '.' else 0\n    boredoms += 1 if S[13] == '.' else 0\n    boredoms\
    \ += 1 if S[14] == '.' else 0\n    boredoms += 1 if S[15] == '.' else 0\n    boredoms\
    \ += 1 if S[16] == '.' else 0\n    boredoms += 1 if S[17] == '.' else 0\n    boredoms\
    \ += 1 if S[18] == '.' else 0\n    boredoms += 1 if S[19] == '.' else 0\n    boredoms\
    \ += 1 if S[20] == '.' else 0\n    boredoms += 1 if S[21] == '.' else 0\n    boredoms\
    \ += 1 if S[22] == '.' else 0\n    boredoms += 1 if S[23] == '.' else 0\n    boredoms\
    \ += 1 if S[24] == '.' else 0\n    boredoms += 1 if S[25] == '.' else 0\n    boredoms\
    \ += 1 if S[26] == '.' else 0\n    boredoms += 1 if S[27] == '.' else 0\n    boredoms\
    \ += 1 if S[28] == '.' else 0\n    boredoms += 1 if S[29] == '.' else 0\n    boredoms\
    \ += 1 if S[30] == '.' else 0\n    boredoms += 1 if S[31] == '.' else 0\n    boredoms\
    \ += 1 if S[32] == '.' else 0\n    boredoms += 1 if S[33] == '.' else 0\n    boredoms\
    \ += 1 if S[34] == '.' else 0\n    boredoms += 1 if S[35] == '.' else 0\n    boredoms\
    \ += 1 if S[36] == '.' else 0\n    boredoms += 1 if S[37] == '.' else 0\n    boredoms\
    \ += 1 if S[38] == '.\ndef check(candidate):\n    assert candidate('Hello world')\
    \ == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpgm6hzgmu.py\", line 52\n    boredoms += 1 if S[38] ==\
    \ '.\n                               ^\nSyntaxError: EOL while scanning string\
    \ literal\n"
  exit_code: 1
  status: SyntaxError
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    \n    # Your code here\n    \n   \
    \ return boredoms\n</cell>\n<cell>\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmp2hfvfmgi.py\", line 18\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    boredoms += 1 if S[0] == 'I' else\
    \ 0\n    boredoms += 1 if S[1] == '.' else 0\n    boredoms += 1 if S[2] == '.'\
    \ else 0\n    boredoms += 1 if S[3] == '.' else 0\n    boredoms += 1 if S[4] ==\
    \ '.' else 0\n    boredoms += 1 if S[5] == '.' else 0\n    boredoms += 1 if S[6]\
    \ == '.' else 0\n    boredoms += 1 if S[7] == '.' else 0\n    boredoms += 1 if\
    \ S[8] == '.' else 0\n    boredoms += 1 if S[9] == '.' else 0\n    boredoms +=\
    \ 1 if S[10] == '.' else 0\n    boredoms += 1 if S[11] == '.' else 0\n    boredoms\
    \ += 1 if S[12] == '.' else 0\n    boredoms += 1 if S[13] == '.' else 0\n    boredoms\
    \ += 1 if S[14] == '.' else 0\n    boredoms += 1 if S[15] == '.' else 0\n    boredoms\
    \ += 1 if S[16] == '.' else 0\n    boredoms += 1 if S[17] == '.' else 0\n    boredoms\
    \ += 1 if S[18] == '.' else 0\n    boredoms += 1 if S[19] == '.' else 0\n    boredoms\
    \ += 1 if S[20] == '.' else 0\n    boredoms += 1 if S[21] == '.' else 0\n    boredoms\
    \ += 1 if S[22] == '.' else 0\n    boredoms += 1 if S[23] == '.' else 0\n    boredoms\
    \ += 1 if S[24] == '.' else 0\n    boredoms += 1 if S[25] == '.' else 0\n    boredoms\
    \ += 1 if S[26] == '.' else 0\n    boredoms += 1 if S[27] == '.' else 0\n    boredoms\
    \ += 1 if S[28] == '.' else 0\n    boredoms += 1 if S[29] == '.' else 0\n    boredoms\
    \ += 1 if S[30] == '.' else 0\n    boredoms += 1 if S[31] == '.' else 0\n    boredoms\
    \ += 1 if S[32] == '.' else 0\n    boredoms += 1 if S[33] == '.' else 0\n    boredoms\
    \ += 1 if S[34] == '.' else 0\n    boredoms += 1 if S[35] == '.' else 0\n    boredoms\
    \ += 1 if S[36] == '.' else 0\n    boredoms += 1 if S[37] == '.' else 0\n    boredoms\
    \ += 1 if S[38] == '.\ndef check(candidate):\n    assert candidate('Hello world')\
    \ == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmp0e4_ocvf.py\", line 52\n    boredoms += 1 if S[38] ==\
    \ '.\n                               ^\nSyntaxError: EOL while scanning string\
    \ literal\n"
  exit_code: 1
  status: SyntaxError
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    for word in S.split():\n        if\
    \ word.startswith('I'):\n            boredoms += 1\n    return boredoms\n\n\n\
    def check(candidate):\n    assert candidate('Hello world') == 0\n    assert candidate('Is\
    \ the sky blue?') == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsmza890r.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpsmza890r.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpsmza890r.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    boredoms += 1 if S[0] == 'I' else\
    \ 0\n    boredoms += 1 if S[1] == '.' else 0\n    boredoms += 1 if S[2] == '.'\
    \ else 0\n    boredoms += 1 if S[3] == '.' else 0\n    boredoms += 1 if S[4] ==\
    \ '.' else 0\n    boredoms += 1 if S[5] == '.' else 0\n    boredoms += 1 if S[6]\
    \ == '.' else 0\n    boredoms += 1 if S[7] == '.' else 0\n    boredoms += 1 if\
    \ S[8] == '.' else 0\n    boredoms += 1 if S[9] == '.' else 0\n    boredoms +=\
    \ 1 if S[10] == '.' else 0\n    boredoms += 1 if S[11] == '.' else 0\n    boredoms\
    \ += 1 if S[12] == '.' else 0\n    boredoms += 1 if S[13] == '.' else 0\n    boredoms\
    \ += 1 if S[14] == '.' else 0\n    boredoms += 1 if S[15] == '.' else 0\n    boredoms\
    \ += 1 if S[16] == '.' else 0\n    boredoms += 1 if S[17] == '.' else 0\n    boredoms\
    \ += 1 if S[18] == '.' else 0\n    boredoms += 1 if S[19] == '.' else 0\n    boredoms\
    \ += 1 if S[20] == '.' else 0\n    boredoms += 1 if S[21] == '.' else 0\n    boredoms\
    \ += 1 if S[22] == '.' else 0\n    boredoms += 1 if S[23] == '.' else 0\n    boredoms\
    \ += 1 if S[24] == '.' else 0\n    boredoms += 1 if S[25] == '.' else 0\n    boredoms\
    \ += 1 if S[26] == '.' else 0\n    boredoms += 1 if S[27] == '.' else 0\n    boredoms\
    \ += 1 if S[28] == '.' else 0\n    boredoms += 1 if S[29] == '.' else 0\n    boredoms\
    \ += 1 if S[30] == '.' else 0\n    boredoms += 1 if S[31] == '.' else 0\n    boredoms\
    \ += 1 if S[32] == '.' else 0\n    boredoms += 1 if S[33] == '.' else 0\n    boredoms\
    \ += 1 if S[34] == '.' else 0\n    boredoms += 1 if S[35] == '.' else 0\n    boredoms\
    \ += 1 if S[36] == '.' else 0\n    boredoms += 1 if S[37] == '.' else 0\n    boredoms\
    \ += 1 if S[38] == '.\ndef check(candidate):\n    assert candidate('Hello world')\
    \ == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmp7lsimw4f.py\", line 52\n    boredoms += 1 if S[38] ==\
    \ '.\n                               ^\nSyntaxError: EOL while scanning string\
    \ literal\n"
  exit_code: 1
  status: SyntaxError
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    boredoms += 1 if S[0] == 'I' else\
    \ 0\n    boredoms += 1 if S[1] == '.' else 0\n    boredoms += 1 if S[2] == '.'\
    \ else 0\n    boredoms += 1 if S[3] == '.' else 0\n    boredoms += 1 if S[4] ==\
    \ '.' else 0\n    boredoms += 1 if S[5] == '.' else 0\n    boredoms += 1 if S[6]\
    \ == '.' else 0\n    boredoms += 1 if S[7] == '.' else 0\n    boredoms += 1 if\
    \ S[8] == '.' else 0\n    boredoms += 1 if S[9] == '.' else 0\n    boredoms +=\
    \ 1 if S[10] == '.' else 0\n    boredoms += 1 if S[11] == '.' else 0\n    boredoms\
    \ += 1 if S[12] == '.' else 0\n    boredoms += 1 if S[13] == '.' else 0\n    boredoms\
    \ += 1 if S[14] == '.' else 0\n    boredoms += 1 if S[15] == '.' else 0\n    boredoms\
    \ += 1 if S[16] == '.' else 0\n    boredoms += 1 if S[17] == '.' else 0\n    boredoms\
    \ += 1 if S[18] == '.' else 0\n    boredoms += 1 if S[19] == '.' else 0\n    boredoms\
    \ += 1 if S[20] == '.' else 0\n    boredoms += 1 if S[21] == '.' else 0\n    boredoms\
    \ += 1 if S[22] == '.' else 0\n    boredoms += 1 if S[23] == '.' else 0\n    boredoms\
    \ += 1 if S[24] == '.' else 0\n    boredoms += 1 if S[25] == '.' else 0\n    boredoms\
    \ += 1 if S[26] == '.' else 0\n    boredoms += 1 if S[27] == '.' else 0\n    boredoms\
    \ += 1 if S[28] == '.' else 0\n    boredoms += 1 if S[29] == '.' else 0\n    boredoms\
    \ += 1 if S[30] == '.' else 0\n    boredoms += 1 if S[31] == '.' else 0\n    boredoms\
    \ += 1 if S[32] == '.' else 0\n    boredoms += 1 if S[33] == '.' else 0\n    boredoms\
    \ += 1 if S[34] == '.' else 0\n    boredoms += 1 if S[35] == '.' else 0\n    boredoms\
    \ += 1 if S[36] == '.' else 0\n    boredoms += 1 if S[37] == '.' else 0\n    boredoms\
    \ += 1 if S[38] == '.\ndef check(candidate):\n    assert candidate('Hello world')\
    \ == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpr69qjhh0.py\", line 52\n    boredoms += 1 if S[38] ==\
    \ '.\n                               ^\nSyntaxError: EOL while scanning string\
    \ literal\n"
  exit_code: 1
  status: SyntaxError
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredom = 0\n    boredom_list = [\"I\"]\n    boredom_list\
    \ = boredom_list + list(S)\n    for word in boredom_list:\n        if word.startswith(\"\
    I\"):\n            boredom += 1\n    return boredom\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphrjg0lyo.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmphrjg0lyo.py\", line 31,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmphrjg0lyo.py\", line 23,\
    \ in check\n    assert candidate('Hello world') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    \n    for word in S.split():\n   \
    \     if word.startswith('I'):\n            boredoms += 1\n    return boredoms\n\
    \ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppxr0vzkp.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmppxr0vzkp.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmppxr0vzkp.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    boredoms += 1 if S[0] == 'I' else\
    \ 0\n    boredoms += 1 if S[1] == '.' else 0\n    boredoms += 1 if S[2] == '.'\
    \ else 0\n    boredoms += 1 if S[3] == '.' else 0\n    boredoms += 1 if S[4] ==\
    \ '.' else 0\n    boredoms += 1 if S[5] == '.' else 0\n    boredoms += 1 if S[6]\
    \ == '.' else 0\n    boredoms += 1 if S[7] == '.' else 0\n    boredoms += 1 if\
    \ S[8] == '.' else 0\n    boredoms += 1 if S[9] == '.' else 0\n    boredoms +=\
    \ 1 if S[10] == '.' else 0\n    boredoms += 1 if S[11] == '.' else 0\n    boredoms\
    \ += 1 if S[12] == '.' else 0\n    boredoms += 1 if S[13] == '.' else 0\n    boredoms\
    \ += 1 if S[14] == '.' else 0\n    boredoms += 1 if S[15] == '.' else 0\n    boredoms\
    \ += 1 if S[16] == '.' else 0\n    boredoms += 1 if S[17] == '.' else 0\n    boredoms\
    \ += 1 if S[18] == '.' else 0\n    boredoms += 1 if S[19] == '.' else 0\n    boredoms\
    \ += 1 if S[20] == '.' else 0\n    boredoms += 1 if S[21] == '.' else 0\n    boredoms\
    \ += 1 if S[22] == '.' else 0\n    boredoms += 1 if S[23] == '.' else 0\n    boredoms\
    \ += 1 if S[24] == '.' else 0\n    boredoms += 1 if S[25] == '.' else 0\n    boredoms\
    \ += 1 if S[26] == '.' else 0\n    boredoms += 1 if S[27] == '.' else 0\n    boredoms\
    \ += 1 if S[28] == '.' else 0\n    boredoms += 1 if S[29] == '.' else 0\n    boredoms\
    \ += 1 if S[30] == '.' else 0\n    boredoms += 1 if S[31] == '.' else 0\n    boredoms\
    \ += 1 if S[32] == '.' else 0\n    boredoms += 1 if S[33] == '.' else 0\n    boredoms\
    \ += 1 if S[34] == '.' else 0\n    boredoms += 1 if S[35] == '.' else 0\n    boredoms\
    \ += 1 if S[36] == '.' else 0\n    boredoms += 1 if S[37] == '.' else 0\n    boredoms\
    \ += 1 if S[38] == '.\ndef check(candidate):\n    assert candidate('Hello world')\
    \ == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmp89g13sml.py\", line 52\n    boredoms += 1 if S[38] ==\
    \ '.\n                               ^\nSyntaxError: EOL while scanning string\
    \ literal\n"
  exit_code: 1
  status: SyntaxError
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    boredoms += 1 if S[0] == 'I' else\
    \ 0\n    boredoms += 1 if S[1] == '.' else 0\n    boredoms += 1 if S[2] == '.'\
    \ else 0\n    boredoms += 1 if S[3] == '.' else 0\n    boredoms += 1 if S[4] ==\
    \ '.' else 0\n    boredoms += 1 if S[5] == '.' else 0\n    boredoms += 1 if S[6]\
    \ == '.' else 0\n    boredoms += 1 if S[7] == '.' else 0\n    boredoms += 1 if\
    \ S[8] == '.' else 0\n    boredoms += 1 if S[9] == '.' else 0\n    boredoms +=\
    \ 1 if S[10] == '.' else 0\n    boredoms += 1 if S[11] == '.' else 0\n    boredoms\
    \ += 1 if S[12] == '.' else 0\n    boredoms += 1 if S[13] == '.' else 0\n    boredoms\
    \ += 1 if S[14] == '.' else 0\n    boredoms += 1 if S[15] == '.' else 0\n    boredoms\
    \ += 1 if S[16] == '.' else 0\n    boredoms += 1 if S[17] == '.' else 0\n    boredoms\
    \ += 1 if S[18] == '.' else 0\n    boredoms += 1 if S[19] == '.' else 0\n    boredoms\
    \ += 1 if S[20] == '.' else 0\n    boredoms += 1 if S[21] == '.' else 0\n    boredoms\
    \ += 1 if S[22] == '.' else 0\n    boredoms += 1 if S[23] == '.' else 0\n    boredoms\
    \ += 1 if S[24] == '.' else 0\n    boredoms += 1 if S[25] == '.' else 0\n    boredoms\
    \ += 1 if S[26] == '.' else 0\n    boredoms += 1 if S[27] == '.' else 0\n    boredoms\
    \ += 1 if S[28] == '.' else 0\n    boredoms += 1 if S[29] == '.' else 0\n    boredoms\
    \ += 1 if S[30] == '.' else 0\n    boredoms += 1 if S[31] == '.' else 0\n    boredoms\
    \ += 1 if S[32] == '.' else 0\n    boredoms += 1 if S[33] == '.' else 0\n    boredoms\
    \ += 1 if S[34] == '.' else 0\n    boredoms += 1 if S[35] == '.' else 0\n    boredoms\
    \ += 1 if S[36] == '.' else 0\n    boredoms += 1 if S[37] == '.' else 0\n    boredoms\
    \ += 1 if S[38] == '.\ndef check(candidate):\n    assert candidate('Hello world')\
    \ == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmp4xnifynp.py\", line 52\n    boredoms += 1 if S[38] ==\
    \ '.\n                               ^\nSyntaxError: EOL while scanning string\
    \ literal\n"
  exit_code: 1
  status: SyntaxError
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredom = 0\n    boredom_list = [\"I\"]\n    for word\
    \ in S.split():\n        if word in boredom_list:\n            boredom += 1\n\
    \        else:\n            boredom_list.append(word)\n    return boredom\n\n\n\
    def check(candidate):\n    assert candidate('Hello world') == 0\n    assert candidate('Is\
    \ the sky blue?') == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpznj_brnf.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpznj_brnf.py\", line 32,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpznj_brnf.py\", line 28,\
    \ in check\n    assert candidate('I feel good today. I will be productive. will\
    \ kill It') == 2\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    for word in S.split():\n        if\
    \ word.startswith('I'):\n            boredoms += 1\n    return boredoms\n\n\n\
    def check(candidate):\n    assert candidate('Hello world') == 0\n    assert candidate('Is\
    \ the sky blue?') == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphf080pem.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmphf080pem.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmphf080pem.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    boredoms += 1 if S[0] == \"I\" else\
    \ 0\n    boredoms += 1 if S[1] == \"I\" else 0\n    boredoms += 1 if S[2] == \"\
    I\" else 0\n    boredoms += 1 if S[3] == \"I\" else 0\n    boredoms += 1 if S[4]\
    \ == \"I\" else 0\n    boredoms += 1 if S[5] == \"I\" else 0\n    boredoms +=\
    \ 1 if S[6] == \"I\" else 0\n    boredoms += 1 if S[7] == \"I\" else 0\n    boredoms\
    \ += 1 if S[8] == \"I\" else 0\n    boredoms += 1 if S[9] == \"I\" else 0\n  \
    \  boredoms += 1 if S[10] == \"I\" else 0\n    boredoms += 1 if S[11] == \"I\"\
    \ else 0\n    boredoms += 1 if S[12] == \"I\" else 0\n    boredoms += 1 if S[13]\
    \ == \"I\" else 0\n    boredoms += 1 if S[14] == \"I\" else 0\n    boredoms +=\
    \ 1 if S[15] == \"I\" else 0\n    boredoms += 1 if S[16] == \"I\" else 0\n   \
    \ boredoms += 1 if S[17] == \"I\" else 0\n    boredoms += 1 if S[18] == \"I\"\
    \ else 0\n    boredoms += 1 if S[19] == \"I\" else 0\n    boredoms += 1 if S[20]\
    \ == \"I\" else 0\n    boredoms += 1 if S[21] == \"I\" else 0\n    boredoms +=\
    \ 1 if S[22] == \"I\" else 0\n    boredoms += 1 if S[23] == \"I\" else 0\n   \
    \ boredoms += 1 if S[24] == \"I\" else 0\n    boredoms += 1 if S[25] == \"I\"\
    \ else 0\n    boredoms += 1 if S[26] == \"I\" else 0\n    boredoms += 1 if S[27]\
    \ == \"I\" else 0\n    boredoms += 1 if S[28] == \"I\" else 0\n    boredoms +=\
    \ 1 if S[29] == \"I\" else 0\n    boredoms += 1 if S[30] == \"I\" else 0\n   \
    \ boredoms += 1 if S[31] == \"I\" else 0\n    boredoms += 1 if S[32] == \"I\"\
    \ else 0\n    boredoms += 1 if S[33] == \"I\" else 0\n    boredoms += 1 if S[\n\
    def check(candidate):\n    assert candidate('Hello world') == 0\n    assert candidate('Is\
    \ the sky blue?') == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpwndgqhxu.py\", line 49\n    def check(candidate):\n  \
    \  ^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    \n    # Your code here\n    \n   \
    \ return boredoms\n\ndef check(candidate):\n    assert candidate('Hello world')\
    \ == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp96fjqcuf.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp96fjqcuf.py\", line 28,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp96fjqcuf.py\", line 22,\
    \ in check\n    assert candidate('I love It !') == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    \n    for word in S.split():\n   \
    \     if word == \"I\":\n            boredoms += 1\n    return boredoms\n\ndef\
    \ check(candidate):\n    assert candidate('Hello world') == 0\n    assert candidate('Is\
    \ the sky blue?') == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1gwnd5lx.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp1gwnd5lx.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp1gwnd5lx.py\", line 26,\
    \ in check\n    assert candidate('You and I are going for a walk') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    boredoms += 1 if S[0] == 'I' else\
    \ 0\n    boredoms += 1 if S[1] == '.' else 0\n    boredoms += 1 if S[2] == '.'\
    \ else 0\n    boredoms += 1 if S[3] == '.' else 0\n    boredoms += 1 if S[4] ==\
    \ '.' else 0\n    boredoms += 1 if S[5] == '.' else 0\n    boredoms += 1 if S[6]\
    \ == '.' else 0\n    boredoms += 1 if S[7] == '.' else 0\n    boredoms += 1 if\
    \ S[8] == '.' else 0\n    boredoms += 1 if S[9] == '.' else 0\n    boredoms +=\
    \ 1 if S[10] == '.' else 0\n    boredoms += 1 if S[11] == '.' else 0\n    boredoms\
    \ += 1 if S[12] == '.' else 0\n    boredoms += 1 if S[13] == '.' else 0\n    boredoms\
    \ += 1 if S[14] == '.' else 0\n    boredoms += 1 if S[15] == '.' else 0\n    boredoms\
    \ += 1 if S[16] == '.' else 0\n    boredoms += 1 if S[17] == '.' else 0\n    boredoms\
    \ += 1 if S[18] == '.' else 0\n    boredoms += 1 if S[19] == '.' else 0\n    boredoms\
    \ += 1 if S[20] == '.' else 0\n    boredoms += 1 if S[21] == '.' else 0\n    boredoms\
    \ += 1 if S[22] == '.' else 0\n    boredoms += 1 if S[23] == '.' else 0\n    boredoms\
    \ += 1 if S[24] == '.' else 0\n    boredoms += 1 if S[25] == '.' else 0\n    boredoms\
    \ += 1 if S[26] == '.' else 0\n    boredoms += 1 if S[27] == '.' else 0\n    boredoms\
    \ += 1 if S[28] == '.' else 0\n    boredoms += 1 if S[29] == '.' else 0\n    boredoms\
    \ += 1 if S[30] == '.' else 0\n    boredoms += 1 if S[31] == '.' else 0\n    boredoms\
    \ += 1 if S[32] == '.' else 0\n    boredoms += 1 if S[33] == '.' else 0\n    boredoms\
    \ += 1 if S[34] == '.' else 0\n    boredoms += 1 if S[35] == '.' else 0\n    boredoms\
    \ += 1 if S[36] == '.' else 0\n    boredoms += 1 if S[37] == '.' else 0\n    boredoms\
    \ += 1 if S[38] == '.\ndef check(candidate):\n    assert candidate('Hello world')\
    \ == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmp3losfx5n.py\", line 52\n    boredoms += 1 if S[38] ==\
    \ '.\n                               ^\nSyntaxError: EOL while scanning string\
    \ literal\n"
  exit_code: 1
  status: SyntaxError
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    boredoms += 1 if S[0] == 'I' else\
    \ 0\n    boredoms += 1 if S[1] == '.' else 0\n    boredoms += 1 if S[2] == '.'\
    \ else 0\n    boredoms += 1 if S[3] == '.' else 0\n    boredoms += 1 if S[4] ==\
    \ '.' else 0\n    boredoms += 1 if S[5] == '.' else 0\n    boredoms += 1 if S[6]\
    \ == '.' else 0\n    boredoms += 1 if S[7] == '.' else 0\n    boredoms += 1 if\
    \ S[8] == '.' else 0\n    boredoms += 1 if S[9] == '.' else 0\n    boredoms +=\
    \ 1 if S[10] == '.' else 0\n    boredoms += 1 if S[11] == '.' else 0\n    boredoms\
    \ += 1 if S[12] == '.' else 0\n    boredoms += 1 if S[13] == '.' else 0\n    boredoms\
    \ += 1 if S[14] == '.' else 0\n    boredoms += 1 if S[15] == '.' else 0\n    boredoms\
    \ += 1 if S[16] == '.' else 0\n    boredoms += 1 if S[17] == '.' else 0\n    boredoms\
    \ += 1 if S[18] == '.' else 0\n    boredoms += 1 if S[19] == '.' else 0\n    boredoms\
    \ += 1 if S[20] == '.' else 0\n    boredoms += 1 if S[21] == '.' else 0\n    boredoms\
    \ += 1 if S[22] == '.' else 0\n    boredoms += 1 if S[23] == '.' else 0\n    boredoms\
    \ += 1 if S[24] == '.' else 0\n    boredoms += 1 if S[25] == '.' else 0\n    boredoms\
    \ += 1 if S[26] == '.' else 0\n    boredoms += 1 if S[27] == '.' else 0\n    boredoms\
    \ += 1 if S[28] == '.' else 0\n    boredoms += 1 if S[29] == '.' else 0\n    boredoms\
    \ += 1 if S[30] == '.' else 0\n    boredoms += 1 if S[31] == '.' else 0\n    boredoms\
    \ += 1 if S[32] == '.' else 0\n    boredoms += 1 if S[33] == '.' else 0\n    boredoms\
    \ += 1 if S[34] == '.' else 0\n    boredoms += 1 if S[35] == '.' else 0\n    boredoms\
    \ += 1 if S[36] == '.' else 0\n    boredoms += 1 if S[37] == '.' else 0\n    boredoms\
    \ += 1 if S[38] == '.\ndef check(candidate):\n    assert candidate('Hello world')\
    \ == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpg290qjse.py\", line 52\n    boredoms += 1 if S[38] ==\
    \ '.\n                               ^\nSyntaxError: EOL while scanning string\
    \ literal\n"
  exit_code: 1
  status: SyntaxError
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    count = 0\n    for word in S.split():\n        if word\
    \ == 'I':\n            count += 1\n    return count\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplvdwj8ee.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmplvdwj8ee.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmplvdwj8ee.py\", line 26,\
    \ in check\n    assert candidate('You and I are going for a walk') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    boredoms += 1 if S[0] == 'I' else\
    \ 0\n    boredoms += 1 if S[1] == '.' else 0\n    boredoms += 1 if S[2] == '.'\
    \ else 0\n    boredoms += 1 if S[3] == '.' else 0\n    boredoms += 1 if S[4] ==\
    \ '.' else 0\n    boredoms += 1 if S[5] == '.' else 0\n    boredoms += 1 if S[6]\
    \ == '.' else 0\n    boredoms += 1 if S[7] == '.' else 0\n    boredoms += 1 if\
    \ S[8] == '.' else 0\n    boredoms += 1 if S[9] == '.' else 0\n    boredoms +=\
    \ 1 if S[10] == '.' else 0\n    boredoms += 1 if S[11] == '.' else 0\n    boredoms\
    \ += 1 if S[12] == '.' else 0\n    boredoms += 1 if S[13] == '.' else 0\n    boredoms\
    \ += 1 if S[14] == '.' else 0\n    boredoms += 1 if S[15] == '.' else 0\n    boredoms\
    \ += 1 if S[16] == '.' else 0\n    boredoms += 1 if S[17] == '.' else 0\n    boredoms\
    \ += 1 if S[18] == '.' else 0\n    boredoms += 1 if S[19] == '.' else 0\n    boredoms\
    \ += 1 if S[20] == '.' else 0\n    boredoms += 1 if S[21] == '.' else 0\n    boredoms\
    \ += 1 if S[22] == '.' else 0\n    boredoms += 1 if S[23] == '.' else 0\n    boredoms\
    \ += 1 if S[24] == '.' else 0\n    boredoms += 1 if S[25] == '.' else 0\n    boredoms\
    \ += 1 if S[26] == '.' else 0\n    boredoms += 1 if S[27] == '.' else 0\n    boredoms\
    \ += 1 if S[28] == '.' else 0\n    boredoms += 1 if S[29] == '.' else 0\n    boredoms\
    \ += 1 if S[30] == '.' else 0\n    boredoms += 1 if S[31] == '.' else 0\n    boredoms\
    \ += 1 if S[32] == '.' else 0\n    boredoms += 1 if S[33] == '.' else 0\n    boredoms\
    \ += 1 if S[34] == '.' else 0\n    boredoms += 1 if S[35] == '.' else 0\n    boredoms\
    \ += 1 if S[36] == '.' else 0\n    boredoms += 1 if S[37] == '.' else 0\n    boredoms\
    \ += 1 if S[38] == '.\ndef check(candidate):\n    assert candidate('Hello world')\
    \ == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmp8qz87ijj.py\", line 52\n    boredoms += 1 if S[38] ==\
    \ '.\n                               ^\nSyntaxError: EOL while scanning string\
    \ literal\n"
  exit_code: 1
  status: SyntaxError
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    boredoms += 1 if S[0] == 'I' else\
    \ 0\n    boredoms += 1 if S[1] == '.' else 0\n    boredoms += 1 if S[2] == '.'\
    \ else 0\n    boredoms += 1 if S[3] == '.' else 0\n    boredoms += 1 if S[4] ==\
    \ '.' else 0\n    boredoms += 1 if S[5] == '.' else 0\n    boredoms += 1 if S[6]\
    \ == '.' else 0\n    boredoms += 1 if S[7] == '.' else 0\n    boredoms += 1 if\
    \ S[8] == '.' else 0\n    boredoms += 1 if S[9] == '.' else 0\n    boredoms +=\
    \ 1 if S[10] == '.' else 0\n    boredoms += 1 if S[11] == '.' else 0\n    boredoms\
    \ += 1 if S[12] == '.' else 0\n    boredoms += 1 if S[13] == '.' else 0\n    boredoms\
    \ += 1 if S[14] == '.' else 0\n    boredoms += 1 if S[15] == '.' else 0\n    boredoms\
    \ += 1 if S[16] == '.' else 0\n    boredoms += 1 if S[17] == '.' else 0\n    boredoms\
    \ += 1 if S[18] == '.' else 0\n    boredoms += 1 if S[19] == '.' else 0\n    boredoms\
    \ += 1 if S[20] == '.' else 0\n    boredoms += 1 if S[21] == '.' else 0\n    boredoms\
    \ += 1 if S[22] == '.' else 0\n    boredoms += 1 if S[23] == '.' else 0\n    boredoms\
    \ += 1 if S[24] == '.' else 0\n    boredoms += 1 if S[25] == '.' else 0\n    boredoms\
    \ += 1 if S[26] == '.' else 0\n    boredoms += 1 if S[27] == '.' else 0\n    boredoms\
    \ += 1 if S[28] == '.' else 0\n    boredoms += 1 if S[29] == '.' else 0\n    boredoms\
    \ += 1 if S[30] == '.' else 0\n    boredoms += 1 if S[31] == '.' else 0\n    boredoms\
    \ += 1 if S[32] == '.' else 0\n    boredoms += 1 if S[33] == '.' else 0\n    boredoms\
    \ += 1 if S[34] == '.' else 0\n    boredoms += 1 if S[35] == '.' else 0\n    boredoms\
    \ += 1 if S[36] == '.' else 0\n    boredoms += 1 if S[37] == '.' else 0\n    boredoms\
    \ += 1 if S[38] == '.\ndef check(candidate):\n    assert candidate('Hello world')\
    \ == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpbawhqgr9.py\", line 52\n    boredoms += 1 if S[38] ==\
    \ '.\n                               ^\nSyntaxError: EOL while scanning string\
    \ literal\n"
  exit_code: 1
  status: SyntaxError
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    for word in S.split():\n        if\
    \ word.startswith('I'):\n            boredoms += 1\n    return boredoms\n\n\n\
    def check(candidate):\n    assert candidate('Hello world') == 0\n    assert candidate('Is\
    \ the sky blue?') == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpos0cirsj.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpos0cirsj.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpos0cirsj.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    boredoms += 1 if S[0] == 'I' else\
    \ 0\n    boredoms += 1 if S[1] == '.' else 0\n    boredoms += 1 if S[2] == '.'\
    \ else 0\n    boredoms += 1 if S[3] == '.' else 0\n    boredoms += 1 if S[4] ==\
    \ '.' else 0\n    boredoms += 1 if S[5] == '.' else 0\n    boredoms += 1 if S[6]\
    \ == '.' else 0\n    boredoms += 1 if S[7] == '.' else 0\n    boredoms += 1 if\
    \ S[8] == '.' else 0\n    boredoms += 1 if S[9] == '.' else 0\n    boredoms +=\
    \ 1 if S[10] == '.' else 0\n    boredoms += 1 if S[11] == '.' else 0\n    boredoms\
    \ += 1 if S[12] == '.' else 0\n    boredoms += 1 if S[13] == '.' else 0\n    boredoms\
    \ += 1 if S[14] == '.' else 0\n    boredoms += 1 if S[15] == '.' else 0\n    boredoms\
    \ += 1 if S[16] == '.' else 0\n    boredoms += 1 if S[17] == '.' else 0\n    boredoms\
    \ += 1 if S[18] == '.' else 0\n    boredoms += 1 if S[19] == '.' else 0\n    boredoms\
    \ += 1 if S[20] == '.' else 0\n    boredoms += 1 if S[21] == '.' else 0\n    boredoms\
    \ += 1 if S[22] == '.' else 0\n    boredoms += 1 if S[23] == '.' else 0\n    boredoms\
    \ += 1 if S[24] == '.' else 0\n    boredoms += 1 if S[25] == '.' else 0\n    boredoms\
    \ += 1 if S[26] == '.' else 0\n    boredoms += 1 if S[27] == '.' else 0\n    boredoms\
    \ += 1 if S[28] == '.' else 0\n    boredoms += 1 if S[29] == '.' else 0\n    boredoms\
    \ += 1 if S[30] == '.' else 0\n    boredoms += 1 if S[31] == '.' else 0\n    boredoms\
    \ += 1 if S[32] == '.' else 0\n    boredoms += 1 if S[33] == '.' else 0\n    boredoms\
    \ += 1 if S[34] == '.' else 0\n    boredoms += 1 if S[35] == '.' else 0\n    boredoms\
    \ += 1 if S[36] == '.' else 0\n    boredoms += 1 if S[37] == '.' else 0\n    boredoms\
    \ += 1 if S[38] == '.\ndef check(candidate):\n    assert candidate('Hello world')\
    \ == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmp47pobt00.py\", line 52\n    boredoms += 1 if S[38] ==\
    \ '.\n                               ^\nSyntaxError: EOL while scanning string\
    \ literal\n"
  exit_code: 1
  status: SyntaxError
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    for word in S.split():\n        if\
    \ word.startswith('I'):\n            boredoms += 1\n    return boredoms\n\ndef\
    \ check(candidate):\n    assert candidate('Hello world') == 0\n    assert candidate('Is\
    \ the sky blue?') == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpd6jg76fg.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpd6jg76fg.py\", line 28,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpd6jg76fg.py\", line 21,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    for word in S.split():\n        if\
    \ word.startswith('I'):\n            boredoms += 1\n    return boredoms\n\n\n\
    def check(candidate):\n    assert candidate('Hello world') == 0\n    assert candidate('Is\
    \ the sky blue?') == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvgu0svh9.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpvgu0svh9.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpvgu0svh9.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    for word in S.split():\n        if\
    \ word.startswith('I'):\n            boredoms += 1\n    return boredoms\n\n\n\
    def check(candidate):\n    assert candidate('Hello world') == 0\n    assert candidate('Is\
    \ the sky blue?') == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdfgl8t6y.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpdfgl8t6y.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpdfgl8t6y.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    boredoms += 1 if S[0] == \"I\" else\
    \ 0\n    boredoms += 1 if S[1] == \"I\" else 0\n    boredoms += 1 if S[2] == \"\
    I\" else 0\n    boredoms += 1 if S[3] == \"I\" else 0\n    boredoms += 1 if S[4]\
    \ == \"I\" else 0\n    boredoms += 1 if S[5] == \"I\" else 0\n    boredoms +=\
    \ 1 if S[6] == \"I\" else 0\n    boredoms += 1 if S[7] == \"I\" else 0\n    boredoms\
    \ += 1 if S[8] == \"I\" else 0\n    boredoms += 1 if S[9] == \"I\" else 0\n  \
    \  boredoms += 1 if S[10] == \"I\" else 0\n    boredoms += 1 if S[11] == \"I\"\
    \ else 0\n    boredoms += 1 if S[12] == \"I\" else 0\n    boredoms += 1 if S[13]\
    \ == \"I\" else 0\n    boredoms += 1 if S[14] == \"I\" else 0\n    boredoms +=\
    \ 1 if S[15] == \"I\" else 0\n    boredoms += 1 if S[16] == \"I\" else 0\n   \
    \ boredoms += 1 if S[17] == \"I\" else 0\n    boredoms += 1 if S[18] == \"I\"\
    \ else 0\n    boredoms += 1 if S[19] == \"I\" else 0\n    boredoms += 1 if S[20]\
    \ == \"I\" else 0\n    boredoms += 1 if S[21] == \"I\" else 0\n    boredoms +=\
    \ 1 if S[22] == \"I\" else 0\n    boredoms += 1 if S[23] == \"I\" else 0\n   \
    \ boredoms += 1 if S[24] == \"I\" else 0\n    boredoms += 1 if S[25] == \"I\"\
    \ else 0\n    boredoms += 1 if S[26] == \"I\" else 0\n    boredoms += 1 if S[27]\
    \ == \"I\" else 0\n    boredoms += 1 if S[28] == \"I\" else 0\n    boredoms +=\
    \ 1 if S[29] == \"I\" else 0\n    boredoms += 1 if S[30] == \"I\" else 0\n   \
    \ boredoms += 1 if S[31] == \"I\" else 0\n    boredoms += 1 if S[32] == \"I\"\
    \ else 0\n    boredoms += 1 if S[33] == \"I\" else 0\n    boredoms += 1 if S[\n\
    def check(candidate):\n    assert candidate('Hello world') == 0\n    assert candidate('Is\
    \ the sky blue?') == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmphcw2tc64.py\", line 49\n    def check(candidate):\n  \
    \  ^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredom = 0\n    \n    for word in S.split():\n    \
    \    if word.startswith(\"I\"):\n            boredom += 1\n    return boredom\n\
    \ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4br0_zjb.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp4br0_zjb.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp4br0_zjb.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    for word in S.split():\n        if\
    \ word.startswith('I'):\n            boredoms += 1\n    return boredoms\n\n\n\
    def check(candidate):\n    assert candidate('Hello world') == 0\n    assert candidate('Is\
    \ the sky blue?') == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphqdmsx3l.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmphqdmsx3l.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmphqdmsx3l.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    boredoms += 1 if S[0] == 'I' else\
    \ 0\n    boredoms += 1 if S[1] == '.' else 0\n    boredoms += 1 if S[2] == '.'\
    \ else 0\n    boredoms += 1 if S[3] == '.' else 0\n    boredoms += 1 if S[4] ==\
    \ '.' else 0\n    boredoms += 1 if S[5] == '.' else 0\n    boredoms += 1 if S[6]\
    \ == '.' else 0\n    boredoms += 1 if S[7] == '.' else 0\n    boredoms += 1 if\
    \ S[8] == '.' else 0\n    boredoms += 1 if S[9] == '.' else 0\n    boredoms +=\
    \ 1 if S[10] == '.' else 0\n    boredoms += 1 if S[11] == '.' else 0\n    boredoms\
    \ += 1 if S[12] == '.' else 0\n    boredoms += 1 if S[13] == '.' else 0\n    boredoms\
    \ += 1 if S[14] == '.' else 0\n    boredoms += 1 if S[15] == '.' else 0\n    boredoms\
    \ += 1 if S[16] == '.' else 0\n    boredoms += 1 if S[17] == '.' else 0\n    boredoms\
    \ += 1 if S[18] == '.' else 0\n    boredoms += 1 if S[19] == '.' else 0\n    boredoms\
    \ += 1 if S[20] == '.' else 0\n    boredoms += 1 if S[21] == '.' else 0\n    boredoms\
    \ += 1 if S[22] == '.' else 0\n    boredoms += 1 if S[23] == '.' else 0\n    boredoms\
    \ += 1 if S[24] == '.' else 0\n    boredoms += 1 if S[25] == '.' else 0\n    boredoms\
    \ += 1 if S[26] == '.' else 0\n    boredoms += 1 if S[27] == '.' else 0\n    boredoms\
    \ += 1 if S[28] == '.' else 0\n    boredoms += 1 if S[29] == '.' else 0\n    boredoms\
    \ += 1 if S[30] == '.' else 0\n    boredoms += 1 if S[31] == '.' else 0\n    boredoms\
    \ += 1 if S[32] == '.' else 0\n    boredoms += 1 if S[33] == '.' else 0\n    boredoms\
    \ += 1 if S[34] == '.' else 0\n    boredoms += 1 if S[35] == '.' else 0\n    boredoms\
    \ += 1 if S[36] == '.' else 0\n    boredoms += 1 if S[37] == '.' else 0\n    boredoms\
    \ += 1 if S[38] == '.\ndef check(candidate):\n    assert candidate('Hello world')\
    \ == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmplkgk62s8.py\", line 52\n    boredoms += 1 if S[38] ==\
    \ '.\n                               ^\nSyntaxError: EOL while scanning string\
    \ literal\n"
  exit_code: 1
  status: SyntaxError
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    for word in S.split():\n        if\
    \ word.startswith('I'):\n            boredoms += 1\n    return boredoms\n\n\n\
    def check(candidate):\n    assert candidate('Hello world') == 0\n    assert candidate('Is\
    \ the sky blue?') == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpj18je5t6.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpj18je5t6.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpj18je5t6.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    \n    # Your code here\n    \n   \
    \ return boredoms\n\ndef check(candidate):\n    assert candidate('Hello world')\
    \ == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcoqkgyte.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpcoqkgyte.py\", line 28,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpcoqkgyte.py\", line 22,\
    \ in check\n    assert candidate('I love It !') == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    boredoms += 1 if S[0] == 'I' else\
    \ 0\n    boredoms += 1 if S[1] == '.' else 0\n    boredoms += 1 if S[2] == '.'\
    \ else 0\n    boredoms += 1 if S[3] == '.' else 0\n    boredoms += 1 if S[4] ==\
    \ '.' else 0\n    boredoms += 1 if S[5] == '.' else 0\n    boredoms += 1 if S[6]\
    \ == '.' else 0\n    boredoms += 1 if S[7] == '.' else 0\n    boredoms += 1 if\
    \ S[8] == '.' else 0\n    boredoms += 1 if S[9] == '.' else 0\n    boredoms +=\
    \ 1 if S[10] == '.' else 0\n    boredoms += 1 if S[11] == '.' else 0\n    boredoms\
    \ += 1 if S[12] == '.' else 0\n    boredoms += 1 if S[13] == '.' else 0\n    boredoms\
    \ += 1 if S[14] == '.' else 0\n    boredoms += 1 if S[15] == '.' else 0\n    boredoms\
    \ += 1 if S[16] == '.' else 0\n    boredoms += 1 if S[17] == '.' else 0\n    boredoms\
    \ += 1 if S[18] == '.' else 0\n    boredoms += 1 if S[19] == '.' else 0\n    boredoms\
    \ += 1 if S[20] == '.' else 0\n    boredoms += 1 if S[21] == '.' else 0\n    boredoms\
    \ += 1 if S[22] == '.' else 0\n    boredoms += 1 if S[23] == '.' else 0\n    boredoms\
    \ += 1 if S[24] == '.' else 0\n    boredoms += 1 if S[25] == '.' else 0\n    boredoms\
    \ += 1 if S[26] == '.' else 0\n    boredoms += 1 if S[27] == '.' else 0\n    boredoms\
    \ += 1 if S[28] == '.' else 0\n    boredoms += 1 if S[29] == '.' else 0\n    boredoms\
    \ += 1 if S[30] == '.' else 0\n    boredoms += 1 if S[31] == '.' else 0\n    boredoms\
    \ += 1 if S[32] == '.' else 0\n    boredoms += 1 if S[33] == '.' else 0\n    boredoms\
    \ += 1 if S[34] == '.' else 0\n    boredoms += 1 if S[35] == '.' else 0\n    boredoms\
    \ += 1 if S[36] == '.' else 0\n    boredoms += 1 if S[37] == '.' else 0\n    boredoms\
    \ += 1 if S[38] == '.\ndef check(candidate):\n    assert candidate('Hello world')\
    \ == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpskcyq4p7.py\", line 52\n    boredoms += 1 if S[38] ==\
    \ '.\n                               ^\nSyntaxError: EOL while scanning string\
    \ literal\n"
  exit_code: 1
  status: SyntaxError
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    boredoms += 1 if S[0] == 'I' else\
    \ 0\n    boredoms += 1 if S[1] == '.' else 0\n    boredoms += 1 if S[2] == '.'\
    \ else 0\n    boredoms += 1 if S[3] == '.' else 0\n    boredoms += 1 if S[4] ==\
    \ '.' else 0\n    boredoms += 1 if S[5] == '.' else 0\n    boredoms += 1 if S[6]\
    \ == '.' else 0\n    boredoms += 1 if S[7] == '.' else 0\n    boredoms += 1 if\
    \ S[8] == '.' else 0\n    boredoms += 1 if S[9] == '.' else 0\n    boredoms +=\
    \ 1 if S[10] == '.' else 0\n    boredoms += 1 if S[11] == '.' else 0\n    boredoms\
    \ += 1 if S[12] == '.' else 0\n    boredoms += 1 if S[13] == '.' else 0\n    boredoms\
    \ += 1 if S[14] == '.' else 0\n    boredoms += 1 if S[15] == '.' else 0\n    boredoms\
    \ += 1 if S[16] == '.' else 0\n    boredoms += 1 if S[17] == '.' else 0\n    boredoms\
    \ += 1 if S[18] == '.' else 0\n    boredoms += 1 if S[19] == '.' else 0\n    boredoms\
    \ += 1 if S[20] == '.' else 0\n    boredoms += 1 if S[21] == '.' else 0\n    boredoms\
    \ += 1 if S[22] == '.' else 0\n    boredoms += 1 if S[23] == '.' else 0\n    boredoms\
    \ += 1 if S[24] == '.' else 0\n    boredoms += 1 if S[25] == '.' else 0\n    boredoms\
    \ += 1 if S[26] == '.' else 0\n    boredoms += 1 if S[27] == '.' else 0\n    boredoms\
    \ += 1 if S[28] == '.' else 0\n    boredoms += 1 if S[29] == '.' else 0\n    boredoms\
    \ += 1 if S[30] == '.' else 0\n    boredoms += 1 if S[31] == '.' else 0\n    boredoms\
    \ += 1 if S[32] == '.' else 0\n    boredoms += 1 if S[33] == '.' else 0\n    boredoms\
    \ += 1 if S[34] == '.' else 0\n    boredoms += 1 if S[35] == '.' else 0\n    boredoms\
    \ += 1 if S[36] == '.' else 0\n    boredoms += 1 if S[37] == '.' else 0\n    boredoms\
    \ += 1 if S[38] == '.\ndef check(candidate):\n    assert candidate('Hello world')\
    \ == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpp6w39dtj.py\", line 52\n    boredoms += 1 if S[38] ==\
    \ '.\n                               ^\nSyntaxError: EOL while scanning string\
    \ literal\n"
  exit_code: 1
  status: SyntaxError
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    for word in S.split():\n        if\
    \ word.startswith('I'):\n            boredoms += 1\n    return boredoms\n\n\n\
    def check(candidate):\n    assert candidate('Hello world') == 0\n    assert candidate('Is\
    \ the sky blue?') == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmparowuku3.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmparowuku3.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmparowuku3.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    \n    for word in S.split():\n   \
    \     if word.startswith('I'):\n            boredoms += 1\n    return boredoms\n\
    \n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0zbw31gs.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp0zbw31gs.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp0zbw31gs.py\", line 23,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    \n    # Your code here\n    \n   \
    \ return boredoms\n\ndef check(candidate):\n    assert candidate('Hello world')\
    \ == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpy2tqauw1.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpy2tqauw1.py\", line 28,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpy2tqauw1.py\", line 22,\
    \ in check\n    assert candidate('I love It !') == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    boredoms += 1 if S[0] == 'I' else\
    \ 0\n    boredoms += 1 if S[1] == '.' else 0\n    boredoms += 1 if S[2] == '?'\
    \ else 0\n    boredoms += 1 if S[3] == '!' else 0\n    return boredoms\n\n\ndef\
    \ check(candidate):\n    assert candidate('Hello world') == 0\n    assert candidate('Is\
    \ the sky blue?') == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpctgg4836.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpctgg4836.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpctgg4836.py\", line 23,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    for word in S.split():\n        if\
    \ word.startswith(\"I\"):\n            boredoms += 1\n    return boredoms\n\n\n\
    def check(candidate):\n    assert candidate('Hello world') == 0\n    assert candidate('Is\
    \ the sky blue?') == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5nhpzrz8.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp5nhpzrz8.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp5nhpzrz8.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    boredoms += 1 if S[0] == 'I' else\
    \ 0\n    boredoms += 1 if S[1] == '.' else 0\n    boredoms += 1 if S[2] == '.'\
    \ else 0\n    boredoms += 1 if S[3] == '.' else 0\n    boredoms += 1 if S[4] ==\
    \ '.' else 0\n    boredoms += 1 if S[5] == '.' else 0\n    boredoms += 1 if S[6]\
    \ == '.' else 0\n    boredoms += 1 if S[7] == '.' else 0\n    boredoms += 1 if\
    \ S[8] == '.' else 0\n    boredoms += 1 if S[9] == '.' else 0\n    boredoms +=\
    \ 1 if S[10] == '.' else 0\n    boredoms += 1 if S[11] == '.' else 0\n    boredoms\
    \ += 1 if S[12] == '.' else 0\n    boredoms += 1 if S[13] == '.' else 0\n    boredoms\
    \ += 1 if S[14] == '.' else 0\n    boredoms += 1 if S[15] == '.' else 0\n    boredoms\
    \ += 1 if S[16] == '.' else 0\n    boredoms += 1 if S[17] == '.' else 0\n    boredoms\
    \ += 1 if S[18] == '.' else 0\n    boredoms += 1 if S[19] == '.' else 0\n    boredoms\
    \ += 1 if S[20] == '.' else 0\n    boredoms += 1 if S[21] == '.' else 0\n    boredoms\
    \ += 1 if S[22] == '.' else 0\n    boredoms += 1 if S[23] == '.' else 0\n    boredoms\
    \ += 1 if S[24] == '.' else 0\n    boredoms += 1 if S[25] == '.' else 0\n    boredoms\
    \ += 1 if S[26] == '.' else 0\n    boredoms += 1 if S[27] == '.' else 0\n    boredoms\
    \ += 1 if S[28] == '.' else 0\n    boredoms += 1 if S[29] == '.' else 0\n    boredoms\
    \ += 1 if S[30] == '.' else 0\n    boredoms += 1 if S[31] == '.' else 0\n    boredoms\
    \ += 1 if S[32] == '.' else 0\n    boredoms += 1 if S[33] == '.' else 0\n    boredoms\
    \ += 1 if S[34] == '.' else 0\n    boredoms += 1 if S[35] == '.' else 0\n    boredoms\
    \ += 1 if S[36] == '.' else 0\n    boredoms += 1 if S[37] == '.' else 0\n    boredoms\
    \ += 1 if S[38] == '.\ndef check(candidate):\n    assert candidate('Hello world')\
    \ == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpqe8bm9yr.py\", line 52\n    boredoms += 1 if S[38] ==\
    \ '.\n                               ^\nSyntaxError: EOL while scanning string\
    \ literal\n"
  exit_code: 1
  status: SyntaxError
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    for word in S.split():\n        if\
    \ word.startswith('I'):\n            boredoms += 1\n    return boredoms\n\n\n\
    def check(candidate):\n    assert candidate('Hello world') == 0\n    assert candidate('Is\
    \ the sky blue?') == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpljs0vhd0.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpljs0vhd0.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpljs0vhd0.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    boredoms += 1 if S[0] == \"I\" else\
    \ 0\n    boredoms += 1 if S[1] == \"I\" else 0\n    boredoms += 1 if S[2] == \"\
    I\" else 0\n    boredoms += 1 if S[3] == \"I\" else 0\n    boredoms += 1 if S[4]\
    \ == \"I\" else 0\n    boredoms += 1 if S[5] == \"I\" else 0\n    boredoms +=\
    \ 1 if S[6] == \"I\" else 0\n    boredoms += 1 if S[7] == \"I\" else 0\n    boredoms\
    \ += 1 if S[8] == \"I\" else 0\n    boredoms += 1 if S[9] == \"I\" else 0\n  \
    \  boredoms += 1 if S[10] == \"I\" else 0\n    boredoms += 1 if S[11] == \"I\"\
    \ else 0\n    boredoms += 1 if S[12] == \"I\" else 0\n    boredoms += 1 if S[13]\
    \ == \"I\" else 0\n    boredoms += 1 if S[14] == \"I\" else 0\n    boredoms +=\
    \ 1 if S[15] == \"I\" else 0\n    boredoms += 1 if S[16] == \"I\" else 0\n   \
    \ boredoms += 1 if S[17] == \"I\" else 0\n    boredoms += 1 if S[18] == \"I\"\
    \ else 0\n    boredoms += 1 if S[19] == \"I\" else 0\n    boredoms += 1 if S[20]\
    \ == \"I\" else 0\n    boredoms += 1 if S[21] == \"I\" else 0\n    boredoms +=\
    \ 1 if S[22] == \"I\" else 0\n    boredoms += 1 if S[23] == \"I\" else 0\n   \
    \ boredoms += 1 if S[24] == \"I\" else 0\n    boredoms += 1 if S[25] == \"I\"\
    \ else 0\n    boredoms += 1 if S[26] == \"I\" else 0\n    boredoms += 1 if S[27]\
    \ == \"I\" else 0\n    boredoms += 1 if S[28] == \"I\" else 0\n    boredoms +=\
    \ 1 if S[29] == \"I\" else 0\n    boredoms += 1 if S[30] == \"I\" else 0\n   \
    \ boredoms += 1 if S[31] == \"I\" else 0\n    boredoms += 1 if S[32] == \"I\"\
    \ else 0\n    boredoms += 1 if S[33] == \"I\" else 0\n    boredoms += 1 if S[\n\
    def check(candidate):\n    assert candidate('Hello world') == 0\n    assert candidate('Is\
    \ the sky blue?') == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmp0uvphchy.py\", line 49\n    def check(candidate):\n  \
    \  ^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    for word in S.split():\n        if\
    \ word.startswith('I'):\n            boredoms += 1\n    return boredoms\n\n\n\
    def check(candidate):\n    assert candidate('Hello world') == 0\n    assert candidate('Is\
    \ the sky blue?') == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpn62y_m3p.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpn62y_m3p.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpn62y_m3p.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    boredoms += 1 if S[0] == 'I' else\
    \ 0\n    boredoms += 1 if S[1] == '.' else 0\n    boredoms += 1 if S[2] == '.'\
    \ else 0\n    boredoms += 1 if S[3] == '.' else 0\n    boredoms += 1 if S[4] ==\
    \ '.' else 0\n    boredoms += 1 if S[5] == '.' else 0\n    boredoms += 1 if S[6]\
    \ == '.' else 0\n    boredoms += 1 if S[7] == '.' else 0\n    boredoms += 1 if\
    \ S[8] == '.' else 0\n    boredoms += 1 if S[9] == '.' else 0\n    boredoms +=\
    \ 1 if S[10] == '.' else 0\n    boredoms += 1 if S[11] == '.' else 0\n    boredoms\
    \ += 1 if S[12] == '.' else 0\n    boredoms += 1 if S[13] == '.' else 0\n    boredoms\
    \ += 1 if S[14] == '.' else 0\n    boredoms += 1 if S[15] == '.' else 0\n    boredoms\
    \ += 1 if S[16] == '.' else 0\n    boredoms += 1 if S[17] == '.' else 0\n    boredoms\
    \ += 1 if S[18] == '.' else 0\n    boredoms += 1 if S[19] == '.' else 0\n    boredoms\
    \ += 1 if S[20] == '.' else 0\n    boredoms += 1 if S[21] == '.' else 0\n    boredoms\
    \ += 1 if S[22] == '.' else 0\n    boredoms += 1 if S[23] == '.' else 0\n    boredoms\
    \ += 1 if S[24] == '.' else 0\n    boredoms += 1 if S[25] == '.' else 0\n    boredoms\
    \ += 1 if S[26] == '.' else 0\n    boredoms += 1 if S[27] == '.' else 0\n    boredoms\
    \ += 1 if S[28] == '.' else 0\n    boredoms += 1 if S[29] == '.' else 0\n    boredoms\
    \ += 1 if S[30] == '.' else 0\n    boredoms += 1 if S[31] == '.' else 0\n    boredoms\
    \ += 1 if S[32] == '.' else 0\n    boredoms += 1 if S[33] == '.' else 0\n    boredoms\
    \ += 1 if S[34] == '.' else 0\n    boredoms += 1 if S[35] == '.' else 0\n    boredoms\
    \ += 1 if S[36] == '.' else 0\n    boredoms += 1 if S[37] == '.' else 0\n    boredoms\
    \ += 1 if S[38] == '.\ndef check(candidate):\n    assert candidate('Hello world')\
    \ == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpw5vphyjd.py\", line 52\n    boredoms += 1 if S[38] ==\
    \ '.\n                               ^\nSyntaxError: EOL while scanning string\
    \ literal\n"
  exit_code: 1
  status: SyntaxError
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    for word in S.split():\n        if\
    \ word.startswith('I'):\n            boredoms += 1\n    return boredoms\n\n\n\
    def check(candidate):\n    assert candidate('Hello world') == 0\n    assert candidate('Is\
    \ the sky blue?') == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv3kg5k_a.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpv3kg5k_a.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpv3kg5k_a.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    boredoms += 1 if S[0] == 'I' else\
    \ 0\n    boredoms += 1 if S[1] == '.' else 0\n    boredoms += 1 if S[2] == '.'\
    \ else 0\n    boredoms += 1 if S[3] == '.' else 0\n    boredoms += 1 if S[4] ==\
    \ '.' else 0\n    boredoms += 1 if S[5] == '.' else 0\n    boredoms += 1 if S[6]\
    \ == '.' else 0\n    boredoms += 1 if S[7] == '.' else 0\n    boredoms += 1 if\
    \ S[8] == '.' else 0\n    boredoms += 1 if S[9] == '.' else 0\n    boredoms +=\
    \ 1 if S[10] == '.' else 0\n    boredoms += 1 if S[11] == '.' else 0\n    boredoms\
    \ += 1 if S[12] == '.' else 0\n    boredoms += 1 if S[13] == '.' else 0\n    boredoms\
    \ += 1 if S[14] == '.' else 0\n    boredoms += 1 if S[15] == '.' else 0\n    boredoms\
    \ += 1 if S[16] == '.' else 0\n    boredoms += 1 if S[17] == '.' else 0\n    boredoms\
    \ += 1 if S[18] == '.' else 0\n    boredoms += 1 if S[19] == '.' else 0\n    boredoms\
    \ += 1 if S[20] == '.' else 0\n    boredoms += 1 if S[21] == '.' else 0\n    boredoms\
    \ += 1 if S[22] == '.' else 0\n    boredoms += 1 if S[23] == '.' else 0\n    boredoms\
    \ += 1 if S[24] == '.' else 0\n    boredoms += 1 if S[25] == '.' else 0\n    boredoms\
    \ += 1 if S[26] == '.' else 0\n    boredoms += 1 if S[27] == '.' else 0\n    boredoms\
    \ += 1 if S[28] == '.' else 0\n    boredoms += 1 if S[29] == '.' else 0\n    boredoms\
    \ += 1 if S[30] == '.' else 0\n    boredoms += 1 if S[31] == '.' else 0\n    boredoms\
    \ += 1 if S[32] == '.' else 0\n    boredoms += 1 if S[33] == '.' else 0\n    boredoms\
    \ += 1 if S[34] == '.' else 0\n    boredoms += 1 if S[35] == '.' else 0\n    boredoms\
    \ += 1 if S[36] == '.' else 0\n    boredoms += 1 if S[37] == '.' else 0\n    boredoms\
    \ += 1 if S[38] == '.\ndef check(candidate):\n    assert candidate('Hello world')\
    \ == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmp8g0qltcd.py\", line 52\n    boredoms += 1 if S[38] ==\
    \ '.\n                               ^\nSyntaxError: EOL while scanning string\
    \ literal\n"
  exit_code: 1
  status: SyntaxError
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredom = 0\n    \n    boredom_list = [\"I\"]\n    \n\
    \    for word in S.split():\n        if word.lower() in boredom_list:\n      \
    \      boredom += 1\n            boredom_list.remove(word.lower())\n    \n   \
    \ return boredom\n\ndef check(candidate):\n    assert candidate('Hello world')\
    \ == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpicwh_43u.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpicwh_43u.py\", line 33,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpicwh_43u.py\", line 27,\
    \ in check\n    assert candidate('I love It !') == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    boredoms += 1 if S[0] == 'I' else\
    \ 0\n    return boredoms\n\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_hu60mjr.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp_hu60mjr.py\", line 27,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp_hu60mjr.py\", line 20,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredom = 0\n    boredom_count = 0\n    \n    for word\
    \ in S.split():\n        if word == \"I\":\n            boredom_count += 1\n \
    \       else:\n            boredom += 1\n    \n    return boredom_count\n\ndef\
    \ check(candidate):\n    assert candidate('Hello world') == 0\n    assert candidate('Is\
    \ the sky blue?') == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpc_lhttln.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpc_lhttln.py\", line 33,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpc_lhttln.py\", line 30,\
    \ in check\n    assert candidate('You and I are going for a walk') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    for word in S.split():\n        if\
    \ word.startswith('I'):\n            boredoms += 1\n    return boredoms\n\n\n\
    def check(candidate):\n    assert candidate('Hello world') == 0\n    assert candidate('Is\
    \ the sky blue?') == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkem78_zy.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpkem78_zy.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpkem78_zy.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    boredoms += 1 if S[0] == 'I' else\
    \ 0\n    return boredoms\n\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkgf6wfem.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpkgf6wfem.py\", line 27,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpkgf6wfem.py\", line 20,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    \n    for word in S.split():\n   \
    \     if word.startswith('I'):\n            boredoms += 1\n    return boredoms\n\
    \ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpx62ava7w.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpx62ava7w.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpx62ava7w.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    boredoms += 1 if S[0] == 'I' else\
    \ 0\n    boredoms += 1 if S[1] == '.' else 0\n    boredoms += 1 if S[2] == '.'\
    \ else 0\n    boredoms += 1 if S[3] == '.' else 0\n    boredoms += 1 if S[4] ==\
    \ '.' else 0\n    boredoms += 1 if S[5] == '.' else 0\n    boredoms += 1 if S[6]\
    \ == '.' else 0\n    boredoms += 1 if S[7] == '.' else 0\n    boredoms += 1 if\
    \ S[8] == '.' else 0\n    boredoms += 1 if S[9] == '.' else 0\n    boredoms +=\
    \ 1 if S[10] == '.' else 0\n    boredoms += 1 if S[11] == '.' else 0\n    boredoms\
    \ += 1 if S[12] == '.' else 0\n    boredoms += 1 if S[13] == '.' else 0\n    boredoms\
    \ += 1 if S[14] == '.' else 0\n    boredoms += 1 if S[15] == '.' else 0\n    boredoms\
    \ += 1 if S[16] == '.' else 0\n    boredoms += 1 if S[17] == '.' else 0\n    boredoms\
    \ += 1 if S[18] == '.' else 0\n    boredoms += 1 if S[19] == '.' else 0\n    boredoms\
    \ += 1 if S[20] == '.' else 0\n    boredoms += 1 if S[21] == '.' else 0\n    boredoms\
    \ += 1 if S[22] == '.' else 0\n    boredoms += 1 if S[23] == '.' else 0\n    boredoms\
    \ += 1 if S[24] == '.' else 0\n    boredoms += 1 if S[25] == '.' else 0\n    boredoms\
    \ += 1 if S[26] == '.' else 0\n    boredoms += 1 if S[27] == '.' else 0\n    boredoms\
    \ += 1 if S[28] == '.' else 0\n    boredoms += 1 if S[29] == '.' else 0\n    boredoms\
    \ += 1 if S[30] == '.' else 0\n    boredoms += 1 if S[31] == '.' else 0\n    boredoms\
    \ += 1 if S[32] == '.' else 0\n    boredoms += 1 if S[33] == '.' else 0\n    boredoms\
    \ += 1 if S[34] == '.' else 0\n    boredoms += 1 if S[35] == '.' else 0\n    boredoms\
    \ += 1 if S[36] == '.' else 0\n    boredoms += 1 if S[37] == '.' else 0\n    boredoms\
    \ += 1 if S[38] == '.\ndef check(candidate):\n    assert candidate('Hello world')\
    \ == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpbqvag0d4.py\", line 52\n    boredoms += 1 if S[38] ==\
    \ '.\n                               ^\nSyntaxError: EOL while scanning string\
    \ literal\n"
  exit_code: 1
  status: SyntaxError
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredom = 0\n    boredom_list = [\"I\"]\n    \n    for\
    \ word in S.split():\n        if word.lower() in boredom_list:\n            boredom\
    \ += 1\n        else:\n            boredom_list.append(word.lower())\n    return\
    \ boredom\n\n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n\
    \    assert candidate('Is the sky blue?') == 0\n    assert candidate('I love It\
    \ !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I feel good\
    \ today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphkmah61j.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmphkmah61j.py\", line 33,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmphkmah61j.py\", line 27,\
    \ in check\n    assert candidate('I love It !') == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    boredoms += 1 if S[0] == 'I' else\
    \ 0\n    boredoms += 1 if S[1] == '.' else 0\n    boredoms += 1 if S[2] == '.'\
    \ else 0\n    boredoms += 1 if S[3] == '.' else 0\n    boredoms += 1 if S[4] ==\
    \ '.' else 0\n    boredoms += 1 if S[5] == '.' else 0\n    boredoms += 1 if S[6]\
    \ == '.' else 0\n    boredoms += 1 if S[7] == '.' else 0\n    boredoms += 1 if\
    \ S[8] == '.' else 0\n    boredoms += 1 if S[9] == '.' else 0\n    boredoms +=\
    \ 1 if S[10] == '.' else 0\n    boredoms += 1 if S[11] == '.' else 0\n    boredoms\
    \ += 1 if S[12] == '.' else 0\n    boredoms += 1 if S[13] == '.' else 0\n    boredoms\
    \ += 1 if S[14] == '.' else 0\n    boredoms += 1 if S[15] == '.' else 0\n    boredoms\
    \ += 1 if S[16] == '.' else 0\n    boredoms += 1 if S[17] == '.' else 0\n    boredoms\
    \ += 1 if S[18] == '.' else 0\n    boredoms += 1 if S[19] == '.' else 0\n    boredoms\
    \ += 1 if S[20] == '.' else 0\n    boredoms += 1 if S[21] == '.' else 0\n    boredoms\
    \ += 1 if S[22] == '.' else 0\n    boredoms += 1 if S[23] == '.' else 0\n    boredoms\
    \ += 1 if S[24] == '.' else 0\n    boredoms += 1 if S[25] == '.' else 0\n    boredoms\
    \ += 1 if S[26] == '.' else 0\n    boredoms += 1 if S[27] == '.' else 0\n    boredoms\
    \ += 1 if S[28] == '.' else 0\n    boredoms += 1 if S[29] == '.' else 0\n    boredoms\
    \ += 1 if S[30] == '.' else 0\n    boredoms += 1 if S[31] == '.' else 0\n    boredoms\
    \ += 1 if S[32] == '.' else 0\n    boredoms += 1 if S[33] == '.' else 0\n    boredoms\
    \ += 1 if S[34] == '.' else 0\n    boredoms += 1 if S[35] == '.' else 0\n    boredoms\
    \ += 1 if S[36] == '.' else 0\n    boredoms += 1 if S[37] == '.' else 0\n    boredoms\
    \ += 1 if S[38] == '.\ndef check(candidate):\n    assert candidate('Hello world')\
    \ == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmprueu523i.py\", line 52\n    boredoms += 1 if S[38] ==\
    \ '.\n                               ^\nSyntaxError: EOL while scanning string\
    \ literal\n"
  exit_code: 1
  status: SyntaxError
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    \n    for word in S.split():\n   \
    \     if word.startswith('I'):\n            boredoms += 1\n    return boredoms\n\
    \n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpa5f_8nft.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpa5f_8nft.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpa5f_8nft.py\", line 23,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredom = 0\n    for word in S.split():\n        if\
    \ word.startswith(\"I\"):\n            boredom += 1\n    return boredom\n\n\n\
    def check(candidate):\n    assert candidate('Hello world') == 0\n    assert candidate('Is\
    \ the sky blue?') == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_ybati2t.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp_ybati2t.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp_ybati2t.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    \n    for word in S.split():\n   \
    \     if word.startswith('I'):\n            boredoms += 1\n    \n    return boredoms\n\
    \ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp59vrwypl.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp59vrwypl.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp59vrwypl.py\", line 23,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    boredoms += 1 if S[0] == 'I' else\
    \ 0\n    boredoms += 1 if S[1] == '.' else 0\n    boredoms += 1 if S[2] == '.'\
    \ else 0\n    boredoms += 1 if S[3] == '.' else 0\n    boredoms += 1 if S[4] ==\
    \ '.' else 0\n    boredoms += 1 if S[5] == '.' else 0\n    boredoms += 1 if S[6]\
    \ == '.' else 0\n    boredoms += 1 if S[7] == '.' else 0\n    boredoms += 1 if\
    \ S[8] == '.' else 0\n    boredoms += 1 if S[9] == '.' else 0\n    boredoms +=\
    \ 1 if S[10] == '.' else 0\n    boredoms += 1 if S[11] == '.' else 0\n    boredoms\
    \ += 1 if S[12] == '.' else 0\n    boredoms += 1 if S[13] == '.' else 0\n    boredoms\
    \ += 1 if S[14] == '.' else 0\n    boredoms += 1 if S[15] == '.' else 0\n    boredoms\
    \ += 1 if S[16] == '.' else 0\n    boredoms += 1 if S[17] == '.' else 0\n    boredoms\
    \ += 1 if S[18] == '.' else 0\n    boredoms += 1 if S[19] == '.' else 0\n    boredoms\
    \ += 1 if S[20] == '.' else 0\n    boredoms += 1 if S[21] == '.' else 0\n    boredoms\
    \ += 1 if S[22] == '.' else 0\n    boredoms += 1 if S[23] == '.' else 0\n    boredoms\
    \ += 1 if S[24] == '.' else 0\n    boredoms += 1 if S[25] == '.' else 0\n    boredoms\
    \ += 1 if S[26] == '.' else 0\n    boredoms += 1 if S[27] == '.' else 0\n    boredoms\
    \ += 1 if S[28] == '.' else 0\n    boredoms += 1 if S[29] == '.' else 0\n    boredoms\
    \ += 1 if S[30] == '.' else 0\n    boredoms += 1 if S[31] == '.' else 0\n    boredoms\
    \ += 1 if S[32] == '.' else 0\n    boredoms += 1 if S[33] == '.' else 0\n    boredoms\
    \ += 1 if S[34] == '.' else 0\n    boredoms += 1 if S[35] == '.' else 0\n    boredoms\
    \ += 1 if S[36] == '.' else 0\n    boredoms += 1 if S[37] == '.' else 0\n    boredoms\
    \ += 1 if S[38] == '.\ndef check(candidate):\n    assert candidate('Hello world')\
    \ == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpnmnglcbg.py\", line 52\n    boredoms += 1 if S[38] ==\
    \ '.\n                               ^\nSyntaxError: EOL while scanning string\
    \ literal\n"
  exit_code: 1
  status: SyntaxError
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    for word in S.split():\n        if\
    \ word.startswith('I'):\n            boredoms += 1\n    return boredoms\n\n\n\
    def check(candidate):\n    assert candidate('Hello world') == 0\n    assert candidate('Is\
    \ the sky blue?') == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi0ojap3o.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpi0ojap3o.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpi0ojap3o.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    for word in S.split():\n        if\
    \ word.startswith('I'):\n            boredoms += 1\n    return boredoms\n\n\n\
    def check(candidate):\n    assert candidate('Hello world') == 0\n    assert candidate('Is\
    \ the sky blue?') == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7vmo1vsk.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp7vmo1vsk.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp7vmo1vsk.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    \n    for word in S.split():\n   \
    \     if word.startswith('I'):\n            boredoms += 1\n    return boredoms\n\
    \ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmps4fyykn_.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmps4fyykn_.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmps4fyykn_.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredom = 0\n    \n    boredom_list = [\"I\"]\n    \n\
    \    for word in S.split():\n        if word.lower() in boredom_list:\n      \
    \      boredom += 1\n            boredom_list.remove(word.lower())\n    return\
    \ boredom\n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n\
    \    assert candidate('Is the sky blue?') == 0\n    assert candidate('I love It\
    \ !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I feel good\
    \ today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp751f1gxu.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp751f1gxu.py\", line 32,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp751f1gxu.py\", line 26,\
    \ in check\n    assert candidate('I love It !') == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    boredoms += 1 if S[0] == 'I' else\
    \ 0\n    boredoms += 1 if S[1] == '.' else 0\n    boredoms += 1 if S[2] == '.'\
    \ else 0\n    boredoms += 1 if S[3] == '.' else 0\n    boredoms += 1 if S[4] ==\
    \ '.' else 0\n    boredoms += 1 if S[5] == '.' else 0\n    boredoms += 1 if S[6]\
    \ == '.' else 0\n    boredoms += 1 if S[7] == '.' else 0\n    boredoms += 1 if\
    \ S[8] == '.' else 0\n    boredoms += 1 if S[9] == '.' else 0\n    boredoms +=\
    \ 1 if S[10] == '.' else 0\n    boredoms += 1 if S[11] == '.' else 0\n    boredoms\
    \ += 1 if S[12] == '.' else 0\n    boredoms += 1 if S[13] == '.' else 0\n    boredoms\
    \ += 1 if S[14] == '.' else 0\n    boredoms += 1 if S[15] == '.' else 0\n    boredoms\
    \ += 1 if S[16] == '.' else 0\n    boredoms += 1 if S[17] == '.' else 0\n    boredoms\
    \ += 1 if S[18] == '.' else 0\n    boredoms += 1 if S[19] == '.' else 0\n    boredoms\
    \ += 1 if S[20] == '.' else 0\n    boredoms += 1 if S[21] == '.' else 0\n    boredoms\
    \ += 1 if S[22] == '.' else 0\n    boredoms += 1 if S[23] == '.' else 0\n    boredoms\
    \ += 1 if S[24] == '.' else 0\n    boredoms += 1 if S[25] == '.' else 0\n    boredoms\
    \ += 1 if S[26] == '.' else 0\n    boredoms += 1 if S[27] == '.' else 0\n    boredoms\
    \ += 1 if S[28] == '.' else 0\n    boredoms += 1 if S[29] == '.' else 0\n    boredoms\
    \ += 1 if S[30] == '.' else 0\n    boredoms += 1 if S[31] == '.' else 0\n    boredoms\
    \ += 1 if S[32] == '.' else 0\n    boredoms += 1 if S[33] == '.' else 0\n    boredoms\
    \ += 1 if S[34] == '.' else 0\n    boredoms += 1 if S[35] == '.' else 0\n    boredoms\
    \ += 1 if S[36] == '.' else 0\n    boredoms += 1 if S[37] == '.' else 0\n    boredoms\
    \ += 1 if S[38] == '.\ndef check(candidate):\n    assert candidate('Hello world')\
    \ == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmp04f__821.py\", line 52\n    boredoms += 1 if S[38] ==\
    \ '.\n                               ^\nSyntaxError: EOL while scanning string\
    \ literal\n"
  exit_code: 1
  status: SyntaxError
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    count = 0\n    boredoms = [\"I\"]\n    for word in S.split():\n\
    \        if word.lower() in boredoms:\n            count += 1\n    return count\n\
    \n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpud2p6yk0.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpud2p6yk0.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpud2p6yk0.py\", line 24,\
    \ in check\n    assert candidate('I love It !') == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    for word in S.split():\n        if\
    \ word.startswith('I'):\n            boredoms += 1\n    return boredoms\n\n\n\
    def check(candidate):\n    assert candidate('Hello world') == 0\n    assert candidate('Is\
    \ the sky blue?') == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpm4vphlzs.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpm4vphlzs.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpm4vphlzs.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredom = 0\n    boredom_list = [\"I\"]\n    boredom_list_len\
    \ = len(boredom_list)\n    boredom_list_index = 0\n    boredom_list_index_len\
    \ = len(boredom_list_index)\n    boredom_list_index_index_len = len(boredom_list_index_index)\n\
    \    boredom_list_index_index_index_len = len(boredom_list_index_index_index)\n\
    \    boredom_list_index_index_index_index_len = len(boredom_list_index_index_index_index)\n\
    \    boredom_list_index_index_index_index_index_len = len(boredom_list_index_index_index_index_index_index)\n\
    \    boredom_list_index_index_index_index_index_index_len = len(boredom_list_index_index_index_index_index_index)\n\
    \    boredom_list_index_index_index_index_index_index_len = len(boredom_list_index_index_index_index_index_index_index)\n\
    \    boredom_list_index_index_index_index_index_index_index_len = len(boredom_list_index_index_index_index_index_index_index_index)\n\
    \    boredom_list_index_index_index_index_index_index_index_index_len = len(boredom_list_index_index_index_index_index_index_index_index_index)\n\
    \    boredom_list_index_index_index_index_index_index_index_index_index_len =\
    \ len(boredom_list_index_index_index_index_index_index_index_index_index_index)\n\
    \    boredom_list_index_index_index_index_index_index_index_index_index_index_len\
    \ = len(boredom_list_index_index_index_index_index_index_index_index_index_index_index)\n\
    \    boredom_list_index_index_index_index_index_index_index_index_index_index_index_index_len\
    \ = len(boredom_list_index_index_index_index_index_index_index_index_index_index_index_index_index)\n\
    \    boredom_list_index_index_index_index_index_index_index_index_index_index_index_index_index_len\
    \ = len(boredom_list_index_index_index_index_index_index_index_index_index_index_index_index_index_index)\n\
    \    boredom_list_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_len\
    \ = len(boredom_list_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index)\n\
    \    boredom_list_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_len\
    \ = len(boredom_list_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index)\n\
    \    boredom_list_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_len\
    \ = len(boredom_list_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index)\n\
    \    boredom_list_index_index_index_index_index_index_index_\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzc76b7jt.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpzc76b7jt.py\", line 43,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpzc76b7jt.py\", line 35,\
    \ in check\n    assert candidate('Hello world') == 0\n  File \"/tmp/tmpzc76b7jt.py\"\
    , line 17, in is_bored\n    boredom_list_index_len = len(boredom_list_index)\n\
    TypeError: object of type 'int' has no len()\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    \n    for word in S.split():\n   \
    \     if word == 'I':\n            boredoms += 1\n    return boredoms\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4fyuffeg.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp4fyuffeg.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp4fyuffeg.py\", line 26,\
    \ in check\n    assert candidate('You and I are going for a walk') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    \n    for word in S.split():\n   \
    \     if word.startswith('I'):\n            boredoms += 1\n    return boredoms\n\
    \ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpschgg46h.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpschgg46h.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpschgg46h.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    for word in S.split():\n        if\
    \ word.startswith(\"I\"):\n            boredoms += 1\n    return boredoms\n\n\n\
    def check(candidate):\n    assert candidate('Hello world') == 0\n    assert candidate('Is\
    \ the sky blue?') == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpipt2e6m7.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpipt2e6m7.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpipt2e6m7.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    boredoms += 1 if S[0] == \"I\" else\
    \ 0\n    boredoms += 1 if S[1] == \"I\" else 0\n    boredoms += 1 if S[2] == \"\
    I\" else 0\n    boredoms += 1 if S[3] == \"I\" else 0\n    boredoms += 1 if S[4]\
    \ == \"I\" else 0\n    boredoms += 1 if S[5] == \"I\" else 0\n    boredoms +=\
    \ 1 if S[6] == \"I\" else 0\n    boredoms += 1 if S[7] == \"I\" else 0\n    boredoms\
    \ += 1 if S[8] == \"I\" else 0\n    boredoms += 1 if S[9] == \"I\" else 0\n  \
    \  boredoms += 1 if S[10] == \"I\" else 0\n    boredoms += 1 if S[11] == \"I\"\
    \ else 0\n    boredoms += 1 if S[12] == \"I\" else 0\n    boredoms += 1 if S[13]\
    \ == \"I\" else 0\n    boredoms += 1 if S[14] == \"I\" else 0\n    boredoms +=\
    \ 1 if S[15] == \"I\" else 0\n    boredoms += 1 if S[16] == \"I\" else 0\n   \
    \ boredoms += 1 if S[17] == \"I\" else 0\n    boredoms += 1 if S[18] == \"I\"\
    \ else 0\n    boredoms += 1 if S[19] == \"I\" else 0\n    boredoms += 1 if S[20]\
    \ == \"I\" else 0\n    boredoms += 1 if S[21] == \"I\" else 0\n    boredoms +=\
    \ 1 if S[22] == \"I\" else 0\n    boredoms += 1 if S[23] == \"I\" else 0\n   \
    \ boredoms += 1 if S[24] == \"I\" else 0\n    boredoms += 1 if S[25] == \"I\"\
    \ else 0\n    boredoms += 1 if S[26] == \"I\" else 0\n    boredoms += 1 if S[27]\
    \ == \"I\" else 0\n    boredoms += 1 if S[28] == \"I\" else 0\n    boredoms +=\
    \ 1 if S[29] == \"I\" else 0\n    boredoms += 1 if S[30] == \"I\" else 0\n   \
    \ boredoms += 1 if S[31] == \"I\" else 0\n    boredoms += 1 if S[32] == \"I\"\
    \ else 0\n    boredoms += 1 if S[33] == \"I\" else 0\n    boredoms += 1 if S[\n\
    def check(candidate):\n    assert candidate('Hello world') == 0\n    assert candidate('Is\
    \ the sky blue?') == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpx7lgbo3q.py\", line 49\n    def check(candidate):\n  \
    \  ^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    for word in S.split():\n        if\
    \ word.startswith('I'):\n            boredoms += 1\n    return boredoms\n\n\n\
    def check(candidate):\n    assert candidate('Hello world') == 0\n    assert candidate('Is\
    \ the sky blue?') == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkwnl5j9t.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpkwnl5j9t.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpkwnl5j9t.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    \n    for word in S.split():\n   \
    \     if word.startswith('I'):\n            boredoms += 1\n    return boredoms\n\
    \ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6t1ghiz8.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp6t1ghiz8.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp6t1ghiz8.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    \n    for word in S.split():\n   \
    \     if word.startswith('I'):\n            boredoms += 1\n    return boredoms\n\
    \n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0ga_d1ls.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp0ga_d1ls.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp0ga_d1ls.py\", line 23,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    boredoms += 1 if S[0] == 'I' else\
    \ 0\n    boredoms += 1 if S[1] == '.' else 0\n    boredoms += 1 if S[2] == '.'\
    \ else 0\n    boredoms += 1 if S[3] == '.' else 0\n    boredoms += 1 if S[4] ==\
    \ '.' else 0\n    boredoms += 1 if S[5] == '.' else 0\n    boredoms += 1 if S[6]\
    \ == '.' else 0\n    boredoms += 1 if S[7] == '.' else 0\n    boredoms += 1 if\
    \ S[8] == '.' else 0\n    boredoms += 1 if S[9] == '.' else 0\n    boredoms +=\
    \ 1 if S[10] == '.' else 0\n    boredoms += 1 if S[11] == '.' else 0\n    boredoms\
    \ += 1 if S[12] == '.' else 0\n    boredoms += 1 if S[13] == '.' else 0\n    boredoms\
    \ += 1 if S[14] == '.' else 0\n    boredoms += 1 if S[15] == '.' else 0\n    boredoms\
    \ += 1 if S[16] == '.' else 0\n    boredoms += 1 if S[17] == '.' else 0\n    boredoms\
    \ += 1 if S[18] == '.' else 0\n    boredoms += 1 if S[19] == '.' else 0\n    boredoms\
    \ += 1 if S[20] == '.' else 0\n    boredoms += 1 if S[21] == '.' else 0\n    boredoms\
    \ += 1 if S[22] == '.' else 0\n    boredoms += 1 if S[23] == '.' else 0\n    boredoms\
    \ += 1 if S[24] == '.' else 0\n    boredoms += 1 if S[25] == '.' else 0\n    boredoms\
    \ += 1 if S[26] == '.' else 0\n    boredoms += 1 if S[27] == '.' else 0\n    boredoms\
    \ += 1 if S[28] == '.' else 0\n    boredoms += 1 if S[29] == '.' else 0\n    boredoms\
    \ += 1 if S[30] == '.' else 0\n    boredoms += 1 if S[31] == '.' else 0\n    boredoms\
    \ += 1 if S[32] == '.' else 0\n    boredoms += 1 if S[33] == '.' else 0\n    boredoms\
    \ += 1 if S[34] == '.' else 0\n    boredoms += 1 if S[35] == '.' else 0\n    boredoms\
    \ += 1 if S[36] == '.' else 0\n    boredoms += 1 if S[37] == '.' else 0\n    boredoms\
    \ += 1 if S[38] == '.\ndef check(candidate):\n    assert candidate('Hello world')\
    \ == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpifocr2vk.py\", line 52\n    boredoms += 1 if S[38] ==\
    \ '.\n                               ^\nSyntaxError: EOL while scanning string\
    \ literal\n"
  exit_code: 1
  status: SyntaxError
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    boredoms += 1 if S[0] == 'I' else\
    \ 0\n    boredoms += 1 if S[1] == '.' else 0\n    boredoms += 1 if S[2] == '.'\
    \ else 0\n    boredoms += 1 if S[3] == '.' else 0\n    boredoms += 1 if S[4] ==\
    \ '.' else 0\n    boredoms += 1 if S[5] == '.' else 0\n    boredoms += 1 if S[6]\
    \ == '.' else 0\n    boredoms += 1 if S[7] == '.' else 0\n    boredoms += 1 if\
    \ S[8] == '.' else 0\n    boredoms += 1 if S[9] == '.' else 0\n    boredoms +=\
    \ 1 if S[10] == '.' else 0\n    boredoms += 1 if S[11] == '.' else 0\n    boredoms\
    \ += 1 if S[12] == '.' else 0\n    boredoms += 1 if S[13] == '.' else 0\n    boredoms\
    \ += 1 if S[14] == '.' else 0\n    boredoms += 1 if S[15] == '.' else 0\n    boredoms\
    \ += 1 if S[16] == '.' else 0\n    boredoms += 1 if S[17] == '.' else 0\n    boredoms\
    \ += 1 if S[18] == '.' else 0\n    boredoms += 1 if S[19] == '.' else 0\n    boredoms\
    \ += 1 if S[20] == '.' else 0\n    boredoms += 1 if S[21] == '.' else 0\n    boredoms\
    \ += 1 if S[22] == '.' else 0\n    boredoms += 1 if S[23] == '.' else 0\n    boredoms\
    \ += 1 if S[24] == '.' else 0\n    boredoms += 1 if S[25] == '.' else 0\n    boredoms\
    \ += 1 if S[26] == '.' else 0\n    boredoms += 1 if S[27] == '.' else 0\n    boredoms\
    \ += 1 if S[28] == '.' else 0\n    boredoms += 1 if S[29] == '.' else 0\n    boredoms\
    \ += 1 if S[30] == '.' else 0\n    boredoms += 1 if S[31] == '.' else 0\n    boredoms\
    \ += 1 if S[32] == '.' else 0\n    boredoms += 1 if S[33] == '.' else 0\n    boredoms\
    \ += 1 if S[34] == '.' else 0\n    boredoms += 1 if S[35] == '.' else 0\n    boredoms\
    \ += 1 if S[36] == '.' else 0\n    boredoms += 1 if S[37] == '.' else 0\n    boredoms\
    \ += 1 if S[38] == '.\ndef check(candidate):\n    assert candidate('Hello world')\
    \ == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmp949qbis4.py\", line 52\n    boredoms += 1 if S[38] ==\
    \ '.\n                               ^\nSyntaxError: EOL while scanning string\
    \ literal\n"
  exit_code: 1
  status: SyntaxError
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    boredoms += 1 if S[0] == \"I\" else\
    \ 0\n    boredoms += 1 if S[1] == \"I\" else 0\n    boredoms += 1 if S[2] == \"\
    I\" else 0\n    boredoms += 1 if S[3] == \"I\" else 0\n    boredoms += 1 if S[4]\
    \ == \"I\" else 0\n    boredoms += 1 if S[5] == \"I\" else 0\n    boredoms +=\
    \ 1 if S[6] == \"I\" else 0\n    boredoms += 1 if S[7] == \"I\" else 0\n    boredoms\
    \ += 1 if S[8] == \"I\" else 0\n    boredoms += 1 if S[9] == \"I\" else 0\n  \
    \  boredoms += 1 if S[10] == \"I\" else 0\n    boredoms += 1 if S[11] == \"I\"\
    \ else 0\n    boredoms += 1 if S[12] == \"I\" else 0\n    boredoms += 1 if S[13]\
    \ == \"I\" else 0\n    boredoms += 1 if S[14] == \"I\" else 0\n    boredoms +=\
    \ 1 if S[15] == \"I\" else 0\n    boredoms += 1 if S[16] == \"I\" else 0\n   \
    \ boredoms += 1 if S[17] == \"I\" else 0\n    boredoms += 1 if S[18] == \"I\"\
    \ else 0\n    boredoms += 1 if S[19] == \"I\" else 0\n    boredoms += 1 if S[20]\
    \ == \"I\" else 0\n    boredoms += 1 if S[21] == \"I\" else 0\n    boredoms +=\
    \ 1 if S[22] == \"I\" else 0\n    boredoms += 1 if S[23] == \"I\" else 0\n   \
    \ boredoms += 1 if S[24] == \"I\" else 0\n    boredoms += 1 if S[25] == \"I\"\
    \ else 0\n    boredoms += 1 if S[26] == \"I\" else 0\n    boredoms += 1 if S[27]\
    \ == \"I\" else 0\n    boredoms += 1 if S[28] == \"I\" else 0\n    boredoms +=\
    \ 1 if S[29] == \"I\" else 0\n    boredoms += 1 if S[30] == \"I\" else 0\n   \
    \ boredoms += 1 if S[31] == \"I\" else 0\n    boredoms += 1 if S[32] == \"I\"\
    \ else 0\n    boredoms += 1 if S[33] == \"I\" else 0\n    boredoms += 1 if S[\n\
    def check(candidate):\n    assert candidate('Hello world') == 0\n    assert candidate('Is\
    \ the sky blue?') == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmp4q8jm74h.py\", line 49\n    def check(candidate):\n  \
    \  ^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredom = 0\n    boredom_count = 0\n    \n    for word\
    \ in S.split():\n        if word.startswith('I'):\n            boredom_count +=\
    \ 1\n            \n    return boredom_count\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world') == 0\n    assert candidate('Is the sky blue?') == 0\n\
    \    assert candidate('I love It !') == 1\n    assert candidate('bIt') == 0\n\
    \    assert candidate('I feel good today. I will be productive. will kill It')\
    \ == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef test_check():\n\
    \    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp95on2w4x.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp95on2w4x.py\", line 31,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp95on2w4x.py\", line 24,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    for word in S.split():\n        if\
    \ word.startswith('I'):\n            boredoms += 1\n    return boredoms\n\n\n\
    def check(candidate):\n    assert candidate('Hello world') == 0\n    assert candidate('Is\
    \ the sky blue?') == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpshhc7z1z.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpshhc7z1z.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpshhc7z1z.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    for word in S.split():\n        if\
    \ word.startswith('I'):\n            boredoms += 1\n    return boredoms\n\n\n\
    def check(candidate):\n    assert candidate('Hello world') == 0\n    assert candidate('Is\
    \ the sky blue?') == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp223i2_j_.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp223i2_j_.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp223i2_j_.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    \n    for word in S.split():\n   \
    \     if word.startswith('I'):\n            boredoms += 1\n    return boredoms\n\
    \n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcqtc073j.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpcqtc073j.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpcqtc073j.py\", line 23,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    \n    for word in S.split():\n   \
    \     if word == 'I':\n            boredoms += 1\n    return boredoms\n\n\ndef\
    \ check(candidate):\n    assert candidate('Hello world') == 0\n    assert candidate('Is\
    \ the sky blue?') == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp65al5wa0.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp65al5wa0.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp65al5wa0.py\", line 27,\
    \ in check\n    assert candidate('You and I are going for a walk') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    boredoms += 1 if S[0] == \"I\" else\
    \ 0\n    boredoms += 1 if S[1] == \"I\" else 0\n    boredoms += 1 if S[2] == \"\
    I\" else 0\n    boredoms += 1 if S[3] == \"I\" else 0\n    boredoms += 1 if S[4]\
    \ == \"I\" else 0\n    boredoms += 1 if S[5] == \"I\" else 0\n    boredoms +=\
    \ 1 if S[6] == \"I\" else 0\n    boredoms += 1 if S[7] == \"I\" else 0\n    boredoms\
    \ += 1 if S[8] == \"I\" else 0\n    boredoms += 1 if S[9] == \"I\" else 0\n  \
    \  boredoms += 1 if S[10] == \"I\" else 0\n    boredoms += 1 if S[11] == \"I\"\
    \ else 0\n    boredoms += 1 if S[12] == \"I\" else 0\n    boredoms += 1 if S[13]\
    \ == \"I\" else 0\n    boredoms += 1 if S[14] == \"I\" else 0\n    boredoms +=\
    \ 1 if S[15] == \"I\" else 0\n    boredoms += 1 if S[16] == \"I\" else 0\n   \
    \ boredoms += 1 if S[17] == \"I\" else 0\n    boredoms += 1 if S[18] == \"I\"\
    \ else 0\n    boredoms += 1 if S[19] == \"I\" else 0\n    boredoms += 1 if S[20]\
    \ == \"I\" else 0\n    boredoms += 1 if S[21] == \"I\" else 0\n    boredoms +=\
    \ 1 if S[22] == \"I\" else 0\n    boredoms += 1 if S[23] == \"I\" else 0\n   \
    \ boredoms += 1 if S[24] == \"I\" else 0\n    boredoms += 1 if S[25] == \"I\"\
    \ else 0\n    boredoms += 1 if S[26] == \"I\" else 0\n    boredoms += 1 if S[27]\
    \ == \"I\" else 0\n    boredoms += 1 if S[28] == \"I\" else 0\n    boredoms +=\
    \ 1 if S[29] == \"I\" else 0\n    boredoms += 1 if S[30] == \"I\" else 0\n   \
    \ boredoms += 1 if S[31] == \"I\" else 0\n    boredoms += 1 if S[32] == \"I\"\
    \ else 0\n    boredoms += 1 if S[33] == \"I\" else 0\n    boredoms += 1 if S[\n\
    def check(candidate):\n    assert candidate('Hello world') == 0\n    assert candidate('Is\
    \ the sky blue?') == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpvng7jvgo.py\", line 49\n    def check(candidate):\n  \
    \  ^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    \n    for word in S.split():\n   \
    \     if word.startswith('I'):\n            boredoms += 1\n    return boredoms\n\
    \n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5hv9smak.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp5hv9smak.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp5hv9smak.py\", line 23,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    \n    for word in S.split():\n   \
    \     if word.startswith('I'):\n            boredoms += 1\n    return boredoms\n\
    \n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpc73cfof9.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpc73cfof9.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpc73cfof9.py\", line 23,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    count = 0\n    boredoms = [\"I\"]\n    for word in S.split():\n\
    \        if word.lower() in boredoms:\n            count += 1\n    return count\n\
    \n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvh3x89f5.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpvh3x89f5.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpvh3x89f5.py\", line 24,\
    \ in check\n    assert candidate('I love It !') == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    for word in S.split():\n        if\
    \ word.startswith('I'):\n            boredoms += 1\n    return boredoms\n\n\n\
    def check(candidate):\n    assert candidate('Hello world') == 0\n    assert candidate('Is\
    \ the sky blue?') == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpeh1dnfu4.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpeh1dnfu4.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpeh1dnfu4.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredom = 0\n    boredom_list = [\"I\"]\n    boredom_list.extend(S.split())\n\
    \    for word in boredom_list:\n        if word.startswith(\"I\"):\n         \
    \   boredom += 1\n    return boredom\n\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv1979okb.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpv1979okb.py\", line 31,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpv1979okb.py\", line 23,\
    \ in check\n    assert candidate('Hello world') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    \n    for word in S.split():\n   \
    \     if word.startswith('I'):\n            boredoms += 1\n    return boredoms\n\
    \n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8iysyl6_.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp8iysyl6_.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp8iysyl6_.py\", line 23,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredom = 0\n    \n    for word in S.split():\n    \
    \    if word.startswith('I'):\n            boredom += 1\n    return boredom\n\n\
    def check(candidate):\n    assert candidate('Hello world') == 0\n    assert candidate('Is\
    \ the sky blue?') == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp42_bmhrf.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp42_bmhrf.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp42_bmhrf.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    for word in S.split():\n        if\
    \ word.startswith('I'):\n            boredoms += 1\n    return boredoms\n\n\n\
    def check(candidate):\n    assert candidate('Hello world') == 0\n    assert candidate('Is\
    \ the sky blue?') == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpimihzpze.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpimihzpze.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpimihzpze.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    boredoms += 1 if S[0] == \"I\" else\
    \ 0\n    boredoms += 1 if S[1] == \"I\" else 0\n    boredoms += 1 if S[2] == \"\
    I\" else 0\n    boredoms += 1 if S[3] == \"I\" else 0\n    boredoms += 1 if S[4]\
    \ == \"I\" else 0\n    boredoms += 1 if S[5] == \"I\" else 0\n    boredoms +=\
    \ 1 if S[6] == \"I\" else 0\n    boredoms += 1 if S[7] == \"I\" else 0\n    boredoms\
    \ += 1 if S[8] == \"I\" else 0\n    boredoms += 1 if S[9] == \"I\" else 0\n  \
    \  boredoms += 1 if S[10] == \"I\" else 0\n    boredoms += 1 if S[11] == \"I\"\
    \ else 0\n    boredoms += 1 if S[12] == \"I\" else 0\n    boredoms += 1 if S[13]\
    \ == \"I\" else 0\n    boredoms += 1 if S[14] == \"I\" else 0\n    boredoms +=\
    \ 1 if S[15] == \"I\" else 0\n    boredoms += 1 if S[16] == \"I\" else 0\n   \
    \ boredoms += 1 if S[17] == \"I\" else 0\n    boredoms += 1 if S[18] == \"I\"\
    \ else 0\n    boredoms += 1 if S[19] == \"I\" else 0\n    boredoms += 1 if S[20]\
    \ == \"I\" else 0\n    boredoms += 1 if S[21] == \"I\" else 0\n    boredoms +=\
    \ 1 if S[22] == \"I\" else 0\n    boredoms += 1 if S[23] == \"I\" else 0\n   \
    \ boredoms += 1 if S[24] == \"I\" else 0\n    boredoms += 1 if S[25] == \"I\"\
    \ else 0\n    boredoms += 1 if S[26] == \"I\" else 0\n    boredoms += 1 if S[27]\
    \ == \"I\" else 0\n    boredoms += 1 if S[28] == \"I\" else 0\n    boredoms +=\
    \ 1 if S[29] == \"I\" else 0\n    boredoms += 1 if S[30] == \"I\" else 0\n   \
    \ boredoms += 1 if S[31] == \"I\" else 0\n    boredoms += 1 if S[32] == \"I\"\
    \ else 0\n    boredoms += 1 if S[33] == \"I\" else 0\n    boredoms += 1 if S[\n\
    def check(candidate):\n    assert candidate('Hello world') == 0\n    assert candidate('Is\
    \ the sky blue?') == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpn23g0xba.py\", line 49\n    def check(candidate):\n  \
    \  ^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredom = 0\n    for word in S.split():\n        if\
    \ word.startswith('I'):\n            boredom += 1\n    return boredom\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyby91033.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpyby91033.py\", line 28,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpyby91033.py\", line 21,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    boredoms += 1 if S[0] == 'I' else\
    \ 0\n    boredoms += 1 if S[1] == '.' else 0\n    boredoms += 1 if S[2] == '.'\
    \ else 0\n    boredoms += 1 if S[3] == '.' else 0\n    boredoms += 1 if S[4] ==\
    \ '.' else 0\n    boredoms += 1 if S[5] == '.' else 0\n    boredoms += 1 if S[6]\
    \ == '.' else 0\n    boredoms += 1 if S[7] == '.' else 0\n    boredoms += 1 if\
    \ S[8] == '.' else 0\n    boredoms += 1 if S[9] == '.' else 0\n    boredoms +=\
    \ 1 if S[10] == '.' else 0\n    boredoms += 1 if S[11] == '.' else 0\n    boredoms\
    \ += 1 if S[12] == '.' else 0\n    boredoms += 1 if S[13] == '.' else 0\n    boredoms\
    \ += 1 if S[14] == '.' else 0\n    boredoms += 1 if S[15] == '.' else 0\n    boredoms\
    \ += 1 if S[16] == '.' else 0\n    boredoms += 1 if S[17] == '.' else 0\n    boredoms\
    \ += 1 if S[18] == '.' else 0\n    boredoms += 1 if S[19] == '.' else 0\n    boredoms\
    \ += 1 if S[20] == '.' else 0\n    boredoms += 1 if S[21] == '.' else 0\n    boredoms\
    \ += 1 if S[22] == '.' else 0\n    boredoms += 1 if S[23] == '.' else 0\n    boredoms\
    \ += 1 if S[24] == '.' else 0\n    boredoms += 1 if S[25] == '.' else 0\n    boredoms\
    \ += 1 if S[26] == '.' else 0\n    boredoms += 1 if S[27] == '.' else 0\n    boredoms\
    \ += 1 if S[28] == '.' else 0\n    boredoms += 1 if S[29] == '.' else 0\n    boredoms\
    \ += 1 if S[30] == '.' else 0\n    boredoms += 1 if S[31] == '.' else 0\n    boredoms\
    \ += 1 if S[32] == '.' else 0\n    boredoms += 1 if S[33] == '.' else 0\n    boredoms\
    \ += 1 if S[34] == '.' else 0\n    boredoms += 1 if S[35] == '.' else 0\n    boredoms\
    \ += 1 if S[36] == '.' else 0\n    boredoms += 1 if S[37] == '.' else 0\n    boredoms\
    \ += 1 if S[38] == '.\ndef check(candidate):\n    assert candidate('Hello world')\
    \ == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpucp7096o.py\", line 52\n    boredoms += 1 if S[38] ==\
    \ '.\n                               ^\nSyntaxError: EOL while scanning string\
    \ literal\n"
  exit_code: 1
  status: SyntaxError
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    \n    for word in S.split():\n   \
    \     if word.startswith('I'):\n            boredoms += 1\n    return boredoms\n\
    \ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpy20klc8r.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpy20klc8r.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpy20klc8r.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    for word in S.split():\n        if\
    \ word.startswith('I'):\n            boredoms += 1\n    return boredoms\n\n\n\
    def check(candidate):\n    assert candidate('Hello world') == 0\n    assert candidate('Is\
    \ the sky blue?') == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpd8kj6ht3.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpd8kj6ht3.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpd8kj6ht3.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    for word in S.split():\n        if\
    \ word.startswith('I'):\n            boredoms += 1\n    return boredoms\n\n\n\
    def check(candidate):\n    assert candidate('Hello world') == 0\n    assert candidate('Is\
    \ the sky blue?') == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpepwi5dgt.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpepwi5dgt.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpepwi5dgt.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    boredoms += 1 if S[0] == 'I' else\
    \ 0\n    boredoms += 1 if S[1] == '.' else 0\n    boredoms += 1 if S[2] == '?'\
    \ else 0\n    boredoms += 1 if S[3] == '!' else 0\n    return boredoms\n\n\ndef\
    \ check(candidate):\n    assert candidate('Hello world') == 0\n    assert candidate('Is\
    \ the sky blue?') == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpl3m8a0qp.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpl3m8a0qp.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpl3m8a0qp.py\", line 23,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    for word in S.split():\n        if\
    \ word.startswith('I'):\n            boredoms += 1\n    return boredoms\n\n\n\
    def check(candidate):\n    assert candidate('Hello world') == 0\n    assert candidate('Is\
    \ the sky blue?') == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp122k3c90.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp122k3c90.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp122k3c90.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredom = 0\n    for word in S.split():\n        if\
    \ word.startswith('I'):\n            boredom += 1\n    return boredom\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7vbp6i0i.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp7vbp6i0i.py\", line 28,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp7vbp6i0i.py\", line 21,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    \n    for word in S.split():\n   \
    \     if word.startswith('I'):\n            boredoms += 1\n    return boredoms\n\
    \n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgpqbyy5g.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpgpqbyy5g.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpgpqbyy5g.py\", line 23,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    \n    for word in S.split():\n   \
    \     if word.startswith('I'):\n            boredoms += 1\n    return boredoms\n\
    \ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphvzqwztv.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmphvzqwztv.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmphvzqwztv.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredom = 0\n    for word in S.split():\n        if\
    \ word == 'I':\n            boredom += 1\n    return boredom\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphvmaikmh.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmphvmaikmh.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmphvmaikmh.py\", line 26,\
    \ in check\n    assert candidate('You and I are going for a walk') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    boredoms += 1 if S[0] == 'I' else\
    \ 0\n    boredoms += 1 if S[1] == '.' else 0\n    boredoms += 1 if S[2] == '?'\
    \ else 0\n    boredoms += 1 if S[3] == '!' else 0\n    return boredoms\n\n\ndef\
    \ check(candidate):\n    assert candidate('Hello world') == 0\n    assert candidate('Is\
    \ the sky blue?') == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_1gtimhk.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp_1gtimhk.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp_1gtimhk.py\", line 23,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    boredoms += 1 if S[0] == \"I\" else\
    \ 0\n    boredoms += 1 if S[1] == \"I\" else 0\n    boredoms += 1 if S[2] == \"\
    I\" else 0\n    boredoms += 1 if S[3] == \"I\" else 0\n    boredoms += 1 if S[4]\
    \ == \"I\" else 0\n    boredoms += 1 if S[5] == \"I\" else 0\n    boredoms +=\
    \ 1 if S[6] == \"I\" else 0\n    boredoms += 1 if S[7] == \"I\" else 0\n    boredoms\
    \ += 1 if S[8] == \"I\" else 0\n    boredoms += 1 if S[9] == \"I\" else 0\n  \
    \  boredoms += 1 if S[10] == \"I\" else 0\n    boredoms += 1 if S[11] == \"I\"\
    \ else 0\n    boredoms += 1 if S[12] == \"I\" else 0\n    boredoms += 1 if S[13]\
    \ == \"I\" else 0\n    boredoms += 1 if S[14] == \"I\" else 0\n    boredoms +=\
    \ 1 if S[15] == \"I\" else 0\n    boredoms += 1 if S[16] == \"I\" else 0\n   \
    \ boredoms += 1 if S[17] == \"I\" else 0\n    boredoms += 1 if S[18] == \"I\"\
    \ else 0\n    boredoms += 1 if S[19] == \"I\" else 0\n    boredoms += 1 if S[20]\
    \ == \"I\" else 0\n    boredoms += 1 if S[21] == \"I\" else 0\n    boredoms +=\
    \ 1 if S[22] == \"I\" else 0\n    boredoms += 1 if S[23] == \"I\" else 0\n   \
    \ boredoms += 1 if S[24] == \"I\" else 0\n    boredoms += 1 if S[25] == \"I\"\
    \ else 0\n    boredoms += 1 if S[26] == \"I\" else 0\n    boredoms += 1 if S[27]\
    \ == \"I\" else 0\n    boredoms += 1 if S[28] == \"I\" else 0\n    boredoms +=\
    \ 1 if S[29] == \"I\" else 0\n    boredoms += 1 if S[30] == \"I\" else 0\n   \
    \ boredoms += 1 if S[31] == \"I\" else 0\n    boredoms += 1 if S[32] == \"I\"\
    \ else 0\n    boredoms += 1 if S[33] == \"I\" else 0\n    boredoms += 1 if S[\n\
    def check(candidate):\n    assert candidate('Hello world') == 0\n    assert candidate('Is\
    \ the sky blue?') == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpackyf8kp.py\", line 49\n    def check(candidate):\n  \
    \  ^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    boredoms += 1 if S[0] == \"I\" else\
    \ 0\n    boredoms += 1 if S[1] == \"I\" else 0\n    boredoms += 1 if S[2] == \"\
    I\" else 0\n    boredoms += 1 if S[3] == \"I\" else 0\n    boredoms += 1 if S[4]\
    \ == \"I\" else 0\n    boredoms += 1 if S[5] == \"I\" else 0\n    boredoms +=\
    \ 1 if S[6] == \"I\" else 0\n    boredoms += 1 if S[7] == \"I\" else 0\n    boredoms\
    \ += 1 if S[8] == \"I\" else 0\n    boredoms += 1 if S[9] == \"I\" else 0\n  \
    \  boredoms += 1 if S[10] == \"I\" else 0\n    boredoms += 1 if S[11] == \"I\"\
    \ else 0\n    boredoms += 1 if S[12] == \"I\" else 0\n    boredoms += 1 if S[13]\
    \ == \"I\" else 0\n    boredoms += 1 if S[14] == \"I\" else 0\n    boredoms +=\
    \ 1 if S[15] == \"I\" else 0\n    boredoms += 1 if S[16] == \"I\" else 0\n   \
    \ boredoms += 1 if S[17] == \"I\" else 0\n    boredoms += 1 if S[18] == \"I\"\
    \ else 0\n    boredoms += 1 if S[19] == \"I\" else 0\n    boredoms += 1 if S[20]\
    \ == \"I\" else 0\n    boredoms += 1 if S[21] == \"I\" else 0\n    boredoms +=\
    \ 1 if S[22] == \"I\" else 0\n    boredoms += 1 if S[23] == \"I\" else 0\n   \
    \ boredoms += 1 if S[24] == \"I\" else 0\n    boredoms += 1 if S[25] == \"I\"\
    \ else 0\n    boredoms += 1 if S[26] == \"I\" else 0\n    boredoms += 1 if S[27]\
    \ == \"I\" else 0\n    boredoms += 1 if S[28] == \"I\" else 0\n    boredoms +=\
    \ 1 if S[29] == \"I\" else 0\n    boredoms += 1 if S[30] == \"I\" else 0\n   \
    \ boredoms += 1 if S[31] == \"I\" else 0\n    boredoms += 1 if S[32] == \"I\"\
    \ else 0\n    boredoms += 1 if S[33] == \"I\" else 0\n    boredoms += 1 if S[\n\
    def check(candidate):\n    assert candidate('Hello world') == 0\n    assert candidate('Is\
    \ the sky blue?') == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpewkaqpk2.py\", line 49\n    def check(candidate):\n  \
    \  ^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    count = 0\n    for word in S.split():\n        if word.startswith('I'):\n\
    \            count += 1\n    return count\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world') == 0\n    assert candidate('Is the sky blue?') == 0\n\
    \    assert candidate('I love It !') == 1\n    assert candidate('bIt') == 0\n\
    \    assert candidate('I feel good today. I will be productive. will kill It')\
    \ == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef test_check():\n\
    \    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpn28mvxls.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpn28mvxls.py\", line 28,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpn28mvxls.py\", line 21,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    boredoms += 1 if S[0] == 'I' else\
    \ 0\n    boredoms += 1 if S[1] == '.' else 0\n    boredoms += 1 if S[2] == '.'\
    \ else 0\n    boredoms += 1 if S[3] == '.' else 0\n    boredoms += 1 if S[4] ==\
    \ '.' else 0\n    boredoms += 1 if S[5] == '.' else 0\n    boredoms += 1 if S[6]\
    \ == '.' else 0\n    boredoms += 1 if S[7] == '.' else 0\n    boredoms += 1 if\
    \ S[8] == '.' else 0\n    boredoms += 1 if S[9] == '.' else 0\n    boredoms +=\
    \ 1 if S[10] == '.' else 0\n    boredoms += 1 if S[11] == '.' else 0\n    boredoms\
    \ += 1 if S[12] == '.' else 0\n    boredoms += 1 if S[13] == '.' else 0\n    boredoms\
    \ += 1 if S[14] == '.' else 0\n    boredoms += 1 if S[15] == '.' else 0\n    boredoms\
    \ += 1 if S[16] == '.' else 0\n    boredoms += 1 if S[17] == '.' else 0\n    boredoms\
    \ += 1 if S[18] == '.' else 0\n    boredoms += 1 if S[19] == '.' else 0\n    boredoms\
    \ += 1 if S[20] == '.' else 0\n    boredoms += 1 if S[21] == '.' else 0\n    boredoms\
    \ += 1 if S[22] == '.' else 0\n    boredoms += 1 if S[23] == '.' else 0\n    boredoms\
    \ += 1 if S[24] == '.' else 0\n    boredoms += 1 if S[25] == '.' else 0\n    boredoms\
    \ += 1 if S[26] == '.' else 0\n    boredoms += 1 if S[27] == '.' else 0\n    boredoms\
    \ += 1 if S[28] == '.' else 0\n    boredoms += 1 if S[29] == '.' else 0\n    boredoms\
    \ += 1 if S[30] == '.' else 0\n    boredoms += 1 if S[31] == '.' else 0\n    boredoms\
    \ += 1 if S[32] == '.' else 0\n    boredoms += 1 if S[33] == '.' else 0\n    boredoms\
    \ += 1 if S[34] == '.' else 0\n    boredoms += 1 if S[35] == '.' else 0\n    boredoms\
    \ += 1 if S[36] == '.' else 0\n    boredoms += 1 if S[37] == '.' else 0\n    boredoms\
    \ += 1 if S[38] == '.\ndef check(candidate):\n    assert candidate('Hello world')\
    \ == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmp7i7thicd.py\", line 52\n    boredoms += 1 if S[38] ==\
    \ '.\n                               ^\nSyntaxError: EOL while scanning string\
    \ literal\n"
  exit_code: 1
  status: SyntaxError
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    boredoms += 1 if S[0] == 'I' else\
    \ 0\n    boredoms += 1 if S[1] == '.' else 0\n    boredoms += 1 if S[2] == '.'\
    \ else 0\n    boredoms += 1 if S[3] == '.' else 0\n    boredoms += 1 if S[4] ==\
    \ '.' else 0\n    boredoms += 1 if S[5] == '.' else 0\n    boredoms += 1 if S[6]\
    \ == '.' else 0\n    boredoms += 1 if S[7] == '.' else 0\n    boredoms += 1 if\
    \ S[8] == '.' else 0\n    boredoms += 1 if S[9] == '.' else 0\n    boredoms +=\
    \ 1 if S[10] == '.' else 0\n    boredoms += 1 if S[11] == '.' else 0\n    boredoms\
    \ += 1 if S[12] == '.' else 0\n    boredoms += 1 if S[13] == '.' else 0\n    boredoms\
    \ += 1 if S[14] == '.' else 0\n    boredoms += 1 if S[15] == '.' else 0\n    boredoms\
    \ += 1 if S[16] == '.' else 0\n    boredoms += 1 if S[17] == '.' else 0\n    boredoms\
    \ += 1 if S[18] == '.' else 0\n    boredoms += 1 if S[19] == '.' else 0\n    boredoms\
    \ += 1 if S[20] == '.' else 0\n    boredoms += 1 if S[21] == '.' else 0\n    boredoms\
    \ += 1 if S[22] == '.' else 0\n    boredoms += 1 if S[23] == '.' else 0\n    boredoms\
    \ += 1 if S[24] == '.' else 0\n    boredoms += 1 if S[25] == '.' else 0\n    boredoms\
    \ += 1 if S[26] == '.' else 0\n    boredoms += 1 if S[27] == '.' else 0\n    boredoms\
    \ += 1 if S[28] == '.' else 0\n    boredoms += 1 if S[29] == '.' else 0\n    boredoms\
    \ += 1 if S[30] == '.' else 0\n    boredoms += 1 if S[31] == '.' else 0\n    boredoms\
    \ += 1 if S[32] == '.' else 0\n    boredoms += 1 if S[33] == '.' else 0\n    boredoms\
    \ += 1 if S[34] == '.' else 0\n    boredoms += 1 if S[35] == '.' else 0\n    boredoms\
    \ += 1 if S[36] == '.' else 0\n    boredoms += 1 if S[37] == '.' else 0\n    boredoms\
    \ += 1 if S[38] == '.\ndef check(candidate):\n    assert candidate('Hello world')\
    \ == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmppt8rqp0b.py\", line 52\n    boredoms += 1 if S[38] ==\
    \ '.\n                               ^\nSyntaxError: EOL while scanning string\
    \ literal\n"
  exit_code: 1
  status: SyntaxError
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    \n    boredoms += 1 if S[0] == 'I'\
    \ else 0\n    \n    return boredoms\n\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8j0yfzxi.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp8j0yfzxi.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp8j0yfzxi.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    boredoms += 1 if S[0] == \"I\" else\
    \ 0\n    boredoms += 1 if S[1] == \"I\" else 0\n    boredoms += 1 if S[2] == \"\
    I\" else 0\n    boredoms += 1 if S[3] == \"I\" else 0\n    boredoms += 1 if S[4]\
    \ == \"I\" else 0\n    boredoms += 1 if S[5] == \"I\" else 0\n    boredoms +=\
    \ 1 if S[6] == \"I\" else 0\n    boredoms += 1 if S[7] == \"I\" else 0\n    boredoms\
    \ += 1 if S[8] == \"I\" else 0\n    boredoms += 1 if S[9] == \"I\" else 0\n  \
    \  boredoms += 1 if S[10] == \"I\" else 0\n    boredoms += 1 if S[11] == \"I\"\
    \ else 0\n    boredoms += 1 if S[12] == \"I\" else 0\n    boredoms += 1 if S[13]\
    \ == \"I\" else 0\n    boredoms += 1 if S[14] == \"I\" else 0\n    boredoms +=\
    \ 1 if S[15] == \"I\" else 0\n    boredoms += 1 if S[16] == \"I\" else 0\n   \
    \ boredoms += 1 if S[17] == \"I\" else 0\n    boredoms += 1 if S[18] == \"I\"\
    \ else 0\n    boredoms += 1 if S[19] == \"I\" else 0\n    boredoms += 1 if S[20]\
    \ == \"I\" else 0\n    boredoms += 1 if S[21] == \"I\" else 0\n    boredoms +=\
    \ 1 if S[22] == \"I\" else 0\n    boredoms += 1 if S[23] == \"I\" else 0\n   \
    \ boredoms += 1 if S[24] == \"I\" else 0\n    boredoms += 1 if S[25] == \"I\"\
    \ else 0\n    boredoms += 1 if S[26] == \"I\" else 0\n    boredoms += 1 if S[27]\
    \ == \"I\" else 0\n    boredoms += 1 if S[28] == \"I\" else 0\n    boredoms +=\
    \ 1 if S[29] == \"I\" else 0\n    boredoms += 1 if S[30] == \"I\" else 0\n   \
    \ boredoms += 1 if S[31] == \"I\" else 0\n    boredoms += 1 if S[32] == \"I\"\
    \ else 0\n    boredoms += 1 if S[33] == \"I\" else 0\n    boredoms += 1 if S[\n\
    def check(candidate):\n    assert candidate('Hello world') == 0\n    assert candidate('Is\
    \ the sky blue?') == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmprdyqyups.py\", line 49\n    def check(candidate):\n  \
    \  ^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    for word in S.split():\n        if\
    \ word.startswith('I'):\n            boredoms += 1\n    return boredoms\n\n\n\
    def check(candidate):\n    assert candidate('Hello world') == 0\n    assert candidate('Is\
    \ the sky blue?') == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe1zdjczl.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpe1zdjczl.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpe1zdjczl.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    for word in S.split():\n        if\
    \ word.startswith('I'):\n            boredoms += 1\n    return boredoms\n\n\n\
    def check(candidate):\n    assert candidate('Hello world') == 0\n    assert candidate('Is\
    \ the sky blue?') == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpa4xy83wl.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpa4xy83wl.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpa4xy83wl.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredom = 0\n    \n    for word in S.split():\n    \
    \    if word.startswith(\"I\"):\n            boredom += 1\n    return boredom\n\
    \ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6ym0lktm.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp6ym0lktm.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp6ym0lktm.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    boredom_list = [\"I\"]\n    for word\
    \ in S.split():\n        if word in boredom_list:\n            boredoms += 1\n\
    \            boredom_list.remove(word)\n    return boredoms\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuugl7_rh.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpuugl7_rh.py\", line 31,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpuugl7_rh.py\", line 27,\
    \ in check\n    assert candidate('I feel good today. I will be productive. will\
    \ kill It') == 2\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredom = 0\n    boredom_count = 0\n    \n    for word\
    \ in S.split():\n        if word == \"I\":\n            boredom_count += 1\n \
    \           \n    return boredom_count\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcm2lmlgt.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpcm2lmlgt.py\", line 31,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpcm2lmlgt.py\", line 28,\
    \ in check\n    assert candidate('You and I are going for a walk') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    for word in S.split():\n        if\
    \ word.startswith('I'):\n            boredoms += 1\n    return boredoms\n\n\n\
    def check(candidate):\n    assert candidate('Hello world') == 0\n    assert candidate('Is\
    \ the sky blue?') == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpm3q54xtx.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpm3q54xtx.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpm3q54xtx.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    for word in S.split():\n        if\
    \ word.startswith('I'):\n            boredoms += 1\n    return boredoms\n\ndef\
    \ check(candidate):\n    assert candidate('Hello world') == 0\n    assert candidate('Is\
    \ the sky blue?') == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpahln3bzn.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpahln3bzn.py\", line 28,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpahln3bzn.py\", line 21,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    \n    for word in S.split():\n   \
    \     if word.startswith(\"I\"):\n            boredoms += 1\n    return boredoms\n\
    \n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3y7595hk.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp3y7595hk.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp3y7595hk.py\", line 23,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    boredoms += 1 if S[0] == 'I' else\
    \ 0\n    boredoms += 1 if S[1] == '.' else 0\n    boredoms += 1 if S[2] == '.'\
    \ else 0\n    boredoms += 1 if S[3] == '.' else 0\n    boredoms += 1 if S[4] ==\
    \ '.' else 0\n    boredoms += 1 if S[5] == '.' else 0\n    boredoms += 1 if S[6]\
    \ == '.' else 0\n    boredoms += 1 if S[7] == '.' else 0\n    boredoms += 1 if\
    \ S[8] == '.' else 0\n    boredoms += 1 if S[9] == '.' else 0\n    boredoms +=\
    \ 1 if S[10] == '.' else 0\n    boredoms += 1 if S[11] == '.' else 0\n    boredoms\
    \ += 1 if S[12] == '.' else 0\n    boredoms += 1 if S[13] == '.' else 0\n    boredoms\
    \ += 1 if S[14] == '.' else 0\n    boredoms += 1 if S[15] == '.' else 0\n    boredoms\
    \ += 1 if S[16] == '.' else 0\n    boredoms += 1 if S[17] == '.' else 0\n    boredoms\
    \ += 1 if S[18] == '.' else 0\n    boredoms += 1 if S[19] == '.' else 0\n    boredoms\
    \ += 1 if S[20] == '.' else 0\n    boredoms += 1 if S[21] == '.' else 0\n    boredoms\
    \ += 1 if S[22] == '.' else 0\n    boredoms += 1 if S[23] == '.' else 0\n    boredoms\
    \ += 1 if S[24] == '.' else 0\n    boredoms += 1 if S[25] == '.' else 0\n    boredoms\
    \ += 1 if S[26] == '.' else 0\n    boredoms += 1 if S[27] == '.' else 0\n    boredoms\
    \ += 1 if S[28] == '.' else 0\n    boredoms += 1 if S[29] == '.' else 0\n    boredoms\
    \ += 1 if S[30] == '.' else 0\n    boredoms += 1 if S[31] == '.' else 0\n    boredoms\
    \ += 1 if S[32] == '.' else 0\n    boredoms += 1 if S[33] == '.' else 0\n    boredoms\
    \ += 1 if S[34] == '.' else 0\n    boredoms += 1 if S[35] == '.' else 0\n    boredoms\
    \ += 1 if S[36] == '.' else 0\n    boredoms += 1 if S[37] == '.' else 0\n    boredoms\
    \ += 1 if S[38] == '.\ndef check(candidate):\n    assert candidate('Hello world')\
    \ == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpvt8wthbu.py\", line 52\n    boredoms += 1 if S[38] ==\
    \ '.\n                               ^\nSyntaxError: EOL while scanning string\
    \ literal\n"
  exit_code: 1
  status: SyntaxError
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    boredoms += 1 if S[0] == 'I' else\
    \ 0\n    boredoms += 1 if S[1] == '.' else 0\n    boredoms += 1 if S[2] == '.'\
    \ else 0\n    boredoms += 1 if S[3] == '.' else 0\n    boredoms += 1 if S[4] ==\
    \ '.' else 0\n    boredoms += 1 if S[5] == '.' else 0\n    boredoms += 1 if S[6]\
    \ == '.' else 0\n    boredoms += 1 if S[7] == '.' else 0\n    boredoms += 1 if\
    \ S[8] == '.' else 0\n    boredoms += 1 if S[9] == '.' else 0\n    boredoms +=\
    \ 1 if S[10] == '.' else 0\n    boredoms += 1 if S[11] == '.' else 0\n    boredoms\
    \ += 1 if S[12] == '.' else 0\n    boredoms += 1 if S[13] == '.' else 0\n    boredoms\
    \ += 1 if S[14] == '.' else 0\n    boredoms += 1 if S[15] == '.' else 0\n    boredoms\
    \ += 1 if S[16] == '.' else 0\n    boredoms += 1 if S[17] == '.' else 0\n    boredoms\
    \ += 1 if S[18] == '.' else 0\n    boredoms += 1 if S[19] == '.' else 0\n    boredoms\
    \ += 1 if S[20] == '.' else 0\n    boredoms += 1 if S[21] == '.' else 0\n    boredoms\
    \ += 1 if S[22] == '.' else 0\n    boredoms += 1 if S[23] == '.' else 0\n    boredoms\
    \ += 1 if S[24] == '.' else 0\n    boredoms += 1 if S[25] == '.' else 0\n    boredoms\
    \ += 1 if S[26] == '.' else 0\n    boredoms += 1 if S[27] == '.' else 0\n    boredoms\
    \ += 1 if S[28] == '.' else 0\n    boredoms += 1 if S[29] == '.' else 0\n    boredoms\
    \ += 1 if S[30] == '.' else 0\n    boredoms += 1 if S[31] == '.' else 0\n    boredoms\
    \ += 1 if S[32] == '.' else 0\n    boredoms += 1 if S[33] == '.' else 0\n    boredoms\
    \ += 1 if S[34] == '.' else 0\n    boredoms += 1 if S[35] == '.' else 0\n    boredoms\
    \ += 1 if S[36] == '.' else 0\n    boredoms += 1 if S[37] == '.' else 0\n    boredoms\
    \ += 1 if S[38] == '.\ndef check(candidate):\n    assert candidate('Hello world')\
    \ == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpo7oirdq7.py\", line 52\n    boredoms += 1 if S[38] ==\
    \ '.\n                               ^\nSyntaxError: EOL while scanning string\
    \ literal\n"
  exit_code: 1
  status: SyntaxError
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    boredom_list = [\"I\"]\n    boredom_list.extend(S.split())\n\
    \    for boredom in boredom_list:\n        if boredom.startswith(\"I\"):\n   \
    \         boredoms += 1\n    return boredoms\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world') == 0\n    assert candidate('Is the sky blue?') == 0\n\
    \    assert candidate('I love It !') == 1\n    assert candidate('bIt') == 0\n\
    \    assert candidate('I feel good today. I will be productive. will kill It')\
    \ == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef test_check():\n\
    \    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxtg6qjvx.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpxtg6qjvx.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpxtg6qjvx.py\", line 22,\
    \ in check\n    assert candidate('Hello world') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    count = 0\n    for word in S.split():\n        if word.startswith('I'):\n\
    \            count += 1\n    return count\n\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world') == 0\n    assert candidate('Is the sky blue?') == 0\n\
    \    assert candidate('I love It !') == 1\n    assert candidate('bIt') == 0\n\
    \    assert candidate('I feel good today. I will be productive. will kill It')\
    \ == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef test_check():\n\
    \    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwqd16oib.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpwqd16oib.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpwqd16oib.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    boredoms += 1 if S[0] == 'I' else\
    \ 0\n    boredoms += 1 if S[1] == '.' else 0\n    boredoms += 1 if S[2] == '.'\
    \ else 0\n    boredoms += 1 if S[3] == '.' else 0\n    boredoms += 1 if S[4] ==\
    \ '.' else 0\n    boredoms += 1 if S[5] == '.' else 0\n    boredoms += 1 if S[6]\
    \ == '.' else 0\n    boredoms += 1 if S[7] == '.' else 0\n    boredoms += 1 if\
    \ S[8] == '.' else 0\n    boredoms += 1 if S[9] == '.' else 0\n    boredoms +=\
    \ 1 if S[10] == '.' else 0\n    boredoms += 1 if S[11] == '.' else 0\n    boredoms\
    \ += 1 if S[12] == '.' else 0\n    boredoms += 1 if S[13] == '.' else 0\n    boredoms\
    \ += 1 if S[14] == '.' else 0\n    boredoms += 1 if S[15] == '.' else 0\n    boredoms\
    \ += 1 if S[16] == '.' else 0\n    boredoms += 1 if S[17] == '.' else 0\n    boredoms\
    \ += 1 if S[18] == '.' else 0\n    boredoms += 1 if S[19] == '.' else 0\n    boredoms\
    \ += 1 if S[20] == '.' else 0\n    boredoms += 1 if S[21] == '.' else 0\n    boredoms\
    \ += 1 if S[22] == '.' else 0\n    boredoms += 1 if S[23] == '.' else 0\n    boredoms\
    \ += 1 if S[24] == '.' else 0\n    boredoms += 1 if S[25] == '.' else 0\n    boredoms\
    \ += 1 if S[26] == '.' else 0\n    boredoms += 1 if S[27] == '.' else 0\n    boredoms\
    \ += 1 if S[28] == '.' else 0\n    boredoms += 1 if S[29] == '.' else 0\n    boredoms\
    \ += 1 if S[30] == '.' else 0\n    boredoms += 1 if S[31] == '.' else 0\n    boredoms\
    \ += 1 if S[32] == '.' else 0\n    boredoms += 1 if S[33] == '.' else 0\n    boredoms\
    \ += 1 if S[34] == '.' else 0\n    boredoms += 1 if S[35] == '.' else 0\n    boredoms\
    \ += 1 if S[36] == '.' else 0\n    boredoms += 1 if S[37] == '.' else 0\n    boredoms\
    \ += 1 if S[38] == '.\ndef check(candidate):\n    assert candidate('Hello world')\
    \ == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmp598w19n2.py\", line 52\n    boredoms += 1 if S[38] ==\
    \ '.\n                               ^\nSyntaxError: EOL while scanning string\
    \ literal\n"
  exit_code: 1
  status: SyntaxError
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    for word in S.split():\n        if\
    \ word.startswith('I'):\n            boredoms += 1\n    return boredoms\n\n\n\
    def check(candidate):\n    assert candidate('Hello world') == 0\n    assert candidate('Is\
    \ the sky blue?') == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgerx3cbp.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpgerx3cbp.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpgerx3cbp.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    boredom_words = [\"I\"]\n    for word\
    \ in S.split():\n        if word.lower() in boredom_words:\n            boredoms\
    \ += 1\n        else:\n            boredom_words.append(word.lower())\n    return\
    \ boredoms\n\n\ndef check(candidate):\n    assert candidate('Hello world') ==\
    \ 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I love\
    \ It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I feel\
    \ good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2sm961nn.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp2sm961nn.py\", line 32,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp2sm961nn.py\", line 26,\
    \ in check\n    assert candidate('I love It !') == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    boredoms += 1 if S[0] == 'I' else\
    \ 0\n    return boredoms\n\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvmvxwgge.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpvmvxwgge.py\", line 27,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpvmvxwgge.py\", line 20,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredom = 0\n    for word in S.split():\n        if\
    \ word.startswith('I'):\n            boredom += 1\n    return boredom\n\n\ndef\
    \ check(candidate):\n    assert candidate('Hello world') == 0\n    assert candidate('Is\
    \ the sky blue?') == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp756w3tp6.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp756w3tp6.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp756w3tp6.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredom = 0\n    boredom_words = []\n    for word in\
    \ S.split():\n        if word.startswith('I'):\n            boredom += 1\n   \
    \         boredom_words.append(word)\n    return boredom\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpj2738ooa.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpj2738ooa.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpj2738ooa.py\", line 23,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    for word in S.split():\n        if\
    \ word.startswith('I'):\n            boredoms += 1\n    return boredoms\n\n\n\
    def check(candidate):\n    assert candidate('Hello world') == 0\n    assert candidate('Is\
    \ the sky blue?') == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp518ujcba.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp518ujcba.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp518ujcba.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    boredoms += 1 if S[0] == 'I' else\
    \ 0\n    boredoms += 1 if S[1] == '.' else 0\n    boredoms += 1 if S[2] == '.'\
    \ else 0\n    boredoms += 1 if S[3] == '.' else 0\n    boredoms += 1 if S[4] ==\
    \ '.' else 0\n    boredoms += 1 if S[5] == '.' else 0\n    boredoms += 1 if S[6]\
    \ == '.' else 0\n    boredoms += 1 if S[7] == '.' else 0\n    boredoms += 1 if\
    \ S[8] == '.' else 0\n    boredoms += 1 if S[9] == '.' else 0\n    boredoms +=\
    \ 1 if S[10] == '.' else 0\n    boredoms += 1 if S[11] == '.' else 0\n    boredoms\
    \ += 1 if S[12] == '.' else 0\n    boredoms += 1 if S[13] == '.' else 0\n    boredoms\
    \ += 1 if S[14] == '.' else 0\n    boredoms += 1 if S[15] == '.' else 0\n    boredoms\
    \ += 1 if S[16] == '.' else 0\n    boredoms += 1 if S[17] == '.' else 0\n    boredoms\
    \ += 1 if S[18] == '.' else 0\n    boredoms += 1 if S[19] == '.' else 0\n    boredoms\
    \ += 1 if S[20] == '.' else 0\n    boredoms += 1 if S[21] == '.' else 0\n    boredoms\
    \ += 1 if S[22] == '.' else 0\n    boredoms += 1 if S[23] == '.' else 0\n    boredoms\
    \ += 1 if S[24] == '.' else 0\n    boredoms += 1 if S[25] == '.' else 0\n    boredoms\
    \ += 1 if S[26] == '.' else 0\n    boredoms += 1 if S[27] == '.' else 0\n    boredoms\
    \ += 1 if S[28] == '.' else 0\n    boredoms += 1 if S[29] == '.' else 0\n    boredoms\
    \ += 1 if S[30] == '.' else 0\n    boredoms += 1 if S[31] == '.' else 0\n    boredoms\
    \ += 1 if S[32] == '.' else 0\n    boredoms += 1 if S[33] == '.' else 0\n    boredoms\
    \ += 1 if S[34] == '.' else 0\n    boredoms += 1 if S[35] == '.' else 0\n    boredoms\
    \ += 1 if S[36] == '.' else 0\n    boredoms += 1 if S[37] == '.' else 0\n    boredoms\
    \ += 1 if S[38] == '.\ndef check(candidate):\n    assert candidate('Hello world')\
    \ == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpqlcxy8ek.py\", line 52\n    boredoms += 1 if S[38] ==\
    \ '.\n                               ^\nSyntaxError: EOL while scanning string\
    \ literal\n"
  exit_code: 1
  status: SyntaxError
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredom = 0\n    \n    boredom_list = [\"I\"]\n    \n\
    \    for word in S.split():\n        if word.lower() in boredom_list:\n      \
    \      boredom += 1\n            boredom_list.remove(word.lower())\n    return\
    \ boredom\n</cell>\n<cell>\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmp2cgafh9s.py\", line 22\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    for word in S.split():\n        if\
    \ word.startswith('I'):\n            boredoms += 1\n    return boredoms\n\ndef\
    \ check(candidate):\n    assert candidate('Hello world') == 0\n    assert candidate('Is\
    \ the sky blue?') == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdck06nfb.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpdck06nfb.py\", line 28,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpdck06nfb.py\", line 21,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    boredoms += 1 if S[0] == 'I' else\
    \ 0\n    boredoms += 1 if S[1] == '.' else 0\n    boredoms += 1 if S[2] == '.'\
    \ else 0\n    boredoms += 1 if S[3] == '.' else 0\n    boredoms += 1 if S[4] ==\
    \ '.' else 0\n    boredoms += 1 if S[5] == '.' else 0\n    boredoms += 1 if S[6]\
    \ == '.' else 0\n    boredoms += 1 if S[7] == '.' else 0\n    boredoms += 1 if\
    \ S[8] == '.' else 0\n    boredoms += 1 if S[9] == '.' else 0\n    boredoms +=\
    \ 1 if S[10] == '.' else 0\n    boredoms += 1 if S[11] == '.' else 0\n    boredoms\
    \ += 1 if S[12] == '.' else 0\n    boredoms += 1 if S[13] == '.' else 0\n    boredoms\
    \ += 1 if S[14] == '.' else 0\n    boredoms += 1 if S[15] == '.' else 0\n    boredoms\
    \ += 1 if S[16] == '.' else 0\n    boredoms += 1 if S[17] == '.' else 0\n    boredoms\
    \ += 1 if S[18] == '.' else 0\n    boredoms += 1 if S[19] == '.' else 0\n    boredoms\
    \ += 1 if S[20] == '.' else 0\n    boredoms += 1 if S[21] == '.' else 0\n    boredoms\
    \ += 1 if S[22] == '.' else 0\n    boredoms += 1 if S[23] == '.' else 0\n    boredoms\
    \ += 1 if S[24] == '.' else 0\n    boredoms += 1 if S[25] == '.' else 0\n    boredoms\
    \ += 1 if S[26] == '.' else 0\n    boredoms += 1 if S[27] == '.' else 0\n    boredoms\
    \ += 1 if S[28] == '.' else 0\n    boredoms += 1 if S[29] == '.' else 0\n    boredoms\
    \ += 1 if S[30] == '.' else 0\n    boredoms += 1 if S[31] == '.' else 0\n    boredoms\
    \ += 1 if S[32] == '.' else 0\n    boredoms += 1 if S[33] == '.' else 0\n    boredoms\
    \ += 1 if S[34] == '.' else 0\n    boredoms += 1 if S[35] == '.' else 0\n    boredoms\
    \ += 1 if S[36] == '.' else 0\n    boredoms += 1 if S[37] == '.' else 0\n    boredoms\
    \ += 1 if S[38] == '.\ndef check(candidate):\n    assert candidate('Hello world')\
    \ == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpywyb09ns.py\", line 52\n    boredoms += 1 if S[38] ==\
    \ '.\n                               ^\nSyntaxError: EOL while scanning string\
    \ literal\n"
  exit_code: 1
  status: SyntaxError
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredom = 0\n    \n    for word in S.split():\n    \
    \    if word.startswith('I'):\n            boredom += 1\n    return boredom\n\n\
    def check(candidate):\n    assert candidate('Hello world') == 0\n    assert candidate('Is\
    \ the sky blue?') == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp66qn5xnh.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp66qn5xnh.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp66qn5xnh.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    \n    for word in S.split():\n   \
    \     if word.startswith('I'):\n            boredoms += 1\n    \n    return boredoms\n\
    \n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpprkoopb4.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpprkoopb4.py\", line 31,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpprkoopb4.py\", line 24,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    \n    S = S.lower()\n    \n    for\
    \ word in S.split():\n        if word.startswith(\"i\"):\n            boredoms\
    \ += 1\n    \n    return boredoms\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqt4ttdry.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpqt4ttdry.py\", line 32,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpqt4ttdry.py\", line 25,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    boredoms += 1 if S[0] == \"I\" else\
    \ 0\n    boredoms += 1 if S[1] == \"I\" else 0\n    boredoms += 1 if S[2] == \"\
    I\" else 0\n    boredoms += 1 if S[3] == \"I\" else 0\n    boredoms += 1 if S[4]\
    \ == \"I\" else 0\n    boredoms += 1 if S[5] == \"I\" else 0\n    boredoms +=\
    \ 1 if S[6] == \"I\" else 0\n    boredoms += 1 if S[7] == \"I\" else 0\n    boredoms\
    \ += 1 if S[8] == \"I\" else 0\n    boredoms += 1 if S[9] == \"I\" else 0\n  \
    \  boredoms += 1 if S[10] == \"I\" else 0\n    boredoms += 1 if S[11] == \"I\"\
    \ else 0\n    boredoms += 1 if S[12] == \"I\" else 0\n    boredoms += 1 if S[13]\
    \ == \"I\" else 0\n    boredoms += 1 if S[14] == \"I\" else 0\n    boredoms +=\
    \ 1 if S[15] == \"I\" else 0\n    boredoms += 1 if S[16] == \"I\" else 0\n   \
    \ boredoms += 1 if S[17] == \"I\" else 0\n    boredoms += 1 if S[18] == \"I\"\
    \ else 0\n    boredoms += 1 if S[19] == \"I\" else 0\n    boredoms += 1 if S[20]\
    \ == \"I\" else 0\n    boredoms += 1 if S[21] == \"I\" else 0\n    boredoms +=\
    \ 1 if S[22] == \"I\" else 0\n    boredoms += 1 if S[23] == \"I\" else 0\n   \
    \ boredoms += 1 if S[24] == \"I\" else 0\n    boredoms += 1 if S[25] == \"I\"\
    \ else 0\n    boredoms += 1 if S[26] == \"I\" else 0\n    boredoms += 1 if S[27]\
    \ == \"I\" else 0\n    boredoms += 1 if S[28] == \"I\" else 0\n    boredoms +=\
    \ 1 if S[29] == \"I\" else 0\n    boredoms += 1 if S[30] == \"I\" else 0\n   \
    \ boredoms += 1 if S[31] == \"I\" else 0\n    boredoms += 1 if S[32] == \"I\"\
    \ else 0\n    boredoms += 1 if S[33] == \"I\" else 0\n    boredoms += 1 if S[\n\
    def check(candidate):\n    assert candidate('Hello world') == 0\n    assert candidate('Is\
    \ the sky blue?') == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpylygxoz_.py\", line 49\n    def check(candidate):\n  \
    \  ^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    for word in S.split():\n        if\
    \ word.startswith('I'):\n            boredoms += 1\n    return boredoms\n\n\n\
    def check(candidate):\n    assert candidate('Hello world') == 0\n    assert candidate('Is\
    \ the sky blue?') == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppcgrk3sd.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmppcgrk3sd.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmppcgrk3sd.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    \n    for word in S.split():\n   \
    \     if word.startswith('I'):\n            boredoms += 1\n    return boredoms\n\
    \n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8b1rqil5.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp8b1rqil5.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp8b1rqil5.py\", line 23,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    boredoms += 1 if S[0] == 'I' else\
    \ 0\n    boredoms += 1 if S[1] == '.' else 0\n    boredoms += 1 if S[2] == '.'\
    \ else 0\n    boredoms += 1 if S[3] == '.' else 0\n    boredoms += 1 if S[4] ==\
    \ '.' else 0\n    boredoms += 1 if S[5] == '.' else 0\n    boredoms += 1 if S[6]\
    \ == '.' else 0\n    boredoms += 1 if S[7] == '.' else 0\n    boredoms += 1 if\
    \ S[8] == '.' else 0\n    boredoms += 1 if S[9] == '.' else 0\n    boredoms +=\
    \ 1 if S[10] == '.' else 0\n    boredoms += 1 if S[11] == '.' else 0\n    boredoms\
    \ += 1 if S[12] == '.' else 0\n    boredoms += 1 if S[13] == '.' else 0\n    boredoms\
    \ += 1 if S[14] == '.' else 0\n    boredoms += 1 if S[15] == '.' else 0\n    boredoms\
    \ += 1 if S[16] == '.' else 0\n    boredoms += 1 if S[17] == '.' else 0\n    boredoms\
    \ += 1 if S[18] == '.' else 0\n    boredoms += 1 if S[19] == '.' else 0\n    boredoms\
    \ += 1 if S[20] == '.' else 0\n    boredoms += 1 if S[21] == '.' else 0\n    boredoms\
    \ += 1 if S[22] == '.' else 0\n    boredoms += 1 if S[23] == '.' else 0\n    boredoms\
    \ += 1 if S[24] == '.' else 0\n    boredoms += 1 if S[25] == '.' else 0\n    boredoms\
    \ += 1 if S[26] == '.' else 0\n    boredoms += 1 if S[27] == '.' else 0\n    boredoms\
    \ += 1 if S[28] == '.' else 0\n    boredoms += 1 if S[29] == '.' else 0\n    boredoms\
    \ += 1 if S[30] == '.' else 0\n    boredoms += 1 if S[31] == '.' else 0\n    boredoms\
    \ += 1 if S[32] == '.' else 0\n    boredoms += 1 if S[33] == '.' else 0\n    boredoms\
    \ += 1 if S[34] == '.' else 0\n    boredoms += 1 if S[35] == '.' else 0\n    boredoms\
    \ += 1 if S[36] == '.' else 0\n    boredoms += 1 if S[37] == '.' else 0\n    boredoms\
    \ += 1 if S[38] == '.\ndef check(candidate):\n    assert candidate('Hello world')\
    \ == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmp1x_rzw4z.py\", line 52\n    boredoms += 1 if S[38] ==\
    \ '.\n                               ^\nSyntaxError: EOL while scanning string\
    \ literal\n"
  exit_code: 1
  status: SyntaxError
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    boredoms += 1 if S[0] == \"I\" else\
    \ 0\n    boredoms += 1 if S[1] == \"I\" else 0\n    boredoms += 1 if S[2] == \"\
    I\" else 0\n    boredoms += 1 if S[3] == \"I\" else 0\n    boredoms += 1 if S[4]\
    \ == \"I\" else 0\n    boredoms += 1 if S[5] == \"I\" else 0\n    boredoms +=\
    \ 1 if S[6] == \"I\" else 0\n    boredoms += 1 if S[7] == \"I\" else 0\n    boredoms\
    \ += 1 if S[8] == \"I\" else 0\n    boredoms += 1 if S[9] == \"I\" else 0\n  \
    \  boredoms += 1 if S[10] == \"I\" else 0\n    boredoms += 1 if S[11] == \"I\"\
    \ else 0\n    boredoms += 1 if S[12] == \"I\" else 0\n    boredoms += 1 if S[13]\
    \ == \"I\" else 0\n    boredoms += 1 if S[14] == \"I\" else 0\n    boredoms +=\
    \ 1 if S[15] == \"I\" else 0\n    boredoms += 1 if S[16] == \"I\" else 0\n   \
    \ boredoms += 1 if S[17] == \"I\" else 0\n    boredoms += 1 if S[18] == \"I\"\
    \ else 0\n    boredoms += 1 if S[19] == \"I\" else 0\n    boredoms += 1 if S[20]\
    \ == \"I\" else 0\n    boredoms += 1 if S[21] == \"I\" else 0\n    boredoms +=\
    \ 1 if S[22] == \"I\" else 0\n    boredoms += 1 if S[23] == \"I\" else 0\n   \
    \ boredoms += 1 if S[24] == \"I\" else 0\n    boredoms += 1 if S[25] == \"I\"\
    \ else 0\n    boredoms += 1 if S[26] == \"I\" else 0\n    boredoms += 1 if S[27]\
    \ == \"I\" else 0\n    boredoms += 1 if S[28] == \"I\" else 0\n    boredoms +=\
    \ 1 if S[29] == \"I\" else 0\n    boredoms += 1 if S[30] == \"I\" else 0\n   \
    \ boredoms += 1 if S[31] == \"I\" else 0\n    boredoms += 1 if S[32] == \"I\"\
    \ else 0\n    boredoms += 1 if S[33] == \"I\" else 0\n    boredoms += 1 if S[\n\
    def check(candidate):\n    assert candidate('Hello world') == 0\n    assert candidate('Is\
    \ the sky blue?') == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmp4745d4hi.py\", line 49\n    def check(candidate):\n  \
    \  ^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredom = 0\n    \n    for word in S.split():\n    \
    \    if word.startswith('I'):\n            boredom += 1\n    return boredom\n\n\
    def check(candidate):\n    assert candidate('Hello world') == 0\n    assert candidate('Is\
    \ the sky blue?') == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzsalhm2w.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpzsalhm2w.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpzsalhm2w.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredom = 0\n    boredom_list = [\"I\"]\n    for word\
    \ in S.split():\n        if word.lower() in boredom_list:\n            boredom\
    \ += 1\n        boredom_list.append(word.lower())\n    return boredom\n\n\ndef\
    \ check(candidate):\n    assert candidate('Hello world') == 0\n    assert candidate('Is\
    \ the sky blue?') == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuag5f5_u.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpuag5f5_u.py\", line 31,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpuag5f5_u.py\", line 25,\
    \ in check\n    assert candidate('I love It !') == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    count = 0\n    for word in S.split():\n        if word.startswith('I'):\n\
    \            count += 1\n    return count\n\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world') == 0\n    assert candidate('Is the sky blue?') == 0\n\
    \    assert candidate('I love It !') == 1\n    assert candidate('bIt') == 0\n\
    \    assert candidate('I feel good today. I will be productive. will kill It')\
    \ == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef test_check():\n\
    \    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0wmokdvl.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp0wmokdvl.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp0wmokdvl.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    boredoms += 1 if S[0] == \"I\" else\
    \ 0\n    boredoms += 1 if S[1] == \"I\" else 0\n    boredoms += 1 if S[2] == \"\
    I\" else 0\n    boredoms += 1 if S[3] == \"I\" else 0\n    boredoms += 1 if S[4]\
    \ == \"I\" else 0\n    boredoms += 1 if S[5] == \"I\" else 0\n    boredoms +=\
    \ 1 if S[6] == \"I\" else 0\n    boredoms += 1 if S[7] == \"I\" else 0\n    boredoms\
    \ += 1 if S[8] == \"I\" else 0\n    boredoms += 1 if S[9] == \"I\" else 0\n  \
    \  boredoms += 1 if S[10] == \"I\" else 0\n    boredoms += 1 if S[11] == \"I\"\
    \ else 0\n    boredoms += 1 if S[12] == \"I\" else 0\n    boredoms += 1 if S[13]\
    \ == \"I\" else 0\n    boredoms += 1 if S[14] == \"I\" else 0\n    boredoms +=\
    \ 1 if S[15] == \"I\" else 0\n    boredoms += 1 if S[16] == \"I\" else 0\n   \
    \ boredoms += 1 if S[17] == \"I\" else 0\n    boredoms += 1 if S[18] == \"I\"\
    \ else 0\n    boredoms += 1 if S[19] == \"I\" else 0\n    boredoms += 1 if S[20]\
    \ == \"I\" else 0\n    boredoms += 1 if S[21] == \"I\" else 0\n    boredoms +=\
    \ 1 if S[22] == \"I\" else 0\n    boredoms += 1 if S[23] == \"I\" else 0\n   \
    \ boredoms += 1 if S[24] == \"I\" else 0\n    boredoms += 1 if S[25] == \"I\"\
    \ else 0\n    boredoms += 1 if S[26] == \"I\" else 0\n    boredoms += 1 if S[27]\
    \ == \"I\" else 0\n    boredoms += 1 if S[28] == \"I\" else 0\n    boredoms +=\
    \ 1 if S[29] == \"I\" else 0\n    boredoms += 1 if S[30] == \"I\" else 0\n   \
    \ boredoms += 1 if S[31] == \"I\" else 0\n    boredoms += 1 if S[32] == \"I\"\
    \ else 0\n    boredoms += 1 if S[33] == \"I\" else 0\n    boredoms += 1 if S[\n\
    def check(candidate):\n    assert candidate('Hello world') == 0\n    assert candidate('Is\
    \ the sky blue?') == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpc2rtfkm_.py\", line 49\n    def check(candidate):\n  \
    \  ^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredom = 0\n    boredom_list = [\"I\"]\n    for word\
    \ in S.split():\n        if word.lower() in boredom_list:\n            boredom\
    \ += 1\n            boredom_list.remove(word.lower())\n    return boredom\n\n\n\
    def check(candidate):\n    assert candidate('Hello world') == 0\n    assert candidate('Is\
    \ the sky blue?') == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpavh9aahr.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpavh9aahr.py\", line 31,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpavh9aahr.py\", line 25,\
    \ in check\n    assert candidate('I love It !') == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    \n    for word in S.split():\n   \
    \     if word == \"I\":\n            boredoms += 1\n    return boredoms\n</cell>\n\
    <cell>\ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmptgqflu2i.py\", line 19\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    boredoms += 1 if S[0] == \"I\" else\
    \ 0\n    boredoms += 1 if S[1] == \"I\" else 0\n    boredoms += 1 if S[2] == \"\
    I\" else 0\n    boredoms += 1 if S[3] == \"I\" else 0\n    boredoms += 1 if S[4]\
    \ == \"I\" else 0\n    boredoms += 1 if S[5] == \"I\" else 0\n    boredoms +=\
    \ 1 if S[6] == \"I\" else 0\n    boredoms += 1 if S[7] == \"I\" else 0\n    boredoms\
    \ += 1 if S[8] == \"I\" else 0\n    boredoms += 1 if S[9] == \"I\" else 0\n  \
    \  boredoms += 1 if S[10] == \"I\" else 0\n    boredoms += 1 if S[11] == \"I\"\
    \ else 0\n    boredoms += 1 if S[12] == \"I\" else 0\n    boredoms += 1 if S[13]\
    \ == \"I\" else 0\n    boredoms += 1 if S[14] == \"I\" else 0\n    boredoms +=\
    \ 1 if S[15] == \"I\" else 0\n    boredoms += 1 if S[16] == \"I\" else 0\n   \
    \ boredoms += 1 if S[17] == \"I\" else 0\n    boredoms += 1 if S[18] == \"I\"\
    \ else 0\n    boredoms += 1 if S[19] == \"I\" else 0\n    boredoms += 1 if S[20]\
    \ == \"I\" else 0\n    boredoms += 1 if S[21] == \"I\" else 0\n    boredoms +=\
    \ 1 if S[22] == \"I\" else 0\n    boredoms += 1 if S[23] == \"I\" else 0\n   \
    \ boredoms += 1 if S[24] == \"I\" else 0\n    boredoms += 1 if S[25] == \"I\"\
    \ else 0\n    boredoms += 1 if S[26] == \"I\" else 0\n    boredoms += 1 if S[27]\
    \ == \"I\" else 0\n    boredoms += 1 if S[28] == \"I\" else 0\n    boredoms +=\
    \ 1 if S[29] == \"I\" else 0\n    boredoms += 1 if S[30] == \"I\" else 0\n   \
    \ boredoms += 1 if S[31] == \"I\" else 0\n    boredoms += 1 if S[32] == \"I\"\
    \ else 0\n    boredoms += 1 if S[33] == \"I\" else 0\n    boredoms += 1 if S[\n\
    def check(candidate):\n    assert candidate('Hello world') == 0\n    assert candidate('Is\
    \ the sky blue?') == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpa36vby1i.py\", line 49\n    def check(candidate):\n  \
    \  ^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    for word in S.split():\n        if\
    \ word.startswith('I'):\n            boredoms += 1\n    return boredoms\n\n\n\
    def check(candidate):\n    assert candidate('Hello world') == 0\n    assert candidate('Is\
    \ the sky blue?') == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfv_7e7rl.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpfv_7e7rl.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpfv_7e7rl.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    \n    for word in S.split():\n   \
    \     if word.startswith('I'):\n            boredoms += 1\n    return boredoms\n\
    \ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr6u3jz7q.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpr6u3jz7q.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpr6u3jz7q.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    boredoms += 1 if S[0] == \"I\" else\
    \ 0\n    boredoms += 1 if S[1] == \"I\" else 0\n    boredoms += 1 if S[2] == \"\
    I\" else 0\n    boredoms += 1 if S[3] == \"I\" else 0\n    boredoms += 1 if S[4]\
    \ == \"I\" else 0\n    boredoms += 1 if S[5] == \"I\" else 0\n    boredoms +=\
    \ 1 if S[6] == \"I\" else 0\n    boredoms += 1 if S[7] == \"I\" else 0\n    boredoms\
    \ += 1 if S[8] == \"I\" else 0\n    boredoms += 1 if S[9] == \"I\" else 0\n  \
    \  boredoms += 1 if S[10] == \"I\" else 0\n    boredoms += 1 if S[11] == \"I\"\
    \ else 0\n    boredoms += 1 if S[12] == \"I\" else 0\n    boredoms += 1 if S[13]\
    \ == \"I\" else 0\n    boredoms += 1 if S[14] == \"I\" else 0\n    boredoms +=\
    \ 1 if S[15] == \"I\" else 0\n    boredoms += 1 if S[16] == \"I\" else 0\n   \
    \ boredoms += 1 if S[17] == \"I\" else 0\n    boredoms += 1 if S[18] == \"I\"\
    \ else 0\n    boredoms += 1 if S[19] == \"I\" else 0\n    boredoms += 1 if S[20]\
    \ == \"I\" else 0\n    boredoms += 1 if S[21] == \"I\" else 0\n    boredoms +=\
    \ 1 if S[22] == \"I\" else 0\n    boredoms += 1 if S[23] == \"I\" else 0\n   \
    \ boredoms += 1 if S[24] == \"I\" else 0\n    boredoms += 1 if S[25] == \"I\"\
    \ else 0\n    boredoms += 1 if S[26] == \"I\" else 0\n    boredoms += 1 if S[27]\
    \ == \"I\" else 0\n    boredoms += 1 if S[28] == \"I\" else 0\n    boredoms +=\
    \ 1 if S[29] == \"I\" else 0\n    boredoms += 1 if S[30] == \"I\" else 0\n   \
    \ boredoms += 1 if S[31] == \"I\" else 0\n    boredoms += 1 if S[32] == \"I\"\
    \ else 0\n    boredoms += 1 if S[33] == \"I\" else 0\n    boredoms += 1 if S[\n\
    def check(candidate):\n    assert candidate('Hello world') == 0\n    assert candidate('Is\
    \ the sky blue?') == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpa2ptsdtf.py\", line 49\n    def check(candidate):\n  \
    \  ^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    \n    for word in S.split():\n   \
    \     if word.startswith('I'):\n            boredoms += 1\n    return boredoms\n\
    \n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4i0hkv2b.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp4i0hkv2b.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp4i0hkv2b.py\", line 23,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    \n    for word in S.split():\n   \
    \     if word.startswith('I'):\n            boredoms += 1\n    return boredoms\n\
    \n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi42j261q.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpi42j261q.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpi42j261q.py\", line 23,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    for word in S.split():\n        if\
    \ word.startswith('I'):\n            boredoms += 1\n    return boredoms\n\n\n\
    def check(candidate):\n    assert candidate('Hello world') == 0\n    assert candidate('Is\
    \ the sky blue?') == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgh3cq40q.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpgh3cq40q.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpgh3cq40q.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    boredoms += 1 if S[0] == 'I' else\
    \ 0\n    boredoms += 1 if S[1] == '.' else 0\n    boredoms += 1 if S[2] == '.'\
    \ else 0\n    boredoms += 1 if S[3] == '.' else 0\n    boredoms += 1 if S[4] ==\
    \ '.' else 0\n    boredoms += 1 if S[5] == '.' else 0\n    boredoms += 1 if S[6]\
    \ == '.' else 0\n    boredoms += 1 if S[7] == '.' else 0\n    boredoms += 1 if\
    \ S[8] == '.' else 0\n    boredoms += 1 if S[9] == '.' else 0\n    boredoms +=\
    \ 1 if S[10] == '.' else 0\n    boredoms += 1 if S[11] == '.' else 0\n    boredoms\
    \ += 1 if S[12] == '.' else 0\n    boredoms += 1 if S[13] == '.' else 0\n    boredoms\
    \ += 1 if S[14] == '.' else 0\n    boredoms += 1 if S[15] == '.' else 0\n    boredoms\
    \ += 1 if S[16] == '.' else 0\n    boredoms += 1 if S[17] == '.' else 0\n    boredoms\
    \ += 1 if S[18] == '.' else 0\n    boredoms += 1 if S[19] == '.' else 0\n    boredoms\
    \ += 1 if S[20] == '.' else 0\n    boredoms += 1 if S[21] == '.' else 0\n    boredoms\
    \ += 1 if S[22] == '.' else 0\n    boredoms += 1 if S[23] == '.' else 0\n    boredoms\
    \ += 1 if S[24] == '.' else 0\n    boredoms += 1 if S[25] == '.' else 0\n    boredoms\
    \ += 1 if S[26] == '.' else 0\n    boredoms += 1 if S[27] == '.' else 0\n    boredoms\
    \ += 1 if S[28] == '.' else 0\n    boredoms += 1 if S[29] == '.' else 0\n    boredoms\
    \ += 1 if S[30] == '.' else 0\n    boredoms += 1 if S[31] == '.' else 0\n    boredoms\
    \ += 1 if S[32] == '.' else 0\n    boredoms += 1 if S[33] == '.' else 0\n    boredoms\
    \ += 1 if S[34] == '.' else 0\n    boredoms += 1 if S[35] == '.' else 0\n    boredoms\
    \ += 1 if S[36] == '.' else 0\n    boredoms += 1 if S[37] == '.' else 0\n    boredoms\
    \ += 1 if S[38] == '.\ndef check(candidate):\n    assert candidate('Hello world')\
    \ == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmp20m1e5ik.py\", line 52\n    boredoms += 1 if S[38] ==\
    \ '.\n                               ^\nSyntaxError: EOL while scanning string\
    \ literal\n"
  exit_code: 1
  status: SyntaxError
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredom = 0\n    boredom_count = 0\n    \n    for word\
    \ in S.split():\n        if word == 'I':\n            boredom_count += 1\n   \
    \     else:\n            boredom += 1\n    \n    return boredom_count\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr_2kgqot.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpr_2kgqot.py\", line 33,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpr_2kgqot.py\", line 30,\
    \ in check\n    assert candidate('You and I are going for a walk') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    boredoms += 1 if S[0] == 'I' else\
    \ 0\n    return boredoms\n\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5e1nyzsa.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp5e1nyzsa.py\", line 27,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp5e1nyzsa.py\", line 20,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredom = 0\n    boredom_count = 0\n    boredom_words\
    \ = []\n    boredom_sentences = []\n    boredom_sentence = []\n    boredom_word\
    \ = []\n    boredom_sentence_index = 0\n    boredom_word_index = 0\n    boredom_word_count\
    \ = 0\n    boredom_word_sentence_index = 0\n    boredom_word_sentence_count =\
    \ 0\n    boredom_word_sentence = []\n    boredom_word_sentence_count = 0\n   \
    \ boredom_word_sentence_boredom_count = 0\n    boredom_word_sentence_boredom_words\
    \ = []\n    boredom_word_sentence_boredom_sentences = []\n    boredom_word_sentence_boredom_sentence\
    \ = []\n    boredom_word_sentence_boredom_word_index = 0\n    boredom_word_sentence_boredom_word_count\
    \ = 0\n    boredom_word_sentence_boredom_word_sentence_index = 0\n    boredom_word_sentence_boredom_word_sentence_count\
    \ = 0\n    boredom_word_sentence_boredom_word_sentence_boredom_count = 0\n   \
    \ boredom_word_sentence_boredom_word_sentence_boredom_words = []\n    boredom_word_sentence_boredom_word_sentence_boredom_sentences\
    \ = []\n    boredom_word_sentence_boredom_word_sentence_boredom_sentence = []\n\
    \    boredom_word_sentence_boredom_word_sentence_boredom_word_index = 0\n    boredom_word_sentence_boredom_word_sentence_boredom_word_count\
    \ = 0\n    boredom_word_sentence_boredom_word_sentence_boredom_word_sentence_index\
    \ = 0\n    boredom_word_sentence_boredom_word_sentence_boredom_word_sentence_count\
    \ = 0\n    boredom_word_sentence_boredom_word_sentence_boredom_word_sentence_boredom_count\
    \ = 0\n    boredom_word_sentence_boredom_word_sentence_boredom_word_sentence_boredom_words\
    \ = []\n    boredom_word_sentence_boredom_word_sentence_boredom_word_sentence_boredom_sentences\
    \ = []\n    boredom_word_sentence_boredom_word_sentence_boredom_word_sentence_boredom_sentence\
    \ = []\n    boredom_word_sentence_boredom_word_sentence_boredom_word_sentence_boredom_word_index\
    \ = 0\n    boredom_word_sentence_boredom_word_sentence_boredom_word_sentence_boredom_word_count\
    \ = 0\n    boredom_word_sentence_boredom_word_sentence_boredom_word_sentence_boredom_word_sentence_index\
    \ = 0\n    boredom_word_sentence_boredom_word_sentence_boredom_word_sentence_boredom_word_sentence_count\
    \ = 0\ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6v9njhxs.py\", line\
    \ 61, in <module>\n    test_check()\n  File \"/tmp/tmp6v9njhxs.py\", line 59,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp6v9njhxs.py\", line 51,\
    \ in check\n    assert candidate('Hello world') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    boredoms += 1 if S[0] == \"I\" else\
    \ 0\n    boredoms += 1 if S[1] == \"I\" else 0\n    boredoms += 1 if S[2] == \"\
    I\" else 0\n    boredoms += 1 if S[3] == \"I\" else 0\n    boredoms += 1 if S[4]\
    \ == \"I\" else 0\n    boredoms += 1 if S[5] == \"I\" else 0\n    boredoms +=\
    \ 1 if S[6] == \"I\" else 0\n    boredoms += 1 if S[7] == \"I\" else 0\n    boredoms\
    \ += 1 if S[8] == \"I\" else 0\n    boredoms += 1 if S[9] == \"I\" else 0\n  \
    \  boredoms += 1 if S[10] == \"I\" else 0\n    boredoms += 1 if S[11] == \"I\"\
    \ else 0\n    boredoms += 1 if S[12] == \"I\" else 0\n    boredoms += 1 if S[13]\
    \ == \"I\" else 0\n    boredoms += 1 if S[14] == \"I\" else 0\n    boredoms +=\
    \ 1 if S[15] == \"I\" else 0\n    boredoms += 1 if S[16] == \"I\" else 0\n   \
    \ boredoms += 1 if S[17] == \"I\" else 0\n    boredoms += 1 if S[18] == \"I\"\
    \ else 0\n    boredoms += 1 if S[19] == \"I\" else 0\n    boredoms += 1 if S[20]\
    \ == \"I\" else 0\n    boredoms += 1 if S[21] == \"I\" else 0\n    boredoms +=\
    \ 1 if S[22] == \"I\" else 0\n    boredoms += 1 if S[23] == \"I\" else 0\n   \
    \ boredoms += 1 if S[24] == \"I\" else 0\n    boredoms += 1 if S[25] == \"I\"\
    \ else 0\n    boredoms += 1 if S[26] == \"I\" else 0\n    boredoms += 1 if S[27]\
    \ == \"I\" else 0\n    boredoms += 1 if S[28] == \"I\" else 0\n    boredoms +=\
    \ 1 if S[29] == \"I\" else 0\n    boredoms += 1 if S[30] == \"I\" else 0\n   \
    \ boredoms += 1 if S[31] == \"I\" else 0\n    boredoms += 1 if S[32] == \"I\"\
    \ else 0\n    boredoms += 1 if S[33] == \"I\" else 0\n    boredoms += 1 if S[\n\
    def check(candidate):\n    assert candidate('Hello world') == 0\n    assert candidate('Is\
    \ the sky blue?') == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpdkk6gtk7.py\", line 49\n    def check(candidate):\n  \
    \  ^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    \n    for word in S.split():\n   \
    \     if word.startswith('I'):\n            boredoms += 1\n    return boredoms\n\
    \n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0qxtn0tb.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp0qxtn0tb.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp0qxtn0tb.py\", line 23,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    for word in S.split():\n        if\
    \ word.startswith('I'):\n            boredoms += 1\n    return boredoms\n\n\n\
    def check(candidate):\n    assert candidate('Hello world') == 0\n    assert candidate('Is\
    \ the sky blue?') == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgvcvrl0a.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpgvcvrl0a.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpgvcvrl0a.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredom = 0\n    boredom_list = [\"I\"]\n    boredom_list_len\
    \ = len(boredom_list)\n    boredom_list_index = 0\n    boredom_list_index_len\
    \ = len(boredom_list_index)\n    boredom_list_index_index_len = boredom_list_index_len\n\
    \    boredom_list_index_index_len += 1\n    boredom_list_index_index_len += 1\n\
    \    boredom_list_index_index_len += 1\n    boredom_list_index_index_len += 1\n\
    \    boredom_list_index_index_len += 1\n    boredom_list_index_index_len += 1\n\
    \    boredom_list_index_index_len += 1\n    boredom_list_index_index_len += 1\n\
    \    boredom_list_index_index_len += 1\n    boredom_list_index_index_len += 1\n\
    \    boredom_list_index_index_len += 1\n    boredom_list_index_index_len += 1\n\
    \    boredom_list_index_index_len += 1\n    boredom_list_index_index_len += 1\n\
    \    boredom_list_index_index_len += 1\n    boredom_list_index_index_len += 1\n\
    \    boredom_list_index_index_len += 1\n    boredom_list_index_index_len += 1\n\
    \    boredom_list_index_index_len += 1\n    boredom_list_index_index_len += 1\n\
    \    boredom_list_index_index_len += 1\n    boredom_list_index_index_len += 1\n\
    \    boredom_list_index_index_len += 1\n    boredom_list_index_index_len += 1\n\
    \    boredom_list_index_index_len += 1\n    boredom_list_index_index_len += 1\n\
    \    boredom_list_index_index_len += 1\n    boredom_list_index_index_len += 1\n\
    \    boredom_list_index_index_len += 1\n    boredom_list_index_index_len += 1\n\
    \    boredom_list_index_index_len += 1\n    boredom_list_index_index_len += 1\n\
    \    boredom_list_index_index_len += 1\n    boredom_list_index_index_len += 1\n\
    \    boredom_list_index_index_len += 1\n    boredom_list_index_index_len += 1\n\
    \    boredom_list_index_index_len += 1\n    boredom_list_index_index_len += 1\n\
    \    boredom_list_index_index_len += 1\n    boredom_list_index_index_len += 1\n\
    \    boredom_list_index_index_len += 1\n    boredom_list_index_index_len += 1\n\
    \    boredom_list_index_index_len += 1\n    boredom_list_index_index_len += 1\n\
    \    boredom_list_index_index_len += 1\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpty444sba.py\", line\
    \ 76, in <module>\n    test_check()\n  File \"/tmp/tmpty444sba.py\", line 74,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpty444sba.py\", line 66,\
    \ in check\n    assert candidate('Hello world') == 0\n  File \"/tmp/tmpty444sba.py\"\
    , line 17, in is_bored\n    boredom_list_index_len = len(boredom_list_index)\n\
    TypeError: object of type 'int' has no len()\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredom = 0\n    \n    for word in S.split():\n    \
    \    if word.startswith('I'):\n            boredom += 1\n    return boredom\n\n\
    def check(candidate):\n    assert candidate('Hello world') == 0\n    assert candidate('Is\
    \ the sky blue?') == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpikkdn592.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpikkdn592.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpikkdn592.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    \n    boredoms += 1 if S[0] == \"\
    I\" else 0\n    \n    boredoms += 1 if S[1] == \".\" or S[1] == \"?\" or S[1]\
    \ == \"!\" else 0\n    \n    boredoms += 1 if S[2] == \".\" or S[2] == \"?\" or\
    \ S[2] == \"!\" else 0\n    \n    boredoms += 1 if S[3] == \".\" or S[3] == \"\
    ?\" or S[3] == \"!\" else 0\n    \n    boredoms += 1 if S[4] == \".\" or S[4]\
    \ == \"?\" or S[4] == \"!\" else 0\n    \n    boredoms += 1 if S[5] == \".\" or\
    \ S[5] == \"?\" or S[5] == \"!\" else 0\n    \n    boredoms += 1 if S[6] == \"\
    .\" or S[6] == \"?\" or S[6] == \"!\" else 0\n    \n    boredoms += 1 if S[7]\
    \ == \".\" or S[7] == \"?\" or S[7] == \"!\" else 0\n    \n    boredoms += 1 if\
    \ S[8] == \".\" or S[8] == \"?\" or S[8] == \"!\" else 0\n    \n    boredoms +=\
    \ 1 if S[9] == \".\" or S[9] == \"?\" or S[9] == \"!\" else 0\n    \n    boredoms\
    \ += 1 if S[10] == \".\" or S[10] == \"?\" or S[10] == \"!\" else 0\n    \n  \
    \  boredoms += 1 if S[11] == \".\" or S[11] == \"?\" or S[11] == \"!\" else 0\n\
    \    \n    boredoms += 1 if S[12] == \".\" or S[12] == \"?\" or S[12] == \"!\"\
    \ else 0\n    \n    boredoms += 1 if S[13] == \".\" or S[13] == \"?\" or S[13]\
    \ == \"!\" else 0\n    \n    boredoms += 1 if S[14] == \".\" or S[14] == \"?\"\
    \ or S[14] == \"!\" else 0\n    \n    boredoms += 1 if S[15] == \".\" or S[15]\
    \ == \"?\" or S[15] == \"!\" else 0\n    \n    boredoms += 1 if S[16] == \".\"\
    \ or S[16] == \"?\" or S[16] == \"!\" else 0\n    \n    boredoms += 1 if S[17]\
    \ == \".\" or S[17] == \"?\" or S[17] == \"!\" else 0\n    \n    boredoms += 1\
    \ if S[18] == \".\" or S[18] == \"?\" or S[18] == \"!\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpxv51tfw1.py\", line 51\n    boredoms += 1 if S[18] ==\
    \ \".\" or S[18] == \"?\" or S[18] == \"!\n                                  \
    \                             ^\nSyntaxError: EOL while scanning string literal\n"
  exit_code: 1
  status: SyntaxError
