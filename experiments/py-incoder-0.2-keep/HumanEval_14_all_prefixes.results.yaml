name: HumanEval_14_all_prefixes
language: python
results:
- program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for c in string:\n        prefixes.append(c)\n        prefixes.extend(all_prefixes(c))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppex11qmm.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmppex11qmm.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmppex11qmm.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmppex11qmm.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmppex11qmm.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmppex11qmm.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmppex11qmm.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(c)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpezt3bjmy.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpezt3bjmy.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpezt3bjmy.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpezt3bjmy.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpezt3bjmy.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpezt3bjmy.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpezt3bjmy.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp606c4gzg.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmp606c4gzg.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmp606c4gzg.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmp606c4gzg.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmp606c4gzg.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmp606c4gzg.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmp606c4gzg.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpt1e2zcxt.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpt1e2zcxt.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpt1e2zcxt.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpt1e2zcxt.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpt1e2zcxt.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpt1e2zcxt.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpt1e2zcxt.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for c in string:\n        prefixes.append(c)\n        prefixes.extend(all_prefixes(c))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxevwuh9q.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpxevwuh9q.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpxevwuh9q.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpxevwuh9q.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpxevwuh9q.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpxevwuh9q.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpxevwuh9q.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(c)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for c in string:\n        prefixes.append(c)\n        prefixes.extend(all_prefixes(c))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9z6_qfr9.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmp9z6_qfr9.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmp9z6_qfr9.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmp9z6_qfr9.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmp9z6_qfr9.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmp9z6_qfr9.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmp9z6_qfr9.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(c)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp93tc3p2c.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmp93tc3p2c.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmp93tc3p2c.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmp93tc3p2c.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmp93tc3p2c.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmp93tc3p2c.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmp93tc3p2c.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for c in string:\n        prefixes.append(c)\n        prefixes.extend(all_prefixes(c))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0gcfaioj.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmp0gcfaioj.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmp0gcfaioj.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmp0gcfaioj.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmp0gcfaioj.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmp0gcfaioj.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmp0gcfaioj.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(c)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsrk0ni0x.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpsrk0ni0x.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpsrk0ni0x.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpsrk0ni0x.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpsrk0ni0x.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpsrk0ni0x.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpsrk0ni0x.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpttqot25j.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpttqot25j.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpttqot25j.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpttqot25j.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpttqot25j.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpttqot25j.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpttqot25j.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for c in string:\n        prefixes.append(c)\n        prefixes.extend(all_prefixes(c))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4p0vzj8y.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmp4p0vzj8y.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmp4p0vzj8y.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmp4p0vzj8y.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmp4p0vzj8y.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmp4p0vzj8y.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmp4p0vzj8y.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(c)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3ol7qg1f.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmp3ol7qg1f.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmp3ol7qg1f.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmp3ol7qg1f.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmp3ol7qg1f.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmp3ol7qg1f.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmp3ol7qg1f.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    prefix_length = 0\n    for c in string:\n        if c ==\
    \ '_':\n            prefix_length += 1\n        else:\n            prefix_length\
    \ = 0\n            prefixes.append(c)\n    return prefixes\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpm8gxr_k5.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpm8gxr_k5.py\", line 24,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpm8gxr_k5.py\", line\
    \ 20, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpz4gtb4rs.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpz4gtb4rs.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpz4gtb4rs.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpz4gtb4rs.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpz4gtb4rs.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpz4gtb4rs.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpz4gtb4rs.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for c in string:\n        prefixes.append(c)\n        prefixes.extend(all_prefixes(c))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp769tgb74.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmp769tgb74.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmp769tgb74.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmp769tgb74.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmp769tgb74.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmp769tgb74.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmp769tgb74.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(c)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for c in string:\n        prefixes.append(c)\n        prefixes.extend(all_prefixes(c))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmt2uyq_4.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpmt2uyq_4.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpmt2uyq_4.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpmt2uyq_4.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpmt2uyq_4.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpmt2uyq_4.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpmt2uyq_4.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(c)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2u_w4mha.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmp2u_w4mha.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmp2u_w4mha.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmp2u_w4mha.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmp2u_w4mha.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmp2u_w4mha.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmp2u_w4mha.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for c in string:\n        prefixes.append(c)\n        prefixes.extend(all_prefixes(c))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpf9pn0zzj.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpf9pn0zzj.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpf9pn0zzj.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpf9pn0zzj.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpf9pn0zzj.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpf9pn0zzj.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpf9pn0zzj.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(c)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return list(itertools.permutations(string))\n\ndef check(candidate):\n    assert\
    \ candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf',\
    \ 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef\
    \ test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpybglohgg.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmpybglohgg.py\", line 16,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpybglohgg.py\", line\
    \ 11, in check\n    assert candidate('') == []\n  File \"/tmp/tmpybglohgg.py\"\
    , line 8, in all_prefixes\n    return list(itertools.permutations(string))\nNameError:\
    \ name 'itertools' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for c in string:\n        prefixes.append(c)\n        prefixes.extend(all_prefixes(c))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppgh8ab5q.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmppgh8ab5q.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmppgh8ab5q.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmppgh8ab5q.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmppgh8ab5q.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmppgh8ab5q.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmppgh8ab5q.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(c)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for c in string:\n        prefixes.append(c)\n        prefixes.extend(all_prefixes(c))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpm3zqbxc6.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpm3zqbxc6.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpm3zqbxc6.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpm3zqbxc6.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpm3zqbxc6.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpm3zqbxc6.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpm3zqbxc6.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(c)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for c in string:\n        prefixes.append(c)\n        prefixes.extend(all_prefixes(c))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcvs60gu4.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpcvs60gu4.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpcvs60gu4.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpcvs60gu4.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpcvs60gu4.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpcvs60gu4.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpcvs60gu4.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(c)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphnayt46d.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmphnayt46d.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmphnayt46d.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmphnayt46d.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmphnayt46d.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmphnayt46d.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmphnayt46d.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp95xw16sf.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmp95xw16sf.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmp95xw16sf.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmp95xw16sf.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmp95xw16sf.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmp95xw16sf.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmp95xw16sf.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for c in string:\n        prefixes.append(c)\n        prefixes.extend(all_prefixes(c))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0z_160lw.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmp0z_160lw.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmp0z_160lw.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmp0z_160lw.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmp0z_160lw.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmp0z_160lw.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmp0z_160lw.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(c)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppz2dk8uc.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmppz2dk8uc.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmppz2dk8uc.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmppz2dk8uc.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmppz2dk8uc.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmppz2dk8uc.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmppz2dk8uc.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return list(itertools.chain(*[prefixes(s) for s in string.split()]))\n\ndef\
    \ check(candidate):\n    assert candidate('') == []\n    assert candidate('asdfgh')\
    \ == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW')\
    \ == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpeu4u8ur4.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmpeu4u8ur4.py\", line 16,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpeu4u8ur4.py\", line\
    \ 11, in check\n    assert candidate('') == []\n  File \"/tmp/tmpeu4u8ur4.py\"\
    , line 8, in all_prefixes\n    return list(itertools.chain(*[prefixes(s) for s\
    \ in string.split()]))\nNameError: name 'itertools' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzrv_ggk_.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpzrv_ggk_.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpzrv_ggk_.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpzrv_ggk_.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpzrv_ggk_.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpzrv_ggk_.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpzrv_ggk_.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for c in string:\n        prefixes.append(c)\n        prefixes.extend(all_prefixes(c))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptocsijz3.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmptocsijz3.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmptocsijz3.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmptocsijz3.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmptocsijz3.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmptocsijz3.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmptocsijz3.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(c)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for c in string:\n        prefixes.append(c)\n        prefixes.extend(all_prefixes(c))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp56271zno.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmp56271zno.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmp56271zno.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmp56271zno.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmp56271zno.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmp56271zno.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmp56271zno.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(c)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for c in string:\n        prefixes.append(c)\n        prefixes.extend(all_prefixes(c))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprntngpbx.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmprntngpbx.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmprntngpbx.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmprntngpbx.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmprntngpbx.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmprntngpbx.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmprntngpbx.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(c)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for c in string:\n        prefixes.append(c)\n        prefixes.extend(all_prefixes(c))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw6dqw5ub.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpw6dqw5ub.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpw6dqw5ub.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpw6dqw5ub.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpw6dqw5ub.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpw6dqw5ub.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpw6dqw5ub.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(c)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvpm7a7h7.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpvpm7a7h7.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpvpm7a7h7.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpvpm7a7h7.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpvpm7a7h7.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpvpm7a7h7.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpvpm7a7h7.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return list(itertools.accumulate([len(s) for s in string.split()]))\n\ndef\
    \ check(candidate):\n    assert candidate('') == []\n    assert candidate('asdfgh')\
    \ == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW')\
    \ == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmq2d3736.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmpmq2d3736.py\", line 16,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpmq2d3736.py\", line\
    \ 11, in check\n    assert candidate('') == []\n  File \"/tmp/tmpmq2d3736.py\"\
    , line 8, in all_prefixes\n    return list(itertools.accumulate([len(s) for s\
    \ in string.split()]))\nNameError: name 'itertools' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for c in string:\n        prefixes.append(c)\n        prefixes.extend(all_prefixes(c))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpth2m01ap.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpth2m01ap.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpth2m01ap.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpth2m01ap.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpth2m01ap.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpth2m01ap.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpth2m01ap.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(c)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8mccpvi3.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmp8mccpvi3.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmp8mccpvi3.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmp8mccpvi3.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmp8mccpvi3.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmp8mccpvi3.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmp8mccpvi3.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv2ori6ot.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpv2ori6ot.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpv2ori6ot.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpv2ori6ot.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpv2ori6ot.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpv2ori6ot.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpv2ori6ot.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for c in string:\n        prefixes.append(c)\n        prefixes.extend(all_prefixes(c))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcw6g78fw.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpcw6g78fw.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpcw6g78fw.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpcw6g78fw.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpcw6g78fw.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpcw6g78fw.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpcw6g78fw.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(c)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5gbsjlv3.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmp5gbsjlv3.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmp5gbsjlv3.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmp5gbsjlv3.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmp5gbsjlv3.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmp5gbsjlv3.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmp5gbsjlv3.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnf39io9c.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpnf39io9c.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpnf39io9c.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpnf39io9c.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpnf39io9c.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpnf39io9c.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpnf39io9c.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for c in string:\n        prefixes.append(c)\n        prefixes.extend(all_prefixes(c))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq2vjun25.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpq2vjun25.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpq2vjun25.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpq2vjun25.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpq2vjun25.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpq2vjun25.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpq2vjun25.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(c)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    prefix_length = 1\n    for s in string:\n        prefixes.append(s)\n\
    \        prefix_length += len(s)\n        prefixes[-1] = prefixes[-1][:prefix_length]\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzmzank48.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpzmzank48.py\", line 22,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpzmzank48.py\", line\
    \ 18, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppycbn2aa.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmppycbn2aa.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmppycbn2aa.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmppycbn2aa.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmppycbn2aa.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmppycbn2aa.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmppycbn2aa.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmrtoe3ln.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpmrtoe3ln.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpmrtoe3ln.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpmrtoe3ln.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpmrtoe3ln.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpmrtoe3ln.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpmrtoe3ln.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkpktsi_8.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpkpktsi_8.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpkpktsi_8.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpkpktsi_8.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpkpktsi_8.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpkpktsi_8.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpkpktsi_8.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp20uy1eq4.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmp20uy1eq4.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmp20uy1eq4.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmp20uy1eq4.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmp20uy1eq4.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmp20uy1eq4.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmp20uy1eq4.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for c in string:\n        prefixes.append(c)\n        prefixes.extend(all_prefixes(c))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3eebz1fb.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmp3eebz1fb.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmp3eebz1fb.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmp3eebz1fb.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmp3eebz1fb.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmp3eebz1fb.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmp3eebz1fb.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(c)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdj528x_n.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpdj528x_n.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpdj528x_n.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpdj528x_n.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpdj528x_n.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpdj528x_n.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpdj528x_n.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return list(itertools.accumulate(string.split()))\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3wtsubhc.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmp3wtsubhc.py\", line 16,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmp3wtsubhc.py\", line\
    \ 11, in check\n    assert candidate('') == []\n  File \"/tmp/tmp3wtsubhc.py\"\
    , line 8, in all_prefixes\n    return list(itertools.accumulate(string.split()))\n\
    NameError: name 'itertools' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    prefix_length = 0\n    for c in string:\n        prefix_length\
    \ = prefix_length + 1 if c in string.uppercase else prefix_length\n        prefixes.append(string[:prefix_length])\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpy0vzbskp.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmpy0vzbskp.py\", line 21,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpy0vzbskp.py\", line\
    \ 17, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpy0vzbskp.py\", line 11, in all_prefixes\n    prefix_length\
    \ = prefix_length + 1 if c in string.uppercase else prefix_length\nAttributeError:\
    \ 'str' object has no attribute 'uppercase'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for c in string:\n        prefixes.append(c)\n        prefixes.extend(all_prefixes(c))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpt6wtntqf.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpt6wtntqf.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpt6wtntqf.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpt6wtntqf.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpt6wtntqf.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpt6wtntqf.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpt6wtntqf.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(c)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return list(itertools.chain(*[prefixes(s) for s in string.split()]))\n\ndef\
    \ check(candidate):\n    assert candidate('') == []\n    assert candidate('asdfgh')\
    \ == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW')\
    \ == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqgy0d3lw.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmpqgy0d3lw.py\", line 16,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpqgy0d3lw.py\", line\
    \ 11, in check\n    assert candidate('') == []\n  File \"/tmp/tmpqgy0d3lw.py\"\
    , line 8, in all_prefixes\n    return list(itertools.chain(*[prefixes(s) for s\
    \ in string.split()]))\nNameError: name 'itertools' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return list(itertools.accumulate([len(s) for s in string.split()]))\n\ndef\
    \ check(candidate):\n    assert candidate('') == []\n    assert candidate('asdfgh')\
    \ == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW')\
    \ == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw7d92s6p.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmpw7d92s6p.py\", line 16,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpw7d92s6p.py\", line\
    \ 11, in check\n    assert candidate('') == []\n  File \"/tmp/tmpw7d92s6p.py\"\
    , line 8, in all_prefixes\n    return list(itertools.accumulate([len(s) for s\
    \ in string.split()]))\nNameError: name 'itertools' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgbmov4b7.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpgbmov4b7.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpgbmov4b7.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpgbmov4b7.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpgbmov4b7.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpgbmov4b7.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpgbmov4b7.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4r6cwov1.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmp4r6cwov1.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmp4r6cwov1.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmp4r6cwov1.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmp4r6cwov1.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmp4r6cwov1.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmp4r6cwov1.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for c in string:\n        prefixes.append(c)\n        prefixes.extend(all_prefixes(c))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpm2rcqnoz.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpm2rcqnoz.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpm2rcqnoz.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpm2rcqnoz.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpm2rcqnoz.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpm2rcqnoz.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpm2rcqnoz.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(c)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3s9a78wf.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmp3s9a78wf.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmp3s9a78wf.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmp3s9a78wf.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmp3s9a78wf.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmp3s9a78wf.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmp3s9a78wf.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for c in string:\n        prefixes.append(c)\n        prefixes.extend(all_prefixes(c))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpye0nlmeh.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpye0nlmeh.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpye0nlmeh.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpye0nlmeh.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpye0nlmeh.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpye0nlmeh.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpye0nlmeh.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(c)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    prefix_length = 0\n    for c in string:\n        if c ==\
    \ '_':\n            prefix_length += 1\n        else:\n            prefix_length\
    \ = 0\n            prefixes.append(c)\n    return prefixes\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppm8hiarg.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmppm8hiarg.py\", line 24,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmppm8hiarg.py\", line\
    \ 20, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for c in string:\n        prefixes.append(c)\n        prefixes.extend(all_prefixes(c))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyu113gv6.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpyu113gv6.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpyu113gv6.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpyu113gv6.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpyu113gv6.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpyu113gv6.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpyu113gv6.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(c)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return list(itertools.accumulate(string.split()))\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpa_qcf4cf.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmpa_qcf4cf.py\", line 16,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpa_qcf4cf.py\", line\
    \ 11, in check\n    assert candidate('') == []\n  File \"/tmp/tmpa_qcf4cf.py\"\
    , line 8, in all_prefixes\n    return list(itertools.accumulate(string.split()))\n\
    NameError: name 'itertools' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    prefix_length = 0\n    for c in string:\n        prefix_length\
    \ = prefix_length + 1\n        if prefix_length < len(string):\n            prefixes.append(string[:prefix_length])\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxrujjqn1.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpxrujjqn1.py\", line 22,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpxrujjqn1.py\", line\
    \ 18, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr8iaqc_w.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpr8iaqc_w.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpr8iaqc_w.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpr8iaqc_w.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr8iaqc_w.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr8iaqc_w.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpr8iaqc_w.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxgnrq3ux.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpxgnrq3ux.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpxgnrq3ux.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpxgnrq3ux.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpxgnrq3ux.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpxgnrq3ux.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpxgnrq3ux.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return list(itertools.accumulate(string.split()))\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjfjw2jm_.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmpjfjw2jm_.py\", line 16,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpjfjw2jm_.py\", line\
    \ 11, in check\n    assert candidate('') == []\n  File \"/tmp/tmpjfjw2jm_.py\"\
    , line 8, in all_prefixes\n    return list(itertools.accumulate(string.split()))\n\
    NameError: name 'itertools' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzy6dn80v.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpzy6dn80v.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpzy6dn80v.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpzy6dn80v.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpzy6dn80v.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpzy6dn80v.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpzy6dn80v.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    prefix_length = 0\n    for c in string:\n        if c ==\
    \ '_':\n            prefix_length += 1\n        else:\n            prefix_length\
    \ = 0\n            prefixes.append(c)\n    return prefixes\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuq111xw1.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpuq111xw1.py\", line 24,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpuq111xw1.py\", line\
    \ 20, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwkeurxqz.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpwkeurxqz.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpwkeurxqz.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpwkeurxqz.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwkeurxqz.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwkeurxqz.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpwkeurxqz.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpalnp_1p_.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpalnp_1p_.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpalnp_1p_.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpalnp_1p_.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpalnp_1p_.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpalnp_1p_.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpalnp_1p_.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp38h66cro.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmp38h66cro.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmp38h66cro.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmp38h66cro.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmp38h66cro.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmp38h66cro.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmp38h66cro.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpo2hs4dhd.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpo2hs4dhd.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpo2hs4dhd.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpo2hs4dhd.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpo2hs4dhd.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpo2hs4dhd.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpo2hs4dhd.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpajey7iem.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpajey7iem.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpajey7iem.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpajey7iem.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpajey7iem.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpajey7iem.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpajey7iem.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp99gci4tb.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmp99gci4tb.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmp99gci4tb.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmp99gci4tb.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmp99gci4tb.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmp99gci4tb.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmp99gci4tb.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return list(itertools.takewhile(lambda s: len(s) > 0, itertools.accumulate(string.split(),\
    \ lambda x, y: x + y)))\n\ndef check(candidate):\n    assert candidate('') ==\
    \ []\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8x9uk23p.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmp8x9uk23p.py\", line 16,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmp8x9uk23p.py\", line\
    \ 11, in check\n    assert candidate('') == []\n  File \"/tmp/tmp8x9uk23p.py\"\
    , line 8, in all_prefixes\n    return list(itertools.takewhile(lambda s: len(s)\
    \ > 0, itertools.accumulate(string.split(), lambda x, y: x + y)))\nNameError:\
    \ name 'itertools' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for c in string:\n        prefixes.append(c)\n        prefixes.extend(all_prefixes(c))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0jx525m4.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmp0jx525m4.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmp0jx525m4.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmp0jx525m4.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmp0jx525m4.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmp0jx525m4.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmp0jx525m4.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(c)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for c in string:\n        prefixes.append(c)\n        prefixes.extend(all_prefixes(c))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0rk1yw33.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmp0rk1yw33.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmp0rk1yw33.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmp0rk1yw33.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmp0rk1yw33.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmp0rk1yw33.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmp0rk1yw33.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(c)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    prefix_len = 0\n    for c in string:\n        if c == '_':\n\
    \            prefix_len += 1\n        else:\n            prefix_len = 0\n    \
    \    prefixes.append(string[:prefix_len])\n    return prefixes\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpz1o2ag9m.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpz1o2ag9m.py\", line 24,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpz1o2ag9m.py\", line\
    \ 20, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return list(itertools.accumulate(string.split()))\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpc4a4_5h8.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmpc4a4_5h8.py\", line 16,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpc4a4_5h8.py\", line\
    \ 11, in check\n    assert candidate('') == []\n  File \"/tmp/tmpc4a4_5h8.py\"\
    , line 8, in all_prefixes\n    return list(itertools.accumulate(string.split()))\n\
    NameError: name 'itertools' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for c in string:\n        prefixes.append(c)\n        prefixes.extend(all_prefixes(c))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwixm9lqg.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpwixm9lqg.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpwixm9lqg.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpwixm9lqg.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpwixm9lqg.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpwixm9lqg.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpwixm9lqg.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(c)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for c in string:\n        prefixes.append(c)\n        prefixes.extend(all_prefixes(c))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9wny3tyb.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmp9wny3tyb.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmp9wny3tyb.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmp9wny3tyb.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmp9wny3tyb.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmp9wny3tyb.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmp9wny3tyb.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(c)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    prefix_length = 1\n    for c in string:\n        if c ==\
    \ '_':\n            prefix_length += 1\n        else:\n            prefix_length\
    \ = 1\n            prefixes.append(c)\n    return prefixes\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppnxlxuts.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmppnxlxuts.py\", line 24,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmppnxlxuts.py\", line\
    \ 20, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for c in string:\n        prefixes.append(c)\n        prefixes.extend(all_prefixes(c))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpww_z4_0h.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpww_z4_0h.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpww_z4_0h.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpww_z4_0h.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpww_z4_0h.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpww_z4_0h.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpww_z4_0h.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(c)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return list(itertools.takewhile(lambda s: len(s) <= len(string), itertools.accumulate(string.split(),\
    \ lambda s, x: s + x)))\n\ndef check(candidate):\n    assert candidate('') ==\
    \ []\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp11wlp2w5.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmp11wlp2w5.py\", line 16,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmp11wlp2w5.py\", line\
    \ 11, in check\n    assert candidate('') == []\n  File \"/tmp/tmp11wlp2w5.py\"\
    , line 8, in all_prefixes\n    return list(itertools.takewhile(lambda s: len(s)\
    \ <= len(string), itertools.accumulate(string.split(), lambda s, x: s + x)))\n\
    NameError: name 'itertools' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplvjgaf20.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmplvjgaf20.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmplvjgaf20.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmplvjgaf20.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmplvjgaf20.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmplvjgaf20.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmplvjgaf20.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for c in string:\n        prefixes.append(c)\n        prefixes.extend(all_prefixes(c))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpa_hc2smj.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpa_hc2smj.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpa_hc2smj.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpa_hc2smj.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpa_hc2smj.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpa_hc2smj.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpa_hc2smj.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(c)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptyatbft6.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmptyatbft6.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmptyatbft6.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmptyatbft6.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmptyatbft6.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmptyatbft6.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmptyatbft6.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return list(itertools.permutations(string))\n\ndef check(candidate):\n    assert\
    \ candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf',\
    \ 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef\
    \ test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbbde8tdw.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmpbbde8tdw.py\", line 16,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpbbde8tdw.py\", line\
    \ 11, in check\n    assert candidate('') == []\n  File \"/tmp/tmpbbde8tdw.py\"\
    , line 8, in all_prefixes\n    return list(itertools.permutations(string))\nNameError:\
    \ name 'itertools' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdeavci8a.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpdeavci8a.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpdeavci8a.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpdeavci8a.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpdeavci8a.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpdeavci8a.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpdeavci8a.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmps9qig_ir.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmps9qig_ir.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmps9qig_ir.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmps9qig_ir.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmps9qig_ir.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmps9qig_ir.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmps9qig_ir.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph88n6aan.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmph88n6aan.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmph88n6aan.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmph88n6aan.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmph88n6aan.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmph88n6aan.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmph88n6aan.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for c in string:\n        prefixes.append(c)\n        prefixes.extend(all_prefixes(c))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjix6j6wa.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpjix6j6wa.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpjix6j6wa.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpjix6j6wa.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpjix6j6wa.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpjix6j6wa.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpjix6j6wa.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(c)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for c in string:\n        prefixes.append(c)\n        prefixes.extend(all_prefixes(c))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppxt1_2bj.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmppxt1_2bj.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmppxt1_2bj.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmppxt1_2bj.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmppxt1_2bj.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmppxt1_2bj.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmppxt1_2bj.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(c)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    prefix_length = 0\n    for c in string:\n        if c ==\
    \ '_':\n            prefix_length += 1\n        else:\n            prefix_length\
    \ = 0\n            prefixes.append(c)\n    return prefixes\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcpi9ft9w.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpcpi9ft9w.py\", line 24,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpcpi9ft9w.py\", line\
    \ 20, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    prefix_length = 0\n    for c in string:\n        if c not\
    \ in prefixes:\n            prefixes.append(c)\n            prefix_length += 1\n\
    \        else:\n            prefix_length = max(prefix_length, len(prefixes[-1]))\n\
    \            prefixes[-1] += c\n    return prefixes\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0tahuhdi.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp0tahuhdi.py\", line 25,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmp0tahuhdi.py\", line\
    \ 21, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for c in string:\n        prefixes.append(c)\n        prefixes.extend(all_prefixes(c))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphkeudwtj.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmphkeudwtj.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmphkeudwtj.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmphkeudwtj.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmphkeudwtj.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmphkeudwtj.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmphkeudwtj.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(c)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for c in string:\n        prefixes.append(c)\n        prefixes.extend(all_prefixes(c))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxx8rx8yi.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpxx8rx8yi.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpxx8rx8yi.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpxx8rx8yi.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpxx8rx8yi.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpxx8rx8yi.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpxx8rx8yi.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(c)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for c in string:\n        prefixes.append(c)\n        prefixes.extend(all_prefixes(c))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4j7gxg2g.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmp4j7gxg2g.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmp4j7gxg2g.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmp4j7gxg2g.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmp4j7gxg2g.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmp4j7gxg2g.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmp4j7gxg2g.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(c)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return list(itertools.permutations(string))\n\ndef check(candidate):\n    assert\
    \ candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf',\
    \ 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef\
    \ test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7nyhihyk.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmp7nyhihyk.py\", line 16,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmp7nyhihyk.py\", line\
    \ 11, in check\n    assert candidate('') == []\n  File \"/tmp/tmp7nyhihyk.py\"\
    , line 8, in all_prefixes\n    return list(itertools.permutations(string))\nNameError:\
    \ name 'itertools' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp87wn6yrc.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmp87wn6yrc.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmp87wn6yrc.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmp87wn6yrc.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmp87wn6yrc.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmp87wn6yrc.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmp87wn6yrc.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for c in string:\n        prefixes.append(c)\n        prefixes.extend(all_prefixes(c))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpf8e4_w1g.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpf8e4_w1g.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpf8e4_w1g.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpf8e4_w1g.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpf8e4_w1g.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpf8e4_w1g.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpf8e4_w1g.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(c)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return list(itertools.permutations(string, len(string)))\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0yds9dfq.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmp0yds9dfq.py\", line 16,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmp0yds9dfq.py\", line\
    \ 11, in check\n    assert candidate('') == []\n  File \"/tmp/tmp0yds9dfq.py\"\
    , line 8, in all_prefixes\n    return list(itertools.permutations(string, len(string)))\n\
    NameError: name 'itertools' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzxhc08w5.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpzxhc08w5.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpzxhc08w5.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpzxhc08w5.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpzxhc08w5.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpzxhc08w5.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpzxhc08w5.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return list(itertools.accumulate([len(s) for s in string.split()]))\n\ndef\
    \ check(candidate):\n    assert candidate('') == []\n    assert candidate('asdfgh')\
    \ == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW')\
    \ == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsltirnzb.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmpsltirnzb.py\", line 16,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpsltirnzb.py\", line\
    \ 11, in check\n    assert candidate('') == []\n  File \"/tmp/tmpsltirnzb.py\"\
    , line 8, in all_prefixes\n    return list(itertools.accumulate([len(s) for s\
    \ in string.split()]))\nNameError: name 'itertools' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp16hrd7xx.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmp16hrd7xx.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmp16hrd7xx.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmp16hrd7xx.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmp16hrd7xx.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmp16hrd7xx.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmp16hrd7xx.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3q4i7eil.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmp3q4i7eil.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmp3q4i7eil.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmp3q4i7eil.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmp3q4i7eil.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmp3q4i7eil.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmp3q4i7eil.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpobb_b18l.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpobb_b18l.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpobb_b18l.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpobb_b18l.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpobb_b18l.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpobb_b18l.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpobb_b18l.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpf9zgccjx.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpf9zgccjx.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpf9zgccjx.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpf9zgccjx.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpf9zgccjx.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpf9zgccjx.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpf9zgccjx.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return list(itertools.accumulate(string.split()))\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpo1a6pt0m.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmpo1a6pt0m.py\", line 16,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpo1a6pt0m.py\", line\
    \ 11, in check\n    assert candidate('') == []\n  File \"/tmp/tmpo1a6pt0m.py\"\
    , line 8, in all_prefixes\n    return list(itertools.accumulate(string.split()))\n\
    NameError: name 'itertools' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for c in string:\n        prefixes.append(c)\n        prefixes.extend(all_prefixes(c))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_aklsc8e.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmp_aklsc8e.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmp_aklsc8e.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmp_aklsc8e.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmp_aklsc8e.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmp_aklsc8e.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmp_aklsc8e.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(c)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for c in string:\n        prefixes.append(c)\n        prefixes.extend(all_prefixes(c))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpm05ydr_m.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpm05ydr_m.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpm05ydr_m.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpm05ydr_m.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpm05ydr_m.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpm05ydr_m.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpm05ydr_m.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(c)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppbu9a_62.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmppbu9a_62.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmppbu9a_62.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmppbu9a_62.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmppbu9a_62.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmppbu9a_62.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmppbu9a_62.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for c in string:\n        prefixes.append(c)\n        prefixes.extend(all_prefixes(c))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpawah4z88.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpawah4z88.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpawah4z88.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpawah4z88.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpawah4z88.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpawah4z88.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpawah4z88.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(c)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for c in string:\n        prefixes.append(c)\n        prefixes.extend(all_prefixes(c))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpslwhnwi9.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpslwhnwi9.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpslwhnwi9.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpslwhnwi9.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpslwhnwi9.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpslwhnwi9.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpslwhnwi9.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(c)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return list(itertools.chain(*[prefixes(s) for s in string.split()]))\n\ndef\
    \ check(candidate):\n    assert candidate('') == []\n    assert candidate('asdfgh')\
    \ == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW')\
    \ == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvrac7ptx.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmpvrac7ptx.py\", line 16,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpvrac7ptx.py\", line\
    \ 11, in check\n    assert candidate('') == []\n  File \"/tmp/tmpvrac7ptx.py\"\
    , line 8, in all_prefixes\n    return list(itertools.chain(*[prefixes(s) for s\
    \ in string.split()]))\nNameError: name 'itertools' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for c in string:\n        prefixes.append(c)\n        prefixes.extend(all_prefixes(c))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpky_eiwlz.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpky_eiwlz.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpky_eiwlz.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpky_eiwlz.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpky_eiwlz.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpky_eiwlz.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpky_eiwlz.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(c)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxz47u7_a.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpxz47u7_a.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpxz47u7_a.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpxz47u7_a.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpxz47u7_a.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpxz47u7_a.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpxz47u7_a.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxlsesvq3.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpxlsesvq3.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpxlsesvq3.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpxlsesvq3.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpxlsesvq3.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpxlsesvq3.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpxlsesvq3.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for c in string:\n        prefixes.append(c)\n        prefixes.extend(all_prefixes(c))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw9dy54jm.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpw9dy54jm.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpw9dy54jm.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpw9dy54jm.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpw9dy54jm.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpw9dy54jm.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpw9dy54jm.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(c)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdhcj3jzb.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpdhcj3jzb.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpdhcj3jzb.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpdhcj3jzb.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpdhcj3jzb.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpdhcj3jzb.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpdhcj3jzb.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return list(itertools.accumulate([len(s) for s in string.split()]))\n\ndef\
    \ check(candidate):\n    assert candidate('') == []\n    assert candidate('asdfgh')\
    \ == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW')\
    \ == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6vbo8ry1.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmp6vbo8ry1.py\", line 16,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmp6vbo8ry1.py\", line\
    \ 11, in check\n    assert candidate('') == []\n  File \"/tmp/tmp6vbo8ry1.py\"\
    , line 8, in all_prefixes\n    return list(itertools.accumulate([len(s) for s\
    \ in string.split()]))\nNameError: name 'itertools' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpz__dq2s1.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpz__dq2s1.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpz__dq2s1.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpz__dq2s1.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpz__dq2s1.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpz__dq2s1.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpz__dq2s1.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    prefix_length = 0\n    for c in string:\n        if c ==\
    \ ' ':\n            prefix_length += 1\n        else:\n            prefix_length\
    \ = 0\n            prefixes.append(string[:prefix_length])\n            string\
    \ = string[prefix_length:]\n    return prefixes\n\ndef check(candidate):\n   \
    \ assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as', 'asd',\
    \ 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\
    \ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2q6n3k90.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp2q6n3k90.py\", line 25,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmp2q6n3k90.py\", line\
    \ 21, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppyiksjhu.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmppyiksjhu.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmppyiksjhu.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmppyiksjhu.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmppyiksjhu.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmppyiksjhu.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmppyiksjhu.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    prefix_length = 1\n    for c in string:\n        prefixes.append(string[:prefix_length])\n\
    \        prefix_length += 1\n    return prefixes\n\ndef check(candidate):\n  \
    \  assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as', 'asd',\
    \ 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\
    \ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpa68s9xyz.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpa68s9xyz.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpa68s9xyz.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpa68s9xyz.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpa68s9xyz.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpa68s9xyz.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpa68s9xyz.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6_yz4_sz.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmp6_yz4_sz.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmp6_yz4_sz.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmp6_yz4_sz.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmp6_yz4_sz.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmp6_yz4_sz.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmp6_yz4_sz.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9ryyx5c3.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmp9ryyx5c3.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmp9ryyx5c3.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmp9ryyx5c3.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmp9ryyx5c3.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmp9ryyx5c3.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmp9ryyx5c3.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpud91o6wl.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpud91o6wl.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpud91o6wl.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpud91o6wl.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpud91o6wl.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpud91o6wl.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpud91o6wl.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for c in string:\n        prefixes.append(c)\n        prefixes.extend(all_prefixes(c))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqgmx25ck.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpqgmx25ck.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpqgmx25ck.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpqgmx25ck.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpqgmx25ck.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpqgmx25ck.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpqgmx25ck.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(c)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for c in string:\n        prefixes.append(c)\n        prefixes.extend(all_prefixes(c))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_zmi5tq3.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmp_zmi5tq3.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmp_zmi5tq3.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmp_zmi5tq3.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmp_zmi5tq3.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmp_zmi5tq3.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmp_zmi5tq3.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(c)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for c in string:\n        prefixes.append(c)\n        prefixes.extend(all_prefixes(c))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyq4n1_fz.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpyq4n1_fz.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpyq4n1_fz.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpyq4n1_fz.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpyq4n1_fz.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpyq4n1_fz.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpyq4n1_fz.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(c)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for c in string:\n        prefixes.append(c)\n        prefixes.extend(all_prefixes(c))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpj8i65vg2.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpj8i65vg2.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpj8i65vg2.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpj8i65vg2.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpj8i65vg2.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpj8i65vg2.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpj8i65vg2.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(c)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7bro6xgi.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmp7bro6xgi.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmp7bro6xgi.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmp7bro6xgi.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmp7bro6xgi.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmp7bro6xgi.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmp7bro6xgi.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for c in string:\n        prefixes.append(c)\n        prefixes.extend(all_prefixes(c))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6m1voknq.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmp6m1voknq.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmp6m1voknq.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmp6m1voknq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmp6m1voknq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmp6m1voknq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmp6m1voknq.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(c)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdmx4xwep.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpdmx4xwep.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpdmx4xwep.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpdmx4xwep.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpdmx4xwep.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpdmx4xwep.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpdmx4xwep.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for c in string:\n        prefixes.append(c)\n        prefixes.extend(all_prefixes(c))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgaaruw3d.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpgaaruw3d.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpgaaruw3d.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpgaaruw3d.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpgaaruw3d.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpgaaruw3d.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpgaaruw3d.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(c)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return list(itertools.chain(*[prefixes(s) for s in string.split()]))\n\ndef\
    \ check(candidate):\n    assert candidate('') == []\n    assert candidate('asdfgh')\
    \ == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW')\
    \ == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6nsrwe81.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmp6nsrwe81.py\", line 16,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmp6nsrwe81.py\", line\
    \ 11, in check\n    assert candidate('') == []\n  File \"/tmp/tmp6nsrwe81.py\"\
    , line 8, in all_prefixes\n    return list(itertools.chain(*[prefixes(s) for s\
    \ in string.split()]))\nNameError: name 'itertools' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph8hgjgeq.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmph8hgjgeq.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmph8hgjgeq.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmph8hgjgeq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmph8hgjgeq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmph8hgjgeq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmph8hgjgeq.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for c in string:\n        prefixes.append(c)\n        prefixes.extend(all_prefixes(c))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1fs2cx7h.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmp1fs2cx7h.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmp1fs2cx7h.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmp1fs2cx7h.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmp1fs2cx7h.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmp1fs2cx7h.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmp1fs2cx7h.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(c)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for c in string:\n        prefixes.append(c)\n        prefixes.extend(all_prefixes(c))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppmuczffc.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmppmuczffc.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmppmuczffc.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmppmuczffc.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmppmuczffc.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmppmuczffc.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmppmuczffc.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(c)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptulh01r0.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmptulh01r0.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmptulh01r0.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmptulh01r0.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmptulh01r0.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmptulh01r0.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmptulh01r0.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzh9nxzjl.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpzh9nxzjl.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpzh9nxzjl.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpzh9nxzjl.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpzh9nxzjl.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpzh9nxzjl.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpzh9nxzjl.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsm0fee68.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpsm0fee68.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpsm0fee68.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpsm0fee68.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpsm0fee68.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpsm0fee68.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpsm0fee68.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9v3v64ku.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmp9v3v64ku.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmp9v3v64ku.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmp9v3v64ku.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmp9v3v64ku.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmp9v3v64ku.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmp9v3v64ku.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    prefix_length = 0\n    for c in string:\n        if c ==\
    \ '_':\n            prefix_length += 1\n        else:\n            prefix_length\
    \ = 0\n            prefixes.append(c)\n    return prefixes\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp73xp1bwf.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp73xp1bwf.py\", line 24,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmp73xp1bwf.py\", line\
    \ 20, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpckt4urd_.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpckt4urd_.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpckt4urd_.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpckt4urd_.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpckt4urd_.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpckt4urd_.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpckt4urd_.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return list(itertools.accumulate(string.split()))\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsvz6gut9.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmpsvz6gut9.py\", line 16,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpsvz6gut9.py\", line\
    \ 11, in check\n    assert candidate('') == []\n  File \"/tmp/tmpsvz6gut9.py\"\
    , line 8, in all_prefixes\n    return list(itertools.accumulate(string.split()))\n\
    NameError: name 'itertools' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpoxpwl3w5.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpoxpwl3w5.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpoxpwl3w5.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpoxpwl3w5.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpoxpwl3w5.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpoxpwl3w5.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpoxpwl3w5.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for c in string:\n        prefixes.append(c)\n        prefixes.extend(all_prefixes(c))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4xuarhp8.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmp4xuarhp8.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmp4xuarhp8.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmp4xuarhp8.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmp4xuarhp8.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmp4xuarhp8.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmp4xuarhp8.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(c)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp23mbyf76.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmp23mbyf76.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmp23mbyf76.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmp23mbyf76.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmp23mbyf76.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmp23mbyf76.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmp23mbyf76.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for c in string:\n        prefixes.append(c)\n        prefixes.extend(all_prefixes(c))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcacd6ath.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpcacd6ath.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpcacd6ath.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpcacd6ath.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpcacd6ath.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpcacd6ath.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpcacd6ath.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(c)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    prefix_length = 0\n    for c in string:\n        if c not\
    \ in prefixes:\n            prefixes.append(c)\n            prefix_length += 1\n\
    \        else:\n            prefix_length -= 1\n    return prefixes\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp572q00k6.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp572q00k6.py\", line 24,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmp572q00k6.py\", line\
    \ 20, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp15ld0720.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmp15ld0720.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmp15ld0720.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmp15ld0720.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmp15ld0720.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmp15ld0720.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmp15ld0720.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    prefix_length = 0\n    for c in string:\n        if c.isalpha():\n\
    \            prefix_length += 1\n        else:\n            prefixes.append(string[prefix_length:])\n\
    \            prefix_length = 0\n            prefixes.append(c)\n    return prefixes\n\
    \ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('asdfgh')\
    \ == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW')\
    \ == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdzhebtgc.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpdzhebtgc.py\", line 25,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpdzhebtgc.py\", line\
    \ 21, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return list(itertools.accumulate([len(s) for s in string.split()))\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpa67_wcbf.py\", line 8\n    return list(itertools.accumulate([len(s)\
    \ for s in string.split()))\n                                                \
    \                    ^\nSyntaxError: closing parenthesis ')' does not match opening\
    \ parenthesis '['\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return list(itertools.accumulate(string.split()))\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpve09i4y1.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmpve09i4y1.py\", line 16,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpve09i4y1.py\", line\
    \ 11, in check\n    assert candidate('') == []\n  File \"/tmp/tmpve09i4y1.py\"\
    , line 8, in all_prefixes\n    return list(itertools.accumulate(string.split()))\n\
    NameError: name 'itertools' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpksndplxv.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpksndplxv.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpksndplxv.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpksndplxv.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpksndplxv.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpksndplxv.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpksndplxv.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpj2pqa34w.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpj2pqa34w.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpj2pqa34w.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpj2pqa34w.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpj2pqa34w.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpj2pqa34w.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpj2pqa34w.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for c in string:\n        prefixes.append(c)\n        prefixes.extend(all_prefixes(c))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqhahxl82.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpqhahxl82.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpqhahxl82.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpqhahxl82.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpqhahxl82.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpqhahxl82.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpqhahxl82.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(c)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiin4n95o.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpiin4n95o.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpiin4n95o.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpiin4n95o.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpiin4n95o.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpiin4n95o.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpiin4n95o.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3cuvv4se.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmp3cuvv4se.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmp3cuvv4se.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmp3cuvv4se.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmp3cuvv4se.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmp3cuvv4se.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmp3cuvv4se.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppg3if8ul.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmppg3if8ul.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmppg3if8ul.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmppg3if8ul.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmppg3if8ul.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmppg3if8ul.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmppg3if8ul.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for c in string:\n        prefixes.append(c)\n        prefixes.extend(all_prefixes(c))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdnb9seel.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpdnb9seel.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpdnb9seel.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpdnb9seel.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpdnb9seel.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpdnb9seel.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpdnb9seel.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(c)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    prefix = \"\"\n    for c in string:\n        if c.isalpha():\n\
    \            prefix += c\n        else:\n            prefixes.append(prefix)\n\
    \            prefix = c\n    prefixes.append(prefix)\n    return prefixes\n\n\
    def check(candidate):\n    assert candidate('') == []\n    assert candidate('asdfgh')\
    \ == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW')\
    \ == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsj3r_8uu.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpsj3r_8uu.py\", line 25,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpsj3r_8uu.py\", line\
    \ 20, in check\n    assert candidate('') == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for c in string:\n        prefixes.append(c)\n        prefixes.extend(all_prefixes(c))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1cs1insv.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmp1cs1insv.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmp1cs1insv.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmp1cs1insv.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmp1cs1insv.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmp1cs1insv.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmp1cs1insv.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(c)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpy83hffsz.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpy83hffsz.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpy83hffsz.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpy83hffsz.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpy83hffsz.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpy83hffsz.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpy83hffsz.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprpsqsjz_.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmprpsqsjz_.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmprpsqsjz_.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmprpsqsjz_.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmprpsqsjz_.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmprpsqsjz_.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmprpsqsjz_.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return list(itertools.accumulate([len(s) for s in string.split()]))\n\ndef\
    \ check(candidate):\n    assert candidate('') == []\n    assert candidate('asdfgh')\
    \ == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW')\
    \ == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpc5slzrom.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmpc5slzrom.py\", line 16,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpc5slzrom.py\", line\
    \ 11, in check\n    assert candidate('') == []\n  File \"/tmp/tmpc5slzrom.py\"\
    , line 8, in all_prefixes\n    return list(itertools.accumulate([len(s) for s\
    \ in string.split()]))\nNameError: name 'itertools' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    prefix_length = 0\n    for c in string:\n        if c ==\
    \ '_':\n            prefix_length += 1\n        else:\n            prefix_length\
    \ = 0\n            prefixes.append(c)\n    return prefixes\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyhv_kvd0.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpyhv_kvd0.py\", line 24,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpyhv_kvd0.py\", line\
    \ 20, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    prefix = \"\"\n    for c in string:\n        if c == prefix:\n\
    \            prefixes.append(prefix)\n        else:\n            prefix = c\n\
    \            prefixes.append(prefix)\n    return prefixes\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9ablll_0.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp9ablll_0.py\", line 24,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmp9ablll_0.py\", line\
    \ 20, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for c in string:\n        prefixes.append(c)\n        prefixes.extend(all_prefixes(c))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpj_hnl35c.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpj_hnl35c.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpj_hnl35c.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpj_hnl35c.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpj_hnl35c.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpj_hnl35c.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpj_hnl35c.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(c)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_soe7j96.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmp_soe7j96.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmp_soe7j96.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmp_soe7j96.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmp_soe7j96.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmp_soe7j96.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmp_soe7j96.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for c in string:\n        prefixes.append(c)\n        prefixes.extend(all_prefixes(c))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk648pklk.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpk648pklk.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpk648pklk.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpk648pklk.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpk648pklk.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpk648pklk.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpk648pklk.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(c)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2fbjv6l7.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmp2fbjv6l7.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmp2fbjv6l7.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmp2fbjv6l7.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmp2fbjv6l7.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmp2fbjv6l7.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmp2fbjv6l7.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    prefix_length = 0\n    for c in string:\n        if c.isalpha():\n\
    \            prefix_length += 1\n        else:\n            prefix_length = 0\n\
    \        prefixes.append(string[:prefix_length])\n    return prefixes\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    prefix_length = 0\n    for c in string:\n        prefix_length\
    \ = prefix_length + 1\n        if prefix_length < len(string):\n            prefixes.append(string[:prefix_length])\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphyon_0vx.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmphyon_0vx.py\", line 22,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmphyon_0vx.py\", line\
    \ 18, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    prefix_length = 0\n    for c in string:\n        if c ==\
    \ '_':\n            prefix_length += 1\n        else:\n            prefix_length\
    \ = 0\n        prefixes.append(c * prefix_length)\n    return prefixes\n\ndef\
    \ check(candidate):\n    assert candidate('') == []\n    assert candidate('asdfgh')\
    \ == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW')\
    \ == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0gdcwx7l.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp0gdcwx7l.py\", line 24,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmp0gdcwx7l.py\", line\
    \ 20, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return list(itertools.accumulate([len(s) for s in string.split()]))\n\ndef\
    \ check(candidate):\n    assert candidate('') == []\n    assert candidate('asdfgh')\
    \ == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW')\
    \ == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6amkaktz.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmp6amkaktz.py\", line 16,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmp6amkaktz.py\", line\
    \ 11, in check\n    assert candidate('') == []\n  File \"/tmp/tmp6amkaktz.py\"\
    , line 8, in all_prefixes\n    return list(itertools.accumulate([len(s) for s\
    \ in string.split()]))\nNameError: name 'itertools' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0wrx2_a2.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmp0wrx2_a2.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmp0wrx2_a2.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmp0wrx2_a2.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmp0wrx2_a2.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmp0wrx2_a2.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmp0wrx2_a2.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0zqztuge.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmp0zqztuge.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmp0zqztuge.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmp0zqztuge.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmp0zqztuge.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmp0zqztuge.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmp0zqztuge.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return list(itertools.accumulate(string.split()))\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpacch0uq0.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmpacch0uq0.py\", line 16,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpacch0uq0.py\", line\
    \ 11, in check\n    assert candidate('') == []\n  File \"/tmp/tmpacch0uq0.py\"\
    , line 8, in all_prefixes\n    return list(itertools.accumulate(string.split()))\n\
    NameError: name 'itertools' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxqdg9h_t.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpxqdg9h_t.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpxqdg9h_t.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpxqdg9h_t.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpxqdg9h_t.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpxqdg9h_t.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpxqdg9h_t.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for c in string:\n        prefixes.append(c)\n        prefixes.extend(all_prefixes(c))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpz7qei7r7.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpz7qei7r7.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpz7qei7r7.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpz7qei7r7.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpz7qei7r7.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpz7qei7r7.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpz7qei7r7.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(c)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmhk6z4sb.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpmhk6z4sb.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpmhk6z4sb.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpmhk6z4sb.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpmhk6z4sb.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpmhk6z4sb.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpmhk6z4sb.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplk4dxmvq.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmplk4dxmvq.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmplk4dxmvq.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmplk4dxmvq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmplk4dxmvq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmplk4dxmvq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmplk4dxmvq.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3i9g7p65.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmp3i9g7p65.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmp3i9g7p65.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmp3i9g7p65.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmp3i9g7p65.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmp3i9g7p65.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmp3i9g7p65.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for c in string:\n        prefixes.append(c)\n        prefixes.extend(all_prefixes(c))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6zkghxpm.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmp6zkghxpm.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmp6zkghxpm.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmp6zkghxpm.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmp6zkghxpm.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmp6zkghxpm.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmp6zkghxpm.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(c)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuhy2jmop.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpuhy2jmop.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpuhy2jmop.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpuhy2jmop.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpuhy2jmop.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpuhy2jmop.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpuhy2jmop.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for c in string:\n        prefixes.append(c)\n        prefixes.extend(all_prefixes(c))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprm7wplwc.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmprm7wplwc.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmprm7wplwc.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmprm7wplwc.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmprm7wplwc.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmprm7wplwc.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmprm7wplwc.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(c)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprp41ij7k.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmprp41ij7k.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmprp41ij7k.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmprp41ij7k.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmprp41ij7k.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmprp41ij7k.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmprp41ij7k.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprf77a0a9.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmprf77a0a9.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmprf77a0a9.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmprf77a0a9.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmprf77a0a9.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmprf77a0a9.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmprf77a0a9.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbd_tin4m.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpbd_tin4m.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpbd_tin4m.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpbd_tin4m.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpbd_tin4m.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpbd_tin4m.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpbd_tin4m.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpio4o5ffo.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpio4o5ffo.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpio4o5ffo.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpio4o5ffo.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpio4o5ffo.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpio4o5ffo.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpio4o5ffo.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdyqvteft.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpdyqvteft.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpdyqvteft.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpdyqvteft.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpdyqvteft.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpdyqvteft.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpdyqvteft.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbv2g8943.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpbv2g8943.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpbv2g8943.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpbv2g8943.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpbv2g8943.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpbv2g8943.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpbv2g8943.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for c in string:\n        prefixes.append(c)\n        prefixes.extend(all_prefixes(c))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpb7926e9i.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpb7926e9i.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpb7926e9i.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpb7926e9i.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpb7926e9i.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpb7926e9i.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpb7926e9i.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(c)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for c in string:\n        prefixes.append(c)\n        prefixes.extend(all_prefixes(c))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpru5j1t5z.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpru5j1t5z.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpru5j1t5z.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpru5j1t5z.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpru5j1t5z.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpru5j1t5z.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpru5j1t5z.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(c)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return list(itertools.accumulate(string.split()))\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1euyp1i9.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmp1euyp1i9.py\", line 16,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmp1euyp1i9.py\", line\
    \ 11, in check\n    assert candidate('') == []\n  File \"/tmp/tmp1euyp1i9.py\"\
    , line 8, in all_prefixes\n    return list(itertools.accumulate(string.split()))\n\
    NameError: name 'itertools' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4r6d3lqq.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmp4r6d3lqq.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmp4r6d3lqq.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmp4r6d3lqq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmp4r6d3lqq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmp4r6d3lqq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmp4r6d3lqq.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return list(itertools.chain(*[prefixes(s) for s in string.split()]))\n\ndef\
    \ check(candidate):\n    assert candidate('') == []\n    assert candidate('asdfgh')\
    \ == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW')\
    \ == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmps8_rsf2j.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmps8_rsf2j.py\", line 16,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmps8_rsf2j.py\", line\
    \ 11, in check\n    assert candidate('') == []\n  File \"/tmp/tmps8_rsf2j.py\"\
    , line 8, in all_prefixes\n    return list(itertools.chain(*[prefixes(s) for s\
    \ in string.split()]))\nNameError: name 'itertools' is not defined\n"
  exit_code: -1
  status: Exception
