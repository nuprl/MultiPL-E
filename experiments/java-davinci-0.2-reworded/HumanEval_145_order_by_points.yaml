name: HumanEval_145_order_by_points
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // Write a function which sorts the given array list of integers\n\
  \    // in ascending order according to the sum of their digits.\n    // Note: if\
  \ there are several items with similar sum of their digits,\n    // order them based\
  \ on their index in original array list.\n    // For example:\n    // >>> orderByPoints((new\
  \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n\
  \    // (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l,\
  \ (long)11l)))\n    // >>> orderByPoints((new ArrayList<Long>(Arrays.asList())))\n\
  \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
  \ orderByPoints(ArrayList<Long> nums) {\n"
tests: "    }\n    public static void main(String[] args) {\n    assert(orderByPoints((new\
  \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new\
  \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n\
  \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1234l, (long)423l,\
  \ (long)463l, (long)145l, (long)2l, (long)423l, (long)423l, (long)53l, (long)6l,\
  \ (long)37l, (long)3457l, (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new\
  \ ArrayList<Long>(Arrays.asList((long)0l, (long)2l, (long)3l, (long)6l, (long)53l,\
  \ (long)423l, (long)423l, (long)423l, (long)1234l, (long)145l, (long)37l, (long)46l,\
  \ (long)56l, (long)463l, (long)3457l)))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
  \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
  \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
  \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l, (long)1l,\
  \ (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
  \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l,\
  \ (long)10l, (long)11l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)10l,\
  \ (long)2l, (long)11l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l,\
  \ (long)9l)))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)0l,\
  \ (long)6l, (long)6l, (long)-76l, (long)-21l, (long)23l, (long)4l)))).equals((new\
  \ ArrayList<Long>(Arrays.asList((long)-76l, (long)-21l, (long)0l, (long)4l, (long)23l,\
  \ (long)6l, (long)6l)))));\n    }\n\n}\n"
completions: ["        // Write your code here\n        return null;", "        //\
    \ Write your code here\n        return null;", "        // Write your code here\n\
    \        return null;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        ArrayList<Pair<Long, Long>> pairs = new ArrayList<Pair<Long, Long>>();\n\
    \        for (Long num : nums) {\n            pairs.add(new Pair<Long, Long>(num,\
    \ sumOfDigits(num)));\n        }\n        Collections.sort(pairs, new Comparator<Pair<Long,\
    \ Long>>() {\n            @Override\n            public int compare(Pair<Long,\
    \ Long> p1, Pair<Long, Long> p2) {\n                if (p1.getValue1().equals(p2.getValue1()))\
    \ {\n                    return p1.getValue0().compareTo(p2.getValue0());\n  \
    \              }\n                return p1.getValue1().compareTo(p2.getValue1());\n\
    \            }\n        });\n        for (Pair<Long, Long> pair : pairs) {\n \
    \           result.add(pair.getValue0());\n        }\n        return result;",
  "        // Write your code here\n        return null;", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        ArrayList<Pair<Long, Long>> pairs =\
    \ new ArrayList<Pair<Long, Long>>();\n        for (int i = 0; i < nums.size();\
    \ i++) {\n            Long num = nums.get(i);\n            Long sum = 0l;\n  \
    \          while (num != 0) {\n                sum += num % 10;\n            \
    \    num /= 10;\n            }\n            pairs.add(new Pair<Long, Long>(sum,\
    \ (long)i));\n        }\n        Collections.sort(pairs, new Comparator<Pair<Long,\
    \ Long>>() {\n            @Override\n            public int compare(Pair<Long,\
    \ Long> p1, Pair<Long, Long> p2) {\n                if (p1.getValue0().equals(p2.getValue0()))\
    \ {\n                    return p1.getValue1().compareTo(p2.getValue1());\n  \
    \              }\n                return p1.getValue0().compareTo(p2.getValue0());\n\
    \            }\n        });\n        for (int i = 0; i < pairs.size(); i++) {\n\
    \            result.add(nums.get(pairs.get(i).getValue1().intValue()));\n    \
    \    }\n        return result;", "        // Write your code here\n        return\
    \ null;", '        return null;', "        // Your code here\n        return nums;",
  "        // Write your code here\n        return null;", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        for (Long num : nums) {\n         \
    \   result.add(num);\n        }\n        Collections.sort(result, new Comparator<Long>()\
    \ {\n            public int compare(Long a, Long b) {\n                long sumA\
    \ = 0;\n                long sumB = 0;\n                while (a != 0) {\n   \
    \                 sumA += a % 10;\n                    a /= 10;\n            \
    \    }\n                while (b != 0) {\n                    sumB += b % 10;\n\
    \                    b /= 10;\n                }\n                if (sumA < sumB)\
    \ {\n                    return -1;\n                } else if (sumA > sumB) {\n\
    \                    return 1;\n                } else {\n                   \
    \ return 0;\n                }\n            }\n        });\n        return result;",
  '        return null;', "        // Write your code here\n        return null;",
  "        // Write your code here\n        return nums;", "        // Write your\
    \ code here\n        return null;", "        // Write your code here\n       \
    \ return null;", '        return null;', "        // Write your code here\n  \
    \      return null;", "        // Write your code here\n        return null;",
  "        // Write your code here\n        return null;"]
stop_tokens:
- "\n    }\n"
