name: HumanEval_141_file_name_check
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // Create a function which takes a string representing a file's\
  \ name, and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
  \ otherwise.\n    // A file's name is considered to be valid if and only if all\
  \ the following conditions \n    // are met:\n    // - There should not be more\
  \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
  \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
  \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
  \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
  \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
  )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    public static\
  \ String fileNameCheck(String file_name) {\n"
tests: "    }\n    public static void main(String[] args) {\n    assert(fileNameCheck((\"\
  example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
  )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
  )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
  MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
  )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
  \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
  /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
  )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
  Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n\
  \    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
  @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
  )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\"\
  )));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
  Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\"\
  )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"\
  No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n  \
  \  assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
  final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
  )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
  \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
completions: ["        // Your code here\n        return \"\";", "        // Write\
    \ your code here\n        // To print results to the standard output you can use\
    \ System.out.println()\n        // Example: System.out.println(\"Hello world!\"\
    );\n        String[] parts = file_name.split(\"\\\\.\");\n        if (parts.length\
    \ != 2) {\n            return \"No\";\n        }\n        String name = parts[0];\n\
    \        String ext = parts[1];\n        if (name.length() == 0) {\n         \
    \   return \"No\";\n        }\n        if (name.matches(\".*\\\\d.*\")) {\n  \
    \          return \"No\";\n        }\n        if (!ext.equals(\"txt\") && !ext.equals(\"\
    exe\") && !ext.equals(\"dll\")) {\n            return \"No\";\n        }\n   \
    \     return \"Yes\";", "        // Your code here\n        return \"\";", " \
    \       // Your code here\n        return \"\";", "        String[] parts = file_name.split(\"\
    \\\\.\");\n        if (parts.length != 2) {\n            return \"No\";\n    \
    \    }\n        String[] allowed_extensions = {\"txt\", \"exe\", \"dll\"};\n \
    \       if (!Arrays.asList(allowed_extensions).contains(parts[1])) {\n       \
    \     return \"No\";\n        }\n        if (parts[0].length() == 0) {\n     \
    \       return \"No\";\n        }\n        if (!Character.isLetter(parts[0].charAt(0)))\
    \ {\n            return \"No\";\n        }\n        int count = 0;\n        for\
    \ (int i = 0; i < parts[0].length(); i++) {\n            if (Character.isDigit(parts[0].charAt(i)))\
    \ {\n                count++;\n            }\n        }\n        if (count > 3)\
    \ {\n            return \"No\";\n        }\n        return \"Yes\";", "      \
    \  // Your code here\n        return \"\";", "        String[] parts = file_name.split(\"\
    \\\\.\");\n        if (parts.length != 2) {\n            return \"No\";\n    \
    \    }\n        String name = parts[0];\n        String ext = parts[1];\n    \
    \    if (name.length() == 0) {\n            return \"No\";\n        }\n      \
    \  if (name.matches(\".*\\\\d{4,}.*\")) {\n            return \"No\";\n      \
    \  }\n        if (!name.matches(\"[a-zA-Z].*\")) {\n            return \"No\"\
    ;\n        }\n        if (!ext.matches(\"txt|exe|dll\")) {\n            return\
    \ \"No\";\n        }\n        return \"Yes\";", "        // Your code here\n \
    \       return \"\";", "        // Write your code here\n        // To print results\
    \ to the standard output you can use System.out.println()\n        // Example:\
    \ System.out.println(\"Hello world!\");\n        return \"\";", "        String[]\
    \ parts = file_name.split(\"\\\\.\");\n        if (parts.length != 2) {\n    \
    \        return \"No\";\n        }\n        String[] valid_extensions = {\"txt\"\
    , \"exe\", \"dll\"};\n        if (!Arrays.asList(valid_extensions).contains(parts[1]))\
    \ {\n            return \"No\";\n        }\n        if (parts[0].length() == 0)\
    \ {\n            return \"No\";\n        }\n        if (!Character.isLetter(parts[0].charAt(0)))\
    \ {\n            return \"No\";\n        }\n        int count = 0;\n        for\
    \ (int i = 0; i < parts[0].length(); i++) {\n            if (Character.isDigit(parts[0].charAt(i)))\
    \ {\n                count++;\n            }\n        }\n        if (count > 3)\
    \ {\n            return \"No\";\n        }\n        return \"Yes\";", "      \
    \  // Your code here\n        return \"\";", "        // Write your code here\n\
    \        // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        String[] parts\
    \ = file_name.split(\"\\\\.\");\n        if (parts.length != 2) {\n          \
    \  return \"No\";\n        }\n        String name = parts[0];\n        String\
    \ ext = parts[1];\n        if (name.length() == 0) {\n            return \"No\"\
    ;\n        }\n        if (name.matches(\".*\\\\d.*\")) {\n            return \"\
    No\";\n        }\n        if (!ext.equals(\"txt\") && !ext.equals(\"exe\") &&\
    \ !ext.equals(\"dll\")) {\n            return \"No\";\n        }\n        return\
    \ \"Yes\";", "        // Your code here\n        return \"\";", "        // Your\
    \ code here.\n        return \"\";", "        // Your code here\n        return\
    \ \"\";", "        // Your code here\n        return \"\";", "        // Your\
    \ code here\n        return \"\";", "        // Write your code here\n       \
    \ // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        return \"\"\
    ;", "        // Your code goes here\n        return \"\";", "        // Write\
    \ your code here\n        // To print results to the standard output you can use\
    \ System.out.println()\n        // Example: System.out.println(\"Hello world!\"\
    );\n        String[] parts = file_name.split(\"\\\\.\");\n        if (parts.length\
    \ != 2) {\n            return \"No\";\n        }\n        String name = parts[0];\n\
    \        String ext = parts[1];\n        if (name.length() == 0) {\n         \
    \   return \"No\";\n        }\n        if (!Character.isLetter(name.charAt(0)))\
    \ {\n            return \"No\";\n        }\n        if (name.chars().filter(Character::isDigit).count()\
    \ > 3) {\n            return \"No\";\n        }\n        if (!ext.equals(\"txt\"\
    ) && !ext.equals(\"exe\") && !ext.equals(\"dll\")) {\n            return \"No\"\
    ;\n        }\n        return \"Yes\";"]
stop_tokens:
- "\n    }\n"
