name: HumanEval_99_closest_integer
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // Create a function that takes a value (string) representing\
  \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
  \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
  \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"))\n\
  \    // (15l)\n    // Note:\n    // Rounding away from zero means that if the given\
  \ number is equidistant\n    // from two integers, the one you should return is\
  \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
  14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n\
  \    public static long closestInteger(String value) {\n"
tests: "    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
  10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
  -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
  0\")) == (0l));\n    }\n\n}\n"
completions: ['        return 0;', '        return 0;', '        return 0l;', "  \
    \      // >>> closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        return 0;", "        double d = Double.parseDouble(value);\n\
    \        return (long)Math.round(d);", '        return 0;', "        // >>> closestInteger((\"\
    10\"))\n        // (10l)\n        // >>> closestInteger((\"15.3\"))\n        //\
    \ (15l)\n        // >>> closestInteger((\"14.5\"))\n        // (15l)\n       \
    \ // >>> closestInteger((\"-14.5\"))\n        // (-15l)\n        // >>> closestInteger((\"\
    -14.6\"))\n        // (-15l)\n        // >>> closestInteger((\"-14.4\"))\n   \
    \     // (-14l)\n        // >>> closestInteger((\"14.4\"))\n        // (14l)\n\
    \        // >>> closestInteger((\"14.6\"))\n        // (15l)\n        // >>> closestInteger((\"\
    -14.6\"))\n        // (-15l)\n        // >>> closestInteger((\"-14.4\"))\n   \
    \     // (-14l)\n        // >>> closestInteger((\"14.4\"))\n        // (14l)\n\
    \        // >>> closestInteger((\"14.6\"))\n        // (15l)\n        // >>> closestInteger((\"\
    -14.6\"))\n        // (-15l)\n        // >>> closestInteger((\"-14.4\"))\n   \
    \     // (-14l)\n        // >>> closestInteger((\"14.4\"))\n        // (14l)\n\
    \        // >>> closestInteger((\"14.6\"))\n        // (15l)\n        // >>> closestInteger((\"\
    -14.6\"))\n        // (-15l)\n        // >>> closestInteger((\"-14.4\"))\n   \
    \     // (-14l)\n        // >>> closestInteger((\"14.4\"))\n        // (14l)\n\
    \        // >>> closestInteger((\"14.6\"))\n        // (15l)\n        // >>> closestInteger((\"\
    -14.6\"))\n        // (-15l)\n        // >>> closestInteger((\"-14.4\"))\n   \
    \     // (-14l)\n        // >>> closestInteger((\"14.4\"))\n        // (14l)\n\
    \        // >>> closestInteger((\"14.6\"))\n        // (15l)\n        // >>> closestInteger((\"\
    -14.6\"))\n        // (-15l)\n        // >>> closestInteger((\"-14.4\"))\n   \
    \     // (-14l)\n        // >>> closestInteger(", "        // Write your code\
    \ here\n        // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        return 0;",
  '        return 0;', '        return 0;', "        // >>> closestInteger((\"10\"\
    ))\n        // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n\
    \        // Note:\n        // Rounding away from zero means that if the given\
    \ number is equidistant\n        // from two integers, the one you should return\
    \ is the one that is the\n        // farthest from zero. For example closest_integer(\"\
    14.5\") should\n        // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n        // >>> closestInteger((\"10\"))\n        // (10l)\n        //\
    \ >>> closestInteger((\"15.3\"))\n        // (15l)\n        // Note:\n       \
    \ // Rounding away from zero means that if the given number is equidistant\n \
    \       // from two integers, the one you should return is the one that is the\n\
    \        // farthest from zero. For example closest_integer(\"14.5\") should\n\
    \        // return 15 and closest_integer(\"-14.5\") should return -15.\n    \
    \    // >>> closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from zero means that if the given number\
    \ is equidistant\n        // from two integers, the one you should return is the\
    \ one that is the\n        // farthest from zero. For example closest_integer(\"\
    14.5\") should\n        // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n        // >>> closestInteger((\"10\"))\n        // (10l)\n        //\
    \ >>> closestInteger((\"15.3\"))\n        // (15l)\n        // Note:\n       \
    \ // Rounding away from", "        // >>> closestInteger((\"10\"))\n        //\
    \ (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n       \
    \ // Note:\n        // Rounding away from zero means that if the given number\
    \ is equidistant\n        // from two integers, the one you should return is the\
    \ one that is the\n        // farthest from zero. For example closest_integer(\"\
    14.5\") should\n        // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n        // >>> closestInteger((\"10\"))\n        // (10l)\n        //\
    \ >>> closestInteger((\"15.3\"))\n        // (15l)\n        // Note:\n       \
    \ // Rounding away from zero means that if the given number is equidistant\n \
    \       // from two integers, the one you should return is the one that is the\n\
    \        // farthest from zero. For example closest_integer(\"14.5\") should\n\
    \        // return 15 and closest_integer(\"-14.5\") should return -15.\n    \
    \    // >>> closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from zero means that if the given number\
    \ is equidistant\n        // from two integers, the one you should return is the\
    \ one that is the\n        // farthest from zero. For example closest_integer(\"\
    14.5\") should\n        // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n        // >>> closestInteger((\"10\"))\n        // (10l)\n        //\
    \ >>> closestInteger((\"15.3\"))\n        // (15l)\n        // Note:\n       \
    \ // Rounding away from", "        // >>> closestInteger((\"10\"))\n        //\
    \ (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n       \
    \ // Note:\n        // Rounding away from zero means that if the given number\
    \ is equidistant\n        // from two integers, the one you should return is the\
    \ one that is the\n        // farthest from zero. For example closest_integer(\"\
    14.5\") should\n        // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n        // >>> closestInteger((\"10\"))\n        // (10l)\n        //\
    \ >>> closestInteger((\"15.3\"))\n        // (15l)\n        // Note:\n       \
    \ // Rounding away from zero means that if the given number is equidistant\n \
    \       // from two integers, the one you should return is the one that is the\n\
    \        // farthest from zero. For example closest_integer(\"14.5\") should\n\
    \        // return 15 and closest_integer(\"-14.5\") should return -15.\n    \
    \    // >>> closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from zero means that if the given number\
    \ is equidistant\n        // from two integers, the one you should return is the\
    \ one that is the\n        // farthest from zero. For example closest_integer(\"\
    14.5\") should\n        // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n        // >>> closestInteger((\"10\"))\n        // (10l)\n        //\
    \ >>> closestInteger((\"15.3\"))\n        // (15l)\n        // Note:\n       \
    \ // Rounding away from", "        // >>> closestInteger((\"10\"))\n        //\
    \ (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n       \
    \ // Note:\n        // Rounding away from zero means that if the given number\
    \ is equidistant\n        // from two integers, the one you should return is the\
    \ one that is the\n        // farthest from zero. For example closest_integer(\"\
    14.5\") should\n        // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n        // >>> closestInteger((\"10\"))\n        // (10l)\n        //\
    \ >>> closestInteger((\"15.3\"))\n        // (15l)\n        // Note:\n       \
    \ // Rounding away from zero means that if the given number is equidistant\n \
    \       // from two integers, the one you should return is the one that is the\n\
    \        // farthest from zero. For example closest_integer(\"14.5\") should\n\
    \        // return 15 and closest_integer(\"-14.5\") should return -15.\n    \
    \    // >>> closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from zero means that if the given number\
    \ is equidistant\n        // from two integers, the one you should return is the\
    \ one that is the\n        // farthest from zero. For example closest_integer(\"\
    14.5\") should\n        // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n        // >>> closestInteger((\"10\"))\n        // (10l)\n        //\
    \ >>> closestInteger((\"15.3\"))\n        // (15l)\n        // Note:\n       \
    \ // Rounding away from", "        // >>> closestInteger((\"10\"))\n        //\
    \ (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n       \
    \ // >>> closestInteger((\"14.5\"))\n        // (15l)\n        // >>> closestInteger((\"\
    -14.5\"))\n        // (-15l)\n        // >>> closestInteger((\"-14.6\"))\n   \
    \     // (-15l)\n        // >>> closestInteger((\"-14.4\"))\n        // (-14l)\n\
    \        // >>> closestInteger((\"-14.0\"))\n        // (-14l)\n        // >>>\
    \ closestInteger((\"-14.1\"))\n        // (-14l)\n        // >>> closestInteger((\"\
    -14.2\"))\n        // (-14l)\n        // >>> closestInteger((\"-14.3\"))\n   \
    \     // (-14l)\n        // >>> closestInteger((\"-14.4\"))\n        // (-14l)\n\
    \        // >>> closestInteger((\"-14.5\"))\n        // (-15l)\n        // >>>\
    \ closestInteger((\"-14.6\"))\n        // (-15l)\n        // >>> closestInteger((\"\
    -14.7\"))\n        // (-15l)\n        // >>> closestInteger((\"-14.8\"))\n   \
    \     // (-15l)\n        // >>> closestInteger((\"-14.9\"))\n        // (-15l)\n\
    \        // >>> closestInteger((\"-15.0\"))\n        // (-15l)\n        // >>>\
    \ closestInteger((\"-15.1\"))\n        // (-15l)\n        // >>> closestInteger((\"\
    -15.2\"))\n        // (-15l)\n        // >>> closestInteger((\"-15.3\"))\n   \
    \     // (-15l)\n        // >>> closestInteger((\"-15.4\"))\n        // (-15l)\n\
    \        // >>> closestInteger((\"-15.5\"))\n        // (-16l)\n        // >>>\
    \ closestInteger((\"-15.6\"))\n        // (-16l)\n        // >>> closestInteger((\"\
    -15.7\"))\n        // (-16l)\n        // >>> closestInteger((\"-15.8\"))\n   \
    \     // (-16l)\n        // >>> closestInteger((\"-15.9\"))\n        // (-", " \
    \       // >>> closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // >>> closestInteger((\"15.7\"))\n      \
    \  // (16l)\n        // >>> closestInteger((\"-15.7\"))\n        // (-16l)\n \
    \       // >>> closestInteger((\"-15.3\"))\n        // (-15l)\n        // >>>\
    \ closestInteger((\"-15.1\"))\n        // (-15l)\n        // >>> closestInteger((\"\
    -15.0\"))\n        // (-15l)\n        // >>> closestInteger((\"-14.9\"))\n   \
    \     // (-15l)\n        // >>> closestInteger((\"-14.5\"))\n        // (-15l)\n\
    \        // >>> closestInteger((\"-14.1\"))\n        // (-14l)\n        // >>>\
    \ closestInteger((\"-14.0\"))\n        // (-14l)\n        // >>> closestInteger((\"\
    -13.9\"))\n        // (-14l)\n        // >>> closestInteger((\"-13.5\"))\n   \
    \     // (-14l)\n        // >>> closestInteger((\"-13.1\"))\n        // (-13l)\n\
    \        // >>> closestInteger((\"-13.0\"))\n        // (-13l)\n        // >>>\
    \ closestInteger((\"-12.9\"))\n        // (-13l)\n        // >>> closestInteger((\"\
    -12.5\"))\n        // (-13l)\n        // >>> closestInteger((\"-12.1\"))\n   \
    \     // (-12l)\n        // >>> closestInteger((\"-12.0\"))\n        // (-12l)\n\
    \        // >>> closestInteger((\"-11.9\"))\n        // (-12l)\n        // >>>\
    \ closestInteger((\"-11.5\"))\n        // (-12l)\n        // >>> closestInteger((\"\
    -11.1\"))\n        // (-11l)\n        // >>> closestInteger((\"-11.0\"))\n   \
    \     // (-11l)\n        // >>> closestInteger((\"-10.9\"))\n        // (-11l)\n\
    \        // >>> closestInteger((\"-10.5\"))\n        // (-11l)\n        // >>>\
    \ closestInteger((\"-10.1\"))\n        // (-", "        // >>> closestInteger((\"\
    10\"))\n        // (10l)\n        // >>> closestInteger((\"15.3\"))\n        //\
    \ (15l)\n        // Note:\n        // Rounding away from zero means that if the\
    \ given number is equidistant\n        // from two integers, the one you should\
    \ return is the one that is the\n        // farthest from zero. For example closest_integer(\"\
    14.5\") should\n        // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n        BigDecimal bd = new BigDecimal(value);\n        bd = bd.setScale(0,\
    \ RoundingMode.HALF_UP);\n        return bd.longValue();", '        return 0;',
  "        // >>> closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from zero means that if the given number\
    \ is equidistant\n        // from two integers, the one you should return is the\
    \ one that is the\n        // farthest from zero. For example closest_integer(\"\
    14.5\") should\n        // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n        // >>> closestInteger((\"10\"))\n        // (10l)\n        //\
    \ >>> closestInteger((\"15.3\"))\n        // (15l)\n        // Note:\n       \
    \ // Rounding away from zero means that if the given number is equidistant\n \
    \       // from two integers, the one you should return is the one that is the\n\
    \        // farthest from zero. For example closest_integer(\"14.5\") should\n\
    \        // return 15 and closest_integer(\"-14.5\") should return -15.\n    \
    \    // >>> closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from", "        // >>> closestInteger((\"\
    10\"))\n        // (10l)\n        // >>> closestInteger((\"15.3\"))\n        //\
    \ (15l)\n        // Note:\n        // Rounding away from zero means that if the\
    \ given number is equidistant\n        // from two integers, the one you should\
    \ return is the one that is the\n        // farthest from zero. For example closest_integer(\"\
    14.5\") should\n        // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n        // >>> closestInteger((\"10\"))\n        // (10l)\n        //\
    \ >>> closestInteger((\"15.3\"))\n        // (15l)\n        // Note:\n       \
    \ // Rounding away from zero means that if the given number is equidistant\n \
    \       // from two integers, the one you should return is the one that is the\n\
    \        // farthest from zero. For example closest_integer(\"14.5\") should\n\
    \        // return 15 and closest_integer(\"-14.5\") should return -15.\n    \
    \    // >>> closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from zero means that if the given number\
    \ is equidistant\n        // from two integers, the one you should return is the\
    \ one that is the\n        // farthest from zero. For example closest_integer(\"\
    14.5\") should\n        // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n        // >>> closestInteger((\"10\"))\n        // (10l)\n        //\
    \ >>> closestInteger((\"15.3\"))\n        // (15l)\n        // Note:\n       \
    \ // Rounding away from", '        return Math.round(Double.parseDouble(value));',
  '        return 0;', "        // >>> your code here <<<\n        return 0;", '        return
    0l;', "        // >>> closestInteger((\"10\"))\n        // (10l)\n        // >>>\
    \ closestInteger((\"15.3\"))\n        // (15l)\n        // >>> closestInteger((\"\
    -15.3\"))\n        // (-15l)\n        // >>> closestInteger((\"-15.6\"))\n   \
    \     // (-16l)\n        // >>> closestInteger((\"15.6\"))\n        // (16l)\n\
    \        // >>> closestInteger((\"15.5\"))\n        // (16l)\n        // >>> closestInteger((\"\
    -15.5\"))\n        // (-16l)\n        // >>> closestInteger((\"-15.4\"))\n   \
    \     // (-15l)\n        // >>> closestInteger((\"15.4\"))\n        // (15l)\n\
    \        // >>> closestInteger((\"15.0\"))\n        // (15l)\n        // >>> closestInteger((\"\
    -15.0\"))\n        // (-15l)\n        // >>> closestInteger((\"-15.1\"))\n   \
    \     // (-16l)\n        // >>> closestInteger((\"15.1\"))\n        // (16l)\n\
    \        // >>> closestInteger((\"-15.2\"))\n        // (-16l)\n        // >>>\
    \ closestInteger((\"15.2\"))\n        // (16l)\n        // >>> closestInteger((\"\
    -15.7\"))\n        // (-16l)\n        // >>> closestInteger((\"15.7\"))\n    \
    \    // (16l)\n        // >>> closestInteger((\"-15.8\"))\n        // (-16l)\n\
    \        // >>> closestInteger((\"15.8\"))\n        // (16l)\n        // >>> closestInteger((\"\
    -15.9\"))\n        // (-16l)\n        // >>> closestInteger((\"15.9\"))\n    \
    \    // (16l)\n        // >>> closestInteger((\"-15.0\"))\n        // (-15l)\n\
    \        // >>> closestInteger((\"15.0\"))\n        // (15l)\n        // >>> closestInteger((\"\
    -15.1\"))\n        // (-16l)\n        // >>> closestInteger((\"15.1\"))\n    \
    \    // (16l)\n        // >>> closestInteger((\"-15.2\"))\n        // (-16l)\n\
    \        // >>> closestInteger(", '        return Math.round(Double.parseDouble(value));',
  '        return Math.round(Double.parseDouble(value));', '        return 0l;', " \
    \       BigDecimal bd = new BigDecimal(value);\n        return bd.setScale(0,\
    \ BigDecimal.ROUND_HALF_UP).longValue();", "        // >>> closestInteger((\"\
    10\"))\n        // (10l)\n        // >>> closestInteger((\"15.3\"))\n        //\
    \ (15l)\n        // >>> closestInteger((\"-15.3\"))\n        // (-15l)\n     \
    \   // >>> closestInteger((\"-14.5\"))\n        // (-15l)\n        // >>> closestInteger((\"\
    14.5\"))\n        // (15l)\n        // >>> closestInteger((\"14.4\"))\n      \
    \  // (14l)\n        // >>> closestInteger((\"14.6\"))\n        // (15l)\n   \
    \     // >>> closestInteger((\"14.49\"))\n        // (14l)\n        // >>> closestInteger((\"\
    14.51\"))\n        // (15l)\n        // >>> closestInteger((\"14.500001\"))\n\
    \        // (15l)\n        // >>> closestInteger((\"14.4999999\"))\n        //\
    \ (14l)\n        // >>> closestInteger((\"14.500000000000001\"))\n        // (15l)\n\
    \        // >>> closestInteger((\"14.499999999999999\"))\n        // (14l)\n \
    \       // >>> closestInteger
  '        return 0;', "        BigDecimal bd = new BigDecimal(value);\n        return\
    \ bd.setScale(0, RoundingMode.HALF_UP).longValue();", "        // >>> closestInteger((\"\
    10\"))\n        // (10l)\n        // >>> closestInteger((\"15.3\"))\n        //\
    \ (15l)\n        // Note:\n        // Rounding away from zero means that if the\
    \ given number is equidistant\n        // from two integers, the one you should\
    \ return is the one that is the\n        // farthest from zero. For example closest_integer(\"\
    14.5\") should\n        // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n        // >>> closestInteger((\"10\"))\n        // (10l)\n        //\
    \ >>> closestInteger((\"15.3\"))\n        // (15l)\n        // Note:\n       \
    \ // Rounding away from zero means that if the given number is equidistant\n \
    \       // from two integers, the one you should return is the one that is the\n\
    \        // farthest from zero. For example closest_integer(\"14.5\") should\n\
    \        // return 15 and closest_integer(\"-14.5\") should return -15.\n    \
    \    // >>> closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from zero means that if the given number\
    \ is equidistant\n        // from two integers, the one you should return is the\
    \ one that is the\n        // farthest from zero. For example closest_integer(\"\
    14.5\") should\n        // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n        // >>> closestInteger((\"10\"))\n        // (10l)\n        //\
    \ >>> closestInteger((\"15.3\"))\n        // (15l)\n        // Note:\n       \
    \ // Rounding away from", '        return 0;', '        return 0;', "        double\
    \ d = Double.parseDouble(value);\n        long l = (long) d;\n        if (d -\
    \ l > 0.5) {\n            return l + 1;\n        } else {\n            return\
    \ l;\n        }", "        // Your code here\n        return 0l;", '        return
    0;', "        // >>> closestInteger((\"10\"))\n        // (10l)\n        // >>>\
    \ closestInteger((\"15.3\"))\n        // (15l)\n        // Note:\n        // Rounding\
    \ away from zero means that if the given number is equidistant\n        // from\
    \ two integers, the one you should return is the one that is the\n        // farthest\
    \ from zero. For example closest_integer(\"14.5\") should\n        // return 15\
    \ and closest_integer(\"-14.5\") should return -15.\n        // >>> closestInteger((\"\
    10\"))\n        // (10l)\n        // >>> closestInteger((\"15.3\"))\n        //\
    \ (15l)\n        // Note:\n        // Rounding away from zero means that if the\
    \ given number is equidistant\n        // from two integers, the one you should\
    \ return is the one that is the\n        // farthest from zero. For example closest_integer(\"\
    14.5\") should\n        // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n        // >>> closestInteger((\"10\"))\n        // (10l)\n        //\
    \ >>> closestInteger((\"15.3\"))\n        // (15l)\n        // Note:\n       \
    \ // Rounding away from zero means that if the given number is equidistant\n \
    \       // from two integers, the one you should return is the one that is the\n\
    \        // farthest from zero. For example closest_integer(\"14.5\") should\n\
    \        // return 15 and closest_integer(\"-14.5\") should return -15.\n    \
    \    // >>> closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from", "        // >>> closestInteger((\"\
    10\"))\n        // (10l)\n        // >>> closestInteger((\"15.3\"))\n        //\
    \ (15l)\n        // >>> closestInteger((\"15.7\"))\n        // (16l)\n       \
    \ // >>> closestInteger((\"-15.7\"))\n        // (-16l)\n        // >>> closestInteger((\"\
    -15.3\"))\n        // (-15l)\n        // >>> closestInteger((\"-15.0\"))\n   \
    \     // (-15l)\n        // >>> closestInteger((\"-15.1\"))\n        // (-16l)\n\
    \        // >>> closestInteger((\"-15.5\"))\n        // (-16l)\n        // >>>\
    \ closestInteger((\"-15.6\"))\n        // (-16l)\n        // >>> closestInteger((\"\
    -15.9\"))\n        // (-16l)\n        // >>> closestInteger
  "        // >>> closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        return 0;", "        // Your code here\n\
    \        return 0;", "        // >>> closestInteger((\"10\"))\n        // (10l)\n\
    \        // >>> closestInteger((\"15.3\"))\n        // (15l)\n        // Note:\n\
    \        // Rounding away from zero means that if the given number is equidistant\n\
    \        // from two integers, the one you should return is the one that is the\n\
    \        // farthest from zero. For example closest_integer(\"14.5\") should\n\
    \        // return 15 and closest_integer(\"-14.5\") should return -15.\n    \
    \    // >>> closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from zero means that if the given number\
    \ is equidistant\n        // from two integers, the one you should return is the\
    \ one that is the\n        // farthest from zero. For example closest_integer(\"\
    14.5\") should\n        // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n        // >>> closestInteger((\"10\"))\n        // (10l)\n        //\
    \ >>> closestInteger((\"15.3\"))\n        // (15l)\n        // Note:\n       \
    \ // Rounding away from zero means that if the given number is equidistant\n \
    \       // from two integers, the one you should return is the one that is the\n\
    \        // farthest from zero. For example closest_integer(\"14.5\") should\n\
    \        // return 15 and closest_integer(\"-14.5\") should return -15.\n    \
    \    // >>> closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from",
  "        // >>> closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // >>> closestInteger((\"15.6\"))\n      \
    \  // (16l)\n        // >>> closestInteger((\"-15.3\"))\n        // (-15l)\n \
    \       // >>> closestInteger((\"-15.6\"))\n        // (-16l)\n        // >>>\
    \ closestInteger((\"-15.0\"))\n        // (-15l)\n        // >>> closestInteger((\"\
    -15.1\"))\n        // (-15l)\n        // >>> closestInteger((\"-15.5\"))\n   \
    \     // (-16l)\n        // >>> closestInteger((\"-15.9\"))\n        // (-16l)\n\
    \        // >>> closestInteger((\"-15.99\"))\n        // (-16l)\n        // >>>\
    \ closestInteger((\"-15.9999\"))\n        // (-16l)\n        // >>> closestInteger((\"\
    -15.999999\"))\n        // (-16l)\n        // >>> closestInteger((\"-15.99999999\"\
    ))\n        // (-16l)\n        // >>> closestInteger((\"-15.9999999999\"))\n \
    \       // (-16l)\n        // >>> closestInteger((\"-15.999999999999\"))\n   \
    \     // (-16l)\n        // >>> closestInteger((\"-15.99999999999999\"))\n   \
    \     // (-16l)\n        // >>> closestInteger((\"-15.9999999999999999\"))\n \
    \       // (-16l)\n        // >>> closestInteger((\"-15.999999999999999999\"))\n\
    \        // (-16l)\n        // >>> closestInteger((\"-15.99999999999999999999\"\
    ))\n        // (-16l)\n        // >>> closestInteger((\"-15.9999999999999999999999\"\
    ))\n        // (-16l)\n        // >>> closestInteger((\"-15.999999999999999999999999\"\
    ))\n        // (-16l)\n        // >>> closestInteger((\"-15.99999999999999999999999999\"\
    ))\n        // (-16l)\n        // >>> closestInteger((\"-15.9999999999999999999999999999\"\
    ))\n        // (-16l)\n        // >>> closestInteger((\"-15.9999999999999999",
  "        // >>> closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // >>> closestInteger((\"14.5\"))\n      \
    \  // (15l)\n        // >>> closestInteger((\"-14.5\"))\n        // (-15l)\n \
    \       // >>> closestInteger((\"-14.6\"))\n        // (-15l)\n        // >>>\
    \ closestInteger((\"-14.4\"))\n        // (-14l)\n        // >>> closestInteger((\"\
    -14.0\"))\n        // (-14l)\n        // >>> closestInteger((\"-14.1\"))\n   \
    \     // (-14l)\n        // >>> closestInteger((\"-14.2\"))\n        // (-14l)\n\
    \        // >>> closestInteger((\"-14.3\"))\n        // (-14l)\n        // >>>\
    \ closestInteger((\"-14.4\"))\n        // (-14l)\n        // >>> closestInteger((\"\
    -14.5\"))\n        // (-15l)\n        // >>> closestInteger((\"-14.6\"))\n   \
    \     // (-15l)\n        // >>> closestInteger((\"-14.7\"))\n        // (-15l)\n\
    \        // >>> closestInteger((\"-14.8\"))\n        // (-15l)\n        // >>>\
    \ closestInteger((\"-14.9\"))\n        // (-15l)\n        // >>> closestInteger((\"\
    -15.0\"))\n        // (-15l)\n        // >>> closestInteger((\"-15.1\"))\n   \
    \     // (-15l)\n        // >>> closestInteger((\"-15.2\"))\n        // (-15l)\n\
    \        // >>> closestInteger((\"-15.3\"))\n        // (-15l)\n        // >>>\
    \ closestInteger((\"-15.4\"))\n        // (-15l)\n        // >>> closestInteger((\"\
    -15.5\"))\n        // (-16l)\n        // >>> closestInteger((\"-15.6\"))\n   \
    \     // (-16l)\n        // >>> closestInteger((\"-15.7\"))\n        // (-16l)\n\
    \        // >>> closestInteger((\"-15.8\"))\n        // (-16l)\n        // >>>\
    \ closestInteger((\"-15.9\"))\n        // (-", "        // >>> closestInteger((\"\
    10\"))\n        // (10l)\n        // >>> closestInteger((\"15.3\"))\n        //\
    \ (15l)\n        // >>> closestInteger((\"14.5\"))\n        // (15l)\n       \
    \ // >>> closestInteger((\"-14.5\"))\n        // (-15l)\n        // >>> closestInteger((\"\
    -14.6\"))\n        // (-15l)\n        // >>> closestInteger((\"-14.4\"))\n   \
    \     // (-14l)\n        // >>> closestInteger((\"-14.0\"))\n        // (-14l)\n\
    \        // >>> closestInteger((\"-14.1\"))\n        // (-14l)\n        // >>>\
    \ closestInteger((\"-14.2\"))\n        // (-14l)\n        // >>> closestInteger((\"\
    -14.3\"))\n        // (-14l)\n        // >>> closestInteger((\"-14.4\"))\n   \
    \     // (-14l)\n        // >>> closestInteger((\"-14.5\"))\n        // (-15l)\n\
    \        // >>> closestInteger((\"-14.6\"))\n        // (-15l)\n        // >>>\
    \ closestInteger((\"-14.7\"))\n        // (-15l)\n        // >>> closestInteger((\"\
    -14.8\"))\n        // (-15l)\n        // >>> closestInteger((\"-14.9\"))\n   \
    \     // (-15l)\n        // >>> closestInteger((\"-15.0\"))\n        // (-15l)\n\
    \        // >>> closestInteger((\"-15.1\"))\n        // (-15l)\n        // >>>\
    \ closestInteger((\"-15.2\"))\n        // (-15l)\n        // >>> closestInteger((\"\
    -15.3\"))\n        // (-15l)\n        // >>> closestInteger((\"-15.4\"))\n   \
    \     // (-15l)\n        // >>> closestInteger((\"-15.5\"))\n        // (-16l)\n\
    \        // >>> closestInteger((\"-15.6\"))\n        // (-16l)\n        // >>>\
    \ closestInteger((\"-15.7\"))\n        // (-16l)\n        // >>> closestInteger((\"\
    -15.8\"))\n        // (-16l)\n        // >>> closestInteger((\"-15.9\"))\n   \
    \     // (-", '        return 0;', '        return 0;', "        double d = Double.parseDouble(value);\n\
    \        return (long) Math.round(d);", '        return 0;', "        double d\
    \ = Double.parseDouble(value);\n        long l = Math.round(d);\n        return\
    \ l;", "        // >>> closestInteger((\"10\"))\n        // (10l)\n        //\
    \ >>> closestInteger((\"15.3\"))\n        // (15l)\n        // Note:\n       \
    \ // Rounding away from zero means that if the given number is equidistant\n \
    \       // from two integers, the one you should return is the one that is the\n\
    \        // farthest from zero. For example closest_integer(\"14.5\") should\n\
    \        // return 15 and closest_integer(\"-14.5\") should return -15.\n    \
    \    // >>> closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from zero means that if the given number\
    \ is equidistant\n        // from two integers, the one you should return is the\
    \ one that is the\n        // farthest from zero. For example closest_integer(\"\
    14.5\") should\n        // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n        // >>> closestInteger((\"10\"))\n        // (10l)\n        //\
    \ >>> closestInteger((\"15.3\"))\n        // (15l)\n        // Note:\n       \
    \ // Rounding away from zero means that if the given number is equidistant\n \
    \       // from two integers, the one you should return is the one that is the\n\
    \        // farthest from zero. For example closest_integer(\"14.5\") should\n\
    \        // return 15 and closest_integer(\"-14.5\") should return -15.\n    \
    \    // >>> closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from",
  "        double d = Double.parseDouble(value);\n        return (long) Math.round(d);",
  "        // >>> closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        return 0;", "        // >>> closestInteger((\"\
    10\"))\n        // (10l)\n        // >>> closestInteger((\"15.3\"))\n        //\
    \ (15l)\n        // >>> closestInteger((\"14.5\"))\n        // (15l)\n       \
    \ // >>> closestInteger((\"-14.5\"))\n        // (-15l)\n        // >>> closestInteger((\"\
    -14.6\"))\n        // (-15l)\n        // >>> closestInteger((\"-14.4\"))\n   \
    \     // (-14l)\n        // >>> closestInteger((\"14.4\"))\n        // (14l)\n\
    \        // >>> closestInteger((\"14.6\"))\n        // (15l)\n        // >>> closestInteger((\"\
    14.5\"))\n        // (15l)\n        // >>> closestInteger((\"14.4\"))\n      \
    \  // (14l)\n        // >>> closestInteger((\"14.6\"))\n        // (15l)\n   \
    \     // >>> closestInteger((\"14.5\"))\n        // (15l)\n        // >>> closestInteger((\"\
    14.4\"))\n        // (14l)\n        // >>> closestInteger((\"14.6\"))\n      \
    \  // (15l)\n        // >>> closestInteger((\"14.5\"))\n        // (15l)\n   \
    \     // >>> closestInteger((\"14.4\"))\n        // (14l)\n        // >>> closestInteger((\"\
    14.6\"))\n        // (15l)\n        // >>> closestInteger((\"14.5\"))\n      \
    \  // (15l)\n        // >>> closestInteger((\"14.4\"))\n        // (14l)\n   \
    \     // >>> closestInteger((\"14.6\"))\n        // (15l)\n        // >>> closestInteger((\"\
    14.5\"))\n        // (15l)\n        // >>> closestInteger((\"14.4\"))\n      \
    \  // (14l)\n        // >>> closestInteger((\"14.6\"))\n        // (15l)\n   \
    \     // >>> closestInteger((\"14.5\"))\n        // (15l)\n        // >>> closestInteger((\"\
    14.4\"))\n        // (14l)\n        // >>> closestInteger((\"14.6\"))\n      \
    \  // (15l)\n        // >>> closestInteger((\"14.5\"))\n        // (15", "   \
    \     // >>> closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        return 0;", '        return 0;', "      \
    \  // >>> closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from zero means that if the given number\
    \ is equidistant\n        // from two integers, the one you should return is the\
    \ one that is the\n        // farthest from zero. For example closest_integer(\"\
    14.5\") should\n        // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n        // >>> closestInteger((\"10\"))\n        // (10l)\n        //\
    \ >>> closestInteger((\"15.3\"))\n        // (15l)\n        // Note:\n       \
    \ // Rounding away from zero means that if the given number is equidistant\n \
    \       // from two integers, the one you should return is the one that is the\n\
    \        // farthest from zero. For example closest_integer(\"14.5\") should\n\
    \        // return 15 and closest_integer(\"-14.5\") should return -15.\n    \
    \    // >>> closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from", "        // >>> closestInteger((\"\
    10\"))\n        // (10l)\n        // >>> closestInteger((\"15.3\"))\n        //\
    \ (15l)\n        // Note:\n        // Rounding away from zero means that if the\
    \ given number is equidistant\n        // from two integers, the one you should\
    \ return is the one that is the\n        // farthest from zero. For example closest_integer(\"\
    14.5\") should\n        // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n        // >>> closestInteger((\"10\"))\n        // (10l)\n        //\
    \ >>> closestInteger((\"15.3\"))\n        // (15l)\n        // Note:\n       \
    \ // Rounding away from zero means that if the given number is equidistant\n \
    \       // from two integers, the one you should return is the one that is the\n\
    \        // farthest from zero. For example closest_integer(\"14.5\") should\n\
    \        // return 15 and closest_integer(\"-14.5\") should return -15.\n    \
    \    // >>> closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from zero means that if the given number\
    \ is equidistant\n        // from two integers, the one you should return is the\
    \ one that is the\n        // farthest from zero. For example closest_integer(\"\
    14.5\") should\n        // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n        // >>> closestInteger((\"10\"))\n        // (10l)\n        //\
    \ >>> closestInteger((\"15.3\"))\n        // (15l)\n        // Note:\n       \
    \ // Rounding away from", "        // >>> closestInteger((\"10\"))\n        //\
    \ (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n       \
    \ // >>> closestInteger((\"14.5\"))\n        // (15l)\n        // >>> closestInteger((\"\
    -14.5\"))\n        // (-15l)\n        // >>> closestInteger((\"-15.3\"))\n   \
    \     // (-15l)\n        // >>> closestInteger((\"-10\"))\n        // (-10l)\n\
    \        // >>> closestInteger((\"-5\"))\n        // (-5l)\n        // >>> closestInteger((\"\
    0\"))\n        // (0l)\n        // >>> closestInteger((\"5\"))\n        // (5l)\n\
    \        // >>> closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // >>> closestInteger((\"14.5\"))\n      \
    \  // (15l)\n        // >>> closestInteger((\"-14.5\"))\n        // (-15l)\n \
    \       // >>> closestInteger((\"-15.3\"))\n        // (-15l)\n        // >>>\
    \ closestInteger((\"-10\"))\n        // (-10l)\n        // >>> closestInteger((\"\
    -5\"))\n        // (-5l)\n        // >>> closestInteger((\"0\"))\n        // (0l)\n\
    \        // >>> closestInteger((\"5\"))\n        // (5l)\n        // >>> closestInteger((\"\
    10\"))\n        // (10l)\n        // >>> closestInteger((\"15.3\"))\n        //\
    \ (15l)\n        // >>> closestInteger((\"14.5\"))\n        // (15l)\n       \
    \ // >>> closestInteger((\"-14.5\"))\n        // (-15l)\n        // >>> closestInteger((\"\
    -15.3\"))\n        // (-15l)\n        // >>> closestInteger((\"-10\"))\n     \
    \   // (-10l)\n        // >>> closestInteger((\"-5\"))\n        // (-5l)\n   \
    \     // >>> closestInteger((\"0\"))\n        // (0l)\n        // >>> closestInteger((\"\
    5\"))\n        // (5l)\n        // >>> closestInteger((\"10\"))\n        // (10l)",
  '        return 0;', "        // >>> closestInteger((\"10\"))\n        // (10l)\n\
    \        // >>> closestInteger((\"15.3\"))\n        // (15l)\n        // Note:\n\
    \        // Rounding away from zero means that if the given number is equidistant\n\
    \        // from two integers, the one you should return is the one that is the\n\
    \        // farthest from zero. For example closest_integer(\"14.5\") should\n\
    \        // return 15 and closest_integer(\"-14.5\") should return -15.\n    \
    \    // >>> closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from zero means that if the given number\
    \ is equidistant\n        // from two integers, the one you should return is the\
    \ one that is the\n        // farthest from zero. For example closest_integer(\"\
    14.5\") should\n        // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n        // >>> closestInteger((\"10\"))\n        // (10l)\n        //\
    \ >>> closestInteger((\"15.3\"))\n        // (15l)\n        // Note:\n       \
    \ // Rounding away from zero means that if the given number is equidistant\n \
    \       // from two integers, the one you should return is the one that is the\n\
    \        // farthest from zero. For example closest_integer(\"14.5\") should\n\
    \        // return 15 and closest_integer(\"-14.5\") should return -15.\n    \
    \    // >>> closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from",
  '        return 0;', "        BigDecimal bd = new BigDecimal(value);\n        bd\
    \ = bd.setScale(0, RoundingMode.HALF_UP);\n        return bd.longValue();", '        return
    0;', "        // >>> your code here <<<\n        return 0;", "        // >>> closestInteger((\"\
    10\"))\n        // (10l)\n        // >>> closestInteger((\"15.3\"))\n        //\
    \ (15l)\n        // Note:\n        // Rounding away from zero means that if the\
    \ given number is equidistant\n        // from two integers, the one you should\
    \ return is the one that is the\n        // farthest from zero. For example closest_integer(\"\
    14.5\") should\n        // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n        // >>> closestInteger((\"10\"))\n        // (10l)\n        //\
    \ >>> closestInteger((\"15.3\"))\n        // (15l)\n        // Note:\n       \
    \ // Rounding away from zero means that if the given number is equidistant\n \
    \       // from two integers, the one you should return is the one that is the\n\
    \        // farthest from zero. For example closest_integer(\"14.5\") should\n\
    \        // return 15 and closest_integer(\"-14.5\") should return -15.\n    \
    \    // >>> closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from zero means that if the given number\
    \ is equidistant\n        // from two integers, the one you should return is the\
    \ one that is the\n        // farthest from zero. For example closest_integer(\"\
    14.5\") should\n        // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n        // >>> closestInteger((\"10\"))\n        // (10l)\n        //\
    \ >>> closestInteger((\"15.3\"))\n        // (15l)\n        // Note:\n       \
    \ // Rounding away from", "        // >>> closestInteger((\"10\"))\n        //\
    \ (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n       \
    \ // Note:\n        // Rounding away from zero means that if the given number\
    \ is equidistant\n        // from two integers, the one you should return is the\
    \ one that is the\n        // farthest from zero. For example closest_integer(\"\
    14.5\") should\n        // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n        // >>> closestInteger((\"10\"))\n        // (10l)\n        //\
    \ >>> closestInteger((\"15.3\"))\n        // (15l)\n        // Note:\n       \
    \ // Rounding away from zero means that if the given number is equidistant\n \
    \       // from two integers, the one you should return is the one that is the\n\
    \        // farthest from zero. For example closest_integer(\"14.5\") should\n\
    \        // return 15 and closest_integer(\"-14.5\") should return -15.\n    \
    \    // >>> closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from zero means that if the given number\
    \ is equidistant\n        // from two integers, the one you should return is the\
    \ one that is the\n        // farthest from zero. For example closest_integer(\"\
    14.5\") should\n        // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n        // >>> closestInteger((\"10\"))\n        // (10l)\n        //\
    \ >>> closestInteger((\"15.3\"))\n        // (15l)\n        // Note:\n       \
    \ // Rounding away from", "        // >>> closestInteger((\"10\"))\n        //\
    \ (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n       \
    \ // >>> closestInteger((\"14.5\"))\n        // (15l)\n        // >>> closestInteger((\"\
    -14.5\"))\n        // (-15l)\n        // >>> closestInteger((\"-14.6\"))\n   \
    \     // (-15l)\n        // >>> closestInteger((\"-14.4\"))\n        // (-14l)\n\
    \        // >>> closestInteger((\"-14.0\"))\n        // (-14l)\n        // >>>\
    \ closestInteger((\"-14.1\"))\n        // (-14l)\n        // >>> closestInteger((\"\
    -14.2\"))\n        // (-14l)\n        // >>> closestInteger((\"-14.3\"))\n   \
    \     // (-14l)\n        // >>> closestInteger((\"-14.4\"))\n        // (-14l)\n\
    \        // >>> closestInteger((\"-14.5\"))\n        // (-15l)\n        // >>>\
    \ closestInteger((\"-14.6\"))\n        // (-15l)\n        // >>> closestInteger((\"\
    -14.7\"))\n        // (-15l)\n        // >>> closestInteger((\"-14.8\"))\n   \
    \     // (-15l)\n        // >>> closestInteger((\"-14.9\"))\n        // (-15l)\n\
    \        // >>> closestInteger((\"-15.0\"))\n        // (-15l)\n        // >>>\
    \ closestInteger((\"-15.1\"))\n        // (-15l)\n        // >>> closestInteger((\"\
    -15.2\"))\n        // (-15l)\n        // >>> closestInteger((\"-15.3\"))\n   \
    \     // (-15l)\n        // >>> closestInteger((\"-15.4\"))\n        // (-15l)\n\
    \        // >>> closestInteger((\"-15.5\"))\n        // (-16l)\n        // >>>\
    \ closestInteger((\"-15.6\"))\n        // (-16l)\n        // >>> closestInteger((\"\
    -15.7\"))\n        // (-16l)\n        // >>> closestInteger((\"-15.8\"))\n   \
    \     // (-16l)\n        // >>> closestInteger((\"-15.9\"))\n        // (-", " \
    \       // >>> closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // >>> closestInteger((\"15.5\"))\n      \
    \  // (16l)\n        // >>> closestInteger((\"-15.5\"))\n        // (-16l)\n \
    \       // >>> closestInteger((\"-15.4\"))\n        // (-15l)\n        // >>>\
    \ closestInteger((\"-15.6\"))\n        // (-16l)\n        // >>> closestInteger((\"\
    -15.6\"))\n        // (-16l)\n        // >>> closestInteger((\"-15.6\"))\n   \
    \     // (-16l)\n        // >>> closestInteger((\"-15.6\"))\n        // (-16l)\n\
    \        // >>> closestInteger((\"-15.6\"))\n        // (-16l)\n        // >>>\
    \ closestInteger((\"-15.6\"))\n        // (-16l)\n        // >>> closestInteger((\"\
    -15.6\"))\n        // (-16l)\n        // >>> closestInteger((\"-15.6\"))\n   \
    \     // (-16l)\n        // >>> closestInteger((\"-15.6\"))\n        // (-16l)\n\
    \        // >>> closestInteger((\"-15.6\"))\n        // (-16l)\n        // >>>\
    \ closestInteger((\"-15.6\"))\n        // (-16l)\n        // >>> closestInteger((\"\
    -15.6\"))\n        // (-16l)\n        // >>> closestInteger((\"-15.6\"))\n   \
    \     // (-16l)\n        // >>> closestInteger((\"-15.6\"))\n        // (-16l)\n\
    \        // >>> closestInteger((\"-15.6\"))\n        // (-16l)\n        // >>>\
    \ closestInteger((\"-15.6\"))\n        // (-16l)\n        // >>> closestInteger((\"\
    -15.6\"))\n        // (-16l)\n        // >>> closestInteger((\"-15.6\"))\n   \
    \     // (-16l)\n        // >>> closestInteger((\"-15.6\"))\n        // (-16l)\n\
    \        // >>> closestInteger((\"-15.6\"))\n        // (-16l)\n        // >>>\
    \ closestInteger((\"-15.6\"))\n        // (-", "        // >>> closestInteger((\"\
    10\"))\n        // (10l)\n        // >>> closestInteger((\"15.3\"))\n        //\
    \ (15l)\n        // >>> closestInteger((\"-15.3\"))\n        // (-15l)\n     \
    \   // >>> closestInteger((\"-15.6\"))\n        // (-16l)\n        // >>> closestInteger((\"\
    -15.5\"))\n        // (-16l)\n        // >>> closestInteger((\"-15.4\"))\n   \
    \     // (-15l)\n        // >>> closestInteger((\"-15.2\"))\n        // (-15l)\n\
    \        // >>> closestInteger((\"-15.0\"))\n        // (-15l)\n        // >>>\
    \ closestInteger((\"-14.9\"))\n        // (-15l)\n        // >>> closestInteger((\"\
    -14.8\"))\n        // (-15l)\n        // >>> closestInteger((\"-14.7\"))\n   \
    \     // (-15l)\n        // >>> closestInteger((\"-14.6\"))\n        // (-15l)\n\
    \        // >>> closestInteger((\"-14.5\"))\n        // (-15l)\n        // >>>\
    \ closestInteger((\"-14.4\"))\n        // (-15l)\n        // >>> closestInteger((\"\
    -14.3\"))\n        // (-15l)\n        // >>> closestInteger((\"-14.2\"))\n   \
    \     // (-15l)\n        // >>> closestInteger((\"-14.1\"))\n        // (-15l)\n\
    \        // >>> closestInteger((\"-14.0\"))\n        // (-14l)\n        // >>>\
    \ closestInteger((\"-13.9\"))\n        // (-14l)\n        // >>> closestInteger((\"\
    -13.8\"))\n        // (-14l)\n        // >>> closestInteger((\"-13.7\"))\n   \
    \     // (-14l)\n        // >>> closestInteger((\"-13.6\"))\n        // (-14l)\n\
    \        // >>> closestInteger((\"-13.5\"))\n        // (-14l)\n        // >>>\
    \ closestInteger((\"-13.4\"))\n        // (-14l)\n        // >>> closestInteger((\"\
    -13.3\"))\n        // (-14l)\n        // >>> closestInteger((\"-13.2\"))\n   \
    \     //", '        return 0;', '        return Math.round(Double.parseDouble(value));',
  "        BigDecimal bd = new BigDecimal(value);\n        return bd.setScale(0, RoundingMode.HALF_UP).longValue();",
  "        // >>> your code here <<<\n        return 0;", '        return 0;', '        return
    0;', '        return 0;', "        // Your code here\n        return 0;", '        return
    0;', '        return 0;', "        // >>> closestInteger((\"10\"))\n        //\
    \ (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n       \
    \ // Note:\n        // Rounding away from zero means that if the given number\
    \ is equidistant\n        // from two integers, the one you should return is the\
    \ one that is the\n        // farthest from zero. For example closest_integer(\"\
    14.5\") should\n        // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n        // >>> closestInteger((\"10\"))\n        // (10l)\n        //\
    \ >>> closestInteger((\"15.3\"))\n        // (15l)\n        // Note:\n       \
    \ // Rounding away from zero means that if the given number is equidistant\n \
    \       // from two integers, the one you should return is the one that is the\n\
    \        // farthest from zero. For example closest_integer(\"14.5\") should\n\
    \        // return 15 and closest_integer(\"-14.5\") should return -15.\n    \
    \    // >>> closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from zero means that if the given number\
    \ is equidistant\n        // from two integers, the one you should return is the\
    \ one that is the\n        // farthest from zero. For example closest_integer(\"\
    14.5\") should\n        // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n        // >>> closestInteger((\"10\"))\n        // (10l)\n        //\
    \ >>> closestInteger((\"15.3\"))\n        // (15l)\n        // Note:\n       \
    \ // Rounding away from", "        // >>> closestInteger((\"10\"))\n        //\
    \ (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n       \
    \ // Note:\n        // Rounding away from zero means that if the given number\
    \ is equidistant\n        // from two integers, the one you should return is the\
    \ one that is the\n        // farthest from zero. For example closest_integer(\"\
    14.5\") should\n        // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n        // >>> closestInteger((\"10\"))\n        // (10l)\n        //\
    \ >>> closestInteger((\"15.3\"))\n        // (15l)\n        // Note:\n       \
    \ // Rounding away from zero means that if the given number is equidistant\n \
    \       // from two integers, the one you should return is the one that is the\n\
    \        // farthest from zero. For example closest_integer(\"14.5\") should\n\
    \        // return 15 and closest_integer(\"-14.5\") should return -15.\n    \
    \    // >>> closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from zero means that if the given number\
    \ is equidistant\n        // from two integers, the one you should return is the\
    \ one that is the\n        // farthest from zero. For example closest_integer(\"\
    14.5\") should\n        // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n        // >>> closestInteger((\"10\"))\n        // (10l)\n        //\
    \ >>> closestInteger((\"15.3\"))\n        // (15l)\n        // Note:\n       \
    \ // Rounding away from", '        return 0;', "        // >>> closestInteger((\"\
    10\"))\n        // (10l)\n        // >>> closestInteger((\"15.3\"))\n        //\
    \ (15l)\n        // Note:\n        // Rounding away from zero means that if the\
    \ given number is equidistant\n        // from two integers, the one you should\
    \ return is the one that is the\n        // farthest from zero. For example closest_integer(\"\
    14.5\") should\n        // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n        // >>> closestInteger((\"10\"))\n        // (10l)\n        //\
    \ >>> closestInteger((\"15.3\"))\n        // (15l)\n        // Note:\n       \
    \ // Rounding away from zero means that if the given number is equidistant\n \
    \       // from two integers, the one you should return is the one that is the\n\
    \        // farthest from zero. For example closest_integer(\"14.5\") should\n\
    \        // return 15 and closest_integer(\"-14.5\") should return -15.\n    \
    \    // >>> closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from zero means that if the given number\
    \ is equidistant\n        // from two integers, the one you should return is the\
    \ one that is the\n        // farthest from zero. For example closest_integer(\"\
    14.5\") should\n        // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n        // >>> closestInteger((\"10\"))\n        // (10l)\n        //\
    \ >>> closestInteger((\"15.3\"))\n        // (15l)\n        // Note:\n       \
    \ // Rounding away from", '        return 0l;', "        // >>> closestInteger((\"\
    10\"))\n        // (10l)\n        // >>> closestInteger((\"15.3\"))\n        //\
    \ (15l)\n        // Note:\n        // Rounding away from zero means that if the\
    \ given number is equidistant\n        // from two integers, the one you should\
    \ return is the one that is the\n        // farthest from zero. For example closest_integer(\"\
    14.5\") should\n        // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n        // >>> closestInteger((\"10\"))\n        // (10l)\n        //\
    \ >>> closestInteger((\"15.3\"))\n        // (15l)\n        // Note:\n       \
    \ // Rounding away from zero means that if the given number is equidistant\n \
    \       // from two integers, the one you should return is the one that is the\n\
    \        // farthest from zero. For example closest_integer(\"14.5\") should\n\
    \        // return 15 and closest_integer(\"-14.5\") should return -15.\n    \
    \    // >>> closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from zero means that if the given number\
    \ is equidistant\n        // from two integers, the one you should return is the\
    \ one that is the\n        // farthest from zero. For example closest_integer(\"\
    14.5\") should\n        // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n        // >>> closestInteger((\"10\"))\n        // (10l)\n        //\
    \ >>> closestInteger((\"15.3\"))\n        // (15l)\n        // Note:\n       \
    \ // Rounding away from", '        return 0;', "        double d = Double.parseDouble(value);\n\
    \        if (d > 0) {\n            return (long)Math.ceil(d);\n        } else\
    \ {\n            return (long)Math.floor(d);\n        }", "        // >>> closestInteger((\"\
    10\"))\n        // (10l)\n        // >>> closestInteger((\"15.3\"))\n        //\
    \ (15l)\n        // Note:\n        // Rounding away from zero means that if the\
    \ given number is equidistant\n        // from two integers, the one you should\
    \ return is the one that is the\n        // farthest from zero. For example closest_integer(\"\
    14.5\") should\n        // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n        // >>> closestInteger((\"10\"))\n        // (10l)\n        //\
    \ >>> closestInteger((\"15.3\"))\n        // (15l)\n        // Note:\n       \
    \ // Rounding away from zero means that if the given number is equidistant\n \
    \       // from two integers, the one you should return is the one that is the\n\
    \        // farthest from zero. For example closest_integer(\"14.5\") should\n\
    \        // return 15 and closest_integer(\"-14.5\") should return -15.\n    \
    \    // >>> closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from zero means that if the given number\
    \ is equidistant\n        // from two integers, the one you should return is the\
    \ one that is the\n        // farthest from zero. For example closest_integer(\"\
    14.5\") should\n        // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n        // >>> closestInteger((\"10\"))\n        // (10l)\n        //\
    \ >>> closestInteger((\"15.3\"))\n        // (15l)\n        // Note:\n       \
    \ // Rounding away from", '        return 0;', "        // >>> closestInteger((\"\
    10\"))\n        // (10l)\n        // >>> closestInteger((\"15.3\"))\n        //\
    \ (15l)\n        // Note:\n        // Rounding away from zero means that if the\
    \ given number is equidistant\n        // from two integers, the one you should\
    \ return is the one that is the\n        // farthest from zero. For example closest_integer(\"\
    14.5\") should\n        // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n        // >>> closestInteger((\"10\"))\n        // (10l)\n        //\
    \ >>> closestInteger((\"15.3\"))\n        // (15l)\n        // Note:\n       \
    \ // Rounding away from zero means that if the given number is equidistant\n \
    \       // from two integers, the one you should return is the one that is the\n\
    \        // farthest from zero. For example closest_integer(\"14.5\") should\n\
    \        // return 15 and closest_integer(\"-14.5\") should return -15.\n    \
    \    // >>> closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from zero means that if the given number\
    \ is equidistant\n        // from two integers, the one you should return is the\
    \ one that is the\n        // farthest from zero. For example closest_integer(\"\
    14.5\") should\n        // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n        // >>> closestInteger((\"10\"))\n        // (10l)\n        //\
    \ >>> closestInteger((\"15.3\"))\n        // (15l)\n        // Note:\n       \
    \ // Rounding away from", '        return 0;', "        double d = Double.parseDouble(value);\n\
    \        long l = Math.round(d);\n        return l;", '        return 0;', " \
    \       // >>> closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        return (long) Math.round(Double.parseDouble(value));",
  "        // >>> closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // >>> closestInteger((\"-15.3\"))\n     \
    \   // (-15l)\n        // >>> closestInteger((\"-15.6\"))\n        // (-16l)\n\
    \        // >>> closestInteger((\"-15.5\"))\n        // (-16l)\n        // >>>\
    \ closestInteger((\"-15.4\"))\n        // (-15l)\n        // >>> closestInteger((\"\
    -15.1\"))\n        // (-15l)\n        // >>> closestInteger((\"-15.0\"))\n   \
    \     // (-15l)\n        // >>> closestInteger((\"-14.9\"))\n        // (-15l)\n\
    \        // >>> closestInteger((\"-14.6\"))\n        // (-15l)\n        // >>>\
    \ closestInteger((\"-14.5\"))\n        // (-15l)\n        // >>> closestInteger((\"\
    -14.4\"))\n        // (-14l)\n        // >>> closestInteger((\"-14.1\"))\n   \
    \     // (-14l)\n        // >>> closestInteger((\"-14.0\"))\n        // (-14l)\n\
    \        // >>> closestInteger((\"-13.9\"))\n        // (-14l)\n        // >>>\
    \ closestInteger((\"-13.6\"))\n        // (-14l)\n        // >>> closestInteger((\"\
    -13.5\"))\n        // (-14l)\n        // >>> closestInteger((\"-13.4\"))\n   \
    \     // (-13l)\n        // >>> closestInteger((\"-13.1\"))\n        // (-13l)\n\
    \        // >>> closestInteger((\"-13.0\"))\n        // (-13l)\n        // >>>\
    \ closestInteger((\"-12.9\"))\n        // (-13l)\n        // >>> closestInteger((\"\
    -12.6\"))\n        // (-13l)\n        // >>> closestInteger((\"-12.5\"))\n   \
    \     // (-13l)\n        // >>> closestInteger((\"-12.4\"))\n        // (-12l)\n\
    \        // >>> closestInteger((\"-12.1\"))\n        // (-12l)\n        // >>>\
    \ closestInteger((\"-12.0\"))\n        //", "        // >>> closestInteger((\"\
    10\"))\n        // (10l)\n        // >>> closestInteger((\"15.3\"))\n        //\
    \ (15l)\n        // Note:\n        // Rounding away from zero means that if the\
    \ given number is equidistant\n        // from two integers, the one you should\
    \ return is the one that is the\n        // farthest from zero. For example closest_integer(\"\
    14.5\") should\n        // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n        // >>> closestInteger((\"10\"))\n        // (10l)\n        //\
    \ >>> closestInteger((\"15.3\"))\n        // (15l)\n        // Note:\n       \
    \ // Rounding away from zero means that if the given number is equidistant\n \
    \       // from two integers, the one you should return is the one that is the\n\
    \        // farthest from zero. For example closest_integer(\"14.5\") should\n\
    \        // return 15 and closest_integer(\"-14.5\") should return -15.\n    \
    \    // >>> closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from zero means that if the given number\
    \ is equidistant\n        // from two integers, the one you should return is the\
    \ one that is the\n        // farthest from zero. For example closest_integer(\"\
    14.5\") should\n        // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n        // >>> closestInteger((\"10\"))\n        // (10l)\n        //\
    \ >>> closestInteger((\"15.3\"))\n        // (15l)\n        // Note:\n       \
    \ // Rounding away from", "        // Your code here\n        return 0;", '        return
    Math.round(Double.parseDouble(value));', "        // >>> closestInteger((\"10\"\
    ))\n        // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n\
    \        // Note:\n        // Rounding away from zero means that if the given\
    \ number is equidistant\n        // from two integers, the one you should return\
    \ is the one that is the\n        // farthest from zero. For example closest_integer(\"\
    14.5\") should\n        // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n        BigDecimal bd = new BigDecimal(value);\n        return bd.setScale(0,\
    \ RoundingMode.HALF_UP).longValue();", '        return 0;', "        // Write\
    \ your code here\n        double d = Double.parseDouble(value);\n        long\
    \ l = Math.round(d);\n        return l;", "        // >>> closestInteger((\"10\"\
    ))\n        // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n\
    \        // Note:\n        // Rounding away from zero means that if the given\
    \ number is equidistant\n        // from two integers, the one you should return\
    \ is the one that is the\n        // farthest from zero. For example closest_integer(\"\
    14.5\") should\n        // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n        BigDecimal bd = new BigDecimal(value);\n        bd = bd.setScale(0,\
    \ RoundingMode.HALF_UP);\n        return bd.longValue();", "        // BEGIN SOLUTION\n\
    \        double d = Double.parseDouble(value);\n        long l = (long) d;\n \
    \       if (d - l >= 0.5) {\n            return l + 1;\n        } else {\n   \
    \         return l;\n        }\n        // END SOLUTION", "        double d =\
    \ Double.parseDouble(value);\n        return Math.round(d);", '        return
    0;', '        return 0;', "        // >>> closestInteger((\"10\"))\n        //\
    \ (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n       \
    \ // Note:\n        // Rounding away from zero means that if the given number\
    \ is equidistant\n        // from two integers, the one you should return is the\
    \ one that is the\n        // farthest from zero. For example closest_integer(\"\
    14.5\") should\n        // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n        // >>> closestInteger((\"10\"))\n        // (10l)\n        //\
    \ >>> closestInteger((\"15.3\"))\n        // (15l)\n        // Note:\n       \
    \ // Rounding away from zero means that if the given number is equidistant\n \
    \       // from two integers, the one you should return is the one that is the\n\
    \        // farthest from zero. For example closest_integer(\"14.5\") should\n\
    \        // return 15 and closest_integer(\"-14.5\") should return -15.\n    \
    \    // >>> closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from zero means that if the given number\
    \ is equidistant\n        // from two integers, the one you should return is the\
    \ one that is the\n        // farthest from zero. For example closest_integer(\"\
    14.5\") should\n        // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n        // >>> closestInteger((\"10\"))\n        // (10l)\n        //\
    \ >>> closestInteger((\"15.3\"))\n        // (15l)\n        // Note:\n       \
    \ // Rounding away from", '        return Math.round(Double.parseDouble(value));',
  "        // Your code here\n        return 0;", "        // >>> closestInteger((\"\
    10\"))\n        // (10l)\n        // >>> closestInteger((\"15.3\"))\n        //\
    \ (15l)\n        // Note:\n        // Rounding away from zero means that if the\
    \ given number is equidistant\n        // from two integers, the one you should\
    \ return is the one that is the\n        // farthest from zero. For example closest_integer(\"\
    14.5\") should\n        // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n        // >>> closestInteger((\"10\"))\n        // (10l)\n        //\
    \ >>> closestInteger((\"15.3\"))\n        // (15l)\n        // Note:\n       \
    \ // Rounding away from zero means that if the given number is equidistant\n \
    \       // from two integers, the one you should return is the one that is the\n\
    \        // farthest from zero. For example closest_integer(\"14.5\") should\n\
    \        // return 15 and closest_integer(\"-14.5\") should return -15.\n    \
    \    // >>> closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from zero means that if the given number\
    \ is equidistant\n        // from two integers, the one you should return is the\
    \ one that is the\n        // farthest from zero. For example closest_integer(\"\
    14.5\") should\n        // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n        // >>> closestInteger((\"10\"))\n        // (10l)\n        //\
    \ >>> closestInteger((\"15.3\"))\n        // (15l)\n        // Note:\n       \
    \ // Rounding away from", '        return 0;', '        return 0;', "        //\
    \ >>> your code here <<<\n        return 0;", "        BigDecimal bd = new BigDecimal(value);\n\
    \        return bd.setScale(0, BigDecimal.ROUND_HALF_UP).longValue();", "    \
    \    BigDecimal bd = new BigDecimal(value);\n        bd = bd.setScale(0, RoundingMode.HALF_UP);\n\
    \        return bd.longValue();", "        // Your code here\n        return 0;",
  "        // >>> closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // >>> closestInteger((\"15.5\"))\n      \
    \  // (16l)\n        // >>> closestInteger((\"-15.5\"))\n        // (-16l)\n \
    \       // >>> closestInteger((\"-15.6\"))\n        // (-16l)\n        // >>>\
    \ closestInteger((\"-15.4\"))\n        // (-15l)\n        // >>> closestInteger((\"\
    -15.0\"))\n        // (-15l)\n        // >>> closestInteger((\"-15.1\"))\n   \
    \     // (-15l)\n        // >>> closestInteger((\"-15.2\"))\n        // (-15l)\n\
    \        // >>> closestInteger((\"-15.3\"))\n        // (-15l)\n        // >>>\
    \ closestInteger((\"-15.4\"))\n        // (-15l)\n        // >>> closestInteger((\"\
    -15.5\"))\n        // (-16l)\n        // >>> closestInteger((\"-15.6\"))\n   \
    \     // (-16l)\n        // >>> closestInteger((\"-15.7\"))\n        // (-16l)\n\
    \        // >>> closestInteger((\"-15.8\"))\n        // (-16l)\n        // >>>\
    \ closestInteger((\"-15.9\"))\n        // (-16l)\n        // >>> closestInteger((\"\
    -15.0\"))\n        // (-15l)\n        // >>> closestInteger((\"-15.1\"))\n   \
    \     // (-15l)\n        // >>> closestInteger((\"-15.2\"))\n        // (-15l)\n\
    \        // >>> closestInteger((\"-15.3\"))\n        // (-15l)\n        // >>>\
    \ closestInteger((\"-15.4\"))\n        // (-15l)\n        // >>> closestInteger((\"\
    -15.5\"))\n        // (-16l)\n        // >>> closestInteger((\"-15.6\"))\n   \
    \     // (-16l)\n        // >>> closestInteger((\"-15.7\"))\n        // (-16l)\n\
    \        // >>> closestInteger((\"-15.8\"))\n        // (-16l)\n        // >>>\
    \ closestInteger((\"-15.9\"))\n        // (-", '        return 0;', "        //\
    \ >>> closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // >>> closestInteger((\"-15.3\"))\n     \
    \   // (-15l)\n        // >>> closestInteger((\"-15.5\"))\n        // (-16l)\n\
    \        // >>> closestInteger((\"-15.6\"))\n        // (-16l)\n        // >>>\
    \ closestInteger((\"-15.7\"))\n        // (-16l)\n        // >>> closestInteger((\"\
    -15.8\"))\n        // (-16l)\n        // >>> closestInteger((\"-15.9\"))\n   \
    \     // (-16l)\n        // >>> closestInteger((\"-16.0\"))\n        // (-16l)\n\
    \        // >>> closestInteger((\"-16.1\"))\n        // (-16l)\n        // >>>\
    \ closestInteger((\"-16.2\"))\n        // (-16l)\n        // >>> closestInteger((\"\
    -16.3\"))\n        // (-16l)\n        // >>> closestInteger((\"-16.4\"))\n   \
    \     // (-16l)\n        // >>> closestInteger((\"-16.5\"))\n        // (-16l)\n\
    \        // >>> closestInteger((\"-16.6\"))\n        // (-16l)\n        // >>>\
    \ closestInteger((\"-16.7\"))\n        // (-16l)\n        // >>> closestInteger((\"\
    -16.8\"))\n        // (-16l)\n        // >>> closestInteger((\"-16.9\"))\n   \
    \     // (-16l)\n        // >>> closestInteger((\"-17.0\"))\n        // (-17l)\n\
    \        // >>> closestInteger((\"-17.1\"))\n        // (-17l)\n        // >>>\
    \ closestInteger((\"-17.2\"))\n        // (-17l)\n        // >>> closestInteger((\"\
    -17.3\"))\n        // (-17l)\n        // >>> closestInteger((\"-17.4\"))\n   \
    \     // (-17l)\n        // >>> closestInteger((\"-17.5\"))\n        // (-17l)\n\
    \        // >>> closestInteger((\"-17.6\"))\n        // (-17l)\n        // >>>\
    \ closestInteger((\"-17.7\"))\n        //", "        // >>> closestInteger((\"\
    10\"))\n        // (10l)\n        // >>> closestInteger((\"15.3\"))\n        //\
    \ (15l)\n        // >>> closestInteger((\"-15.3\"))\n        // (-15l)\n     \
    \   // >>> closestInteger((\"-15.6\"))\n        // (-16l)\n        // >>> closestInteger((\"\
    15.6\"))\n        // (16l)\n        // >>> closestInteger((\"15.5\"))\n      \
    \  // (16l)\n        // >>> closestInteger((\"-15.5\"))\n        // (-16l)\n \
    \       // >>> closestInteger((\"-15.4\"))\n        // (-15l)\n        // >>>\
    \ closestInteger((\"15.4\"))\n        // (15l)\n        // >>> closestInteger((\"\
    -15.0\"))\n        // (-15l)\n        // >>> closestInteger((\"15.0\"))\n    \
    \    // (15l)\n        // >>> closestInteger((\"-15.1\"))\n        // (-16l)\n\
    \        // >>> closestInteger((\"15.1\"))\n        // (16l)\n        // >>> closestInteger((\"\
    -15.2\"))\n        // (-16l)\n        // >>> closestInteger((\"15.2\"))\n    \
    \    // (16l)\n        // >>> closestInteger((\"-15.3\"))\n        // (-15l)\n\
    \        // >>> closestInteger((\"15.3\"))\n        // (15l)\n        // >>> closestInteger((\"\
    -15.4\"))\n        // (-15l)\n        // >>> closestInteger((\"15.4\"))\n    \
    \    // (15l)\n        // >>> closestInteger((\"-15.5\"))\n        // (-16l)\n\
    \        // >>> closestInteger((\"15.5\"))\n        // (16l)\n        // >>> closestInteger((\"\
    -15.6\"))\n        // (-16l)\n        // >>> closestInteger((\"15.6\"))\n    \
    \    // (16l)\n        // >>> closestInteger((\"-15.7\"))\n        // (-16l)\n\
    \        // >>> closestInteger((\"15.7\"))\n        // (16l)\n        // >>> closestInteger((\"\
    -15.8\"))\n        // (-16l)\n        // >>> closestInteger(", '        return
    0l;', "        // >>> closestInteger((\"10\"))\n        // (10l)\n        // >>>\
    \ closestInteger((\"15.3\"))\n        // (15l)\n        // Note:\n        // Rounding\
    \ away from zero means that if the given number is equidistant\n        // from\
    \ two integers, the one you should return is the one that is the\n        // farthest\
    \ from zero. For example closest_integer(\"14.5\") should\n        // return 15\
    \ and closest_integer(\"-14.5\") should return -15.\n        // >>> closestInteger((\"\
    10\"))\n        // (10l)\n        // >>> closestInteger((\"15.3\"))\n        //\
    \ (15l)\n        // Note:\n        // Rounding away from zero means that if the\
    \ given number is equidistant\n        // from two integers, the one you should\
    \ return is the one that is the\n        // farthest from zero. For example closest_integer(\"\
    14.5\") should\n        // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n        // >>> closestInteger((\"10\"))\n        // (10l)\n        //\
    \ >>> closestInteger((\"15.3\"))\n        // (15l)\n        // Note:\n       \
    \ // Rounding away from zero means that if the given number is equidistant\n \
    \       // from two integers, the one you should return is the one that is the\n\
    \        // farthest from zero. For example closest_integer(\"14.5\") should\n\
    \        // return 15 and closest_integer(\"-14.5\") should return -15.\n    \
    \    // >>> closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from", "        // >>> closestInteger((\"\
    10\"))\n        // (10l)\n        // >>> closestInteger((\"15.3\"))\n        //\
    \ (15l)\n        // >>> closestInteger((\"14.5\"))\n        // (15l)\n       \
    \ // >>> closestInteger((\"-14.5\"))\n        // (-15l)\n        // >>> closestInteger((\"\
    -14.6\"))\n        // (-15l)\n        // >>> closestInteger((\"-14.4\"))\n   \
    \     // (-14l)\n        // >>> closestInteger((\"-14.0\"))\n        // (-14l)\n\
    \        // >>> closestInteger((\"-14.1\"))\n        // (-14l)\n        // >>>\
    \ closestInteger((\"-14.2\"))\n        // (-14l)\n        // >>> closestInteger((\"\
    -14.3\"))\n        // (-14l)\n        // >>> closestInteger((\"-14.4\"))\n   \
    \     // (-14l)\n        // >>> closestInteger((\"-14.5\"))\n        // (-15l)\n\
    \        // >>> closestInteger((\"-14.6\"))\n        // (-15l)\n        // >>>\
    \ closestInteger((\"-14.7\"))\n        // (-15l)\n        // >>> closestInteger((\"\
    -14.8\"))\n        // (-15l)\n        // >>> closestInteger((\"-14.9\"))\n   \
    \     // (-15l)\n        // >>> closestInteger((\"-15.0\"))\n        // (-15l)\n\
    \        // >>> closestInteger((\"-15.1\"))\n        // (-15l)\n        // >>>\
    \ closestInteger((\"-15.2\"))\n        // (-15l)\n        // >>> closestInteger((\"\
    -15.3\"))\n        // (-15l)\n        // >>> closestInteger((\"-15.4\"))\n   \
    \     // (-15l)\n        // >>> closestInteger((\"-15.5\"))\n        // (-16l)\n\
    \        // >>> closestInteger((\"-15.6\"))\n        // (-16l)\n        // >>>\
    \ closestInteger((\"-15.7\"))\n        // (-16l)\n        // >>> closestInteger((\"\
    -15.8\"))\n        // (-16l)\n        // >>> closestInteger((\"-15.9\"))\n   \
    \     // (-", "        // >>> closestInteger((\"10\"))\n        // (10l)\n   \
    \     // >>> closestInteger((\"15.3\"))\n        // (15l)\n        // Note:\n\
    \        // Rounding away from zero means that if the given number is equidistant\n\
    \        // from two integers, the one you should return is the one that is the\n\
    \        // farthest from zero. For example closest_integer(\"14.5\") should\n\
    \        // return 15 and closest_integer(\"-14.5\") should return -15.\n    \
    \    // >>> closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from zero means that if the given number\
    \ is equidistant\n        // from two integers, the one you should return is the\
    \ one that is the\n        // farthest from zero. For example closest_integer(\"\
    14.5\") should\n        // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n        // >>> closestInteger((\"10\"))\n        // (10l)\n        //\
    \ >>> closestInteger((\"15.3\"))\n        // (15l)\n        // Note:\n       \
    \ // Rounding away from zero means that if the given number is equidistant\n \
    \       // from two integers, the one you should return is the one that is the\n\
    \        // farthest from zero. For example closest_integer(\"14.5\") should\n\
    \        // return 15 and closest_integer(\"-14.5\") should return -15.\n    \
    \    // >>> closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from",
  "        // >>> closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // >>> closestInteger((\"15.5\"))\n      \
    \  // (16l)\n        // >>> closestInteger((\"-15.5\"))\n        // (-16l)\n \
    \       // >>> closestInteger((\"-15.6\"))\n        // (-16l)\n        // >>>\
    \ closestInteger((\"-15.4\"))\n        // (-15l)\n        // >>> closestInteger((\"\
    -15.0\"))\n        // (-15l)\n        // >>> closestInteger((\"-15.1\"))\n   \
    \     // (-15l)\n        // >>> closestInteger((\"-15.2\"))\n        // (-15l)\n\
    \        // >>> closestInteger((\"-15.3\"))\n        // (-15l)\n        // >>>\
    \ closestInteger((\"-15.4\"))\n        // (-15l)\n        // >>> closestInteger((\"\
    -15.5\"))\n        // (-16l)\n        // >>> closestInteger((\"-15.6\"))\n   \
    \     // (-16l)\n        // >>> closestInteger((\"-15.7\"))\n        // (-16l)\n\
    \        // >>> closestInteger((\"-15.8\"))\n        // (-16l)\n        // >>>\
    \ closestInteger((\"-15.9\"))\n        // (-16l)\n        // >>> closestInteger((\"\
    -15.0\"))\n        // (-15l)\n        // >>> closestInteger((\"-15.1\"))\n   \
    \     // (-15l)\n        // >>> closestInteger((\"-15.2\"))\n        // (-15l)\n\
    \        // >>> closestInteger((\"-15.3\"))\n        // (-15l)\n        // >>>\
    \ closestInteger((\"-15.4\"))\n        // (-15l)\n        // >>> closestInteger((\"\
    -15.5\"))\n        // (-16l)\n        // >>> closestInteger((\"-15.6\"))\n   \
    \     // (-16l)\n        // >>> closestInteger((\"-15.7\"))\n        // (-16l)\n\
    \        // >>> closestInteger((\"-15.8\"))\n        // (-16l)\n        // >>>\
    \ closestInteger((\"-15.9\"))\n        // (-", '        return 0;', "        //\
    \ >>> closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from zero means that if the given number\
    \ is equidistant\n        // from two integers, the one you should return is the\
    \ one that is the\n        // farthest from zero. For example closest_integer(\"\
    14.5\") should\n        // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n        // >>> closestInteger((\"10\"))\n        // (10l)\n        //\
    \ >>> closestInteger((\"15.3\"))\n        // (15l)\n        // Note:\n       \
    \ // Rounding away from zero means that if the given number is equidistant\n \
    \       // from two integers, the one you should return is the one that is the\n\
    \        // farthest from zero. For example closest_integer(\"14.5\") should\n\
    \        // return 15 and closest_integer(\"-14.5\") should return -15.\n    \
    \    // >>> closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from", '        return Math.round(Double.parseDouble(value));',
  '        return 0;', "        // >>> closestInteger((\"10\"))\n        // (10l)\n\
    \        // >>> closestInteger((\"15.3\"))\n        // (15l)\n        // Note:\n\
    \        // Rounding away from zero means that if the given number is equidistant\n\
    \        // from two integers, the one you should return is the one that is the\n\
    \        // farthest from zero. For example closest_integer(\"14.5\") should\n\
    \        // return 15 and closest_integer(\"-14.5\") should return -15.\n    \
    \    // >>> closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from zero means that if the given number\
    \ is equidistant\n        // from two integers, the one you should return is the\
    \ one that is the\n        // farthest from zero. For example closest_integer(\"\
    14.5\") should\n        // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n        // >>> closestInteger((\"10\"))\n        // (10l)\n        //\
    \ >>> closestInteger((\"15.3\"))\n        // (15l)\n        // Note:\n       \
    \ // Rounding away from zero means that if the given number is equidistant\n \
    \       // from two integers, the one you should return is the one that is the\n\
    \        // farthest from zero. For example closest_integer(\"14.5\") should\n\
    \        // return 15 and closest_integer(\"-14.5\") should return -15.\n    \
    \    // >>> closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from",
  '        return 0;', "        BigDecimal bd = new BigDecimal(value);\n        return\
    \ bd.setScale(0, RoundingMode.HALF_UP).longValue();", "        // >>> closestInteger((\"\
    10\"))\n        // (10l)\n        // >>> closestInteger((\"15.3\"))\n        //\
    \ (15l)\n        // Note:\n        // Rounding away from zero means that if the\
    \ given number is equidistant\n        // from two integers, the one you should\
    \ return is the one that is the\n        // farthest from zero. For example closest_integer(\"\
    14.5\") should\n        // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n        double d = Double.parseDouble(value);\n        if (d < 0) {\n\
    \            return (long) Math.ceil(d);\n        } else {\n            return\
    \ (long) Math.floor(d);\n        }", "        // >>> closestInteger((\"10\"))\n\
    \        // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n\
    \        // >>> closestInteger((\"-15.3\"))\n        // (-15l)\n        // >>>\
    \ closestInteger((\"-15.6\"))\n        // (-16l)\n        // >>> closestInteger((\"\
    -15.0\"))\n        // (-15l)\n        // >>> closestInteger((\"-15.1\"))\n   \
    \     // (-15l)\n        // >>> closestInteger((\"-15.4\"))\n        // (-15l)\n\
    \        // >>> closestInteger((\"-15.5\"))\n        // (-16l)\n        // >>>\
    \ closestInteger((\"-15.6\"))\n        // (-16l)\n        // >>> closestInteger((\"\
    -15.7\"))\n        // (-16l)\n        // >>> closestInteger((\"-15.8\"))\n   \
    \     // (-16l)\n        // >>> closestInteger((\"-15.9\"))\n        // (-16l)\n\
    \        // >>> closestInteger
  "        double d = Double.parseDouble(value);\n        return Math.round(d);",
  "        // >>> closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        return 0;", "        // >>> closestInteger((\"\
    10\"))\n        // (10l)\n        // >>> closestInteger((\"15.3\"))\n        //\
    \ (15l)\n        // >>> closestInteger((\"-15.3\"))\n        // (-15l)\n     \
    \   // >>> closestInteger((\"-15.6\"))\n        // (-16l)\n        // >>> closestInteger((\"\
    -15.5\"))\n        // (-16l)\n        // >>> closestInteger((\"-15.4\"))\n   \
    \     // (-15l)\n        // >>> closestInteger((\"-15.1\"))\n        // (-15l)\n\
    \        // >>> closestInteger((\"-15.0\"))\n        // (-15l)\n        // >>>\
    \ closestInteger((\"-14.9\"))\n        // (-15l)\n        // >>> closestInteger((\"\
    -14.8\"))\n        // (-15l)\n        // >>> closestInteger((\"-14.7\"))\n   \
    \     // (-15l)\n        // >>> closestInteger((\"-14.6\"))\n        // (-15l)\n\
    \        // >>> closestInteger((\"-14.5\"))\n        // (-15l)\n        // >>>\
    \ closestInteger((\"-14.4\"))\n        // (-15l)\n        // >>> closestInteger((\"\
    -14.3\"))\n        // (-15l)\n        // >>> closestInteger((\"-14.2\"))\n   \
    \     // (-15l)\n        // >>> closestInteger((\"-14.1\"))\n        // (-15l)\n\
    \        // >>> closestInteger((\"-14.0\"))\n        // (-14l)\n        // >>>\
    \ closestInteger((\"-13.9\"))\n        // (-14l)\n        // >>> closestInteger((\"\
    -13.8\"))\n        // (-14l)\n        // >>> closestInteger((\"-13.7\"))\n   \
    \     // (-14l)\n        // >>> closestInteger((\"-13.6\"))\n        // (-14l)\n\
    \        // >>> closestInteger((\"-13.5\"))\n        // (-14l)\n        // >>>\
    \ closestInteger((\"-13.4\"))\n        // (-14l)\n        // >>> closestInteger((\"\
    -13.3\"))\n        // (-14l)\n        // >>> closestInteger((\"-13.2\"))\n   \
    \     //", "        double d = Double.parseDouble(value);\n        return (long)Math.round(d);",
  "        // >>> closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from zero means that if the given number\
    \ is equidistant\n        // from two integers, the one you should return is the\
    \ one that is the\n        // farthest from zero. For example closest_integer(\"\
    14.5\") should\n        // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n        // >>> closestInteger((\"10\"))\n        // (10l)\n        //\
    \ >>> closestInteger((\"15.3\"))\n        // (15l)\n        // Note:\n       \
    \ // Rounding away from zero means that if the given number is equidistant\n \
    \       // from two integers, the one you should return is the one that is the\n\
    \        // farthest from zero. For example closest_integer(\"14.5\") should\n\
    \        // return 15 and closest_integer(\"-14.5\") should return -15.\n    \
    \    // >>> closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from", '        return 0;', '        return
    0;', '        return 0;', "        // >>> your code here <<<\n        return 0;",
  "        // >>> closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from zero means that if the given number\
    \ is equidistant\n        // from two integers, the one you should return is the\
    \ one that is the\n        // farthest from zero. For example closest_integer(\"\
    14.5\") should\n        // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n        // >>> closestInteger((\"10\"))\n        // (10l)\n        //\
    \ >>> closestInteger((\"15.3\"))\n        // (15l)\n        // Note:\n       \
    \ // Rounding away from zero means that if the given number is equidistant\n \
    \       // from two integers, the one you should return is the one that is the\n\
    \        // farthest from zero. For example closest_integer(\"14.5\") should\n\
    \        // return 15 and closest_integer(\"-14.5\") should return -15.\n    \
    \    // >>> closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from", '        return 0l;', "       \
    \ // >>> closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from zero means that if the given number\
    \ is equidistant\n        // from two integers, the one you should return is the\
    \ one that is the\n        // farthest from zero. For example closest_integer(\"\
    14.5\") should\n        // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n        // >>> closestInteger((\"10\"))\n        // (10l)\n        //\
    \ >>> closestInteger((\"15.3\"))\n        // (15l)\n        // Note:\n       \
    \ // Rounding away from zero means that if the given number is equidistant\n \
    \       // from two integers, the one you should return is the one that is the\n\
    \        // farthest from zero. For example closest_integer(\"14.5\") should\n\
    \        // return 15 and closest_integer(\"-14.5\") should return -15.\n    \
    \    // >>> closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from", "        // >>> closestInteger((\"\
    10\"))\n        // (10l)\n        // >>> closestInteger((\"15.3\"))\n        //\
    \ (15l)\n        // >>> closestInteger((\"14.5\"))\n        // (15l)\n       \
    \ // >>> closestInteger((\"-14.5\"))\n        // (-15l)\n        // >>> closestInteger((\"\
    -14.6\"))\n        // (-15l)\n        // >>> closestInteger((\"-14.4\"))\n   \
    \     // (-14l)\n        // >>> closestInteger((\"-14.0\"))\n        // (-14l)\n\
    \        // >>> closestInteger((\"-14.1\"))\n        // (-14l)\n        // >>>\
    \ closestInteger((\"-14.2\"))\n        // (-14l)\n        // >>> closestInteger((\"\
    -14.3\"))\n        // (-14l)\n        // >>> closestInteger((\"-14.4\"))\n   \
    \     // (-14l)\n        // >>> closestInteger((\"-14.5\"))\n        // (-15l)\n\
    \        // >>> closestInteger((\"-14.6\"))\n        // (-15l)\n        // >>>\
    \ closestInteger((\"-14.7\"))\n        // (-15l)\n        // >>> closestInteger((\"\
    -14.8\"))\n        // (-15l)\n        // >>> closestInteger((\"-14.9\"))\n   \
    \     // (-15l)\n        // >>> closestInteger((\"-14.99\"))\n        // (-15l)\n\
    \        // >>> closestInteger((\"-14.999\"))\n        // (-15l)\n        // >>>\
    \ closestInteger((\"-14.9999\"))\n        // (-15l)\n        // >>> closestInteger((\"\
    -14.99999\"))\n        // (-15l)\n        // >>> closestInteger((\"-14.999999\"\
    ))\n        // (-15l)\n        // >>> closestInteger((\"-14.9999999\"))\n    \
    \    // (-15l)\n        // >>> closestInteger((\"-14.99999999\"))\n        //\
    \ (-15l)\n        // >>> closestInteger((\"-14.999999999\"))\n        // (-15l)\n\
    \        // >>> closestInteger((\"-14.9999999999\"))\n        // (-15l)\n    \
    \    // >>> closestInteger((\"-", "        // >>> closestInteger((\"10\"))\n \
    \       // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n\
    \        // >>> closestInteger((\"15.5\"))\n        // (16l)\n        // >>> closestInteger((\"\
    -15.5\"))\n        // (-16l)\n        // >>> closestInteger((\"-15.4\"))\n   \
    \     // (-15l)\n        // >>> closestInteger((\"-15.6\"))\n        // (-16l)\n\
    \        // >>> closestInteger((\"-15.7\"))\n        // (-16l)\n        // >>>\
    \ closestInteger((\"-15.8\"))\n        // (-16l)\n        // >>> closestInteger((\"\
    -15.9\"))\n        // (-16l)\n        // >>> closestInteger((\"-15.0\"))\n   \
    \     // (-15l)\n        // >>> closestInteger((\"-15.1\"))\n        // (-16l)\n\
    \        // >>> closestInteger((\"-15.2\"))\n        // (-16l)\n        // >>>\
    \ closestInteger((\"-15.3\"))\n        // (-16l)\n        // >>> closestInteger((\"\
    -15.4\"))\n        // (-16l)\n        // >>> closestInteger((\"-15.5\"))\n   \
    \     // (-16l)\n        // >>> closestInteger((\"-15.6\"))\n        // (-16l)\n\
    \        // >>> closestInteger((\"-15.7\"))\n        // (-16l)\n        // >>>\
    \ closestInteger((\"-15.8\"))\n        // (-16l)\n        // >>> closestInteger((\"\
    -15.9\"))\n        // (-16l)\n        // >>> closestInteger((\"-15.0\"))\n   \
    \     // (-15l)\n        // >>> closestInteger((\"-15.1\"))\n        // (-16l)\n\
    \        // >>> closestInteger((\"-15.2\"))\n        // (-16l)\n        // >>>\
    \ closestInteger((\"-15.3\"))\n        // (-16l)\n        // >>> closestInteger((\"\
    -15.4\"))\n        // (-16l)\n        // >>> closestInteger((\"-15.5\"))\n   \
    \     // (-16l)\n        // >>> closestInteger((\"-15.6\"))\n        // (-", '        return
    0;', '        return 0;', "        // >>> closestInteger((\"10\"))\n        //\
    \ (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n       \
    \ // >>> closestInteger((\"-15.3\"))\n        // (-15l)\n        // >>> closestInteger((\"\
    -15.6\"))\n        // (-16l)\n        // >>> closestInteger((\"-15.5\"))\n   \
    \     // (-16l)\n        // >>> closestInteger((\"-15.4\"))\n        // (-15l)\n\
    \        // >>> closestInteger((\"-15.2\"))\n        // (-15l)\n        // >>>\
    \ closestInteger((\"-15.1\"))\n        // (-15l)\n        // >>> closestInteger((\"\
    -15.0\"))\n        // (-15l)\n        // >>> closestInteger((\"-14.9\"))\n   \
    \     // (-15l)\n        // >>> closestInteger((\"-14.8\"))\n        // (-15l)\n\
    \        // >>> closestInteger((\"-14.7\"))\n        // (-15l)\n        // >>>\
    \ closestInteger((\"-14.6\"))\n        // (-15l)\n        // >>> closestInteger((\"\
    -14.5\"))\n        // (-15l)\n        // >>> closestInteger((\"-14.4\"))\n   \
    \     // (-15l)\n        // >>> closestInteger((\"-14.3\"))\n        // (-15l)\n\
    \        // >>> closestInteger((\"-14.2\"))\n        // (-15l)\n        // >>>\
    \ closestInteger((\"-14.1\"))\n        // (-15l)\n        // >>> closestInteger((\"\
    -14.0\"))\n        // (-14l)\n        // >>> closestInteger((\"-13.9\"))\n   \
    \     // (-14l)\n        // >>> closestInteger((\"-13.8\"))\n        // (-14l)\n\
    \        // >>> closestInteger((\"-13.7\"))\n        // (-14l)\n        // >>>\
    \ closestInteger((\"-13.6\"))\n        // (-14l)\n        // >>> closestInteger((\"\
    -13.5\"))\n        // (-14l)\n        // >>> closestInteger((\"-13.4\"))\n   \
    \     // (-14l)\n        // >>> closestInteger((\"-13.3\"))\n        //", "  \
    \      // >>> closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from zero means that if the given number\
    \ is equidistant\n        // from two integers, the one you should return is the\
    \ one that is the\n        // farthest from zero. For example closest_integer(\"\
    14.5\") should\n        // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n        // >>> closestInteger((\"10\"))\n        // (10l)\n        //\
    \ >>> closestInteger((\"15.3\"))\n        // (15l)\n        // Note:\n       \
    \ // Rounding away from zero means that if the given number is equidistant\n \
    \       // from two integers, the one you should return is the one that is the\n\
    \        // farthest from zero. For example closest_integer(\"14.5\") should\n\
    \        // return 15 and closest_integer(\"-14.5\") should return -15.\n    \
    \    // >>> closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from", "        // >>> closestInteger((\"\
    10\"))\n        // (10l)\n        // >>> closestInteger((\"15.3\"))\n        //\
    \ (15l)\n        // Note:\n        // Rounding away from zero means that if the\
    \ given number is equidistant\n        // from two integers, the one you should\
    \ return is the one that is the\n        // farthest from zero. For example closest_integer(\"\
    14.5\") should\n        // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n        // >>> closestInteger((\"10\"))\n        // (10l)\n        //\
    \ >>> closestInteger((\"15.3\"))\n        // (15l)\n        // Note:\n       \
    \ // Rounding away from zero means that if the given number is equidistant\n \
    \       // from two integers, the one you should return is the one that is the\n\
    \        // farthest from zero. For example closest_integer(\"14.5\") should\n\
    \        // return 15 and closest_integer(\"-14.5\") should return -15.\n    \
    \    // >>> closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from zero means that if the given number\
    \ is equidistant\n        // from two integers, the one you should return is the\
    \ one that is the\n        // farthest from zero. For example closest_integer(\"\
    14.5\") should\n        // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n        // >>> closestInteger((\"10\"))\n        // (10l)\n        //\
    \ >>> closestInteger((\"15.3\"))\n        // (15l)\n        // Note:\n       \
    \ // Rounding away from", '        return 0;', "        // >>> closestInteger((\"\
    10\"))\n        // (10l)\n        // >>> closestInteger((\"15.3\"))\n        //\
    \ (15l)\n        // Note:\n        // Rounding away from zero means that if the\
    \ given number is equidistant\n        // from two integers, the one you should\
    \ return is the one that is the\n        // farthest from zero. For example closest_integer(\"\
    14.5\") should\n        // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n        // >>> closestInteger((\"10\"))\n        // (10l)\n        //\
    \ >>> closestInteger((\"15.3\"))\n        // (15l)\n        // Note:\n       \
    \ // Rounding away from zero means that if the given number is equidistant\n \
    \       // from two integers, the one you should return is the one that is the\n\
    \        // farthest from zero. For example closest_integer(\"14.5\") should\n\
    \        // return 15 and closest_integer(\"-14.5\") should return -15.\n    \
    \    // >>> closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from zero means that if the given number\
    \ is equidistant\n        // from two integers, the one you should return is the\
    \ one that is the\n        // farthest from zero. For example closest_integer(\"\
    14.5\") should\n        // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n        // >>> closestInteger((\"10\"))\n        // (10l)\n        //\
    \ >>> closestInteger((\"15.3\"))\n        // (15l)\n        // Note:\n       \
    \ // Rounding away from", '        return 0;', "        // >>> closestInteger((\"\
    10\"))\n        // (10l)\n        // >>> closestInteger((\"15.3\"))\n        //\
    \ (15l)\n        // >>> closestInteger((\"-15.3\"))\n        // (-15l)\n     \
    \   // >>> closestInteger((\"-15.6\"))\n        // (-16l)\n        // >>> closestInteger((\"\
    -15.5\"))\n        // (-16l)\n        // >>> closestInteger((\"-15.4\"))\n   \
    \     // (-15l)\n        // >>> closestInteger((\"-15.0\"))\n        // (-15l)\n\
    \        // >>> closestInteger((\"-15.1\"))\n        // (-16l)\n        // >>>\
    \ closestInteger((\"-15.2\"))\n        // (-16l)\n        // >>> closestInteger((\"\
    -15.3\"))\n        // (-15l)\n        // >>> closestInteger((\"-15.4\"))\n   \
    \     // (-15l)\n        // >>> closestInteger((\"-15.5\"))\n        // (-16l)\n\
    \        // >>> closestInteger((\"-15.6\"))\n        // (-16l)\n        // >>>\
    \ closestInteger((\"-15.7\"))\n        // (-16l)\n        // >>> closestInteger((\"\
    -15.8\"))\n        // (-16l)\n        // >>> closestInteger((\"-15.9\"))\n   \
    \     // (-16l)\n        // >>> closestInteger((\"-15.0\"))\n        // (-15l)\n\
    \        // >>> closestInteger((\"-15.1\"))\n        // (-16l)\n        // >>>\
    \ closestInteger((\"-15.2\"))\n        // (-16l)\n        // >>> closestInteger((\"\
    -15.3\"))\n        // (-15l)\n        // >>> closestInteger((\"-15.4\"))\n   \
    \     // (-15l)\n        // >>> closestInteger((\"-15.5\"))\n        // (-16l)\n\
    \        // >>> closestInteger((\"-15.6\"))\n        // (-16l)\n        // >>>\
    \ closestInteger((\"-15.7\"))\n        // (-16l)\n        // >>> closestInteger((\"\
    -15.8\"))\n        // (-16l)\n        // >>> closestInteger((\"-15.9\"))\n   \
    \     //", "        // >>> closestInteger((\"10\"))\n        // (10l)\n      \
    \  // >>> closestInteger((\"15.3\"))\n        // (15l)\n        // Note:\n   \
    \     // Rounding away from zero means that if the given number is equidistant\n\
    \        // from two integers, the one you should return is the one that is the\n\
    \        // farthest from zero. For example closest_integer(\"14.5\") should\n\
    \        // return 15 and closest_integer(\"-14.5\") should return -15.\n    \
    \    return 0;", '        return 0;', "        // >>> closestInteger((\"10\"))\n\
    \        // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n\
    \        // >>> closestInteger((\"-15.3\"))\n        // (-15l)\n        // >>>\
    \ closestInteger((\"-15.6\"))\n        // (-16l)\n        // >>> closestInteger((\"\
    -15.5\"))\n        // (-16l)\n        // >>> closestInteger((\"-15.4\"))\n   \
    \     // (-15l)\n        // >>> closestInteger((\"15.6\"))\n        // (16l)\n\
    \        // >>> closestInteger((\"15.5\"))\n        // (16l)\n        // >>> closestInteger((\"\
    15.4\"))\n        // (15l)\n        // >>> closestInteger((\"0.0\"))\n       \
    \ // (0l)\n        // >>> closestInteger((\"0.1\"))\n        // (0l)\n       \
    \ // >>> closestInteger((\"0.2\"))\n        // (0l)\n        // >>> closestInteger((\"\
    0.3\"))\n        // (0l)\n        // >>> closestInteger((\"0.4\"))\n        //\
    \ (0l)\n        // >>> closestInteger((\"0.5\"))\n        // (1l)\n        //\
    \ >>> closestInteger((\"0.6\"))\n        // (1l)\n        // >>> closestInteger((\"\
    0.7\"))\n        // (1l)\n        // >>> closestInteger((\"0.8\"))\n        //\
    \ (1l)\n        // >>> closestInteger((\"0.9\"))\n        // (1l)\n        //\
    \ >>> closestInteger((\"-0.0\"))\n        // (0l)\n        // >>> closestInteger((\"\
    -0.1\"))\n        // (0l)\n        // >>> closestInteger((\"-0.2\"))\n       \
    \ // (0l)\n        // >>> closestInteger((\"-0.3\"))\n        // (0l)\n      \
    \  // >>> closestInteger((\"-0.4\"))\n        // (0l)\n        // >>> closestInteger((\"\
    -0.5\"))\n        // (-1l)\n        // >>> closestInteger((\"-0.6\"))\n      \
    \  // (-1l)\n        // >>> closestInteger((\"-", '        return 0;', "     \
    \   // >>> closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from zero means that if the given number\
    \ is equidistant\n        // from two integers, the one you should return is the\
    \ one that is the\n        // farthest from zero. For example closest_integer(\"\
    14.5\") should\n        // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n        BigDecimal bd = new BigDecimal(value);\n        BigDecimal rounded\
    \ = bd.setScale(0, RoundingMode.HALF_UP);\n        return rounded.longValue();",
  "        // >>> closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // >>> closestInteger((\"14.5\"))\n      \
    \  // (15l)\n        // >>> closestInteger((\"-14.5\"))\n        // (-15l)\n \
    \       // >>> closestInteger((\"-14.6\"))\n        // (-15l)\n        // >>>\
    \ closestInteger((\"-14.4\"))\n        // (-14l)\n        // >>> closestInteger((\"\
    -14.0\"))\n        // (-14l)\n        // >>> closestInteger((\"-14.1\"))\n   \
    \     // (-14l)\n        // >>> closestInteger((\"-14.2\"))\n        // (-14l)\n\
    \        // >>> closestInteger((\"-14.3\"))\n        // (-14l)\n        // >>>\
    \ closestInteger((\"-14.4\"))\n        // (-14l)\n        // >>> closestInteger((\"\
    -14.5\"))\n        // (-15l)\n        // >>> closestInteger((\"-14.6\"))\n   \
    \     // (-15l)\n        // >>> closestInteger((\"-14.7\"))\n        // (-15l)\n\
    \        // >>> closestInteger((\"-14.8\"))\n        // (-15l)\n        // >>>\
    \ closestInteger((\"-14.9\"))\n        // (-15l)\n        // >>> closestInteger((\"\
    -15.0\"))\n        // (-15l)\n        // >>> closestInteger((\"-15.1\"))\n   \
    \     // (-15l)\n        // >>> closestInteger((\"-15.2\"))\n        // (-15l)\n\
    \        // >>> closestInteger((\"-15.3\"))\n        // (-15l)\n        // >>>\
    \ closestInteger((\"-15.4\"))\n        // (-15l)\n        // >>> closestInteger((\"\
    -15.5\"))\n        // (-16l)\n        // >>> closestInteger((\"-15.6\"))\n   \
    \     // (-16l)\n        // >>> closestInteger((\"-15.7\"))\n        // (-16l)\n\
    \        // >>> closestInteger((\"-15.8\"))\n        // (-16l)\n        // >>>\
    \ closestInteger((\"-15.9\"))\n        // (-", "        double d = Double.parseDouble(value);\n\
    \        return Math.round(d);", '        return 0;', '        return 0;', '        return
    0;', '        return 0;', "        double d = Double.parseDouble(value);\n   \
    \     return (long)Math.round(d);", '        return 0;', '        return Math.round(Double.parseDouble(value));',
  "        // >>> closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from zero means that if the given number\
    \ is equidistant\n        // from two integers, the one you should return is the\
    \ one that is the\n        // farthest from zero. For example closest_integer(\"\
    14.5\") should\n        // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n        // >>> closestInteger((\"10\"))\n        // (10l)\n        //\
    \ >>> closestInteger((\"15.3\"))\n        // (15l)\n        // Note:\n       \
    \ // Rounding away from zero means that if the given number is equidistant\n \
    \       // from two integers, the one you should return is the one that is the\n\
    \        // farthest from zero. For example closest_integer(\"14.5\") should\n\
    \        // return 15 and closest_integer(\"-14.5\") should return -15.\n    \
    \    // >>> closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from", "        // >>> your code here\
    \ <<<\n        return 0;", "        // >>> your code here <<<\n        return\
    \ 0;", "        // >>> your code here <<<\n        return 0;", "        // >>>\
    \ closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        double d = Double.parseDouble(value);\n \
    \       if (d > 0) {\n            return (long) Math.ceil(d);\n        } else\
    \ {\n            return (long) Math.floor(d);\n        }", "        // >>> closestInteger((\"\
    10\"))\n        // (10l)\n        // >>> closestInteger((\"15.3\"))\n        //\
    \ (15l)\n        // Note:\n        // Rounding away from zero means that if the\
    \ given number is equidistant\n        // from two integers, the one you should\
    \ return is the one that is the\n        // farthest from zero. For example closest_integer(\"\
    14.5\") should\n        // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n        // >>> closestInteger((\"10\"))\n        // (10l)\n        //\
    \ >>> closestInteger((\"15.3\"))\n        // (15l)\n        // Note:\n       \
    \ // Rounding away from zero means that if the given number is equidistant\n \
    \       // from two integers, the one you should return is the one that is the\n\
    \        // farthest from zero. For example closest_integer(\"14.5\") should\n\
    \        // return 15 and closest_integer(\"-14.5\") should return -15.\n    \
    \    // >>> closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from zero means that if the given number\
    \ is equidistant\n        // from two integers, the one you should return is the\
    \ one that is the\n        // farthest from zero. For example closest_integer(\"\
    14.5\") should\n        // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n        // >>> closestInteger((\"10\"))\n        // (10l)\n        //\
    \ >>> closestInteger((\"15.3\"))\n        // (15l)\n        // Note:\n       \
    \ // Rounding away from", '        return 0;', "        // >>> closestInteger((\"\
    10\"))\n        // (10l)\n        // >>> closestInteger((\"15.3\"))\n        //\
    \ (15l)\n        // >>> closestInteger((\"-15.3\"))\n        // (-15l)\n     \
    \   // >>> closestInteger((\"-15.6\"))\n        // (-16l)\n        // >>> closestInteger((\"\
    -15.6\"))\n        // (-16l)\n        // >>> closestInteger((\"-15.6\"))\n   \
    \     // (-16l)\n        // >>> closestInteger((\"-15.6\"))\n        // (-16l)\n\
    \        // >>> closestInteger((\"-15.6\"))\n        // (-16l)\n        // >>>\
    \ closestInteger((\"-15.6\"))\n        // (-16l)\n        // >>> closestInteger((\"\
    -15.6\"))\n        // (-16l)\n        // >>> closestInteger((\"-15.6\"))\n   \
    \     // (-16l)\n        // >>> closestInteger((\"-15.6\"))\n        // (-16l)\n\
    \        // >>> closestInteger((\"-15.6\"))\n        // (-16l)\n        // >>>\
    \ closestInteger((\"-15.6\"))\n        // (-16l)\n        // >>> closestInteger((\"\
    -15.6\"))\n        // (-16l)\n        // >>> closestInteger((\"-15.6\"))\n   \
    \     // (-16l)\n        // >>> closestInteger((\"-15.6\"))\n        // (-16l)\n\
    \        // >>> closestInteger((\"-15.6\"))\n        // (-16l)\n        // >>>\
    \ closestInteger((\"-15.6\"))\n        // (-16l)\n        // >>> closestInteger((\"\
    -15.6\"))\n        // (-16l)\n        // >>> closestInteger((\"-15.6\"))\n   \
    \     // (-16l)\n        // >>> closestInteger((\"-15.6\"))\n        // (-16l)\n\
    \        // >>> closestInteger((\"-15.6\"))\n        // (-16l)\n        // >>>\
    \ closestInteger((\"-15.6\"))\n        // (-16l)\n        // >>> closestInteger((\"\
    -15.6\"))\n        // (-16l)\n        // >>> closestInteger((\"-15.6\"))\n   \
    \     //", "        // >>> closestInteger((\"10\"))\n        // (10l)\n      \
    \  // >>> closestInteger((\"15.3\"))\n        // (15l)\n        // Note:\n   \
    \     // Rounding away from zero means that if the given number is equidistant\n\
    \        // from two integers, the one you should return is the one that is the\n\
    \        // farthest from zero. For example closest_integer(\"14.5\") should\n\
    \        // return 15 and closest_integer(\"-14.5\") should return -15.\n    \
    \    double d = Double.parseDouble(value);\n        if (d > 0) {\n           \
    \ return (long) Math.ceil(d);\n        } else {\n            return (long) Math.floor(d);\n\
    \        }", "        // >>> closestInteger((\"10\"))\n        // (10l)\n    \
    \    // >>> closestInteger((\"15.3\"))\n        // (15l)\n        // Note:\n \
    \       // Rounding away from zero means that if the given number is equidistant\n\
    \        // from two integers, the one you should return is the one that is the\n\
    \        // farthest from zero. For example closest_integer(\"14.5\") should\n\
    \        // return 15 and closest_integer(\"-14.5\") should return -15.\n    \
    \    // >>> closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from zero means that if the given number\
    \ is equidistant\n        // from two integers, the one you should return is the\
    \ one that is the\n        // farthest from zero. For example closest_integer(\"\
    14.5\") should\n        // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n        // >>> closestInteger((\"10\"))\n        // (10l)\n        //\
    \ >>> closestInteger((\"15.3\"))\n        // (15l)\n        // Note:\n       \
    \ // Rounding away from zero means that if the given number is equidistant\n \
    \       // from two integers, the one you should return is the one that is the\n\
    \        // farthest from zero. For example closest_integer(\"14.5\") should\n\
    \        // return 15 and closest_integer(\"-14.5\") should return -15.\n    \
    \    // >>> closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from",
  "        // >>> closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from zero means that if the given number\
    \ is equidistant\n        // from two integers, the one you should return is the\
    \ one that is the\n        // farthest from zero. For example closest_integer(\"\
    14.5\") should\n        // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n        // >>> closestInteger((\"10\"))\n        // (10l)\n        //\
    \ >>> closestInteger((\"15.3\"))\n        // (15l)\n        // Note:\n       \
    \ // Rounding away from zero means that if the given number is equidistant\n \
    \       // from two integers, the one you should return is the one that is the\n\
    \        // farthest from zero. For example closest_integer(\"14.5\") should\n\
    \        // return 15 and closest_integer(\"-14.5\") should return -15.\n    \
    \    // >>> closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from", "        // >>> closestInteger((\"\
    10\"))\n        // (10l)\n        // >>> closestInteger((\"15.3\"))\n        //\
    \ (15l)\n        // Note:\n        // Rounding away from zero means that if the\
    \ given number is equidistant\n        // from two integers, the one you should\
    \ return is the one that is the\n        // farthest from zero. For example closest_integer(\"\
    14.5\") should\n        // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n        // >>> closestInteger((\"10\"))\n        // (10l)\n        //\
    \ >>> closestInteger((\"15.3\"))\n        // (15l)\n        // Note:\n       \
    \ // Rounding away from zero means that if the given number is equidistant\n \
    \       // from two integers, the one you should return is the one that is the\n\
    \        // farthest from zero. For example closest_integer(\"14.5\") should\n\
    \        // return 15 and closest_integer(\"-14.5\") should return -15.\n    \
    \    // >>> closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from zero means that if the given number\
    \ is equidistant\n        // from two integers, the one you should return is the\
    \ one that is the\n        // farthest from zero. For example closest_integer(\"\
    14.5\") should\n        // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n        // >>> closestInteger((\"10\"))\n        // (10l)\n        //\
    \ >>> closestInteger((\"15.3\"))\n        // (15l)\n        // Note:\n       \
    \ // Rounding away from", "        // >>> closestInteger((\"10\"))\n        //\
    \ (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n       \
    \ // >>> closestInteger((\"14.5\"))\n        // (15l)\n        // >>> closestInteger((\"\
    -14.5\"))\n        // (-15l)\n        // >>> closestInteger((\"-14.6\"))\n   \
    \     // (-15l)\n        // >>> closestInteger((\"-14.4\"))\n        // (-14l)\n\
    \        // >>> closestInteger((\"-14.0\"))\n        // (-14l)\n        // >>>\
    \ closestInteger((\"-14.1\"))\n        // (-14l)\n        // >>> closestInteger((\"\
    -14.2\"))\n        // (-14l)\n        // >>> closestInteger((\"-14.3\"))\n   \
    \     // (-14l)\n        // >>> closestInteger((\"-14.4\"))\n        // (-14l)\n\
    \        // >>> closestInteger((\"-14.5\"))\n        // (-15l)\n        // >>>\
    \ closestInteger((\"-14.6\"))\n        // (-15l)\n        // >>> closestInteger((\"\
    -14.7\"))\n        // (-15l)\n        // >>> closestInteger((\"-14.8\"))\n   \
    \     // (-15l)\n        // >>> closestInteger((\"-14.9\"))\n        // (-15l)\n\
    \        // >>> closestInteger((\"-15.0\"))\n        // (-15l)\n        // >>>\
    \ closestInteger((\"-15.1\"))\n        // (-15l)\n        // >>> closestInteger((\"\
    -15.2\"))\n        // (-15l)\n        // >>> closestInteger((\"-15.3\"))\n   \
    \     // (-15l)\n        // >>> closestInteger((\"-15.4\"))\n        // (-15l)\n\
    \        // >>> closestInteger((\"-15.5\"))\n        // (-16l)\n        // >>>\
    \ closestInteger((\"-15.6\"))\n        // (-16l)\n        // >>> closestInteger((\"\
    -15.7\"))\n        // (-16l)\n        // >>> closestInteger((\"-15.8\"))\n   \
    \     // (-16l)\n        // >>> closestInteger((\"-15.9\"))\n        // (-", " \
    \       // >>> closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // >>> closestInteger((\"-15.3\"))\n     \
    \   // (-15l)\n        // >>> closestInteger((\"-15.5\"))\n        // (-16l)\n\
    \        // >>> closestInteger((\"-15.6\"))\n        // (-16l)\n        // >>>\
    \ closestInteger((\"-15.7\"))\n        // (-16l)\n        // >>> closestInteger((\"\
    -15.8\"))\n        // (-16l)\n        // >>> closestInteger((\"-15.9\"))\n   \
    \     // (-16l)\n        // >>> closestInteger((\"-15.0\"))\n        // (-15l)\n\
    \        // >>> closestInteger((\"-15.1\"))\n        // (-16l)\n        // >>>\
    \ closestInteger((\"-15.2\"))\n        // (-16l)\n        // >>> closestInteger((\"\
    -15.3\"))\n        // (-15l)\n        // >>> closestInteger((\"-15.4\"))\n   \
    \     // (-15l)\n        // >>> closestInteger((\"-15.5\"))\n        // (-16l)\n\
    \        // >>> closestInteger((\"-15.6\"))\n        // (-16l)\n        // >>>\
    \ closestInteger((\"-15.7\"))\n        // (-16l)\n        // >>> closestInteger((\"\
    -15.8\"))\n        // (-16l)\n        // >>> closestInteger((\"-15.9\"))\n   \
    \     // (-16l)\n        // >>> closestInteger((\"-15.0\"))\n        // (-15l)\n\
    \        // >>> closestInteger((\"-15.1\"))\n        // (-16l)\n        // >>>\
    \ closestInteger((\"-15.2\"))\n        // (-16l)\n        // >>> closestInteger((\"\
    -15.3\"))\n        // (-15l)\n        // >>> closestInteger((\"-15.4\"))\n   \
    \     // (-15l)\n        // >>> closestInteger((\"-15.5\"))\n        // (-16l)\n\
    \        // >>> closestInteger((\"-15.6\"))\n        // (-16l)\n        // >>>\
    \ closestInteger((\"-15.7\"))\n        //", '        return 0;', "        // >>>\
    \ closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from zero means that if the given number\
    \ is equidistant\n        // from two integers, the one you should return is the\
    \ one that is the\n        // farthest from zero. For example closest_integer(\"\
    14.5\") should\n        // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n        // >>> closestInteger((\"10\"))\n        // (10l)\n        //\
    \ >>> closestInteger((\"15.3\"))\n        // (15l)\n        // Note:\n       \
    \ // Rounding away from zero means that if the given number is equidistant\n \
    \       // from two integers, the one you should return is the one that is the\n\
    \        // farthest from zero. For example closest_integer(\"14.5\") should\n\
    \        // return 15 and closest_integer(\"-14.5\") should return -15.\n    \
    \    // >>> closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from", "        // >>> closestInteger((\"\
    10\"))\n        // (10l)\n        // >>> closestInteger((\"15.3\"))\n        //\
    \ (15l)\n        // >>> closestInteger((\"-15.3\"))\n        // (-15l)\n     \
    \   // >>> closestInteger((\"-15.6\"))\n        // (-16l)\n        // >>> closestInteger((\"\
    -15.5\"))\n        // (-16l)\n        // >>> closestInteger((\"-15.4\"))\n   \
    \     // (-15l)\n        // >>> closestInteger((\"15.6\"))\n        // (16l)\n\
    \        // >>> closestInteger((\"15.5\"))\n        // (16l)\n        // >>> closestInteger((\"\
    15.4\"))\n        // (15l)\n        // >>> closestInteger((\"0\"))\n        //\
    \ (0l)\n        // >>> closestInteger((\"-0\"))\n        // (0l)\n        // >>>\
    \ closestInteger((\"-0.0\"))\n        // (0l)\n        // >>> closestInteger((\"\
    0.0\"))\n        // (0l)\n        // >>> closestInteger((\"0.1\"))\n        //\
    \ (0l)\n        // >>> closestInteger((\"-0.1\"))\n        // (0l)\n        //\
    \ >>> closestInteger((\"-0.5\"))\n        // (-1l)\n        // >>> closestInteger((\"\
    0.5\"))\n        // (1l)\n        // >>> closestInteger((\"0.6\"))\n        //\
    \ (1l)\n        // >>> closestInteger((\"-0.6\"))\n        // (-1l)\n        //\
    \ >>> closestInteger((\"0.4\"))\n        // (0l)\n        // >>> closestInteger((\"\
    -0.4\"))\n        // (0l)\n        // >>> closestInteger((\"0.9\"))\n        //\
    \ (1l)\n        // >>> closestInteger((\"-0.9\"))\n        // (-1l)\n        //\
    \ >>> closestInteger((\"0.99\"))\n        // (1l)\n        // >>> closestInteger((\"\
    -0.99\"))\n        // (-1l)\n        // >>> closestInteger((\"0.01\"))\n     \
    \   // (0l)\n        // >>> closestInteger((\"-0.01", "        // >>> closestInteger((\"\
    10\"))\n        // (10l)\n        // >>> closestInteger((\"15.3\"))\n        //\
    \ (15l)\n        // >>> closestInteger((\"-15.3\"))\n        // (-15l)\n     \
    \   // >>> closestInteger((\"-15.6\"))\n        // (-16l)\n        // >>> closestInteger((\"\
    -15.5\"))\n        // (-16l)\n        // >>> closestInteger((\"-15.4\"))\n   \
    \     // (-15l)\n        // >>> closestInteger((\"-15.0\"))\n        // (-15l)\n\
    \        // >>> closestInteger((\"-14.9\"))\n        // (-15l)\n        // >>>\
    \ closestInteger((\"14.9\"))\n        // (15l)\n        // >>> closestInteger((\"\
    15.0\"))\n        // (15l)\n        // >>> closestInteger((\"15.4\"))\n      \
    \  // (15l)\n        // >>> closestInteger((\"15.5\"))\n        // (16l)\n   \
    \     // >>> closestInteger((\"15.6\"))\n        // (16l)\n        // >>> closestInteger((\"\
    0.0\"))\n        // (0l)\n        // >>> closestInteger((\"0.4\"))\n        //\
    \ (0l)\n        // >>> closestInteger((\"0.5\"))\n        // (1l)\n        //\
    \ >>> closestInteger((\"0.6\"))\n        // (1l)\n        // >>> closestInteger((\"\
    -0.6\"))\n        // (-1l)\n        // >>> closestInteger((\"-0.5\"))\n      \
    \  // (-1l)\n        // >>> closestInteger((\"-0.4\"))\n        // (0l)\n    \
    \    // >>> closestInteger((\"-0.0\"))\n        // (0l)\n        // >>> closestInteger((\"\
    -0.1\"))\n        // (0l)\n        // >>> closestInteger((\"-0.2\"))\n       \
    \ // (0l)\n        // >>> closestInteger((\"-0.3\"))\n        // (0l)\n      \
    \  // >>> closestInteger((\"-0.4\"))\n        // (0l)\n        // >>> closestInteger((\"\
    -0.5\"))\n        // (-1l)\n        // >>> closest", "        // >>> closestInteger((\"\
    10\"))\n        // (10l)\n        // >>> closestInteger((\"15.3\"))\n        //\
    \ (15l)\n        // Note:\n        // Rounding away from zero means that if the\
    \ given number is equidistant\n        // from two integers, the one you should\
    \ return is the one that is the\n        // farthest from zero. For example closest_integer(\"\
    14.5\") should\n        // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n        double d = Double.parseDouble(value);\n        long l = (long)\
    \ d;\n        if (d > 0) {\n            if (d - l > 0.5) {\n                return\
    \ l + 1;\n            } else {\n                return l;\n            }\n   \
    \     } else {\n            if (d - l < -0.5) {\n                return l - 1;\n\
    \            } else {\n                return l;\n            }\n        }", " \
    \       // >>> closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from zero means that if the given number\
    \ is equidistant\n        // from two integers, the one you should return is the\
    \ one that is the\n        // farthest from zero. For example closest_integer(\"\
    14.5\") should\n        // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n        // >>> closestInteger((\"10\"))\n        // (10l)\n        //\
    \ >>> closestInteger((\"15.3\"))\n        // (15l)\n        // Note:\n       \
    \ // Rounding away from zero means that if the given number is equidistant\n \
    \       // from two integers, the one you should return is the one that is the\n\
    \        // farthest from zero. For example closest_integer(\"14.5\") should\n\
    \        // return 15 and closest_integer(\"-14.5\") should return -15.\n    \
    \    // >>> closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from", "        // >>> closestInteger((\"\
    10\"))\n        // (10l)\n        // >>> closestInteger((\"15.3\"))\n        //\
    \ (15l)\n        // Note:\n        // Rounding away from zero means that if the\
    \ given number is equidistant\n        // from two integers, the one you should\
    \ return is the one that is the\n        // farthest from zero. For example closest_integer(\"\
    14.5\") should\n        // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n        // >>> closestInteger((\"10\"))\n        // (10l)\n        //\
    \ >>> closestInteger((\"15.3\"))\n        // (15l)\n        // Note:\n       \
    \ // Rounding away from zero means that if the given number is equidistant\n \
    \       // from two integers, the one you should return is the one that is the\n\
    \        // farthest from zero. For example closest_integer(\"14.5\") should\n\
    \        // return 15 and closest_integer(\"-14.5\") should return -15.\n    \
    \    // >>> closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from zero means that if the given number\
    \ is equidistant\n        // from two integers, the one you should return is the\
    \ one that is the\n        // farthest from zero. For example closest_integer(\"\
    14.5\") should\n        // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n        // >>> closestInteger((\"10\"))\n        // (10l)\n        //\
    \ >>> closestInteger((\"15.3\"))\n        // (15l)\n        // Note:\n       \
    \ // Rounding away from", "        // >>> closestInteger((\"10\"))\n        //\
    \ (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n       \
    \ // Note:\n        // Rounding away from zero means that if the given number\
    \ is equidistant\n        // from two integers, the one you should return is the\
    \ one that is the\n        // farthest from zero. For example closest_integer(\"\
    14.5\") should\n        // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n        // >>> closestInteger((\"10\"))\n        // (10l)\n        //\
    \ >>> closestInteger((\"15.3\"))\n        // (15l)\n        // Note:\n       \
    \ // Rounding away from zero means that if the given number is equidistant\n \
    \       // from two integers, the one you should return is the one that is the\n\
    \        // farthest from zero. For example closest_integer(\"14.5\") should\n\
    \        // return 15 and closest_integer(\"-14.5\") should return -15.\n    \
    \    // >>> closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from zero means that if the given number\
    \ is equidistant\n        // from two integers, the one you should return is the\
    \ one that is the\n        // farthest from zero. For example closest_integer(\"\
    14.5\") should\n        // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n        // >>> closestInteger((\"10\"))\n        // (10l)\n        //\
    \ >>> closestInteger((\"15.3\"))\n        // (15l)\n        // Note:\n       \
    \ // Rounding away from", '        return 0;', "        // >>> closestInteger((\"\
    10\"))\n        // (10l)\n        // >>> closestInteger((\"15.3\"))\n        //\
    \ (15l)\n        // >>> closestInteger((\"14.5\"))\n        // (15l)\n       \
    \ // >>> closestInteger((\"-14.5\"))\n        // (-15l)\n        // >>> closestInteger((\"\
    -14.4\"))\n        // (-14l)\n        // >>> closestInteger((\"-14.6\"))\n   \
    \     // (-15l)\n        // >>> closestInteger((\"-14.6\"))\n        // (-15l)\n\
    \        // >>> closestInteger((\"-14.6\"))\n        // (-15l)\n        // >>>\
    \ closestInteger((\"-14.6\"))\n        // (-15l)\n        // >>> closestInteger((\"\
    -14.6\"))\n        // (-15l)\n        // >>> closestInteger((\"-14.6\"))\n   \
    \     // (-15l)\n        // >>> closestInteger((\"-14.6\"))\n        // (-15l)\n\
    \        // >>> closestInteger((\"-14.6\"))\n        // (-15l)\n        // >>>\
    \ closestInteger((\"-14.6\"))\n        // (-15l)\n        // >>> closestInteger((\"\
    -14.6\"))\n        // (-15l)\n        // >>> closestInteger((\"-14.6\"))\n   \
    \     // (-15l)\n        // >>> closestInteger((\"-14.6\"))\n        // (-15l)\n\
    \        // >>> closestInteger((\"-14.6\"))\n        // (-15l)\n        // >>>\
    \ closestInteger((\"-14.6\"))\n        // (-15l)\n        // >>> closestInteger((\"\
    -14.6\"))\n        // (-15l)\n        // >>> closestInteger((\"-14.6\"))\n   \
    \     // (-15l)\n        // >>> closestInteger((\"-14.6\"))\n        // (-15l)\n\
    \        // >>> closestInteger((\"-14.6\"))\n        // (-15l)\n        // >>>\
    \ closestInteger((\"-14.6\"))\n        // (-15l)\n        // >>> closestInteger((\"\
    -14.6\"))\n        // (-15l)\n        // >>> closestInteger((\"-14.6\"))\n   \
    \     // (-", "        // >>> closestInteger((\"10\"))\n        // (10l)\n   \
    \     // >>> closestInteger((\"15.3\"))\n        // (15l)\n        // Note:\n\
    \        // Rounding away from zero means that if the given number is equidistant\n\
    \        // from two integers, the one you should return is the one that is the\n\
    \        // farthest from zero. For example closest_integer(\"14.5\") should\n\
    \        // return 15 and closest_integer(\"-14.5\") should return -15.\n    \
    \    // >>> closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from zero means that if the given number\
    \ is equidistant\n        // from two integers, the one you should return is the\
    \ one that is the\n        // farthest from zero. For example closest_integer(\"\
    14.5\") should\n        // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n        // >>> closestInteger((\"10\"))\n        // (10l)\n        //\
    \ >>> closestInteger((\"15.3\"))\n        // (15l)\n        // Note:\n       \
    \ // Rounding away from zero means that if the given number is equidistant\n \
    \       // from two integers, the one you should return is the one that is the\n\
    \        // farthest from zero. For example closest_integer(\"14.5\") should\n\
    \        // return 15 and closest_integer(\"-14.5\") should return -15.\n    \
    \    // >>> closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from",
  "        // >>> your code here <<<\n        return 0l;", "        // >>> closestInteger((\"\
    10\"))\n        // (10l)\n        // >>> closestInteger((\"15.3\"))\n        //\
    \ (15l)\n        // Note:\n        // Rounding away from zero means that if the\
    \ given number is equidistant\n        // from two integers, the one you should\
    \ return is the one that is the\n        // farthest from zero. For example closest_integer(\"\
    14.5\") should\n        // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n        // >>> closestInteger((\"10\"))\n        // (10l)\n        //\
    \ >>> closestInteger((\"15.3\"))\n        // (15l)\n        // Note:\n       \
    \ // Rounding away from zero means that if the given number is equidistant\n \
    \       // from two integers, the one you should return is the one that is the\n\
    \        // farthest from zero. For example closest_integer(\"14.5\") should\n\
    \        // return 15 and closest_integer(\"-14.5\") should return -15.\n    \
    \    // >>> closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from zero means that if the given number\
    \ is equidistant\n        // from two integers, the one you should return is the\
    \ one that is the\n        // farthest from zero. For example closest_integer(\"\
    14.5\") should\n        // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n        // >>> closestInteger((\"10\"))\n        // (10l)\n        //\
    \ >>> closestInteger((\"15.3\"))\n        // (15l)\n        // Note:\n       \
    \ // Rounding away from"]
stop_tokens:
- "\n    }\n"
