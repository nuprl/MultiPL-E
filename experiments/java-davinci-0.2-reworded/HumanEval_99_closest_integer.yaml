name: HumanEval_99_closest_integer
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // Create a function that takes a value (string) representing\
  \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
  \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
  \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"))\n\
  \    // (15l)\n    // Note:\n    // Rounding away from zero means that if the given\
  \ number is equidistant\n    // from two integers, the one you should return is\
  \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
  14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n\
  \    public static long closestInteger(String value) {\n"
tests: "    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
  10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
  -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
  0\")) == (0l));\n    }\n\n}\n"
completions: ['        return 0;', '        return 0;', '        return 0l;', "  \
    \      // >>> closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        return 0;", "        double d = Double.parseDouble(value);\n\
    \        return (long)Math.round(d);", '        return 0;', "        // >>> closestInteger((\"\
    10\"))\n        // (10l)\n        // >>> closestInteger((\"15.3\"))\n        //\
    \ (15l)\n        // >>> closestInteger((\"14.5\"))\n        // (15l)\n       \
    \ // >>> closestInteger((\"-14.5\"))\n        // (-15l)\n        // >>> closestInteger((\"\
    -14.6\"))\n        // (-15l)\n        // >>> closestInteger((\"-14.4\"))\n   \
    \     // (-14l)\n        // >>> closestInteger((\"14.4\"))\n        // (14l)\n\
    \        // >>> closestInteger((\"14.6\"))\n        // (15l)\n        // >>> closestInteger((\"\
    -14.6\"))\n        // (-15l)\n        // >>> closestInteger((\"-14.4\"))\n   \
    \     // (-14l)\n        // >>> closestInteger((\"14.4\"))\n        // (14l)\n\
    \        // >>> closestInteger((\"14.6\"))\n        // (15l)\n        // >>> closestInteger((\"\
    -14.6\"))\n        // (-15l)\n        // >>> closestInteger((\"-14.4\"))\n   \
    \     // (-14l)\n        // >>> closestInteger((\"14.4\"))\n        // (14l)\n\
    \        // >>> closestInteger((\"14.6\"))\n        // (15l)\n        // >>> closestInteger((\"\
    -14.6\"))\n        // (-15l)\n        // >>> closestInteger((\"-14.4\"))\n   \
    \     // (-14l)\n        // >>> closestInteger((\"14.4\"))\n        // (14l)\n\
    \        // >>> closestInteger((\"14.6\"))\n        // (15l)\n        // >>> closestInteger((\"\
    -14.6\"))\n        // (-15l)\n        // >>> closestInteger((\"-14.4\"))\n   \
    \     // (-14l)\n        // >>> closestInteger((\"14.4\"))\n        // (14l)\n\
    \        // >>> closestInteger((\"14.6\"))\n        // (15l)\n        // >>> closestInteger((\"\
    -14.6\"))\n        // (-15l)\n        // >>> closestInteger((\"-14.4\"))\n   \
    \     // (-14l)\n        // >>> closestInteger(", "        // Write your code\
    \ here\n        // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        return 0;",
  '        return 0;', '        return 0;', "        // >>> closestInteger((\"10\"\
    ))\n        // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n\
    \        // Note:\n        // Rounding away from zero means that if the given\
    \ number is equidistant\n        // from two integers, the one you should return\
    \ is the one that is the\n        // farthest from zero. For example closest_integer(\"\
    14.5\") should\n        // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n        // >>> closestInteger((\"10\"))\n        // (10l)\n        //\
    \ >>> closestInteger((\"15.3\"))\n        // (15l)\n        // Note:\n       \
    \ // Rounding away from zero means that if the given number is equidistant\n \
    \       // from two integers, the one you should return is the one that is the\n\
    \        // farthest from zero. For example closest_integer(\"14.5\") should\n\
    \        // return 15 and closest_integer(\"-14.5\") should return -15.\n    \
    \    // >>> closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from zero means that if the given number\
    \ is equidistant\n        // from two integers, the one you should return is the\
    \ one that is the\n        // farthest from zero. For example closest_integer(\"\
    14.5\") should\n        // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n        // >>> closestInteger((\"10\"))\n        // (10l)\n        //\
    \ >>> closestInteger((\"15.3\"))\n        // (15l)\n        // Note:\n       \
    \ // Rounding away from", "        // >>> closestInteger((\"10\"))\n        //\
    \ (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n       \
    \ // Note:\n        // Rounding away from zero means that if the given number\
    \ is equidistant\n        // from two integers, the one you should return is the\
    \ one that is the\n        // farthest from zero. For example closest_integer(\"\
    14.5\") should\n        // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n        // >>> closestInteger((\"10\"))\n        // (10l)\n        //\
    \ >>> closestInteger((\"15.3\"))\n        // (15l)\n        // Note:\n       \
    \ // Rounding away from zero means that if the given number is equidistant\n \
    \       // from two integers, the one you should return is the one that is the\n\
    \        // farthest from zero. For example closest_integer(\"14.5\") should\n\
    \        // return 15 and closest_integer(\"-14.5\") should return -15.\n    \
    \    // >>> closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from zero means that if the given number\
    \ is equidistant\n        // from two integers, the one you should return is the\
    \ one that is the\n        // farthest from zero. For example closest_integer(\"\
    14.5\") should\n        // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n        // >>> closestInteger((\"10\"))\n        // (10l)\n        //\
    \ >>> closestInteger((\"15.3\"))\n        // (15l)\n        // Note:\n       \
    \ // Rounding away from", "        // >>> closestInteger((\"10\"))\n        //\
    \ (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n       \
    \ // Note:\n        // Rounding away from zero means that if the given number\
    \ is equidistant\n        // from two integers, the one you should return is the\
    \ one that is the\n        // farthest from zero. For example closest_integer(\"\
    14.5\") should\n        // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n        // >>> closestInteger((\"10\"))\n        // (10l)\n        //\
    \ >>> closestInteger((\"15.3\"))\n        // (15l)\n        // Note:\n       \
    \ // Rounding away from zero means that if the given number is equidistant\n \
    \       // from two integers, the one you should return is the one that is the\n\
    \        // farthest from zero. For example closest_integer(\"14.5\") should\n\
    \        // return 15 and closest_integer(\"-14.5\") should return -15.\n    \
    \    // >>> closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from zero means that if the given number\
    \ is equidistant\n        // from two integers, the one you should return is the\
    \ one that is the\n        // farthest from zero. For example closest_integer(\"\
    14.5\") should\n        // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n        // >>> closestInteger((\"10\"))\n        // (10l)\n        //\
    \ >>> closestInteger((\"15.3\"))\n        // (15l)\n        // Note:\n       \
    \ // Rounding away from", "        // >>> closestInteger((\"10\"))\n        //\
    \ (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n       \
    \ // Note:\n        // Rounding away from zero means that if the given number\
    \ is equidistant\n        // from two integers, the one you should return is the\
    \ one that is the\n        // farthest from zero. For example closest_integer(\"\
    14.5\") should\n        // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n        // >>> closestInteger((\"10\"))\n        // (10l)\n        //\
    \ >>> closestInteger((\"15.3\"))\n        // (15l)\n        // Note:\n       \
    \ // Rounding away from zero means that if the given number is equidistant\n \
    \       // from two integers, the one you should return is the one that is the\n\
    \        // farthest from zero. For example closest_integer(\"14.5\") should\n\
    \        // return 15 and closest_integer(\"-14.5\") should return -15.\n    \
    \    // >>> closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from zero means that if the given number\
    \ is equidistant\n        // from two integers, the one you should return is the\
    \ one that is the\n        // farthest from zero. For example closest_integer(\"\
    14.5\") should\n        // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n        // >>> closestInteger((\"10\"))\n        // (10l)\n        //\
    \ >>> closestInteger((\"15.3\"))\n        // (15l)\n        // Note:\n       \
    \ // Rounding away from", "        // >>> closestInteger((\"10\"))\n        //\
    \ (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n       \
    \ // >>> closestInteger((\"14.5\"))\n        // (15l)\n        // >>> closestInteger((\"\
    -14.5\"))\n        // (-15l)\n        // >>> closestInteger((\"-14.6\"))\n   \
    \     // (-15l)\n        // >>> closestInteger((\"-14.4\"))\n        // (-14l)\n\
    \        // >>> closestInteger((\"-14.0\"))\n        // (-14l)\n        // >>>\
    \ closestInteger((\"-14.1\"))\n        // (-14l)\n        // >>> closestInteger((\"\
    -14.2\"))\n        // (-14l)\n        // >>> closestInteger((\"-14.3\"))\n   \
    \     // (-14l)\n        // >>> closestInteger((\"-14.4\"))\n        // (-14l)\n\
    \        // >>> closestInteger((\"-14.5\"))\n        // (-15l)\n        // >>>\
    \ closestInteger((\"-14.6\"))\n        // (-15l)\n        // >>> closestInteger((\"\
    -14.7\"))\n        // (-15l)\n        // >>> closestInteger((\"-14.8\"))\n   \
    \     // (-15l)\n        // >>> closestInteger((\"-14.9\"))\n        // (-15l)\n\
    \        // >>> closestInteger((\"-15.0\"))\n        // (-15l)\n        // >>>\
    \ closestInteger((\"-15.1\"))\n        // (-15l)\n        // >>> closestInteger((\"\
    -15.2\"))\n        // (-15l)\n        // >>> closestInteger((\"-15.3\"))\n   \
    \     // (-15l)\n        // >>> closestInteger((\"-15.4\"))\n        // (-15l)\n\
    \        // >>> closestInteger((\"-15.5\"))\n        // (-16l)\n        // >>>\
    \ closestInteger((\"-15.6\"))\n        // (-16l)\n        // >>> closestInteger((\"\
    -15.7\"))\n        // (-16l)\n        // >>> closestInteger((\"-15.8\"))\n   \
    \     // (-16l)\n        // >>> closestInteger((\"-15.9\"))\n        // (-", " \
    \       // >>> closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // >>> closestInteger((\"15.7\"))\n      \
    \  // (16l)\n        // >>> closestInteger((\"-15.7\"))\n        // (-16l)\n \
    \       // >>> closestInteger((\"-15.3\"))\n        // (-15l)\n        // >>>\
    \ closestInteger((\"-15.1\"))\n        // (-15l)\n        // >>> closestInteger((\"\
    -15.0\"))\n        // (-15l)\n        // >>> closestInteger((\"-14.9\"))\n   \
    \     // (-15l)\n        // >>> closestInteger((\"-14.5\"))\n        // (-15l)\n\
    \        // >>> closestInteger((\"-14.1\"))\n        // (-14l)\n        // >>>\
    \ closestInteger((\"-14.0\"))\n        // (-14l)\n        // >>> closestInteger((\"\
    -13.9\"))\n        // (-14l)\n        // >>> closestInteger((\"-13.5\"))\n   \
    \     // (-14l)\n        // >>> closestInteger((\"-13.1\"))\n        // (-13l)\n\
    \        // >>> closestInteger((\"-13.0\"))\n        // (-13l)\n        // >>>\
    \ closestInteger((\"-12.9\"))\n        // (-13l)\n        // >>> closestInteger((\"\
    -12.5\"))\n        // (-13l)\n        // >>> closestInteger((\"-12.1\"))\n   \
    \     // (-12l)\n        // >>> closestInteger((\"-12.0\"))\n        // (-12l)\n\
    \        // >>> closestInteger((\"-11.9\"))\n        // (-12l)\n        // >>>\
    \ closestInteger((\"-11.5\"))\n        // (-12l)\n        // >>> closestInteger((\"\
    -11.1\"))\n        // (-11l)\n        // >>> closestInteger((\"-11.0\"))\n   \
    \     // (-11l)\n        // >>> closestInteger((\"-10.9\"))\n        // (-11l)\n\
    \        // >>> closestInteger((\"-10.5\"))\n        // (-11l)\n        // >>>\
    \ closestInteger((\"-10.1\"))\n        // (-", "        // >>> closestInteger((\"\
    10\"))\n        // (10l)\n        // >>> closestInteger((\"15.3\"))\n        //\
    \ (15l)\n        // Note:\n        // Rounding away from zero means that if the\
    \ given number is equidistant\n        // from two integers, the one you should\
    \ return is the one that is the\n        // farthest from zero. For example closest_integer(\"\
    14.5\") should\n        // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n        BigDecimal bd = new BigDecimal(value);\n        bd = bd.setScale(0,\
    \ RoundingMode.HALF_UP);\n        return bd.longValue();", '        return 0;',
  "        // >>> closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from zero means that if the given number\
    \ is equidistant\n        // from two integers, the one you should return is the\
    \ one that is the\n        // farthest from zero. For example closest_integer(\"\
    14.5\") should\n        // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n        // >>> closestInteger((\"10\"))\n        // (10l)\n        //\
    \ >>> closestInteger((\"15.3\"))\n        // (15l)\n        // Note:\n       \
    \ // Rounding away from zero means that if the given number is equidistant\n \
    \       // from two integers, the one you should return is the one that is the\n\
    \        // farthest from zero. For example closest_integer(\"14.5\") should\n\
    \        // return 15 and closest_integer(\"-14.5\") should return -15.\n    \
    \    // >>> closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from", "        // >>> closestInteger((\"\
    10\"))\n        // (10l)\n        // >>> closestInteger((\"15.3\"))\n        //\
    \ (15l)\n        // Note:\n        // Rounding away from zero means that if the\
    \ given number is equidistant\n        // from two integers, the one you should\
    \ return is the one that is the\n        // farthest from zero. For example closest_integer(\"\
    14.5\") should\n        // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n        // >>> closestInteger((\"10\"))\n        // (10l)\n        //\
    \ >>> closestInteger((\"15.3\"))\n        // (15l)\n        // Note:\n       \
    \ // Rounding away from zero means that if the given number is equidistant\n \
    \       // from two integers, the one you should return is the one that is the\n\
    \        // farthest from zero. For example closest_integer(\"14.5\") should\n\
    \        // return 15 and closest_integer(\"-14.5\") should return -15.\n    \
    \    // >>> closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from zero means that if the given number\
    \ is equidistant\n        // from two integers, the one you should return is the\
    \ one that is the\n        // farthest from zero. For example closest_integer(\"\
    14.5\") should\n        // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n        // >>> closestInteger((\"10\"))\n        // (10l)\n        //\
    \ >>> closestInteger((\"15.3\"))\n        // (15l)\n        // Note:\n       \
    \ // Rounding away from"]
stop_tokens:
- "\n    }\n"
