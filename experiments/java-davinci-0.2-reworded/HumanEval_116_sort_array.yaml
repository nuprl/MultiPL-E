name: HumanEval_116_sort_array
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // In this Kata, you have to sort an array array list of non-negative\
  \ integers according to\n    // number of ones in their binary representation in\
  \ ascending order.\n    // For similar number of ones, sort based on decimal value.\n\
  \    // It must be implemented like this:\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
  \ (long)5l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
  \ (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
  \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
  \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
  \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
  \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long> sortArray(ArrayList<Long>\
  \ arr) {\n"
tests: "    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
  \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
  \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
  \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l, (long)-4l,\
  \ (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
  \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
  \ (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
  \ (long)1l, (long)2l, (long)4l, (long)3l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new\
  \ ArrayList<Long>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
  \ (long)5l, (long)77l, (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l,\
  \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
  \ (long)4l, (long)4l, (long)3l, (long)3l, (long)5l, (long)5l, (long)5l, (long)7l,\
  \ (long)77l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)3l,\
  \ (long)6l, (long)44l, (long)12l, (long)32l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l,\
  \ (long)3l, (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new\
  \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new\
  \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)16l, (long)32l)))));\n\
  \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l,\
  \ (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l,\
  \ (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
completions: ["        ArrayList<Long> sorted = new ArrayList<Long>();\n        ArrayList<Long>\
    \ negative = new ArrayList<Long>();\n        ArrayList<Long> positive = new ArrayList<Long>();\n\
    \        for (Long l : arr) {\n            if (l < 0) {\n                negative.add(l);\n\
    \            } else {\n                positive.add(l);\n            }\n     \
    \   }\n        Collections.sort(negative);\n        Collections.sort(positive);\n\
    \        Collections.reverse(negative);\n        for (Long l : negative) {\n \
    \           sorted.add(l);\n        }\n        for (Long l : positive) {\n   \
    \         sorted.add(l);\n        }\n        return sorted;", "        // your\
    \ code here\n        return arr;", "        ArrayList<Long> sorted = new ArrayList<Long>();\n\
    \        ArrayList<Long> zeros = new ArrayList<Long>();\n        ArrayList<Long>\
    \ ones = new ArrayList<Long>();\n        ArrayList<Long> twos = new ArrayList<Long>();\n\
    \        ArrayList<Long> threes = new ArrayList<Long>();\n        ArrayList<Long>\
    \ fours = new ArrayList<Long>();\n        ArrayList<Long> fives = new ArrayList<Long>();\n\
    \        ArrayList<Long> sixes = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sevens = new ArrayList<Long>();\n        ArrayList<Long> eights = new ArrayList<Long>();\n\
    \        ArrayList<Long> nines = new ArrayList<Long>();\n        ArrayList<Long>\
    \ tens = new ArrayList<Long>();\n        ArrayList<Long> elevens = new ArrayList<Long>();\n\
    \        ArrayList<Long> twelves = new ArrayList<Long>();\n        ArrayList<Long>\
    \ thirteens = new ArrayList<Long>();\n        ArrayList<Long> fourteens = new\
    \ ArrayList<Long>();\n        ArrayList<Long> fifteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> sixteens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ seventeens = new ArrayList<Long>();\n        ArrayList<Long> eightteens = new\
    \ ArrayList<Long>();\n        ArrayList<Long> nineteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> twenties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ thirtys = new ArrayList<Long>();\n        ArrayList<Long> fortys = new ArrayList<Long>();\n\
    \        ArrayList<Long> fiftys = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sixtys = new ArrayList<Long>();\n        ArrayList<Long> seventys = new ArrayList<Long>();\n\
    \        ArrayList<Long> eighty = new ArrayList<Long>();\n        ArrayList<Long>\
    \ ninety = new ArrayList<Long>();\n        ArrayList<Long> hundred = new ArrayList<Long>();",
  "        ArrayList<Long> sorted = new ArrayList<Long>();\n        for (long i =\
    \ 0; i < arr.size(); i++) {\n            sorted.add(arr.get((int)i));\n      \
    \  }\n        Collections.sort(sorted, new Comparator<Long>() {\n            @Override\n\
    \            public int compare(Long a, Long b) {\n                String aBinary\
    \ = Long.toBinaryString(a);\n                String bBinary = Long.toBinaryString(b);\n\
    \                int aOnes = 0;\n                int bOnes = 0;\n            \
    \    for (int i = 0; i < aBinary.length(); i++) {\n                    if (aBinary.charAt(i)\
    \ == '1') {\n                        aOnes++;\n                    }\n       \
    \         }\n                for (int i = 0; i < bBinary.length(); i++) {\n  \
    \                  if (bBinary.charAt(i) == '1') {\n                        bOnes++;\n\
    \                    }\n                }\n                if (aOnes == bOnes)\
    \ {\n                    return a.compareTo(b);\n                } else {\n  \
    \                  return aOnes - bOnes;\n                }\n            }\n \
    \       });\n        return sorted;", "        ArrayList<Long> sorted = new ArrayList<Long>();\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            long num = arr.get(i);\n\
    \            int ones = 0;\n            while (num > 0) {\n                ones\
    \ += num % 2;\n                num /= 2;\n            }\n            sorted.add(ones);\n\
    \        }\n        for (int i = 0; i < sorted.size(); i++) {\n            for\
    \ (int j = i + 1; j < sorted.size(); j++) {\n                if (sorted.get(i)\
    \ > sorted.get(j)) {\n                    long temp = sorted.get(i);\n       \
    \             sorted.set(i, sorted.get(j));\n                    sorted.set(j,\
    \ temp);\n                    temp = arr.get(i);\n                    arr.set(i,\
    \ arr.get(j));\n                    arr.set(j, temp);\n                }\n   \
    \         }\n        }\n        return arr;", "        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        ArrayList<Long> temp = new ArrayList<Long>();\n\
    \        ArrayList<Long> temp2 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ temp3 = new ArrayList<Long>();\n        ArrayList<Long> temp4 = new ArrayList<Long>();\n\
    \        ArrayList<Long> temp5 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ temp6 = new ArrayList<Long>();\n        ArrayList<Long> temp7 = new ArrayList<Long>();\n\
    \        ArrayList<Long> temp8 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ temp9 = new ArrayList<Long>();\n        ArrayList<Long> temp10 = new ArrayList<Long>();\n\
    \        ArrayList<Long> temp11 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ temp12 = new ArrayList<Long>();\n        ArrayList<Long> temp13 = new ArrayList<Long>();\n\
    \        ArrayList<Long> temp14 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ temp15 = new ArrayList<Long>();\n        ArrayList<Long> temp16 = new ArrayList<Long>();\n\
    \        ArrayList<Long> temp17 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ temp18 = new ArrayList<Long>();\n        ArrayList<Long> temp19 = new ArrayList<Long>();\n\
    \        ArrayList<Long> temp20 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ temp21 = new ArrayList<Long>();\n        ArrayList<Long> temp22 = new ArrayList<Long>();\n\
    \        ArrayList<Long> temp23 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ temp24 = new ArrayList<Long>();\n        ArrayList<Long> temp25 = new ArrayList<Long>();\n\
    \        ArrayList<Long> temp26 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ temp27 = new ArrayList<Long>();\n        ArrayList<Long> temp28 = new ArrayList<Long>();\n\
    \        ArrayList<Long> temp29 = new ArrayList<Long>();\n        ArrayList",
  "        ArrayList<Long> sorted = new ArrayList<>();\n        for (Long l : arr)\
    \ {\n            sorted.add(l);\n        }\n        Collections.sort(sorted, new\
    \ Comparator<Long>() {\n            @Override\n            public int compare(Long\
    \ l1, Long l2) {\n                int b1 = Long.bitCount(l1);\n              \
    \  int b2 = Long.bitCount(l2);\n                if (b1 == b2) {\n            \
    \        return l1.compareTo(l2);\n                }\n                return b1\
    \ - b2;\n            }\n        });\n        return sorted;", "        ArrayList<Long>\
    \ sorted = new ArrayList<Long>();\n        for (int i = 0; i < arr.size(); i++)\
    \ {\n            sorted.add(arr.get(i));\n        }\n        Collections.sort(sorted,\
    \ new Comparator<Long>() {\n            @Override\n            public int compare(Long\
    \ a, Long b) {\n                int aOnes = countOnes(a);\n                int\
    \ bOnes = countOnes(b);\n                if (aOnes == bOnes) {\n             \
    \       return a.compareTo(b);\n                } else {\n                   \
    \ return aOnes - bOnes;\n                }\n            }\n        });\n     \
    \   return sorted;", "        ArrayList<Long> sorted = new ArrayList<Long>();\n\
    \        ArrayList<Long> zeros = new ArrayList<Long>();\n        ArrayList<Long>\
    \ ones = new ArrayList<Long>();\n        ArrayList<Long> twos = new ArrayList<Long>();\n\
    \        ArrayList<Long> threes = new ArrayList<Long>();\n        ArrayList<Long>\
    \ fours = new ArrayList<Long>();\n        ArrayList<Long> fives = new ArrayList<Long>();\n\
    \        ArrayList<Long> sixes = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sevens = new ArrayList<Long>();\n        ArrayList<Long> eights = new ArrayList<Long>();\n\
    \        ArrayList<Long> nines = new ArrayList<Long>();\n        ArrayList<Long>\
    \ tens = new ArrayList<Long>();\n        ArrayList<Long> elevens = new ArrayList<Long>();\n\
    \        ArrayList<Long> twelves = new ArrayList<Long>();\n        ArrayList<Long>\
    \ thirteens = new ArrayList<Long>();\n        ArrayList<Long> fourteens = new\
    \ ArrayList<Long>();\n        ArrayList<Long> fifteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> sixteens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ seventeens = new ArrayList<Long>();\n        ArrayList<Long> eighteen = new\
    \ ArrayList<Long>();\n        ArrayList<Long> nineteen = new ArrayList<Long>();\n\
    \        ArrayList<Long> twenty = new ArrayList<Long>();\n        ArrayList<Long>\
    \ twentyone = new ArrayList<Long>();\n        ArrayList<Long> twentytwo = new\
    \ ArrayList<Long>();\n        ArrayList<Long> twentythree = new ArrayList<Long>();\n\
    \        ArrayList<Long> twentyfour = new ArrayList<Long>();\n        ArrayList<Long>\
    \ twentyfive = new ArrayList<Long>();\n        ArrayList<Long> twentysix = new\
    \ ArrayList<Long>();\n        ArrayList<Long> twentyseven = new ArrayList<Long>();\n\
    \        ArrayList<Long> twentyeight = new ArrayList<Long>();", "        ArrayList<Long>\
    \ sorted = new ArrayList<Long>();\n        ArrayList<Long> zeros = new ArrayList<Long>();\n\
    \        ArrayList<Long> ones = new ArrayList<Long>();\n        ArrayList<Long>\
    \ twos = new ArrayList<Long>();\n        ArrayList<Long> threes = new ArrayList<Long>();\n\
    \        ArrayList<Long> fours = new ArrayList<Long>();\n        ArrayList<Long>\
    \ fives = new ArrayList<Long>();\n        ArrayList<Long> sixes = new ArrayList<Long>();\n\
    \        ArrayList<Long> sevens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ eights = new ArrayList<Long>();\n        ArrayList<Long> nines = new ArrayList<Long>();\n\
    \        ArrayList<Long> tens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ elevens = new ArrayList<Long>();\n        ArrayList<Long> twelves = new ArrayList<Long>();\n\
    \        ArrayList<Long> thirteens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ fourteens = new ArrayList<Long>();\n        ArrayList<Long> fifteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> sixteens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ seventeens = new ArrayList<Long>();\n        ArrayList<Long> eightteens = new\
    \ ArrayList<Long>();\n        ArrayList<Long> nineteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> twenties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ negatives = new ArrayList<Long>();\n        for (Long i : arr) {\n         \
    \   if (i < 0) {\n                negatives.add(i);\n            } else if (i\
    \ == 0) {\n                zeros.add(i);\n            } else if (i == 1) {\n \
    \               ones.add(i);\n            } else if (i == 2) {\n             \
    \   twos.add(i);\n            } else if (i == 3) {\n                threes.add(i);\n\
    \            } else if (i == 4) {", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        ArrayList<Long> ones = new ArrayList<Long>();\n        ArrayList<Long>\
    \ zeros = new ArrayList<Long>();\n        for (Long i : arr) {\n            if\
    \ (Long.bitCount(i) == 0) {\n                zeros.add(i);\n            } else\
    \ {\n                ones.add(i);\n            }\n        }\n        Collections.sort(ones);\n\
    \        Collections.sort(zeros);\n        result.addAll(ones);\n        result.addAll(zeros);\n\
    \        return result;", "        ArrayList<Long> sorted = new ArrayList<Long>();\n\
    \        for (Long l : arr) {\n            sorted.add(l);\n        }\n       \
    \ Collections.sort(sorted, new Comparator<Long>() {\n            @Override\n \
    \           public int compare(Long l1, Long l2) {\n                int l1Ones\
    \ = Long.bitCount(l1);\n                int l2Ones = Long.bitCount(l2);\n    \
    \            if (l1Ones == l2Ones) {\n                    return l1.compareTo(l2);\n\
    \                } else {\n                    return l1Ones - l2Ones;\n     \
    \           }\n            }\n        });\n        return sorted;", "        //\
    \ Your code here\n        ArrayList<Long> sorted = new ArrayList<Long>();\n  \
    \      for (int i = 0; i < arr.size(); i++) {\n            sorted.add(arr.get(i));\n\
    \        }\n        Collections.sort(sorted, new Comparator<Long>() {\n      \
    \      @Override\n            public int compare(Long a, Long b) {\n         \
    \       String aBin = Long.toBinaryString(a);\n                String bBin = Long.toBinaryString(b);\n\
    \                int aOnes = 0;\n                int bOnes = 0;\n            \
    \    for (int i = 0; i < aBin.length(); i++) {\n                    if (aBin.charAt(i)\
    \ == '1') {\n                        aOnes++;\n                    }\n       \
    \         }\n                for (int i = 0; i < bBin.length(); i++) {\n     \
    \               if (bBin.charAt(i) == '1') {\n                        bOnes++;\n\
    \                    }\n                }\n                if (aOnes < bOnes)\
    \ {\n                    return -1;\n                } else if (aOnes > bOnes)\
    \ {\n                    return 1;\n                } else {\n               \
    \     if (a < b) {\n                        return -1;\n                    }\
    \ else if (a > b) {\n                        return 1;\n                    }\
    \ else {\n                        return 0;\n                    }\n         \
    \       }\n            }\n        });\n        return sorted;", "        ArrayList<Long>\
    \ sorted = new ArrayList<>();\n        ArrayList<Long> negatives = new ArrayList<>();\n\
    \        ArrayList<Long> positives = new ArrayList<>();\n        for (Long l :\
    \ arr) {\n            if (l < 0) {\n                negatives.add(l);\n      \
    \      } else {\n                positives.add(l);\n            }\n        }\n\
    \        Collections.sort(negatives);\n        Collections.sort(positives);\n\
    \        Collections.reverse(negatives);\n        Collections.reverse(positives);\n\
    \        for (Long l : negatives) {\n            sorted.add(l);\n        }\n \
    \       for (Long l : positives) {\n            sorted.add(l);\n        }\n  \
    \      return sorted;", "        ArrayList<Long> sorted = new ArrayList<Long>();\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            sorted.add(arr.get(i));\n\
    \        }\n        Collections.sort(sorted, new Comparator<Long>() {\n      \
    \      @Override\n            public int compare(Long a, Long b) {\n         \
    \       String aBin = Long.toBinaryString(a);\n                String bBin = Long.toBinaryString(b);\n\
    \                int aOnes = (int) aBin.chars().filter(ch -> ch == '1').count();\n\
    \                int bOnes = (int) bBin.chars().filter(ch -> ch == '1').count();\n\
    \                if (aOnes == bOnes) {\n                    return a.compareTo(b);\n\
    \                } else {\n                    return aOnes - bOnes;\n       \
    \         }\n            }\n        });\n        return sorted;", "        ArrayList<Long>\
    \ sorted = new ArrayList<Long>();\n        ArrayList<Long> zeros = new ArrayList<Long>();\n\
    \        ArrayList<Long> ones = new ArrayList<Long>();\n        ArrayList<Long>\
    \ twos = new ArrayList<Long>();\n        ArrayList<Long> threes = new ArrayList<Long>();\n\
    \        ArrayList<Long> fours = new ArrayList<Long>();\n        ArrayList<Long>\
    \ fives = new ArrayList<Long>();\n        ArrayList<Long> sixes = new ArrayList<Long>();\n\
    \        ArrayList<Long> sevens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ eights = new ArrayList<Long>();\n        ArrayList<Long> nines = new ArrayList<Long>();\n\
    \        ArrayList<Long> tens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ elevens = new ArrayList<Long>();\n        ArrayList<Long> twelves = new ArrayList<Long>();\n\
    \        ArrayList<Long> thirteens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ fourteens = new ArrayList<Long>();\n        ArrayList<Long> fifteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> sixteens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ seventeens = new ArrayList<Long>();\n        ArrayList<Long> eightteens = new\
    \ ArrayList<Long>();\n        ArrayList<Long> nineteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> twenties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ thirtys = new ArrayList<Long>();\n        ArrayList<Long> fortys = new ArrayList<Long>();\n\
    \        ArrayList<Long> fiftys = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sixtys = new ArrayList<Long>();\n        ArrayList<Long> seventys = new ArrayList<Long>();\n\
    \        ArrayList<Long> eighty = new ArrayList<Long>();\n        ArrayList<Long>\
    \ ninety = new ArrayList<Long>();\n        ArrayList<Long> hundred = new ArrayList<Long>();",
  "        ArrayList<Long> sorted = new ArrayList<Long>();\n        for (Long l :\
    \ arr) {\n            sorted.add(l);\n        }\n        Collections.sort(sorted,\
    \ new Comparator<Long>() {\n            @Override\n            public int compare(Long\
    \ l1, Long l2) {\n                int num1 = Long.bitCount(l1);\n            \
    \    int num2 = Long.bitCount(l2);\n                if (num1 == num2) {\n    \
    \                return l1.compareTo(l2);\n                }\n               \
    \ return num1 - num2;\n            }\n        });\n        return sorted;", " \
    \       ArrayList<Long> sorted = new ArrayList<Long>();\n        for (Long l :\
    \ arr) {\n            sorted.add(l);\n        }\n        Collections.sort(sorted,\
    \ new Comparator<Long>() {\n            @Override\n            public int compare(Long\
    \ l1, Long l2) {\n                int ones1 = Long.bitCount(l1);\n           \
    \     int ones2 = Long.bitCount(l2);\n                if (ones1 == ones2) {\n\
    \                    return l1.compareTo(l2);\n                }\n           \
    \     return ones1 - ones2;\n            }\n        });\n        return sorted;",
  "        ArrayList<Long> sorted = new ArrayList<Long>();\n        ArrayList<Long>\
    \ negatives = new ArrayList<Long>();\n        ArrayList<Long> positives = new\
    \ ArrayList<Long>();\n        for (Long i : arr) {\n            if (i < 0) {\n\
    \                negatives.add(i);\n            } else {\n                positives.add(i);\n\
    \            }\n        }\n        Collections.sort(negatives);\n        Collections.sort(positives);\n\
    \        for (Long i : negatives) {\n            sorted.add(i);\n        }\n \
    \       for (Long i : positives) {\n            sorted.add(i);\n        }\n  \
    \      return sorted;", "        ArrayList<Long> sorted = new ArrayList<Long>();\n\
    \        ArrayList<Long> zeros = new ArrayList<Long>();\n        ArrayList<Long>\
    \ ones = new ArrayList<Long>();\n        ArrayList<Long> twos = new ArrayList<Long>();\n\
    \        ArrayList<Long> threes = new ArrayList<Long>();\n        ArrayList<Long>\
    \ fours = new ArrayList<Long>();\n        ArrayList<Long> fives = new ArrayList<Long>();\n\
    \        ArrayList<Long> sixes = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sevens = new ArrayList<Long>();\n        ArrayList<Long> eights = new ArrayList<Long>();\n\
    \        ArrayList<Long> nines = new ArrayList<Long>();\n        ArrayList<Long>\
    \ tens = new ArrayList<Long>();\n        ArrayList<Long> elevens = new ArrayList<Long>();\n\
    \        ArrayList<Long> twelves = new ArrayList<Long>();\n        ArrayList<Long>\
    \ thirteens = new ArrayList<Long>();\n        ArrayList<Long> fourteens = new\
    \ ArrayList<Long>();\n        ArrayList<Long> fifteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> sixteens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ seventeens = new ArrayList<Long>();\n        ArrayList<Long> eightteens = new\
    \ ArrayList<Long>();\n        ArrayList<Long> ninteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> twenties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ twentyones = new ArrayList<Long>();\n        ArrayList<Long> twentytwos = new\
    \ ArrayList<Long>();\n        ArrayList<Long> twentythrees = new ArrayList<Long>();\n\
    \        ArrayList<Long> twentyfours = new ArrayList<Long>();\n        ArrayList<Long>\
    \ twentyfives = new ArrayList<Long>();\n        ArrayList<Long> twentysixes =\
    \ new ArrayList<Long>();\n        ArrayList<Long> twentysevens = new ArrayList<Long>();\n\
    \        ArrayList<Long"]
stop_tokens:
- "\n    }\n"
