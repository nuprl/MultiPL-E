name: HumanEval_120_maximum
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // Given an array array list arr of integers and a positive\
  \ integer k, return a sorted array list \n    // of length k with the maximum k\
  \ numbers in arr.\n    // Example 1:\n    // >>> maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
  \ (long)-4l, (long)5l))), (3l))\n    // (new ArrayList<Long>(Arrays.asList((long)-4l,\
  \ (long)-3l, (long)5l)))\n    // Example 2:\n    // >>> maximum((new ArrayList<Long>(Arrays.asList((long)4l,\
  \ (long)-4l, (long)4l))), (2l))\n    // (new ArrayList<Long>(Arrays.asList((long)4l,\
  \ (long)4l)))\n    // Example 3:\n    // >>> maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
  \ (long)2l, (long)1l, (long)2l, (long)-1l, (long)-2l, (long)1l))), (1l))\n    //\
  \ (new ArrayList<Long>(Arrays.asList((long)2l)))\n    // Note:\n    // 1. The length\
  \ of the array array list will be in the range of [1, 1000].\n    // 2. The elements\
  \ in the array array list will be in the range of [-1000, 1000].\n    // 3. 0 <=\
  \ k <= len(arr)\n    public static ArrayList<Long> maximum(ArrayList<Long> arr,\
  \ long k) {\n"
tests: "    }\n    public static void main(String[] args) {\n    assert(maximum((new\
  \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-4l, (long)5l))), (3l)).equals((new\
  \ ArrayList<Long>(Arrays.asList((long)-4l, (long)-3l, (long)5l)))));\n    assert(maximum((new\
  \ ArrayList<Long>(Arrays.asList((long)4l, (long)-4l, (long)4l))), (2l)).equals((new\
  \ ArrayList<Long>(Arrays.asList((long)4l, (long)4l)))));\n    assert(maximum((new\
  \ ArrayList<Long>(Arrays.asList((long)-3l, (long)2l, (long)1l, (long)2l, (long)-1l,\
  \ (long)-2l, (long)1l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
  \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l, (long)-123l,\
  \ (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
  \ (long)20l, (long)123l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-123l,\
  \ (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
  \ (long)1l, (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
  \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
  \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
  \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
  \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
  \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
  \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
  \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))), (2l)).equals((new\
  \ ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n    assert(maximum((new\
  \ ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l,\
  \ (long)10l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
  \ (long)2l, (long)3l, (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new\
  \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
completions: ["        ArrayList<Long> result = new ArrayList<Long>();\n        for\
    \ (int i = 0; i < k; i++) {\n            result.add((long)0);\n        }\n   \
    \     for (int i = 0; i < arr.size(); i++) {\n            for (int j = 0; j <\
    \ k; j++) {\n                if (arr.get(i) > result.get(j)) {\n             \
    \       result.add(j, arr.get(i));\n                    break;\n             \
    \   }\n            }\n        }\n        return result;", '        return null;',
  "        ArrayList<Long> result = new ArrayList<Long>();\n        for (int i = 0;\
    \ i < k; i++) {\n            result.add((long)0);\n        }\n        for (int\
    \ i = 0; i < arr.size(); i++) {\n            for (int j = 0; j < k; j++) {\n \
    \               if (arr.get(i) > result.get(j)) {\n                    result.add(j,\
    \ arr.get(i));\n                    result.remove(k);\n                    break;\n\
    \                }\n            }\n        }\n        return result;", "     \
    \   ArrayList<Long> result = new ArrayList<Long>();\n        for (int i = 0; i\
    \ < k; i++) {\n            result.add((long)0);\n        }\n        for (int i\
    \ = 0; i < arr.size(); i++) {\n            for (int j = 0; j < k; j++) {\n   \
    \             if (arr.get(i) > result.get(j)) {\n                    result.add(j,\
    \ arr.get(i));\n                    result.remove(k);\n                    break;\n\
    \                }\n            }\n        }\n        return result;", "     \
    \   ArrayList<Long> result = new ArrayList<Long>();\n        ArrayList<Long> copy\
    \ = new ArrayList<Long>(arr);\n        Collections.sort(copy);\n        Collections.reverse(copy);\n\
    \        for (int i = 0; i < k; i++) {\n            result.add(copy.get(i));\n\
    \        }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        for (int i = 0; i < k; i++) {\n            result.add((long)0);\n   \
    \     }\n        for (int i = 0; i < arr.size(); i++) {\n            for (int\
    \ j = 0; j < k; j++) {\n                if (arr.get(i) > result.get(j)) {\n  \
    \                  result.add(j, arr.get(i));\n                    break;\n  \
    \              }\n            }\n        }\n        return result;", "       \
    \ ArrayList<Long> result = new ArrayList<Long>();\n        for (int i = 0; i <\
    \ k; i++) {\n            result.add((long)0);\n        }\n        for (int i =\
    \ 0; i < arr.size(); i++) {\n            for (int j = 0; j < k; j++) {\n     \
    \           if (arr.get(i) > result.get(j)) {\n                    result.add(j,\
    \ arr.get(i));\n                    break;\n                }\n            }\n\
    \        }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        PriorityQueue<Long> heap = new PriorityQueue<Long>();\n        for (Long\
    \ i : arr) {\n            heap.add(i);\n        }\n        for (int i = 0; i <\
    \ k; i++) {\n            result.add(heap.poll());\n        }\n        return result;",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        for (int i = 0;\
    \ i < k; i++) {\n            result.add((long)0);\n        }\n        for (int\
    \ i = 0; i < arr.size(); i++) {\n            if (arr.get(i) > result.get(0)) {\n\
    \                result.set(0, arr.get(i));\n                for (int j = 1; j\
    \ < k; j++) {\n                    if (result.get(j) < result.get(j - 1)) {\n\
    \                        long temp = result.get(j);\n                        result.set(j,\
    \ result.get(j - 1));\n                        result.set(j - 1, temp);\n    \
    \                }\n                }\n            }\n        }\n        return\
    \ result;", "        ArrayList<Long> result = new ArrayList<Long>();\n       \
    \ if (k == 0) {\n            return result;\n        }\n        PriorityQueue<Long>\
    \ pq = new PriorityQueue<Long>();\n        for (Long i : arr) {\n            pq.add(i);\n\
    \        }\n        for (long i = 0; i < k; i++) {\n            result.add(pq.poll());\n\
    \        }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        PriorityQueue<Long> pq = new PriorityQueue<Long>();\n        for (Long\
    \ i : arr) {\n            pq.add(i);\n        }\n        for (int i = 0; i < k;\
    \ i++) {\n            result.add(pq.poll());\n        }\n        return result;",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        for (int i = 0;\
    \ i < k; i++) {\n            result.add((long)0);\n        }\n        for (int\
    \ i = 0; i < arr.size(); i++) {\n            for (int j = 0; j < k; j++) {\n \
    \               if (arr.get(i) > result.get(j)) {\n                    result.add(j,\
    \ arr.get(i));\n                    break;\n                }\n            }\n\
    \        }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        for (int i = 0; i < k; i++) {\n            result.add((long)0);\n   \
    \     }\n        for (int i = 0; i < arr.size(); i++) {\n            for (int\
    \ j = 0; j < k; j++) {\n                if (arr.get(i) > result.get(j)) {\n  \
    \                  result.add(j, arr.get(i));\n                    result.remove(k);\n\
    \                    break;\n                }\n            }\n        }\n   \
    \     return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        for (int i = 0; i < k; i++) {\n            result.add((long)0);\n   \
    \     }\n        for (int i = 0; i < arr.size(); i++) {\n            int j = 0;\n\
    \            while (j < k && arr.get(i) > result.get(j)) {\n                j++;\n\
    \            }\n            if (j < k) {\n                result.add(j, arr.get(i));\n\
    \                result.remove(k);\n            }\n        }\n        return result;",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        for (int i = 0;\
    \ i < k; i++) {\n            result.add((long)0);\n        }\n        for (int\
    \ i = 0; i < arr.size(); i++) {\n            for (int j = 0; j < k; j++) {\n \
    \               if (arr.get(i) > result.get(j)) {\n                    result.add(j,\
    \ arr.get(i));\n                    break;\n                }\n            }\n\
    \        }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        for (int i = 0; i < k; i++) {\n            result.add((long)0);\n   \
    \     }\n        for (int i = 0; i < arr.size(); i++) {\n            for (int\
    \ j = 0; j < k; j++) {\n                if (arr.get(i) > result.get(j)) {\n  \
    \                  result.add(j, arr.get(i));\n                    break;\n  \
    \              }\n            }\n        }\n        return result;", "       \
    \ // Your code here\n        return null;", "        // Your code here\n     \
    \   return null;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        for (int i = 0; i < k; i++) {\n            result.add((long)0);\n   \
    \     }\n        for (int i = 0; i < arr.size(); i++) {\n            for (int\
    \ j = 0; j < k; j++) {\n                if (arr.get(i) > result.get(j)) {\n  \
    \                  result.add(j, arr.get(i));\n                    result.remove(k);\n\
    \                    break;\n                }\n            }\n        }\n   \
    \     return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        for (int i = 0; i < k; i++) {\n            result.add((long)0);\n   \
    \     }\n        for (int i = 0; i < arr.size(); i++) {\n            for (int\
    \ j = 0; j < k; j++) {\n                if (arr.get(i) > result.get(j)) {\n  \
    \                  result.add(j, arr.get(i));\n                    break;\n  \
    \              }\n            }\n        }\n        return result;"]
stop_tokens:
- "\n    }\n"
