name: HumanEval_120_maximum
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // Given an array array list arr of integers and a positive\
  \ integer k, return a sorted array list \n    // of length k with the maximum k\
  \ numbers in arr.\n    // Example 1:\n    // >>> maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
  \ (long)-4l, (long)5l))), (3l))\n    // (new ArrayList<Long>(Arrays.asList((long)-4l,\
  \ (long)-3l, (long)5l)))\n    // Example 2:\n    // >>> maximum((new ArrayList<Long>(Arrays.asList((long)4l,\
  \ (long)-4l, (long)4l))), (2l))\n    // (new ArrayList<Long>(Arrays.asList((long)4l,\
  \ (long)4l)))\n    // Example 3:\n    // >>> maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
  \ (long)2l, (long)1l, (long)2l, (long)-1l, (long)-2l, (long)1l))), (1l))\n    //\
  \ (new ArrayList<Long>(Arrays.asList((long)2l)))\n    // Note:\n    // 1. The length\
  \ of the array array list will be in the range of [1, 1000].\n    // 2. The elements\
  \ in the array array list will be in the range of [-1000, 1000].\n    // 3. 0 <=\
  \ k <= len(arr)\n    public static ArrayList<Long> maximum(ArrayList<Long> arr,\
  \ long k) {\n"
tests: "    }\n    public static void main(String[] args) {\n    assert(maximum((new\
  \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-4l, (long)5l))), (3l)).equals((new\
  \ ArrayList<Long>(Arrays.asList((long)-4l, (long)-3l, (long)5l)))));\n    assert(maximum((new\
  \ ArrayList<Long>(Arrays.asList((long)4l, (long)-4l, (long)4l))), (2l)).equals((new\
  \ ArrayList<Long>(Arrays.asList((long)4l, (long)4l)))));\n    assert(maximum((new\
  \ ArrayList<Long>(Arrays.asList((long)-3l, (long)2l, (long)1l, (long)2l, (long)-1l,\
  \ (long)-2l, (long)1l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
  \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l, (long)-123l,\
  \ (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
  \ (long)20l, (long)123l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-123l,\
  \ (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
  \ (long)1l, (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
  \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
  \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
  \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
  \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
  \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
  \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
  \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))), (2l)).equals((new\
  \ ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n    assert(maximum((new\
  \ ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l,\
  \ (long)10l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
  \ (long)2l, (long)3l, (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new\
  \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
completions: ["        ArrayList<Long> result = new ArrayList<Long>();\n        for\
    \ (int i = 0; i < k; i++) {\n            result.add((long)0);\n        }\n   \
    \     for (int i = 0; i < arr.size(); i++) {\n            for (int j = 0; j <\
    \ k; j++) {\n                if (arr.get(i) > result.get(j)) {\n             \
    \       result.add(j, arr.get(i));\n                    break;\n             \
    \   }\n            }\n        }\n        return result;", '        return null;',
  "        ArrayList<Long> result = new ArrayList<Long>();\n        for (int i = 0;\
    \ i < k; i++) {\n            result.add((long)0);\n        }\n        for (int\
    \ i = 0; i < arr.size(); i++) {\n            for (int j = 0; j < k; j++) {\n \
    \               if (arr.get(i) > result.get(j)) {\n                    result.add(j,\
    \ arr.get(i));\n                    result.remove(k);\n                    break;\n\
    \                }\n            }\n        }\n        return result;", "     \
    \   ArrayList<Long> result = new ArrayList<Long>();\n        for (int i = 0; i\
    \ < k; i++) {\n            result.add((long)0);\n        }\n        for (int i\
    \ = 0; i < arr.size(); i++) {\n            for (int j = 0; j < k; j++) {\n   \
    \             if (arr.get(i) > result.get(j)) {\n                    result.add(j,\
    \ arr.get(i));\n                    result.remove(k);\n                    break;\n\
    \                }\n            }\n        }\n        return result;", "     \
    \   ArrayList<Long> result = new ArrayList<Long>();\n        ArrayList<Long> copy\
    \ = new ArrayList<Long>(arr);\n        Collections.sort(copy);\n        Collections.reverse(copy);\n\
    \        for (int i = 0; i < k; i++) {\n            result.add(copy.get(i));\n\
    \        }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        for (int i = 0; i < k; i++) {\n            result.add((long)0);\n   \
    \     }\n        for (int i = 0; i < arr.size(); i++) {\n            for (int\
    \ j = 0; j < k; j++) {\n                if (arr.get(i) > result.get(j)) {\n  \
    \                  result.add(j, arr.get(i));\n                    break;\n  \
    \              }\n            }\n        }\n        return result;", "       \
    \ ArrayList<Long> result = new ArrayList<Long>();\n        for (int i = 0; i <\
    \ k; i++) {\n            result.add((long)0);\n        }\n        for (int i =\
    \ 0; i < arr.size(); i++) {\n            for (int j = 0; j < k; j++) {\n     \
    \           if (arr.get(i) > result.get(j)) {\n                    result.add(j,\
    \ arr.get(i));\n                    break;\n                }\n            }\n\
    \        }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        PriorityQueue<Long> heap = new PriorityQueue<Long>();\n        for (Long\
    \ i : arr) {\n            heap.add(i);\n        }\n        for (int i = 0; i <\
    \ k; i++) {\n            result.add(heap.poll());\n        }\n        return result;",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        for (int i = 0;\
    \ i < k; i++) {\n            result.add((long)0);\n        }\n        for (int\
    \ i = 0; i < arr.size(); i++) {\n            if (arr.get(i) > result.get(0)) {\n\
    \                result.set(0, arr.get(i));\n                for (int j = 1; j\
    \ < k; j++) {\n                    if (result.get(j) < result.get(j - 1)) {\n\
    \                        long temp = result.get(j);\n                        result.set(j,\
    \ result.get(j - 1));\n                        result.set(j - 1, temp);\n    \
    \                }\n                }\n            }\n        }\n        return\
    \ result;", "        ArrayList<Long> result = new ArrayList<Long>();\n       \
    \ if (k == 0) {\n            return result;\n        }\n        PriorityQueue<Long>\
    \ pq = new PriorityQueue<Long>();\n        for (Long i : arr) {\n            pq.add(i);\n\
    \        }\n        for (long i = 0; i < k; i++) {\n            result.add(pq.poll());\n\
    \        }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        PriorityQueue<Long> pq = new PriorityQueue<Long>();\n        for (Long\
    \ i : arr) {\n            pq.add(i);\n        }\n        for (int i = 0; i < k;\
    \ i++) {\n            result.add(pq.poll());\n        }\n        return result;",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        for (int i = 0;\
    \ i < k; i++) {\n            result.add((long)0);\n        }\n        for (int\
    \ i = 0; i < arr.size(); i++) {\n            for (int j = 0; j < k; j++) {\n \
    \               if (arr.get(i) > result.get(j)) {\n                    result.add(j,\
    \ arr.get(i));\n                    break;\n                }\n            }\n\
    \        }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        for (int i = 0; i < k; i++) {\n            result.add((long)0);\n   \
    \     }\n        for (int i = 0; i < arr.size(); i++) {\n            for (int\
    \ j = 0; j < k; j++) {\n                if (arr.get(i) > result.get(j)) {\n  \
    \                  result.add(j, arr.get(i));\n                    result.remove(k);\n\
    \                    break;\n                }\n            }\n        }\n   \
    \     return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        for (int i = 0; i < k; i++) {\n            result.add((long)0);\n   \
    \     }\n        for (int i = 0; i < arr.size(); i++) {\n            int j = 0;\n\
    \            while (j < k && arr.get(i) > result.get(j)) {\n                j++;\n\
    \            }\n            if (j < k) {\n                result.add(j, arr.get(i));\n\
    \                result.remove(k);\n            }\n        }\n        return result;",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        for (int i = 0;\
    \ i < k; i++) {\n            result.add((long)0);\n        }\n        for (int\
    \ i = 0; i < arr.size(); i++) {\n            for (int j = 0; j < k; j++) {\n \
    \               if (arr.get(i) > result.get(j)) {\n                    result.add(j,\
    \ arr.get(i));\n                    break;\n                }\n            }\n\
    \        }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        for (int i = 0; i < k; i++) {\n            result.add((long)0);\n   \
    \     }\n        for (int i = 0; i < arr.size(); i++) {\n            for (int\
    \ j = 0; j < k; j++) {\n                if (arr.get(i) > result.get(j)) {\n  \
    \                  result.add(j, arr.get(i));\n                    break;\n  \
    \              }\n            }\n        }\n        return result;", "       \
    \ // Your code here\n        return null;", "        // Your code here\n     \
    \   return null;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        for (int i = 0; i < k; i++) {\n            result.add((long)0);\n   \
    \     }\n        for (int i = 0; i < arr.size(); i++) {\n            for (int\
    \ j = 0; j < k; j++) {\n                if (arr.get(i) > result.get(j)) {\n  \
    \                  result.add(j, arr.get(i));\n                    result.remove(k);\n\
    \                    break;\n                }\n            }\n        }\n   \
    \     return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        for (int i = 0; i < k; i++) {\n            result.add((long)0);\n   \
    \     }\n        for (int i = 0; i < arr.size(); i++) {\n            for (int\
    \ j = 0; j < k; j++) {\n                if (arr.get(i) > result.get(j)) {\n  \
    \                  result.add(j, arr.get(i));\n                    break;\n  \
    \              }\n            }\n        }\n        return result;", "       \
    \ ArrayList<Long> result = new ArrayList<Long>();\n        for (int i = 0; i <\
    \ k; i++) {\n            result.add((long)0);\n        }\n        for (int i =\
    \ 0; i < arr.size(); i++) {\n            for (int j = 0; j < k; j++) {\n     \
    \           if (arr.get(i) > result.get(j)) {\n                    result.add(j,\
    \ arr.get(i));\n                    break;\n                }\n            }\n\
    \        }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        PriorityQueue<Long> pq = new PriorityQueue<Long>();\n        for (int\
    \ i = 0; i < arr.size(); i++) {\n            pq.add(arr.get(i));\n        }\n\
    \        for (int i = 0; i < k; i++) {\n            result.add(pq.poll());\n \
    \       }\n        return result;", "        // Your code here.\n        return\
    \ null;", "        ArrayList<Long> ans = new ArrayList<Long>();\n        for (int\
    \ i = 0; i < k; i++) {\n            ans.add((long)0);\n        }\n        for\
    \ (int i = 0; i < arr.size(); i++) {\n            int j = 0;\n            while\
    \ (j < k && arr.get(i) > ans.get(j)) {\n                j++;\n            }\n\
    \            if (j < k) {\n                ans.add(j, arr.get(i));\n         \
    \       ans.remove(k);\n            }\n        }\n        return ans;", "    \
    \    ArrayList<Long> result = new ArrayList<Long>();\n        PriorityQueue<Long>\
    \ pq = new PriorityQueue<Long>();\n        for (Long i : arr) {\n            pq.add(i);\n\
    \        }\n        for (int i = 0; i < k; i++) {\n            result.add(pq.poll());\n\
    \        }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (k == 0) {\n            return result;\n        }\n        if (k ==\
    \ arr.size()) {\n            return arr;\n        }\n        PriorityQueue<Long>\
    \ pq = new PriorityQueue<Long>();\n        for (Long i : arr) {\n            pq.add(i);\n\
    \        }\n        for (int i = 0; i < k; i++) {\n            result.add(pq.poll());\n\
    \        }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        for (int i = 0; i < k; i++) {\n            result.add((long)0);\n   \
    \     }\n        for (int i = 0; i < arr.size(); i++) {\n            for (int\
    \ j = 0; j < k; j++) {\n                if (arr.get(i) > result.get(j)) {\n  \
    \                  result.add(j, arr.get(i));\n                    result.remove(k);\n\
    \                    break;\n                }\n            }\n        }\n   \
    \     return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        ArrayList<Long> temp = new ArrayList<Long>();\n        for (int i = 0;\
    \ i < arr.size(); i++) {\n            temp.add(arr.get(i));\n        }\n     \
    \   for (int i = 0; i < k; i++) {\n            long max = temp.get(0);\n     \
    \       int maxIndex = 0;\n            for (int j = 0; j < temp.size(); j++) {\n\
    \                if (temp.get(j) > max) {\n                    max = temp.get(j);\n\
    \                    maxIndex = j;\n                }\n            }\n       \
    \     result.add(max);\n            temp.remove(maxIndex);\n        }\n      \
    \  return result;", '        return arr;', "        // Your code goes here.\n\
    \        return null;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        for (int i = 0; i < k; i++) {\n            result.add((long)0);\n   \
    \     }\n        for (int i = 0; i < arr.size(); i++) {\n            for (int\
    \ j = 0; j < k; j++) {\n                if (arr.get(i) > result.get(j)) {\n  \
    \                  result.add(j, arr.get(i));\n                    break;\n  \
    \              }\n            }\n        }\n        return result;", "       \
    \ ArrayList<Long> result = new ArrayList<Long>();\n        for (int i = 0; i <\
    \ k; i++) {\n            result.add((long)0);\n        }\n        for (int i =\
    \ 0; i < arr.size(); i++) {\n            for (int j = 0; j < k; j++) {\n     \
    \           if (arr.get(i) > result.get(j)) {\n                    result.add(j,\
    \ arr.get(i));\n                    break;\n                }\n            }\n\
    \        }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        for (int i = 0; i < k; i++) {\n            result.add((long)0);\n   \
    \     }\n        for (int i = 0; i < arr.size(); i++) {\n            for (int\
    \ j = 0; j < k; j++) {\n                if (arr.get(i) > result.get(j)) {\n  \
    \                  result.add(j, arr.get(i));\n                    result.remove(k);\n\
    \                    break;\n                }\n            }\n        }\n   \
    \     return result;", "        ArrayList<Long> res = new ArrayList<Long>();\n\
    \        PriorityQueue<Long> pq = new PriorityQueue<Long>();\n        for (Long\
    \ i : arr) {\n            pq.add(i);\n        }\n        for (int i = 0; i < k;\
    \ i++) {\n            res.add(pq.poll());\n        }\n        return res;", " \
    \       ArrayList<Long> result = new ArrayList<Long>();\n        if (k == 0) {\n\
    \            return result;\n        }\n        if (k == arr.size()) {\n     \
    \       return arr;\n        }\n        PriorityQueue<Long> pq = new PriorityQueue<Long>();\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            pq.add(arr.get(i));\n\
    \        }\n        for (int i = 0; i < k; i++) {\n            result.add(pq.poll());\n\
    \        }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        PriorityQueue<Long> pq = new PriorityQueue<Long>();\n        for (int\
    \ i = 0; i < arr.size(); i++) {\n            pq.add(arr.get(i));\n        }\n\
    \        for (int i = 0; i < k; i++) {\n            result.add(pq.poll());\n \
    \       }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        for (int i = 0; i < k; i++) {\n            result.add((long)0);\n   \
    \     }\n        for (int i = 0; i < arr.size(); i++) {\n            for (int\
    \ j = 0; j < k; j++) {\n                if (arr.get(i) > result.get(j)) {\n  \
    \                  result.add(j, arr.get(i));\n                    result.remove(k);\n\
    \                    break;\n                }\n            }\n        }\n   \
    \     return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        PriorityQueue<Long> pq = new PriorityQueue<Long>();\n        for (Long\
    \ i : arr) {\n            pq.add(i);\n        }\n        for (long i = 0; i <\
    \ k; i++) {\n            result.add(pq.poll());\n        }\n        return result;",
  "        // Your code here\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        for (int i = 0; i < k; i++) {\n            result.add(arr.get(i));\n\
    \        }\n        Collections.sort(result);\n        for (int i = k; i < arr.size();\
    \ i++) {\n            if (arr.get(i) > result.get(0)) {\n                result.set(0,\
    \ arr.get(i));\n                Collections.sort(result);\n            }\n   \
    \     }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (arr.size() == 0) {\n            return result;\n        }\n     \
    \   if (k == 0) {\n            return result;\n        }\n        if (k >= arr.size())\
    \ {\n            return arr;\n        }\n        ArrayList<Long> sorted = new\
    \ ArrayList<Long>(arr);\n        Collections.sort(sorted);\n        Collections.reverse(sorted);\n\
    \        for (int i = 0; i < k; i++) {\n            result.add(sorted.get(i));\n\
    \        }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        for (int i = 0; i < k; i++) {\n            result.add((long)0);\n   \
    \     }\n        for (int i = 0; i < arr.size(); i++) {\n            for (int\
    \ j = 0; j < k; j++) {\n                if (arr.get(i) > result.get(j)) {\n  \
    \                  result.add(j, arr.get(i));\n                    break;\n  \
    \              }\n            }\n        }\n        return result;", "       \
    \ ArrayList<Long> result = new ArrayList<Long>();\n        for (int i = 0; i <\
    \ k; i++) {\n            result.add((long)0);\n        }\n        for (int i =\
    \ 0; i < arr.size(); i++) {\n            for (int j = 0; j < k; j++) {\n     \
    \           if (arr.get(i) > result.get(j)) {\n                    result.add(j,\
    \ arr.get(i));\n                    break;\n                }\n            }\n\
    \        }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        for (int i = 0; i < k; i++) {\n            result.add((long)0);\n   \
    \     }\n        for (int i = 0; i < arr.size(); i++) {\n            for (int\
    \ j = 0; j < k; j++) {\n                if (arr.get(i) > result.get(j)) {\n  \
    \                  result.add(j, arr.get(i));\n                    break;\n  \
    \              }\n            }\n        }\n        return result;", "       \
    \ ArrayList<Long> result = new ArrayList<Long>();\n        for (int i = 0; i <\
    \ k; i++) {\n            result.add((long)0);\n        }\n        for (int i =\
    \ 0; i < arr.size(); i++) {\n            for (int j = 0; j < k; j++) {\n     \
    \           if (arr.get(i) > result.get(j)) {\n                    result.add(j,\
    \ arr.get(i));\n                    break;\n                }\n            }\n\
    \        }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (k <= 0) {\n            return result;\n        }\n        PriorityQueue<Long>\
    \ pq = new PriorityQueue<Long>();\n        for (int i = 0; i < arr.size(); i++)\
    \ {\n            pq.add(arr.get(i));\n        }\n        for (int i = 0; i < k;\
    \ i++) {\n            result.add(pq.poll());\n        }\n        return result;",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        for (int i = 0;\
    \ i < k; i++) {\n            result.add((long)0);\n        }\n        for (int\
    \ i = 0; i < arr.size(); i++) {\n            for (int j = 0; j < k; j++) {\n \
    \               if (arr.get(i) > result.get(j)) {\n                    result.add(j,\
    \ arr.get(i));\n                    break;\n                }\n            }\n\
    \        }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        PriorityQueue<Long> pq = new PriorityQueue<Long>();\n        for (Long\
    \ i : arr) {\n            pq.add(i);\n        }\n        for (int i = 0; i < k;\
    \ i++) {\n            result.add(pq.poll());\n        }\n        return result;",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        PriorityQueue<Long>\
    \ pq = new PriorityQueue<Long>();\n        for (Long i : arr) {\n            pq.add(i);\n\
    \        }\n        for (long i = 0; i < k; i++) {\n            result.add(pq.poll());\n\
    \        }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        PriorityQueue<Long> pq = new PriorityQueue<Long>();\n        for (int\
    \ i = 0; i < arr.size(); i++) {\n            pq.add(arr.get(i));\n        }\n\
    \        for (int i = 0; i < k; i++) {\n            result.add(pq.poll());\n \
    \       }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        PriorityQueue<Long> pq = new PriorityQueue<Long>();\n        for (Long\
    \ n : arr) {\n            pq.add(n);\n            if (pq.size() > k) {\n     \
    \           pq.poll();\n            }\n        }\n        while (pq.size() > 0)\
    \ {\n            result.add(pq.poll());\n        }\n        Collections.reverse(result);\n\
    \        return result;", "        // Write your code here\n        return null;",
  "        // Your code here\n        return arr;", "        // Your code here\n \
    \       return arr;", "        ArrayList<Long> ans = new ArrayList<Long>();\n\
    \        for (long i = 0; i < k; i++) {\n            ans.add((long)-1000000000l);\n\
    \        }\n        for (long i = 0; i < arr.size(); i++) {\n            if (arr.get((int)i)\
    \ > ans.get((int)0)) {\n                ans.set((int)0, arr.get((int)i));\n  \
    \              ans.sort(null);\n            }\n        }\n        return ans;",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        for (int i = 0;\
    \ i < k; i++) {\n            result.add((long)0);\n        }\n        for (int\
    \ i = 0; i < arr.size(); i++) {\n            for (int j = 0; j < k; j++) {\n \
    \               if (arr.get(i) > result.get(j)) {\n                    result.add(j,\
    \ arr.get(i));\n                    break;\n                }\n            }\n\
    \        }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        PriorityQueue<Long> pq = new PriorityQueue<Long>();\n        for (int\
    \ i = 0; i < arr.size(); i++) {\n            pq.add(arr.get(i));\n        }\n\
    \        for (int i = 0; i < k; i++) {\n            result.add(pq.poll());\n \
    \       }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (k == 0) {\n            return result;\n        }\n        if (k ==\
    \ arr.size()) {\n            return arr;\n        }\n        PriorityQueue<Long>\
    \ pq = new PriorityQueue<Long>();\n        for (int i = 0; i < arr.size(); i++)\
    \ {\n            pq.add(arr.get(i));\n        }\n        for (int i = 0; i < k;\
    \ i++) {\n            result.add(pq.poll());\n        }\n        return result;",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        for (int i = 0;\
    \ i < k; i++) {\n            result.add((long)0);\n        }\n        for (int\
    \ i = 0; i < arr.size(); i++) {\n            for (int j = 0; j < k; j++) {\n \
    \               if (arr.get(i) > result.get(j)) {\n                    result.add(j,\
    \ arr.get(i));\n                    result.remove(k);\n                    break;\n\
    \                }\n            }\n        }\n        return result;", "     \
    \   ArrayList<Long> result = new ArrayList<Long>();\n        for (int i = 0; i\
    \ < k; i++) {\n            result.add((long)0);\n        }\n        for (int i\
    \ = 0; i < arr.size(); i++) {\n            for (int j = 0; j < k; j++) {\n   \
    \             if (arr.get(i) > result.get(j)) {\n                    result.add(j,\
    \ arr.get(i));\n                    break;\n                }\n            }\n\
    \        }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        PriorityQueue<Long> pq = new PriorityQueue<Long>();\n        for (Long\
    \ i : arr) {\n            pq.add(i);\n        }\n        for (int i = 0; i < k;\
    \ i++) {\n            result.add(pq.poll());\n        }\n        return result;",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        PriorityQueue<Long>\
    \ pq = new PriorityQueue<Long>();\n        for (Long i : arr) {\n            pq.add(i);\n\
    \        }\n        for (long i = 0; i < k; i++) {\n            result.add(pq.poll());\n\
    \        }\n        return result;", "        ArrayList<Long> res = new ArrayList<Long>();\n\
    \        PriorityQueue<Long> pq = new PriorityQueue<Long>();\n        for (Long\
    \ i : arr) {\n            pq.add(i);\n        }\n        for (int i = 0; i < k;\
    \ i++) {\n            res.add(pq.poll());\n        }\n        return res;", " \
    \       ArrayList<Long> result = new ArrayList<Long>();\n        for (int i =\
    \ 0; i < k; i++) {\n            result.add((long)0);\n        }\n        for (int\
    \ i = 0; i < arr.size(); i++) {\n            for (int j = 0; j < k; j++) {\n \
    \               if (arr.get(i) > result.get(j)) {\n                    result.add(j,\
    \ arr.get(i));\n                    result.remove(k);\n                    break;\n\
    \                }\n            }\n        }\n        return result;", "     \
    \   ArrayList<Long> result = new ArrayList<Long>();\n        for (int i = 0; i\
    \ < k; i++) {\n            result.add((long)0);\n        }\n        for (int i\
    \ = 0; i < arr.size(); i++) {\n            for (int j = 0; j < k; j++) {\n   \
    \             if (arr.get(i) > result.get(j)) {\n                    result.add(j,\
    \ arr.get(i));\n                    result.remove(k);\n                    break;\n\
    \                }\n            }\n        }\n        return result;", "     \
    \   ArrayList<Long> result = new ArrayList<Long>();\n        for (int i = 0; i\
    \ < k; i++) {\n            result.add((long)0);\n        }\n        for (int i\
    \ = 0; i < arr.size(); i++) {\n            for (int j = 0; j < k; j++) {\n   \
    \             if (arr.get(i) > result.get(j)) {\n                    result.add(j,\
    \ arr.get(i));\n                    break;\n                }\n            }\n\
    \        }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        PriorityQueue<Long> pq = new PriorityQueue<Long>();\n        for (Long\
    \ i : arr) {\n            pq.add(i);\n        }\n        for (int i = 0; i < k;\
    \ i++) {\n            result.add(pq.poll());\n        }\n        return result;",
  "        // Your code here\n        return null;", "        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        PriorityQueue<Long> pq = new PriorityQueue<Long>();\n\
    \        for (Long i : arr) {\n            pq.add(i);\n        }\n        for\
    \ (int i = 0; i < k; i++) {\n            result.add(pq.poll());\n        }\n \
    \       return result;", "        ArrayList<Long> res = new ArrayList<Long>();\n\
    \        PriorityQueue<Long> pq = new PriorityQueue<Long>();\n        for (Long\
    \ x : arr) {\n            pq.add(x);\n            if (pq.size() > k) {\n     \
    \           pq.poll();\n            }\n        }\n        while (!pq.isEmpty())\
    \ {\n            res.add(pq.poll());\n        }\n        Collections.reverse(res);\n\
    \        return res;", "        ArrayList<Long> res = new ArrayList<Long>();\n\
    \        PriorityQueue<Long> pq = new PriorityQueue<Long>();\n        for (Long\
    \ i : arr) {\n            pq.add(i);\n        }\n        for (long i = 0; i <\
    \ k; i++) {\n            res.add(pq.poll());\n        }\n        return res;",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        if (k == 0) {\n\
    \            return result;\n        }\n        if (k == arr.size()) {\n     \
    \       return arr;\n        }\n        PriorityQueue<Long> queue = new PriorityQueue<Long>(arr.size(),\
    \ Collections.reverseOrder());\n        for (Long i : arr) {\n            queue.add(i);\n\
    \        }\n        for (int i = 0; i < k; i++) {\n            result.add(queue.poll());\n\
    \        }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        PriorityQueue<Long> pq = new PriorityQueue<Long>();\n        for (Long\
    \ i : arr) {\n            pq.add(i);\n        }\n        for (int i = 0; i < k;\
    \ i++) {\n            result.add(pq.poll());\n        }\n        return result;",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        for (int i = 0;\
    \ i < k; i++) {\n            result.add((long)0);\n        }\n        for (int\
    \ i = 0; i < arr.size(); i++) {\n            for (int j = 0; j < k; j++) {\n \
    \               if (arr.get(i) > result.get(j)) {\n                    result.add(j,\
    \ arr.get(i));\n                    break;\n                }\n            }\n\
    \        }\n        return result;", "        ArrayList<Long> max = new ArrayList<Long>();\n\
    \        for (int i = 0; i < k; i++) {\n            max.add(arr.get(i));\n   \
    \     }\n        Collections.sort(max);\n        for (int i = k; i < arr.size();\
    \ i++) {\n            if (arr.get(i) > max.get(0)) {\n                max.remove(0);\n\
    \                max.add(arr.get(i));\n                Collections.sort(max);\n\
    \            }\n        }\n        return max;", "        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        for (int i = 0; i < k; i++) {\n          \
    \  result.add((long)0);\n        }\n        for (int i = 0; i < arr.size(); i++)\
    \ {\n            for (int j = 0; j < k; j++) {\n                if (arr.get(i)\
    \ > result.get(j)) {\n                    result.add(j, arr.get(i));\n       \
    \             break;\n                }\n            }\n        }\n        return\
    \ result;", "        ArrayList<Long> result = new ArrayList<Long>();\n       \
    \ PriorityQueue<Long> pq = new PriorityQueue<Long>();\n        for (Long i : arr)\
    \ {\n            pq.add(i);\n        }\n        for (int i = 0; i < k; i++) {\n\
    \            result.add(pq.poll());\n        }\n        return result;", "   \
    \     ArrayList<Long> result = new ArrayList<Long>();\n        for (int i = 0;\
    \ i < k; i++) {\n            result.add((long)0);\n        }\n        for (int\
    \ i = 0; i < arr.size(); i++) {\n            for (int j = 0; j < k; j++) {\n \
    \               if (arr.get(i) > result.get(j)) {\n                    result.add(j,\
    \ arr.get(i));\n                    break;\n                }\n            }\n\
    \        }\n        return result;", "        // Your code goes here.\n      \
    \  return new ArrayList<Long>();", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        for (int i = 0; i < k; i++) {\n            result.add((long)0);\n   \
    \     }\n        for (int i = 0; i < arr.size(); i++) {\n            for (int\
    \ j = 0; j < k; j++) {\n                if (arr.get(i) > result.get(j)) {\n  \
    \                  result.add(j, arr.get(i));\n                    result.remove(k);\n\
    \                    break;\n                }\n            }\n        }\n   \
    \     return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        for (int i = 0; i < k; i++) {\n            result.add((long)0);\n   \
    \     }\n        for (int i = 0; i < arr.size(); i++) {\n            for (int\
    \ j = 0; j < k; j++) {\n                if (arr.get(i) > result.get(j)) {\n  \
    \                  result.add(j, arr.get(i));\n                    break;\n  \
    \              }\n            }\n        }\n        return result;", "       \
    \ ArrayList<Long> result = new ArrayList<Long>();\n        if (k > arr.size())\
    \ {\n            return result;\n        }\n        PriorityQueue<Long> pq = new\
    \ PriorityQueue<Long>(Collections.reverseOrder());\n        for (Long i : arr)\
    \ {\n            pq.add(i);\n        }\n        for (long i = 0; i < k; i++) {\n\
    \            result.add(pq.poll());\n        }\n        return result;", "   \
    \     ArrayList<Long> result = new ArrayList<Long>();\n        for (int i = 0;\
    \ i < k; i++) {\n            long max = arr.get(0);\n            int maxIndex\
    \ = 0;\n            for (int j = 1; j < arr.size(); j++) {\n                if\
    \ (arr.get(j) > max) {\n                    max = arr.get(j);\n              \
    \      maxIndex = j;\n                }\n            }\n            result.add(max);\n\
    \            arr.remove(maxIndex);\n        }\n        return result;", "    \
    \    ArrayList<Long> result = new ArrayList<Long>();\n        for (int i = 0;\
    \ i < k; i++) {\n            result.add((long)0);\n        }\n        for (int\
    \ i = 0; i < arr.size(); i++) {\n            for (int j = 0; j < k; j++) {\n \
    \               if (arr.get(i) > result.get(j)) {\n                    result.add(j,\
    \ arr.get(i));\n                    break;\n                }\n            }\n\
    \        }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        for (int i = 0; i < k; i++) {\n            result.add((long)0);\n   \
    \     }\n        for (int i = 0; i < arr.size(); i++) {\n            int j = (int)k\
    \ - 1;\n            while (j >= 0 && arr.get(i) > result.get(j)) {\n         \
    \       if (j + 1 < k) {\n                    result.set(j + 1, result.get(j));\n\
    \                }\n                j--;\n            }\n            if (j + 1\
    \ < k) {\n                result.set(j + 1, arr.get(i));\n            }\n    \
    \    }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        for (int i = 0; i < k; i++) {\n            result.add((long)0);\n   \
    \     }\n        for (int i = 0; i < arr.size(); i++) {\n            for (int\
    \ j = 0; j < k; j++) {\n                if (arr.get(i) > result.get(j)) {\n  \
    \                  result.add(j, arr.get(i));\n                    result.remove(k);\n\
    \                    break;\n                }\n            }\n        }\n   \
    \     return result;", "        // Write your code here\n        return null;",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        for (int i = 0;\
    \ i < k; i++) {\n            result.add((long)0);\n        }\n        for (int\
    \ i = 0; i < arr.size(); i++) {\n            for (int j = 0; j < k; j++) {\n \
    \               if (arr.get(i) > result.get(j)) {\n                    result.add(j,\
    \ arr.get(i));\n                    result.remove(k);\n                    break;\n\
    \                }\n            }\n        }\n        return result;", "     \
    \   ArrayList<Long> result = new ArrayList<Long>();\n        if (k > arr.size())\
    \ {\n            return result;\n        }\n        PriorityQueue<Long> pq = new\
    \ PriorityQueue<Long>(k, new Comparator<Long>() {\n            public int compare(Long\
    \ a, Long b) {\n                return b.compareTo(a);\n            }\n      \
    \  });\n        for (Long i : arr) {\n            pq.add(i);\n        }\n    \
    \    for (int i = 0; i < k; i++) {\n            result.add(pq.poll());\n     \
    \   }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        for (int i = 0; i < k; i++) {\n            result.add((long)0);\n   \
    \     }\n        for (int i = 0; i < arr.size(); i++) {\n            for (int\
    \ j = 0; j < k; j++) {\n                if (arr.get(i) > result.get(j)) {\n  \
    \                  result.add(j, arr.get(i));\n                    break;\n  \
    \              }\n            }\n        }\n        return result;", '        return
    null;', "        ArrayList<Long> result = new ArrayList<Long>();\n        for\
    \ (int i = 0; i < k; i++) {\n            result.add((long)0);\n        }\n   \
    \     for (int i = 0; i < arr.size(); i++) {\n            for (int j = 0; j <\
    \ k; j++) {\n                if (arr.get(i) > result.get(j)) {\n             \
    \       result.add(j, arr.get(i));\n                    result.remove(k);\n  \
    \                  break;\n                }\n            }\n        }\n     \
    \   return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        PriorityQueue<Long> pq = new PriorityQueue<Long>();\n        for (Long\
    \ i : arr) {\n            pq.add(i);\n        }\n        for (long i = 0; i <\
    \ k; i++) {\n            result.add(pq.poll());\n        }\n        return result;",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        for (int i = 0;\
    \ i < k; i++) {\n            result.add((long)0);\n        }\n        for (int\
    \ i = 0; i < arr.size(); i++) {\n            for (int j = 0; j < k; j++) {\n \
    \               if (arr.get(i) > result.get(j)) {\n                    result.add(j,\
    \ arr.get(i));\n                    result.remove(k);\n                    break;\n\
    \                }\n            }\n        }\n        return result;", "     \
    \   ArrayList<Long> result = new ArrayList<Long>();\n        if (k > arr.size())\
    \ {\n            return result;\n        }\n        PriorityQueue<Long> pq = new\
    \ PriorityQueue<Long>(k, Collections.reverseOrder());\n        for (Long i : arr)\
    \ {\n            pq.add(i);\n        }\n        for (int i = 0; i < k; i++) {\n\
    \            result.add(pq.poll());\n        }\n        return result;", "   \
    \     ArrayList<Long> result = new ArrayList<Long>();\n        for (int i = 0;\
    \ i < k; i++) {\n            result.add((long)0);\n        }\n        for (int\
    \ i = 0; i < arr.size(); i++) {\n            for (int j = 0; j < k; j++) {\n \
    \               if (arr.get(i) > result.get(j)) {\n                    result.add(j,\
    \ arr.get(i));\n                    result.remove(k);\n                    break;\n\
    \                }\n            }\n        }\n        return result;", "     \
    \   ArrayList<Long> result = new ArrayList<Long>();\n        for (int i = 0; i\
    \ < k; i++) {\n            result.add((long)0);\n        }\n        for (int i\
    \ = 0; i < arr.size(); i++) {\n            for (int j = 0; j < k; j++) {\n   \
    \             if (arr.get(i) > result.get(j)) {\n                    result.add(j,\
    \ arr.get(i));\n                    break;\n                }\n            }\n\
    \        }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        PriorityQueue<Long> pq = new PriorityQueue<Long>();\n        for (int\
    \ i = 0; i < arr.size(); i++) {\n            pq.add(arr.get(i));\n        }\n\
    \        for (int i = 0; i < k; i++) {\n            result.add(pq.poll());\n \
    \       }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (arr.size() == 0) {\n            return result;\n        }\n     \
    \   if (k == 0) {\n            return result;\n        }\n        if (k > arr.size())\
    \ {\n            return arr;\n        }\n        PriorityQueue<Long> pq = new\
    \ PriorityQueue<Long>(Collections.reverseOrder());\n        for (Long i : arr)\
    \ {\n            pq.add(i);\n        }\n        for (long i = 0; i < k; i++) {\n\
    \            result.add(pq.poll());\n        }\n        return result;", "   \
    \     ArrayList<Long> result = new ArrayList<Long>();\n        PriorityQueue<Long>\
    \ pq = new PriorityQueue<Long>();\n        for (int i = 0; i < arr.size(); i++)\
    \ {\n            pq.add(arr.get(i));\n        }\n        for (int i = 0; i < k;\
    \ i++) {\n            result.add(pq.poll());\n        }\n        return result;",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        for (int i = 0;\
    \ i < k; i++) {\n            result.add((long)0);\n        }\n        for (int\
    \ i = 0; i < arr.size(); i++) {\n            for (int j = 0; j < k; j++) {\n \
    \               if (arr.get(i) > result.get(j)) {\n                    result.add(j,\
    \ arr.get(i));\n                    result.remove(k);\n                    break;\n\
    \                }\n            }\n        }\n        return result;", "     \
    \   ArrayList<Long> result = new ArrayList<Long>();\n        PriorityQueue<Long>\
    \ heap = new PriorityQueue<Long>();\n        for (Long i : arr) {\n          \
    \  heap.add(i);\n        }\n        for (int i = 0; i < k; i++) {\n          \
    \  result.add(heap.poll());\n        }\n        return result;", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        for (int i = 0; i < k; i++) {\n   \
    \         result.add((long)0);\n        }\n        for (int i = 0; i < arr.size();\
    \ i++) {\n            for (int j = 0; j < k; j++) {\n                if (arr.get(i)\
    \ > result.get(j)) {\n                    result.add(j, arr.get(i));\n       \
    \             result.remove(k);\n                    break;\n                }\n\
    \            }\n        }\n        return result;", "        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        for (int i = 0; i < k; i++) {\n          \
    \  result.add((long)0);\n        }\n        for (int i = 0; i < arr.size(); i++)\
    \ {\n            for (int j = 0; j < k; j++) {\n                if (arr.get(i)\
    \ > result.get(j)) {\n                    result.add(j, arr.get(i));\n       \
    \             result.remove(k);\n                    break;\n                }\n\
    \            }\n        }\n        return result;", "        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        PriorityQueue<Long> pq = new PriorityQueue<Long>();\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            pq.add(arr.get(i));\n\
    \        }\n        for (int i = 0; i < k; i++) {\n            result.add(pq.poll());\n\
    \        }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        for (int i = 0; i < k; i++) {\n            result.add((long)-1000000l);\n\
    \        }\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i)\
    \ > result.get(0)) {\n                result.set(0, arr.get(i));\n           \
    \     for (int j = 0; j < k - 1; j++) {\n                    if (result.get(j)\
    \ > result.get(j + 1)) {\n                        long temp = result.get(j);\n\
    \                        result.set(j, result.get(j + 1));\n                 \
    \       result.set(j + 1, temp);\n                    }\n                }\n \
    \           }\n        }\n        return result;", "        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        for (int i = 0; i < k; i++) {\n          \
    \  result.add((long)0);\n        }\n        for (int i = 0; i < arr.size(); i++)\
    \ {\n            for (int j = 0; j < k; j++) {\n                if (arr.get(i)\
    \ > result.get(j)) {\n                    result.add(j, arr.get(i));\n       \
    \             break;\n                }\n            }\n        }\n        return\
    \ result;", "        // Your code here\n        return null;", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        for (int i = 0; i < k; i++) {\n   \
    \         result.add((long)0);\n        }\n        for (int i = 0; i < arr.size();\
    \ i++) {\n            for (int j = 0; j < k; j++) {\n                if (arr.get(i)\
    \ > result.get(j)) {\n                    result.add(j, arr.get(i));\n       \
    \             break;\n                }\n            }\n        }\n        return\
    \ result;", "        ArrayList<Long> result = new ArrayList<Long>();\n       \
    \ for (int i = 0; i < k; i++) {\n            result.add((long)0);\n        }\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            for (int j = 0; j\
    \ < k; j++) {\n                if (arr.get(i) > result.get(j)) {\n           \
    \         result.add(j, arr.get(i));\n                    result.remove(k);\n\
    \                    break;\n                }\n            }\n        }\n   \
    \     return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        for (int i = 0; i < k; i++) {\n            result.add((long)0);\n   \
    \     }\n        for (int i = 0; i < arr.size(); i++) {\n            for (int\
    \ j = 0; j < k; j++) {\n                if (arr.get(i) > result.get(j)) {\n  \
    \                  result.add(j, arr.get(i));\n                    break;\n  \
    \              }\n            }\n        }\n        return result;", "       \
    \ ArrayList<Long> result = new ArrayList<Long>();\n        PriorityQueue<Long>\
    \ pq = new PriorityQueue<Long>();\n        for (Long i : arr) {\n            pq.add(i);\n\
    \        }\n        for (int i = 0; i < k; i++) {\n            result.add(pq.poll());\n\
    \        }\n        return result;", "        // Your code goes here.\n      \
    \  return new ArrayList<Long>();", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (k == 0) {\n            return result;\n        }\n        if (k ==\
    \ arr.size()) {\n            return arr;\n        }\n        PriorityQueue<Long>\
    \ heap = new PriorityQueue<Long>();\n        for (int i = 0; i < arr.size(); i++)\
    \ {\n            heap.add(arr.get(i));\n        }\n        for (int i = 0; i <\
    \ k; i++) {\n            result.add(heap.poll());\n        }\n        return result;",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        for (int i = 0;\
    \ i < k; i++) {\n            result.add((long)0);\n        }\n        for (int\
    \ i = 0; i < arr.size(); i++) {\n            if (arr.get(i) > result.get(0)) {\n\
    \                result.set(0, arr.get(i));\n                for (int j = 1; j\
    \ < k; j++) {\n                    if (result.get(j) < result.get(j - 1)) {\n\
    \                        long temp = result.get(j);\n                        result.set(j,\
    \ result.get(j - 1));\n                        result.set(j - 1, temp);\n    \
    \                }\n                }\n            }\n        }\n        return\
    \ result;", "        ArrayList<Long> result = new ArrayList<Long>();\n       \
    \ if (k == 0) {\n            return result;\n        }\n        if (k == arr.size())\
    \ {\n            return arr;\n        }\n        PriorityQueue<Long> pq = new\
    \ PriorityQueue<Long>();\n        for (Long i : arr) {\n            pq.add(i);\n\
    \        }\n        for (int i = 0; i < k; i++) {\n            result.add(pq.poll());\n\
    \        }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        PriorityQueue<Long> pq = new PriorityQueue<Long>();\n        for (Long\
    \ i : arr) {\n            pq.add(i);\n        }\n        for (long i = 0; i <\
    \ k; i++) {\n            result.add(pq.poll());\n        }\n        return result;",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        for (int i = 0;\
    \ i < k; i++) {\n            result.add((long)0);\n        }\n        for (int\
    \ i = 0; i < arr.size(); i++) {\n            for (int j = 0; j < k; j++) {\n \
    \               if (arr.get(i) > result.get(j)) {\n                    result.add(j,\
    \ arr.get(i));\n                    break;\n                }\n            }\n\
    \        }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        for (int i = 0; i < k; i++) {\n            result.add((long)0);\n   \
    \     }\n        for (int i = 0; i < arr.size(); i++) {\n            for (int\
    \ j = 0; j < k; j++) {\n                if (arr.get(i) > result.get(j)) {\n  \
    \                  result.add(j, arr.get(i));\n                    break;\n  \
    \              }\n            }\n        }\n        return result;", "       \
    \ // Write your code here\n        return null;", "        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        for (int i = 0; i < k; i++) {\n          \
    \  result.add((long)0);\n        }\n        for (int i = 0; i < arr.size(); i++)\
    \ {\n            for (int j = 0; j < k; j++) {\n                if (arr.get(i)\
    \ > result.get(j)) {\n                    result.add(j, arr.get(i));\n       \
    \             break;\n                }\n            }\n        }\n        return\
    \ result;", "        ArrayList<Long> result = new ArrayList<Long>();\n       \
    \ for (int i = 0; i < k; i++) {\n            result.add((long)0);\n        }\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            for (int j = 0; j\
    \ < k; j++) {\n                if (arr.get(i) > result.get(j)) {\n           \
    \         result.add(j, arr.get(i));\n                    break;\n           \
    \     }\n            }\n        }\n        return result;", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        for (int i = 0; i < k; i++) {\n   \
    \         result.add((long)0);\n        }\n        for (int i = 0; i < arr.size();\
    \ i++) {\n            for (int j = 0; j < k; j++) {\n                if (arr.get(i)\
    \ > result.get(j)) {\n                    result.add(j, arr.get(i));\n       \
    \             break;\n                }\n            }\n        }\n        return\
    \ result;", "        // Your code here\n        return null;", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        for (int i = 0; i < k; i++) {\n   \
    \         result.add((long)0);\n        }\n        for (int i = 0; i < arr.size();\
    \ i++) {\n            for (int j = 0; j < k; j++) {\n                if (arr.get(i)\
    \ > result.get(j)) {\n                    result.add(j, arr.get(i));\n       \
    \             result.remove(k);\n                    break;\n                }\n\
    \            }\n        }\n        return result;", "        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        for (int i = 0; i < k; i++) {\n          \
    \  result.add((long)0);\n        }\n        for (int i = 0; i < arr.size(); i++)\
    \ {\n            for (int j = 0; j < k; j++) {\n                if (arr.get(i)\
    \ > result.get(j)) {\n                    result.add(j, arr.get(i));\n       \
    \             break;\n                }\n            }\n        }\n        return\
    \ result;", "        ArrayList<Long> result = new ArrayList<Long>();\n       \
    \ for (int i = 0; i < k; i++) {\n            result.add((long)0);\n        }\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            for (int j = 0; j\
    \ < k; j++) {\n                if (arr.get(i) > result.get(j)) {\n           \
    \         result.add(j, arr.get(i));\n                    result.remove(k);\n\
    \                    break;\n                }\n            }\n        }\n   \
    \     return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        for (int i = 0; i < k; i++) {\n            result.add((long)0);\n   \
    \     }\n        for (int i = 0; i < arr.size(); i++) {\n            for (int\
    \ j = 0; j < k; j++) {\n                if (arr.get(i) > result.get(j)) {\n  \
    \                  result.add(j, arr.get(i));\n                    break;\n  \
    \              }\n            }\n        }\n        return result;", "       \
    \ ArrayList<Long> result = new ArrayList<Long>();\n        PriorityQueue<Long>\
    \ pq = new PriorityQueue<Long>();\n        for (Long i : arr) {\n            pq.add(i);\n\
    \        }\n        for (int i = 0; i < k; i++) {\n            result.add(pq.poll());\n\
    \        }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        for (int i = 0; i < k; i++) {\n            result.add((long)0);\n   \
    \     }\n        for (int i = 0; i < arr.size(); i++) {\n            for (int\
    \ j = 0; j < k; j++) {\n                if (arr.get(i) > result.get(j)) {\n  \
    \                  result.add(j, arr.get(i));\n                    break;\n  \
    \              }\n            }\n        }\n        return result;", "       \
    \ ArrayList<Long> result = new ArrayList<Long>();\n        for (int i = 0; i <\
    \ k; i++) {\n            result.add((long)0);\n        }\n        for (int i =\
    \ 0; i < arr.size(); i++) {\n            for (int j = 0; j < k; j++) {\n     \
    \           if (arr.get(i) > result.get(j)) {\n                    result.add(j,\
    \ arr.get(i));\n                    break;\n                }\n            }\n\
    \        }\n        return result;", "        // Your code here\n        return\
    \ null;", "        ArrayList<Long> result = new ArrayList<Long>();\n        PriorityQueue<Long>\
    \ pq = new PriorityQueue<Long>();\n        for (Long x : arr) {\n            pq.add(x);\n\
    \        }\n        for (int i = 0; i < k; i++) {\n            result.add(pq.poll());\n\
    \        }\n        return result;", "        // Your code goes here.\n      \
    \  ArrayList<Long> result = new ArrayList<Long>();\n        for (int i = 0; i\
    \ < k; i++) {\n            result.add((long)0);\n        }\n        for (int i\
    \ = 0; i < arr.size(); i++) {\n            for (int j = 0; j < k; j++) {\n   \
    \             if (arr.get(i) > result.get(j)) {\n                    result.add(j,\
    \ arr.get(i));\n                    break;\n                }\n            }\n\
    \        }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        PriorityQueue<Long> pq = new PriorityQueue<Long>();\n        for (Long\
    \ i : arr) {\n            pq.add(i);\n        }\n        for (int i = 0; i < k;\
    \ i++) {\n            result.add(pq.poll());\n        }\n        return result;",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        for (int i = 0;\
    \ i < k; i++) {\n            result.add((long)0);\n        }\n        for (int\
    \ i = 0; i < arr.size(); i++) {\n            for (int j = 0; j < k; j++) {\n \
    \               if (arr.get(i) > result.get(j)) {\n                    result.add(j,\
    \ arr.get(i));\n                    break;\n                }\n            }\n\
    \        }\n        return result;", "        // Your code here\n        return\
    \ arr;", "        ArrayList<Long> result = new ArrayList<Long>();\n        for\
    \ (int i = 0; i < k; i++) {\n            result.add((long)0);\n        }\n   \
    \     for (int i = 0; i < arr.size(); i++) {\n            for (int j = 0; j <\
    \ k; j++) {\n                if (arr.get(i) > result.get(j)) {\n             \
    \       result.add(j, arr.get(i));\n                    break;\n             \
    \   }\n            }\n        }\n        return result;", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        for (int i = 0; i < k; i++) {\n   \
    \         result.add((long)0);\n        }\n        for (int i = 0; i < arr.size();\
    \ i++) {\n            for (int j = 0; j < k; j++) {\n                if (arr.get(i)\
    \ > result.get(j)) {\n                    result.add(j, arr.get(i));\n       \
    \             result.remove(k);\n                    break;\n                }\n\
    \            }\n        }\n        return result;", "        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        PriorityQueue<Long> pq = new PriorityQueue<Long>();\n\
    \        for (Long i : arr) {\n            pq.add(i);\n        }\n        for\
    \ (int i = 0; i < k; i++) {\n            result.add(pq.poll());\n        }\n \
    \       return result;", "        ArrayList<Long> ans = new ArrayList<Long>();\n\
    \        for (int i = 0; i < k; i++) {\n            ans.add((long)0);\n      \
    \  }\n        for (int i = 0; i < arr.size(); i++) {\n            for (int j =\
    \ 0; j < k; j++) {\n                if (arr.get(i) > ans.get(j)) {\n         \
    \           ans.add(j, arr.get(i));\n                    ans.remove(k);\n    \
    \                break;\n                }\n            }\n        }\n       \
    \ return ans;", "        ArrayList<Long> result = new ArrayList<Long>();\n   \
    \     for (int i = 0; i < k; i++) {\n            result.add((long)0);\n      \
    \  }\n        for (int i = 0; i < arr.size(); i++) {\n            long val = arr.get(i);\n\
    \            int j = 0;\n            while (j < k && result.get(j) > val) {\n\
    \                j = j + 1;\n            }\n            if (j < k) {\n       \
    \         result.remove(k - 1);\n                result.add(j, val);\n       \
    \     }\n        }\n        return result;", "        ArrayList<Long> result =\
    \ new ArrayList<Long>();\n        for (int i = 0; i < k; i++) {\n            result.add((long)0);\n\
    \        }\n        for (int i = 0; i < arr.size(); i++) {\n            for (int\
    \ j = 0; j < k; j++) {\n                if (arr.get(i) > result.get(j)) {\n  \
    \                  result.add(j, arr.get(i));\n                    break;\n  \
    \              }\n            }\n        }\n        return result;", "       \
    \ ArrayList<Long> result = new ArrayList<Long>();\n        PriorityQueue<Long>\
    \ pq = new PriorityQueue<Long>();\n        for (Long i : arr) {\n            pq.add(i);\n\
    \        }\n        for (int i = 0; i < k; i++) {\n            result.add(pq.poll());\n\
    \        }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (arr.size() == 0) {\n            return result;\n        }\n     \
    \   if (k == 0) {\n            return result;\n        }\n        if (k == 1)\
    \ {\n            long max = arr.get(0);\n            for (int i = 1; i < arr.size();\
    \ i++) {\n                if (arr.get(i) > max) {\n                    max = arr.get(i);\n\
    \                }\n            }\n            result.add(max);\n            return\
    \ result;\n        }\n        if (k == arr.size()) {\n            Collections.sort(arr);\n\
    \            return arr;\n        }\n        if (k > arr.size()) {\n         \
    \   throw new IllegalArgumentException(\"k must be less than or equal to the size\
    \ of the array list\");\n        }\n        ArrayList<Long> temp = new ArrayList<Long>();\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            temp.add(arr.get(i));\n\
    \        }\n        Collections.sort(temp);\n        for (int i = 0; i < k; i++)\
    \ {\n            result.add(temp.get(temp.size() - 1 - i));\n        }\n     \
    \   return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        PriorityQueue<Long> heap = new PriorityQueue<Long>();\n        for (Long\
    \ i : arr) {\n            heap.add(i);\n        }\n        while (k > 0) {\n \
    \           result.add(heap.poll());\n            k--;\n        }\n        return\
    \ result;", '        return arr.stream().sorted(Comparator.reverseOrder()).limit(k).collect(Collectors.toCollection(ArrayList::new));',
  "        ArrayList<Long> result = new ArrayList<Long>();\n        PriorityQueue<Long>\
    \ pq = new PriorityQueue<Long>();\n        for (Long i : arr) {\n            pq.add(i);\n\
    \        }\n        for (long i = 0; i < k; i++) {\n            result.add(pq.poll());\n\
    \        }\n        return result;", "        // Your code goes here.\n      \
    \  return null;", "        ArrayList<Long> result = new ArrayList<Long>();\n \
    \       for (int i = 0; i < k; i++) {\n            result.add((long)0);\n    \
    \    }\n        for (int i = 0; i < arr.size(); i++) {\n            for (int j\
    \ = 0; j < k; j++) {\n                if (arr.get(i) > result.get(j)) {\n    \
    \                result.add(j, arr.get(i));\n                    result.remove(k);\n\
    \                    break;\n                }\n            }\n        }\n   \
    \     return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        for (int i = 0; i < k; i++) {\n            result.add((long)0);\n   \
    \     }\n        for (int i = 0; i < arr.size(); i++) {\n            for (int\
    \ j = 0; j < k; j++) {\n                if (arr.get(i) > result.get(j)) {\n  \
    \                  result.add(j, arr.get(i));\n                    result.remove(k);\n\
    \                    break;\n                }\n            }\n        }\n   \
    \     return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        for (int i = 0; i < k; i++) {\n            result.add((long)0);\n   \
    \     }\n        for (int i = 0; i < arr.size(); i++) {\n            for (int\
    \ j = 0; j < k; j++) {\n                if (arr.get(i) > result.get(j)) {\n  \
    \                  result.add(j, arr.get(i));\n                    result.remove(k);\n\
    \                    break;\n                }\n            }\n        }\n   \
    \     return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (k == 0) {\n            return result;\n        }\n        if (k ==\
    \ arr.size()) {\n            return arr;\n        }\n        PriorityQueue<Long>\
    \ heap = new PriorityQueue<Long>();\n        for (Long i : arr) {\n          \
    \  heap.add(i);\n        }\n        for (int i = 0; i < k; i++) {\n          \
    \  result.add(heap.poll());\n        }\n        return result;", '        return
    arr.stream().sorted(Comparator.reverseOrder()).limit(k).collect(Collectors.toCollection(ArrayList::new));',
  "        ArrayList<Long> result = new ArrayList<Long>();\n        for (int i = 0;\
    \ i < k; i++) {\n            result.add((long)0);\n        }\n        for (int\
    \ i = 0; i < arr.size(); i++) {\n            for (int j = 0; j < k; j++) {\n \
    \               if (arr.get(i) > result.get(j)) {\n                    result.add(j,\
    \ arr.get(i));\n                    break;\n                }\n            }\n\
    \        }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        PriorityQueue<Long> pq = new PriorityQueue<Long>();\n        for (Long\
    \ i : arr) {\n            pq.add(i);\n        }\n        for (long i = 0; i <\
    \ k; i++) {\n            result.add(pq.poll());\n        }\n        return result;",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        for (int i = 0;\
    \ i < k; i++) {\n            result.add((long)0);\n        }\n        for (int\
    \ i = 0; i < arr.size(); i++) {\n            for (int j = 0; j < k; j++) {\n \
    \               if (arr.get(i) > result.get(j)) {\n                    result.add(j,\
    \ arr.get(i));\n                    break;\n                }\n            }\n\
    \        }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        PriorityQueue<Long> pq = new PriorityQueue<Long>();\n        for (Long\
    \ i : arr) {\n            pq.add(i);\n        }\n        for (int i = 0; i < k;\
    \ i++) {\n            result.add(pq.poll());\n        }\n        return result;",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        for (int i = 0;\
    \ i < k; i++) {\n            result.add((long)0);\n        }\n        for (int\
    \ i = 0; i < arr.size(); i++) {\n            for (int j = 0; j < k; j++) {\n \
    \               if (arr.get(i) > result.get(j)) {\n                    result.add(j,\
    \ arr.get(i));\n                    break;\n                }\n            }\n\
    \        }\n        return result;", "        // Your code here\n        return\
    \ null;", "        ArrayList<Long> result = new ArrayList<Long>();\n        for\
    \ (int i = 0; i < k; i++) {\n            result.add((long)0);\n        }\n   \
    \     for (int i = 0; i < arr.size(); i++) {\n            for (int j = 0; j <\
    \ k; j++) {\n                if (arr.get(i) > result.get(j)) {\n             \
    \       result.add(j, arr.get(i));\n                    result.remove(k);\n  \
    \                  break;\n                }\n            }\n        }\n     \
    \   return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        for (int i = 0; i < k; i++) {\n            result.add((long)0);\n   \
    \     }\n        for (int i = 0; i < arr.size(); i++) {\n            for (int\
    \ j = 0; j < k; j++) {\n                if (arr.get(i) > result.get(j)) {\n  \
    \                  result.add(j, arr.get(i));\n                    result.remove(k);\n\
    \                    break;\n                }\n            }\n        }\n   \
    \     return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        for (int i = 0; i < k; i++) {\n            result.add((long)0);\n   \
    \     }\n        for (int i = 0; i < arr.size(); i++) {\n            for (int\
    \ j = 0; j < k; j++) {\n                if (arr.get(i) > result.get(j)) {\n  \
    \                  result.add(j, arr.get(i));\n                    result.remove(k);\n\
    \                    break;\n                }\n            }\n        }\n   \
    \     return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        for (int i = 0; i < k; i++) {\n            result.add((long)0);\n   \
    \     }\n        for (int i = 0; i < arr.size(); i++) {\n            for (int\
    \ j = 0; j < k; j++) {\n                if (arr.get(i) > result.get(j)) {\n  \
    \                  result.add(j, arr.get(i));\n                    break;\n  \
    \              }\n            }\n        }\n        return result;", "       \
    \ ArrayList<Long> ret = new ArrayList<Long>();\n        PriorityQueue<Long> pq\
    \ = new PriorityQueue<Long>();\n        for (Long l : arr) {\n            pq.add(l);\n\
    \        }\n        for (long i = 0; i < k; i++) {\n            ret.add(pq.poll());\n\
    \        }\n        return ret;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        for (int i = 0; i < k; i++) {\n            result.add((long)0);\n   \
    \     }\n        for (int i = 0; i < arr.size(); i++) {\n            for (int\
    \ j = 0; j < k; j++) {\n                if (arr.get(i) > result.get(j)) {\n  \
    \                  result.add(j, arr.get(i));\n                    result.remove(k);\n\
    \                    break;\n                }\n            }\n        }\n   \
    \     return result;", '        return new ArrayList<Long>();', "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        for (int i = 0; i < k; i++) {\n   \
    \         result.add((long)0);\n        }\n        for (int i = 0; i < arr.size();\
    \ i++) {\n            for (int j = 0; j < k; j++) {\n                if (arr.get(i)\
    \ > result.get(j)) {\n                    result.add(j, arr.get(i));\n       \
    \             result.remove(k);\n                    break;\n                }\n\
    \            }\n        }\n        return result;", "        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        if (k <= 0) {\n            return result;\n\
    \        }\n        if (k >= arr.size()) {\n            Collections.sort(arr);\n\
    \            return arr;\n        }\n        PriorityQueue<Long> pq = new PriorityQueue<Long>();\n\
    \        for (Long i : arr) {\n            pq.add(i);\n            if (pq.size()\
    \ > k) {\n                pq.poll();\n            }\n        }\n        while\
    \ (!pq.isEmpty()) {\n            result.add(pq.poll());\n        }\n        Collections.reverse(result);\n\
    \        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        for (int i = 0; i < k; i++) {\n            result.add((long)0);\n   \
    \     }\n        for (int i = 0; i < arr.size(); i++) {\n            for (int\
    \ j = 0; j < k; j++) {\n                if (arr.get(i) > result.get(j)) {\n  \
    \                  result.add(j, arr.get(i));\n                    result.remove(k);\n\
    \                    break;\n                }\n            }\n        }\n   \
    \     return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        for (int i = 0; i < k; i++) {\n            result.add((long)0);\n   \
    \     }\n        for (int i = 0; i < arr.size(); i++) {\n            for (int\
    \ j = 0; j < k; j++) {\n                if (arr.get(i) > result.get(j)) {\n  \
    \                  result.add(j, arr.get(i));\n                    break;\n  \
    \              }\n            }\n        }\n        return result;", "       \
    \ ArrayList<Long> result = new ArrayList<Long>();\n        PriorityQueue<Long>\
    \ pq = new PriorityQueue<Long>();\n        for (Long i : arr) {\n            pq.add(i);\n\
    \        }\n        for (int i = 0; i < k; i++) {\n            result.add(pq.poll());\n\
    \        }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (k > arr.size()) {\n            return result;\n        }\n      \
    \  Collections.sort(arr);\n        for (int i = arr.size() - 1; i >= arr.size()\
    \ - k; i--) {\n            result.add(arr.get(i));\n        }\n        return\
    \ result;", '        return null;', "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        for (int i = 0; i < k; i++) {\n            result.add((long)0);\n   \
    \     }\n        for (int i = 0; i < arr.size(); i++) {\n            for (int\
    \ j = 0; j < k; j++) {\n                if (arr.get(i) > result.get(j)) {\n  \
    \                  result.add(j, arr.get(i));\n                    break;\n  \
    \              }\n            }\n        }\n        return result;", "       \
    \ // Your code here\n        return null;", "        // Your code here\n     \
    \   return null;", "        // Your code here\n        return null;", "      \
    \  ArrayList<Long> result = new ArrayList<Long>();\n        PriorityQueue<Long>\
    \ pq = new PriorityQueue<Long>();\n        for (int i = 0; i < arr.size(); i++)\
    \ {\n            pq.add(arr.get(i));\n        }\n        for (int i = 0; i < k;\
    \ i++) {\n            result.add(pq.poll());\n        }\n        return result;",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        if (arr.size()\
    \ == 0) {\n            return result;\n        }\n        if (k == 0) {\n    \
    \        return result;\n        }\n        if (k == 1) {\n            long max\
    \ = arr.get(0);\n            for (int i = 1; i < arr.size(); i++) {\n        \
    \        if (arr.get(i) > max) {\n                    max = arr.get(i);\n    \
    \            }\n            }\n            result.add(max);\n            return\
    \ result;\n        }\n        if (k == arr.size()) {\n            Collections.sort(arr);\n\
    \            return arr;\n        }\n        ArrayList<Long> left = new ArrayList<Long>();\n\
    \        ArrayList<Long> right = new ArrayList<Long>();\n        for (int i =\
    \ 0; i < arr.size(); i++) {\n            if (i < k) {\n                left.add(arr.get(i));\n\
    \            } else {\n                right.add(arr.get(i));\n            }\n\
    \        }\n        Collections.sort(left);\n        Collections.sort(right);\n\
    \        int i = 0;\n        int j = 0;\n        while (i < left.size() && j <\
    \ right.size()) {\n            if (left.get(i) < right.get(j)) {\n           \
    \     left.remove(i);\n                left.add(right.get(j));\n             \
    \   j++;\n            } else {\n                i++;\n            }\n        }\n\
    \        return left;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (k == 0) {\n            return result;\n        }\n        if (k >=\
    \ arr.size()) {\n            Collections.sort(arr);\n            Collections.reverse(arr);\n\
    \            return arr;\n        }\n        for (int i = 0; i < k; i++) {\n \
    \           result.add(arr.get(i));\n        }\n        Collections.sort(result);\n\
    \        Collections.reverse(result);\n        for (int i = (int)k; i < arr.size();\
    \ i++) {\n            if (arr.get(i) > result.get(0)) {\n                result.set(0,\
    \ arr.get(i));\n                Collections.sort(result);\n                Collections.reverse(result);\n\
    \            }\n        }\n        return result;", "        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        for (int i = 0; i < k; i++) {\n          \
    \  result.add((long)0);\n        }\n        for (int i = 0; i < arr.size(); i++)\
    \ {\n            for (int j = 0; j < k; j++) {\n                if (arr.get(i)\
    \ > result.get(j)) {\n                    result.add(j, arr.get(i));\n       \
    \             break;\n                }\n            }\n        }\n        return\
    \ result;", "        ArrayList<Long> result = new ArrayList<Long>();\n       \
    \ for (int i = 0; i < k; i++) {\n            result.add((long)0);\n        }\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            for (int j = 0; j\
    \ < k; j++) {\n                if (arr.get(i) > result.get(j)) {\n           \
    \         result.add(j, arr.get(i));\n                    break;\n           \
    \     }\n            }\n        }\n        return result;", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (k == 0) {\n            return result;\n\
    \        }\n        if (k == arr.size()) {\n            return arr;\n        }\n\
    \        PriorityQueue<Long> pq = new PriorityQueue<Long>();\n        for (Long\
    \ i : arr) {\n            pq.add(i);\n        }\n        for (int i = 0; i < k;\
    \ i++) {\n            result.add(pq.poll());\n        }\n        return result;",
  "        // Write your code here\n        return null;", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        for (int i = 0; i < k; i++) {\n   \
    \         result.add((long)0);\n        }\n        for (int i = 0; i < arr.size();\
    \ i++) {\n            for (int j = 0; j < k; j++) {\n                if (arr.get(i)\
    \ > result.get(j)) {\n                    result.add(j, arr.get(i));\n       \
    \             result.remove(k);\n                    break;\n                }\n\
    \            }\n        }\n        return result;", "        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        for (int i = 0; i < k; i++) {\n          \
    \  result.add((long)0);\n        }\n        for (int i = 0; i < arr.size(); i++)\
    \ {\n            for (int j = 0; j < k; j++) {\n                if (arr.get(i)\
    \ > result.get(j)) {\n                    result.add(j, arr.get(i));\n       \
    \             break;\n                }\n            }\n        }\n        return\
    \ result;", "        // Your code here\n        return arr;", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        for (int i = 0; i < k; i++) {\n   \
    \         result.add((long)0);\n        }\n        for (int i = 0; i < arr.size();\
    \ i++) {\n            for (int j = 0; j < k; j++) {\n                if (result.get(j)\
    \ < arr.get(i)) {\n                    result.add(j, arr.get(i));\n          \
    \          result.remove(k);\n                    break;\n                }\n\
    \            }\n        }\n        return result;", "        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        for (int i = 0; i < k; i++) {\n          \
    \  result.add((long)0);\n        }\n        for (int i = 0; i < arr.size(); i++)\
    \ {\n            int j = (int)k - 1;\n            while (j >= 0 && arr.get(i)\
    \ > result.get(j)) {\n                j--;\n            }\n            if (j <\
    \ (int)k - 1) {\n                for (int l = (int)k - 1; l > j + 1; l--) {\n\
    \                    result.set(l, result.get(l - 1));\n                }\n  \
    \              result.set(j + 1, arr.get(i));\n            }\n        }\n    \
    \    return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        for (int i = 0; i < k; i++) {\n            result.add((long)0);\n   \
    \     }\n        for (int i = 0; i < arr.size(); i++) {\n            for (int\
    \ j = 0; j < k; j++) {\n                if (arr.get(i) > result.get(j)) {\n  \
    \                  result.add(j, arr.get(i));\n                    result.remove(k);\n\
    \                    break;\n                }\n            }\n        }\n   \
    \     return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        for (int i = 0; i < k; i++) {\n            result.add((long)0);\n   \
    \     }\n        for (int i = 0; i < arr.size(); i++) {\n            for (int\
    \ j = 0; j < k; j++) {\n                if (arr.get(i) > result.get(j)) {\n  \
    \                  result.add(j, arr.get(i));\n                    break;\n  \
    \              }\n            }\n        }\n        return result;", "       \
    \ // Your code here\n        return null;", "        ArrayList<Long> result =\
    \ new ArrayList<Long>();\n        PriorityQueue<Long> pq = new PriorityQueue<Long>();\n\
    \        for (Long i : arr) {\n            pq.add(i);\n        }\n        for\
    \ (int i = 0; i < k; i++) {\n            result.add(pq.poll());\n        }\n \
    \       return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        for (int i = 0; i < k; i++) {\n            result.add((long)0);\n   \
    \     }\n        for (int i = 0; i < arr.size(); i++) {\n            for (int\
    \ j = 0; j < k; j++) {\n                if (arr.get(i) > result.get(j)) {\n  \
    \                  result.add(j, arr.get(i));\n                    result.remove(k);\n\
    \                    break;\n                }\n            }\n        }\n   \
    \     return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (arr.size() == 0) {\n            return result;\n        }\n     \
    \   if (k == 0) {\n            return result;\n        }\n        if (k == 1)\
    \ {\n            long max = arr.get(0);\n            for (int i = 1; i < arr.size();\
    \ i++) {\n                if (arr.get(i) > max) {\n                    max = arr.get(i);\n\
    \                }\n            }\n            result.add(max);\n            return\
    \ result;\n        }\n        if (k == arr.size()) {\n            Collections.sort(arr);\n\
    \            Collections.reverse(arr);\n            return arr;\n        }\n \
    \       ArrayList<Long> left = new ArrayList<Long>();\n        ArrayList<Long>\
    \ right = new ArrayList<Long>();\n        for (int i = 0; i < arr.size(); i++)\
    \ {\n            if (i < k) {\n                left.add(arr.get(i));\n       \
    \     } else {\n                right.add(arr.get(i));\n            }\n      \
    \  }\n        Collections.sort(left);\n        Collections.reverse(left);\n  \
    \      for (int i = 0; i < right.size(); i++) {\n            if (right.get(i)\
    \ > left.get(k - 1)) {\n                left.remove(k - 1);\n                left.add(right.get(i));\n\
    \                Collections.sort(left);\n                Collections.reverse(left);\n\
    \            }\n        }\n        return left;", "        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        for (int i = 0; i < k; i++) {\n          \
    \  result.add((long)0);\n        }\n        for (int i = 0; i < arr.size(); i++)\
    \ {\n            for (int j = 0; j < k; j++) {\n                if (arr.get(i)\
    \ > result.get(j)) {\n                    result.add(j, arr.get(i));\n       \
    \             result.remove(k);\n                    break;\n                }\n\
    \            }\n        }\n        return result;", "        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        for (int i = 0; i < k; i++) {\n          \
    \  result.add((long)0);\n        }\n        for (int i = 0; i < arr.size(); i++)\
    \ {\n            for (int j = 0; j < k; j++) {\n                if (arr.get(i)\
    \ > result.get(j)) {\n                    result.set(j, arr.get(i));\n       \
    \             break;\n                }\n            }\n        }\n        return\
    \ result;", "        ArrayList<Long> result = new ArrayList<Long>();\n       \
    \ if (k == 0) {\n            return result;\n        }\n        if (k == arr.size())\
    \ {\n            return arr;\n        }\n        PriorityQueue<Long> queue = new\
    \ PriorityQueue<Long>(arr.size(), Collections.reverseOrder());\n        for (Long\
    \ i : arr) {\n            queue.add(i);\n        }\n        for (int i = 0; i\
    \ < k; i++) {\n            result.add(queue.poll());\n        }\n        return\
    \ result;", "        ArrayList<Long> result = new ArrayList<Long>();\n       \
    \ for (int i = 0; i < k; i++) {\n            result.add((long)0);\n        }\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            for (int j = 0; j\
    \ < k; j++) {\n                if (arr.get(i) > result.get(j)) {\n           \
    \         result.add(j, arr.get(i));\n                    break;\n           \
    \     }\n            }\n        }\n        return result;", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        for (int i = 0; i < k; i++) {\n   \
    \         result.add((long)0);\n        }\n        for (int i = 0; i < arr.size();\
    \ i++) {\n            for (int j = 0; j < k; j++) {\n                if (arr.get(i)\
    \ > result.get(j)) {\n                    result.add(j, arr.get(i));\n       \
    \             break;\n                }\n            }\n        }\n        return\
    \ result;"]
stop_tokens:
- "\n    }\n"
