language: java
name: HumanEval_68_pluck
results:
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        Long min = Long.MAX_VALUE;\n        int\
    \ minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n           \
    \ Long val = arr.get(i);\n            if (val % 2 == 0 && val < min) {\n     \
    \           min = val;\n                minIndex = i;\n            }\n       \
    \ }\n        if (minIndex == -1) {\n            return result;\n        }\n  \
    \      result.add(min);\n        result.add((long)minIndex);\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798397
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        long min = Long.MAX_VALUE;\n        int\
    \ minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n           \
    \ long value = arr.get(i);\n            if (value % 2 == 0 && value < min) {\n\
    \                min = value;\n                minIndex = i;\n            }\n\
    \        }\n        if (minIndex == -1) {\n            return result;\n      \
    \  }\n        result.add(min);\n        result.add((long)minIndex);\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798397
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        long min = Long.MAX_VALUE;\n        int\
    \ minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n           \
    \ long val = arr.get(i);\n            if (val % 2 == 0 && val < min) {\n     \
    \           min = val;\n                minIndex = i;\n            }\n       \
    \ }\n        if (minIndex == -1) {\n            return result;\n        }\n  \
    \      result.add(min);\n        result.add((long)minIndex);\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798397
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        // your\
    \ code here\n        return null;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.pluck(java.util.ArrayList)\"\
    \ is null\n\tat Problem.main(tmpxmlir5og.java:39)\n"
  stdout: ''
  timestamp: 1659798397
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        long min = Long.MAX_VALUE;\n        int\
    \ minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n           \
    \ long value = arr.get(i);\n            if (value % 2 == 0 && value < min) {\n\
    \                min = value;\n                minIndex = i;\n            }\n\
    \        }\n        if (minIndex != -1) {\n            result.add(min);\n    \
    \        result.add((long)minIndex);\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798397
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        long min = Long.MAX_VALUE;\n        int\
    \ minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n           \
    \ long val = arr.get(i);\n            if (val % 2 == 0 && val < min) {\n     \
    \           min = val;\n                minIndex = i;\n            }\n       \
    \ }\n        if (minIndex == -1) {\n            return result;\n        }\n  \
    \      result.add(min);\n        result.add((long)minIndex);\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798397
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        long min = Long.MAX_VALUE;\n        int\
    \ minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n           \
    \ long val = arr.get(i);\n            if (val % 2 == 0 && val < min) {\n     \
    \           min = val;\n                minIndex = i;\n            }\n       \
    \ }\n        if (minIndex == -1) {\n            return result;\n        }\n  \
    \      result.add(min);\n        result.add((long)minIndex);\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798397
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        long minEven = Long.MAX_VALUE;\n       \
    \ int minEvenIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n   \
    \         long val = arr.get(i);\n            if (val % 2 == 0 && val < minEven)\
    \ {\n                minEven = val;\n                minEvenIndex = i;\n     \
    \       }\n        }\n        if (minEvenIndex == -1) {\n            return result;\n\
    \        }\n        result.add(minEven);\n        result.add((long)minEvenIndex);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798397
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        // your\
    \ code here\n        return null;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.pluck(java.util.ArrayList)\"\
    \ is null\n\tat Problem.main(tmpxmlir5og.java:39)\n"
  stdout: ''
  timestamp: 1659798397
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        return\
    \ arr.stream().filter(x -> x % 2 == 0).min(Comparator.comparing(x -> x)).map(x\
    \ -> new ArrayList<Long>(Arrays.asList(x, (long)arr.indexOf(x)))).orElse(new ArrayList<Long>());\n\
    \    }\n    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798397
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long min = Long.MAX_VALUE;\n      \
    \  int index = -1;\n        for (int i = 0; i < arr.size(); i++) {\n         \
    \   long val = arr.get(i);\n            if (val % 2 == 0 && val < min) {\n   \
    \             min = val;\n                index = i;\n            }\n        }\n\
    \        if (index != -1) {\n            result.add(min);\n            result.add((long)index);\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798397
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) return result;\n\
    \        long smallest = Long.MAX_VALUE;\n        int index = 0;\n        for\
    \ (int i = 0; i < arr.size(); i++) {\n            long val = arr.get(i);\n   \
    \         if (val % 2 == 0 && val < smallest) {\n                smallest = val;\n\
    \                index = i;\n            }\n        }\n        if (smallest ==\
    \ Long.MAX_VALUE) return result;\n        result.add(smallest);\n        result.add((long)index);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798397
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long min = Long.MAX_VALUE;\n      \
    \  int minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n      \
    \      long v = arr.get(i);\n            if (v % 2 == 0 && v < min) {\n      \
    \          min = v;\n                minIndex = i;\n            }\n        }\n\
    \        if (minIndex != -1) {\n            result.add(min);\n            result.add((long)minIndex);\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798397
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long min = Long.MAX_VALUE;\n      \
    \  int minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n      \
    \      long val = arr.get(i);\n            if (val % 2 == 0 && val < min) {\n\
    \                min = val;\n                minIndex = i;\n            }\n  \
    \      }\n        if (minIndex != -1) {\n            result.add(min);\n      \
    \      result.add((long)minIndex);\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798397
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        long min = Long.MAX_VALUE;\n        int\
    \ minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n           \
    \ long value = arr.get(i);\n            if (value % 2 == 0 && value < min) {\n\
    \                min = value;\n                minIndex = i;\n            }\n\
    \        }\n        if (minIndex == -1) {\n            return result;\n      \
    \  }\n        result.add(min);\n        result.add((long)minIndex);\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798397
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        long min = Long.MAX_VALUE;\n        int\
    \ index = -1;\n        for (int i = 0; i < arr.size(); i++) {\n            long\
    \ val = arr.get(i);\n            if (val % 2 == 0 && val < min) {\n          \
    \      min = val;\n                index = i;\n            }\n        }\n    \
    \    if (index == -1) {\n            return result;\n        }\n        result.add(min);\n\
    \        result.add((long)index);\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798397
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        long min = Long.MAX_VALUE;\n        int\
    \ min_index = -1;\n        for (int i = 0; i < arr.size(); i++) {\n          \
    \  if (arr.get(i) % 2 == 0 && arr.get(i) < min) {\n                min = arr.get(i);\n\
    \                min_index = i;\n            }\n        }\n        if (min_index\
    \ == -1) {\n            return result;\n        }\n        result.add(min);\n\
    \        result.add((long)min_index);\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798397
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        long min = Long.MAX_VALUE;\n        int\
    \ min_index = -1;\n        for (int i = 0; i < arr.size(); i++) {\n          \
    \  long val = arr.get(i);\n            if (val % 2 == 0 && val < min) {\n    \
    \            min = val;\n                min_index = i;\n            }\n     \
    \   }\n        if (min_index == -1) {\n            return result;\n        }\n\
    \        result.add(min);\n        result.add((long)min_index);\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798397
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long min = Long.MAX_VALUE;\n      \
    \  int index = -1;\n        for (int i = 0; i < arr.size(); i++) {\n         \
    \   long value = arr.get(i);\n            if (value % 2 == 0 && value < min) {\n\
    \                min = value;\n                index = i;\n            }\n   \
    \     }\n        if (index >= 0) {\n            result.add(min);\n           \
    \ result.add((long)index);\n        }\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798397
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long min = Long.MAX_VALUE;\n      \
    \  int index = -1;\n        for (int i = 0; i < arr.size(); i++) {\n         \
    \   long val = arr.get(i);\n            if (val % 2 == 0 && val < min) {\n   \
    \             min = val;\n                index = i;\n            }\n        }\n\
    \        if (index != -1) {\n            result.add(min);\n            result.add((long)index);\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798397
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        long min = Long.MAX_VALUE;\n        int\
    \ min_index = -1;\n        for (int i = 0; i < arr.size(); i++) {\n          \
    \  long val = arr.get(i);\n            if (val % 2 == 0 && val < min) {\n    \
    \            min = val;\n                min_index = i;\n            }\n     \
    \   }\n        if (min_index == -1) {\n            return result;\n        }\n\
    \        result.add(min);\n        result.add((long)min_index);\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798397
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        long min = Long.MAX_VALUE;\n        int\
    \ min_index = -1;\n        for (int i = 0; i < arr.size(); i++) {\n          \
    \  long val = arr.get(i);\n            if (val % 2 == 0 && val < min) {\n    \
    \            min = val;\n                min_index = i;\n            }\n     \
    \   }\n        if (min_index == -1) {\n            return result;\n        }\n\
    \        result.add(min);\n        result.add((long)min_index);\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798397
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        // Your\
    \ code here\n        return null;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.pluck(java.util.ArrayList)\"\
    \ is null\n\tat Problem.main(tmpusvg3l4d.java:39)\n"
  stdout: ''
  timestamp: 1659798397
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        long min = Long.MAX_VALUE;\n        int\
    \ minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n           \
    \ long value = arr.get(i);\n            if (value % 2 == 0 && value < min) {\n\
    \                min = value;\n                minIndex = i;\n            }\n\
    \        }\n        if (minIndex != -1) {\n            result.add(min);\n    \
    \        result.add((long)minIndex);\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798397
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        long smallestEven = Long.MAX_VALUE;\n  \
    \      int smallestEvenIndex = -1;\n        for (int i = 0; i < arr.size(); i++)\
    \ {\n            long node = arr.get(i);\n            if (node % 2 == 0 && node\
    \ < smallestEven) {\n                smallestEven = node;\n                smallestEvenIndex\
    \ = i;\n            }\n        }\n        if (smallestEvenIndex == -1) {\n   \
    \         return result;\n        }\n        result.add(smallestEven);\n     \
    \   result.add((long)smallestEvenIndex);\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798397
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ res = new ArrayList<Long>();\n        if (arr.size() == 0) {\n            return\
    \ res;\n        }\n        long min = Long.MAX_VALUE;\n        int min_index =\
    \ -1;\n        for (int i = 0; i < arr.size(); i++) {\n            long val =\
    \ arr.get(i);\n            if (val % 2 == 0 && val < min) {\n                min\
    \ = val;\n                min_index = i;\n            }\n        }\n        if\
    \ (min_index == -1) {\n            return res;\n        }\n        res.add(min);\n\
    \        res.add((long)min_index);\n        return res;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798397
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        // Your\
    \ code here\n        return null;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.pluck(java.util.ArrayList)\"\
    \ is null\n\tat Problem.main(tmpusvg3l4d.java:39)\n"
  stdout: ''
  timestamp: 1659798397
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        // your\
    \ code here\n        return null;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.pluck(java.util.ArrayList)\"\
    \ is null\n\tat Problem.main(tmpxmlir5og.java:39)\n"
  stdout: ''
  timestamp: 1659798397
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long min = Long.MAX_VALUE;\n      \
    \  int index = -1;\n        for (int i = 0; i < arr.size(); i++) {\n         \
    \   long val = arr.get(i);\n            if (val % 2 == 0 && val < min) {\n   \
    \             min = val;\n                index = i;\n            }\n        }\n\
    \        if (index >= 0) {\n            result.add(min);\n            result.add((long)index);\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798397
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long min = Long.MAX_VALUE;\n      \
    \  int minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n      \
    \      long value = arr.get(i);\n            if (value % 2 == 0 && value < min)\
    \ {\n                min = value;\n                minIndex = i;\n           \
    \ }\n        }\n        if (minIndex != -1) {\n            result.add(min);\n\
    \            result.add((long)minIndex);\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798397
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        long min = Long.MAX_VALUE;\n        int\
    \ minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n           \
    \ long val = arr.get(i);\n            if (val % 2 == 0 && val < min) {\n     \
    \           min = val;\n                minIndex = i;\n            }\n       \
    \ }\n        if (minIndex == -1) {\n            return result;\n        }\n  \
    \      result.add(min);\n        result.add((long)minIndex);\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798397
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        long min = Long.MAX_VALUE;\n        int\
    \ min_index = -1;\n        for (int i = 0; i < arr.size(); i++) {\n          \
    \  long val = arr.get(i);\n            if (val % 2 == 0 && val < min) {\n    \
    \            min = val;\n                min_index = i;\n            }\n     \
    \   }\n        if (min_index == -1) {\n            return result;\n        }\n\
    \        result.add(min);\n        result.add((long)min_index);\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798397
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long min = Long.MAX_VALUE;\n      \
    \  int index = -1;\n        for (int i = 0; i < arr.size(); i++) {\n         \
    \   long val = arr.get(i);\n            if (val % 2 == 0 && val < min) {\n   \
    \             min = val;\n                index = i;\n            }\n        }\n\
    \        if (index != -1) {\n            result.add(min);\n            result.add((long)index);\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798397
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long min = Long.MAX_VALUE;\n      \
    \  int index = -1;\n        for (int i = 0; i < arr.size(); i++) {\n         \
    \   long val = arr.get(i);\n            if (val % 2 == 0 && val < min) {\n   \
    \             min = val;\n                index = i;\n            }\n        }\n\
    \        if (index != -1) {\n            result.add(min);\n            result.add((long)index);\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798397
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        long min = Long.MAX_VALUE;\n        int\
    \ minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n           \
    \ long val = arr.get(i);\n            if (val % 2 == 0 && val < min) {\n     \
    \           min = val;\n                minIndex = i;\n            }\n       \
    \ }\n        if (minIndex == -1) {\n            return result;\n        }\n  \
    \      result.add(min);\n        result.add((long)minIndex);\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798397
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        // Your\
    \ code here\n        return null;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.pluck(java.util.ArrayList)\"\
    \ is null\n\tat Problem.main(tmpusvg3l4d.java:39)\n"
  stdout: ''
  timestamp: 1659798397
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ ret = new ArrayList<Long>();\n        if (arr.size() == 0) {\n            return\
    \ ret;\n        }\n        long min = Long.MAX_VALUE;\n        int min_idx = -1;\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) %\
    \ 2 == 0 && arr.get(i) < min) {\n                min = arr.get(i);\n         \
    \       min_idx = i;\n            }\n        }\n        if (min_idx == -1) {\n\
    \            return ret;\n        }\n        ret.add(min);\n        ret.add((long)min_idx);\n\
    \        return ret;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798397
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        long min = Long.MAX_VALUE;\n        int\
    \ minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n           \
    \ long val = arr.get(i);\n            if (val % 2 == 0 && val < min) {\n     \
    \           min = val;\n                minIndex = i;\n            }\n       \
    \ }\n        if (minIndex != -1) {\n            result.add(min);\n           \
    \ result.add((long)minIndex);\n        }\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798397
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        long min = Long.MAX_VALUE;\n        int\
    \ minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n           \
    \ long value = arr.get(i);\n            if (value % 2 == 0 && value < min) {\n\
    \                min = value;\n                minIndex = i;\n            }\n\
    \        }\n        if (minIndex == -1) {\n            return result;\n      \
    \  }\n        result.add(min);\n        result.add((long)minIndex);\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798397
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        // your\
    \ code here\n        return null;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.pluck(java.util.ArrayList)\"\
    \ is null\n\tat Problem.main(tmpxmlir5og.java:39)\n"
  stdout: ''
  timestamp: 1659798397
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        long min = Long.MAX_VALUE;\n        int\
    \ index = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            long\
    \ val = arr.get(i);\n            if (val % 2 == 0 && val < min) {\n          \
    \      min = val;\n                index = i;\n            }\n        }\n    \
    \    if (min == Long.MAX_VALUE) {\n            return result;\n        }\n   \
    \     result.add(min);\n        result.add((long)index);\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798397
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        long min = Long.MAX_VALUE;\n        int\
    \ minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n           \
    \ long val = arr.get(i);\n            if (val % 2 == 0 && val < min) {\n     \
    \           min = val;\n                minIndex = i;\n            }\n       \
    \ }\n        if (minIndex == -1) {\n            return result;\n        }\n  \
    \      result.add(min);\n        result.add((long)minIndex);\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798397
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        long smallest = Long.MAX_VALUE;\n      \
    \  int smallestIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n \
    \           long value = arr.get(i);\n            if (value % 2 == 0 && value\
    \ < smallest) {\n                smallest = value;\n                smallestIndex\
    \ = i;\n            }\n        }\n        if (smallestIndex == -1) {\n       \
    \     return result;\n        }\n        result.add(smallest);\n        result.add((long)smallestIndex);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798399
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        long smallest = Long.MAX_VALUE;\n      \
    \  int index = -1;\n        for (int i = 0; i < arr.size(); i++) {\n         \
    \   long value = arr.get(i);\n            if (value % 2 == 0 && value < smallest)\
    \ {\n                smallest = value;\n                index = i;\n         \
    \   }\n        }\n        if (index == -1) {\n            return result;\n   \
    \     }\n        result.add(smallest);\n        result.add((long)index);\n   \
    \     return result;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798399
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        long min = Long.MAX_VALUE;\n        int\
    \ minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n           \
    \ long val = arr.get(i);\n            if (val % 2 == 0 && val < min) {\n     \
    \           min = val;\n                minIndex = i;\n            }\n       \
    \ }\n        if (minIndex == -1) {\n            return result;\n        }\n  \
    \      result.add(min);\n        result.add((long)minIndex);\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798397
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        // Your\
    \ code here\n        return new ArrayList<Long>();\n    }\n    public static void\
    \ main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpq4vhz01b.java:39)\n"
  stdout: ''
  timestamp: 1659798399
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        long min = Long.MAX_VALUE;\n        int\
    \ minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n           \
    \ long val = arr.get(i);\n            if (val % 2 == 0 && val < min) {\n     \
    \           min = val;\n                minIndex = i;\n            }\n       \
    \ }\n        if (minIndex == -1) {\n            return result;\n        }\n  \
    \      result.add(min);\n        result.add((long)minIndex);\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798397
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        long min = Long.MAX_VALUE;\n        int\
    \ minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n           \
    \ long value = arr.get(i);\n            if (value % 2 == 0 && value < min) {\n\
    \                min = value;\n                minIndex = i;\n            }\n\
    \        }\n        if (minIndex == -1) {\n            return result;\n      \
    \  }\n        result.add(min);\n        result.add((long)minIndex);\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798397
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        long min = Long.MAX_VALUE;\n        int\
    \ minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n           \
    \ long val = arr.get(i);\n            if (val % 2 == 0 && val < min) {\n     \
    \           min = val;\n                minIndex = i;\n            }\n       \
    \ }\n        if (minIndex == -1) {\n            return result;\n        }\n  \
    \      result.add(min);\n        result.add((long)minIndex);\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798397
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        long min = Long.MAX_VALUE;\n        int\
    \ minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n           \
    \ long val = arr.get(i);\n            if (val % 2 == 0 && val < min) {\n     \
    \           min = val;\n                minIndex = i;\n            }\n       \
    \ }\n        if (minIndex == -1) {\n            return result;\n        }\n  \
    \      result.add(min);\n        result.add((long)minIndex);\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798397
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        long min = Long.MAX_VALUE;\n        int\
    \ index = -1;\n        for (int i = 0; i < arr.size(); i++) {\n            long\
    \ val = arr.get(i);\n            if (val % 2 == 0 && val < min) {\n          \
    \      min = val;\n                index = i;\n            }\n        }\n    \
    \    if (index == -1) {\n            return result;\n        }\n        result.add(min);\n\
    \        result.add((long)index);\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798397
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        // Your\
    \ code here\n        return null;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.pluck(java.util.ArrayList)\"\
    \ is null\n\tat Problem.main(tmpusvg3l4d.java:39)\n"
  stdout: ''
  timestamp: 1659798397
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long min = Long.MAX_VALUE;\n      \
    \  int index = -1;\n        for (int i = 0; i < arr.size(); i++) {\n         \
    \   long val = arr.get(i);\n            if (val % 2 == 0 && val < min) {\n   \
    \             min = val;\n                index = i;\n            }\n        }\n\
    \        if (index != -1) {\n            result.add(min);\n            result.add((long)index);\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798397
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ ret = new ArrayList<Long>();\n        if (arr.size() == 0) {\n            return\
    \ ret;\n        }\n        long min = Long.MAX_VALUE;\n        int min_index =\
    \ -1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i)\
    \ % 2 == 0 && arr.get(i) < min) {\n                min = arr.get(i);\n       \
    \         min_index = i;\n            }\n        }\n        if (min_index == -1)\
    \ {\n            return ret;\n        }\n        ret.add(min);\n        ret.add((long)min_index);\n\
    \        return ret;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798399
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ ret = new ArrayList<Long>();\n        if (arr.size() == 0) {\n            return\
    \ ret;\n        }\n        long min = Long.MAX_VALUE;\n        int min_idx = -1;\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) %\
    \ 2 == 0 && arr.get(i) < min) {\n                min = arr.get(i);\n         \
    \       min_idx = i;\n            }\n        }\n        if (min_idx == -1) {\n\
    \            return ret;\n        }\n        ret.add(min);\n        ret.add((long)min_idx);\n\
    \        return ret;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798397
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        long min = Long.MAX_VALUE;\n        int\
    \ minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n           \
    \ long value = arr.get(i);\n            if (value % 2 == 0 && value < min) {\n\
    \                min = value;\n                minIndex = i;\n            }\n\
    \        }\n        if (minIndex == -1) {\n            return result;\n      \
    \  }\n        result.add(min);\n        result.add((long)minIndex);\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798397
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ res = new ArrayList<Long>();\n        if (arr.size() == 0) {\n            return\
    \ res;\n        }\n        long min = Long.MAX_VALUE;\n        int min_index =\
    \ -1;\n        for (int i = 0; i < arr.size(); i++) {\n            long val =\
    \ arr.get(i);\n            if (val % 2 == 0 && val < min) {\n                min\
    \ = val;\n                min_index = i;\n            }\n        }\n        if\
    \ (min_index != -1) {\n            res.add(min);\n            res.add((long)min_index);\n\
    \        }\n        return res;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798399
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        long min = Long.MAX_VALUE;\n        int\
    \ minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n           \
    \ long val = arr.get(i);\n            if (val % 2 == 0 && val < min) {\n     \
    \           min = val;\n                minIndex = i;\n            }\n       \
    \ }\n        if (minIndex == -1) {\n            return result;\n        }\n  \
    \      result.add(min);\n        result.add((long)minIndex);\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798397
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        long min = Long.MAX_VALUE;\n        int\
    \ min_index = -1;\n        for (int i = 0; i < arr.size(); i++) {\n          \
    \  long val = arr.get(i);\n            if (val % 2 == 0 && val < min) {\n    \
    \            min = val;\n                min_index = i;\n            }\n     \
    \   }\n        if (min_index != -1) {\n            result.add(min);\n        \
    \    result.add((long)min_index);\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798399
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        long min = Long.MAX_VALUE;\n        int\
    \ index = -1;\n        for (int i = 0; i < arr.size(); i++) {\n            if\
    \ (arr.get(i) % 2 == 0 && arr.get(i) < min) {\n                min = arr.get(i);\n\
    \                index = i;\n            }\n        }\n        if (index == -1)\
    \ {\n            return result;\n        }\n        result.add(min);\n       \
    \ result.add((long)index);\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798399
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        long min = Long.MAX_VALUE;\n        int\
    \ minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n           \
    \ long val = arr.get(i);\n            if (val % 2 == 0 && val < min) {\n     \
    \           min = val;\n                minIndex = i;\n            }\n       \
    \ }\n        if (minIndex == -1) {\n            return result;\n        }\n  \
    \      result.add(min);\n        result.add((long)minIndex);\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798397
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        // Your\
    \ code here\n        return null;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.pluck(java.util.ArrayList)\"\
    \ is null\n\tat Problem.main(tmpusvg3l4d.java:39)\n"
  stdout: ''
  timestamp: 1659798397
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        if (arr.size()\
    \ == 0) {\n            return new ArrayList<Long>();\n        }\n        long\
    \ min = Long.MAX_VALUE;\n        int min_index = -1;\n        for (int i = 0;\
    \ i < arr.size(); i++) {\n            long val = arr.get(i);\n            if (val\
    \ % 2 == 0 && val < min) {\n                min = val;\n                min_index\
    \ = i;\n            }\n        }\n        if (min_index == -1) {\n           \
    \ return new ArrayList<Long>();\n        }\n        return new ArrayList<Long>(Arrays.asList(min,\
    \ (long)min_index));\n    }\n    public static void main(String[] args) {\n  \
    \  assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798399
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long min = Long.MAX_VALUE;\n      \
    \  int index = -1;\n        for (int i = 0; i < arr.size(); i++) {\n         \
    \   if (arr.get(i) % 2 == 0 && arr.get(i) < min) {\n                min = arr.get(i);\n\
    \                index = i;\n            }\n        }\n        if (index == -1)\
    \ {\n            return result;\n        }\n        result.add(min);\n       \
    \ result.add((long)index);\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798399
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long min = Long.MAX_VALUE;\n      \
    \  int minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n      \
    \      if (arr.get(i) % 2 == 0 && arr.get(i) < min) {\n                min = arr.get(i);\n\
    \                minIndex = i;\n            }\n        }\n        if (minIndex\
    \ != -1) {\n            result.add(min);\n            result.add((long)minIndex);\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798399
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        long min = Long.MAX_VALUE;\n        int\
    \ index = -1;\n        for (int i = 0; i < arr.size(); i++) {\n            if\
    \ (arr.get(i) % 2 == 0 && arr.get(i) < min) {\n                min = arr.get(i);\n\
    \                index = i;\n            }\n        }\n        if (index == -1)\
    \ {\n            return result;\n        }\n        result.add(min);\n       \
    \ result.add((long)index);\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798399
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        long min = Long.MAX_VALUE;\n        int\
    \ min_index = -1;\n        for (int i = 0; i < arr.size(); i++) {\n          \
    \  if (arr.get(i) % 2 == 0 && arr.get(i) < min) {\n                min = arr.get(i);\n\
    \                min_index = i;\n            }\n        }\n        if (min_index\
    \ == -1) {\n            return result;\n        }\n        result.add(min);\n\
    \        result.add((long)min_index);\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798397
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        // Write\
    \ your code here\n        // To print results to the standard output you can use\
    \ System.out.println()\n        // Example: System.out.println(\"Hello world!\"\
    );\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (arr.size()\
    \ == 0) {\n            return result;\n        }\n        long min = Long.MAX_VALUE;\n\
    \        int min_index = -1;\n        for (int i = 0; i < arr.size(); i++) {\n\
    \            long val = arr.get(i);\n            if (val % 2 == 0 && val < min)\
    \ {\n                min = val;\n                min_index = i;\n            }\n\
    \        }\n        if (min_index == -1) {\n            return result;\n     \
    \   }\n        result.add(min);\n        result.add((long)min_index);\n      \
    \  return result;\n    }\n    public static void main(String[] args) {\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798399
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        long min = Long.MAX_VALUE;\n        int\
    \ index = -1;\n        for (int i = 0; i < arr.size(); i++) {\n            if\
    \ (arr.get(i) % 2 == 0 && arr.get(i) < min) {\n                min = arr.get(i);\n\
    \                index = i;\n            }\n        }\n        if (index == -1)\
    \ {\n            return result;\n        }\n        result.add(min);\n       \
    \ result.add((long)index);\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798399
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long min = Long.MAX_VALUE;\n      \
    \  int minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n      \
    \      long value = arr.get(i);\n            if (value % 2 == 0 && value < min)\
    \ {\n                min = value;\n                minIndex = i;\n           \
    \ }\n        }\n        if (minIndex == -1) {\n            return result;\n  \
    \      }\n        result.add(min);\n        result.add((long)minIndex);\n    \
    \    return result;\n    }\n    public static void main(String[] args) {\n   \
    \ assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798399
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long min = Long.MAX_VALUE;\n      \
    \  int index = -1;\n        for (int i = 0; i < arr.size(); i++) {\n         \
    \   long val = arr.get(i);\n            if (val % 2 == 0 && val < min) {\n   \
    \             min = val;\n                index = i;\n            }\n        }\n\
    \        if (index != -1) {\n            result.add(min);\n            result.add((long)index);\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798397
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        return\
    \ new ArrayList<Long>();\n    }\n    public static void main(String[] args) {\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdx4x_dnd.java:38)\n"
  stdout: ''
  timestamp: 1659798399
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        // Your\
    \ code here\n        return null;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.pluck(java.util.ArrayList)\"\
    \ is null\n\tat Problem.main(tmpusvg3l4d.java:39)\n"
  stdout: ''
  timestamp: 1659798397
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        long min = Long.MAX_VALUE;\n        int\
    \ minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n           \
    \ if (arr.get(i) % 2 == 0 && arr.get(i) < min) {\n                min = arr.get(i);\n\
    \                minIndex = i;\n            }\n        }\n        if (minIndex\
    \ == -1) {\n            return result;\n        }\n        result.add(min);\n\
    \        result.add((long)minIndex);\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798399
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ res = new ArrayList<Long>();\n        long min = Long.MAX_VALUE;\n        int\
    \ index = -1;\n        for (int i = 0; i < arr.size(); i++) {\n            long\
    \ val = arr.get(i);\n            if (val % 2 == 0 && val < min) {\n          \
    \      min = val;\n                index = i;\n            }\n        }\n    \
    \    if (index != -1) {\n            res.add(min);\n            res.add((long)index);\n\
    \        }\n        return res;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798399
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        // Your\
    \ code here\n        return null;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.pluck(java.util.ArrayList)\"\
    \ is null\n\tat Problem.main(tmpusvg3l4d.java:39)\n"
  stdout: ''
  timestamp: 1659798397
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        // Your\
    \ code here\n        return null;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.pluck(java.util.ArrayList)\"\
    \ is null\n\tat Problem.main(tmpusvg3l4d.java:39)\n"
  stdout: ''
  timestamp: 1659798397
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ ans = new ArrayList<Long>();\n        if (arr.size() == 0) {\n            return\
    \ ans;\n        }\n        long min = Long.MAX_VALUE;\n        int idx = -1;\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) %\
    \ 2 == 0 && arr.get(i) < min) {\n                min = arr.get(i);\n         \
    \       idx = i;\n            }\n        }\n        if (idx == -1) {\n       \
    \     return ans;\n        }\n        ans.add(min);\n        ans.add((long)idx);\n\
    \        return ans;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798399
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        // Your\
    \ code here\n        return new ArrayList<Long>();\n    }\n    public static void\
    \ main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpq4vhz01b.java:39)\n"
  stdout: ''
  timestamp: 1659798399
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ res = new ArrayList<Long>();\n        if (arr.size() == 0) {\n            return\
    \ res;\n        }\n        long min = Long.MAX_VALUE;\n        int minIndex =\
    \ -1;\n        for (int i = 0; i < arr.size(); i++) {\n            long val =\
    \ arr.get(i);\n            if (val % 2 == 0 && val < min) {\n                min\
    \ = val;\n                minIndex = i;\n            }\n        }\n        if\
    \ (minIndex == -1) {\n            return res;\n        }\n        res.add(min);\n\
    \        res.add((long)minIndex);\n        return res;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798399
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        long min = Long.MAX_VALUE;\n        int\
    \ minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n           \
    \ long val = arr.get(i);\n            if (val % 2 == 0 && val < min) {\n     \
    \           min = val;\n                minIndex = i;\n            }\n       \
    \ }\n        if (minIndex != -1) {\n            result.add(min);\n           \
    \ result.add((long)minIndex);\n        }\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798397
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        Long min = Long.MAX_VALUE;\n        int\
    \ minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n           \
    \ Long val = arr.get(i);\n            if (val % 2 == 0 && val < min) {\n     \
    \           min = val;\n                minIndex = i;\n            }\n       \
    \ }\n        if (minIndex == -1) {\n            return result;\n        }\n  \
    \      result.add(min);\n        result.add((long)minIndex);\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798397
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long min = Long.MAX_VALUE;\n      \
    \  int index = -1;\n        for (int i = 0; i < arr.size(); i++) {\n         \
    \   long value = arr.get(i);\n            if (value % 2 == 0 && value < min) {\n\
    \                min = value;\n                index = i;\n            }\n   \
    \     }\n        if (index != -1) {\n            result.add(min);\n          \
    \  result.add((long)index);\n        }\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798399
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        long min = Long.MAX_VALUE;\n        int\
    \ minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n           \
    \ long val = arr.get(i);\n            if (val % 2 == 0 && val < min) {\n     \
    \           min = val;\n                minIndex = i;\n            }\n       \
    \ }\n        if (minIndex == -1) {\n            return result;\n        }\n  \
    \      result.add(min);\n        result.add((long)minIndex);\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798397
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        long smallest = Long.MAX_VALUE;\n      \
    \  int smallestIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n \
    \           long value = arr.get(i);\n            if (value % 2 == 0 && value\
    \ < smallest) {\n                smallest = value;\n                smallestIndex\
    \ = i;\n            }\n        }\n        if (smallestIndex == -1) {\n       \
    \     return result;\n        }\n        result.add(smallest);\n        result.add((long)smallestIndex);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798399
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ ret = new ArrayList<Long>();\n        if (arr.size() == 0) {\n            return\
    \ ret;\n        }\n        long min = Long.MAX_VALUE;\n        int minIndex =\
    \ -1;\n        for (int i = 0; i < arr.size(); i++) {\n            long val =\
    \ arr.get(i);\n            if (val % 2 == 0 && val < min) {\n                min\
    \ = val;\n                minIndex = i;\n            }\n        }\n        if\
    \ (minIndex == -1) {\n            return ret;\n        }\n        ret.add(min);\n\
    \        ret.add((long)minIndex);\n        return ret;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798399
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        long min = Long.MAX_VALUE;\n        int\
    \ minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n           \
    \ long value = arr.get(i);\n            if (value % 2 == 0 && value < min) {\n\
    \                min = value;\n                minIndex = i;\n            }\n\
    \        }\n        if (minIndex != -1) {\n            result.add(min);\n    \
    \        result.add((long)minIndex);\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798397
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long minEven = Long.MAX_VALUE;\n  \
    \      int minEvenIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n\
    \            long val = arr.get(i);\n            if (val % 2 == 0 && val < minEven)\
    \ {\n                minEven = val;\n                minEvenIndex = i;\n     \
    \       }\n        }\n        if (minEvenIndex != -1) {\n            result.add(minEven);\n\
    \            result.add((long)minEvenIndex);\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798399
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        // Your\
    \ code here\n        return null;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.pluck(java.util.ArrayList)\"\
    \ is null\n\tat Problem.main(tmpusvg3l4d.java:39)\n"
  stdout: ''
  timestamp: 1659798397
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long min = Long.MAX_VALUE;\n      \
    \  int min_index = -1;\n        for (int i = 0; i < arr.size(); i++) {\n     \
    \       long val = arr.get(i);\n            if (val % 2 == 0 && val < min) {\n\
    \                min = val;\n                min_index = i;\n            }\n \
    \       }\n        if (min_index != -1) {\n            result.add(min);\n    \
    \        result.add((long)min_index);\n        }\n        return result;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798399
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        Long min = Long.MAX_VALUE;\n        int\
    \ minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n           \
    \ Long val = arr.get(i);\n            if (val % 2 == 0 && val < min) {\n     \
    \           min = val;\n                minIndex = i;\n            }\n       \
    \ }\n        if (minIndex != -1) {\n            result.add(min);\n           \
    \ result.add((long)minIndex);\n        }\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798399
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        // your\
    \ code here\n        return null;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.pluck(java.util.ArrayList)\"\
    \ is null\n\tat Problem.main(tmpxmlir5og.java:39)\n"
  stdout: ''
  timestamp: 1659798397
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        long min = Long.MAX_VALUE;\n        int\
    \ index = -1;\n        for (int i = 0; i < arr.size(); i++) {\n            long\
    \ value = arr.get(i);\n            if (value % 2 == 0 && value < min) {\n    \
    \            min = value;\n                index = i;\n            }\n       \
    \ }\n        if (index == -1) {\n            return result;\n        }\n     \
    \   result.add(min);\n        result.add((long)index);\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798399
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        // Your\
    \ code here\n        return null;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.pluck(java.util.ArrayList)\"\
    \ is null\n\tat Problem.main(tmpusvg3l4d.java:39)\n"
  stdout: ''
  timestamp: 1659798397
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        // your\
    \ code goes here\n        return null;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.pluck(java.util.ArrayList)\"\
    \ is null\n\tat Problem.main(tmpk44ojlo9.java:39)\n"
  stdout: ''
  timestamp: 1659798400
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ ret = new ArrayList<Long>();\n        if (arr.size() == 0) {\n            return\
    \ ret;\n        }\n        Long min = Long.MAX_VALUE;\n        int idx = -1;\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            Long val = arr.get(i);\n\
    \            if (val % 2 == 0 && val < min) {\n                min = val;\n  \
    \              idx = i;\n            }\n        }\n        if (idx == -1) {\n\
    \            return ret;\n        }\n        ret.add(min);\n        ret.add((long)idx);\n\
    \        return ret;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798401
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        long min = Long.MAX_VALUE;\n        int\
    \ minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n           \
    \ long val = arr.get(i);\n            if (val % 2 == 0 && val < min) {\n     \
    \           min = val;\n                minIndex = i;\n            }\n       \
    \ }\n        if (minIndex == -1) {\n            return result;\n        }\n  \
    \      result.add(min);\n        result.add((long)minIndex);\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798397
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        long min = Long.MAX_VALUE;\n        int\
    \ minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n           \
    \ long value = arr.get(i);\n            if (value % 2 == 0 && value < min) {\n\
    \                min = value;\n                minIndex = i;\n            }\n\
    \        }\n        if (minIndex == -1) {\n            return result;\n      \
    \  }\n        result.add(min);\n        result.add((long)minIndex);\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798397
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        long min = Long.MAX_VALUE;\n        int\
    \ index = -1;\n        for (int i = 0; i < arr.size(); i++) {\n            if\
    \ (arr.get(i) % 2 == 0 && arr.get(i) < min) {\n                min = arr.get(i);\n\
    \                index = i;\n            }\n        }\n        if (index == -1)\
    \ {\n            return result;\n        }\n        result.add(min);\n       \
    \ result.add((long)index);\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798399
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ ret = new ArrayList<Long>();\n        long min = Long.MAX_VALUE;\n        int\
    \ min_idx = -1;\n        for (int i = 0; i < arr.size(); i++) {\n            long\
    \ val = arr.get(i);\n            if (val % 2 == 0 && val < min) {\n          \
    \      min = val;\n                min_idx = i;\n            }\n        }\n  \
    \      if (min_idx >= 0) {\n            ret.add(min);\n            ret.add((long)min_idx);\n\
    \        }\n        return ret;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798401
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        long min = Long.MAX_VALUE;\n        int\
    \ minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n           \
    \ long value = arr.get(i);\n            if (value % 2 == 0 && value < min) {\n\
    \                min = value;\n                minIndex = i;\n            }\n\
    \        }\n        if (minIndex != -1) {\n            result.add(min);\n    \
    \        result.add((long)minIndex);\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798397
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        long min = Long.MAX_VALUE;\n        int\
    \ min_index = -1;\n        for (int i = 0; i < arr.size(); i++) {\n          \
    \  long value = arr.get(i);\n            if (value % 2 == 0 && value < min) {\n\
    \                min = value;\n                min_index = i;\n            }\n\
    \        }\n        if (min_index == -1) {\n            return result;\n     \
    \   }\n        result.add(min);\n        result.add((long)min_index);\n      \
    \  return result;\n    }\n    public static void main(String[] args) {\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798401
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long min = Long.MAX_VALUE;\n      \
    \  int index = -1;\n        for (int i = 0; i < arr.size(); i++) {\n         \
    \   long x = arr.get(i);\n            if (x % 2 == 0 && x < min) {\n         \
    \       min = x;\n                index = i;\n            }\n        }\n     \
    \   if (index != -1) {\n            result.add(min);\n            result.add((long)index);\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798401
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long min = Long.MAX_VALUE;\n      \
    \  int index = -1;\n        for (int i = 0; i < arr.size(); i++) {\n         \
    \   long val = arr.get(i);\n            if (val % 2 == 0 && val < min) {\n   \
    \             min = val;\n                index = i;\n            }\n        }\n\
    \        if (index != -1) {\n            result.add(min);\n            result.add((long)index);\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798397
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ ret = new ArrayList<Long>();\n        if (arr.size() == 0) {\n            return\
    \ ret;\n        }\n        long min = Long.MAX_VALUE;\n        int min_i = -1;\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            long val = arr.get(i);\n\
    \            if (val % 2 == 0 && val < min) {\n                min = val;\n  \
    \              min_i = i;\n            }\n        }\n        if (min_i == -1)\
    \ {\n            return ret;\n        }\n        ret.add(min);\n        ret.add((long)min_i);\n\
    \        return ret;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798401
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        // Your code here\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpb6y6rt0y.java:40)\n"
  stdout: ''
  timestamp: 1659798401
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ ret = new ArrayList<Long>();\n        long min = Long.MAX_VALUE;\n        int\
    \ min_index = -1;\n        for (int i = 0; i < arr.size(); i++) {\n          \
    \  long v = arr.get(i);\n            if (v % 2 == 0 && v < min) {\n          \
    \      min = v;\n                min_index = i;\n            }\n        }\n  \
    \      if (min_index != -1) {\n            ret.add(min);\n            ret.add((long)min_index);\n\
    \        }\n        return ret;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798401
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        long min = Long.MAX_VALUE;\n        int\
    \ min_index = -1;\n        for (int i = 0; i < arr.size(); i++) {\n          \
    \  long val = arr.get(i);\n            if (val % 2 == 0 && val < min) {\n    \
    \            min = val;\n                min_index = i;\n            }\n     \
    \   }\n        if (min_index == -1) {\n            return result;\n        }\n\
    \        result.add(min);\n        result.add((long)min_index);\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798397
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        long min = Long.MAX_VALUE;\n        int\
    \ min_index = -1;\n        for (int i = 0; i < arr.size(); i++) {\n          \
    \  if (arr.get(i) % 2 == 0 && arr.get(i) < min) {\n                min = arr.get(i);\n\
    \                min_index = i;\n            }\n        }\n        if (min_index\
    \ == -1) {\n            return result;\n        }\n        result.add(min);\n\
    \        result.add((long)min_index);\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798397
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        long min = Long.MAX_VALUE;\n        int\
    \ min_index = -1;\n        for (int i = 0; i < arr.size(); i++) {\n          \
    \  long val = arr.get(i);\n            if (val % 2 == 0 && val < min) {\n    \
    \            min = val;\n                min_index = i;\n            }\n     \
    \   }\n        if (min_index == -1) {\n            return result;\n        }\n\
    \        result.add(min);\n        result.add((long)min_index);\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798397
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ ret = new ArrayList<Long>();\n        if (arr.size() == 0) {\n            return\
    \ ret;\n        }\n        long min = Long.MAX_VALUE;\n        int minIndex =\
    \ -1;\n        for (int i = 0; i < arr.size(); i++) {\n            long cur =\
    \ arr.get(i);\n            if (cur % 2 == 0 && cur < min) {\n                min\
    \ = cur;\n                minIndex = i;\n            }\n        }\n        if\
    \ (minIndex != -1) {\n            ret.add(min);\n            ret.add((long)minIndex);\n\
    \        }\n        return ret;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798401
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        long min = Long.MAX_VALUE;\n        int\
    \ minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n           \
    \ long value = arr.get(i);\n            if (value % 2 == 0 && value < min) {\n\
    \                min = value;\n                minIndex = i;\n            }\n\
    \        }\n        if (minIndex != -1) {\n            result.add(min);\n    \
    \        result.add((long)minIndex);\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798397
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ res = new ArrayList<Long>();\n        if (arr.size() == 0) {\n            return\
    \ res;\n        }\n        long min = Long.MAX_VALUE;\n        int minIndex =\
    \ -1;\n        for (int i = 0; i < arr.size(); i++) {\n            long val =\
    \ arr.get(i);\n            if (val % 2 == 0 && val < min) {\n                min\
    \ = val;\n                minIndex = i;\n            }\n        }\n        if\
    \ (minIndex != -1) {\n            res.add(min);\n            res.add((long)minIndex);\n\
    \        }\n        return res;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798401
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long min = Long.MAX_VALUE;\n      \
    \  int index = -1;\n        for (int i = 0; i < arr.size(); i++) {\n         \
    \   long val = arr.get(i);\n            if (val % 2 == 0 && val < min) {\n   \
    \             min = val;\n                index = i;\n            }\n        }\n\
    \        if (index != -1) {\n            result.add(min);\n            result.add((long)index);\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798397
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        // Write\
    \ your code here\n        // To print results to the standard output you can use\
    \ System.out.println()\n        // Example: System.out.println(\"Hello world!\"\
    );\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (arr.size()\
    \ == 0) {\n            return result;\n        }\n        long min = Long.MAX_VALUE;\n\
    \        int min_index = -1;\n        for (int i = 0; i < arr.size(); i++) {\n\
    \            long val = arr.get(i);\n            if (val % 2 == 0 && val < min)\
    \ {\n                min = val;\n                min_index = i;\n            }\n\
    \        }\n        if (min_index == -1) {\n            return result;\n     \
    \   }\n        result.add(min);\n        result.add((long)min_index);\n      \
    \  return result;\n    }\n    public static void main(String[] args) {\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798399
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        long min = arr.get(0);\n        int minIndex\
    \ = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i)\
    \ % 2 == 0) {\n                if (arr.get(i) < min) {\n                    min\
    \ = arr.get(i);\n                    minIndex = i;\n                }\n      \
    \      }\n        }\n        if (min % 2 == 0) {\n            result.add(min);\n\
    \            result.add((long)minIndex);\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxa8nvrga.java:57)\n"
  stdout: ''
  timestamp: 1659798401
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ ret = new ArrayList<Long>();\n        if (arr.size() == 0) {\n            return\
    \ ret;\n        }\n        long min = Long.MAX_VALUE;\n        int min_index =\
    \ -1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i)\
    \ % 2 == 0 && arr.get(i) < min) {\n                min = arr.get(i);\n       \
    \         min_index = i;\n            }\n        }\n        if (min_index == -1)\
    \ {\n            return ret;\n        }\n        ret.add(min);\n        ret.add((long)min_index);\n\
    \        return ret;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798399
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        // Your\
    \ code here\n        return null;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.pluck(java.util.ArrayList)\"\
    \ is null\n\tat Problem.main(tmpusvg3l4d.java:39)\n"
  stdout: ''
  timestamp: 1659798397
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        long min = Long.MAX_VALUE;\n        int\
    \ min_index = -1;\n        for (int i = 0; i < arr.size(); i++) {\n          \
    \  long value = arr.get(i);\n            if (value % 2 == 0 && value < min) {\n\
    \                min = value;\n                min_index = i;\n            }\n\
    \        }\n        if (min_index == -1) {\n            return result;\n     \
    \   }\n        result.add(min);\n        result.add((long)min_index);\n      \
    \  return result;\n    }\n    public static void main(String[] args) {\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798401
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long min = Long.MAX_VALUE;\n      \
    \  int minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n      \
    \      long val = arr.get(i);\n            if (val % 2 == 0 && val < min) {\n\
    \                min = val;\n                minIndex = i;\n            }\n  \
    \      }\n        if (minIndex != -1) {\n            result.add(min);\n      \
    \      result.add((long)minIndex);\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798397
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        // your\
    \ code here\n        return null;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.pluck(java.util.ArrayList)\"\
    \ is null\n\tat Problem.main(tmpxmlir5og.java:39)\n"
  stdout: ''
  timestamp: 1659798397
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        long smallest = Long.MAX_VALUE;\n      \
    \  int smallestIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n \
    \           long value = arr.get(i);\n            if (value % 2 == 0 && value\
    \ < smallest) {\n                smallest = value;\n                smallestIndex\
    \ = i;\n            }\n        }\n        if (smallestIndex == -1) {\n       \
    \     return result;\n        }\n        result.add(smallest);\n        result.add((long)smallestIndex);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798399
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        long min = Long.MAX_VALUE;\n        int\
    \ index = -1;\n        for (int i = 0; i < arr.size(); i++) {\n            long\
    \ v = arr.get(i);\n            if (v % 2 == 0 && v < min) {\n                min\
    \ = v;\n                index = i;\n            }\n        }\n        if (index\
    \ == -1) {\n            return result;\n        }\n        result.add(min);\n\
    \        result.add((long)index);\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798401
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        // your\
    \ code here\n        return new ArrayList<Long>();\n    }\n    public static void\
    \ main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppu8nw4rz.java:39)\n"
  stdout: ''
  timestamp: 1659798401
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long min = Long.MAX_VALUE;\n      \
    \  int index = -1;\n        for (int i = 0; i < arr.size(); i++) {\n         \
    \   long value = arr.get(i);\n            if (value % 2 == 0 && value < min) {\n\
    \                min = value;\n                index = i;\n            }\n   \
    \     }\n        if (index != -1) {\n            result.add(min);\n          \
    \  result.add((long)index);\n        }\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798399
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long min = Long.MAX_VALUE;\n      \
    \  int minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n      \
    \      long value = arr.get(i);\n            if (value % 2 == 0 && value < min)\
    \ {\n                min = value;\n                minIndex = i;\n           \
    \ }\n        }\n        if (minIndex != -1) {\n            result.add(min);\n\
    \            result.add((long)minIndex);\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798397
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        long min = Long.MAX_VALUE;\n        int\
    \ index = -1;\n        for (int i = 0; i < arr.size(); i++) {\n            if\
    \ (arr.get(i) % 2 == 0 && arr.get(i) < min) {\n                min = arr.get(i);\n\
    \                index = i;\n            }\n        }\n        if (index == -1)\
    \ {\n            return result;\n        }\n        result.add(min);\n       \
    \ result.add((long)index);\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798399
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ ret = new ArrayList<Long>();\n        if (arr.size() == 0) {\n            return\
    \ ret;\n        }\n        Long min = Long.MAX_VALUE;\n        int min_index =\
    \ -1;\n        for (int i = 0; i < arr.size(); i++) {\n            Long val =\
    \ arr.get(i);\n            if (val % 2 == 0 && val < min) {\n                min\
    \ = val;\n                min_index = i;\n            }\n        }\n        if\
    \ (min_index == -1) {\n            return ret;\n        }\n        ret.add(min);\n\
    \        ret.add((long)min_index);\n        return ret;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798401
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        // Your\
    \ code here\n        return new ArrayList<Long>();\n    }\n    public static void\
    \ main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpq4vhz01b.java:39)\n"
  stdout: ''
  timestamp: 1659798399
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long min = Long.MAX_VALUE;\n      \
    \  int index = -1;\n        for (int i = 0; i < arr.size(); i++) {\n         \
    \   if (arr.get(i) % 2 == 0 && arr.get(i) < min) {\n                min = arr.get(i);\n\
    \                index = i;\n            }\n        }\n        if (index != -1)\
    \ {\n            result.add(min);\n            result.add((long)index);\n    \
    \    }\n        return result;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798401
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        long smallestEvenValue = Long.MAX_VALUE;\n\
    \        long smallestEvenValueIndex = -1;\n        for (int i = 0; i < arr.size();\
    \ i++) {\n            if (arr.get(i) % 2 == 0 && arr.get(i) < smallestEvenValue)\
    \ {\n                smallestEvenValue = arr.get(i);\n                smallestEvenValueIndex\
    \ = i;\n            }\n        }\n        if (smallestEvenValueIndex == -1) {\n\
    \            return result;\n        }\n        result.add(smallestEvenValue);\n\
    \        result.add(smallestEvenValueIndex);\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798401
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ ret = new ArrayList<Long>();\n        if (arr.size() == 0) {\n            return\
    \ ret;\n        }\n        long min = Long.MAX_VALUE;\n        int min_index =\
    \ -1;\n        for (int i = 0; i < arr.size(); i++) {\n            long val =\
    \ arr.get(i);\n            if (val % 2 == 0 && val < min) {\n                min\
    \ = val;\n                min_index = i;\n            }\n        }\n        if\
    \ (min_index == -1) {\n            return ret;\n        }\n        ret.add(min);\n\
    \        ret.add((long)min_index);\n        return ret;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798401
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        long min = arr.get(0);\n        int minIndex\
    \ = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i)\
    \ % 2 == 0) {\n                if (arr.get(i) < min) {\n                    min\
    \ = arr.get(i);\n                    minIndex = i;\n                }\n      \
    \      }\n        }\n        if (min % 2 == 0) {\n            result.add(min);\n\
    \            result.add((long)minIndex);\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxa8nvrga.java:57)\n"
  stdout: ''
  timestamp: 1659798401
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long min = Long.MAX_VALUE;\n      \
    \  int minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n      \
    \      long n = arr.get(i);\n            if (n % 2 == 0 && n < min) {\n      \
    \          min = n;\n                minIndex = i;\n            }\n        }\n\
    \        if (minIndex != -1) {\n            result.add(min);\n            result.add((long)minIndex);\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798401
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        long min = Long.MAX_VALUE;\n        int\
    \ minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n           \
    \ long value = arr.get(i);\n            if (value % 2 == 0 && value < min) {\n\
    \                min = value;\n                minIndex = i;\n            }\n\
    \        }\n        if (minIndex == -1) {\n            return result;\n      \
    \  }\n        result.add(min);\n        result.add((long)minIndex);\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798397
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ ret = new ArrayList<Long>();\n        if (arr.size() == 0) {\n            return\
    \ ret;\n        }\n        long min = Long.MAX_VALUE;\n        long minIndex =\
    \ -1;\n        for (int i = 0; i < arr.size(); i++) {\n            long val =\
    \ arr.get(i);\n            if (val % 2 == 0 && val < min) {\n                min\
    \ = val;\n                minIndex = i;\n            }\n        }\n        if\
    \ (minIndex != -1) {\n            ret.add(min);\n            ret.add(minIndex);\n\
    \        }\n        return ret;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798401
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        long min = Long.MAX_VALUE;\n        int\
    \ minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n           \
    \ long value = arr.get(i);\n            if (value % 2 == 0 && value < min) {\n\
    \                min = value;\n                minIndex = i;\n            }\n\
    \        }\n        if (minIndex != -1) {\n            result.add(min);\n    \
    \        result.add((long)minIndex);\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798397
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ ret = new ArrayList<Long>();\n        long min = Long.MAX_VALUE;\n        int\
    \ min_idx = -1;\n        for (int i = 0; i < arr.size(); i++) {\n            long\
    \ val = arr.get(i);\n            if (val % 2 == 0 && val < min) {\n          \
    \      min = val;\n                min_idx = i;\n            }\n        }\n  \
    \      if (min_idx == -1) {\n            return ret;\n        }\n        ret.add(min);\n\
    \        ret.add((long)min_idx);\n        return ret;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798401
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        long min = Long.MAX_VALUE;\n        int\
    \ minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n           \
    \ long val = arr.get(i);\n            if (val % 2 == 0 && val < min) {\n     \
    \           min = val;\n                minIndex = i;\n            }\n       \
    \ }\n        if (minIndex != -1) {\n            result.add(min);\n           \
    \ result.add((long)minIndex);\n        }\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798397
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        // Your\
    \ code here\n        return null;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.pluck(java.util.ArrayList)\"\
    \ is null\n\tat Problem.main(tmpusvg3l4d.java:39)\n"
  stdout: ''
  timestamp: 1659798397
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        long min = Long.MAX_VALUE;\n        int\
    \ minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n           \
    \ long val = arr.get(i);\n            if (val % 2 == 0 && val < min) {\n     \
    \           min = val;\n                minIndex = i;\n            }\n       \
    \ }\n        if (minIndex == -1) {\n            return result;\n        }\n  \
    \      result.add(min);\n        result.add((long)minIndex);\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798397
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        long min = Long.MAX_VALUE;\n        int\
    \ minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n           \
    \ long value = arr.get(i);\n            if (value % 2 == 0 && value < min) {\n\
    \                min = value;\n                minIndex = i;\n            }\n\
    \        }\n        if (minIndex == -1) {\n            return result;\n      \
    \  }\n        result.add(min);\n        result.add((long)minIndex);\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798397
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        return\
    \ arr;\n    }\n    public static void main(String[] args) {\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9ozph650.java:38)\n"
  stdout: ''
  timestamp: 1659798401
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long min = Long.MAX_VALUE;\n      \
    \  int minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n      \
    \      long val = arr.get(i);\n            if (val % 2 == 0 && val < min) {\n\
    \                min = val;\n                minIndex = i;\n            }\n  \
    \      }\n        if (minIndex != -1) {\n            result.add(min);\n      \
    \      result.add((long)minIndex);\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798397
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        long min = Long.MAX_VALUE;\n        int\
    \ index = -1;\n        for (int i = 0; i < arr.size(); i++) {\n            long\
    \ value = arr.get(i);\n            if (value % 2 == 0 && value < min) {\n    \
    \            min = value;\n                index = i;\n            }\n       \
    \ }\n        if (index != -1) {\n            result.add(min);\n            result.add((long)index);\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798401
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ res = new ArrayList<Long>();\n        if (arr.size() == 0) {\n            return\
    \ res;\n        }\n        Long min = Long.MAX_VALUE;\n        int min_idx = -1;\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            Long val = arr.get(i);\n\
    \            if (val % 2 == 0 && val < min) {\n                min = val;\n  \
    \              min_idx = i;\n            }\n        }\n        if (min_idx ==\
    \ -1) {\n            return res;\n        }\n        res.add(min);\n        res.add((long)min_idx);\n\
    \        return res;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798401
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        long min = Long.MAX_VALUE;\n        int\
    \ minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n           \
    \ long value = arr.get(i);\n            if (value % 2 == 0 && value < min) {\n\
    \                min = value;\n                minIndex = i;\n            }\n\
    \        }\n        if (minIndex == -1) {\n            return result;\n      \
    \  }\n        result.add(min);\n        result.add((long)minIndex);\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798397
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        // Your\
    \ code here\n        return null;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.pluck(java.util.ArrayList)\"\
    \ is null\n\tat Problem.main(tmpusvg3l4d.java:39)\n"
  stdout: ''
  timestamp: 1659798397
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        Long min = arr.get(0);\n        Long minIndex\
    \ = 0l;\n        for (int i = 0; i < arr.size(); i++) {\n            Long value\
    \ = arr.get(i);\n            if (value % 2 == 0) {\n                if (value\
    \ < min) {\n                    min = value;\n                    minIndex = (long)i;\n\
    \                }\n            }\n        }\n        if (min % 2 == 0) {\n  \
    \          result.add(min);\n            result.add(minIndex);\n        }\n  \
    \      return result;\n    }\n    public static void main(String[] args) {\n \
    \   assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpn5fsysyl.java:58)\n"
  stdout: ''
  timestamp: 1659798402
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        long smallest = Long.MAX_VALUE;\n      \
    \  int index = -1;\n        for (int i = 0; i < arr.size(); i++) {\n         \
    \   long value = arr.get(i);\n            if (value % 2 == 0 && value < smallest)\
    \ {\n                smallest = value;\n                index = i;\n         \
    \   }\n        }\n        if (index == -1) {\n            return result;\n   \
    \     }\n        result.add(smallest);\n        result.add((long)index);\n   \
    \     return result;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798399
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        long min = Long.MAX_VALUE;\n        int\
    \ index = -1;\n        for (int i = 0; i < arr.size(); i++) {\n            long\
    \ value = arr.get(i);\n            if (value % 2 == 0 && value < min) {\n    \
    \            min = value;\n                index = i;\n            }\n       \
    \ }\n        if (index == -1) {\n            return result;\n        }\n     \
    \   result.add(min);\n        result.add((long)index);\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798399
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        long min = Long.MAX_VALUE;\n        int\
    \ index = -1;\n        for (int i = 0; i < arr.size(); i++) {\n            if\
    \ (arr.get(i) % 2 == 0 && arr.get(i) < min) {\n                min = arr.get(i);\n\
    \                index = i;\n            }\n        }\n        if (index == -1)\
    \ {\n            return result;\n        }\n        result.add(min);\n       \
    \ result.add((long)index);\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798399
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ ret = new ArrayList<Long>();\n        long min = Long.MAX_VALUE;\n        int\
    \ min_index = -1;\n        for (int i = 0; i < arr.size(); i++) {\n          \
    \  long val = arr.get(i);\n            if (val % 2 == 0 && val < min) {\n    \
    \            min = val;\n                min_index = i;\n            }\n     \
    \   }\n        if (min_index != -1) {\n            ret.add(min);\n           \
    \ ret.add((long)min_index);\n        }\n        return ret;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798402
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        // your\
    \ code here\n        return null;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.pluck(java.util.ArrayList)\"\
    \ is null\n\tat Problem.main(tmpxmlir5og.java:39)\n"
  stdout: ''
  timestamp: 1659798397
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        // Your\
    \ code here\n        return null;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.pluck(java.util.ArrayList)\"\
    \ is null\n\tat Problem.main(tmpusvg3l4d.java:39)\n"
  stdout: ''
  timestamp: 1659798397
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ res = new ArrayList<Long>();\n        if (arr.size() == 0) {\n            return\
    \ res;\n        }\n        long min = Long.MAX_VALUE;\n        int min_index =\
    \ -1;\n        for (int i = 0; i < arr.size(); i++) {\n            long val =\
    \ arr.get(i);\n            if (val % 2 == 0 && val < min) {\n                min\
    \ = val;\n                min_index = i;\n            }\n        }\n        if\
    \ (min_index == -1) {\n            return res;\n        }\n        res.add(min);\n\
    \        res.add((long)min_index);\n        return res;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798397
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        long min = Long.MAX_VALUE;\n        int\
    \ minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n           \
    \ long val = arr.get(i);\n            if (val % 2 == 0 && val < min) {\n     \
    \           min = val;\n                minIndex = i;\n            }\n       \
    \ }\n        if (minIndex == -1) {\n            return result;\n        }\n  \
    \      result.add(min);\n        result.add((long)minIndex);\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798397
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        ArrayList<Long> evens = new ArrayList<Long>();\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) %\
    \ 2 == 0) {\n                evens.add(arr.get(i));\n            }\n        }\n\
    \        if (evens.size() == 0) {\n            return result;\n        }\n   \
    \     long min = evens.get(0);\n        for (int i = 0; i < evens.size(); i++)\
    \ {\n            if (evens.get(i) < min) {\n                min = evens.get(i);\n\
    \            }\n        }\n        result.add(min);\n        result.add((long)arr.indexOf(min));\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798402
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        long min = Long.MAX_VALUE;\n        int\
    \ min_index = -1;\n        for (int i = 0; i < arr.size(); i++) {\n          \
    \  long val = arr.get(i);\n            if (val % 2 == 0 && val < min) {\n    \
    \            min = val;\n                min_index = i;\n            }\n     \
    \   }\n        if (min_index == -1) {\n            return result;\n        }\n\
    \        result.add(min);\n        result.add((long)min_index);\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798397
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        long min = Long.MAX_VALUE;\n        int\
    \ minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n           \
    \ long val = arr.get(i);\n            if (val % 2 == 0 && val < min) {\n     \
    \           min = val;\n                minIndex = i;\n            }\n       \
    \ }\n        if (minIndex != -1) {\n            result.add(min);\n           \
    \ result.add((long)minIndex);\n        }\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798397
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long min = Long.MAX_VALUE;\n      \
    \  int min_index = -1;\n        for (int i = 0; i < arr.size(); i++) {\n     \
    \       long val = arr.get(i);\n            if (val % 2 == 0 && val < min) {\n\
    \                min = val;\n                min_index = i;\n            }\n \
    \       }\n        if (min_index != -1) {\n            result.add(min);\n    \
    \        result.add((long)min_index);\n        }\n        return result;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798399
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        long min = Long.MAX_VALUE;\n        int\
    \ index = -1;\n        for (int i = 0; i < arr.size(); i++) {\n            if\
    \ (arr.get(i) % 2 == 0 && arr.get(i) < min) {\n                min = arr.get(i);\n\
    \                index = i;\n            }\n        }\n        if (index == -1)\
    \ {\n            return result;\n        }\n        result.add(min);\n       \
    \ result.add((long)index);\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798399
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        long min = Long.MAX_VALUE;\n        int\
    \ index = -1;\n        for (int i = 0; i < arr.size(); i++) {\n            long\
    \ val = arr.get(i);\n            if (val % 2 == 0 && val < min) {\n          \
    \      min = val;\n                index = i;\n            }\n        }\n    \
    \    if (index != -1) {\n            result.add(min);\n            result.add((long)index);\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798402
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ ret = new ArrayList<Long>();\n        if (arr.size() == 0) {\n            return\
    \ ret;\n        }\n        long min = Long.MAX_VALUE;\n        int min_idx = -1;\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            long val = arr.get(i);\n\
    \            if (val % 2 == 0 && val < min) {\n                min = val;\n  \
    \              min_idx = i;\n            }\n        }\n        if (min_idx ==\
    \ -1) {\n            return ret;\n        }\n        ret.add(min);\n        ret.add((long)min_idx);\n\
    \        return ret;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798402
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ ret = new ArrayList<Long>();\n        if (arr.size() == 0) {\n            return\
    \ ret;\n        }\n        long min = Long.MAX_VALUE;\n        int index = -1;\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) %\
    \ 2 == 0 && arr.get(i) < min) {\n                min = arr.get(i);\n         \
    \       index = i;\n            }\n        }\n        if (index == -1) {\n   \
    \         return ret;\n        }\n        ret.add(min);\n        ret.add((long)index);\n\
    \        return ret;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798402
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        Long min = Long.MAX_VALUE;\n      \
    \  Long index = Long.MAX_VALUE;\n        for (int i = 0; i < arr.size(); i++)\
    \ {\n            Long value = arr.get(i);\n            if (value % 2 == 0 && value\
    \ < min) {\n                min = value;\n                index = (long)i;\n \
    \           }\n        }\n        if (min != Long.MAX_VALUE) {\n            result.add(min);\n\
    \            result.add(index);\n        }\n        return result;\n    }\n  \
    \  public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798402
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        long min = Long.MAX_VALUE;\n        int\
    \ minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n           \
    \ long val = arr.get(i);\n            if (val % 2 == 0 && val < min) {\n     \
    \           min = val;\n                minIndex = i;\n            }\n       \
    \ }\n        if (minIndex == -1) {\n            return result;\n        }\n  \
    \      result.add(min);\n        result.add((long)minIndex);\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798397
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        // Your\
    \ code here\n        return null;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.pluck(java.util.ArrayList)\"\
    \ is null\n\tat Problem.main(tmpusvg3l4d.java:39)\n"
  stdout: ''
  timestamp: 1659798397
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        // Your\
    \ code here\n        return null;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.pluck(java.util.ArrayList)\"\
    \ is null\n\tat Problem.main(tmpusvg3l4d.java:39)\n"
  stdout: ''
  timestamp: 1659798397
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        return\
    \ new ArrayList<Long>();\n    }\n    public static void main(String[] args) {\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdx4x_dnd.java:38)\n"
  stdout: ''
  timestamp: 1659798399
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        return\
    \ new ArrayList<Long>();\n    }\n    public static void main(String[] args) {\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdx4x_dnd.java:38)\n"
  stdout: ''
  timestamp: 1659798399
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        long min = Long.MAX_VALUE;\n        int\
    \ minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n           \
    \ long val = arr.get(i);\n            if (val % 2 == 0 && val < min) {\n     \
    \           min = val;\n                minIndex = i;\n            }\n       \
    \ }\n        if (minIndex == -1) {\n            return result;\n        }\n  \
    \      result.add(min);\n        result.add((long)minIndex);\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798397
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        long min = Long.MAX_VALUE;\n        int\
    \ min_index = -1;\n        for (int i = 0; i < arr.size(); i++) {\n          \
    \  long val = arr.get(i);\n            if (val % 2 == 0 && val < min) {\n    \
    \            min = val;\n                min_index = i;\n            }\n     \
    \   }\n        if (min_index == -1) {\n            return result;\n        }\n\
    \        result.add(min);\n        result.add((long)min_index);\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798397
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        long min = Long.MAX_VALUE;\n        int\
    \ minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n           \
    \ long val = arr.get(i);\n            if (val % 2 == 0 && val < min) {\n     \
    \           min = val;\n                minIndex = i;\n            }\n       \
    \ }\n        if (minIndex != -1) {\n            result.add(min);\n           \
    \ result.add((long)minIndex);\n        }\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798397
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        long min = Long.MAX_VALUE;\n        int\
    \ min_index = -1;\n        for (int i = 0; i < arr.size(); i++) {\n          \
    \  long value = arr.get(i);\n            if (value % 2 == 0 && value < min) {\n\
    \                min = value;\n                min_index = i;\n            }\n\
    \        }\n        if (min_index == -1) {\n            return result;\n     \
    \   }\n        result.add(min);\n        result.add((long)min_index);\n      \
    \  return result;\n    }\n    public static void main(String[] args) {\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798401
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        long min = Long.MAX_VALUE;\n        int\
    \ minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n           \
    \ long val = arr.get(i);\n            if (val % 2 == 0 && val < min) {\n     \
    \           min = val;\n                minIndex = i;\n            }\n       \
    \ }\n        if (minIndex == -1) {\n            return result;\n        }\n  \
    \      result.add(min);\n        result.add((long)minIndex);\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798397
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        // Your\
    \ code here\n        return null;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.pluck(java.util.ArrayList)\"\
    \ is null\n\tat Problem.main(tmpusvg3l4d.java:39)\n"
  stdout: ''
  timestamp: 1659798397
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long min = Long.MAX_VALUE;\n      \
    \  int index = -1;\n        for (int i = 0; i < arr.size(); i++) {\n         \
    \   long value = arr.get(i);\n            if (value % 2 == 0 && value < min) {\n\
    \                min = value;\n                index = i;\n            }\n   \
    \     }\n        if (index != -1) {\n            result.add(min);\n          \
    \  result.add((long)index);\n        }\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798399
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long min = Long.MAX_VALUE;\n      \
    \  int min_index = -1;\n        for (int i = 0; i < arr.size(); i++) {\n     \
    \       long val = arr.get(i);\n            if (val % 2 == 0 && val < min) {\n\
    \                min = val;\n                min_index = i;\n            }\n \
    \       }\n        if (min_index != -1) {\n            result.add(min);\n    \
    \        result.add((long)min_index);\n        }\n        return result;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798399
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        Long min = Long.MAX_VALUE;\n      \
    \  int index = -1;\n        for (int i = 0; i < arr.size(); i++) {\n         \
    \   Long value = arr.get(i);\n            if (value % 2 == 0 && value < min) {\n\
    \                min = value;\n                index = i;\n            }\n   \
    \     }\n        if (index >= 0) {\n            result.add(min);\n           \
    \ result.add((long)index);\n        }\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798402
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        long min = Long.MAX_VALUE;\n        int\
    \ minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n           \
    \ long val = arr.get(i);\n            if (val % 2 == 0 && val < min) {\n     \
    \           min = val;\n                minIndex = i;\n            }\n       \
    \ }\n        if (minIndex == -1) {\n            return result;\n        }\n  \
    \      result.add(min);\n        result.add((long)minIndex);\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798397
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        long minEven = Long.MAX_VALUE;\n       \
    \ int minEvenIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n   \
    \         if (arr.get(i) % 2 == 0 && arr.get(i) < minEven) {\n               \
    \ minEven = arr.get(i);\n                minEvenIndex = i;\n            }\n  \
    \      }\n        if (minEvenIndex == -1) {\n            return result;\n    \
    \    }\n        result.add(minEven);\n        result.add((long)minEvenIndex);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798402
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        long min = Long.MAX_VALUE;\n        int\
    \ minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n           \
    \ long val = arr.get(i);\n            if (val % 2 == 0 && val < min) {\n     \
    \           min = val;\n                minIndex = i;\n            }\n       \
    \ }\n        if (minIndex == -1) {\n            return result;\n        }\n  \
    \      result.add(min);\n        result.add((long)minIndex);\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798397
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        long min = Long.MAX_VALUE;\n        int\
    \ minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n           \
    \ long val = arr.get(i);\n            if (val % 2 == 0 && val < min) {\n     \
    \           min = val;\n                minIndex = i;\n            }\n       \
    \ }\n        if (minIndex != -1) {\n            result.add(min);\n           \
    \ result.add((long)minIndex);\n        }\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798397
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        // Your\
    \ code goes here.\n        return null;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.pluck(java.util.ArrayList)\"\
    \ is null\n\tat Problem.main(tmpa_85g3qn.java:39)\n"
  stdout: ''
  timestamp: 1659798402
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long min = Long.MAX_VALUE;\n      \
    \  int minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n      \
    \      long value = arr.get(i);\n            if (value % 2 == 0 && value < min)\
    \ {\n                min = value;\n                minIndex = i;\n           \
    \ }\n        }\n        if (minIndex >= 0) {\n            result.add(min);\n \
    \           result.add((long)minIndex);\n        }\n        return result;\n \
    \   }\n    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798402
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long min = Long.MAX_VALUE;\n      \
    \  int index = -1;\n        for (int i = 0; i < arr.size(); i++) {\n         \
    \   long value = arr.get(i);\n            if (value % 2 == 0 && value < min) {\n\
    \                min = value;\n                index = i;\n            }\n   \
    \     }\n        if (index != -1) {\n            result.add(min);\n          \
    \  result.add((long)index);\n        }\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798399
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        long min = Long.MAX_VALUE;\n        int\
    \ index = -1;\n        for (int i = 0; i < arr.size(); i++) {\n            if\
    \ (arr.get(i) % 2 == 0 && arr.get(i) < min) {\n                min = arr.get(i);\n\
    \                index = i;\n            }\n        }\n        if (index == -1)\
    \ {\n            return result;\n        }\n        result.add(min);\n       \
    \ result.add((long)index);\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798399
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        long min = Long.MAX_VALUE;\n        int\
    \ min_index = -1;\n        for (int i = 0; i < arr.size(); i++) {\n          \
    \  long val = arr.get(i);\n            if (val % 2 == 0 && val < min) {\n    \
    \            min = val;\n                min_index = i;\n            }\n     \
    \   }\n        if (min_index == -1) {\n            return result;\n        }\n\
    \        result.add(min);\n        result.add((long)min_index);\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798397
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long min = Long.MAX_VALUE;\n      \
    \  int minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n      \
    \      long val = arr.get(i);\n            if (val % 2 == 0 && val < min) {\n\
    \                min = val;\n                minIndex = i;\n            }\n  \
    \      }\n        if (minIndex != -1) {\n            result.add(min);\n      \
    \      result.add((long)minIndex);\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798397
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        // Your\
    \ code here\n        return null;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.pluck(java.util.ArrayList)\"\
    \ is null\n\tat Problem.main(tmpusvg3l4d.java:39)\n"
  stdout: ''
  timestamp: 1659798397
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        int i = 0;\n        int min = Integer.MAX_VALUE;\n\
    \        int minIndex = -1;\n        for (Long l : arr) {\n            if (l %\
    \ 2 == 0 && l < min) {\n                min = l.intValue();\n                minIndex\
    \ = i;\n            }\n            i++;\n        }\n        if (minIndex != -1)\
    \ {\n            result.add((long)min);\n            result.add((long)minIndex);\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798402
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        Long min = Long.MAX_VALUE;\n        int\
    \ index = -1;\n        for (int i = 0; i < arr.size(); i++) {\n            Long\
    \ value = arr.get(i);\n            if (value % 2 == 0 && value < min) {\n    \
    \            min = value;\n                index = i;\n            }\n       \
    \ }\n        if (index == -1) {\n            return result;\n        }\n     \
    \   result.add(min);\n        result.add((long)index);\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798402
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        long min = Long.MAX_VALUE;\n        for\
    \ (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) % 2 == 0 && arr.get(i)\
    \ < min) {\n                min = arr.get(i);\n            }\n        }\n    \
    \    if (min == Long.MAX_VALUE) {\n            return result;\n        }\n   \
    \     result.add(min);\n        result.add((long)arr.indexOf(min));\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798402
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        long min = Long.MAX_VALUE;\n        int\
    \ minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n           \
    \ long value = arr.get(i);\n            if (value % 2 == 0 && value < min) {\n\
    \                min = value;\n                minIndex = i;\n            }\n\
    \        }\n        if (minIndex == -1) {\n            return result;\n      \
    \  }\n        result.add(min);\n        result.add((long)minIndex);\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798397
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long min = Long.MAX_VALUE;\n      \
    \  int index = -1;\n        for (int i = 0; i < arr.size(); i++) {\n         \
    \   long val = arr.get(i);\n            if (val % 2 == 0 && val < min) {\n   \
    \             min = val;\n                index = i;\n            }\n        }\n\
    \        if (index != -1) {\n            result.add(min);\n            result.add((long)index);\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798397
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long min = Long.MAX_VALUE;\n      \
    \  int index = -1;\n        for (int i = 0; i < arr.size(); i++) {\n         \
    \   long val = arr.get(i);\n            if (val % 2 == 0 && val < min) {\n   \
    \             min = val;\n                index = i;\n            }\n        }\n\
    \        if (index != -1) {\n            result.add(min);\n            result.add((long)index);\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798397
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long min = Long.MAX_VALUE;\n      \
    \  int minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n      \
    \      if (arr.get(i) % 2 == 0 && arr.get(i) < min) {\n                min = arr.get(i);\n\
    \                minIndex = i;\n            }\n        }\n        if (minIndex\
    \ != -1) {\n            result.add(min);\n            result.add((long)minIndex);\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798399
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        long min = Long.MAX_VALUE;\n        int\
    \ minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n           \
    \ long value = arr.get(i);\n            if (value % 2 == 0 && value < min) {\n\
    \                min = value;\n                minIndex = i;\n            }\n\
    \        }\n        if (minIndex == -1) {\n            return result;\n      \
    \  }\n        result.add(min);\n        result.add((long)minIndex);\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798397
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        long min = Long.MAX_VALUE;\n        int\
    \ minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n           \
    \ long value = arr.get(i);\n            if (value % 2 == 0 && value < min) {\n\
    \                min = value;\n                minIndex = i;\n            }\n\
    \        }\n        if (minIndex == -1) {\n            return result;\n      \
    \  }\n        result.add(min);\n        result.add((long)minIndex);\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798397
