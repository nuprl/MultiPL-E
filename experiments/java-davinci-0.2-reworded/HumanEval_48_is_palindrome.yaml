name: HumanEval_48_is_palindrome
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // Checks if given string is a palindrome\n    // >>> isPalindrome((\"\
  \"))\n    // (true)\n    // >>> isPalindrome((\"aba\"))\n    // (true)\n    // >>>\
  \ isPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> isPalindrome((\"zbcd\"))\n\
  \    // (false)\n    public static boolean isPalindrome(String text) {\n"
tests: "    }\n    public static void main(String[] args) {\n    assert(isPalindrome((\"\
  \")) == (true));\n    assert(isPalindrome((\"aba\")) == (true));\n    assert(isPalindrome((\"\
  aaaaa\")) == (true));\n    assert(isPalindrome((\"zbcd\")) == (false));\n    assert(isPalindrome((\"\
  xywyx\")) == (true));\n    assert(isPalindrome((\"xywyz\")) == (false));\n    assert(isPalindrome((\"\
  xywzx\")) == (false));\n    }\n\n}\n"
completions: ['        return false;', '        return text.equals(new StringBuilder(text).reverse().toString());',
  '        return text.equals(new StringBuilder(text).reverse().toString());', " \
    \       int n = text.length();\n        for (int i = 0; i < n / 2; i++) {\n  \
    \          if (text.charAt(i) != text.charAt(n - i - 1)) {\n                return\
    \ false;\n            }\n        }\n        return true;", '        return text.equals(new
    StringBuilder(text).reverse().toString());', '        return text.equals(new StringBuilder(text).reverse().toString());',
  '        return text.equals(new StringBuilder(text).reverse().toString());', " \
    \       int len = text.length();\n        for (int i = 0; i < len / 2; i++) {\n\
    \            if (text.charAt(i) != text.charAt(len - i - 1)) {\n             \
    \   return false;\n            }\n        }\n        return true;", '        return
    text.equals(new StringBuilder(text).reverse().toString());', "        // TODO:\
    \ Implement this method\n        return false;", '        return text.equals(new
    StringBuilder(text).reverse().toString());', '        return text.equals(new StringBuilder(text).reverse().toString());',
  '        return text.equals(new StringBuilder(text).reverse().toString());', '        return
    text.equals(new StringBuilder(text).reverse().toString());', "        if (text.length()\
    \ == 0) {\n            return true;\n        }\n        if (text.length() == 1)\
    \ {\n            return true;\n        }\n        if (text.charAt(0) == text.charAt(text.length()\
    \ - 1)) {\n            return isPalindrome(text.substring(1, text.length() - 1));\n\
    \        }\n        return false;", '        return text.equals(new StringBuilder(text).reverse().toString());',
  "        int n = text.length();\n        for (int i = 0; i < n / 2; i++) {\n   \
    \         if (text.charAt(i) != text.charAt(n - i - 1)) {\n                return\
    \ false;\n            }\n        }\n        return true;", '        return text.equals(new
    StringBuilder(text).reverse().toString());', '        return text.equals(new StringBuilder(text).reverse().toString());',
  '        return text.equals(new StringBuilder(text).reverse().toString());']
stop_tokens:
- "\n    }\n"
