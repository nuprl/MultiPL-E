language: java
name: HumanEval_135_can_arrange
results:
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long max = -1;\n        long max_index = -1;\n        for (int\
    \ i = arr.size() - 1; i >= 0; i--) {\n            if (arr.get(i) >= max) {\n \
    \               max = arr.get(i);\n                max_index = i;\n          \
    \  }\n        }\n        return max_index;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptfjse44x.java:30)\n"
  stdout: ''
  timestamp: 1659792529
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long ret = -1;\n        for (int i = arr.size() - 1; i > 0;\
    \ i--) {\n            if (arr.get(i) <= arr.get(i - 1)) {\n                ret\
    \ = i;\n            }\n        }\n        return ret;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7gl1wjlq.java:31)\n"
  stdout: ''
  timestamp: 1659792529
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long ans = -1;\n        for (int i = arr.size() - 1; i > 0;\
    \ i--) {\n            if (arr.get(i) <= arr.get(i - 1)) {\n                ans\
    \ = i;\n            }\n        }\n        return ans;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7i657do8.java:31)\n"
  stdout: ''
  timestamp: 1659792529
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        // Your code here\n        return -1l;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphe6l6zwb.java:23)\n"
  stdout: ''
  timestamp: 1659792529
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long ans = -1;\n        for (int i = arr.size() - 1; i > 0;\
    \ i--) {\n            if (arr.get(i) <= arr.get(i - 1)) {\n                ans\
    \ = i;\n            }\n        }\n        return ans;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7i657do8.java:31)\n"
  stdout: ''
  timestamp: 1659792529
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        // Your code here\n        return -1l;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphe6l6zwb.java:23)\n"
  stdout: ''
  timestamp: 1659792529
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long ret = -1l;\n        for (int i = arr.size() - 1; i > 0;\
    \ i--) {\n            if (arr.get(i) <= arr.get(i - 1)) {\n                ret\
    \ = i;\n            }\n        }\n        return ret;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpg3he3uda.java:31)\n"
  stdout: ''
  timestamp: 1659792529
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        // Write your code here\n        // To print results to the\
    \ standard output you can use System.out.println()\n        // Example: System.out.println(\"\
    Hello world!\");\n        long result = -1;\n        for (int i = arr.size() -\
    \ 1; i > 0; i--) {\n            if (arr.get(i) <= arr.get(i - 1)) {\n        \
    \        result = i;\n            }\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfho1e3e1.java:34)\n"
  stdout: ''
  timestamp: 1659792529
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        // Write your code here\n        // To print results to the\
    \ standard output you can use System.out.println()\n        // Example: System.out.println(\"\
    Hello world!\");\n        long max = -1;\n        long maxIndex = -1;\n      \
    \  for (int i = arr.size() - 1; i > 0; i--) {\n            if (arr.get(i) <= arr.get(i\
    \ - 1)) {\n                max = arr.get(i);\n                maxIndex = i;\n\
    \                break;\n            }\n        }\n        return maxIndex;\n\
    \    }\n    public static void main(String[] args) {\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l))))\
    \ == (3l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)5l)))) == (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792529
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        // Your code here\n        return -1;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpde3vbv1t.java:23)\n"
  stdout: ''
  timestamp: 1659792529
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long ret = -1;\n        for (int i = arr.size() - 1; i > 0;\
    \ i--) {\n            if (arr.get(i) <= arr.get(i - 1)) {\n                ret\
    \ = i;\n            }\n        }\n        return ret;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7gl1wjlq.java:31)\n"
  stdout: ''
  timestamp: 1659792529
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long result = -1;\n        for (int i = arr.size() - 1; i >\
    \ 0; i--) {\n            if (arr.get(i) <= arr.get(i - 1)) {\n               \
    \ result = i;\n            }\n        }\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgvs6opyh.java:31)\n"
  stdout: ''
  timestamp: 1659792529
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long ret = -1;\n        long prev = arr.get(0);\n        for\
    \ (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) <= prev) {\n\
    \                ret = i;\n            }\n            prev = arr.get(i);\n   \
    \     }\n        return ret;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)5l)))) == (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.canArrange(tmpnv3pa_vz.java:20)\n\tat Problem.main(tmpnv3pa_vz.java:34)\n"
  stdout: ''
  timestamp: 1659792529
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long n = arr.size();\n        long max = -1;\n        for (long\
    \ i = n - 1; i >= 0; i--) {\n            if (arr.get((int)i) >= max) {\n     \
    \           max = arr.get((int)i);\n            } else {\n                return\
    \ i;\n            }\n        }\n        return -1;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkbhk7th7.java:32)\n"
  stdout: ''
  timestamp: 1659792529
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long max = -1l;\n        for (int i = arr.size() - 1; i > 0;\
    \ i--) {\n            if (arr.get(i) <= arr.get(i - 1)) {\n                max\
    \ = i;\n            }\n        }\n        return max;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpaphkdioj.java:31)\n"
  stdout: ''
  timestamp: 1659792529
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long ret = -1;\n        for (int i = arr.size() - 1; i > 0;\
    \ i--) {\n            if (arr.get(i) <= arr.get(i - 1)) {\n                ret\
    \ = i;\n            }\n        }\n        return ret;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7gl1wjlq.java:31)\n"
  stdout: ''
  timestamp: 1659792529
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long result = -1;\n        for (int i = arr.size() - 1; i >\
    \ 0; i--) {\n            if (arr.get(i) <= arr.get(i - 1)) {\n               \
    \ result = i;\n            }\n        }\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgvs6opyh.java:31)\n"
  stdout: ''
  timestamp: 1659792529
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        // Your code goes here\n        return -1l;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpm8rnntuw.java:23)\n"
  stdout: ''
  timestamp: 1659792529
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long max = -1;\n        for (int i = arr.size() - 1; i > 0;\
    \ i--) {\n            if (arr.get(i) <= arr.get(i - 1)) {\n                max\
    \ = i;\n            }\n        }\n        return max;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkjtzpzrn.java:31)\n"
  stdout: ''
  timestamp: 1659792529
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long result = -1l;\n        for (int i = arr.size() - 1; i >\
    \ 0; i--) {\n            if (arr.get(i) <= arr.get(i - 1)) {\n               \
    \ result = i;\n            }\n        }\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnytu3pwq.java:31)\n"
  stdout: ''
  timestamp: 1659792529
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        // Your code here\n        return -1;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpde3vbv1t.java:23)\n"
  stdout: ''
  timestamp: 1659792529
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long index = -1;\n        for (int i = 0; i < arr.size() - 1;\
    \ i++) {\n            if (arr.get(i) >= arr.get(i + 1)) {\n                index\
    \ = i;\n            }\n        }\n        return index;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2sxttgig.java:28)\n"
  stdout: ''
  timestamp: 1659792529
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long ret = -1l;\n        for (int i = arr.size() - 1; i > 0;\
    \ i--) {\n            if (arr.get(i) >= arr.get(i - 1)) {\n                ret\
    \ = i - 1;\n            }\n        }\n        return ret;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptqiinut0.java:28)\n"
  stdout: ''
  timestamp: 1659792529
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long result = -1;\n        for (int i = arr.size() - 1; i >\
    \ 0; i--) {\n            if (arr.get(i) <= arr.get(i - 1)) {\n               \
    \ result = i;\n            }\n        }\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgvs6opyh.java:31)\n"
  stdout: ''
  timestamp: 1659792529
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long result = -1;\n        for (int i = arr.size() - 1; i >\
    \ 0; i--) {\n            if (arr.get(i) <= arr.get(i - 1)) {\n               \
    \ result = i;\n            }\n        }\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgvs6opyh.java:31)\n"
  stdout: ''
  timestamp: 1659792529
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        // Your code goes here\n        long max = -1;\n        for\
    \ (int i = 0; i < arr.size() - 1; i++) {\n            if (arr.get(i) >= arr.get(i\
    \ + 1)) {\n                max = i;\n            }\n        }\n        return\
    \ max;\n    }\n    public static void main(String[] args) {\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l))))\
    \ == (3l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)5l)))) == (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpm6sgolo0.java:29)\n"
  stdout: ''
  timestamp: 1659792529
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long max = -1;\n        for (int i = arr.size() - 1; i > 0;\
    \ i--) {\n            if (arr.get(i) <= arr.get(i - 1)) {\n                max\
    \ = i;\n            }\n        }\n        return max;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkjtzpzrn.java:31)\n"
  stdout: ''
  timestamp: 1659792529
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        // Write your code here\n        // To print results to the\
    \ standard output you can use System.out.println()\n        // Example: System.out.println(\"\
    Hello world!\");\n        long max = -1;\n        long maxIndex = -1;\n      \
    \  for (int i = arr.size() - 1; i > 0; i--) {\n            if (arr.get(i) <= arr.get(i\
    \ - 1)) {\n                max = arr.get(i);\n                maxIndex = i;\n\
    \                break;\n            }\n        }\n        return maxIndex;\n\
    \    }\n    public static void main(String[] args) {\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l))))\
    \ == (3l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)5l)))) == (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792529
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        // Your code here\n        return 0l;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpd1_tu285.java:23)\n"
  stdout: ''
  timestamp: 1659792529
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long result = -1;\n        for (int i = arr.size() - 1; i >\
    \ 0; i--) {\n            if (arr.get(i) <= arr.get(i - 1)) {\n               \
    \ result = i;\n            }\n        }\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgvs6opyh.java:31)\n"
  stdout: ''
  timestamp: 1659792529
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long max = -1;\n        for (int i = arr.size() - 1; i > 0;\
    \ i--) {\n            if (arr.get(i) <= arr.get(i - 1)) {\n                max\
    \ = i;\n            }\n        }\n        return max;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkjtzpzrn.java:31)\n"
  stdout: ''
  timestamp: 1659792529
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long result = -1l;\n        for (int i = arr.size() - 1; i >\
    \ 0; i--) {\n            if (arr.get(i) <= arr.get(i - 1)) {\n               \
    \ result = i;\n            }\n        }\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnytu3pwq.java:31)\n"
  stdout: ''
  timestamp: 1659792529
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long max = -1;\n        for (int i = 0; i < arr.size() - 1;\
    \ i++) {\n            if (arr.get(i) >= arr.get(i + 1)) {\n                max\
    \ = Math.max(max, i);\n            }\n        }\n        return max;\n    }\n\
    \    public static void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpeoijdcia.java:28)\n"
  stdout: ''
  timestamp: 1659792529
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        if (arr.size() == 0) {\n            return -1;\n        }\n\
    \        long max = arr.get(0);\n        long maxIndex = 0;\n        for (int\
    \ i = 1; i < arr.size(); i++) {\n            if (arr.get(i) < max) {\n       \
    \         return maxIndex;\n            }\n            if (arr.get(i) > max) {\n\
    \                max = arr.get(i);\n                maxIndex = i;\n          \
    \  }\n        }\n        return -1;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9j1ex8qn.java:36)\n"
  stdout: ''
  timestamp: 1659792529
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        // Write your code here\n        // To print results to the\
    \ standard output you can use System.out.println()\n        // Example: System.out.println(\"\
    Hello world!\");\n        long ans = -1;\n        for (int i = arr.size() - 1;\
    \ i > 0; i--) {\n            if (arr.get(i) <= arr.get(i - 1)) {\n           \
    \     ans = i;\n            }\n        }\n        return ans;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp87wag3pi.java:34)\n"
  stdout: ''
  timestamp: 1659792529
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long result = -1;\n        for (int i = arr.size() - 1; i >\
    \ 0; i--) {\n            if (arr.get(i) <= arr.get(i - 1)) {\n               \
    \ result = i;\n            }\n        }\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgvs6opyh.java:31)\n"
  stdout: ''
  timestamp: 1659792529
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long result = -1l;\n        for (int i = arr.size() - 1; i >\
    \ 0; i--) {\n            if (arr.get(i) <= arr.get(i - 1)) {\n               \
    \ result = i;\n            }\n        }\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnytu3pwq.java:31)\n"
  stdout: ''
  timestamp: 1659792529
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        // Write your code here\n        // To print results to the\
    \ standard output you can use System.out.println()\n        // Example: System.out.println(\"\
    Hello world!\");\n        long max = -1;\n        for (int i = arr.size() - 1;\
    \ i > 0; i--) {\n            if (arr.get(i) <= arr.get(i - 1)) {\n           \
    \     max = i;\n            }\n        }\n        return max;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpecng3wab.java:34)\n"
  stdout: ''
  timestamp: 1659792529
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long res = -1l;\n        for (int i = arr.size() - 1; i > 0;\
    \ i--) {\n            if (arr.get(i) <= arr.get(i - 1)) {\n                res\
    \ = i;\n            }\n        }\n        return res;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmph_ckjdw1.java:31)\n"
  stdout: ''
  timestamp: 1659792530
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long max = -1;\n        for (int i = arr.size() - 1; i > 0;\
    \ i--) {\n            if (arr.get(i) <= arr.get(i - 1)) {\n                max\
    \ = i;\n            }\n        }\n        return max;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkjtzpzrn.java:31)\n"
  stdout: ''
  timestamp: 1659792529
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        // Write your code here\n        // To print results to the\
    \ standard output you can use System.out.println()\n        // Example: System.out.println(\"\
    Hello world!\");\n        long max = -1;\n        for (int i = 0; i < arr.size()\
    \ - 1; i++) {\n            if (arr.get(i) >= arr.get(i + 1)) {\n             \
    \   max = i;\n            }\n        }\n        return max;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcb1z2zie.java:31)\n"
  stdout: ''
  timestamp: 1659792530
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long max = -1;\n        for (int i = arr.size() - 1; i > 0;\
    \ i--) {\n            if (arr.get(i) <= arr.get(i - 1)) {\n                max\
    \ = i;\n            }\n        }\n        return max;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkjtzpzrn.java:31)\n"
  stdout: ''
  timestamp: 1659792529
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long ret = -1;\n        for (int i = arr.size() - 1; i > 0;\
    \ i--) {\n            if (arr.get(i) <= arr.get(i - 1)) {\n                ret\
    \ = i;\n            }\n        }\n        return ret;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7gl1wjlq.java:31)\n"
  stdout: ''
  timestamp: 1659792529
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long max = -1;\n        for (int i = 0; i < arr.size() - 1;\
    \ i++) {\n            if (arr.get(i) >= arr.get(i + 1)) {\n                max\
    \ = Math.max(max, i);\n            }\n        }\n        return max;\n    }\n\
    \    public static void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpeoijdcia.java:28)\n"
  stdout: ''
  timestamp: 1659792529
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long result = -1;\n        for (int i = 0; i < arr.size() -\
    \ 1; i++) {\n            if (arr.get(i) >= arr.get(i + 1)) {\n               \
    \ result = i;\n            }\n        }\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp49d0b1rh.java:28)\n"
  stdout: ''
  timestamp: 1659792530
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        // Write your code here\n        // To print results to the\
    \ standard output you can use System.out.println()\n        // Example: System.out.println(\"\
    Hello world!\");\n        long max = -1;\n        for (int i = 0; i < arr.size()\
    \ - 1; i++) {\n            if (arr.get(i) >= arr.get(i + 1)) {\n             \
    \   max = i;\n            }\n        }\n        return max;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcb1z2zie.java:31)\n"
  stdout: ''
  timestamp: 1659792530
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long max = -1;\n        for (int i = arr.size() - 1; i > 0;\
    \ i--) {\n            if (arr.get(i) <= arr.get(i - 1)) {\n                max\
    \ = i;\n            }\n        }\n        return max;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkjtzpzrn.java:31)\n"
  stdout: ''
  timestamp: 1659792529
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        // Your code here\n        return -1;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpde3vbv1t.java:23)\n"
  stdout: ''
  timestamp: 1659792529
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        // Write your code here\n        // To print results to the\
    \ standard output you can use System.out.println()\n        // Example: System.out.println(\"\
    Hello world!\");\n        long max = -1;\n        for (int i = arr.size() - 1;\
    \ i > 0; i--) {\n            if (arr.get(i) <= arr.get(i - 1)) {\n           \
    \     max = i;\n            }\n        }\n        return max;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpecng3wab.java:34)\n"
  stdout: ''
  timestamp: 1659792529
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        // Your code here\n        return -1;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpde3vbv1t.java:23)\n"
  stdout: ''
  timestamp: 1659792529
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long max = -1;\n        for (int i = 0; i < arr.size() - 1;\
    \ i++) {\n            if (arr.get(i + 1) <= arr.get(i)) {\n                max\
    \ = i;\n            }\n        }\n        return max;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmph8s7cg4q.java:28)\n"
  stdout: ''
  timestamp: 1659792530
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        // Write your code here\n        // To print results to the\
    \ standard output you can use System.out.println()\n        // Example: System.out.println(\"\
    Hello world!\");\n        long max = -1;\n        for (int i = arr.size() - 1;\
    \ i > 0; i--) {\n            if (arr.get(i) <= arr.get(i - 1)) {\n           \
    \     max = i;\n            }\n        }\n        return max;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpecng3wab.java:34)\n"
  stdout: ''
  timestamp: 1659792529
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long max = -1;\n        for (int i = arr.size() - 1; i > 0;\
    \ i--) {\n            if (arr.get(i) <= arr.get(i - 1)) {\n                max\
    \ = i;\n            }\n        }\n        return max;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkjtzpzrn.java:31)\n"
  stdout: ''
  timestamp: 1659792529
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        // Write your code here\n        // To print results to the\
    \ standard output you can use System.out.println()\n        // Example: System.out.println(\"\
    Hello world!\");\n        long max = -1;\n        long maxIndex = -1;\n      \
    \  for (int i = arr.size() - 1; i > 0; i--) {\n            if (arr.get(i) < arr.get(i\
    \ - 1)) {\n                if (max < arr.get(i)) {\n                    max =\
    \ arr.get(i);\n                    maxIndex = i;\n                }\n        \
    \    }\n        }\n        return maxIndex;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpanhavw1t.java:38)\n"
  stdout: ''
  timestamp: 1659792530
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long n = arr.size();\n        long i = n - 1;\n        while\
    \ (i > 0 && arr.get((int)i) >= arr.get((int)(i - 1))) {\n            i--;\n  \
    \      }\n        return i - 1;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)5l)))) == (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8lrwott8.java:27)\n"
  stdout: ''
  timestamp: 1659792530
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long result = -1;\n        for (int i = arr.size() - 1; i >\
    \ 0; i--) {\n            if (arr.get(i) >= arr.get(i - 1)) {\n               \
    \ result = i - 1;\n            }\n        }\n        return result;\n    }\n \
    \   public static void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfzkntzop.java:28)\n"
  stdout: ''
  timestamp: 1659792530
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        // Write your code here\n        // To print results to the\
    \ standard output you can use System.out.println()\n        // Example: System.out.println(\"\
    Hello world!\");\n        long max = -1;\n        for (int i = arr.size() - 1;\
    \ i > 0; i--) {\n            if (arr.get(i) <= arr.get(i - 1)) {\n           \
    \     max = i;\n            }\n        }\n        return max;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpecng3wab.java:34)\n"
  stdout: ''
  timestamp: 1659792529
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long max_index = -1;\n        for (int i = arr.size() - 1; i\
    \ > 0; i--) {\n            if (arr.get(i) <= arr.get(i - 1)) {\n             \
    \   max_index = i;\n            }\n        }\n        return max_index;\n    }\n\
    \    public static void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphgm6zkn7.java:31)\n"
  stdout: ''
  timestamp: 1659792530
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long result = -1;\n        for (int i = arr.size() - 1; i >\
    \ 0; i--) {\n            if (arr.get(i) <= arr.get(i - 1)) {\n               \
    \ result = i;\n            }\n        }\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgvs6opyh.java:31)\n"
  stdout: ''
  timestamp: 1659792529
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        // Write your code here\n        // To print results to the\
    \ standard output you can use System.out.println()\n        // Example: System.out.println(\"\
    Hello world!\");\n        long result = -1;\n        for (int i = arr.size() -\
    \ 1; i > 0; i--) {\n            if (arr.get(i) <= arr.get(i - 1)) {\n        \
    \        result = i;\n            }\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfho1e3e1.java:34)\n"
  stdout: ''
  timestamp: 1659792529
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        // Write your code here\n        // To print results to the\
    \ standard output you can use System.out.println()\n        // Example: System.out.println(\"\
    Hello world!\");\n        int i = arr.size() - 1;\n        while (i > 0) {\n \
    \           if (arr.get(i) >= arr.get(i - 1)) {\n                i--;\n      \
    \      } else {\n                break;\n            }\n        }\n        if\
    \ (i == 0) {\n            return -1;\n        } else {\n            return i;\n\
    \        }\n    }\n    public static void main(String[] args) {\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l))))\
    \ == (3l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)5l)))) == (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792530
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long ret = -1;\n        for (int i = arr.size() - 1; i > 0;\
    \ i--) {\n            if (arr.get(i) <= arr.get(i - 1)) {\n                ret\
    \ = i;\n            }\n        }\n        return ret;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7gl1wjlq.java:31)\n"
  stdout: ''
  timestamp: 1659792529
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        if (arr.size() == 0) {\n            return -1;\n        }\n\
    \        long max = arr.get(0);\n        long maxIndex = 0;\n        for (int\
    \ i = 1; i < arr.size(); i++) {\n            if (arr.get(i) > max) {\n       \
    \         max = arr.get(i);\n                maxIndex = i;\n            }\n  \
    \      }\n        for (int i = 0; i < maxIndex; i++) {\n            if (arr.get(i)\
    \ > arr.get(i + 1)) {\n                return -1;\n            }\n        }\n\
    \        return maxIndex;\n    }\n    public static void main(String[] args) {\n\
    \    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)5l)))) == (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7r09ftnm.java:38)\n"
  stdout: ''
  timestamp: 1659792530
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long res = -1;\n        for (int i = arr.size() - 1; i > 0;\
    \ i--) {\n            if (arr.get(i) <= arr.get(i - 1)) {\n                res\
    \ = i;\n            }\n        }\n        return res;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpioynjmkj.java:31)\n"
  stdout: ''
  timestamp: 1659792530
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long max = -1;\n        for (int i = arr.size() - 1; i > 0;\
    \ i--) {\n            if (arr.get(i) <= arr.get(i - 1)) {\n                max\
    \ = i;\n            }\n        }\n        return max;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkjtzpzrn.java:31)\n"
  stdout: ''
  timestamp: 1659792529
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long max = -1;\n        for (int i = arr.size() - 1; i > 0;\
    \ i--) {\n            if (arr.get(i) <= arr.get(i - 1)) {\n                max\
    \ = i;\n            }\n        }\n        return max;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkjtzpzrn.java:31)\n"
  stdout: ''
  timestamp: 1659792529
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        // Write your code here\n        // To print results to the\
    \ standard output you can use System.out.println()\n        // Example: System.out.println(\"\
    Hello world!\");\n        long result = -1;\n        for (int i = arr.size() -\
    \ 1; i > 0; i--) {\n            if (arr.get(i) <= arr.get(i - 1)) {\n        \
    \        result = i;\n            }\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfho1e3e1.java:34)\n"
  stdout: ''
  timestamp: 1659792529
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long result = -1l;\n        for (int i = arr.size() - 1; i >\
    \ 0; i--) {\n            if (arr.get(i) <= arr.get(i - 1)) {\n               \
    \ result = i;\n            }\n        }\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnytu3pwq.java:31)\n"
  stdout: ''
  timestamp: 1659792529
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long max = -1;\n        for (int i = arr.size() - 1; i > 0;\
    \ i--) {\n            if (arr.get(i) <= arr.get(i - 1)) {\n                max\
    \ = i;\n            }\n        }\n        return max;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkjtzpzrn.java:31)\n"
  stdout: ''
  timestamp: 1659792529
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long max = -1;\n        for (int i = arr.size() - 1; i > 0;\
    \ i--) {\n            if (arr.get(i) <= arr.get(i - 1)) {\n                max\
    \ = i;\n            }\n        }\n        return max;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkjtzpzrn.java:31)\n"
  stdout: ''
  timestamp: 1659792529
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long max = -1;\n        for (int i = arr.size() - 1; i > 0;\
    \ i--) {\n            if (arr.get(i) <= arr.get(i - 1)) {\n                max\
    \ = i;\n            }\n        }\n        return max;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkjtzpzrn.java:31)\n"
  stdout: ''
  timestamp: 1659792529
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long max = -1;\n        for (int i = arr.size() - 1; i > 0;\
    \ i--) {\n            if (arr.get(i) <= arr.get(i - 1)) {\n                max\
    \ = i;\n            }\n        }\n        return max;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkjtzpzrn.java:31)\n"
  stdout: ''
  timestamp: 1659792529
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long result = -1;\n        for (int i = arr.size() - 1; i >\
    \ 0; i--) {\n            if (arr.get(i) <= arr.get(i - 1)) {\n               \
    \ result = i;\n            }\n        }\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgvs6opyh.java:31)\n"
  stdout: ''
  timestamp: 1659792529
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        // Write your code here\n        // To print results to the\
    \ standard output you can use System.out.println()\n        // Example: System.out.println(\"\
    Hello world!\");\n        long max = -1;\n        for (int i = arr.size() - 1;\
    \ i > 0; i--) {\n            if (arr.get(i) <= arr.get(i - 1)) {\n           \
    \     max = i;\n            }\n        }\n        return max;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpecng3wab.java:34)\n"
  stdout: ''
  timestamp: 1659792529
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long maxIndex = -1;\n        for (int i = 0; i < arr.size()\
    \ - 1; i++) {\n            if (arr.get(i) >= arr.get(i + 1)) {\n             \
    \   maxIndex = i;\n            }\n        }\n        return maxIndex;\n    }\n\
    \    public static void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp508gwbnu.java:28)\n"
  stdout: ''
  timestamp: 1659792530
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long max = -1;\n        for (int i = arr.size() - 1; i > 0;\
    \ i--) {\n            if (arr.get(i) <= arr.get(i - 1)) {\n                max\
    \ = i;\n            }\n        }\n        return max;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkjtzpzrn.java:31)\n"
  stdout: ''
  timestamp: 1659792529
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long max = -1;\n        for (int i = 0; i < arr.size() - 1;\
    \ i++) {\n            if (arr.get(i) >= arr.get(i + 1)) {\n                max\
    \ = i;\n            }\n        }\n        return max;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpq8_2ohx2.java:28)\n"
  stdout: ''
  timestamp: 1659792530
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long result = -1;\n        for (int i = arr.size() - 1; i >\
    \ 0; i--) {\n            if (arr.get(i) <= arr.get(i - 1)) {\n               \
    \ result = i;\n            }\n        }\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgvs6opyh.java:31)\n"
  stdout: ''
  timestamp: 1659792529
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        // Your code goes here\n        return 0;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpod42lmcu.java:23)\n"
  stdout: ''
  timestamp: 1659792530
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long max = -1;\n        long maxIndex = -1;\n        for (int\
    \ i = arr.size() - 1; i >= 0; i--) {\n            if (arr.get(i) >= max) {\n \
    \               max = arr.get(i);\n                maxIndex = i;\n           \
    \ }\n        }\n        return maxIndex;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpowbximzh.java:30)\n"
  stdout: ''
  timestamp: 1659792530
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long result = -1;\n        for (int i = 1; i < arr.size(); i++)\
    \ {\n            if (arr.get(i) <= arr.get(i - 1)) {\n                result =\
    \ i - 1;\n                break;\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l))))\
    \ == (3l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)5l)))) == (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpeckw0b3l.java:29)\n"
  stdout: ''
  timestamp: 1659792530
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long ret = -1;\n        for (int i = arr.size() - 1; i > 0;\
    \ i--) {\n            if (arr.get(i) <= arr.get(i - 1)) {\n                ret\
    \ = i;\n            }\n        }\n        return ret;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7gl1wjlq.java:31)\n"
  stdout: ''
  timestamp: 1659792529
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long maxIndex = -1;\n        long maxValue = -1;\n        for\
    \ (int i = arr.size() - 1; i >= 0; i--) {\n            if (arr.get(i) >= maxValue)\
    \ {\n                maxValue = arr.get(i);\n                maxIndex = i;\n \
    \           }\n        }\n        return maxIndex;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvialkf7h.java:30)\n"
  stdout: ''
  timestamp: 1659792530
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long max = -1;\n        for (int i = arr.size() - 1; i > 0;\
    \ i--) {\n            if (arr.get(i) <= arr.get(i - 1)) {\n                max\
    \ = i;\n            }\n        }\n        return max;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkjtzpzrn.java:31)\n"
  stdout: ''
  timestamp: 1659792529
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long ret = -1;\n        for (int i = arr.size() - 1; i > 0;\
    \ i--) {\n            if (arr.get(i) <= arr.get(i - 1)) {\n                ret\
    \ = i;\n            }\n        }\n        return ret;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7gl1wjlq.java:31)\n"
  stdout: ''
  timestamp: 1659792529
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long res = -1l;\n        for (int i = 0; i < arr.size() - 1;\
    \ i++) {\n            if (arr.get(i) >= arr.get(i + 1)) {\n                res\
    \ = i;\n            }\n        }\n        return res;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzcskuxz8.java:28)\n"
  stdout: ''
  timestamp: 1659792530
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        // Write your code here\n        // To print results to the\
    \ standard output you can use System.out.println()\n        // Example: System.out.println(\"\
    Hello world!\");\n        long result = -1;\n        for (int i = arr.size() -\
    \ 1; i > 0; i--) {\n            if (arr.get(i) <= arr.get(i - 1)) {\n        \
    \        result = i;\n            }\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfho1e3e1.java:34)\n"
  stdout: ''
  timestamp: 1659792529
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long ans = -1;\n        for (int i = arr.size() - 1; i > 0;\
    \ i--) {\n            if (arr.get(i) <= arr.get(i - 1)) {\n                ans\
    \ = i;\n            }\n        }\n        return ans;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7i657do8.java:31)\n"
  stdout: ''
  timestamp: 1659792529
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        // Your code here\n        return 0l;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpd1_tu285.java:23)\n"
  stdout: ''
  timestamp: 1659792529
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long index = -1;\n        for (int i = arr.size() - 1; i > 0;\
    \ i--) {\n            if (arr.get(i) <= arr.get(i - 1)) {\n                index\
    \ = i;\n            }\n        }\n        return index;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfz4zkujw.java:31)\n"
  stdout: ''
  timestamp: 1659792530
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long ret = -1;\n        for (int i = arr.size() - 1; i > 0;\
    \ i--) {\n            if (arr.get(i) <= arr.get(i - 1)) {\n                ret\
    \ = i;\n            }\n        }\n        return ret;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7gl1wjlq.java:31)\n"
  stdout: ''
  timestamp: 1659792529
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long result = -1;\n        for (int i = arr.size() - 1; i >\
    \ 0; i--) {\n            if (arr.get(i) <= arr.get(i - 1)) {\n               \
    \ result = i;\n            }\n        }\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgvs6opyh.java:31)\n"
  stdout: ''
  timestamp: 1659792529
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long result = -1;\n        for (int i = arr.size() - 1; i >\
    \ 0; i--) {\n            if (arr.get(i) <= arr.get(i - 1)) {\n               \
    \ result = i;\n            }\n        }\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgvs6opyh.java:31)\n"
  stdout: ''
  timestamp: 1659792529
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long n = arr.size();\n        long max = -1;\n        for (long\
    \ i = 0; i < n; i++) {\n            if (i == 0) {\n                max = 0;\n\
    \            } else {\n                if (arr.get((int)i) <= arr.get((int)(i\
    \ - 1))) {\n                    max = i;\n                }\n            }\n \
    \       }\n        return max;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)5l)))) == (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp15hneaou.java:34)\n"
  stdout: ''
  timestamp: 1659792530
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long max = -1;\n        for (int i = arr.size() - 1; i > 0;\
    \ i--) {\n            if (arr.get(i) <= arr.get(i - 1)) {\n                max\
    \ = i;\n            }\n        }\n        return max;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkjtzpzrn.java:31)\n"
  stdout: ''
  timestamp: 1659792529
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        // Your code here\n        return -1l;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphe6l6zwb.java:23)\n"
  stdout: ''
  timestamp: 1659792529
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long ans = -1;\n        for (int i = arr.size() - 1; i > 0;\
    \ i--) {\n            if (arr.get(i) <= arr.get(i - 1)) {\n                ans\
    \ = i;\n            }\n        }\n        return ans;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7i657do8.java:31)\n"
  stdout: ''
  timestamp: 1659792529
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long res = -1;\n        for (int i = arr.size() - 1; i > 0;\
    \ i--) {\n            if (arr.get(i) <= arr.get(i - 1)) {\n                res\
    \ = i;\n            }\n        }\n        return res;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpioynjmkj.java:31)\n"
  stdout: ''
  timestamp: 1659792530
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long ret = -1;\n        for (int i = arr.size() - 1; i > 0;\
    \ i--) {\n            if (arr.get(i) <= arr.get(i - 1)) {\n                ret\
    \ = i;\n            }\n        }\n        return ret;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7gl1wjlq.java:31)\n"
  stdout: ''
  timestamp: 1659792529
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        // Write your code here\n        // To print results to the\
    \ standard output you can use System.out.println()\n        // Example: System.out.println(\"\
    Hello world!\");\n        long index = -1;\n        for (int i = 0; i < arr.size()\
    \ - 1; i++) {\n            if (arr.get(i) >= arr.get(i + 1)) {\n             \
    \   index = i;\n            }\n        }\n        return index;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkvumk4ab.java:31)\n"
  stdout: ''
  timestamp: 1659792530
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long max = -1;\n        for (int i = arr.size() - 1; i > 0;\
    \ i--) {\n            if (arr.get(i) <= arr.get(i - 1)) {\n                max\
    \ = i;\n            }\n        }\n        return max;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkjtzpzrn.java:31)\n"
  stdout: ''
  timestamp: 1659792529
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long result = -1;\n        for (int i = arr.size() - 1; i >\
    \ 0; i--) {\n            if (arr.get(i) <= arr.get(i - 1)) {\n               \
    \ result = i;\n            }\n        }\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgvs6opyh.java:31)\n"
  stdout: ''
  timestamp: 1659792529
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long max = -1;\n        for (int i = arr.size() - 1; i > 0;\
    \ i--) {\n            if (arr.get(i) <= arr.get(i - 1)) {\n                max\
    \ = i;\n            }\n        }\n        return max;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkjtzpzrn.java:31)\n"
  stdout: ''
  timestamp: 1659792529
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long ret = -1;\n        for (int i = arr.size() - 1; i > 0;\
    \ i--) {\n            if (arr.get(i) >= arr.get(i - 1)) {\n                ret\
    \ = i - 1;\n                break;\n            }\n        }\n        return ret;\n\
    \    }\n    public static void main(String[] args) {\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l))))\
    \ == (3l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)5l)))) == (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnx1fg_a5.java:30)\n"
  stdout: ''
  timestamp: 1659792530
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long max = -1;\n        for (int i = arr.size() - 1; i > 0;\
    \ i--) {\n            if (arr.get(i) < arr.get(i - 1)) {\n                max\
    \ = i;\n            }\n        }\n        return max;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzsd5zuxv.java:31)\n"
  stdout: ''
  timestamp: 1659792530
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long ret = -1;\n        for (int i = arr.size() - 1; i > 0;\
    \ i--) {\n            if (arr.get(i) <= arr.get(i - 1)) {\n                ret\
    \ = i;\n            }\n        }\n        return ret;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7gl1wjlq.java:31)\n"
  stdout: ''
  timestamp: 1659792529
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long max = -1;\n        for (int i = arr.size() - 1; i > 0;\
    \ i--) {\n            if (arr.get(i) <= arr.get(i - 1)) {\n                max\
    \ = i;\n            }\n        }\n        return max;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkjtzpzrn.java:31)\n"
  stdout: ''
  timestamp: 1659792529
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long max = -1;\n        for (int i = arr.size() - 1; i > 0;\
    \ i--) {\n            if (arr.get(i) <= arr.get(i - 1)) {\n                max\
    \ = i;\n            }\n        }\n        return max;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkjtzpzrn.java:31)\n"
  stdout: ''
  timestamp: 1659792529
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long max = -1;\n        for (int i = 0; i < arr.size() - 1;\
    \ i++) {\n            if (arr.get(i) >= arr.get(i + 1)) {\n                max\
    \ = Math.max(max, i);\n            }\n        }\n        return max;\n    }\n\
    \    public static void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpeoijdcia.java:28)\n"
  stdout: ''
  timestamp: 1659792529
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        // Write your code here\n        // To print results to the\
    \ standard output you can use System.out.println()\n        // Example: System.out.println(\"\
    Hello world!\");\n        long max = -1;\n        for (int i = 0; i < arr.size()\
    \ - 1; i++) {\n            if (arr.get(i) >= arr.get(i + 1)) {\n             \
    \   max = i;\n            }\n        }\n        return max;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcb1z2zie.java:31)\n"
  stdout: ''
  timestamp: 1659792530
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long max = -1;\n        for (int i = arr.size() - 1; i > 0;\
    \ i--) {\n            if (arr.get(i) <= arr.get(i - 1)) {\n                max\
    \ = i;\n            }\n        }\n        return max;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkjtzpzrn.java:31)\n"
  stdout: ''
  timestamp: 1659792529
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long result = -1;\n        for (int i = 1; i < arr.size(); i++)\
    \ {\n            if (arr.get(i) <= arr.get(i - 1)) {\n                result =\
    \ i - 1;\n                break;\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l))))\
    \ == (3l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)5l)))) == (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpeckw0b3l.java:29)\n"
  stdout: ''
  timestamp: 1659792530
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long ret = -1l;\n        for (int i = arr.size() - 1; i > 0;\
    \ i--) {\n            if (arr.get(i) <= arr.get(i - 1)) {\n                ret\
    \ = i;\n            }\n        }\n        return ret;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpg3he3uda.java:31)\n"
  stdout: ''
  timestamp: 1659792529
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long index = -1;\n        for (int i = arr.size() - 1; i > 0;\
    \ i--) {\n            if (arr.get(i) <= arr.get(i - 1)) {\n                index\
    \ = i;\n            }\n        }\n        return index;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfz4zkujw.java:31)\n"
  stdout: ''
  timestamp: 1659792530
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long result = -1;\n        for (int i = arr.size() - 1; i >\
    \ 0; i--) {\n            if (arr.get(i) <= arr.get(i - 1)) {\n               \
    \ result = i;\n            }\n        }\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgvs6opyh.java:31)\n"
  stdout: ''
  timestamp: 1659792529
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long max = -1;\n        for (int i = arr.size() - 1; i > 0;\
    \ i--) {\n            if (arr.get(i) <= arr.get(i - 1)) {\n                max\
    \ = i;\n            }\n        }\n        return max;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkjtzpzrn.java:31)\n"
  stdout: ''
  timestamp: 1659792529
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long ret = -1;\n        for (int i = arr.size() - 1; i > 0;\
    \ i--) {\n            if (arr.get(i) <= arr.get(i - 1)) {\n                ret\
    \ = i;\n            }\n        }\n        return ret;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7gl1wjlq.java:31)\n"
  stdout: ''
  timestamp: 1659792529
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long max = -1;\n        for (int i = arr.size() - 1; i > 0;\
    \ i--) {\n            if (arr.get(i) <= arr.get(i - 1)) {\n                max\
    \ = i;\n            }\n        }\n        return max;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkjtzpzrn.java:31)\n"
  stdout: ''
  timestamp: 1659792529
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long index = -1;\n        for (int i = 0; i < arr.size() - 1;\
    \ i++) {\n            if (arr.get(i) >= arr.get(i + 1)) {\n                index\
    \ = i;\n            }\n        }\n        return index;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2sxttgig.java:28)\n"
  stdout: ''
  timestamp: 1659792529
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        for (int i = arr.size() - 1; i > 0; i--) {\n            if (arr.get(i)\
    \ < arr.get(i - 1)) {\n                return i - 1;\n            }\n        }\n\
    \        return -1;\n    }\n    public static void main(String[] args) {\n   \
    \ assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)5l)))) == (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6ym90cyb.java:27)\n"
  stdout: ''
  timestamp: 1659792531
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        for (int i = arr.size() - 1; i > 0; i--) {\n            if (arr.get(i)\
    \ < arr.get(i - 1)) {\n                return i - 1;\n            }\n        }\n\
    \        return -1;\n    }\n    public static void main(String[] args) {\n   \
    \ assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)5l)))) == (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6ym90cyb.java:27)\n"
  stdout: ''
  timestamp: 1659792531
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long index = -1;\n        for (int i = arr.size() - 1; i > 0;\
    \ i--) {\n            if (arr.get(i) <= arr.get(i - 1)) {\n                index\
    \ = i;\n            }\n        }\n        return index;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfz4zkujw.java:31)\n"
  stdout: ''
  timestamp: 1659792530
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        // Write your code here\n        // To print results to the\
    \ standard output you can use System.out.println()\n        // Example: System.out.println(\"\
    Hello world!\");\n        long max = -1;\n        for (int i = arr.size() - 1;\
    \ i > 0; i--) {\n            if (arr.get(i) <= arr.get(i - 1)) {\n           \
    \     max = i;\n            }\n        }\n        return max;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpecng3wab.java:34)\n"
  stdout: ''
  timestamp: 1659792529
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        // Your code here\n        return -1l;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphe6l6zwb.java:23)\n"
  stdout: ''
  timestamp: 1659792529
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long ret = -1;\n        for (int i = arr.size() - 1; i > 0;\
    \ i--) {\n            if (arr.get(i) <= arr.get(i - 1)) {\n                ret\
    \ = i;\n            }\n        }\n        return ret;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7gl1wjlq.java:31)\n"
  stdout: ''
  timestamp: 1659792529
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long res = -1;\n        for (int i = arr.size() - 1; i > 0;\
    \ i--) {\n            if (arr.get(i) <= arr.get(i - 1)) {\n                res\
    \ = i;\n            }\n        }\n        return res;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpioynjmkj.java:31)\n"
  stdout: ''
  timestamp: 1659792530
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        // Your code here\n        long result = -1;\n        for (int\
    \ i = arr.size() - 1; i > 0; i--) {\n            if (arr.get(i) < arr.get(i -\
    \ 1)) {\n                result = i - 1;\n                break;\n           \
    \ }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyocs5er7.java:30)\n"
  stdout: ''
  timestamp: 1659792531
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long max = -1;\n        for (int i = arr.size() - 1; i > 0;\
    \ i--) {\n            if (arr.get(i) < arr.get(i - 1)) {\n                max\
    \ = i;\n            }\n        }\n        return max;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzsd5zuxv.java:31)\n"
  stdout: ''
  timestamp: 1659792530
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long result = -1;\n        for (int i = arr.size() - 1; i >\
    \ 0; i--) {\n            if (arr.get(i) <= arr.get(i - 1)) {\n               \
    \ result = i;\n            }\n        }\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgvs6opyh.java:31)\n"
  stdout: ''
  timestamp: 1659792529
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        // Write your code here\n        // To print results to the\
    \ standard output you can use System.out.println()\n        // Example: System.out.println(\"\
    Hello world!\");\n        long max = -1;\n        for (int i = arr.size() - 1;\
    \ i > 0; i--) {\n            if (arr.get(i) <= arr.get(i - 1)) {\n           \
    \     max = i;\n            }\n        }\n        return max;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpecng3wab.java:34)\n"
  stdout: ''
  timestamp: 1659792529
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        // Your code here\n    }\n    public static void main(String[]\
    \ args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpumq14mry.java:20: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659792531
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long ans = -1;\n        for (int i = arr.size() - 1; i > 0;\
    \ i--) {\n            if (arr.get(i) <= arr.get(i - 1)) {\n                ans\
    \ = i;\n            }\n        }\n        return ans;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7i657do8.java:31)\n"
  stdout: ''
  timestamp: 1659792529
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long index = -1;\n        for (int i = arr.size() - 1; i > 0;\
    \ i--) {\n            if (arr.get(i) <= arr.get(i - 1)) {\n                index\
    \ = i;\n            }\n        }\n        return index;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfz4zkujw.java:31)\n"
  stdout: ''
  timestamp: 1659792530
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long max = -1;\n        for (int i = arr.size() - 1; i > 0;\
    \ i--) {\n            if (arr.get(i) <= arr.get(i - 1)) {\n                max\
    \ = i;\n            }\n        }\n        return max;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkjtzpzrn.java:31)\n"
  stdout: ''
  timestamp: 1659792529
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long max = -1;\n        for (int i = 0; i < arr.size() - 1;\
    \ i++) {\n            if (arr.get(i) >= arr.get(i + 1)) {\n                max\
    \ = i;\n            }\n        }\n        return max;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpq8_2ohx2.java:28)\n"
  stdout: ''
  timestamp: 1659792530
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long ret = -1;\n        for (int i = arr.size() - 1; i > 0;\
    \ i--) {\n            if (arr.get(i) < arr.get(i - 1)) {\n                ret\
    \ = i - 1;\n                break;\n            }\n        }\n        return ret;\n\
    \    }\n    public static void main(String[] args) {\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l))))\
    \ == (3l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)5l)))) == (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjz0ucs8a.java:29)\n"
  stdout: ''
  timestamp: 1659792531
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long ret = -1;\n        for (int i = arr.size() - 1; i > 0;\
    \ i--) {\n            if (arr.get(i) <= arr.get(i - 1)) {\n                ret\
    \ = i;\n            }\n        }\n        return ret;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7gl1wjlq.java:31)\n"
  stdout: ''
  timestamp: 1659792529
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        // Write your code here\n        // To print results to the\
    \ standard output you can use System.out.println()\n        // Example: System.out.println(\"\
    Hello world!\");\n        long result = -1;\n        for (int i = arr.size() -\
    \ 1; i > 0; i--) {\n            if (arr.get(i) <= arr.get(i - 1)) {\n        \
    \        result = i;\n            }\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfho1e3e1.java:34)\n"
  stdout: ''
  timestamp: 1659792529
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        // Your code here\n        return 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpp7s7i9a6.java:23)\n"
  stdout: ''
  timestamp: 1659792531
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long result = -1;\n        for (int i = arr.size() - 1; i >\
    \ 0; i--) {\n            if (arr.get(i) <= arr.get(i - 1)) {\n               \
    \ result = i;\n            }\n        }\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgvs6opyh.java:31)\n"
  stdout: ''
  timestamp: 1659792529
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long ans = -1;\n        for (int i = arr.size() - 1; i > 0;\
    \ i--) {\n            if (arr.get(i) <= arr.get(i - 1)) {\n                ans\
    \ = i;\n            }\n        }\n        return ans;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7i657do8.java:31)\n"
  stdout: ''
  timestamp: 1659792529
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long max = -1;\n        for (int i = arr.size() - 1; i > 0;\
    \ i--) {\n            if (arr.get(i) <= arr.get(i - 1)) {\n                max\
    \ = i;\n            }\n        }\n        return max;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkjtzpzrn.java:31)\n"
  stdout: ''
  timestamp: 1659792529
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long result = -1;\n        for (int i = arr.size() - 1; i >\
    \ 0; i--) {\n            if (arr.get(i) <= arr.get(i - 1)) {\n               \
    \ result = i;\n            }\n        }\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgvs6opyh.java:31)\n"
  stdout: ''
  timestamp: 1659792529
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long result = -1;\n        for (int i = arr.size() - 1; i >\
    \ 0; i--) {\n            if (arr.get(i) <= arr.get(i - 1)) {\n               \
    \ result = i;\n            }\n        }\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgvs6opyh.java:31)\n"
  stdout: ''
  timestamp: 1659792529
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        // Write your code here\n        // To print results to the\
    \ standard output you can use System.out.println()\n        // Example: System.out.println(\"\
    Hello world!\");\n        long result = -1;\n        for (int i = arr.size() -\
    \ 1; i > 0; i--) {\n            if (arr.get(i) <= arr.get(i - 1)) {\n        \
    \        result = i;\n            }\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfho1e3e1.java:34)\n"
  stdout: ''
  timestamp: 1659792529
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        // Write your code here\n        // To print results to the\
    \ standard output you can use System.out.println()\n        // Example: System.out.println(\"\
    Hello world!\");\n        long ret = -1;\n        for (int i = arr.size() - 1;\
    \ i > 0; i--) {\n            if (arr.get(i) <= arr.get(i - 1)) {\n           \
    \     ret = i;\n            }\n        }\n        return ret;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwto52_ic.java:34)\n"
  stdout: ''
  timestamp: 1659792531
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long max = -1;\n        for (int i = arr.size() - 1; i > 0;\
    \ i--) {\n            if (arr.get(i) <= arr.get(i - 1)) {\n                max\
    \ = i;\n            }\n        }\n        return max;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkjtzpzrn.java:31)\n"
  stdout: ''
  timestamp: 1659792529
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long result = -1;\n        for (int i = arr.size() - 1; i >\
    \ 0; i--) {\n            if (arr.get(i) <= arr.get(i - 1)) {\n               \
    \ result = i;\n            }\n        }\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgvs6opyh.java:31)\n"
  stdout: ''
  timestamp: 1659792529
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        // Write your code here\n        // To print results to the\
    \ standard output you can use System.out.println()\n        // Example: System.out.println(\"\
    Hello world!\");\n        long result = -1;\n        for (int i = arr.size() -\
    \ 1; i > 0; i--) {\n            if (arr.get(i) <= arr.get(i - 1)) {\n        \
    \        result = i;\n            }\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfho1e3e1.java:34)\n"
  stdout: ''
  timestamp: 1659792529
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long max = -1;\n        long maxIndex = -1;\n        for (int\
    \ i = arr.size() - 1; i >= 0; i--) {\n            if (arr.get(i) >= max) {\n \
    \               max = arr.get(i);\n                maxIndex = i;\n           \
    \ }\n        }\n        return maxIndex;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpowbximzh.java:30)\n"
  stdout: ''
  timestamp: 1659792530
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long max = -1;\n        for (int i = arr.size() - 1; i > 0;\
    \ i--) {\n            if (arr.get(i) >= arr.get(i - 1)) {\n                max\
    \ = i;\n            }\n        }\n        return max;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7da52a5c.java:28)\n"
  stdout: ''
  timestamp: 1659792531
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long max = -1;\n        for (int i = arr.size() - 1; i > 0;\
    \ i--) {\n            if (arr.get(i) <= arr.get(i - 1)) {\n                max\
    \ = i;\n            }\n        }\n        return max;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkjtzpzrn.java:31)\n"
  stdout: ''
  timestamp: 1659792529
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long ret = -1;\n        for (int i = arr.size() - 1; i > 0;\
    \ i--) {\n            if (arr.get(i) <= arr.get(i - 1)) {\n                ret\
    \ = i;\n            }\n        }\n        return ret;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7gl1wjlq.java:31)\n"
  stdout: ''
  timestamp: 1659792529
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long res = -1l;\n        for (int i = arr.size() - 1; i > 0;\
    \ i--) {\n            if (arr.get(i) <= arr.get(i - 1)) {\n                res\
    \ = i;\n            }\n        }\n        return res;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmph_ckjdw1.java:31)\n"
  stdout: ''
  timestamp: 1659792530
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        // Write your code here\n        // To print results to the\
    \ standard output you can use System.out.println()\n        // Example: System.out.println(\"\
    Hello world!\");\n        long max = -1;\n        for (int i = arr.size() - 1;\
    \ i > 0; i--) {\n            if (arr.get(i) <= arr.get(i - 1)) {\n           \
    \     max = i;\n            }\n        }\n        return max;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpecng3wab.java:34)\n"
  stdout: ''
  timestamp: 1659792529
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long result = -1;\n        for (int i = arr.size() - 1; i >\
    \ 0; i--) {\n            if (arr.get(i) <= arr.get(i - 1)) {\n               \
    \ result = i;\n            }\n        }\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgvs6opyh.java:31)\n"
  stdout: ''
  timestamp: 1659792529
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long result = -1;\n        for (int i = arr.size() - 1; i >\
    \ 0; i--) {\n            if (arr.get(i) <= arr.get(i - 1)) {\n               \
    \ result = i;\n            }\n        }\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgvs6opyh.java:31)\n"
  stdout: ''
  timestamp: 1659792529
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long ret = -1;\n        for (int i = arr.size() - 1; i > 0;\
    \ i--) {\n            if (arr.get(i) <= arr.get(i - 1)) {\n                ret\
    \ = i;\n            }\n        }\n        return ret;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7gl1wjlq.java:31)\n"
  stdout: ''
  timestamp: 1659792529
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long max = -1;\n        for (int i = arr.size() - 1; i > 0;\
    \ i--) {\n            if (arr.get(i) >= arr.get(i - 1)) {\n                max\
    \ = i;\n            }\n        }\n        return max;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7da52a5c.java:28)\n"
  stdout: ''
  timestamp: 1659792531
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        // Your code here\n        return -1;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpde3vbv1t.java:23)\n"
  stdout: ''
  timestamp: 1659792529
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long index = -1;\n        for (int i = arr.size() - 1; i > 0;\
    \ i--) {\n            if (arr.get(i) <= arr.get(i - 1)) {\n                index\
    \ = i;\n            }\n        }\n        return index;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfz4zkujw.java:31)\n"
  stdout: ''
  timestamp: 1659792530
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long result = -1;\n        for (int i = arr.size() - 1; i >\
    \ 0; i--) {\n            if (arr.get(i) <= arr.get(i - 1)) {\n               \
    \ result = i;\n            }\n        }\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgvs6opyh.java:31)\n"
  stdout: ''
  timestamp: 1659792529
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long ret = -1;\n        for (int i = arr.size() - 1; i > 0;\
    \ i--) {\n            if (arr.get(i) < arr.get(i - 1)) {\n                ret\
    \ = i - 1;\n                break;\n            }\n        }\n        return ret;\n\
    \    }\n    public static void main(String[] args) {\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l))))\
    \ == (3l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)5l)))) == (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjz0ucs8a.java:29)\n"
  stdout: ''
  timestamp: 1659792531
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long max = -1;\n        for (int i = arr.size() - 1; i > 0;\
    \ i--) {\n            if (arr.get(i) <= arr.get(i - 1)) {\n                max\
    \ = i;\n            }\n        }\n        return max;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkjtzpzrn.java:31)\n"
  stdout: ''
  timestamp: 1659792529
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        // Your code here\n        return -1l;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphe6l6zwb.java:23)\n"
  stdout: ''
  timestamp: 1659792529
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long ret = -1;\n        long prev = arr.get(0);\n        for\
    \ (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) <= prev) {\n\
    \                ret = i;\n            }\n            prev = arr.get(i);\n   \
    \     }\n        return ret;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)5l)))) == (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.canArrange(tmpnv3pa_vz.java:20)\n\tat Problem.main(tmpnv3pa_vz.java:34)\n"
  stdout: ''
  timestamp: 1659792529
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long result = -1;\n        for (int i = arr.size() - 1; i >\
    \ 0; i--) {\n            if (arr.get(i) <= arr.get(i - 1)) {\n               \
    \ result = i;\n            }\n        }\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgvs6opyh.java:31)\n"
  stdout: ''
  timestamp: 1659792529
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long result = -1;\n        for (int i = 0; i < arr.size() -\
    \ 1; i++) {\n            if (arr.get(i) >= arr.get(i + 1)) {\n               \
    \ result = i;\n            }\n        }\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp49d0b1rh.java:28)\n"
  stdout: ''
  timestamp: 1659792530
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long max = -1;\n        long maxIndex = -1;\n        for (int\
    \ i = arr.size() - 1; i >= 0; i--) {\n            if (arr.get(i) >= max) {\n \
    \               max = arr.get(i);\n                maxIndex = i;\n           \
    \ }\n        }\n        return maxIndex;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpowbximzh.java:30)\n"
  stdout: ''
  timestamp: 1659792530
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long result = -1;\n        for (int i = arr.size() - 1; i >\
    \ 0; i--) {\n            if (arr.get(i) <= arr.get(i - 1)) {\n               \
    \ result = i;\n            }\n        }\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgvs6opyh.java:31)\n"
  stdout: ''
  timestamp: 1659792529
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long max = -1;\n        for (int i = arr.size() - 1; i > 0;\
    \ i--) {\n            if (arr.get(i) <= arr.get(i - 1)) {\n                max\
    \ = i;\n            }\n        }\n        return max;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkjtzpzrn.java:31)\n"
  stdout: ''
  timestamp: 1659792529
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long n = arr.size();\n        long i = 0;\n        for (i =\
    \ n - 1; i >= 0; i--) {\n            if (arr.get((int)i) >= arr.get((int)(i -\
    \ 1))) {\n                continue;\n            }\n            break;\n     \
    \   }\n        return i;\n    }\n    public static void main(String[] args) {\n\
    \    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)5l)))) == (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ -1 out of bounds for length 4\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.canArrange(tmpg53ig62v.java:22)\n\tat Problem.main(tmpg53ig62v.java:31)\n"
  stdout: ''
  timestamp: 1659792531
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long ret = -1;\n        for (int i = arr.size() - 1; i > 0;\
    \ i--) {\n            if (arr.get(i) <= arr.get(i - 1)) {\n                ret\
    \ = i;\n            }\n        }\n        return ret;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7gl1wjlq.java:31)\n"
  stdout: ''
  timestamp: 1659792529
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long max = -1;\n        for (int i = arr.size() - 1; i > 0;\
    \ i--) {\n            if (arr.get(i) <= arr.get(i - 1)) {\n                max\
    \ = i;\n            }\n        }\n        return max;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkjtzpzrn.java:31)\n"
  stdout: ''
  timestamp: 1659792529
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long result = -1;\n        for (int i = arr.size() - 1; i >\
    \ 0; i--) {\n            if (arr.get(i) <= arr.get(i - 1)) {\n               \
    \ result = i;\n            }\n        }\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgvs6opyh.java:31)\n"
  stdout: ''
  timestamp: 1659792529
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        // Write your code here\n        // To print results to the\
    \ standard output you can use System.out.println()\n        // Example: System.out.println(\"\
    Hello world!\");\n        long max = -1;\n        for (int i = 0; i < arr.size()\
    \ - 1; i++) {\n            if (arr.get(i) >= arr.get(i + 1)) {\n             \
    \   max = i;\n            }\n        }\n        return max;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcb1z2zie.java:31)\n"
  stdout: ''
  timestamp: 1659792530
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        // Write your code here\n        // To print results to the\
    \ standard output you can use System.out.println()\n        // Example: System.out.println(\"\
    Hello world!\");\n        long max = -1;\n        for (int i = arr.size() - 1;\
    \ i > 0; i--) {\n            if (arr.get(i) <= arr.get(i - 1)) {\n           \
    \     max = i;\n            }\n        }\n        return max;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpecng3wab.java:34)\n"
  stdout: ''
  timestamp: 1659792529
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long result = -1;\n        for (int i = arr.size() - 1; i >\
    \ 0; i--) {\n            if (arr.get(i) <= arr.get(i - 1)) {\n               \
    \ result = i;\n            }\n        }\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgvs6opyh.java:31)\n"
  stdout: ''
  timestamp: 1659792529
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long ret = -1;\n        for (int i = arr.size() - 1; i > 0;\
    \ i--) {\n            if (arr.get(i) <= arr.get(i - 1)) {\n                ret\
    \ = i;\n            }\n        }\n        return ret;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7gl1wjlq.java:31)\n"
  stdout: ''
  timestamp: 1659792529
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        // Write your code here\n        // To print results to the\
    \ standard output you can use System.out.println()\n        // Example: System.out.println(\"\
    Hello world!\");\n        long max = -1;\n        long maxIndex = -1;\n      \
    \  for (int i = 0; i < arr.size() - 1; i++) {\n            if (arr.get(i) >= arr.get(i\
    \ + 1)) {\n                if (max < arr.get(i)) {\n                    max =\
    \ arr.get(i);\n                    maxIndex = i;\n                }\n        \
    \    }\n        }\n        return maxIndex;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmax5s7ir.java:35)\n"
  stdout: ''
  timestamp: 1659792531
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long ret = -1;\n        for (int i = arr.size() - 1; i > 0;\
    \ i--) {\n            if (arr.get(i) <= arr.get(i - 1)) {\n                ret\
    \ = i;\n            }\n        }\n        return ret;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7gl1wjlq.java:31)\n"
  stdout: ''
  timestamp: 1659792529
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long max = -1;\n        for (int i = arr.size() - 1; i > 0;\
    \ i--) {\n            if (arr.get(i) <= arr.get(i - 1)) {\n                max\
    \ = i;\n            }\n        }\n        return max;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkjtzpzrn.java:31)\n"
  stdout: ''
  timestamp: 1659792529
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        int n = arr.size();\n        long[] dp = new long[n];\n    \
    \    dp[0] = -1;\n        for (int i = 1; i < n; i++) {\n            if (arr.get(i)\
    \ <= arr.get(i - 1)) {\n                dp[i] = i - 1;\n            } else {\n\
    \                dp[i] = dp[i - 1];\n            }\n        }\n        return\
    \ dp[n - 1];\n    }\n    public static void main(String[] args) {\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l))))\
    \ == (3l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)5l)))) == (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmpzkn550.java:32)\n"
  stdout: ''
  timestamp: 1659792531
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        // Your code here\n        return -1;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpde3vbv1t.java:23)\n"
  stdout: ''
  timestamp: 1659792529
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        // Your code goes here\n        return -1l;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpm8rnntuw.java:23)\n"
  stdout: ''
  timestamp: 1659792529
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        // Write your code here\n        // To print results to the\
    \ standard output you can use System.out.println()\n        // Example: System.out.println(\"\
    Hello world!\");\n        long max = -1;\n        for (int i = 0; i < arr.size()\
    \ - 1; i++) {\n            if (arr.get(i) >= arr.get(i + 1)) {\n             \
    \   max = i;\n            }\n        }\n        return max;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcb1z2zie.java:31)\n"
  stdout: ''
  timestamp: 1659792530
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        // Write your code here\n        // To print results to the\
    \ standard output you can use System.out.println()\n        // Example: System.out.println(\"\
    Hello world!\");\n        long result = -1;\n        for (int i = arr.size() -\
    \ 1; i > 0; i--) {\n            if (arr.get(i) <= arr.get(i - 1)) {\n        \
    \        result = i;\n            }\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfho1e3e1.java:34)\n"
  stdout: ''
  timestamp: 1659792529
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long max = -1;\n        for (int i = arr.size() - 1; i > 0;\
    \ i--) {\n            if (arr.get(i) <= arr.get(i - 1)) {\n                max\
    \ = i;\n            }\n        }\n        return max;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkjtzpzrn.java:31)\n"
  stdout: ''
  timestamp: 1659792529
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        // Your code here\n        return -1;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpde3vbv1t.java:23)\n"
  stdout: ''
  timestamp: 1659792529
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long max = -1;\n        for (int i = arr.size() - 1; i > 0;\
    \ i--) {\n            if (arr.get(i) <= arr.get(i - 1)) {\n                max\
    \ = i;\n            }\n        }\n        return max;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkjtzpzrn.java:31)\n"
  stdout: ''
  timestamp: 1659792529
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long max = -1;\n        for (int i = 0; i < arr.size() - 1;\
    \ i++) {\n            if (arr.get(i) >= arr.get(i + 1)) {\n                max\
    \ = i;\n            }\n        }\n        return max;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpq8_2ohx2.java:28)\n"
  stdout: ''
  timestamp: 1659792530
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long max = -1;\n        for (int i = arr.size() - 1; i > 0;\
    \ i--) {\n            if (arr.get(i) <= arr.get(i - 1)) {\n                max\
    \ = i;\n            }\n        }\n        return max;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkjtzpzrn.java:31)\n"
  stdout: ''
  timestamp: 1659792529
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long ret = -1l;\n        for (int i = arr.size() - 1; i > 0;\
    \ i--) {\n            if (arr.get(i) <= arr.get(i - 1)) {\n                ret\
    \ = i;\n            }\n        }\n        return ret;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpg3he3uda.java:31)\n"
  stdout: ''
  timestamp: 1659792529
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long max = -1;\n        for (int i = arr.size() - 1; i > 0;\
    \ i--) {\n            if (arr.get(i) <= arr.get(i - 1)) {\n                max\
    \ = i;\n            }\n        }\n        return max;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkjtzpzrn.java:31)\n"
  stdout: ''
  timestamp: 1659792529
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long ret = -1l;\n        for (int i = arr.size() - 1; i > 0;\
    \ i--) {\n            if (arr.get(i) <= arr.get(i - 1)) {\n                ret\
    \ = i;\n            }\n        }\n        return ret;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpg3he3uda.java:31)\n"
  stdout: ''
  timestamp: 1659792529
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        // Write your code here\n        // To print results to the\
    \ standard output you can use System.out.println()\n        // Example: System.out.println(\"\
    Hello world!\");\n        long max = -1;\n        for (int i = arr.size() - 1;\
    \ i > 0; i--) {\n            if (arr.get(i) <= arr.get(i - 1)) {\n           \
    \     max = i;\n            }\n        }\n        return max;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpecng3wab.java:34)\n"
  stdout: ''
  timestamp: 1659792529
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long ret = -1;\n        for (int i = 0; i < arr.size() - 1;\
    \ i++) {\n            if (arr.get(i) >= arr.get(i + 1)) {\n                ret\
    \ = i;\n            }\n        }\n        return ret;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8a4k_4q_.java:28)\n"
  stdout: ''
  timestamp: 1659792531
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long res = -1;\n        for (int i = arr.size() - 1; i > 0;\
    \ i--) {\n            if (arr.get(i) <= arr.get(i - 1)) {\n                res\
    \ = i;\n            }\n        }\n        return res;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpioynjmkj.java:31)\n"
  stdout: ''
  timestamp: 1659792530
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long max = arr.get(0);\n        long maxIndex = 0;\n       \
    \ for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) <= max) {\n\
    \                max = arr.get(i);\n                maxIndex = i;\n          \
    \  }\n        }\n        return maxIndex;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzou7acqa.java:30)\n"
  stdout: ''
  timestamp: 1659792531
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long ret = -1;\n        for (int i = arr.size() - 1; i > 0;\
    \ i--) {\n            if (arr.get(i) <= arr.get(i - 1)) {\n                ret\
    \ = i;\n            }\n        }\n        return ret;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7gl1wjlq.java:31)\n"
  stdout: ''
  timestamp: 1659792529
