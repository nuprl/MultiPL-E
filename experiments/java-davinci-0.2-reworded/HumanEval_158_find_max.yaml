name: HumanEval_158_find_max
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // Write a function that accepts an array array list of strings.\n\
  \    // The array list contains different words. Return the word with maximum number\n\
  \    // of unique characters. If multiple strings have maximum number of unique\n\
  \    // characters, return the one which comes first in lexicographical order.\n\
  \    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\", (String)\"\
  of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
  name\", (String)\"enam\", (String)\"game\"))))\n    // (\"enam\")\n    // >>> findMax((new\
  \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
  cc\"))))\n    // (\"aaaaaaa\")\n    public static String findMax(ArrayList<String>\
  \ words) {\n"
tests: "    }\n    public static void main(String[] args) {\n    assert(findMax((new\
  \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"of\", (String)\"string\"\
  )))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
  name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
  \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
  cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
  abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
  play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
  )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
  we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
  )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\", (String)\"\
  are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"nation\"\
  )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"this\",\
  \ (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n   \
  \ assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
  b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
  , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
completions: ['        return words.stream().max(Comparator.comparing(Problem::uniqueChars)).get();',
  '        return null;', '        return null;', "        int max = 0;\n        String\
    \ maxWord = \"\";\n        for (String word : words) {\n            int unique\
    \ = 0;\n            for (int i = 0; i < word.length(); i++) {\n              \
    \  if (word.indexOf(word.charAt(i)) == i) {\n                    unique++;\n \
    \               }\n            }\n            if (unique > max) {\n          \
    \      max = unique;\n                maxWord = word;\n            }\n       \
    \ }\n        return maxWord;", '        return "";', '        return null;', " \
    \       String max = words.get(0);\n        for (String word : words) {\n    \
    \        if (word.length() > max.length()) {\n                max = word;\n  \
    \          }\n        }\n        return max;", '        return null;', '        return
    words.stream().max(Comparator.comparing(s -> s.chars().distinct().count())).get();',
  "        // Write your code here\n        return null;", "        String max = \"\
    \";\n        int maxCount = 0;\n        for (String word : words) {\n        \
    \    int count = 0;\n            for (int i = 0; i < word.length(); i++) {\n \
    \               if (word.indexOf(word.charAt(i)) == i) {\n                   \
    \ count++;\n                }\n            }\n            if (count > maxCount)\
    \ {\n                maxCount = count;\n                max = word;\n        \
    \    }\n        }\n        return max;", "        // Write your code here\n  \
    \      return \"\";", '        return null;', "        // Write your code here\n\
    \        return \"\";", "        // Write your code here.\n        return \"\"\
    ;", "        String max = \"\";\n        int max_count = 0;\n        for (String\
    \ word : words) {\n            int count = 0;\n            for (int i = 0; i <\
    \ word.length(); i++) {\n                if (word.indexOf(word.charAt(i)) == i)\
    \ {\n                    count++;\n                }\n            }\n        \
    \    if (count > max_count) {\n                max = word;\n                max_count\
    \ = count;\n            }\n        }\n        return max;", "        String max\
    \ = \"\";\n        int max_count = 0;\n        for (String word : words) {\n \
    \           Set<Character> set = new HashSet<Character>();\n            for (char\
    \ c : word.toCharArray()) {\n                set.add(c);\n            }\n    \
    \        if (set.size() > max_count) {\n                max = word;\n        \
    \        max_count = set.size();\n            }\n        }\n        return max;",
  '        return words.stream().max(Comparator.comparing(Problem::countUniqueChars)).get();',
  '        return words.stream().max(Comparator.comparingInt(s -> s.chars().distinct().count())).get();',
  "        String maxWord = \"\";\n        int maxUnique = 0;\n        for (String\
    \ word : words) {\n            int unique = 0;\n            for (int i = 0; i\
    \ < word.length(); i++) {\n                if (word.indexOf(word.charAt(i)) ==\
    \ i) {\n                    unique++;\n                }\n            }\n    \
    \        if (unique > maxUnique) {\n                maxUnique = unique;\n    \
    \            maxWord = word;\n            }\n        }\n        return maxWord;"]
stop_tokens:
- "\n    }\n"
