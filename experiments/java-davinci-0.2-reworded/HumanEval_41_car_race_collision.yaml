name: HumanEval_41_car_race_collision
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // Imagine a road that's a perfectly straight infinitely long\
  \ line.\n    // n cars are driving left to right;  simultaneously, a different set\
  \ of n cars\n    // are driving right to left.   The two sets of cars start out\
  \ being very far from\n    // each other.  All cars move in the same speed.  Two\
  \ cars are said to collide\n    // when a car that's moving left to right hits a\
  \ car that's moving right to left.\n    // However, the cars are infinitely sturdy\
  \ and strong; as a result, they continue moving\n    // in their trajectory as if\
  \ they did not collide.\n    // This function outputs the number of such collisions.\n\
  \    public static long carRaceCollision(long n) {\n"
tests: "    }\n    public static void main(String[] args) {\n    assert(carRaceCollision((2l))\
  \ == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
  \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
  \ == (100l));\n    }\n\n}\n"
completions: ['        return n * (n - 1) / 2;', "        // Write your code here.\n\
    \        return 0;", "        // Write your code here.\n        return 0;", '        return
    0;', "        // This is the solution.  Please do not modify this line.\n    \
    \    return n*(n-1)/2;", '        return n * (n - 1) / 2;', "        // Your code\
    \ goes here.\n        return 0;", "        // Assume n is non-negative.\n    \
    \    // Your solution goes here.\n        return 0;", "        // TODO: implement\
    \ this function\n        return 0;", "        // Your code here.\n        return\
    \ 0;", "        // This is the solution code.\n        // Please fill in the blanks.\n\
    \        long collisions = 0;\n        for (long i = 0; i < n; i++) {\n      \
    \      for (long j = 0; j < n; j++) {\n                if (i == j) {\n       \
    \             collisions++;\n                }\n            }\n        }\n   \
    \     return collisions;", '        return n * (n - 1) / 2;', '        return
    n * (n - 1) / 2;', '        return n * (n - 1) / 2;', "        // Write your code\
    \ here.\n        // You can add more methods and variables as needed.\n      \
    \  // You can also add new classes.\n        // Do not use any Java collection\
    \ library.\n        // Do not leave any debugging print statements.\n        //\
    \ Your code should run in O(n) time.\n        // Your code should use O(1) space.\n\
    \        // Your code should be correct for any n.\n        // Your code should\
    \ be robust to any input.\n        // Your code should not crash.\n        //\
    \ Your code should not throw exceptions.\n        // Your code should not use\
    \ recursion.\n        // Your code should not use any external libraries.\n  \
    \      // Your code should not use any threads or synchronization.\n        //\
    \ Your code should not use any locks.\n        // Your code should not use any\
    \ wait or notify.\n        // Your code should not use any blocking queues.\n\
    \        // Your code should not use any concurrent data structures.\n       \
    \ // Your code should not use any atomic variables.\n        // Your code should\
    \ not use any volatile variables.\n        // Your code should not use any volatile\
    \ fields.\n        // Your code should not use any volatile arrays.\n        //\
    \ Your code should not use any volatile collections.\n        // Your code should\
    \ not use any volatile maps.\n        // Your code should not use any volatile\
    \ sets.\n        // Your code should not use any volatile lists.\n        // Your\
    \ code should not use any volatile queues.\n        // Your code should not use\
    \ any volatile stacks.\n        // Your code should not use any volatile deques.\n\
    \        // Your code should not use any volatile concurrent maps.\n        //\
    \ Your code should not use any volatile concurrent sets.\n        // Your code\
    \ should not use any volatile concurrent lists.\n        // Your code should not\
    \ use any volatile concurrent queues.\n        // Your code should not use any\
    \ volatile concurrent stacks.\n        // Your code should not use any volatile\
    \ concurrent deques.\n        // Your code should not use any volatile concurrent\
    \ skip lists.\n        // Your code should not use any volatile concurrent hash\
    \ maps.\n        // Your code should not use any volatile concurrent hash sets.\n\
    \        // Your code should not use any volatile concurrent hash lists.\n   \
    \     // Your code should not use any volatile concurrent hash queues.\n     \
    \   // Your code should not use any volatile concurrent hash stacks.\n       \
    \ // Your code should not use", "        // TODO: implement this function\n  \
    \      return 0;", '        return n * (n - 1) / 2;', "        // This is a very\
    \ simple problem.  We just need to find the number of pairs of cars\n        //\
    \ that collide.  There are n cars moving left to right, and n cars moving right\
    \ to left.\n        // The number of pairs is n * n.  But we need to divide by\
    \ 2 because each pair is counted twice.\n        // So the answer is n * n / 2.\n\
    \        return n * n / 2;", '        return n * (n - 1) / 2;', "        // TODO:\
    \ implement this function\n        return 0;"]
stop_tokens:
- "\n    }\n"
