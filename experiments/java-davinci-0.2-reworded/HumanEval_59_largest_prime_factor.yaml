name: HumanEval_59_largest_prime_factor
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is\
  \ not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n    // >>>\
  \ largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
  \ n) {\n"
tests: "    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
  \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
  \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
  \ == (29l));\n    }\n\n}\n"
completions: ["        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n\
    \            if (n % i == 0) {\n                largest = i;\n               \
    \ n /= i;\n                i--;\n            }\n        }\n        return largest;",
  "        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n          \
    \  if (n % i == 0) {\n                largest = i;\n                n /= i;\n\
    \                i--;\n            }\n        }\n        return largest;", " \
    \       long largestPrimeFactor = 1;\n        for (long i = 2; i <= n; i++) {\n\
    \            if (n % i == 0) {\n                largestPrimeFactor = i;\n    \
    \            n /= i;\n                i--;\n            }\n        }\n       \
    \ return largestPrimeFactor;", "        long largestPrimeFactor = 1;\n       \
    \ long i = 2;\n        while (i <= n) {\n            if (n % i == 0) {\n     \
    \           largestPrimeFactor = i;\n                n /= i;\n            } else\
    \ {\n                i++;\n            }\n        }\n        return largestPrimeFactor;",
  "        long i = 2;\n        while (i * i <= n) {\n            if (n % i == 0)\
    \ {\n                n /= i;\n            } else {\n                i++;\n   \
    \         }\n        }\n        return n;", "        long largest = 0;\n     \
    \   for (long i = 2; i <= n; i++) {\n            if (n % i == 0) {\n         \
    \       largest = i;\n                n /= i;\n                i--;\n        \
    \    }\n        }\n        return largest;", "        long largest = 0;\n    \
    \    long factor = 2;\n        while (n > 1) {\n            while (n % factor\
    \ == 0) {\n                largest = factor;\n                n /= factor;\n \
    \           }\n            factor += 1;\n        }\n        return largest;",
  "        long p = 2;\n        while (n % p != 0) {\n            p++;\n        }\n\
    \        long q = n / p;\n        if (q == 1) {\n            return p;\n     \
    \   } else {\n            return largestPrimeFactor(q);\n        }", "       \
    \ long largestPrimeFactor = 1;\n        for (long i = 2; i <= n; i++) {\n    \
    \        if (n % i == 0) {\n                largestPrimeFactor = i;\n        \
    \        n /= i;\n                i--;\n            }\n        }\n        return\
    \ largestPrimeFactor;", "        long largest = 0;\n        for (long i = 2; i\
    \ <= n; i++) {\n            if (n % i == 0) {\n                largest = i;\n\
    \                n /= i;\n                i--;\n            }\n        }\n   \
    \     return largest;", "        long largestPrimeFactor = 1;\n        for (long\
    \ i = 2; i <= n; i++) {\n            if (n % i == 0) {\n                largestPrimeFactor\
    \ = i;\n                n /= i;\n                i--;\n            }\n       \
    \ }\n        return largestPrimeFactor;", "        long largestPrimeFactor = 1;\n\
    \        for (long i = 2; i <= n; i++) {\n            if (n % i == 0) {\n    \
    \            largestPrimeFactor = i;\n                n /= i;\n              \
    \  i--;\n            }\n        }\n        return largestPrimeFactor;", "    \
    \    long largestPrimeFactor = 1;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largestPrimeFactor = i;\n     \
    \           n /= i;\n                i--;\n            }\n        }\n        return\
    \ largestPrimeFactor;", "        long largestPrimeFactor = 0;\n        long i\
    \ = 2;\n        while (i <= n) {\n            if (n % i == 0) {\n            \
    \    largestPrimeFactor = i;\n                n /= i;\n            } else {\n\
    \                i++;\n            }\n        }\n        return largestPrimeFactor;",
  "        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n          \
    \  if (n % i == 0) {\n                largest = i;\n                n /= i;\n\
    \                i--;\n            }\n        }\n        return largest;", " \
    \       long largest = 0;\n        for (long i = 2; i <= n; i++) {\n         \
    \   if (n % i == 0) {\n                largest = i;\n                n /= i;\n\
    \                i = 1;\n            }\n        }\n        return largest;", " \
    \       long largest = 1;\n        for (long i = 2; i <= n; i++) {\n         \
    \   if (n % i == 0) {\n                largest = i;\n                n /= i;\n\
    \                i--;\n            }\n        }\n        return largest;", " \
    \       long largest = 0;\n        for (long i = 2; i <= n; i++) {\n         \
    \   if (n % i == 0) {\n                largest = i;\n                n /= i;\n\
    \                i = 1;\n            }\n        }\n        return largest;", " \
    \       long i = 2;\n        while (i * i <= n) {\n            if (n % i == 0)\
    \ {\n                n /= i;\n            } else {\n                i++;\n   \
    \         }\n        }\n        return n;", "        long largest = 1;\n     \
    \   for (long i = 2; i <= n; i++) {\n            if (n % i == 0) {\n         \
    \       largest = i;\n                while (n % i == 0) {\n                 \
    \   n /= i;\n                }\n            }\n        }\n        return largest;",
  "        long largestPrimeFactor = 1;\n        for (long i = 2; i <= n; i++) {\n\
    \            if (n % i == 0) {\n                largestPrimeFactor = i;\n    \
    \            n /= i;\n                i--;\n            }\n        }\n       \
    \ return largestPrimeFactor;", "        long largest = 0;\n        for (long i\
    \ = 2; i <= n; i++) {\n            if (n % i == 0) {\n                largest\
    \ = i;\n                n /= i;\n                i--;\n            }\n       \
    \ }\n        return largest;", "        long i = 2;\n        while (i * i <= n)\
    \ {\n            if (n % i == 0) {\n                n /= i;\n            } else\
    \ {\n                i++;\n            }\n        }\n        return n;", "   \
    \     long largest = 1;\n        for (long i = 2; i <= n; i++) {\n           \
    \ if (n % i == 0) {\n                largest = i;\n                n /= i;\n \
    \               i--;\n            }\n        }\n        return largest;", "  \
    \      long largest = 0;\n        for (long i = 2; i <= n; i++) {\n          \
    \  if (n % i == 0) {\n                largest = i;\n                while (n %\
    \ i == 0) {\n                    n /= i;\n                }\n            }\n \
    \       }\n        return largest;", "        long largestPrimeFactor = 1;\n \
    \       for (long i = 2; i <= n; i++) {\n            if (n % i == 0) {\n     \
    \           largestPrimeFactor = i;\n                n /= i;\n               \
    \ i--;\n            }\n        }\n        return largestPrimeFactor;", "     \
    \   long largest = 0;\n        for (long i = 2; i <= n; i++) {\n            if\
    \ (n % i == 0) {\n                largest = i;\n                n /= i;\n    \
    \            i--;\n            }\n        }\n        return largest;", "     \
    \   long largestPrimeFactor = 1;\n        for (long i = 2; i <= n; i++) {\n  \
    \          if (n % i == 0) {\n                largestPrimeFactor = i;\n      \
    \          n /= i;\n                i--;\n            }\n        }\n        return\
    \ largestPrimeFactor;", "        long largest = 1;\n        for (long i = 2; i\
    \ <= n; i++) {\n            if (n % i == 0) {\n                largest = i;\n\
    \                n /= i;\n                i--;\n            }\n        }\n   \
    \     return largest;", "        long largest = 1;\n        for (long i = 2; i\
    \ <= n; i++) {\n            if (n % i == 0) {\n                largest = i;\n\
    \                n /= i;\n                i--;\n            }\n        }\n   \
    \     return largest;", "        long largest = 0;\n        for (long i = 2; i\
    \ <= n; i++) {\n            if (n % i == 0) {\n                largest = i;\n\
    \                n /= i;\n                i = 1;\n            }\n        }\n \
    \       return largest;", "        long largest = 0;\n        for (long i = 2;\
    \ i <= n; i++) {\n            if (n % i == 0) {\n                largest = i;\n\
    \                n /= i;\n                i--;\n            }\n        }\n   \
    \     return largest;", "        long largestPrimeFactor = 1;\n        for (long\
    \ i = 2; i <= n; i++) {\n            if (n % i == 0) {\n                largestPrimeFactor\
    \ = i;\n                n /= i;\n                i--;\n            }\n       \
    \ }\n        return largestPrimeFactor;", "        long largestPrimeFactor = 0;\n\
    \        for (long i = 2; i <= n; i++) {\n            if (n % i == 0) {\n    \
    \            largestPrimeFactor = i;\n                n /= i;\n              \
    \  i = 1;\n            }\n        }\n        return largestPrimeFactor;", "  \
    \      long largest = 0;\n        for (long i = 2; i <= n; i++) {\n          \
    \  if (n % i == 0) {\n                if (isPrime(i)) {\n                    largest\
    \ = i;\n                }\n            }\n        }\n        return largest;",
  "        long largestPrimeFactor = 1;\n        long i = 2;\n        while (i <=\
    \ n) {\n            if (n % i == 0) {\n                largestPrimeFactor = i;\n\
    \                n /= i;\n            } else {\n                i++;\n       \
    \     }\n        }\n        return largestPrimeFactor;", "        long largest\
    \ = 0;\n        for (long i = 2; i <= n; i++) {\n            if (n % i == 0) {\n\
    \                if (isPrime(i)) {\n                    largest = i;\n       \
    \         }\n            }\n        }\n        return largest;", "        long\
    \ largestPrimeFactor = 0;\n        for (long i = 2; i <= n; i++) {\n         \
    \   if (n % i == 0) {\n                largestPrimeFactor = i;\n             \
    \   n /= i;\n                i = 1;\n            }\n        }\n        return\
    \ largestPrimeFactor;", "        long largest = 0;\n        for (long i = 2; i\
    \ <= n; i++) {\n            if (n % i == 0) {\n                largest = i;\n\
    \                n /= i;\n                i--;\n            }\n        }\n   \
    \     return largest;", "        long largest = 0;\n        for (long i = 2; i\
    \ <= n; i++) {\n            if (n % i == 0) {\n                largest = i;\n\
    \                n /= i;\n                i--;\n            }\n        }\n   \
    \     return largest;", "        long largest = 1;\n        for (long i = 2; i\
    \ <= n; i++) {\n            if (n % i == 0) {\n                largest = i;\n\
    \                n /= i;\n                i = 1;\n            }\n        }\n \
    \       return largest;", "        long largest = 0;\n        for (long i = 2;\
    \ i <= n; i++) {\n            if (n % i == 0) {\n                if (isPrime(i))\
    \ {\n                    largest = i;\n                }\n            }\n    \
    \    }\n        return largest;", "        long factor = 2;\n        while (n\
    \ > 1) {\n            if (n % factor == 0) {\n                n /= factor;\n \
    \           } else {\n                factor++;\n            }\n        }\n  \
    \      return factor;", "        long largest = 0;\n        for (long i = 2; i\
    \ <= n; i++) {\n            if (n % i == 0) {\n                largest = i;\n\
    \                n /= i;\n                i = 1;\n            }\n        }\n \
    \       return largest;", "        long largestPrimeFactor = 0;\n        for (long\
    \ i = 2; i <= n; i++) {\n            if (n % i == 0) {\n                largestPrimeFactor\
    \ = i;\n                n /= i;\n                i = 1;\n            }\n     \
    \   }\n        return largestPrimeFactor;", "        long largestPrimeFactor =\
    \ 1;\n        for (long i = 2; i <= n; i++) {\n            if (n % i == 0) {\n\
    \                largestPrimeFactor = i;\n                n /= i;\n          \
    \      i--;\n            }\n        }\n        return largestPrimeFactor;", " \
    \       long i = 2;\n        while (i * i <= n) {\n            if (n % i == 0)\
    \ {\n                n /= i;\n            } else {\n                i++;\n   \
    \         }\n        }\n        return n;", "        long largest = 0;\n     \
    \   for (long i = 2; i <= n; i++) {\n            if (n % i == 0) {\n         \
    \       largest = i;\n                n /= i;\n                i--;\n        \
    \    }\n        }\n        return largest;", "        long largestPrimeFactor\
    \ = 1;\n        for (long i = 2; i <= n; i++) {\n            if (n % i == 0) {\n\
    \                largestPrimeFactor = i;\n                n /= i;\n          \
    \      i--;\n            }\n        }\n        return largestPrimeFactor;", " \
    \       long largest = 1;\n        for (long i = 2; i * i <= n; i++) {\n     \
    \       if (n % i == 0) {\n                largest = i;\n                while\
    \ (n % i == 0) {\n                    n /= i;\n                }\n           \
    \ }\n        }\n        if (n > 1) {\n            largest = n;\n        }\n  \
    \      return largest;", "        long largest = 0;\n        for (long i = 2;\
    \ i <= n; i++) {\n            if (n % i == 0) {\n                largest = i;\n\
    \                n /= i;\n                i--;\n            }\n        }\n   \
    \     return largest;", "        long largestPrimeFactor = 1;\n        for (long\
    \ i = 2; i <= n; i++) {\n            if (n % i == 0) {\n                largestPrimeFactor\
    \ = i;\n                n /= i;\n                i = 1;\n            }\n     \
    \   }\n        return largestPrimeFactor;", "        long max = 0;\n        for\
    \ (long i = 2; i <= n; i++) {\n            if (n % i == 0) {\n               \
    \ max = i;\n                n /= i;\n                i--;\n            }\n   \
    \     }\n        return max;", "        long i = 2;\n        while (i * i <= n)\
    \ {\n            if (n % i == 0) {\n                n /= i;\n            } else\
    \ {\n                i++;\n            }\n        }\n        return n;", "   \
    \     long largest = 1;\n        for (long i = 2; i <= n; i++) {\n           \
    \ if (n % i == 0) {\n                largest = i;\n                while (n %\
    \ i == 0) {\n                    n /= i;\n                }\n            }\n \
    \       }\n        return largest;", "        long largest = 0;\n        for (long\
    \ i = 2; i <= n; i++) {\n            if (n % i == 0) {\n                largest\
    \ = i;\n                while (n % i == 0) {\n                    n /= i;\n  \
    \              }\n            }\n        }\n        return largest;", "      \
    \  long largestPrimeFactor = 0;\n        long i = 2;\n        while (i <= n) {\n\
    \            if (n % i == 0) {\n                largestPrimeFactor = i;\n    \
    \            n /= i;\n            } else {\n                i++;\n           \
    \ }\n        }\n        return largestPrimeFactor;", "        long largest = 0;\n\
    \        for (long i = 2; i <= n; i++) {\n            if (n % i == 0) {\n    \
    \            largest = i;\n                n /= i;\n                i = 1;\n \
    \           }\n        }\n        return largest;", "        long largest = 1;\n\
    \        for (long i = 2; i <= n; i++) {\n            if (n % i == 0) {\n    \
    \            largest = i;\n                n /= i;\n                i--;\n   \
    \         }\n        }\n        return largest;", "        long largest = 1;\n\
    \        for (long i = 2; i <= n; i++) {\n            if (n % i == 0) {\n    \
    \            largest = i;\n                n /= i;\n                i--;\n   \
    \         }\n        }\n        return largest;", "        long largest = 1;\n\
    \        for (long i = 2; i <= n; i++) {\n            if (n % i == 0) {\n    \
    \            largest = i;\n                n /= i;\n                i = 1;\n \
    \           }\n        }\n        return largest;", "        long largestPrimeFactor\
    \ = 1;\n        for (long i = 2; i <= n; i++) {\n            if (n % i == 0) {\n\
    \                largestPrimeFactor = i;\n                n /= i;\n          \
    \      i--;\n            }\n        }\n        return largestPrimeFactor;", " \
    \       long largestPrimeFactor = 1;\n        for (long i = 2; i <= n; i++) {\n\
    \            if (n % i == 0) {\n                largestPrimeFactor = i;\n    \
    \            n /= i;\n                i = 1;\n            }\n        }\n     \
    \   return largestPrimeFactor;", "        long largestPrimeFactor = 1;\n     \
    \   for (long i = 2; i <= n; i++) {\n            if (n % i == 0) {\n         \
    \       largestPrimeFactor = i;\n                n /= i;\n                i =\
    \ 1;\n            }\n        }\n        return largestPrimeFactor;", "       \
    \ long largestPrimeFactor = 1;\n        for (long i = 2; i <= n; i++) {\n    \
    \        if (n % i == 0) {\n                largestPrimeFactor = i;\n        \
    \        n /= i;\n                i = 1;\n            }\n        }\n        return\
    \ largestPrimeFactor;", "        long largestPrimeFactor = 0;\n        long i\
    \ = 2;\n        while (i <= n) {\n            if (n % i == 0) {\n            \
    \    largestPrimeFactor = i;\n                n /= i;\n            } else {\n\
    \                i++;\n            }\n        }\n        return largestPrimeFactor;",
  "        for (long i = 2; i <= n; i++) {\n            if (n % i == 0) {\n      \
    \          return largestPrimeFactor(n / i);\n            }\n        }\n     \
    \   return n;", "        long largest = 0;\n        for (long i = 2; i <= n; i++)\
    \ {\n            if (n % i == 0) {\n                largest = i;\n           \
    \     n /= i;\n                i = 1;\n            }\n        }\n        return\
    \ largest;", "        // TODO: Implement this method.\n        return 0;", " \
    \       long largest = 1;\n        for (long i = 2; i <= n; i++) {\n         \
    \   if (n % i == 0) {\n                largest = i;\n                n /= i;\n\
    \                i--;\n            }\n        }\n        return largest;", " \
    \       long largest = 0;\n        for (long i = 2; i <= n; i++) {\n         \
    \   if (n % i == 0) {\n                largest = i;\n                n /= i;\n\
    \                i = 1;\n            }\n        }\n        return largest;", " \
    \       long i = 2;\n        while (i * i <= n) {\n            if (n % i == 0)\
    \ {\n                n /= i;\n            } else {\n                i++;\n   \
    \         }\n        }\n        return n;", "        long largest = 0;\n     \
    \   for (long i = 2; i <= n; i++) {\n            if (n % i == 0) {\n         \
    \       largest = i;\n                while (n % i == 0) {\n                 \
    \   n /= i;\n                }\n            }\n        }\n        return largest;",
  "        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n          \
    \  if (n % i == 0) {\n                largest = i;\n                n /= i;\n\
    \                i--;\n            }\n        }\n        return largest;", " \
    \       long largestPrimeFactor = 1;\n        for (long i = 2; i <= n; i++) {\n\
    \            if (n % i == 0) {\n                largestPrimeFactor = i;\n    \
    \            n /= i;\n                i--;\n            }\n        }\n       \
    \ return largestPrimeFactor;", "        long largestPrimeFactor = 0;\n       \
    \ long i = 2;\n        while (i <= n) {\n            if (n % i == 0) {\n     \
    \           largestPrimeFactor = i;\n                n /= i;\n            } else\
    \ {\n                i++;\n            }\n        }\n        return largestPrimeFactor;",
  "        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n          \
    \  if (n % i == 0) {\n                largest = i;\n                n /= i;\n\
    \                i = 1;\n            }\n        }\n        return largest;", " \
    \       long factor = 2;\n        while (n > 1) {\n            if (n % factor\
    \ == 0) {\n                n /= factor;\n            } else {\n              \
    \  factor++;\n            }\n        }\n        return factor;", "        long\
    \ largest = 1;\n        for (long i = 2; i <= n; i++) {\n            if (n % i\
    \ == 0) {\n                largest = i;\n                n /= i;\n           \
    \     i--;\n            }\n        }\n        return largest;", "        long\
    \ largest = 0;\n        for (long i = 2; i <= n; i++) {\n            if (n % i\
    \ == 0) {\n                largest = i;\n                n /= i;\n           \
    \     i = 1;\n            }\n        }\n        return largest;", "        long\
    \ largest = 0;\n        for (long i = 2; i <= n; i++) {\n            if (n % i\
    \ == 0) {\n                largest = i;\n                n /= i;\n           \
    \     i = 1;\n            }\n        }\n        return largest;", "        long\
    \ i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n      \
    \          n /= i;\n            } else {\n                i++;\n            }\n\
    \        }\n        return n;", "        long largest = 0;\n        for (long\
    \ i = 2; i <= n; i++) {\n            if (n % i == 0) {\n                largest\
    \ = i;\n                n /= i;\n                i--;\n            }\n       \
    \ }\n        return largest;", "        long i = 2;\n        while (i * i <= n)\
    \ {\n            if (n % i == 0) {\n                n /= i;\n            } else\
    \ {\n                i++;\n            }\n        }\n        return n;", "   \
    \     long largest = 0;\n        for (long i = 2; i <= n; i++) {\n           \
    \ if (n % i == 0) {\n                largest = i;\n                n /= i;\n \
    \               i = 1;\n            }\n        }\n        return largest;", " \
    \       long largestPrimeFactor = 1;\n        for (long i = 2; i <= n; i++) {\n\
    \            if (n % i == 0) {\n                largestPrimeFactor = i;\n    \
    \            n /= i;\n                i--;\n            }\n        }\n       \
    \ return largestPrimeFactor;", "        long i = 2;\n        while (i * i <= n)\
    \ {\n            if (n % i == 0) {\n                n /= i;\n            } else\
    \ {\n                i++;\n            }\n        }\n        return n;", "   \
    \     long largest = 0;\n        for (long i = 2; i <= n; i++) {\n           \
    \ if (n % i == 0) {\n                largest = i;\n                n /= i;\n \
    \               i = 1;\n            }\n        }\n        return largest;", " \
    \       long largest = 0;\n        for (long i = 2; i <= n; i++) {\n         \
    \   if (n % i == 0) {\n                largest = i;\n                n /= i;\n\
    \                i = 1;\n            }\n        }\n        return largest;", " \
    \       long largestPrimeFactor = 1;\n        for (long i = 2; i <= n; i++) {\n\
    \            if (n % i == 0) {\n                largestPrimeFactor = i;\n    \
    \            n /= i;\n                i--;\n            }\n        }\n       \
    \ return largestPrimeFactor;", "        long largest = 1;\n        for (long i\
    \ = 2; i <= n; i++) {\n            if (n % i == 0) {\n                largest\
    \ = i;\n                n /= i;\n                i--;\n            }\n       \
    \ }\n        return largest;", "        long i = 2;\n        while (i * i <= n)\
    \ {\n            if (n % i == 0) {\n                n /= i;\n            } else\
    \ {\n                i++;\n            }\n        }\n        return n;", "   \
    \     long largest = 0;\n        for (long i = 2; i <= n; i++) {\n           \
    \ if (n % i == 0) {\n                largest = i;\n                n /= i;\n \
    \               i = 1;\n            }\n        }\n        return largest;", " \
    \       long largestPrimeFactor = 0;\n        for (long i = 2; i <= n; i++) {\n\
    \            if (n % i == 0) {\n                largestPrimeFactor = i;\n    \
    \            n /= i;\n                i--;\n            }\n        }\n       \
    \ return largestPrimeFactor;", "        long largest = 1;\n        for (long i\
    \ = 2; i <= n; i++) {\n            if (n % i == 0) {\n                largest\
    \ = i;\n                n /= i;\n                i--;\n            }\n       \
    \ }\n        return largest;", "        long largest = 0;\n        for (long i\
    \ = 2; i <= n; i++) {\n            if (n % i == 0) {\n                largest\
    \ = i;\n                n /= i;\n                i--;\n            }\n       \
    \ }\n        return largest;", "        long largest = 0;\n        for (long i\
    \ = 2; i <= n; i++) {\n            if (n % i == 0) {\n                largest\
    \ = i;\n                n /= i;\n                i--;\n            }\n       \
    \ }\n        return largest;", "        long largestPrimeFactor = 1;\n       \
    \ for (long i = 2; i <= n; i++) {\n            if (n % i == 0) {\n           \
    \     largestPrimeFactor = i;\n                n /= i;\n                i--;\n\
    \            }\n        }\n        return largestPrimeFactor;", "        for (long\
    \ i = 2; i <= n; i++) {\n            if (n % i == 0) {\n                n /= i;\n\
    \                i--;\n            }\n        }\n        return n;", "       \
    \ long largestPrimeFactor = 0;\n        long i = 2;\n        while (i <= n) {\n\
    \            if (n % i == 0) {\n                largestPrimeFactor = i;\n    \
    \            n /= i;\n            } else {\n                i++;\n           \
    \ }\n        }\n        return largestPrimeFactor;", "        long largestPrimeFactor\
    \ = 0;\n        for (long i = 2; i <= n; i++) {\n            if (n % i == 0) {\n\
    \                largestPrimeFactor = i;\n                n /= i;\n          \
    \      i--;\n            }\n        }\n        return largestPrimeFactor;", " \
    \       long largest = 0;\n        for (long i = 2; i <= n; i++) {\n         \
    \   if (n % i == 0) {\n                largest = i;\n                n /= i;\n\
    \                i = 1;\n            }\n        }\n        return largest;", " \
    \       long largestPrimeFactor = 1;\n        for (long i = 2; i <= n; i++) {\n\
    \            if (n % i == 0) {\n                largestPrimeFactor = i;\n    \
    \            n /= i;\n                i--;\n            }\n        }\n       \
    \ return largestPrimeFactor;", "        long largest = 0;\n        for (long i\
    \ = 2; i <= n; i++) {\n            if (n % i == 0) {\n                largest\
    \ = i;\n                n /= i;\n                i = 1;\n            }\n     \
    \   }\n        return largest;", "        long largest = 0;\n        for (long\
    \ i = 2; i <= n; i++) {\n            if (n % i == 0) {\n                if (isPrime(i))\
    \ {\n                    largest = i;\n                }\n            }\n    \
    \    }\n        return largest;", "        long largestPrimeFactor = 0;\n    \
    \    long i = 2;\n        while (i <= n) {\n            if (n % i == 0) {\n  \
    \              largestPrimeFactor = i;\n                n /= i;\n            }\
    \ else {\n                i++;\n            }\n        }\n        return largestPrimeFactor;",
  "        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n          \
    \  if (n % i == 0) {\n                largest = i;\n                n /= i;\n\
    \                i = 1;\n            }\n        }\n        return largest;", " \
    \       long i = 2;\n        while (i * i <= n) {\n            if (n % i == 0)\
    \ {\n                n /= i;\n            } else {\n                i++;\n   \
    \         }\n        }\n        return n;", "        long largestPrimeFactor =\
    \ 0;\n        for (long i = 2; i <= n; i++) {\n            if (n % i == 0) {\n\
    \                largestPrimeFactor = i;\n                n /= i;\n          \
    \      i--;\n            }\n        }\n        return largestPrimeFactor;", " \
    \       // TODO: Implement this method.\n        return 0;", "        // TODO:\
    \ Implement this method.\n        return 0;", "        long largestPrimeFactor\
    \ = 0;\n        for (long i = 2; i <= n; i++) {\n            if (n % i == 0) {\n\
    \                largestPrimeFactor = i;\n                n /= i;\n          \
    \      i--;\n            }\n        }\n        return largestPrimeFactor;", " \
    \       long largest = 1;\n        for (long i = 2; i <= n; i++) {\n         \
    \   if (n % i == 0) {\n                largest = i;\n                n /= i;\n\
    \                i = 1;\n            }\n        }\n        return largest;", " \
    \       long largest = 0;\n        for (long i = 2; i <= n; i++) {\n         \
    \   if (n % i == 0) {\n                largest = i;\n                n /= i;\n\
    \                i--;\n            }\n        }\n        return largest;", " \
    \       long largest = 0;\n        for (long i = 2; i <= n; i++) {\n         \
    \   if (n % i == 0) {\n                largest = i;\n                n /= i;\n\
    \                i--;\n            }\n        }\n        return largest;", " \
    \       long largestPrimeFactor = 1;\n        for (long i = 2; i <= n; i++) {\n\
    \            if (n % i == 0) {\n                largestPrimeFactor = i;\n    \
    \            n /= i;\n                i--;\n            }\n        }\n       \
    \ return largestPrimeFactor;", "        for (long i = 2; i <= n; i++) {\n    \
    \        if (n % i == 0) {\n                return largestPrimeFactor(n / i);\n\
    \            }\n        }\n        return n;", "        long largest = 0;\n  \
    \      for (long i = 2; i <= n; i++) {\n            if (n % i == 0) {\n      \
    \          largest = i;\n                n /= i;\n                i--;\n     \
    \       }\n        }\n        return largest;", "        long largestPrimeFactor\
    \ = 0;\n        for (long i = 2; i <= n; i++) {\n            if (n % i == 0) {\n\
    \                largestPrimeFactor = i;\n                n /= i;\n          \
    \      i = 1;\n            }\n        }\n        return largestPrimeFactor;",
  "        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n          \
    \  if (n % i == 0) {\n                largest = i;\n                n /= i;\n\
    \                i = 1;\n            }\n        }\n        return largest;", " \
    \       long largestPrimeFactor = 1;\n        for (long i = 2; i <= n; i++) {\n\
    \            if (n % i == 0) {\n                largestPrimeFactor = i;\n    \
    \            n /= i;\n                i--;\n            }\n        }\n       \
    \ return largestPrimeFactor;", "        long largestPrimeFactor = 0;\n       \
    \ for (long i = 2; i <= n; i++) {\n            if (n % i == 0) {\n           \
    \     largestPrimeFactor = i;\n                n /= i;\n                i = 1;\n\
    \            }\n        }\n        return largestPrimeFactor;", "        long\
    \ largestPrimeFactor = -1;\n        long i = 2;\n        while (i <= n) {\n  \
    \          if (n % i == 0) {\n                largestPrimeFactor = i;\n      \
    \          n /= i;\n            } else {\n                i++;\n            }\n\
    \        }\n        return largestPrimeFactor;", "        long largestPrimeFactor\
    \ = 1;\n        for (long i = 2; i <= n; i++) {\n            if (n % i == 0) {\n\
    \                largestPrimeFactor = i;\n                n /= i;\n          \
    \      i--;\n            }\n        }\n        return largestPrimeFactor;", " \
    \       long largest = 1;\n        for (long i = 2; i <= n; i++) {\n         \
    \   if (n % i == 0) {\n                largest = i;\n                n /= i;\n\
    \                i--;\n            }\n        }\n        return largest;", " \
    \       long largestPrimeFactor = 1;\n        for (long i = 2; i <= n; i++) {\n\
    \            if (n % i == 0) {\n                largestPrimeFactor = i;\n    \
    \            n /= i;\n                i = 1;\n            }\n        }\n     \
    \   return largestPrimeFactor;", "        long largest = 0;\n        for (long\
    \ i = 2; i <= n; i++) {\n            if (n % i == 0) {\n                largest\
    \ = i;\n                n /= i;\n                i--;\n            }\n       \
    \ }\n        return largest;", "        long largest = 1;\n        for (long i\
    \ = 2; i <= n; i++) {\n            if (n % i == 0) {\n                largest\
    \ = i;\n                n /= i;\n                i--;\n            }\n       \
    \ }\n        return largest;", "        long largest = 1;\n        for (long i\
    \ = 2; i <= n; i++) {\n            if (n % i == 0) {\n                largest\
    \ = i;\n                n /= i;\n                i--;\n            }\n       \
    \ }\n        return largest;", "        long largest = 0;\n        for (long i\
    \ = 2; i <= n; i++) {\n            if (n % i == 0) {\n                largest\
    \ = i;\n                n /= i;\n                i = 1;\n            }\n     \
    \   }\n        return largest;", "        long largestPrimeFactor = 0;\n     \
    \   for (long i = 2; i <= n; i++) {\n            if (n % i == 0) {\n         \
    \       largestPrimeFactor = i;\n                n /= i;\n                i--;\n\
    \            }\n        }\n        return largestPrimeFactor;", "        long\
    \ largestPrimeFactor = 0;\n        for (long i = 2; i <= n; i++) {\n         \
    \   if (n % i == 0) {\n                largestPrimeFactor = i;\n             \
    \   n /= i;\n                i = 1;\n            }\n        }\n        return\
    \ largestPrimeFactor;", "        long largest = 0;\n        for (long i = 2; i\
    \ <= n; i++) {\n            if (n % i == 0) {\n                largest = i;\n\
    \                n /= i;\n                i--;\n            }\n        }\n   \
    \     return largest;", "        long largest = 1;\n        for (long i = 2; i\
    \ * i <= n; i++) {\n            if (n % i == 0) {\n                largest = i;\n\
    \                while (n % i == 0) {\n                    n /= i;\n         \
    \       }\n            }\n        }\n        if (n > 1) {\n            largest\
    \ = n;\n        }\n        return largest;", "        long largest = 1;\n    \
    \    for (long i = 2; i <= n; i++) {\n            if (n % i == 0) {\n        \
    \        largest = i;\n                n /= i;\n                i = 1;\n     \
    \       }\n        }\n        return largest;", "        long largest = 1;\n \
    \       for (long i = 2; i <= n; i++) {\n            if (n % i == 0) {\n     \
    \           largest = i;\n                n /= i;\n                i = 1;\n  \
    \          }\n        }\n        return largest;", "        long max = 1;\n  \
    \      for (long i = 2; i <= n; i++) {\n            if (n % i == 0) {\n      \
    \          max = i;\n                n /= i;\n                i--;\n         \
    \   }\n        }\n        return max;", "        long largestPrimeFactor = 1;\n\
    \        long i = 2;\n        while (i <= n) {\n            if (n % i == 0) {\n\
    \                largestPrimeFactor = i;\n                n /= i;\n          \
    \  } else {\n                i++;\n            }\n        }\n        return largestPrimeFactor;",
  "        long i = 2;\n        while (i * i <= n) {\n            if (n % i == 0)\
    \ {\n                n /= i;\n            } else {\n                i++;\n   \
    \         }\n        }\n        return n;", "        long largest = 0;\n     \
    \   for (long i = 2; i <= n; i++) {\n            if (n % i == 0) {\n         \
    \       largest = i;\n                n /= i;\n                i = 1;\n      \
    \      }\n        }\n        return largest;", "        long largest = 0;\n  \
    \      for (long i = 2; i <= n; i++) {\n            if (n % i == 0) {\n      \
    \          largest = i;\n                n /= i;\n                i--;\n     \
    \       }\n        }\n        return largest;", "        long largestPrimeFactor\
    \ = 0;\n        for (long i = 2; i <= n; i++) {\n            if (n % i == 0) {\n\
    \                largestPrimeFactor = i;\n                n /= i;\n          \
    \      i--;\n            }\n        }\n        return largestPrimeFactor;", " \
    \       long largest = 1;\n        for (long i = 2; i <= n; i++) {\n         \
    \   if (n % i == 0) {\n                largest = i;\n                n /= i;\n\
    \                i = 1;\n            }\n        }\n        return largest;", " \
    \       long i = 2;\n        while (i * i <= n) {\n            if (n % i == 0)\
    \ {\n                n /= i;\n            } else {\n                i++;\n   \
    \         }\n        }\n        return n;", "        long largest = 1;\n     \
    \   for (long i = 2; i <= n; i++) {\n            if (n % i == 0) {\n         \
    \       largest = i;\n                n /= i;\n                i--;\n        \
    \    }\n        }\n        return largest;", "        long largestPrimeFactor\
    \ = 1;\n        long i = 2;\n        while (i <= n) {\n            if (n % i ==\
    \ 0) {\n                largestPrimeFactor = i;\n                n /= i;\n   \
    \         } else {\n                i++;\n            }\n        }\n        return\
    \ largestPrimeFactor;", "        for (long i = 2; i <= n; i++) {\n           \
    \ if (n % i == 0) {\n                return largestPrimeFactor(n / i);\n     \
    \       }\n        }\n        return n;", "        long largest = 1;\n       \
    \ for (long i = 2; i <= n; i++) {\n            if (n % i == 0) {\n           \
    \     largest = i;\n                n /= i;\n                i--;\n          \
    \  }\n        }\n        return largest;", "        long i = 2;\n        while\
    \ (i * i <= n) {\n            if (n % i == 0) {\n                n /= i;\n   \
    \         } else {\n                i++;\n            }\n        }\n        return\
    \ n;", "        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                n\
    \ /= i;\n                i = 1;\n            }\n        }\n        return largest;",
  "        long i = 2;\n        while (i * i <= n) {\n            if (n % i == 0)\
    \ {\n                n /= i;\n            } else {\n                i++;\n   \
    \         }\n        }\n        return n;", "        long largestPrimeFactor =\
    \ 0;\n        long i = 2;\n        while (i <= n) {\n            if (n % i ==\
    \ 0) {\n                largestPrimeFactor = i;\n                n /= i;\n   \
    \         } else {\n                i++;\n            }\n        }\n        return\
    \ largestPrimeFactor;", "        long largest = 0;\n        for (long i = 2; i\
    \ <= n; i++) {\n            if (n % i == 0) {\n                largest = i;\n\
    \                n /= i;\n                i--;\n            }\n        }\n   \
    \     return largest;", "        long largest = 0;\n        for (long i = 2; i\
    \ <= n; i++) {\n            if (n % i == 0) {\n                largest = i;\n\
    \                n /= i;\n                i--;\n            }\n        }\n   \
    \     return largest;", "        long largest = 0;\n        for (long i = 2; i\
    \ <= n; i++) {\n            if (n % i == 0) {\n                largest = i;\n\
    \                n /= i;\n                i = 1;\n            }\n        }\n \
    \       return largest;", "        long largestPrimeFactor = 0;\n        for (long\
    \ i = 2; i <= n; i++) {\n            if (n % i == 0) {\n                largestPrimeFactor\
    \ = i;\n                n /= i;\n                i--;\n            }\n       \
    \ }\n        return largestPrimeFactor;", "        long largest = 0;\n       \
    \ for (long i = 2; i <= n; i++) {\n            if (n % i == 0) {\n           \
    \     largest = i;\n                n /= i;\n                i = 1;\n        \
    \    }\n        }\n        return largest;", "        long largestPrimeFactor\
    \ = 0;\n        long factor = 2;\n        while (n > 1) {\n            while (n\
    \ % factor == 0) {\n                largestPrimeFactor = factor;\n           \
    \     n /= factor;\n            }\n            factor++;\n        }\n        return\
    \ largestPrimeFactor;", "        long largest = 0;\n        for (long i = 2; i\
    \ <= n; i++) {\n            if (n % i == 0) {\n                largest = i;\n\
    \                n /= i;\n                i--;\n            }\n        }\n   \
    \     return largest;", "        long largest = 0;\n        for (long i = 2; i\
    \ <= n; i++) {\n            if (n % i == 0) {\n                largest = i;\n\
    \                n /= i;\n                i = 1;\n            }\n        }\n \
    \       return largest;", "        long largestPrimeFactor = 1;\n        for (long\
    \ i = 2; i <= n; i++) {\n            if (n % i == 0) {\n                largestPrimeFactor\
    \ = i;\n                n /= i;\n                i--;\n            }\n       \
    \ }\n        return largestPrimeFactor;", "        long largestPrimeFactor = 1;\n\
    \        long i = 2;\n        while (i <= n) {\n            if (n % i == 0) {\n\
    \                largestPrimeFactor = i;\n                n /= i;\n          \
    \  } else {\n                i++;\n            }\n        }\n        return largestPrimeFactor;",
  "        long max = 0;\n        for (long i = 2; i <= n; i++) {\n            if\
    \ (n % i == 0) {\n                max = i;\n                n /= i;\n        \
    \        i--;\n            }\n        }\n        return max;", "        long largest\
    \ = 0;\n        for (long i = 2; i <= n; i++) {\n            if (n % i == 0) {\n\
    \                largest = i;\n                n /= i;\n                i = 1;\n\
    \            }\n        }\n        return largest;", "        long largest = 1;\n\
    \        for (long i = 2; i <= n; i++) {\n            if (n % i == 0) {\n    \
    \            largest = i;\n                n /= i;\n                i = 1;\n \
    \           }\n        }\n        return largest;", "        long largest = 0;\n\
    \        for (long i = 2; i <= n; i++) {\n            if (n % i == 0) {\n    \
    \            largest = i;\n                n /= i;\n                i = 1;\n \
    \           }\n        }\n        return largest;", "        long largest = 1;\n\
    \        for (long i = 2; i <= n; i++) {\n            if (n % i == 0) {\n    \
    \            n /= i;\n                largest = i;\n            }\n        }\n\
    \        return largest;", "        long largest = 1;\n        for (long i = 2;\
    \ i <= n; i++) {\n            if (n % i == 0) {\n                largest = i;\n\
    \                n /= i;\n                i--;\n            }\n        }\n   \
    \     return largest;", "        long largest = 0;\n        for (long i = 2; i\
    \ <= n; i++) {\n            if (n % i == 0) {\n                largest = i;\n\
    \                n /= i;\n                i--;\n            }\n        }\n   \
    \     return largest;", "        long largest = 1;\n        for (long i = 2; i\
    \ <= n; i++) {\n            if (n % i == 0) {\n                largest = i;\n\
    \                n /= i;\n                i--;\n            }\n        }\n   \
    \     return largest;", "        long largest = 0;\n        for (long i = 2; i\
    \ <= n; i++) {\n            if (n % i == 0) {\n                largest = i;\n\
    \                n /= i;\n                i = 1;\n            }\n        }\n \
    \       return largest;", "        long largestPrimeFactor = 0;\n        for (long\
    \ i = 2; i <= n; i++) {\n            if (n % i == 0) {\n                n /= i;\n\
    \                largestPrimeFactor = i;\n            }\n        }\n        return\
    \ largestPrimeFactor;", "        long largest = 1;\n        for (long i = 2; i\
    \ <= n; i++) {\n            if (n % i == 0) {\n                largest = i;\n\
    \                n /= i;\n                i--;\n            }\n        }\n   \
    \     return largest;", "        long max = 0;\n        for (long i = 2; i <=\
    \ n; i++) {\n            if (n % i == 0) {\n                max = i;\n       \
    \         n /= i;\n                i--;\n            }\n        }\n        return\
    \ max;", "        long max = 0;\n        for (long i = 2; i <= n; i++) {\n   \
    \         if (n % i == 0) {\n                max = i;\n                n /= i;\n\
    \                i--;\n            }\n        }\n        return max;", "     \
    \   long largestPrimeFactor = 1;\n        for (long i = 2; i <= n; i++) {\n  \
    \          if (n % i == 0) {\n                largestPrimeFactor = i;\n      \
    \          n /= i;\n                i--;\n            }\n        }\n        return\
    \ largestPrimeFactor;", "        long largest = 0;\n        for (long i = 2; i\
    \ <= n; i++) {\n            if (n % i == 0) {\n                largest = i;\n\
    \                n /= i;\n                i--;\n            }\n        }\n   \
    \     return largest;", '        return 0l;', "        long largest = 1;\n   \
    \     for (long i = 2; i * i <= n; i++) {\n            if (n % i == 0) {\n   \
    \             largest = i;\n                while (n % i == 0) {\n           \
    \         n /= i;\n                }\n            }\n        }\n        if (n\
    \ > 1) {\n            largest = n;\n        }\n        return largest;", "   \
    \     long largestPrimeFactor = 0;\n        for (long i = 2; i <= n; i++) {\n\
    \            if (n % i == 0) {\n                largestPrimeFactor = i;\n    \
    \            n /= i;\n                i--;\n            }\n        }\n       \
    \ return largestPrimeFactor;", "        long largestPrimeFactor = 1;\n       \
    \ for (long i = 2; i <= n; i++) {\n            if (n % i == 0) {\n           \
    \     largestPrimeFactor = i;\n                n /= i;\n                i--;\n\
    \            }\n        }\n        return largestPrimeFactor;", "        long[]\
    \ factors = new long[2];\n        int i = 0;\n        while (n % 2 == 0) {\n \
    \           factors[i++] = 2;\n            n /= 2;\n        }\n        for (long\
    \ j = 3; j <= Math.sqrt(n); j += 2) {\n            while (n % j == 0) {\n    \
    \            factors[i++] = j;\n                n /= j;\n            }\n     \
    \   }\n        if (n > 2) {\n            factors[i] = n;\n        }\n        return\
    \ factors[1];", "        long largest = 1;\n        for (long i = 2; i * i <=\
    \ n; i++) {\n            if (n % i == 0) {\n                largest = i;\n   \
    \             while (n % i == 0) {\n                    n /= i;\n            \
    \    }\n            }\n        }\n        if (n > 1) {\n            largest =\
    \ n;\n        }\n        return largest;", "        long largest = 0;\n      \
    \  for (long i = 2; i <= n; i++) {\n            if (n % i == 0) {\n          \
    \      largest = i;\n                n /= i;\n                i--;\n         \
    \   }\n        }\n        return largest;", "        // >>> largestPrimeFactor((13195l))\n\
    \        // (29l)\n        // >>> largestPrimeFactor((2048l))\n        // (2l)\n\
    \        // >>> largestPrimeFactor((600851475143l))\n        // (6857l)\n    \
    \    // >>> largestPrimeFactor((600851475143l))\n        // (6857l)\n        //\
    \ >>> largestPrimeFactor((600851475143l))\n        // (6857l)\n        // >>>\
    \ largestPrimeFactor((600851475143l))\n        // (6857l)\n        // >>> largestPrimeFactor((600851475143l))\n\
    \        // (6857l)\n        // >>> largestPrimeFactor((600851475143l))\n    \
    \    // (6857l)\n        // >>> largestPrimeFactor((600851475143l))\n        //\
    \ (6857l)\n        // >>> largestPrimeFactor((600851475143l))\n        // (6857l)\n\
    \        // >>> largestPrimeFactor((600851475143l))\n        // (6857l)\n    \
    \    // >>> largestPrimeFactor((600851475143l))\n        // (6857l)\n        //\
    \ >>> largestPrimeFactor((600851475143l))\n        // (6857l)\n        // >>>\
    \ largestPrimeFactor((600851475143l))\n        // (6857l)\n        // >>> largestPrimeFactor((600851475143l))\n\
    \        // (6857l)\n        // >>> largestPrimeFactor((600851475143l))\n    \
    \    // (6857l)\n        // >>> largestPrimeFactor((600851475143l))\n        //\
    \ (6857l)\n        // >>> largestPrimeFactor((600851475143l))\n        // (6857l)\n\
    \        // >>> largestPrimeFactor((600851475143l))\n        // (6857l)\n    \
    \    // >>> largestPrimeFactor((600851475143l))\n        // (6857l)\n        //\
    \ >>> largestPrimeFactor((600851475143l))\n        // (6857l)\n        // >>>\
    \ largestPrimeFactor((600851475143l))\n        // (6857l)\n        // >>> largestPrimeFactor((600851475143l",
  "        long i = 2;\n        while (i * i <= n) {\n            if (n % i == 0)\
    \ {\n                n /= i;\n            } else {\n                i++;\n   \
    \         }\n        }\n        return n;", "        long largest = 0;\n     \
    \   for (long i = 2; i <= n; i++) {\n            if (n % i == 0) {\n         \
    \       largest = i;\n                n /= i;\n                i--;\n        \
    \    }\n        }\n        return largest;", "        long largestPrimeFactor\
    \ = 1;\n        for (long i = 2; i <= n; i++) {\n            if (n % i == 0) {\n\
    \                largestPrimeFactor = i;\n                n /= i;\n          \
    \      i--;\n            }\n        }\n        return largestPrimeFactor;", " \
    \       long largest = 0;\n        for (long i = 2; i <= n; i++) {\n         \
    \   if (n % i == 0) {\n                largest = i;\n                n /= i;\n\
    \                i = 1;\n            }\n        }\n        return largest;", " \
    \       long largest = 0;\n        for (long i = 2; i <= n; i++) {\n         \
    \   if (n % i == 0) {\n                largest = i;\n                n /= i;\n\
    \                i--;\n            }\n        }\n        return largest;", " \
    \       long largestPrimeFactor = 1;\n        for (long i = 2; i <= n; i++) {\n\
    \            if (n % i == 0) {\n                largestPrimeFactor = i;\n    \
    \            n /= i;\n                i = 1;\n            }\n        }\n     \
    \   return largestPrimeFactor;", "        long largest = 1;\n        for (long\
    \ i = 2; i <= n; i++) {\n            if (n % i == 0) {\n                largest\
    \ = i;\n                n /= i;\n                i--;\n            }\n       \
    \ }\n        return largest;", "        long largestPrimeFactor = 0;\n       \
    \ for (long i = 2; i <= n; i++) {\n            if (n % i == 0) {\n           \
    \     largestPrimeFactor = i;\n                n /= i;\n                i--;\n\
    \            }\n        }\n        return largestPrimeFactor;", "        long\
    \ largestPrimeFactor = 1;\n        for (long i = 2; i <= n; i++) {\n         \
    \   if (n % i == 0) {\n                largestPrimeFactor = i;\n             \
    \   n /= i;\n                i--;\n            }\n        }\n        return largestPrimeFactor;",
  "        long largestPrimeFactor = 0;\n        long i = 2;\n        while (i <=\
    \ n) {\n            if (n % i == 0) {\n                largestPrimeFactor = i;\n\
    \                n /= i;\n            } else {\n                i++;\n       \
    \     }\n        }\n        return largestPrimeFactor;", "        long largestPrimeFactor\
    \ = 1;\n        for (long i = 2; i <= n; i++) {\n            if (n % i == 0) {\n\
    \                largestPrimeFactor = i;\n                n /= i;\n          \
    \      i--;\n            }\n        }\n        return largestPrimeFactor;", " \
    \       long largest = 0;\n        for (long i = 2; i <= n; i++) {\n         \
    \   if (n % i == 0) {\n                largest = i;\n                n /= i;\n\
    \                i = 1;\n            }\n        }\n        return largest;", " \
    \       long largestPrimeFactor = 1;\n        for (long i = 2; i <= n; i++) {\n\
    \            if (n % i == 0) {\n                largestPrimeFactor = i;\n    \
    \            n /= i;\n                i--;\n            }\n        }\n       \
    \ return largestPrimeFactor;", "        long largest = 1;\n        for (long i\
    \ = 2; i <= n; i++) {\n            if (n % i == 0) {\n                largest\
    \ = i;\n                n /= i;\n                i = 1;\n            }\n     \
    \   }\n        return largest;", "        long largest = 0;\n        for (long\
    \ i = 2; i <= n; i++) {\n            if (n % i == 0) {\n                largest\
    \ = i;\n                n /= i;\n                i = 1;\n            }\n     \
    \   }\n        return largest;"]
stop_tokens:
- "\n    }\n"
