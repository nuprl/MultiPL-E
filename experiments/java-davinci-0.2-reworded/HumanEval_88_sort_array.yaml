name: HumanEval_88_sort_array
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // Given an array array list of non-negative integers, return\
  \ a cojava of the given array array list after sorting,\n    // you will sort the\
  \ given array array list in ascending order if the sum( first index value, last\
  \ index value) is odd,\n    // or sort it in descending order if the sum( first\
  \ index value, last index value) is even.\n    // Note:\n    // * don't change the\
  \ given array array list.\n    // Examples:\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList())))\n\
  \    // (new ArrayList<Long>(Arrays.asList()))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
  \    // (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new\
  \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
  \ (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l,\
  \ (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
  \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
  \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
  \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n"
tests: "    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
  \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
  \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
  \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
  \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
  \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
  \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
  \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
  \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
  \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
  \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
  \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
  \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
  \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
  \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
  \    }\n\n}\n"
completions: ["        ArrayList<Long> result = new ArrayList<Long>();\n        if\
    \ (array.size() == 0) {\n            return result;\n        }\n        if (array.size()\
    \ == 1) {\n            result.add(array.get(0));\n            return result;\n\
    \        }\n        if (array.size() == 2) {\n            if ((array.get(0) +\
    \ array.get(1)) % 2 == 0) {\n                result.add(array.get(1));\n     \
    \           result.add(array.get(0));\n                return result;\n      \
    \      } else {\n                result.add(array.get(0));\n                result.add(array.get(1));\n\
    \                return result;\n            }\n        }\n        ArrayList<Long>\
    \ odd = new ArrayList<Long>();\n        ArrayList<Long> even = new ArrayList<Long>();\n\
    \        for (int i = 0; i < array.size(); i++) {\n            if (array.get(i)\
    \ % 2 == 0) {\n                even.add(array.get(i));\n            } else {\n\
    \                odd.add(array.get(i));\n            }\n        }\n        Collections.sort(odd);\n\
    \        Collections.sort(even);\n        if ((array.get(0) + array.get(array.size()\
    \ - 1)) % 2 == 0) {\n            Collections.reverse(even);\n        }\n     \
    \   odd.addAll(even);\n        return odd;", "        ArrayList<Long> result =\
    \ new ArrayList<Long>();\n        if (array.size() == 0) {\n            return\
    \ result;\n        }\n        if (array.size() == 1) {\n            result.add(array.get(0));\n\
    \            return result;\n        }\n        long first = array.get(0);\n \
    \       long last = array.get(array.size() - 1);\n        long sum = first + last;\n\
    \        if (sum % 2 == 0) {\n            Collections.sort(array, Collections.reverseOrder());\n\
    \        } else {\n            Collections.sort(array);\n        }\n        return\
    \ array;", "        ArrayList<Long> sorted = new ArrayList<Long>();\n        ArrayList<Long>\
    \ odd = new ArrayList<Long>();\n        ArrayList<Long> even = new ArrayList<Long>();\n\
    \        for (Long i : array) {\n            if (i % 2 == 0) {\n             \
    \   even.add(i);\n            } else {\n                odd.add(i);\n        \
    \    }\n        }\n        Collections.sort(odd);\n        Collections.sort(even);\n\
    \        Collections.reverse(even);\n        sorted.addAll(odd);\n        sorted.addAll(even);\n\
    \        return sorted;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (array.size() == 0) {\n            return result;\n        }\n   \
    \     if (array.size() == 1) {\n            result.add(array.get(0));\n      \
    \      return result;\n        }\n        if (array.size() == 2) {\n         \
    \   if ((array.get(0) + array.get(1)) % 2 == 0) {\n                result.add(array.get(1));\n\
    \                result.add(array.get(0));\n                return result;\n \
    \           } else {\n                result.add(array.get(0));\n            \
    \    result.add(array.get(1));\n                return result;\n            }\n\
    \        }\n        if ((array.get(0) + array.get(array.size() - 1)) % 2 == 0)\
    \ {\n            for (int i = 0; i < array.size(); i++) {\n                result.add(array.get(array.size()\
    \ - 1 - i));\n            }\n            return result;\n        } else {\n  \
    \          for (int i = 0; i < array.size(); i++) {\n                result.add(array.get(i));\n\
    \            }\n            return result;\n        }", "        ArrayList<Long>\
    \ sortedArray = new ArrayList<Long>();\n        if (array.size() == 0) {\n   \
    \         return array;\n        }\n        if (array.size() == 1) {\n       \
    \     return array;\n        }\n        if (array.size() == 2) {\n           \
    \ if (array.get(0) > array.get(1)) {\n                sortedArray.add(array.get(1));\n\
    \                sortedArray.add(array.get(0));\n                return sortedArray;\n\
    \            }\n            return array;\n        }\n        if ((array.get(0)\
    \ + array.get(array.size() - 1)) % 2 == 0) {\n            Collections.sort(array,\
    \ Collections.reverseOrder());\n            return array;\n        }\n       \
    \ Collections.sort(array);\n        return array;", "        if (array.size()\
    \ == 0) {\n            return array;\n        }\n        if (array.size() == 1)\
    \ {\n            return array;\n        }\n        if (array.size() == 2) {\n\
    \            if (array.get(0) > array.get(1)) {\n                Long temp = array.get(0);\n\
    \                array.set(0, array.get(1));\n                array.set(1, temp);\n\
    \            }\n            return array;\n        }\n        if (array.size()\
    \ == 3) {\n            if (array.get(0) > array.get(1)) {\n                Long\
    \ temp = array.get(0);\n                array.set(0, array.get(1));\n        \
    \        array.set(1, temp);\n            }\n            if (array.get(1) > array.get(2))\
    \ {\n                Long temp = array.get(1);\n                array.set(1, array.get(2));\n\
    \                array.set(2, temp);\n            }\n            if (array.get(0)\
    \ > array.get(1)) {\n                Long temp = array.get(0);\n             \
    \   array.set(0, array.get(1));\n                array.set(1, temp);\n       \
    \     }\n            return array;\n        }\n        if (array.size() == 4)\
    \ {\n            if (array.get(0) > array.get(1)) {\n                Long temp\
    \ = array.get(0);\n                array.set(0, array.get(1));\n             \
    \   array.set(1, temp);\n            }\n            if (array.get(2) > array.get(3))\
    \ {\n                Long temp = array.get(2);\n                array.set(2, array.get(3));\n\
    \                array.set(3, temp);\n            }\n            if (array.get(0)\
    \ > array.get(2)) {\n                Long temp = array.get(0);\n             \
    \   array.set(0, array.get(2));\n                array.set(2, temp);\n       \
    \     }\n            if (array.get(1) > array.get(3)) {\n                Long\
    \ temp = array.get(1", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (array.size() == 0) {\n            return result;\n        }\n   \
    \     if (array.size() == 1) {\n            result.add(array.get(0));\n      \
    \      return result;\n        }\n        if (array.size() == 2) {\n         \
    \   result.add(array.get(0));\n            result.add(array.get(1));\n       \
    \     return result;\n        }\n        if (array.size() == 3) {\n          \
    \  result.add(array.get(0));\n            result.add(array.get(1));\n        \
    \    result.add(array.get(2));\n            return result;\n        }\n      \
    \  if (array.size() == 4) {\n            result.add(array.get(0));\n         \
    \   result.add(array.get(1));\n            result.add(array.get(2));\n       \
    \     result.add(array.get(3));\n            return result;\n        }\n     \
    \   if (array.size() == 5) {\n            result.add(array.get(0));\n        \
    \    result.add(array.get(1));\n            result.add(array.get(2));\n      \
    \      result.add(array.get(3));\n            result.add(array.get(4));\n    \
    \        return result;\n        }\n        if (array.size() == 6) {\n       \
    \     result.add(array.get(0));\n            result.add(array.get(1));\n     \
    \       result.add(array.get(2));\n            result.add(array.get(3));\n   \
    \         result.add(array.get(4));\n            result.add(array.get(5));\n \
    \           return result;\n        }\n        if (array.size() == 7) {\n    \
    \        result.add(array.get(0));\n            result.add(array.get(1));\n  \
    \          result.add(array.get(2));\n            result.add(array.get(3));\n\
    \            result.add(array.get(4));\n            result.add(array.get(5));\n\
    \            result.add(array.get(6));\n            return result;\n        }",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        if (array.size()\
    \ == 0) {\n            return result;\n        }\n        if (array.size() ==\
    \ 1) {\n            result.add(array.get(0));\n            return result;\n  \
    \      }\n        if (array.size() == 2) {\n            if ((array.get(0) + array.get(1))\
    \ % 2 == 0) {\n                result.add(array.get(1));\n                result.add(array.get(0));\n\
    \                return result;\n            } else {\n                result.add(array.get(0));\n\
    \                result.add(array.get(1));\n                return result;\n \
    \           }\n        }\n        if ((array.get(0) + array.get(array.size() -\
    \ 1)) % 2 == 0) {\n            for (int i = 0; i < array.size(); i++) {\n    \
    \            if (i % 2 == 0) {\n                    result.add(array.get(array.size()\
    \ - 1 - i / 2));\n                } else {\n                    result.add(array.get(i\
    \ / 2));\n                }\n            }\n        } else {\n            for\
    \ (int i = 0; i < array.size(); i++) {\n                if (i % 2 == 0) {\n  \
    \                  result.add(array.get(i / 2));\n                } else {\n \
    \                   result.add(array.get(array.size() - 1 - i / 2));\n       \
    \         }\n            }\n        }\n        return result;", "        ArrayList<Long>\
    \ sorted = new ArrayList<Long>();\n        ArrayList<Long> odd = new ArrayList<Long>();\n\
    \        ArrayList<Long> even = new ArrayList<Long>();\n        for (Long i :\
    \ array) {\n            if (i % 2 == 0) {\n                even.add(i);\n    \
    \        } else {\n                odd.add(i);\n            }\n        }\n   \
    \     Collections.sort(odd);\n        Collections.sort(even);\n        Collections.reverse(even);\n\
    \        sorted.addAll(odd);\n        sorted.addAll(even);\n        return sorted;",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        if (array.size()\
    \ == 0) {\n            return result;\n        }\n        if (array.size() ==\
    \ 1) {\n            result.add(array.get(0));\n            return result;\n  \
    \      }\n        if (array.size() == 2) {\n            if ((array.get(0) + array.get(1))\
    \ % 2 == 0) {\n                result.add(array.get(1));\n                result.add(array.get(0));\n\
    \                return result;\n            } else {\n                result.add(array.get(0));\n\
    \                result.add(array.get(1));\n                return result;\n \
    \           }\n        }\n        if ((array.get(0) + array.get(array.size() -\
    \ 1)) % 2 == 0) {\n            for (int i = 0; i < array.size(); i++) {\n    \
    \            if (i % 2 == 0) {\n                    result.add(array.get(array.size()\
    \ - 1 - i / 2));\n                } else {\n                    result.add(array.get(i\
    \ / 2));\n                }\n            }\n        } else {\n            for\
    \ (int i = 0; i < array.size(); i++) {\n                if (i % 2 == 0) {\n  \
    \                  result.add(array.get(i / 2));\n                } else {\n \
    \                   result.add(array.get(array.size() - 1 - i / 2));\n       \
    \         }\n            }\n        }\n        return result;", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        ArrayList<Long> odd = new ArrayList<Long>();\n\
    \        ArrayList<Long> even = new ArrayList<Long>();\n        for (Long i :\
    \ array) {\n            if (i % 2 == 0) {\n                even.add(i);\n    \
    \        } else {\n                odd.add(i);\n            }\n        }\n   \
    \     Collections.sort(odd);\n        Collections.sort(even);\n        Collections.reverse(even);\n\
    \        for (Long i : odd) {\n            result.add(i);\n        }\n       \
    \ for (Long i : even) {\n            result.add(i);\n        }\n        return\
    \ result;", "        long sum = array.get(0) + array.get(array.size() - 1);\n\
    \        if (sum % 2 == 0) {\n            Collections.sort(array, Collections.reverseOrder());\n\
    \        } else {\n            Collections.sort(array);\n        }\n        return\
    \ array;", '        return array;', "        ArrayList<Long> sorted = new ArrayList<Long>();\n\
    \        ArrayList<Long> odd = new ArrayList<Long>();\n        ArrayList<Long>\
    \ even = new ArrayList<Long>();\n        for (int i = 0; i < array.size(); i++)\
    \ {\n            if (array.get(i) % 2 == 0) {\n                even.add(array.get(i));\n\
    \            } else {\n                odd.add(array.get(i));\n            }\n\
    \        }\n        Collections.sort(odd);\n        Collections.sort(even);\n\
    \        Collections.reverse(even);\n        for (int i = 0; i < odd.size(); i++)\
    \ {\n            sorted.add(odd.get(i));\n        }\n        for (int i = 0; i\
    \ < even.size(); i++) {\n            sorted.add(even.get(i));\n        }\n   \
    \     return sorted;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        ArrayList<Long> odd = new ArrayList<Long>();\n        ArrayList<Long>\
    \ even = new ArrayList<Long>();\n        for (Long i : array) {\n            if\
    \ (i % 2 == 0) {\n                even.add(i);\n            } else {\n       \
    \         odd.add(i);\n            }\n        }\n        Collections.sort(odd);\n\
    \        Collections.sort(even);\n        Collections.reverse(even);\n       \
    \ result.addAll(odd);\n        result.addAll(even);\n        return result;",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        if (array.size()\
    \ == 0) {\n            return result;\n        }\n        if (array.size() ==\
    \ 1) {\n            result.add(array.get(0));\n            return result;\n  \
    \      }\n        if (array.size() == 2) {\n            if ((array.get(0) + array.get(1))\
    \ % 2 == 0) {\n                result.add(array.get(1));\n                result.add(array.get(0));\n\
    \                return result;\n            } else {\n                result.add(array.get(0));\n\
    \                result.add(array.get(1));\n                return result;\n \
    \           }\n        }\n        if ((array.get(0) + array.get(array.size() -\
    \ 1)) % 2 == 0) {\n            for (int i = array.size() - 1; i >= 0; i--) {\n\
    \                result.add(array.get(i));\n            }\n            return\
    \ result;\n        } else {\n            for (int i = 0; i < array.size(); i++)\
    \ {\n                result.add(array.get(i));\n            }\n            return\
    \ result;\n        }", '        return array;', "        if (array.size() == 0)\
    \ {\n            return array;\n        }\n        if (array.size() == 1) {\n\
    \            return array;\n        }\n        if (array.size() == 2) {\n    \
    \        if (array.get(0) > array.get(1)) {\n                Long temp = array.get(0);\n\
    \                array.set(0, array.get(1));\n                array.set(1, temp);\n\
    \            }\n            return array;\n        }\n        if (array.size()\
    \ == 3) {\n            if (array.get(0) > array.get(1)) {\n                Long\
    \ temp = array.get(0);\n                array.set(0, array.get(1));\n        \
    \        array.set(1, temp);\n            }\n            if (array.get(1) > array.get(2))\
    \ {\n                Long temp = array.get(1);\n                array.set(1, array.get(2));\n\
    \                array.set(2, temp);\n            }\n            if (array.get(0)\
    \ > array.get(1)) {\n                Long temp = array.get(0);\n             \
    \   array.set(0, array.get(1));\n                array.set(1, temp);\n       \
    \     }\n            return array;\n        }\n        if (array.size() == 4)\
    \ {\n            if (array.get(0) > array.get(1)) {\n                Long temp\
    \ = array.get(0);\n                array.set(0, array.get(1));\n             \
    \   array.set(1, temp);\n            }\n            if (array.get(2) > array.get(3))\
    \ {\n                Long temp = array.get(2);\n                array.set(2, array.get(3));\n\
    \                array.set(3, temp);\n            }\n            if (array.get(0)\
    \ > array.get(2)) {\n                Long temp = array.get(0);\n             \
    \   array.set(0, array.get(2));\n                array.set(2, temp);\n       \
    \     }\n            if (array.get(1) > array.get(3)) {\n                Long\
    \ temp = array.get(1", "        ArrayList<Long> sorted = new ArrayList<Long>();\n\
    \        return sorted;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        for (int i = 0; i < array.size(); i++) {\n            result.add(array.get(i));\n\
    \        }\n        if (result.size() > 0) {\n            if ((result.get(0) +\
    \ result.get(result.size() - 1)) % 2 == 0) {\n                Collections.sort(result,\
    \ Collections.reverseOrder());\n            } else {\n                Collections.sort(result);\n\
    \            }\n        }\n        return result;"]
stop_tokens:
- "\n    }\n"
