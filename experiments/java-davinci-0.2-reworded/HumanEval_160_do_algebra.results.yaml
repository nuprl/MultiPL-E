language: java
name: HumanEval_160_do_algebra
results:
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        //\
    \ Write your code here\n        // To print results to the standard output you\
    \ can use System.out.println()\n        // Example: System.out.println(\"Hello\
    \ world!\");\n        long result = operand.get(0);\n        for (int i = 0; i\
    \ < op.size(); i++) {\n            if (op.get(i).equals(\"+\")) {\n          \
    \      result += operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    -\")) {\n                result -= operand.get(i + 1);\n            } else if\
    \ (op.get(i).equals(\"*\")) {\n                result *= operand.get(i + 1);\n\
    \            } else if (op.get(i).equals(\"//\")) {\n                result /=\
    \ operand.get(i + 1);\n            } else if (op.get(i).equals(\"**\")) {\n  \
    \              result = (long) Math.pow(result, operand.get(i + 1));\n       \
    \     }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4j6g3oel.java:49)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        //\
    \ Write your code here\n        // To print results to the standard output you\
    \ can use System.out.println()\n        // Example: System.out.println(\"Hello\
    \ world!\");\n        long result = operand.get(0);\n        for (int i = 0; i\
    \ < op.size(); i++) {\n            if (op.get(i).equals(\"+\")) {\n          \
    \      result += operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    -\")) {\n                result -= operand.get(i + 1);\n            } else if\
    \ (op.get(i).equals(\"*\")) {\n                result *= operand.get(i + 1);\n\
    \            } else if (op.get(i).equals(\"//\")) {\n                result /=\
    \ operand.get(i + 1);\n            } else if (op.get(i).equals(\"**\")) {\n  \
    \              result = (long) Math.pow(result, operand.get(i + 1));\n       \
    \     }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpy95jls0n.java:49)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        //\
    \ Write your code here\n        // To print results to the standard output you\
    \ can use System.out.println()\n        // Example: System.out.println(\"Hello\
    \ world!\");\n        return 0;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\"\
    , (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpddbqlpaj.java:34)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        //\
    \ Write your code here\n        // To print results to the standard output you\
    \ can use System.out.println()\n        // Example: System.out.println(\"Hello\
    \ world!\");\n        long result = operand.get(0);\n        for (int i = 0; i\
    \ < op.size(); i++) {\n            if (op.get(i).equals(\"+\")) {\n          \
    \      result += operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    -\")) {\n                result -= operand.get(i + 1);\n            } else if\
    \ (op.get(i).equals(\"*\")) {\n                result *= operand.get(i + 1);\n\
    \            } else if (op.get(i).equals(\"//\")) {\n                result /=\
    \ operand.get(i + 1);\n            } else if (op.get(i).equals(\"**\")) {\n  \
    \              result = (long) Math.pow(result, operand.get(i + 1));\n       \
    \     }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphw4dedj4.java:49)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = operand.get(0);\n        for (int i = 0; i < op.size(); i++) {\n  \
    \          if (op.get(i).equals(\"+\")) {\n                result += operand.get(i\
    \ + 1);\n            } else if (op.get(i).equals(\"-\")) {\n                result\
    \ -= operand.get(i + 1);\n            } else if (op.get(i).equals(\"*\")) {\n\
    \                result *= operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    //\")) {\n                result /= operand.get(i + 1);\n            } else if\
    \ (op.get(i).equals(\"**\")) {\n                result = (long) Math.pow(result,\
    \ operand.get(i + 1));\n            }\n        }\n        return result;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfk7xd19y.java:46)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        //\
    \ Write your code here\n        // To print results to the standard output you\
    \ can use System.out.println()\n        // Example: System.out.println(\"Hello\
    \ world!\");\n        long result = operand.get(0);\n        for (int i = 0; i\
    \ < op.size(); i++) {\n            if (op.get(i).equals(\"+\")) {\n          \
    \      result += operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    -\")) {\n                result -= operand.get(i + 1);\n            } else if\
    \ (op.get(i).equals(\"*\")) {\n                result *= operand.get(i + 1);\n\
    \            } else if (op.get(i).equals(\"//\")) {\n                result /=\
    \ operand.get(i + 1);\n            } else if (op.get(i).equals(\"**\")) {\n  \
    \              result = (long) Math.pow(result, operand.get(i + 1));\n       \
    \     }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgq5eyi76.java:49)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = operand.get(0);\n        for (int i = 0; i < op.size(); i++) {\n  \
    \          switch (op.get(i)) {\n                case \"+\":\n               \
    \     result += operand.get(i + 1);\n                    break;\n            \
    \    case \"-\":\n                    result -= operand.get(i + 1);\n        \
    \            break;\n                case \"*\":\n                    result *=\
    \ operand.get(i + 1);\n                    break;\n                case \"//\"\
    :\n                    result /= operand.get(i + 1);\n                    break;\n\
    \                case \"**\":\n                    result = (long) Math.pow(result,\
    \ operand.get(i + 1));\n                    break;\n            }\n        }\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"\
    *\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1n8cevt_.java:52)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = operand.get(0);\n        for (int i = 0; i < op.size(); i++) {\n  \
    \          switch (op.get(i)) {\n                case \"+\":\n               \
    \     result += operand.get(i + 1);\n                    break;\n            \
    \    case \"-\":\n                    result -= operand.get(i + 1);\n        \
    \            break;\n                case \"*\":\n                    result *=\
    \ operand.get(i + 1);\n                    break;\n                case \"//\"\
    :\n                    result /= operand.get(i + 1);\n                    break;\n\
    \                case \"**\":\n                    result = (long) Math.pow(result,\
    \ operand.get(i + 1));\n                    break;\n            }\n        }\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"\
    *\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9n42cr2j.java:52)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        //\
    \ Write your code here\n        // To print results to the standard output you\
    \ can use System.out.println()\n        // Example: System.out.println(\"Hello\
    \ world!\");\n        long result = operand.get(0);\n        for (int i = 0; i\
    \ < op.size(); i++) {\n            if (op.get(i).equals(\"+\")) {\n          \
    \      result += operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    -\")) {\n                result -= operand.get(i + 1);\n            } else if\
    \ (op.get(i).equals(\"*\")) {\n                result *= operand.get(i + 1);\n\
    \            } else if (op.get(i).equals(\"//\")) {\n                result /=\
    \ operand.get(i + 1);\n            } else if (op.get(i).equals(\"**\")) {\n  \
    \              result = (long) Math.pow(result, operand.get(i + 1));\n       \
    \     }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgprxd1_u.java:49)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        //\
    \ Write your code here\n        // To print results to the standard output you\
    \ can use System.out.println()\n        // Example: System.out.println(\"Hello\
    \ world!\");\n        long result = operand.get(0);\n        for (int i = 0; i\
    \ < op.size(); i++) {\n            switch (op.get(i)) {\n                case\
    \ \"+\":\n                    result += operand.get(i + 1);\n                \
    \    break;\n                case \"-\":\n                    result -= operand.get(i\
    \ + 1);\n                    break;\n                case \"*\":\n           \
    \         result *= operand.get(i + 1);\n                    break;\n        \
    \        case \"//\":\n                    result /= operand.get(i + 1);\n   \
    \                 break;\n                case \"**\":\n                    result\
    \ = (long) Math.pow(result, operand.get(i + 1));\n                    break;\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgafeb79k.java:55)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        //\
    \ Write your code here\n        // To print results to the standard output you\
    \ can use System.out.println()\n        // Example: System.out.println(\"Hello\
    \ world!\");\n        long result = operand.get(0);\n        for (int i = 0; i\
    \ < op.size(); i++) {\n            if (op.get(i).equals(\"+\")) {\n          \
    \      result += operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    -\")) {\n                result -= operand.get(i + 1);\n            } else if\
    \ (op.get(i).equals(\"*\")) {\n                result *= operand.get(i + 1);\n\
    \            } else if (op.get(i).equals(\"//\")) {\n                result /=\
    \ operand.get(i + 1);\n            } else if (op.get(i).equals(\"**\")) {\n  \
    \              result = (long) Math.pow(result, operand.get(i + 1));\n       \
    \     }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpi4w5c9i2.java:49)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        //\
    \ Write your code here\n        // To print results to the standard output you\
    \ can use System.out.println()\n        // Example: System.out.println(\"Hello\
    \ world!\");\n        long result = operand.get(0);\n        for (int i = 0; i\
    \ < op.size(); i++) {\n            if (op.get(i).equals(\"+\")) {\n          \
    \      result += operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    -\")) {\n                result -= operand.get(i + 1);\n            } else if\
    \ (op.get(i).equals(\"*\")) {\n                result *= operand.get(i + 1);\n\
    \            } else if (op.get(i).equals(\"//\")) {\n                result /=\
    \ operand.get(i + 1);\n            } else if (op.get(i).equals(\"**\")) {\n  \
    \              result = (long) Math.pow(result, operand.get(i + 1));\n       \
    \     }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9fa088kg.java:49)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = operand.get(0);\n        for (int i = 0; i < op.size(); i++) {\n  \
    \          switch (op.get(i)) {\n                case \"+\":\n               \
    \     result += operand.get(i + 1);\n                    break;\n            \
    \    case \"-\":\n                    result -= operand.get(i + 1);\n        \
    \            break;\n                case \"*\":\n                    result *=\
    \ operand.get(i + 1);\n                    break;\n                case \"//\"\
    :\n                    result /= operand.get(i + 1);\n                    break;\n\
    \                case \"**\":\n                    result = (long) Math.pow(result,\
    \ operand.get(i + 1));\n                    break;\n            }\n        }\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"\
    *\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxuz10xw7.java:52)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        //\
    \ Write your code here\n        // To print results to the standard output you\
    \ can use System.out.println()\n        // Example: System.out.println(\"Hello\
    \ world!\");\n        long result = operand.get(0);\n        for (int i = 0; i\
    \ < op.size(); i++) {\n            if (op.get(i).equals(\"+\")) {\n          \
    \      result += operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    -\")) {\n                result -= operand.get(i + 1);\n            } else if\
    \ (op.get(i).equals(\"*\")) {\n                result *= operand.get(i + 1);\n\
    \            } else if (op.get(i).equals(\"//\")) {\n                result /=\
    \ operand.get(i + 1);\n            } else if (op.get(i).equals(\"**\")) {\n  \
    \              result = (long) Math.pow(result, operand.get(i + 1));\n       \
    \     }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7cogcf2l.java:49)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        //\
    \ Write your code here\n        // To print results to the standard output you\
    \ can use System.out.println()\n        // Example: System.out.println(\"Hello\
    \ world!\");\n        long result = operand.get(0);\n        for (int i = 0; i\
    \ < op.size(); i++) {\n            if (op.get(i).equals(\"+\")) {\n          \
    \      result += operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    -\")) {\n                result -= operand.get(i + 1);\n            } else if\
    \ (op.get(i).equals(\"*\")) {\n                result *= operand.get(i + 1);\n\
    \            } else if (op.get(i).equals(\"//\")) {\n                result /=\
    \ operand.get(i + 1);\n            } else if (op.get(i).equals(\"**\")) {\n  \
    \              result = (long) Math.pow(result, operand.get(i + 1));\n       \
    \     }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpr_jk53kx.java:49)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        //\
    \ Write your code here\n        // To print results to the standard output you\
    \ can use System.out.println()\n        // Example: System.out.println(\"Hello\
    \ world!\");\n        long result = operand.get(0);\n        for (int i = 0; i\
    \ < op.size(); i++) {\n            if (op.get(i).equals(\"+\")) {\n          \
    \      result += operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    -\")) {\n                result -= operand.get(i + 1);\n            } else if\
    \ (op.get(i).equals(\"*\")) {\n                result *= operand.get(i + 1);\n\
    \            } else if (op.get(i).equals(\"//\")) {\n                result /=\
    \ operand.get(i + 1);\n            } else if (op.get(i).equals(\"**\")) {\n  \
    \              result = (long) Math.pow(result, operand.get(i + 1));\n       \
    \     }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvo0_sn8z.java:49)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        //\
    \ Write your code here\n        // To print results to the standard output you\
    \ can use System.out.println()\n        // Example: System.out.println(\"Hello\
    \ world!\");\n        long result = operand.get(0);\n        for (int i = 0; i\
    \ < op.size(); i++) {\n            switch (op.get(i)) {\n                case\
    \ \"+\":\n                    result += operand.get(i + 1);\n                \
    \    break;\n                case \"-\":\n                    result -= operand.get(i\
    \ + 1);\n                    break;\n                case \"*\":\n           \
    \         result *= operand.get(i + 1);\n                    break;\n        \
    \        case \"//\":\n                    result /= operand.get(i + 1);\n   \
    \                 break;\n                case \"**\":\n                    result\
    \ = (long) Math.pow(result, operand.get(i + 1));\n                    break;\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpn1f0usqr.java:55)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        //\
    \ Write your code here\n        // To print results to the standard output you\
    \ can use System.out.println()\n        // Example: System.out.println(\"Hello\
    \ world!\");\n        long result = operand.get(0);\n        for (int i = 0; i\
    \ < op.size(); i++) {\n            if (op.get(i).equals(\"+\")) {\n          \
    \      result += operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    -\")) {\n                result -= operand.get(i + 1);\n            } else if\
    \ (op.get(i).equals(\"*\")) {\n                result *= operand.get(i + 1);\n\
    \            } else if (op.get(i).equals(\"//\")) {\n                result /=\
    \ operand.get(i + 1);\n            } else if (op.get(i).equals(\"**\")) {\n  \
    \              result = (long) Math.pow(result, operand.get(i + 1));\n       \
    \     }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsdq8wg7h.java:49)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = operand.get(0);\n        for (int i = 0; i < op.size(); i++) {\n  \
    \          if (op.get(i).equals(\"+\")) {\n                result += operand.get(i\
    \ + 1);\n            } else if (op.get(i).equals(\"-\")) {\n                result\
    \ -= operand.get(i + 1);\n            } else if (op.get(i).equals(\"*\")) {\n\
    \                result *= operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    //\")) {\n                result /= operand.get(i + 1);\n            } else if\
    \ (op.get(i).equals(\"**\")) {\n                result = (long) Math.pow(result,\
    \ operand.get(i + 1));\n            }\n        }\n        return result;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphpxurzdm.java:46)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        //\
    \ Write your code here\n        // To print results to the standard output you\
    \ can use System.out.println()\n        // Example: System.out.println(\"Hello\
    \ world!\");\n        long result = operand.get(0);\n        for (int i = 0; i\
    \ < op.size(); i++) {\n            if (op.get(i).equals(\"+\")) {\n          \
    \      result += operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    -\")) {\n                result -= operand.get(i + 1);\n            } else if\
    \ (op.get(i).equals(\"*\")) {\n                result *= operand.get(i + 1);\n\
    \            } else if (op.get(i).equals(\"//\")) {\n                result /=\
    \ operand.get(i + 1);\n            } else if (op.get(i).equals(\"**\")) {\n  \
    \              result = (long) Math.pow(result, operand.get(i + 1));\n       \
    \     }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpprvi2_bh.java:49)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = operand.get(0);\n        for (int i = 0; i < op.size(); i++) {\n  \
    \          if (op.get(i).equals(\"+\")) {\n                result += operand.get(i\
    \ + 1);\n            } else if (op.get(i).equals(\"-\")) {\n                result\
    \ -= operand.get(i + 1);\n            } else if (op.get(i).equals(\"*\")) {\n\
    \                result *= operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    //\")) {\n                result /= operand.get(i + 1);\n            } else if\
    \ (op.get(i).equals(\"**\")) {\n                result = (long) Math.pow(result,\
    \ operand.get(i + 1));\n            }\n        }\n        return result;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphpxurzdm.java:46)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        //\
    \ Write your code here\n        // To print results to the standard output you\
    \ can use System.out.println()\n        // Example: System.out.println(\"Hello\
    \ world!\");\n        long result = operand.get(0);\n        for (int i = 0; i\
    \ < op.size(); i++) {\n            if (op.get(i).equals(\"+\")) {\n          \
    \      result += operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    -\")) {\n                result -= operand.get(i + 1);\n            } else if\
    \ (op.get(i).equals(\"*\")) {\n                result *= operand.get(i + 1);\n\
    \            } else if (op.get(i).equals(\"//\")) {\n                result /=\
    \ operand.get(i + 1);\n            } else if (op.get(i).equals(\"**\")) {\n  \
    \              result = (long) Math.pow(result, operand.get(i + 1));\n       \
    \     }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpprvi2_bh.java:49)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = operand.get(0);\n        for (int i = 0; i < op.size(); i++) {\n  \
    \          if (op.get(i).equals(\"+\")) {\n                result += operand.get(i\
    \ + 1);\n            } else if (op.get(i).equals(\"-\")) {\n                result\
    \ -= operand.get(i + 1);\n            } else if (op.get(i).equals(\"*\")) {\n\
    \                result *= operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    //\")) {\n                result /= operand.get(i + 1);\n            } else if\
    \ (op.get(i).equals(\"**\")) {\n                result = (long) Math.pow(result,\
    \ operand.get(i + 1));\n            }\n        }\n        return result;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphpxurzdm.java:46)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = operand.get(0);\n        for (int i = 0; i < op.size(); i++) {\n  \
    \          if (op.get(i).equals(\"+\")) {\n                result += operand.get(i\
    \ + 1);\n            } else if (op.get(i).equals(\"-\")) {\n                result\
    \ -= operand.get(i + 1);\n            } else if (op.get(i).equals(\"*\")) {\n\
    \                result *= operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    //\")) {\n                result /= operand.get(i + 1);\n            } else if\
    \ (op.get(i).equals(\"**\")) {\n                result = (long) Math.pow(result,\
    \ operand.get(i + 1));\n            }\n        }\n        return result;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphpxurzdm.java:46)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        //\
    \ Write your code here\n        // To print results to the standard output you\
    \ can use System.out.println()\n        // Example: System.out.println(\"Hello\
    \ world!\");\n        long result = operand.get(0);\n        for (int i = 0; i\
    \ < op.size(); i++) {\n            if (op.get(i).equals(\"+\")) {\n          \
    \      result += operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    -\")) {\n                result -= operand.get(i + 1);\n            } else if\
    \ (op.get(i).equals(\"*\")) {\n                result *= operand.get(i + 1);\n\
    \            } else if (op.get(i).equals(\"//\")) {\n                result /=\
    \ operand.get(i + 1);\n            } else if (op.get(i).equals(\"**\")) {\n  \
    \              result = (long) Math.pow(result, operand.get(i + 1));\n       \
    \     }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpprvi2_bh.java:49)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        //\
    \ Write your code here\n        // To print results to the standard output you\
    \ can use System.out.println()\n        // Example: System.out.println(\"Hello\
    \ world!\");\n        long result = operand.get(0);\n        for (int i = 0; i\
    \ < op.size(); i++) {\n            switch (op.get(i)) {\n                case\
    \ \"+\":\n                    result += operand.get(i + 1);\n                \
    \    break;\n                case \"-\":\n                    result -= operand.get(i\
    \ + 1);\n                    break;\n                case \"*\":\n           \
    \         result *= operand.get(i + 1);\n                    break;\n        \
    \        case \"//\":\n                    result /= operand.get(i + 1);\n   \
    \                 break;\n                case \"**\":\n                    result\
    \ = (long) Math.pow(result, operand.get(i + 1));\n                    break;\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpn1f0usqr.java:55)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        //\
    \ Write your code here\n        // To print results to the standard output you\
    \ can use System.out.println()\n        // Example: System.out.println(\"Hello\
    \ world!\");\n        long result = operand.get(0);\n        for (int i = 0; i\
    \ < op.size(); i++) {\n            if (op.get(i).equals(\"+\")) {\n          \
    \      result += operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    -\")) {\n                result -= operand.get(i + 1);\n            } else if\
    \ (op.get(i).equals(\"*\")) {\n                result *= operand.get(i + 1);\n\
    \            } else if (op.get(i).equals(\"//\")) {\n                result /=\
    \ operand.get(i + 1);\n            } else if (op.get(i).equals(\"**\")) {\n  \
    \              result = (long) Math.pow(result, operand.get(i + 1));\n       \
    \     }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpprvi2_bh.java:49)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        //\
    \ Write your code here\n        // To print results to the standard output you\
    \ can use System.out.println()\n        // Example: System.out.println(\"Hello\
    \ world!\");\n        long result = operand.get(0);\n        for (int i = 0; i\
    \ < op.size(); i++) {\n            if (op.get(i).equals(\"+\")) {\n          \
    \      result += operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    -\")) {\n                result -= operand.get(i + 1);\n            } else if\
    \ (op.get(i).equals(\"*\")) {\n                result *= operand.get(i + 1);\n\
    \            } else if (op.get(i).equals(\"//\")) {\n                result /=\
    \ operand.get(i + 1);\n            } else if (op.get(i).equals(\"**\")) {\n  \
    \              result = (long) Math.pow(result, operand.get(i + 1));\n       \
    \     }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpprvi2_bh.java:49)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        //\
    \ Write your code here\n        // To print results to the standard output you\
    \ can use System.out.println()\n        // Example: System.out.println(\"Hello\
    \ world!\");\n        long result = operand.get(0);\n        for (int i = 0; i\
    \ < op.size(); i++) {\n            if (op.get(i).equals(\"+\")) {\n          \
    \      result += operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    -\")) {\n                result -= operand.get(i + 1);\n            } else if\
    \ (op.get(i).equals(\"*\")) {\n                result *= operand.get(i + 1);\n\
    \            } else if (op.get(i).equals(\"//\")) {\n                result /=\
    \ operand.get(i + 1);\n            } else if (op.get(i).equals(\"**\")) {\n  \
    \              result = (long) Math.pow(result, operand.get(i + 1));\n       \
    \     }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpprvi2_bh.java:49)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        //\
    \ Write your code here\n        // To print results to the standard output you\
    \ can use System.out.println()\n        // Example: System.out.println(\"Hello\
    \ world!\");\n        long result = operand.get(0);\n        for (int i = 0; i\
    \ < op.size(); i++) {\n            if (op.get(i).equals(\"+\")) {\n          \
    \      result += operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    -\")) {\n                result -= operand.get(i + 1);\n            } else if\
    \ (op.get(i).equals(\"*\")) {\n                result *= operand.get(i + 1);\n\
    \            } else if (op.get(i).equals(\"//\")) {\n                result /=\
    \ operand.get(i + 1);\n            } else if (op.get(i).equals(\"**\")) {\n  \
    \              result = (long) Math.pow(result, operand.get(i + 1));\n       \
    \     }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpprvi2_bh.java:49)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        //\
    \ Write your code here\n        // To print results to the standard output you\
    \ can use System.out.println()\n        // Example: System.out.println(\"Hello\
    \ world!\");\n        long result = operand.get(0);\n        for (int i = 0; i\
    \ < op.size(); i++) {\n            if (op.get(i).equals(\"+\")) {\n          \
    \      result += operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    -\")) {\n                result -= operand.get(i + 1);\n            } else if\
    \ (op.get(i).equals(\"*\")) {\n                result *= operand.get(i + 1);\n\
    \            } else if (op.get(i).equals(\"//\")) {\n                result /=\
    \ operand.get(i + 1);\n            } else if (op.get(i).equals(\"**\")) {\n  \
    \              result = (long) Math.pow(result, operand.get(i + 1));\n       \
    \     }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpprvi2_bh.java:49)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        //\
    \ Write your code here\n        // To print results to the standard output you\
    \ can use System.out.println()\n        // Example: System.out.println(\"Hello\
    \ world!\");\n        long result = operand.get(0);\n        for (int i = 0; i\
    \ < op.size(); i++) {\n            if (op.get(i).equals(\"+\")) {\n          \
    \      result += operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    -\")) {\n                result -= operand.get(i + 1);\n            } else if\
    \ (op.get(i).equals(\"*\")) {\n                result *= operand.get(i + 1);\n\
    \            } else if (op.get(i).equals(\"//\")) {\n                result /=\
    \ operand.get(i + 1);\n            } else if (op.get(i).equals(\"**\")) {\n  \
    \              result = (long) Math.pow(result, operand.get(i + 1));\n       \
    \     }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpprvi2_bh.java:49)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        //\
    \ Write your code here\n        // To print results to the standard output you\
    \ can use System.out.println()\n        // Example: System.out.println(\"Hello\
    \ world!\");\n        long result = operand.get(0);\n        for (int i = 0; i\
    \ < op.size(); i++) {\n            switch (op.get(i)) {\n                case\
    \ \"+\":\n                    result += operand.get(i + 1);\n                \
    \    break;\n                case \"-\":\n                    result -= operand.get(i\
    \ + 1);\n                    break;\n                case \"*\":\n           \
    \         result *= operand.get(i + 1);\n                    break;\n        \
    \        case \"//\":\n                    result /= operand.get(i + 1);\n   \
    \                 break;\n                case \"**\":\n                    result\
    \ = (long) Math.pow(result, operand.get(i + 1));\n                    break;\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpn1f0usqr.java:55)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = operand.get(0);\n        for (int i = 0; i < op.size(); i++) {\n  \
    \          if (op.get(i).equals(\"+\")) {\n                result += operand.get(i\
    \ + 1);\n            } else if (op.get(i).equals(\"-\")) {\n                result\
    \ -= operand.get(i + 1);\n            } else if (op.get(i).equals(\"*\")) {\n\
    \                result *= operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    //\")) {\n                result /= operand.get(i + 1);\n            } else if\
    \ (op.get(i).equals(\"**\")) {\n                result = (long) Math.pow(result,\
    \ operand.get(i + 1));\n            }\n        }\n        return result;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphpxurzdm.java:46)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        //\
    \ Write your code here\n        // To print results to the standard output you\
    \ can use System.out.println()\n        // Example: System.out.println(\"Hello\
    \ world!\");\n        long result = operand.get(0);\n        for (int i = 0; i\
    \ < op.size(); i++) {\n            switch (op.get(i)) {\n                case\
    \ \"+\":\n                    result += operand.get(i + 1);\n                \
    \    break;\n                case \"-\":\n                    result -= operand.get(i\
    \ + 1);\n                    break;\n                case \"*\":\n           \
    \         result *= operand.get(i + 1);\n                    break;\n        \
    \        case \"//\":\n                    result /= operand.get(i + 1);\n   \
    \                 break;\n                case \"**\":\n                    result\
    \ = (long) Math.pow(result, operand.get(i + 1));\n                    break;\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpn1f0usqr.java:55)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        //\
    \ Write your code here\n        // To print results to the standard output you\
    \ can use System.out.println()\n        // Example: System.out.println(\"Hello\
    \ world!\");\n        long result = operand.get(0);\n        for (int i = 0; i\
    \ < op.size(); i++) {\n            if (op.get(i).equals(\"+\")) {\n          \
    \      result += operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    -\")) {\n                result -= operand.get(i + 1);\n            } else if\
    \ (op.get(i).equals(\"*\")) {\n                result *= operand.get(i + 1);\n\
    \            } else if (op.get(i).equals(\"//\")) {\n                result /=\
    \ operand.get(i + 1);\n            } else if (op.get(i).equals(\"**\")) {\n  \
    \              result = (long) Math.pow(result, operand.get(i + 1));\n       \
    \     }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpprvi2_bh.java:49)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        //\
    \ Write your code here\n        // To print results to the standard output you\
    \ can use System.out.println()\n        // Example: System.out.println(\"Hello\
    \ world!\");\n        long result = operand.get(0);\n        for (int i = 0; i\
    \ < op.size(); i++) {\n            if (op.get(i).equals(\"+\")) {\n          \
    \      result += operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    -\")) {\n                result -= operand.get(i + 1);\n            } else if\
    \ (op.get(i).equals(\"*\")) {\n                result *= operand.get(i + 1);\n\
    \            } else if (op.get(i).equals(\"//\")) {\n                result /=\
    \ operand.get(i + 1);\n            } else if (op.get(i).equals(\"**\")) {\n  \
    \              result = (long) Math.pow(result, operand.get(i + 1));\n       \
    \     }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpprvi2_bh.java:49)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        //\
    \ Write your code here\n        // To print results to the standard output you\
    \ can use System.out.println()\n        // Example: System.out.println(\"Hello\
    \ world!\");\n        long result = operand.get(0);\n        for (int i = 0; i\
    \ < op.size(); i++) {\n            if (op.get(i).equals(\"+\")) {\n          \
    \      result += operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    -\")) {\n                result -= operand.get(i + 1);\n            } else if\
    \ (op.get(i).equals(\"*\")) {\n                result *= operand.get(i + 1);\n\
    \            } else if (op.get(i).equals(\"//\")) {\n                result /=\
    \ operand.get(i + 1);\n            } else if (op.get(i).equals(\"**\")) {\n  \
    \              result = (long) Math.pow(result, operand.get(i + 1));\n       \
    \     }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpprvi2_bh.java:49)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = operand.get(0);\n        for (int i = 0; i < op.size(); i++) {\n  \
    \          if (op.get(i).equals(\"+\")) {\n                result += operand.get(i\
    \ + 1);\n            } else if (op.get(i).equals(\"-\")) {\n                result\
    \ -= operand.get(i + 1);\n            } else if (op.get(i).equals(\"*\")) {\n\
    \                result *= operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    //\")) {\n                result /= operand.get(i + 1);\n            } else if\
    \ (op.get(i).equals(\"**\")) {\n                result = (long) Math.pow(result,\
    \ operand.get(i + 1));\n            }\n        }\n        return result;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphpxurzdm.java:46)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        //\
    \ Write your code here\n        // To print results to the standard output you\
    \ can use System.out.println()\n        // Example: System.out.println(\"Hello\
    \ world!\");\n        long result = operand.get(0);\n        for (int i = 0; i\
    \ < op.size(); i++) {\n            if (op.get(i).equals(\"+\")) {\n          \
    \      result += operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    -\")) {\n                result -= operand.get(i + 1);\n            } else if\
    \ (op.get(i).equals(\"*\")) {\n                result *= operand.get(i + 1);\n\
    \            } else if (op.get(i).equals(\"//\")) {\n                result /=\
    \ operand.get(i + 1);\n            } else if (op.get(i).equals(\"**\")) {\n  \
    \              result = (long) Math.pow(result, operand.get(i + 1));\n       \
    \     }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpprvi2_bh.java:49)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        //\
    \ Write your code here\n        // To print results to the standard output you\
    \ can use System.out.println()\n        // Example: System.out.println(\"Hello\
    \ world!\");\n        long result = operand.get(0);\n        for (int i = 0; i\
    \ < op.size(); i++) {\n            if (op.get(i).equals(\"+\")) {\n          \
    \      result += operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    -\")) {\n                result -= operand.get(i + 1);\n            } else if\
    \ (op.get(i).equals(\"*\")) {\n                result *= operand.get(i + 1);\n\
    \            } else if (op.get(i).equals(\"//\")) {\n                result /=\
    \ operand.get(i + 1);\n            } else if (op.get(i).equals(\"**\")) {\n  \
    \              result = (long) Math.pow(result, operand.get(i + 1));\n       \
    \     }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpprvi2_bh.java:49)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        //\
    \ Write your code here\n        // To print results to the standard output you\
    \ can use System.out.println()\n        // Example: System.out.println(\"Hello\
    \ world!\");\n        long result = operand.get(0);\n        for (int i = 0; i\
    \ < op.size(); i++) {\n            switch (op.get(i)) {\n                case\
    \ \"+\":\n                    result += operand.get(i + 1);\n                \
    \    break;\n                case \"-\":\n                    result -= operand.get(i\
    \ + 1);\n                    break;\n                case \"*\":\n           \
    \         result *= operand.get(i + 1);\n                    break;\n        \
    \        case \"//\":\n                    result /= operand.get(i + 1);\n   \
    \                 break;\n                case \"**\":\n                    result\
    \ = (long) Math.pow(result, operand.get(i + 1));\n                    break;\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpn1f0usqr.java:55)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = operand.get(0);\n        for (int i = 0; i < op.size(); i++) {\n  \
    \          switch (op.get(i)) {\n                case \"+\":\n               \
    \     result += operand.get(i + 1);\n                    break;\n            \
    \    case \"-\":\n                    result -= operand.get(i + 1);\n        \
    \            break;\n                case \"*\":\n                    result *=\
    \ operand.get(i + 1);\n                    break;\n                case \"//\"\
    :\n                    result /= operand.get(i + 1);\n                    break;\n\
    \                case \"**\":\n                    result = (long) Math.pow(result,\
    \ operand.get(i + 1));\n                    break;\n            }\n        }\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"\
    *\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxuz10xw7.java:52)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        //\
    \ Write your code here\n        // To print results to the standard output you\
    \ can use System.out.println()\n        // Example: System.out.println(\"Hello\
    \ world!\");\n        long result = operand.get(0);\n        for (int i = 0; i\
    \ < op.size(); i++) {\n            if (op.get(i).equals(\"+\")) {\n          \
    \      result += operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    -\")) {\n                result -= operand.get(i + 1);\n            } else if\
    \ (op.get(i).equals(\"*\")) {\n                result *= operand.get(i + 1);\n\
    \            } else if (op.get(i).equals(\"//\")) {\n                result /=\
    \ operand.get(i + 1);\n            } else if (op.get(i).equals(\"**\")) {\n  \
    \              result = (long) Math.pow(result, operand.get(i + 1));\n       \
    \     }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpprvi2_bh.java:49)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        //\
    \ Write your code here\n        // To print results to the standard output you\
    \ can use System.out.println()\n        // Example: System.out.println(\"Hello\
    \ world!\");\n        long result = operand.get(0);\n        for (int i = 0; i\
    \ < op.size(); i++) {\n            if (op.get(i).equals(\"+\")) {\n          \
    \      result += operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    -\")) {\n                result -= operand.get(i + 1);\n            } else if\
    \ (op.get(i).equals(\"*\")) {\n                result *= operand.get(i + 1);\n\
    \            } else if (op.get(i).equals(\"//\")) {\n                result /=\
    \ operand.get(i + 1);\n            } else if (op.get(i).equals(\"**\")) {\n  \
    \              result = (long) Math.pow(result, operand.get(i + 1));\n       \
    \     }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpprvi2_bh.java:49)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        //\
    \ Write your code here\n        // To print results to the standard output you\
    \ can use System.out.println()\n        // Example: System.out.println(\"Hello\
    \ world!\");\n        long result = operand.get(0);\n        for (int i = 0; i\
    \ < op.size(); i++) {\n            if (op.get(i).equals(\"+\")) {\n          \
    \      result += operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    -\")) {\n                result -= operand.get(i + 1);\n            } else if\
    \ (op.get(i).equals(\"*\")) {\n                result *= operand.get(i + 1);\n\
    \            } else if (op.get(i).equals(\"//\")) {\n                result /=\
    \ operand.get(i + 1);\n            } else if (op.get(i).equals(\"**\")) {\n  \
    \              result = (long) Math.pow(result, operand.get(i + 1));\n       \
    \     }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpprvi2_bh.java:49)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        //\
    \ Write your code here\n        // To print results to the standard output you\
    \ can use System.out.println()\n        // Example: System.out.println(\"Hello\
    \ world!\");\n        long result = operand.get(0);\n        for (int i = 0; i\
    \ < op.size(); i++) {\n            if (op.get(i).equals(\"+\")) {\n          \
    \      result += operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    -\")) {\n                result -= operand.get(i + 1);\n            } else if\
    \ (op.get(i).equals(\"*\")) {\n                result *= operand.get(i + 1);\n\
    \            } else if (op.get(i).equals(\"//\")) {\n                result /=\
    \ operand.get(i + 1);\n            } else if (op.get(i).equals(\"**\")) {\n  \
    \              result = (long) Math.pow(result, operand.get(i + 1));\n       \
    \     }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpprvi2_bh.java:49)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        //\
    \ Write your code here\n        // To print results to the standard output you\
    \ can use System.out.println()\n        // Example: System.out.println(\"Hello\
    \ world!\");\n        long result = operand.get(0);\n        for (int i = 0; i\
    \ < op.size(); i++) {\n            if (op.get(i).equals(\"+\")) {\n          \
    \      result += operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    -\")) {\n                result -= operand.get(i + 1);\n            } else if\
    \ (op.get(i).equals(\"*\")) {\n                result *= operand.get(i + 1);\n\
    \            } else if (op.get(i).equals(\"//\")) {\n                result /=\
    \ operand.get(i + 1);\n            } else if (op.get(i).equals(\"**\")) {\n  \
    \              result = (long) Math.pow(result, operand.get(i + 1));\n       \
    \     }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpprvi2_bh.java:49)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        //\
    \ Write your code here\n        // To print results to the standard output you\
    \ can use System.out.println()\n        // Example: System.out.println(\"Hello\
    \ world!\");\n        long result = operand.get(0);\n        for (int i = 0; i\
    \ < op.size(); i++) {\n            if (op.get(i).equals(\"+\")) {\n          \
    \      result += operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    -\")) {\n                result -= operand.get(i + 1);\n            } else if\
    \ (op.get(i).equals(\"*\")) {\n                result *= operand.get(i + 1);\n\
    \            } else if (op.get(i).equals(\"//\")) {\n                result /=\
    \ operand.get(i + 1);\n            } else if (op.get(i).equals(\"**\")) {\n  \
    \              result = (long) Math.pow(result, operand.get(i + 1));\n       \
    \     }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpprvi2_bh.java:49)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        //\
    \ Write your code here\n        // To print results to the standard output you\
    \ can use System.out.println()\n        // Example: System.out.println(\"Hello\
    \ world!\");\n        long result = operand.get(0);\n        for (int i = 0; i\
    \ < op.size(); i++) {\n            if (op.get(i).equals(\"+\")) {\n          \
    \      result += operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    -\")) {\n                result -= operand.get(i + 1);\n            } else if\
    \ (op.get(i).equals(\"*\")) {\n                result *= operand.get(i + 1);\n\
    \            } else if (op.get(i).equals(\"//\")) {\n                result /=\
    \ operand.get(i + 1);\n            } else if (op.get(i).equals(\"**\")) {\n  \
    \              result = (long) Math.pow(result, operand.get(i + 1));\n       \
    \     }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpprvi2_bh.java:49)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        //\
    \ Write your code here\n        // To print results to the standard output you\
    \ can use System.out.println()\n        // Example: System.out.println(\"Hello\
    \ world!\");\n        long result = operand.get(0);\n        for (int i = 0; i\
    \ < op.size(); i++) {\n            if (op.get(i).equals(\"+\")) {\n          \
    \      result += operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    -\")) {\n                result -= operand.get(i + 1);\n            } else if\
    \ (op.get(i).equals(\"*\")) {\n                result *= operand.get(i + 1);\n\
    \            } else if (op.get(i).equals(\"//\")) {\n                result /=\
    \ operand.get(i + 1);\n            } else if (op.get(i).equals(\"**\")) {\n  \
    \              result = (long) Math.pow(result, operand.get(i + 1));\n       \
    \     }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpprvi2_bh.java:49)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = operand.get(0);\n        for (int i = 0; i < op.size(); i++) {\n  \
    \          String operator = op.get(i);\n            long operand1 = operand.get(i);\n\
    \            long operand2 = operand.get(i + 1);\n            switch (operator)\
    \ {\n                case \"+\":\n                    result = operand1 + operand2;\n\
    \                    break;\n                case \"-\":\n                   \
    \ result = operand1 - operand2;\n                    break;\n                case\
    \ \"*\":\n                    result = operand1 * operand2;\n                \
    \    break;\n                case \"//\":\n                    result = operand1\
    \ / operand2;\n                    break;\n                case \"**\":\n    \
    \                result = (long) Math.pow(operand1, operand2);\n             \
    \       break;\n            }\n        }\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpa1552dkq.java:54)\n"
  stdout: ''
  timestamp: 1659792415
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        //\
    \ Write your code here\n        // To print results to the standard output you\
    \ can use System.out.println()\n        // Example: System.out.println(\"Hello\
    \ world!\");\n        long result = operand.get(0);\n        for (int i = 0; i\
    \ < op.size(); i++) {\n            if (op.get(i).equals(\"+\")) {\n          \
    \      result += operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    -\")) {\n                result -= operand.get(i + 1);\n            } else if\
    \ (op.get(i).equals(\"*\")) {\n                result *= operand.get(i + 1);\n\
    \            } else if (op.get(i).equals(\"//\")) {\n                result /=\
    \ operand.get(i + 1);\n            } else if (op.get(i).equals(\"**\")) {\n  \
    \              result = (long) Math.pow(result, operand.get(i + 1));\n       \
    \     }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpprvi2_bh.java:49)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        //\
    \ Write your code here\n        // To print results to the standard output you\
    \ can use System.out.println()\n        // Example: System.out.println(\"Hello\
    \ world!\");\n        long result = operand.get(0);\n        for (int i = 0; i\
    \ < op.size(); i++) {\n            if (op.get(i).equals(\"+\")) {\n          \
    \      result += operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    -\")) {\n                result -= operand.get(i + 1);\n            } else if\
    \ (op.get(i).equals(\"*\")) {\n                result *= operand.get(i + 1);\n\
    \            } else if (op.get(i).equals(\"//\")) {\n                result /=\
    \ operand.get(i + 1);\n            } else if (op.get(i).equals(\"**\")) {\n  \
    \              result = (long) Math.pow(result, operand.get(i + 1));\n       \
    \     }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpprvi2_bh.java:49)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        //\
    \ Write your code here\n        // To print results to the standard output you\
    \ can use System.out.println()\n        // Example: System.out.println(\"Hello\
    \ world!\");\n        long result = operand.get(0);\n        for (int i = 0; i\
    \ < op.size(); i++) {\n            if (op.get(i).equals(\"+\")) {\n          \
    \      result += operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    -\")) {\n                result -= operand.get(i + 1);\n            } else if\
    \ (op.get(i).equals(\"*\")) {\n                result *= operand.get(i + 1);\n\
    \            } else if (op.get(i).equals(\"//\")) {\n                result /=\
    \ operand.get(i + 1);\n            } else if (op.get(i).equals(\"**\")) {\n  \
    \              result = (long) Math.pow(result, operand.get(i + 1));\n       \
    \     }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpprvi2_bh.java:49)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = operand.get(0);\n        for (int i = 0; i < op.size(); i++) {\n  \
    \          if (op.get(i).equals(\"+\")) {\n                result += operand.get(i\
    \ + 1);\n            } else if (op.get(i).equals(\"-\")) {\n                result\
    \ -= operand.get(i + 1);\n            } else if (op.get(i).equals(\"*\")) {\n\
    \                result *= operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    //\")) {\n                result /= operand.get(i + 1);\n            } else if\
    \ (op.get(i).equals(\"**\")) {\n                result = (long) Math.pow(result,\
    \ operand.get(i + 1));\n            }\n        }\n        return result;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphpxurzdm.java:46)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        //\
    \ Write your code here\n        // To print results to the standard output you\
    \ can use System.out.println()\n        // Example: System.out.println(\"Hello\
    \ world!\");\n        long result = operand.get(0);\n        for (int i = 0; i\
    \ < op.size(); i++) {\n            if (op.get(i).equals(\"+\")) {\n          \
    \      result += operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    -\")) {\n                result -= operand.get(i + 1);\n            } else if\
    \ (op.get(i).equals(\"*\")) {\n                result *= operand.get(i + 1);\n\
    \            } else if (op.get(i).equals(\"//\")) {\n                result /=\
    \ operand.get(i + 1);\n            } else if (op.get(i).equals(\"**\")) {\n  \
    \              result = (long) Math.pow(result, operand.get(i + 1));\n       \
    \     }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpprvi2_bh.java:49)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        //\
    \ Write your code here\n        // To print results to the standard output you\
    \ can use System.out.println()\n        // Example: System.out.println(\"Hello\
    \ world!\");\n        long result = operand.get(0);\n        for (int i = 0; i\
    \ < op.size(); i++) {\n            if (op.get(i).equals(\"+\")) {\n          \
    \      result += operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    -\")) {\n                result -= operand.get(i + 1);\n            } else if\
    \ (op.get(i).equals(\"*\")) {\n                result *= operand.get(i + 1);\n\
    \            } else if (op.get(i).equals(\"//\")) {\n                result /=\
    \ operand.get(i + 1);\n            } else if (op.get(i).equals(\"**\")) {\n  \
    \              result = (long) Math.pow(result, operand.get(i + 1));\n       \
    \     }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpprvi2_bh.java:49)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = operand.get(0);\n        for (int i = 0; i < op.size(); i++) {\n  \
    \          String currOp = op.get(i);\n            long currOperand = operand.get(i\
    \ + 1);\n            if (currOp.equals(\"+\")) {\n                result += currOperand;\n\
    \            } else if (currOp.equals(\"-\")) {\n                result -= currOperand;\n\
    \            } else if (currOp.equals(\"*\")) {\n                result *= currOperand;\n\
    \            } else if (currOp.equals(\"//\")) {\n                result /= currOperand;\n\
    \            } else if (currOp.equals(\"**\")) {\n                result = (long)\
    \ Math.pow(result, currOperand);\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphghx0s7y.java:48)\n"
  stdout: ''
  timestamp: 1659792415
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = operand.get(0);\n        for (int i = 0; i < op.size(); i++) {\n  \
    \          if (op.get(i).equals(\"+\")) {\n                result += operand.get(i\
    \ + 1);\n            } else if (op.get(i).equals(\"-\")) {\n                result\
    \ -= operand.get(i + 1);\n            } else if (op.get(i).equals(\"*\")) {\n\
    \                result *= operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    //\")) {\n                result /= operand.get(i + 1);\n            } else if\
    \ (op.get(i).equals(\"**\")) {\n                result = (long) Math.pow(result,\
    \ operand.get(i + 1));\n            }\n        }\n        return result;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphpxurzdm.java:46)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = operand.get(0);\n        for (int i = 0; i < op.size(); i++) {\n  \
    \          if (op.get(i).equals(\"+\")) {\n                result += operand.get(i\
    \ + 1);\n            } else if (op.get(i).equals(\"-\")) {\n                result\
    \ -= operand.get(i + 1);\n            } else if (op.get(i).equals(\"*\")) {\n\
    \                result *= operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    //\")) {\n                result /= operand.get(i + 1);\n            } else if\
    \ (op.get(i).equals(\"**\")) {\n                result = (long) Math.pow(result,\
    \ operand.get(i + 1));\n            }\n        }\n        return result;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphpxurzdm.java:46)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        //\
    \ Write your code here\n        // To print results to the standard output you\
    \ can use System.out.println()\n        // Example: System.out.println(\"Hello\
    \ world!\");\n        long result = operand.get(0);\n        for (int i = 0; i\
    \ < op.size(); i++) {\n            if (op.get(i).equals(\"+\")) {\n          \
    \      result += operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    -\")) {\n                result -= operand.get(i + 1);\n            } else if\
    \ (op.get(i).equals(\"*\")) {\n                result *= operand.get(i + 1);\n\
    \            } else if (op.get(i).equals(\"//\")) {\n                result /=\
    \ operand.get(i + 1);\n            } else if (op.get(i).equals(\"**\")) {\n  \
    \              result = (long) Math.pow(result, operand.get(i + 1));\n       \
    \     }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpprvi2_bh.java:49)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        //\
    \ Write your code here\n        // To print results to the standard output you\
    \ can use System.out.println()\n        // Example: System.out.println(\"Hello\
    \ world!\");\n        long result = operand.get(0);\n        for (int i = 0; i\
    \ < op.size(); i++) {\n            if (op.get(i).equals(\"+\")) {\n          \
    \      result += operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    -\")) {\n                result -= operand.get(i + 1);\n            } else if\
    \ (op.get(i).equals(\"*\")) {\n                result *= operand.get(i + 1);\n\
    \            } else if (op.get(i).equals(\"//\")) {\n                result /=\
    \ operand.get(i + 1);\n            } else if (op.get(i).equals(\"**\")) {\n  \
    \              result = (long) Math.pow(result, operand.get(i + 1));\n       \
    \     }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpprvi2_bh.java:49)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        //\
    \ Write your code here\n        // To print results to the standard output you\
    \ can use System.out.println()\n        // Example: System.out.println(\"Hello\
    \ world!\");\n        long result = operand.get(0);\n        for (int i = 0; i\
    \ < op.size(); i++) {\n            if (op.get(i).equals(\"+\")) {\n          \
    \      result += operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    -\")) {\n                result -= operand.get(i + 1);\n            } else if\
    \ (op.get(i).equals(\"*\")) {\n                result *= operand.get(i + 1);\n\
    \            } else if (op.get(i).equals(\"//\")) {\n                result /=\
    \ operand.get(i + 1);\n            } else if (op.get(i).equals(\"**\")) {\n  \
    \              result = (long) Math.pow(result, operand.get(i + 1));\n       \
    \     }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpprvi2_bh.java:49)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        //\
    \ Write your code here\n        // To print results to the standard output you\
    \ can use System.out.println()\n        // Example: System.out.println(\"Hello\
    \ world!\");\n        long result = operand.get(0);\n        for (int i = 0; i\
    \ < op.size(); i++) {\n            if (op.get(i).equals(\"+\")) {\n          \
    \      result += operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    -\")) {\n                result -= operand.get(i + 1);\n            } else if\
    \ (op.get(i).equals(\"*\")) {\n                result *= operand.get(i + 1);\n\
    \            } else if (op.get(i).equals(\"//\")) {\n                result /=\
    \ operand.get(i + 1);\n            } else if (op.get(i).equals(\"**\")) {\n  \
    \              result = (long) Math.pow(result, operand.get(i + 1));\n       \
    \     }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpprvi2_bh.java:49)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        //\
    \ Write your code here\n        // To print results to the standard output you\
    \ can use System.out.println()\n        // Example: System.out.println(\"Hello\
    \ world!\");\n        long result = operand.get(0);\n        for (int i = 0; i\
    \ < op.size(); i++) {\n            if (op.get(i).equals(\"+\")) {\n          \
    \      result += operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    -\")) {\n                result -= operand.get(i + 1);\n            } else if\
    \ (op.get(i).equals(\"*\")) {\n                result *= operand.get(i + 1);\n\
    \            } else if (op.get(i).equals(\"//\")) {\n                result /=\
    \ operand.get(i + 1);\n            } else if (op.get(i).equals(\"**\")) {\n  \
    \              result = (long) Math.pow(result, operand.get(i + 1));\n       \
    \     }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpprvi2_bh.java:49)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = operand.get(0);\n        for (int i = 0; i < op.size(); i++) {\n  \
    \          if (op.get(i).equals(\"+\")) {\n                result += operand.get(i\
    \ + 1);\n            } else if (op.get(i).equals(\"-\")) {\n                result\
    \ -= operand.get(i + 1);\n            } else if (op.get(i).equals(\"*\")) {\n\
    \                result *= operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    //\")) {\n                result /= operand.get(i + 1);\n            } else if\
    \ (op.get(i).equals(\"**\")) {\n                result = (long) Math.pow(result,\
    \ operand.get(i + 1));\n            }\n        }\n        return result;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphpxurzdm.java:46)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = operand.get(0);\n        for (int i = 0; i < op.size(); i++) {\n  \
    \          switch (op.get(i)) {\n                case \"+\":\n               \
    \     result += operand.get(i + 1);\n                    break;\n            \
    \    case \"-\":\n                    result -= operand.get(i + 1);\n        \
    \            break;\n                case \"*\":\n                    result *=\
    \ operand.get(i + 1);\n                    break;\n                case \"//\"\
    :\n                    result /= operand.get(i + 1);\n                    break;\n\
    \                case \"**\":\n                    result = (long) Math.pow(result,\
    \ operand.get(i + 1));\n                    break;\n            }\n        }\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"\
    *\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxuz10xw7.java:52)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        //\
    \ Write your code here\n        // To print results to the standard output you\
    \ can use System.out.println()\n        // Example: System.out.println(\"Hello\
    \ world!\");\n        long result = operand.get(0);\n        for (int i = 0; i\
    \ < op.size(); i++) {\n            switch (op.get(i)) {\n                case\
    \ \"+\":\n                    result += operand.get(i + 1);\n                \
    \    break;\n                case \"-\":\n                    result -= operand.get(i\
    \ + 1);\n                    break;\n                case \"*\":\n           \
    \         result *= operand.get(i + 1);\n                    break;\n        \
    \        case \"//\":\n                    result /= operand.get(i + 1);\n   \
    \                 break;\n                case \"**\":\n                    result\
    \ = (long) Math.pow(result, operand.get(i + 1));\n                    break;\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpn1f0usqr.java:55)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ res = operand.get(0);\n        for (int i = 0; i < op.size(); i++) {\n     \
    \       if (op.get(i).equals(\"+\")) {\n                res += operand.get(i +\
    \ 1);\n            } else if (op.get(i).equals(\"-\")) {\n                res\
    \ -= operand.get(i + 1);\n            } else if (op.get(i).equals(\"*\")) {\n\
    \                res *= operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    //\")) {\n                res /= operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    **\")) {\n                res = (long) Math.pow(res, operand.get(i + 1));\n  \
    \          }\n        }\n        return res;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsbl0sx4_.java:46)\n"
  stdout: ''
  timestamp: 1659792415
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        //\
    \ Write your code here\n        // To print results to the standard output you\
    \ can use System.out.println()\n        // Example: System.out.println(\"Hello\
    \ world!\");\n        long result = operand.get(0);\n        for (int i = 0; i\
    \ < op.size(); i++) {\n            if (op.get(i).equals(\"+\")) {\n          \
    \      result += operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    -\")) {\n                result -= operand.get(i + 1);\n            } else if\
    \ (op.get(i).equals(\"*\")) {\n                result *= operand.get(i + 1);\n\
    \            } else if (op.get(i).equals(\"//\")) {\n                result /=\
    \ operand.get(i + 1);\n            } else if (op.get(i).equals(\"**\")) {\n  \
    \              result = (long) Math.pow(result, operand.get(i + 1));\n       \
    \     }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpprvi2_bh.java:49)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        //\
    \ Write your code here\n        // To print results to the standard output you\
    \ can use System.out.println()\n        // Example: System.out.println(\"Hello\
    \ world!\");\n        long result = operand.get(0);\n        for (int i = 0; i\
    \ < op.size(); i++) {\n            if (op.get(i).equals(\"+\")) {\n          \
    \      result += operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    -\")) {\n                result -= operand.get(i + 1);\n            } else if\
    \ (op.get(i).equals(\"*\")) {\n                result *= operand.get(i + 1);\n\
    \            } else if (op.get(i).equals(\"//\")) {\n                result /=\
    \ operand.get(i + 1);\n            } else if (op.get(i).equals(\"**\")) {\n  \
    \              result = (long) Math.pow(result, operand.get(i + 1));\n       \
    \     }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpprvi2_bh.java:49)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        //\
    \ Write your code here\n        // To print results to the standard output you\
    \ can use System.out.println()\n        // Example: System.out.println(\"Hello\
    \ world!\");\n        long result = operand.get(0);\n        for (int i = 0; i\
    \ < op.size(); i++) {\n            if (op.get(i).equals(\"+\")) {\n          \
    \      result += operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    -\")) {\n                result -= operand.get(i + 1);\n            } else if\
    \ (op.get(i).equals(\"*\")) {\n                result *= operand.get(i + 1);\n\
    \            } else if (op.get(i).equals(\"//\")) {\n                result /=\
    \ operand.get(i + 1);\n            } else if (op.get(i).equals(\"**\")) {\n  \
    \              result = (long) Math.pow(result, operand.get(i + 1));\n       \
    \     }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpprvi2_bh.java:49)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        //\
    \ Write your code here\n        // To print results to the standard output you\
    \ can use System.out.println()\n        // Example: System.out.println(\"Hello\
    \ world!\");\n        long result = operand.get(0);\n        for (int i = 0; i\
    \ < op.size(); i++) {\n            if (op.get(i).equals(\"+\")) {\n          \
    \      result += operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    -\")) {\n                result -= operand.get(i + 1);\n            } else if\
    \ (op.get(i).equals(\"*\")) {\n                result *= operand.get(i + 1);\n\
    \            } else if (op.get(i).equals(\"//\")) {\n                result /=\
    \ operand.get(i + 1);\n            } else if (op.get(i).equals(\"**\")) {\n  \
    \              result = (long) Math.pow(result, operand.get(i + 1));\n       \
    \     }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpprvi2_bh.java:49)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        //\
    \ Write your code here\n        // To print results to the standard output you\
    \ can use System.out.println()\n        // Example: System.out.println(\"Hello\
    \ world!\");\n        long result = operand.get(0);\n        for (int i = 0; i\
    \ < op.size(); i++) {\n            if (op.get(i).equals(\"+\")) {\n          \
    \      result += operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    -\")) {\n                result -= operand.get(i + 1);\n            } else if\
    \ (op.get(i).equals(\"*\")) {\n                result *= operand.get(i + 1);\n\
    \            } else if (op.get(i).equals(\"//\")) {\n                result /=\
    \ operand.get(i + 1);\n            } else if (op.get(i).equals(\"**\")) {\n  \
    \              result = (long) Math.pow(result, operand.get(i + 1));\n       \
    \     }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpprvi2_bh.java:49)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        //\
    \ Write your code here\n        // To print results to the standard output you\
    \ can use System.out.println()\n        // Example: System.out.println(\"Hello\
    \ world!\");\n        long result = operand.get(0);\n        for (int i = 0; i\
    \ < op.size(); i++) {\n            if (op.get(i).equals(\"+\")) {\n          \
    \      result += operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    -\")) {\n                result -= operand.get(i + 1);\n            } else if\
    \ (op.get(i).equals(\"*\")) {\n                result *= operand.get(i + 1);\n\
    \            } else if (op.get(i).equals(\"//\")) {\n                result /=\
    \ operand.get(i + 1);\n            } else if (op.get(i).equals(\"**\")) {\n  \
    \              result = (long) Math.pow(result, operand.get(i + 1));\n       \
    \     }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpprvi2_bh.java:49)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        //\
    \ Write your code here\n        // To print results to the standard output you\
    \ can use System.out.println()\n        // Example: System.out.println(\"Hello\
    \ world!\");\n        long result = operand.get(0);\n        for (int i = 0; i\
    \ < op.size(); i++) {\n            if (op.get(i).equals(\"+\")) {\n          \
    \      result += operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    -\")) {\n                result -= operand.get(i + 1);\n            } else if\
    \ (op.get(i).equals(\"*\")) {\n                result *= operand.get(i + 1);\n\
    \            } else if (op.get(i).equals(\"//\")) {\n                result /=\
    \ operand.get(i + 1);\n            } else if (op.get(i).equals(\"**\")) {\n  \
    \              result = (long) Math.pow(result, operand.get(i + 1));\n       \
    \     }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpprvi2_bh.java:49)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        //\
    \ Write your code here\n        // To print results to the standard output you\
    \ can use System.out.println()\n        // Example: System.out.println(\"Hello\
    \ world!\");\n        long result = operand.get(0);\n        for (int i = 0; i\
    \ < op.size(); i++) {\n            switch (op.get(i)) {\n                case\
    \ \"+\":\n                    result += operand.get(i + 1);\n                \
    \    break;\n                case \"-\":\n                    result -= operand.get(i\
    \ + 1);\n                    break;\n                case \"*\":\n           \
    \         result *= operand.get(i + 1);\n                    break;\n        \
    \        case \"//\":\n                    result /= operand.get(i + 1);\n   \
    \                 break;\n                case \"**\":\n                    result\
    \ = (long) Math.pow(result, operand.get(i + 1));\n                    break;\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpn1f0usqr.java:55)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = operand.get(0);\n        for (int i = 0; i < op.size(); i++) {\n  \
    \          String operation = op.get(i);\n            long operand1 = operand.get(i);\n\
    \            long operand2 = operand.get(i + 1);\n            switch (operation)\
    \ {\n                case \"+\":\n                    result = operand1 + operand2;\n\
    \                    break;\n                case \"-\":\n                   \
    \ result = operand1 - operand2;\n                    break;\n                case\
    \ \"*\":\n                    result = operand1 * operand2;\n                \
    \    break;\n                case \"//\":\n                    result = operand1\
    \ / operand2;\n                    break;\n                case \"**\":\n    \
    \                result = (long) Math.pow(operand1, operand2);\n             \
    \       break;\n            }\n        }\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpijylkl8a.java:54)\n"
  stdout: ''
  timestamp: 1659792415
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        //\
    \ Write your code here\n        // To print results to the standard output you\
    \ can use System.out.println()\n        // Example: System.out.println(\"Hello\
    \ world!\");\n        long result = operand.get(0);\n        for (int i = 0; i\
    \ < op.size(); i++) {\n            if (op.get(i).equals(\"+\")) {\n          \
    \      result += operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    -\")) {\n                result -= operand.get(i + 1);\n            } else if\
    \ (op.get(i).equals(\"*\")) {\n                result *= operand.get(i + 1);\n\
    \            } else if (op.get(i).equals(\"//\")) {\n                result /=\
    \ operand.get(i + 1);\n            } else if (op.get(i).equals(\"**\")) {\n  \
    \              result = (long) Math.pow(result, operand.get(i + 1));\n       \
    \     }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpprvi2_bh.java:49)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        //\
    \ Write your code here\n        // To print results to the standard output you\
    \ can use System.out.println()\n        // Example: System.out.println(\"Hello\
    \ world!\");\n        long result = operand.get(0);\n        for (int i = 0; i\
    \ < op.size(); i++) {\n            if (op.get(i).equals(\"+\")) {\n          \
    \      result += operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    -\")) {\n                result -= operand.get(i + 1);\n            } else if\
    \ (op.get(i).equals(\"*\")) {\n                result *= operand.get(i + 1);\n\
    \            } else if (op.get(i).equals(\"//\")) {\n                result /=\
    \ operand.get(i + 1);\n            } else if (op.get(i).equals(\"**\")) {\n  \
    \              result = (long) Math.pow(result, operand.get(i + 1));\n       \
    \     }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpprvi2_bh.java:49)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = operand.get(0);\n        for (int i = 0; i < op.size(); i++) {\n  \
    \          if (op.get(i).equals(\"+\")) {\n                result += operand.get(i\
    \ + 1);\n            } else if (op.get(i).equals(\"-\")) {\n                result\
    \ -= operand.get(i + 1);\n            } else if (op.get(i).equals(\"*\")) {\n\
    \                result *= operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    //\")) {\n                result /= operand.get(i + 1);\n            } else if\
    \ (op.get(i).equals(\"**\")) {\n                result = (long) Math.pow(result,\
    \ operand.get(i + 1));\n            }\n        }\n        return result;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphpxurzdm.java:46)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = operand.get(0);\n        for (int i = 0; i < op.size(); i++) {\n  \
    \          if (op.get(i).equals(\"+\")) {\n                result += operand.get(i\
    \ + 1);\n            } else if (op.get(i).equals(\"-\")) {\n                result\
    \ -= operand.get(i + 1);\n            } else if (op.get(i).equals(\"*\")) {\n\
    \                result *= operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    //\")) {\n                result /= operand.get(i + 1);\n            } else if\
    \ (op.get(i).equals(\"**\")) {\n                result = (long) Math.pow(result,\
    \ operand.get(i + 1));\n            }\n        }\n        return result;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphpxurzdm.java:46)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        //\
    \ Write your code here\n        // To print results to the standard output you\
    \ can use System.out.println()\n        // Example: System.out.println(\"Hello\
    \ world!\");\n        long result = operand.get(0);\n        for (int i = 0; i\
    \ < op.size(); i++) {\n            if (op.get(i).equals(\"+\")) {\n          \
    \      result += operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    -\")) {\n                result -= operand.get(i + 1);\n            } else if\
    \ (op.get(i).equals(\"*\")) {\n                result *= operand.get(i + 1);\n\
    \            } else if (op.get(i).equals(\"//\")) {\n                result /=\
    \ operand.get(i + 1);\n            } else if (op.get(i).equals(\"**\")) {\n  \
    \              result = (long) Math.pow(result, operand.get(i + 1));\n       \
    \     }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpprvi2_bh.java:49)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        //\
    \ Write your code here\n        // To print results to the standard output you\
    \ can use System.out.println()\n        // Example: System.out.println(\"Hello\
    \ world!\");\n        long result = operand.get(0);\n        for (int i = 0; i\
    \ < op.size(); i++) {\n            switch (op.get(i)) {\n                case\
    \ \"+\":\n                    result += operand.get(i + 1);\n                \
    \    break;\n                case \"-\":\n                    result -= operand.get(i\
    \ + 1);\n                    break;\n                case \"*\":\n           \
    \         result *= operand.get(i + 1);\n                    break;\n        \
    \        case \"//\":\n                    result /= operand.get(i + 1);\n   \
    \                 break;\n                case \"**\":\n                    result\
    \ = (long) Math.pow(result, operand.get(i + 1));\n                    break;\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpn1f0usqr.java:55)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        //\
    \ Write your code here\n        // To print results to the standard output you\
    \ can use System.out.println()\n        // Example: System.out.println(\"Hello\
    \ world!\");\n        long result = operand.get(0);\n        for (int i = 0; i\
    \ < op.size(); i++) {\n            switch (op.get(i)) {\n                case\
    \ \"+\":\n                    result += operand.get(i + 1);\n                \
    \    break;\n                case \"-\":\n                    result -= operand.get(i\
    \ + 1);\n                    break;\n                case \"*\":\n           \
    \         result *= operand.get(i + 1);\n                    break;\n        \
    \        case \"//\":\n                    result /= operand.get(i + 1);\n   \
    \                 break;\n                case \"**\":\n                    result\
    \ = (long) Math.pow(result, operand.get(i + 1));\n                    break;\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpn1f0usqr.java:55)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = operand.get(0);\n        for (int i = 0; i < op.size(); i++) {\n  \
    \          if (op.get(i).equals(\"+\")) {\n                result += operand.get(i\
    \ + 1);\n            } else if (op.get(i).equals(\"-\")) {\n                result\
    \ -= operand.get(i + 1);\n            } else if (op.get(i).equals(\"*\")) {\n\
    \                result *= operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    //\")) {\n                result /= operand.get(i + 1);\n            } else if\
    \ (op.get(i).equals(\"**\")) {\n                result = (long) Math.pow(result,\
    \ operand.get(i + 1));\n            }\n        }\n        return result;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphpxurzdm.java:46)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        //\
    \ Write your code here\n        // To print results to the standard output you\
    \ can use System.out.println()\n        // Example: System.out.println(\"Hello\
    \ world!\");\n        long result = operand.get(0);\n        for (int i = 0; i\
    \ < op.size(); i++) {\n            if (op.get(i).equals(\"+\")) {\n          \
    \      result += operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    -\")) {\n                result -= operand.get(i + 1);\n            } else if\
    \ (op.get(i).equals(\"*\")) {\n                result *= operand.get(i + 1);\n\
    \            } else if (op.get(i).equals(\"//\")) {\n                result /=\
    \ operand.get(i + 1);\n            } else if (op.get(i).equals(\"**\")) {\n  \
    \              result = (long) Math.pow(result, operand.get(i + 1));\n       \
    \     }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpprvi2_bh.java:49)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = operand.get(0);\n        for (int i = 0; i < op.size(); i++) {\n  \
    \          if (op.get(i).equals(\"+\")) {\n                result += operand.get(i\
    \ + 1);\n            } else if (op.get(i).equals(\"-\")) {\n                result\
    \ -= operand.get(i + 1);\n            } else if (op.get(i).equals(\"*\")) {\n\
    \                result *= operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    //\")) {\n                result /= operand.get(i + 1);\n            } else if\
    \ (op.get(i).equals(\"**\")) {\n                result = (long) Math.pow(result,\
    \ operand.get(i + 1));\n            }\n        }\n        return result;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphpxurzdm.java:46)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        //\
    \ Write your code here\n        // To print results to the standard output you\
    \ can use System.out.println()\n        // Example: System.out.println(\"Hello\
    \ world!\");\n        long result = operand.get(0);\n        for (int i = 0; i\
    \ < op.size(); i++) {\n            if (op.get(i).equals(\"+\")) {\n          \
    \      result += operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    -\")) {\n                result -= operand.get(i + 1);\n            } else if\
    \ (op.get(i).equals(\"*\")) {\n                result *= operand.get(i + 1);\n\
    \            } else if (op.get(i).equals(\"//\")) {\n                result /=\
    \ operand.get(i + 1);\n            } else if (op.get(i).equals(\"**\")) {\n  \
    \              result = (long) Math.pow(result, operand.get(i + 1));\n       \
    \     }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpprvi2_bh.java:49)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        //\
    \ Write your code here\n        // To print results to the standard output you\
    \ can use System.out.println()\n        // Example: System.out.println(\"Hello\
    \ world!\");\n        long result = operand.get(0);\n        for (int i = 0; i\
    \ < op.size(); i++) {\n            if (op.get(i).equals(\"+\")) {\n          \
    \      result += operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    -\")) {\n                result -= operand.get(i + 1);\n            } else if\
    \ (op.get(i).equals(\"*\")) {\n                result *= operand.get(i + 1);\n\
    \            } else if (op.get(i).equals(\"//\")) {\n                result /=\
    \ operand.get(i + 1);\n            } else if (op.get(i).equals(\"**\")) {\n  \
    \              result = (long) Math.pow(result, operand.get(i + 1));\n       \
    \     }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpprvi2_bh.java:49)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = operand.get(0);\n        for (int i = 0; i < op.size(); i++) {\n  \
    \          String operation = op.get(i);\n            long num = operand.get(i\
    \ + 1);\n            if (operation.equals(\"+\")) {\n                result +=\
    \ num;\n            } else if (operation.equals(\"-\")) {\n                result\
    \ -= num;\n            } else if (operation.equals(\"*\")) {\n               \
    \ result *= num;\n            } else if (operation.equals(\"//\")) {\n       \
    \         result /= num;\n            } else if (operation.equals(\"**\")) {\n\
    \                result = (long) Math.pow(result, num);\n            }\n     \
    \   }\n        return result;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\"\
    , (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpp5i1j3wv.java:48)\n"
  stdout: ''
  timestamp: 1659792415
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        //\
    \ Write your code here\n        // To print results to the standard output you\
    \ can use System.out.println()\n        // Example: System.out.println(\"Hello\
    \ world!\");\n        long result = operand.get(0);\n        for (int i = 0; i\
    \ < op.size(); i++) {\n            if (op.get(i).equals(\"+\")) {\n          \
    \      result += operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    -\")) {\n                result -= operand.get(i + 1);\n            } else if\
    \ (op.get(i).equals(\"*\")) {\n                result *= operand.get(i + 1);\n\
    \            } else if (op.get(i).equals(\"//\")) {\n                result /=\
    \ operand.get(i + 1);\n            } else if (op.get(i).equals(\"**\")) {\n  \
    \              result = (long) Math.pow(result, operand.get(i + 1));\n       \
    \     }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpprvi2_bh.java:49)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = operand.get(0);\n        for (int i = 0; i < op.size(); i++) {\n  \
    \          switch (op.get(i)) {\n                case \"+\":\n               \
    \     result += operand.get(i + 1);\n                    break;\n            \
    \    case \"-\":\n                    result -= operand.get(i + 1);\n        \
    \            break;\n                case \"*\":\n                    result *=\
    \ operand.get(i + 1);\n                    break;\n                case \"//\"\
    :\n                    result /= operand.get(i + 1);\n                    break;\n\
    \                case \"**\":\n                    result = (long) Math.pow(result,\
    \ operand.get(i + 1));\n                    break;\n            }\n        }\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"\
    *\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxuz10xw7.java:52)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        //\
    \ Write your code here\n        // To print results to the standard output you\
    \ can use System.out.println()\n        // Example: System.out.println(\"Hello\
    \ world!\");\n        long result = operand.get(0);\n        for (int i = 0; i\
    \ < op.size(); i++) {\n            if (op.get(i).equals(\"+\")) {\n          \
    \      result += operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    -\")) {\n                result -= operand.get(i + 1);\n            } else if\
    \ (op.get(i).equals(\"*\")) {\n                result *= operand.get(i + 1);\n\
    \            } else if (op.get(i).equals(\"//\")) {\n                result /=\
    \ operand.get(i + 1);\n            } else if (op.get(i).equals(\"**\")) {\n  \
    \              result = (long) Math.pow(result, operand.get(i + 1));\n       \
    \     }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpprvi2_bh.java:49)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        //\
    \ Write your code here\n        // To print results to the standard output you\
    \ can use System.out.println()\n        // Example: System.out.println(\"Hello\
    \ world!\");\n        long result = operand.get(0);\n        for (int i = 0; i\
    \ < op.size(); i++) {\n            if (op.get(i).equals(\"+\")) {\n          \
    \      result += operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    -\")) {\n                result -= operand.get(i + 1);\n            } else if\
    \ (op.get(i).equals(\"*\")) {\n                result *= operand.get(i + 1);\n\
    \            } else if (op.get(i).equals(\"//\")) {\n                result /=\
    \ operand.get(i + 1);\n            } else if (op.get(i).equals(\"**\")) {\n  \
    \              result = (long) Math.pow(result, operand.get(i + 1));\n       \
    \     }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpprvi2_bh.java:49)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        //\
    \ Write your code here\n        // To print results to the standard output you\
    \ can use System.out.println()\n        // Example: System.out.println(\"Hello\
    \ world!\");\n        long result = operand.get(0);\n        for (int i = 0; i\
    \ < op.size(); i++) {\n            if (op.get(i).equals(\"+\")) {\n          \
    \      result += operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    -\")) {\n                result -= operand.get(i + 1);\n            } else if\
    \ (op.get(i).equals(\"*\")) {\n                result *= operand.get(i + 1);\n\
    \            } else if (op.get(i).equals(\"//\")) {\n                result /=\
    \ operand.get(i + 1);\n            } else if (op.get(i).equals(\"**\")) {\n  \
    \              result = (long) Math.pow(result, operand.get(i + 1));\n       \
    \     }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpprvi2_bh.java:49)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        //\
    \ Write your code here\n        // To print results to the standard output you\
    \ can use System.out.println()\n        // Example: System.out.println(\"Hello\
    \ world!\");\n        long result = operand.get(0);\n        for (int i = 0; i\
    \ < op.size(); i++) {\n            if (op.get(i).equals(\"+\")) {\n          \
    \      result += operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    -\")) {\n                result -= operand.get(i + 1);\n            } else if\
    \ (op.get(i).equals(\"*\")) {\n                result *= operand.get(i + 1);\n\
    \            } else if (op.get(i).equals(\"//\")) {\n                result /=\
    \ operand.get(i + 1);\n            } else if (op.get(i).equals(\"**\")) {\n  \
    \              result = (long) Math.pow(result, operand.get(i + 1));\n       \
    \     }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpprvi2_bh.java:49)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        //\
    \ Write your code here\n        // To print results to the standard output you\
    \ can use System.out.println()\n        // Example: System.out.println(\"Hello\
    \ world!\");\n        long result = operand.get(0);\n        for (int i = 0; i\
    \ < op.size(); i++) {\n            if (op.get(i).equals(\"+\")) {\n          \
    \      result += operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    -\")) {\n                result -= operand.get(i + 1);\n            } else if\
    \ (op.get(i).equals(\"*\")) {\n                result *= operand.get(i + 1);\n\
    \            } else if (op.get(i).equals(\"//\")) {\n                result /=\
    \ operand.get(i + 1);\n            } else if (op.get(i).equals(\"**\")) {\n  \
    \              result = (long) Math.pow(result, operand.get(i + 1));\n       \
    \     }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpprvi2_bh.java:49)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        //\
    \ Write your code here\n        // To print results to the standard output you\
    \ can use System.out.println()\n        // Example: System.out.println(\"Hello\
    \ world!\");\n        return 0;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\"\
    , (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpddbqlpaj.java:34)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        //\
    \ Write your code here\n        // To print results to the standard output you\
    \ can use System.out.println()\n        // Example: System.out.println(\"Hello\
    \ world!\");\n        long result = operand.get(0);\n        for (int i = 0; i\
    \ < op.size(); i++) {\n            switch (op.get(i)) {\n                case\
    \ \"+\":\n                    result += operand.get(i + 1);\n                \
    \    break;\n                case \"-\":\n                    result -= operand.get(i\
    \ + 1);\n                    break;\n                case \"*\":\n           \
    \         result *= operand.get(i + 1);\n                    break;\n        \
    \        case \"//\":\n                    result /= operand.get(i + 1);\n   \
    \                 break;\n                case \"**\":\n                    result\
    \ = (long) Math.pow(result, operand.get(i + 1));\n                    break;\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpn1f0usqr.java:55)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        //\
    \ Write your code here\n        // To print results to the standard output you\
    \ can use System.out.println()\n        // Example: System.out.println(\"Hello\
    \ world!\");\n        long result = operand.get(0);\n        for (int i = 0; i\
    \ < op.size(); i++) {\n            if (op.get(i).equals(\"+\")) {\n          \
    \      result += operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    -\")) {\n                result -= operand.get(i + 1);\n            } else if\
    \ (op.get(i).equals(\"*\")) {\n                result *= operand.get(i + 1);\n\
    \            } else if (op.get(i).equals(\"//\")) {\n                result /=\
    \ operand.get(i + 1);\n            } else if (op.get(i).equals(\"**\")) {\n  \
    \              result = (long) Math.pow(result, operand.get(i + 1));\n       \
    \     }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpprvi2_bh.java:49)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        //\
    \ Write your code here\n        // To print results to the standard output you\
    \ can use System.out.println()\n        // Example: System.out.println(\"Hello\
    \ world!\");\n        long result = operand.get(0);\n        for (int i = 0; i\
    \ < op.size(); i++) {\n            if (op.get(i).equals(\"+\")) {\n          \
    \      result += operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    -\")) {\n                result -= operand.get(i + 1);\n            } else if\
    \ (op.get(i).equals(\"*\")) {\n                result *= operand.get(i + 1);\n\
    \            } else if (op.get(i).equals(\"//\")) {\n                result /=\
    \ operand.get(i + 1);\n            } else if (op.get(i).equals(\"**\")) {\n  \
    \              result = (long) Math.pow(result, operand.get(i + 1));\n       \
    \     }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpprvi2_bh.java:49)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        //\
    \ Write your code here\n        // To print results to the standard output you\
    \ can use System.out.println()\n        // Example: System.out.println(\"Hello\
    \ world!\");\n        long result = operand.get(0);\n        for (int i = 0; i\
    \ < op.size(); i++) {\n            switch (op.get(i)) {\n                case\
    \ \"+\":\n                    result += operand.get(i + 1);\n                \
    \    break;\n                case \"-\":\n                    result -= operand.get(i\
    \ + 1);\n                    break;\n                case \"*\":\n           \
    \         result *= operand.get(i + 1);\n                    break;\n        \
    \        case \"//\":\n                    result /= operand.get(i + 1);\n   \
    \                 break;\n                case \"**\":\n                    result\
    \ = (long) Math.pow(result, operand.get(i + 1));\n                    break;\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpn1f0usqr.java:55)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        //\
    \ Write your code here\n        // To print results to the standard output you\
    \ can use System.out.println()\n        // Example: System.out.println(\"Hello\
    \ world!\");\n        long result = operand.get(0);\n        for (int i = 0; i\
    \ < op.size(); i++) {\n            if (op.get(i).equals(\"+\")) {\n          \
    \      result += operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    -\")) {\n                result -= operand.get(i + 1);\n            } else if\
    \ (op.get(i).equals(\"*\")) {\n                result *= operand.get(i + 1);\n\
    \            } else if (op.get(i).equals(\"//\")) {\n                result /=\
    \ operand.get(i + 1);\n            } else if (op.get(i).equals(\"**\")) {\n  \
    \              result = (long) Math.pow(result, operand.get(i + 1));\n       \
    \     }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpprvi2_bh.java:49)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        //\
    \ Write your code here\n        // To print results to the standard output you\
    \ can use System.out.println()\n        // Example: System.out.println(\"Hello\
    \ world!\");\n        long result = operand.get(0);\n        for (int i = 0; i\
    \ < op.size(); i++) {\n            if (op.get(i).equals(\"+\")) {\n          \
    \      result += operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    -\")) {\n                result -= operand.get(i + 1);\n            } else if\
    \ (op.get(i).equals(\"*\")) {\n                result *= operand.get(i + 1);\n\
    \            } else if (op.get(i).equals(\"//\")) {\n                result /=\
    \ operand.get(i + 1);\n            } else if (op.get(i).equals(\"**\")) {\n  \
    \              result = (long) Math.pow(result, operand.get(i + 1));\n       \
    \     }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpprvi2_bh.java:49)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        //\
    \ Write your code here\n        // To print results to the standard output you\
    \ can use System.out.println()\n        // Example: System.out.println(\"Hello\
    \ world!\");\n        long result = operand.get(0);\n        for (int i = 0; i\
    \ < op.size(); i++) {\n            if (op.get(i).equals(\"+\")) {\n          \
    \      result += operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    -\")) {\n                result -= operand.get(i + 1);\n            } else if\
    \ (op.get(i).equals(\"*\")) {\n                result *= operand.get(i + 1);\n\
    \            } else if (op.get(i).equals(\"//\")) {\n                result /=\
    \ operand.get(i + 1);\n            } else if (op.get(i).equals(\"**\")) {\n  \
    \              result = (long) Math.pow(result, operand.get(i + 1));\n       \
    \     }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpprvi2_bh.java:49)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = operand.get(0);\n        for (int i = 0; i < op.size(); i++) {\n  \
    \          switch (op.get(i)) {\n                case \"+\":\n               \
    \     result += operand.get(i + 1);\n                    break;\n            \
    \    case \"-\":\n                    result -= operand.get(i + 1);\n        \
    \            break;\n                case \"*\":\n                    result *=\
    \ operand.get(i + 1);\n                    break;\n                case \"//\"\
    :\n                    result /= operand.get(i + 1);\n                    break;\n\
    \                case \"**\":\n                    result = (long) Math.pow(result,\
    \ operand.get(i + 1));\n                    break;\n            }\n        }\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"\
    *\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxuz10xw7.java:52)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        //\
    \ Write your code here\n        // To print results to the standard output you\
    \ can use System.out.println()\n        // Example: System.out.println(\"Hello\
    \ world!\");\n        long result = operand.get(0);\n        for (int i = 0; i\
    \ < op.size(); i++) {\n            if (op.get(i).equals(\"+\")) {\n          \
    \      result += operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    -\")) {\n                result -= operand.get(i + 1);\n            } else if\
    \ (op.get(i).equals(\"*\")) {\n                result *= operand.get(i + 1);\n\
    \            } else if (op.get(i).equals(\"//\")) {\n                result /=\
    \ operand.get(i + 1);\n            } else if (op.get(i).equals(\"**\")) {\n  \
    \              result = (long) Math.pow(result, operand.get(i + 1));\n       \
    \     }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpprvi2_bh.java:49)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        //\
    \ Write your code here\n        // To print results to the standard output you\
    \ can use System.out.println()\n        // Example: System.out.println(\"Hello\
    \ world!\");\n        long result = operand.get(0);\n        for (int i = 0; i\
    \ < op.size(); i++) {\n            if (op.get(i).equals(\"+\")) {\n          \
    \      result += operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    -\")) {\n                result -= operand.get(i + 1);\n            } else if\
    \ (op.get(i).equals(\"*\")) {\n                result *= operand.get(i + 1);\n\
    \            } else if (op.get(i).equals(\"//\")) {\n                result /=\
    \ operand.get(i + 1);\n            } else if (op.get(i).equals(\"**\")) {\n  \
    \              result = (long) Math.pow(result, operand.get(i + 1));\n       \
    \     }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpprvi2_bh.java:49)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        //\
    \ Write your code here\n        // To print results to the standard output you\
    \ can use System.out.println()\n        // Example: System.out.println(\"Hello\
    \ world!\");\n        long result = operand.get(0);\n        for (int i = 0; i\
    \ < op.size(); i++) {\n            if (op.get(i).equals(\"+\")) {\n          \
    \      result += operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    -\")) {\n                result -= operand.get(i + 1);\n            } else if\
    \ (op.get(i).equals(\"*\")) {\n                result *= operand.get(i + 1);\n\
    \            } else if (op.get(i).equals(\"//\")) {\n                result /=\
    \ operand.get(i + 1);\n            } else if (op.get(i).equals(\"**\")) {\n  \
    \              result = (long) Math.pow(result, operand.get(i + 1));\n       \
    \     }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpprvi2_bh.java:49)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        //\
    \ Write your code here\n        // To print results to the standard output you\
    \ can use System.out.println()\n        // Example: System.out.println(\"Hello\
    \ world!\");\n        long result = operand.get(0);\n        for (int i = 0; i\
    \ < op.size(); i++) {\n            if (op.get(i).equals(\"+\")) {\n          \
    \      result += operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    -\")) {\n                result -= operand.get(i + 1);\n            } else if\
    \ (op.get(i).equals(\"*\")) {\n                result *= operand.get(i + 1);\n\
    \            } else if (op.get(i).equals(\"//\")) {\n                result /=\
    \ operand.get(i + 1);\n            } else if (op.get(i).equals(\"**\")) {\n  \
    \              result = (long) Math.pow(result, operand.get(i + 1));\n       \
    \     }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpprvi2_bh.java:49)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        //\
    \ Write your code here\n        // To print results to the standard output you\
    \ can use System.out.println()\n        // Example: System.out.println(\"Hello\
    \ world!\");\n        long result = operand.get(0);\n        for (int i = 0; i\
    \ < op.size(); i++) {\n            if (op.get(i).equals(\"+\")) {\n          \
    \      result += operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    -\")) {\n                result -= operand.get(i + 1);\n            } else if\
    \ (op.get(i).equals(\"*\")) {\n                result *= operand.get(i + 1);\n\
    \            } else if (op.get(i).equals(\"//\")) {\n                result /=\
    \ operand.get(i + 1);\n            } else if (op.get(i).equals(\"**\")) {\n  \
    \              result = (long) Math.pow(result, operand.get(i + 1));\n       \
    \     }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpprvi2_bh.java:49)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        //\
    \ Write your code here\n        // To print results to the standard output you\
    \ can use System.out.println()\n        // Example: System.out.println(\"Hello\
    \ world!\");\n        long result = operand.get(0);\n        for (int i = 0; i\
    \ < op.size(); i++) {\n            if (op.get(i).equals(\"+\")) {\n          \
    \      result += operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    -\")) {\n                result -= operand.get(i + 1);\n            } else if\
    \ (op.get(i).equals(\"*\")) {\n                result *= operand.get(i + 1);\n\
    \            } else if (op.get(i).equals(\"//\")) {\n                result /=\
    \ operand.get(i + 1);\n            } else if (op.get(i).equals(\"**\")) {\n  \
    \              result = (long) Math.pow(result, operand.get(i + 1));\n       \
    \     }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpprvi2_bh.java:49)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = operand.get(0);\n        for (int i = 0; i < op.size(); i++) {\n  \
    \          if (op.get(i).equals(\"+\")) {\n                result += operand.get(i\
    \ + 1);\n            } else if (op.get(i).equals(\"-\")) {\n                result\
    \ -= operand.get(i + 1);\n            } else if (op.get(i).equals(\"*\")) {\n\
    \                result *= operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    //\")) {\n                result /= operand.get(i + 1);\n            } else if\
    \ (op.get(i).equals(\"**\")) {\n                result = (long) Math.pow(result,\
    \ operand.get(i + 1));\n            }\n        }\n        return result;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphpxurzdm.java:46)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        //\
    \ Write your code here\n        // To print results to the standard output you\
    \ can use System.out.println()\n        // Example: System.out.println(\"Hello\
    \ world!\");\n        long result = operand.get(0);\n        for (int i = 0; i\
    \ < op.size(); i++) {\n            if (op.get(i).equals(\"+\")) {\n          \
    \      result += operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    -\")) {\n                result -= operand.get(i + 1);\n            } else if\
    \ (op.get(i).equals(\"*\")) {\n                result *= operand.get(i + 1);\n\
    \            } else if (op.get(i).equals(\"//\")) {\n                result /=\
    \ operand.get(i + 1);\n            } else if (op.get(i).equals(\"**\")) {\n  \
    \              result = (long) Math.pow(result, operand.get(i + 1));\n       \
    \     }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpprvi2_bh.java:49)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = operand.get(0);\n        for (int i = 0; i < op.size(); i++) {\n  \
    \          if (op.get(i).equals(\"+\")) {\n                result += operand.get(i\
    \ + 1);\n            } else if (op.get(i).equals(\"-\")) {\n                result\
    \ -= operand.get(i + 1);\n            } else if (op.get(i).equals(\"*\")) {\n\
    \                result *= operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    //\")) {\n                result /= operand.get(i + 1);\n            } else if\
    \ (op.get(i).equals(\"**\")) {\n                result = (long) Math.pow(result,\
    \ operand.get(i + 1));\n            }\n        }\n        return result;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphpxurzdm.java:46)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        //\
    \ Write your code here\n        // To print results to the standard output you\
    \ can use System.out.println()\n        // Example: System.out.println(\"Hello\
    \ world!\");\n        long result = operand.get(0);\n        for (int i = 0; i\
    \ < op.size(); i++) {\n            switch (op.get(i)) {\n                case\
    \ \"+\":\n                    result += operand.get(i + 1);\n                \
    \    break;\n                case \"-\":\n                    result -= operand.get(i\
    \ + 1);\n                    break;\n                case \"*\":\n           \
    \         result *= operand.get(i + 1);\n                    break;\n        \
    \        case \"//\":\n                    result /= operand.get(i + 1);\n   \
    \                 break;\n                case \"**\":\n                    result\
    \ = (long) Math.pow(result, operand.get(i + 1));\n                    break;\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpn1f0usqr.java:55)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        //\
    \ Write your code here\n        // To print results to the standard output you\
    \ can use System.out.println()\n        // Example: System.out.println(\"Hello\
    \ world!\");\n        long result = operand.get(0);\n        for (int i = 0; i\
    \ < op.size(); i++) {\n            if (op.get(i).equals(\"+\")) {\n          \
    \      result += operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    -\")) {\n                result -= operand.get(i + 1);\n            } else if\
    \ (op.get(i).equals(\"*\")) {\n                result *= operand.get(i + 1);\n\
    \            } else if (op.get(i).equals(\"//\")) {\n                result /=\
    \ operand.get(i + 1);\n            } else if (op.get(i).equals(\"**\")) {\n  \
    \              result = (long) Math.pow(result, operand.get(i + 1));\n       \
    \     }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpprvi2_bh.java:49)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        //\
    \ Write your code here\n        // To print results to the standard output you\
    \ can use System.out.println()\n        // Example: System.out.println(\"Hello\
    \ world!\");\n        long result = operand.get(0);\n        for (int i = 0; i\
    \ < op.size(); i++) {\n            switch (op.get(i)) {\n                case\
    \ \"+\":\n                    result += operand.get(i + 1);\n                \
    \    break;\n                case \"-\":\n                    result -= operand.get(i\
    \ + 1);\n                    break;\n                case \"*\":\n           \
    \         result *= operand.get(i + 1);\n                    break;\n        \
    \        case \"//\":\n                    result /= operand.get(i + 1);\n   \
    \                 break;\n                case \"**\":\n                    result\
    \ = (long) Math.pow(result, operand.get(i + 1));\n                    break;\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpn1f0usqr.java:55)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = operand.get(0);\n        for (int i = 0; i < op.size(); i++) {\n  \
    \          if (op.get(i).equals(\"+\")) {\n                result += operand.get(i\
    \ + 1);\n            } else if (op.get(i).equals(\"-\")) {\n                result\
    \ -= operand.get(i + 1);\n            } else if (op.get(i).equals(\"*\")) {\n\
    \                result *= operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    //\")) {\n                result /= operand.get(i + 1);\n            } else if\
    \ (op.get(i).equals(\"**\")) {\n                result = (long) Math.pow(result,\
    \ operand.get(i + 1));\n            }\n        }\n        return result;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphpxurzdm.java:46)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = operand.get(0);\n        for (int i = 0; i < op.size(); i++) {\n  \
    \          switch (op.get(i)) {\n                case \"+\":\n               \
    \     result += operand.get(i + 1);\n                    break;\n            \
    \    case \"-\":\n                    result -= operand.get(i + 1);\n        \
    \            break;\n                case \"*\":\n                    result *=\
    \ operand.get(i + 1);\n                    break;\n                case \"//\"\
    :\n                    result /= operand.get(i + 1);\n                    break;\n\
    \                case \"**\":\n                    result = (long) Math.pow(result,\
    \ operand.get(i + 1));\n                    break;\n            }\n        }\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"\
    *\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxuz10xw7.java:52)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = operand.get(0);\n        for (int i = 0; i < op.size(); i++) {\n  \
    \          if (op.get(i).equals(\"+\")) {\n                result += operand.get(i\
    \ + 1);\n            } else if (op.get(i).equals(\"-\")) {\n                result\
    \ -= operand.get(i + 1);\n            } else if (op.get(i).equals(\"*\")) {\n\
    \                result *= operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    //\")) {\n                result /= operand.get(i + 1);\n            } else if\
    \ (op.get(i).equals(\"**\")) {\n                result = (long) Math.pow(result,\
    \ operand.get(i + 1));\n            }\n        }\n        return result;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphpxurzdm.java:46)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = operand.get(0);\n        for (int i = 0; i < op.size(); i++) {\n  \
    \          if (op.get(i).equals(\"+\")) {\n                result += operand.get(i\
    \ + 1);\n            } else if (op.get(i).equals(\"-\")) {\n                result\
    \ -= operand.get(i + 1);\n            } else if (op.get(i).equals(\"*\")) {\n\
    \                result *= operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    //\")) {\n                result /= operand.get(i + 1);\n            } else if\
    \ (op.get(i).equals(\"**\")) {\n                result = (long) Math.pow(result,\
    \ operand.get(i + 1));\n            }\n        }\n        return result;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphpxurzdm.java:46)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        //\
    \ Write your code here\n        // To print results to the standard output you\
    \ can use System.out.println()\n        // Example: System.out.println(\"Hello\
    \ world!\");\n        long result = operand.get(0);\n        for (int i = 0; i\
    \ < op.size(); i++) {\n            if (op.get(i).equals(\"+\")) {\n          \
    \      result += operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    -\")) {\n                result -= operand.get(i + 1);\n            } else if\
    \ (op.get(i).equals(\"*\")) {\n                result *= operand.get(i + 1);\n\
    \            } else if (op.get(i).equals(\"//\")) {\n                result /=\
    \ operand.get(i + 1);\n            } else if (op.get(i).equals(\"**\")) {\n  \
    \              result = (long) Math.pow(result, operand.get(i + 1));\n       \
    \     }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpprvi2_bh.java:49)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        //\
    \ Write your code here\n        // To print results to the standard output you\
    \ can use System.out.println()\n        // Example: System.out.println(\"Hello\
    \ world!\");\n        long result = operand.get(0);\n        for (int i = 0; i\
    \ < op.size(); i++) {\n            if (op.get(i).equals(\"+\")) {\n          \
    \      result += operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    -\")) {\n                result -= operand.get(i + 1);\n            } else if\
    \ (op.get(i).equals(\"*\")) {\n                result *= operand.get(i + 1);\n\
    \            } else if (op.get(i).equals(\"//\")) {\n                result /=\
    \ operand.get(i + 1);\n            } else if (op.get(i).equals(\"**\")) {\n  \
    \              result = (long) Math.pow(result, operand.get(i + 1));\n       \
    \     }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpprvi2_bh.java:49)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        //\
    \ Write your code here\n        // To print results to the standard output you\
    \ can use System.out.println()\n        // Example: System.out.println(\"Hello\
    \ world!\");\n        long result = operand.get(0);\n        for (int i = 0; i\
    \ < op.size(); i++) {\n            if (op.get(i).equals(\"+\")) {\n          \
    \      result += operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    -\")) {\n                result -= operand.get(i + 1);\n            } else if\
    \ (op.get(i).equals(\"*\")) {\n                result *= operand.get(i + 1);\n\
    \            } else if (op.get(i).equals(\"//\")) {\n                result /=\
    \ operand.get(i + 1);\n            } else if (op.get(i).equals(\"**\")) {\n  \
    \              result = (long) Math.pow(result, operand.get(i + 1));\n       \
    \     }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpprvi2_bh.java:49)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        //\
    \ Write your code here\n        // To print results to the standard output you\
    \ can use System.out.println()\n        // Example: System.out.println(\"Hello\
    \ world!\");\n        long result = operand.get(0);\n        for (int i = 0; i\
    \ < op.size(); i++) {\n            if (op.get(i).equals(\"+\")) {\n          \
    \      result += operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    -\")) {\n                result -= operand.get(i + 1);\n            } else if\
    \ (op.get(i).equals(\"*\")) {\n                result *= operand.get(i + 1);\n\
    \            } else if (op.get(i).equals(\"//\")) {\n                result /=\
    \ operand.get(i + 1);\n            } else if (op.get(i).equals(\"**\")) {\n  \
    \              result = (long) Math.pow(result, operand.get(i + 1));\n       \
    \     }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpprvi2_bh.java:49)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        //\
    \ Write your code here\n        // To print results to the standard output you\
    \ can use System.out.println()\n        // Example: System.out.println(\"Hello\
    \ world!\");\n        long result = operand.get(0);\n        for (int i = 0; i\
    \ < op.size(); i++) {\n            switch (op.get(i)) {\n                case\
    \ \"+\":\n                    result += operand.get(i + 1);\n                \
    \    break;\n                case \"-\":\n                    result -= operand.get(i\
    \ + 1);\n                    break;\n                case \"*\":\n           \
    \         result *= operand.get(i + 1);\n                    break;\n        \
    \        case \"//\":\n                    result /= operand.get(i + 1);\n   \
    \                 break;\n                case \"**\":\n                    result\
    \ = (long) Math.pow(result, operand.get(i + 1));\n                    break;\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpn1f0usqr.java:55)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = operand.get(0);\n        for (int i = 0; i < op.size(); i++) {\n  \
    \          if (op.get(i).equals(\"+\")) {\n                result += operand.get(i\
    \ + 1);\n            } else if (op.get(i).equals(\"-\")) {\n                result\
    \ -= operand.get(i + 1);\n            } else if (op.get(i).equals(\"*\")) {\n\
    \                result *= operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    //\")) {\n                result /= operand.get(i + 1);\n            } else if\
    \ (op.get(i).equals(\"**\")) {\n                result = (long) Math.pow(result,\
    \ operand.get(i + 1));\n            }\n        }\n        return result;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphpxurzdm.java:46)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        //\
    \ Write your code here\n        // To print results to the standard output you\
    \ can use System.out.println()\n        // Example: System.out.println(\"Hello\
    \ world!\");\n        long result = operand.get(0);\n        for (int i = 0; i\
    \ < op.size(); i++) {\n            if (op.get(i).equals(\"+\")) {\n          \
    \      result += operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    -\")) {\n                result -= operand.get(i + 1);\n            } else if\
    \ (op.get(i).equals(\"*\")) {\n                result *= operand.get(i + 1);\n\
    \            } else if (op.get(i).equals(\"//\")) {\n                result /=\
    \ operand.get(i + 1);\n            } else if (op.get(i).equals(\"**\")) {\n  \
    \              result = (long) Math.pow(result, operand.get(i + 1));\n       \
    \     }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpprvi2_bh.java:49)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        //\
    \ Write your code here\n        // To print results to the standard output you\
    \ can use System.out.println()\n        // Example: System.out.println(\"Hello\
    \ world!\");\n        long result = operand.get(0);\n        for (int i = 0; i\
    \ < op.size(); i++) {\n            if (op.get(i).equals(\"+\")) {\n          \
    \      result += operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    -\")) {\n                result -= operand.get(i + 1);\n            } else if\
    \ (op.get(i).equals(\"*\")) {\n                result *= operand.get(i + 1);\n\
    \            } else if (op.get(i).equals(\"//\")) {\n                result /=\
    \ operand.get(i + 1);\n            } else if (op.get(i).equals(\"**\")) {\n  \
    \              result = (long) Math.pow(result, operand.get(i + 1));\n       \
    \     }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpprvi2_bh.java:49)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        //\
    \ Write your code here\n        // To print results to the standard output you\
    \ can use System.out.println()\n        // Example: System.out.println(\"Hello\
    \ world!\");\n        long result = operand.get(0);\n        for (int i = 0; i\
    \ < op.size(); i++) {\n            if (op.get(i).equals(\"+\")) {\n          \
    \      result += operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    -\")) {\n                result -= operand.get(i + 1);\n            } else if\
    \ (op.get(i).equals(\"*\")) {\n                result *= operand.get(i + 1);\n\
    \            } else if (op.get(i).equals(\"//\")) {\n                result /=\
    \ operand.get(i + 1);\n            } else if (op.get(i).equals(\"**\")) {\n  \
    \              result = (long) Math.pow(result, operand.get(i + 1));\n       \
    \     }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpprvi2_bh.java:49)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        //\
    \ Write your code here\n        // To print results to the standard output you\
    \ can use System.out.println()\n        // Example: System.out.println(\"Hello\
    \ world!\");\n        long result = operand.get(0);\n        for (int i = 0; i\
    \ < op.size(); i++) {\n            if (op.get(i).equals(\"+\")) {\n          \
    \      result += operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    -\")) {\n                result -= operand.get(i + 1);\n            } else if\
    \ (op.get(i).equals(\"*\")) {\n                result *= operand.get(i + 1);\n\
    \            } else if (op.get(i).equals(\"//\")) {\n                result /=\
    \ operand.get(i + 1);\n            } else if (op.get(i).equals(\"**\")) {\n  \
    \              result = (long) Math.pow(result, operand.get(i + 1));\n       \
    \     }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpprvi2_bh.java:49)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        //\
    \ Write your code here\n        // To print results to the standard output you\
    \ can use System.out.println()\n        // Example: System.out.println(\"Hello\
    \ world!\");\n        long result = operand.get(0);\n        for (int i = 0; i\
    \ < op.size(); i++) {\n            if (op.get(i).equals(\"+\")) {\n          \
    \      result += operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    -\")) {\n                result -= operand.get(i + 1);\n            } else if\
    \ (op.get(i).equals(\"*\")) {\n                result *= operand.get(i + 1);\n\
    \            } else if (op.get(i).equals(\"//\")) {\n                result /=\
    \ operand.get(i + 1);\n            } else if (op.get(i).equals(\"**\")) {\n  \
    \              result = (long) Math.pow(result, operand.get(i + 1));\n       \
    \     }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpprvi2_bh.java:49)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        //\
    \ Write your code here\n        // To print results to the standard output you\
    \ can use System.out.println()\n        // Example: System.out.println(\"Hello\
    \ world!\");\n        long result = operand.get(0);\n        for (int i = 0; i\
    \ < op.size(); i++) {\n            if (op.get(i).equals(\"+\")) {\n          \
    \      result += operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    -\")) {\n                result -= operand.get(i + 1);\n            } else if\
    \ (op.get(i).equals(\"*\")) {\n                result *= operand.get(i + 1);\n\
    \            } else if (op.get(i).equals(\"//\")) {\n                result /=\
    \ operand.get(i + 1);\n            } else if (op.get(i).equals(\"**\")) {\n  \
    \              result = (long) Math.pow(result, operand.get(i + 1));\n       \
    \     }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpprvi2_bh.java:49)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        //\
    \ Write your code here\n        // To print results to the standard output you\
    \ can use System.out.println()\n        // Example: System.out.println(\"Hello\
    \ world!\");\n        long result = operand.get(0);\n        for (int i = 0; i\
    \ < op.size(); i++) {\n            if (op.get(i).equals(\"+\")) {\n          \
    \      result += operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    -\")) {\n                result -= operand.get(i + 1);\n            } else if\
    \ (op.get(i).equals(\"*\")) {\n                result *= operand.get(i + 1);\n\
    \            } else if (op.get(i).equals(\"//\")) {\n                result /=\
    \ operand.get(i + 1);\n            } else if (op.get(i).equals(\"**\")) {\n  \
    \              result = (long) Math.pow(result, operand.get(i + 1));\n       \
    \     }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpprvi2_bh.java:49)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        //\
    \ Write your code here\n        // To print results to the standard output you\
    \ can use System.out.println()\n        // Example: System.out.println(\"Hello\
    \ world!\");\n        long result = operand.get(0);\n        for (int i = 0; i\
    \ < op.size(); i++) {\n            if (op.get(i).equals(\"+\")) {\n          \
    \      result += operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    -\")) {\n                result -= operand.get(i + 1);\n            } else if\
    \ (op.get(i).equals(\"*\")) {\n                result *= operand.get(i + 1);\n\
    \            } else if (op.get(i).equals(\"//\")) {\n                result /=\
    \ operand.get(i + 1);\n            } else if (op.get(i).equals(\"**\")) {\n  \
    \              result = (long) Math.pow(result, operand.get(i + 1));\n       \
    \     }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpprvi2_bh.java:49)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        //\
    \ Write your code here\n        // To print results to the standard output you\
    \ can use System.out.println()\n        // Example: System.out.println(\"Hello\
    \ world!\");\n        long result = operand.get(0);\n        for (int i = 0; i\
    \ < op.size(); i++) {\n            if (op.get(i).equals(\"+\")) {\n          \
    \      result += operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    -\")) {\n                result -= operand.get(i + 1);\n            } else if\
    \ (op.get(i).equals(\"*\")) {\n                result *= operand.get(i + 1);\n\
    \            } else if (op.get(i).equals(\"//\")) {\n                result /=\
    \ operand.get(i + 1);\n            } else if (op.get(i).equals(\"**\")) {\n  \
    \              result = (long) Math.pow(result, operand.get(i + 1));\n       \
    \     }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpprvi2_bh.java:49)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        //\
    \ Write your code here\n        // To print results to the standard output you\
    \ can use System.out.println()\n        // Example: System.out.println(\"Hello\
    \ world!\");\n        long result = operand.get(0);\n        for (int i = 0; i\
    \ < op.size(); i++) {\n            if (op.get(i).equals(\"+\")) {\n          \
    \      result += operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    -\")) {\n                result -= operand.get(i + 1);\n            } else if\
    \ (op.get(i).equals(\"*\")) {\n                result *= operand.get(i + 1);\n\
    \            } else if (op.get(i).equals(\"//\")) {\n                result /=\
    \ operand.get(i + 1);\n            } else if (op.get(i).equals(\"**\")) {\n  \
    \              result = (long) Math.pow(result, operand.get(i + 1));\n       \
    \     }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpprvi2_bh.java:49)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        //\
    \ Write your code here\n        // To print results to the standard output you\
    \ can use System.out.println()\n        // Example: System.out.println(\"Hello\
    \ world!\");\n        long result = operand.get(0);\n        for (int i = 0; i\
    \ < op.size(); i++) {\n            if (op.get(i).equals(\"+\")) {\n          \
    \      result += operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    -\")) {\n                result -= operand.get(i + 1);\n            } else if\
    \ (op.get(i).equals(\"*\")) {\n                result *= operand.get(i + 1);\n\
    \            } else if (op.get(i).equals(\"//\")) {\n                result /=\
    \ operand.get(i + 1);\n            } else if (op.get(i).equals(\"**\")) {\n  \
    \              result = (long) Math.pow(result, operand.get(i + 1));\n       \
    \     }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpprvi2_bh.java:49)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        //\
    \ Write your code here\n        // To print results to the standard output you\
    \ can use System.out.println()\n        // Example: System.out.println(\"Hello\
    \ world!\");\n        long result = operand.get(0);\n        for (int i = 0; i\
    \ < op.size(); i++) {\n            if (op.get(i).equals(\"+\")) {\n          \
    \      result += operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    -\")) {\n                result -= operand.get(i + 1);\n            } else if\
    \ (op.get(i).equals(\"*\")) {\n                result *= operand.get(i + 1);\n\
    \            } else if (op.get(i).equals(\"//\")) {\n                result /=\
    \ operand.get(i + 1);\n            } else if (op.get(i).equals(\"**\")) {\n  \
    \              result = (long) Math.pow(result, operand.get(i + 1));\n       \
    \     }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpprvi2_bh.java:49)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        //\
    \ Write your code here\n        // To print results to the standard output you\
    \ can use System.out.println()\n        // Example: System.out.println(\"Hello\
    \ world!\");\n        long result = operand.get(0);\n        for (int i = 0; i\
    \ < op.size(); i++) {\n            if (op.get(i).equals(\"+\")) {\n          \
    \      result += operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    -\")) {\n                result -= operand.get(i + 1);\n            } else if\
    \ (op.get(i).equals(\"*\")) {\n                result *= operand.get(i + 1);\n\
    \            } else if (op.get(i).equals(\"//\")) {\n                result /=\
    \ operand.get(i + 1);\n            } else if (op.get(i).equals(\"**\")) {\n  \
    \              result = (long) Math.pow(result, operand.get(i + 1));\n       \
    \     }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpprvi2_bh.java:49)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        //\
    \ Write your code here\n        // To print results to the standard output you\
    \ can use System.out.println()\n        // Example: System.out.println(\"Hello\
    \ world!\");\n        long result = operand.get(0);\n        for (int i = 0; i\
    \ < op.size(); i++) {\n            if (op.get(i).equals(\"+\")) {\n          \
    \      result += operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    -\")) {\n                result -= operand.get(i + 1);\n            } else if\
    \ (op.get(i).equals(\"*\")) {\n                result *= operand.get(i + 1);\n\
    \            } else if (op.get(i).equals(\"//\")) {\n                result /=\
    \ operand.get(i + 1);\n            } else if (op.get(i).equals(\"**\")) {\n  \
    \              result = (long) Math.pow(result, operand.get(i + 1));\n       \
    \     }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpprvi2_bh.java:49)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        //\
    \ Write your code here\n        // To print results to the standard output you\
    \ can use System.out.println()\n        // Example: System.out.println(\"Hello\
    \ world!\");\n        long result = operand.get(0);\n        for (int i = 0; i\
    \ < op.size(); i++) {\n            if (op.get(i).equals(\"+\")) {\n          \
    \      result += operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    -\")) {\n                result -= operand.get(i + 1);\n            } else if\
    \ (op.get(i).equals(\"*\")) {\n                result *= operand.get(i + 1);\n\
    \            } else if (op.get(i).equals(\"//\")) {\n                result /=\
    \ operand.get(i + 1);\n            } else if (op.get(i).equals(\"**\")) {\n  \
    \              result = (long) Math.pow(result, operand.get(i + 1));\n       \
    \     }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpprvi2_bh.java:49)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        //\
    \ Write your code here\n        // To print results to the standard output you\
    \ can use System.out.println()\n        // Example: System.out.println(\"Hello\
    \ world!\");\n        long result = operand.get(0);\n        for (int i = 0; i\
    \ < op.size(); i++) {\n            if (op.get(i).equals(\"+\")) {\n          \
    \      result += operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    -\")) {\n                result -= operand.get(i + 1);\n            } else if\
    \ (op.get(i).equals(\"*\")) {\n                result *= operand.get(i + 1);\n\
    \            } else if (op.get(i).equals(\"//\")) {\n                result /=\
    \ operand.get(i + 1);\n            } else if (op.get(i).equals(\"**\")) {\n  \
    \              result = (long) Math.pow(result, operand.get(i + 1));\n       \
    \     }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpprvi2_bh.java:49)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        //\
    \ Write your code here\n        // To print results to the standard output you\
    \ can use System.out.println()\n        // Example: System.out.println(\"Hello\
    \ world!\");\n        long result = operand.get(0);\n        for (int i = 0; i\
    \ < op.size(); i++) {\n            if (op.get(i).equals(\"+\")) {\n          \
    \      result += operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    -\")) {\n                result -= operand.get(i + 1);\n            } else if\
    \ (op.get(i).equals(\"*\")) {\n                result *= operand.get(i + 1);\n\
    \            } else if (op.get(i).equals(\"//\")) {\n                result /=\
    \ operand.get(i + 1);\n            } else if (op.get(i).equals(\"**\")) {\n  \
    \              result = (long) Math.pow(result, operand.get(i + 1));\n       \
    \     }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpprvi2_bh.java:49)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        //\
    \ Write your code here\n        // To print results to the standard output you\
    \ can use System.out.println()\n        // Example: System.out.println(\"Hello\
    \ world!\");\n        long result = operand.get(0);\n        for (int i = 0; i\
    \ < op.size(); i++) {\n            if (op.get(i).equals(\"+\")) {\n          \
    \      result += operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    -\")) {\n                result -= operand.get(i + 1);\n            } else if\
    \ (op.get(i).equals(\"*\")) {\n                result *= operand.get(i + 1);\n\
    \            } else if (op.get(i).equals(\"//\")) {\n                result /=\
    \ operand.get(i + 1);\n            } else if (op.get(i).equals(\"**\")) {\n  \
    \              result = (long) Math.pow(result, operand.get(i + 1));\n       \
    \     }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpprvi2_bh.java:49)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        //\
    \ Write your code here\n        // To print results to the standard output you\
    \ can use System.out.println()\n        // Example: System.out.println(\"Hello\
    \ world!\");\n        long result = operand.get(0);\n        for (int i = 0; i\
    \ < op.size(); i++) {\n            if (op.get(i).equals(\"+\")) {\n          \
    \      result += operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    -\")) {\n                result -= operand.get(i + 1);\n            } else if\
    \ (op.get(i).equals(\"*\")) {\n                result *= operand.get(i + 1);\n\
    \            } else if (op.get(i).equals(\"//\")) {\n                result /=\
    \ operand.get(i + 1);\n            } else if (op.get(i).equals(\"**\")) {\n  \
    \              result = (long) Math.pow(result, operand.get(i + 1));\n       \
    \     }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpprvi2_bh.java:49)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        //\
    \ Write your code here\n        // To print results to the standard output you\
    \ can use System.out.println()\n        // Example: System.out.println(\"Hello\
    \ world!\");\n        long result = operand.get(0);\n        for (int i = 0; i\
    \ < op.size(); i++) {\n            if (op.get(i).equals(\"+\")) {\n          \
    \      result += operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    -\")) {\n                result -= operand.get(i + 1);\n            } else if\
    \ (op.get(i).equals(\"*\")) {\n                result *= operand.get(i + 1);\n\
    \            } else if (op.get(i).equals(\"//\")) {\n                result /=\
    \ operand.get(i + 1);\n            } else if (op.get(i).equals(\"**\")) {\n  \
    \              result = (long) Math.pow(result, operand.get(i + 1));\n       \
    \     }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpprvi2_bh.java:49)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        //\
    \ Write your code here\n        // To print results to the standard output you\
    \ can use System.out.println()\n        // Example: System.out.println(\"Hello\
    \ world!\");\n        long result = operand.get(0);\n        for (int i = 0; i\
    \ < op.size(); i++) {\n            if (op.get(i).equals(\"+\")) {\n          \
    \      result += operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    -\")) {\n                result -= operand.get(i + 1);\n            } else if\
    \ (op.get(i).equals(\"*\")) {\n                result *= operand.get(i + 1);\n\
    \            } else if (op.get(i).equals(\"//\")) {\n                result /=\
    \ operand.get(i + 1);\n            } else if (op.get(i).equals(\"**\")) {\n  \
    \              result = (long) Math.pow(result, operand.get(i + 1));\n       \
    \     }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpprvi2_bh.java:49)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        //\
    \ Write your code here\n        // To print results to the standard output you\
    \ can use System.out.println()\n        // Example: System.out.println(\"Hello\
    \ world!\");\n        long result = operand.get(0);\n        for (int i = 0; i\
    \ < op.size(); i++) {\n            if (op.get(i).equals(\"+\")) {\n          \
    \      result += operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    -\")) {\n                result -= operand.get(i + 1);\n            } else if\
    \ (op.get(i).equals(\"*\")) {\n                result *= operand.get(i + 1);\n\
    \            } else if (op.get(i).equals(\"//\")) {\n                result /=\
    \ operand.get(i + 1);\n            } else if (op.get(i).equals(\"**\")) {\n  \
    \              result = (long) Math.pow(result, operand.get(i + 1));\n       \
    \     }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpprvi2_bh.java:49)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        //\
    \ Write your code here\n        // To print results to the standard output you\
    \ can use System.out.println()\n        // Example: System.out.println(\"Hello\
    \ world!\");\n        long result = operand.get(0);\n        for (int i = 0; i\
    \ < op.size(); i++) {\n            if (op.get(i).equals(\"+\")) {\n          \
    \      result += operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    -\")) {\n                result -= operand.get(i + 1);\n            } else if\
    \ (op.get(i).equals(\"*\")) {\n                result *= operand.get(i + 1);\n\
    \            } else if (op.get(i).equals(\"//\")) {\n                result /=\
    \ operand.get(i + 1);\n            } else if (op.get(i).equals(\"**\")) {\n  \
    \              result = (long) Math.pow(result, operand.get(i + 1));\n       \
    \     }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpprvi2_bh.java:49)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        //\
    \ Write your code here\n        // To print results to the standard output you\
    \ can use System.out.println()\n        // Example: System.out.println(\"Hello\
    \ world!\");\n        long result = operand.get(0);\n        for (int i = 0; i\
    \ < op.size(); i++) {\n            if (op.get(i).equals(\"+\")) {\n          \
    \      result += operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    -\")) {\n                result -= operand.get(i + 1);\n            } else if\
    \ (op.get(i).equals(\"*\")) {\n                result *= operand.get(i + 1);\n\
    \            } else if (op.get(i).equals(\"//\")) {\n                result /=\
    \ operand.get(i + 1);\n            } else if (op.get(i).equals(\"**\")) {\n  \
    \              result = (long) Math.pow(result, operand.get(i + 1));\n       \
    \     }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpprvi2_bh.java:49)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        //\
    \ Write your code here\n        // To print results to the standard output you\
    \ can use System.out.println()\n        // Example: System.out.println(\"Hello\
    \ world!\");\n        long result = operand.get(0);\n        for (int i = 0; i\
    \ < op.size(); i++) {\n            if (op.get(i).equals(\"+\")) {\n          \
    \      result += operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    -\")) {\n                result -= operand.get(i + 1);\n            } else if\
    \ (op.get(i).equals(\"*\")) {\n                result *= operand.get(i + 1);\n\
    \            } else if (op.get(i).equals(\"//\")) {\n                result /=\
    \ operand.get(i + 1);\n            } else if (op.get(i).equals(\"**\")) {\n  \
    \              result = (long) Math.pow(result, operand.get(i + 1));\n       \
    \     }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpprvi2_bh.java:49)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = operand.get(0);\n        for (int i = 0; i < op.size(); i++) {\n  \
    \          if (op.get(i).equals(\"+\")) {\n                result += operand.get(i\
    \ + 1);\n            } else if (op.get(i).equals(\"-\")) {\n                result\
    \ -= operand.get(i + 1);\n            } else if (op.get(i).equals(\"*\")) {\n\
    \                result *= operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    //\")) {\n                result /= operand.get(i + 1);\n            } else if\
    \ (op.get(i).equals(\"**\")) {\n                result = (long) Math.pow(result,\
    \ operand.get(i + 1));\n            }\n        }\n        return result;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphpxurzdm.java:46)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        //\
    \ Write your code here\n        // To print results to the standard output you\
    \ can use System.out.println()\n        // Example: System.out.println(\"Hello\
    \ world!\");\n        long result = operand.get(0);\n        for (int i = 0; i\
    \ < op.size(); i++) {\n            if (op.get(i).equals(\"+\")) {\n          \
    \      result += operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    -\")) {\n                result -= operand.get(i + 1);\n            } else if\
    \ (op.get(i).equals(\"*\")) {\n                result *= operand.get(i + 1);\n\
    \            } else if (op.get(i).equals(\"//\")) {\n                result /=\
    \ operand.get(i + 1);\n            } else if (op.get(i).equals(\"**\")) {\n  \
    \              result = (long) Math.pow(result, operand.get(i + 1));\n       \
    \     }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpprvi2_bh.java:49)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        //\
    \ Write your code here\n        // To print results to the standard output you\
    \ can use System.out.println()\n        // Example: System.out.println(\"Hello\
    \ world!\");\n        long result = operand.get(0);\n        for (int i = 0; i\
    \ < op.size(); i++) {\n            if (op.get(i).equals(\"+\")) {\n          \
    \      result += operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    -\")) {\n                result -= operand.get(i + 1);\n            } else if\
    \ (op.get(i).equals(\"*\")) {\n                result *= operand.get(i + 1);\n\
    \            } else if (op.get(i).equals(\"//\")) {\n                result /=\
    \ operand.get(i + 1);\n            } else if (op.get(i).equals(\"**\")) {\n  \
    \              result = (long) Math.pow(result, operand.get(i + 1));\n       \
    \     }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpprvi2_bh.java:49)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        //\
    \ Write your code here\n        // To print results to the standard output you\
    \ can use System.out.println()\n        // Example: System.out.println(\"Hello\
    \ world!\");\n        long result = operand.get(0);\n        for (int i = 0; i\
    \ < op.size(); i++) {\n            if (op.get(i).equals(\"+\")) {\n          \
    \      result += operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    -\")) {\n                result -= operand.get(i + 1);\n            } else if\
    \ (op.get(i).equals(\"*\")) {\n                result *= operand.get(i + 1);\n\
    \            } else if (op.get(i).equals(\"//\")) {\n                result /=\
    \ operand.get(i + 1);\n            } else if (op.get(i).equals(\"**\")) {\n  \
    \              result = (long) Math.pow(result, operand.get(i + 1));\n       \
    \     }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpprvi2_bh.java:49)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        //\
    \ Write your code here\n        // To print results to the standard output you\
    \ can use System.out.println()\n        // Example: System.out.println(\"Hello\
    \ world!\");\n        long result = operand.get(0);\n        for (int i = 0; i\
    \ < op.size(); i++) {\n            if (op.get(i).equals(\"+\")) {\n          \
    \      result += operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    -\")) {\n                result -= operand.get(i + 1);\n            } else if\
    \ (op.get(i).equals(\"*\")) {\n                result *= operand.get(i + 1);\n\
    \            } else if (op.get(i).equals(\"//\")) {\n                result /=\
    \ operand.get(i + 1);\n            } else if (op.get(i).equals(\"**\")) {\n  \
    \              result = (long) Math.pow(result, operand.get(i + 1));\n       \
    \     }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpprvi2_bh.java:49)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        //\
    \ Write your code here\n        // To print results to the standard output you\
    \ can use System.out.println()\n        // Example: System.out.println(\"Hello\
    \ world!\");\n        long result = operand.get(0);\n        for (int i = 0; i\
    \ < op.size(); i++) {\n            if (op.get(i).equals(\"+\")) {\n          \
    \      result += operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    -\")) {\n                result -= operand.get(i + 1);\n            } else if\
    \ (op.get(i).equals(\"*\")) {\n                result *= operand.get(i + 1);\n\
    \            } else if (op.get(i).equals(\"//\")) {\n                result /=\
    \ operand.get(i + 1);\n            } else if (op.get(i).equals(\"**\")) {\n  \
    \              result = (long) Math.pow(result, operand.get(i + 1));\n       \
    \     }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpprvi2_bh.java:49)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        //\
    \ Write your code here\n        // To print results to the standard output you\
    \ can use System.out.println()\n        // Example: System.out.println(\"Hello\
    \ world!\");\n        long result = operand.get(0);\n        for (int i = 0; i\
    \ < op.size(); i++) {\n            switch (op.get(i)) {\n                case\
    \ \"+\":\n                    result += operand.get(i + 1);\n                \
    \    break;\n                case \"-\":\n                    result -= operand.get(i\
    \ + 1);\n                    break;\n                case \"*\":\n           \
    \         result *= operand.get(i + 1);\n                    break;\n        \
    \        case \"//\":\n                    result /= operand.get(i + 1);\n   \
    \                 break;\n                case \"**\":\n                    result\
    \ = (long) Math.pow(result, operand.get(i + 1));\n                    break;\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpn1f0usqr.java:55)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        //\
    \ Write your code here\n        // To print results to the standard output you\
    \ can use System.out.println()\n        // Example: System.out.println(\"Hello\
    \ world!\");\n        long result = operand.get(0);\n        for (int i = 0; i\
    \ < op.size(); i++) {\n            if (op.get(i).equals(\"+\")) {\n          \
    \      result += operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    -\")) {\n                result -= operand.get(i + 1);\n            } else if\
    \ (op.get(i).equals(\"*\")) {\n                result *= operand.get(i + 1);\n\
    \            } else if (op.get(i).equals(\"//\")) {\n                result /=\
    \ operand.get(i + 1);\n            } else if (op.get(i).equals(\"**\")) {\n  \
    \              result = (long) Math.pow(result, operand.get(i + 1));\n       \
    \     }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpprvi2_bh.java:49)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        //\
    \ Write your code here\n        // To print results to the standard output you\
    \ can use System.out.println()\n        // Example: System.out.println(\"Hello\
    \ world!\");\n        long result = operand.get(0);\n        for (int i = 0; i\
    \ < op.size(); i++) {\n            if (op.get(i).equals(\"+\")) {\n          \
    \      result += operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    -\")) {\n                result -= operand.get(i + 1);\n            } else if\
    \ (op.get(i).equals(\"*\")) {\n                result *= operand.get(i + 1);\n\
    \            } else if (op.get(i).equals(\"//\")) {\n                result /=\
    \ operand.get(i + 1);\n            } else if (op.get(i).equals(\"**\")) {\n  \
    \              result = (long) Math.pow(result, operand.get(i + 1));\n       \
    \     }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpprvi2_bh.java:49)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        //\
    \ Write your code here\n        // To print results to the standard output you\
    \ can use System.out.println()\n        // Example: System.out.println(\"Hello\
    \ world!\");\n        long result = operand.get(0);\n        for (int i = 0; i\
    \ < op.size(); i++) {\n            switch (op.get(i)) {\n                case\
    \ \"+\":\n                    result += operand.get(i + 1);\n                \
    \    break;\n                case \"-\":\n                    result -= operand.get(i\
    \ + 1);\n                    break;\n                case \"*\":\n           \
    \         result *= operand.get(i + 1);\n                    break;\n        \
    \        case \"//\":\n                    result /= operand.get(i + 1);\n   \
    \                 break;\n                case \"**\":\n                    result\
    \ = (long) Math.pow(result, operand.get(i + 1));\n                    break;\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpn1f0usqr.java:55)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        //\
    \ Write your code here\n        // To print results to the standard output you\
    \ can use System.out.println()\n        // Example: System.out.println(\"Hello\
    \ world!\");\n        long result = operand.get(0);\n        for (int i = 0; i\
    \ < op.size(); i++) {\n            switch (op.get(i)) {\n                case\
    \ \"+\":\n                    result += operand.get(i + 1);\n                \
    \    break;\n                case \"-\":\n                    result -= operand.get(i\
    \ + 1);\n                    break;\n                case \"*\":\n           \
    \         result *= operand.get(i + 1);\n                    break;\n        \
    \        case \"//\":\n                    result /= operand.get(i + 1);\n   \
    \                 break;\n                case \"**\":\n                    result\
    \ = (long) Math.pow(result, operand.get(i + 1));\n                    break;\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpn1f0usqr.java:55)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        //\
    \ Write your code here\n        // To print results to the standard output you\
    \ can use System.out.println()\n        // Example: System.out.println(\"Hello\
    \ world!\");\n        long result = operand.get(0);\n        for (int i = 0; i\
    \ < op.size(); i++) {\n            if (op.get(i).equals(\"+\")) {\n          \
    \      result += operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    -\")) {\n                result -= operand.get(i + 1);\n            } else if\
    \ (op.get(i).equals(\"*\")) {\n                result *= operand.get(i + 1);\n\
    \            } else if (op.get(i).equals(\"//\")) {\n                result /=\
    \ operand.get(i + 1);\n            } else if (op.get(i).equals(\"**\")) {\n  \
    \              result = (long) Math.pow(result, operand.get(i + 1));\n       \
    \     }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpprvi2_bh.java:49)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = operand.get(0);\n        for (int i = 0; i < op.size(); i++) {\n  \
    \          if (op.get(i).equals(\"+\")) {\n                result += operand.get(i\
    \ + 1);\n            } else if (op.get(i).equals(\"-\")) {\n                result\
    \ -= operand.get(i + 1);\n            } else if (op.get(i).equals(\"*\")) {\n\
    \                result *= operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    //\")) {\n                result /= operand.get(i + 1);\n            } else if\
    \ (op.get(i).equals(\"**\")) {\n                result = (long) Math.pow(result,\
    \ operand.get(i + 1));\n            }\n        }\n        return result;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphpxurzdm.java:46)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        //\
    \ Write your code here\n        // To print results to the standard output you\
    \ can use System.out.println()\n        // Example: System.out.println(\"Hello\
    \ world!\");\n        long result = operand.get(0);\n        for (int i = 0; i\
    \ < op.size(); i++) {\n            if (op.get(i).equals(\"+\")) {\n          \
    \      result += operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    -\")) {\n                result -= operand.get(i + 1);\n            } else if\
    \ (op.get(i).equals(\"*\")) {\n                result *= operand.get(i + 1);\n\
    \            } else if (op.get(i).equals(\"//\")) {\n                result /=\
    \ operand.get(i + 1);\n            } else if (op.get(i).equals(\"**\")) {\n  \
    \              result = (long) Math.pow(result, operand.get(i + 1));\n       \
    \     }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpprvi2_bh.java:49)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        //\
    \ Write your code here\n        // To print results to the standard output you\
    \ can use System.out.println()\n        // Example: System.out.println(\"Hello\
    \ world!\");\n        long result = operand.get(0);\n        for (int i = 0; i\
    \ < op.size(); i++) {\n            if (op.get(i).equals(\"+\")) {\n          \
    \      result += operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    -\")) {\n                result -= operand.get(i + 1);\n            } else if\
    \ (op.get(i).equals(\"*\")) {\n                result *= operand.get(i + 1);\n\
    \            } else if (op.get(i).equals(\"//\")) {\n                result /=\
    \ operand.get(i + 1);\n            } else if (op.get(i).equals(\"**\")) {\n  \
    \              result = (long) Math.pow(result, operand.get(i + 1));\n       \
    \     }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpprvi2_bh.java:49)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        //\
    \ Write your code here\n        // To print results to the standard output you\
    \ can use System.out.println()\n        // Example: System.out.println(\"Hello\
    \ world!\");\n        return 0;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\"\
    , (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpddbqlpaj.java:34)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        //\
    \ Write your code here\n        // To print results to the standard output you\
    \ can use System.out.println()\n        // Example: System.out.println(\"Hello\
    \ world!\");\n        long result = operand.get(0);\n        for (int i = 0; i\
    \ < op.size(); i++) {\n            switch (op.get(i)) {\n                case\
    \ \"+\":\n                    result += operand.get(i + 1);\n                \
    \    break;\n                case \"-\":\n                    result -= operand.get(i\
    \ + 1);\n                    break;\n                case \"*\":\n           \
    \         result *= operand.get(i + 1);\n                    break;\n        \
    \        case \"//\":\n                    result /= operand.get(i + 1);\n   \
    \                 break;\n                case \"**\":\n                    result\
    \ = (long) Math.pow(result, operand.get(i + 1));\n                    break;\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpn1f0usqr.java:55)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = operand.get(0);\n        for (int i = 0; i < op.size(); i++) {\n  \
    \          if (op.get(i).equals(\"+\")) {\n                result += operand.get(i\
    \ + 1);\n            } else if (op.get(i).equals(\"-\")) {\n                result\
    \ -= operand.get(i + 1);\n            } else if (op.get(i).equals(\"*\")) {\n\
    \                result *= operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    //\")) {\n                result /= operand.get(i + 1);\n            } else if\
    \ (op.get(i).equals(\"**\")) {\n                result = (long) Math.pow(result,\
    \ operand.get(i + 1));\n            }\n        }\n        return result;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphpxurzdm.java:46)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        //\
    \ Write your code here\n        // To print results to the standard output you\
    \ can use System.out.println()\n        // Example: System.out.println(\"Hello\
    \ world!\");\n        long result = operand.get(0);\n        for (int i = 0; i\
    \ < op.size(); i++) {\n            if (op.get(i).equals(\"+\")) {\n          \
    \      result += operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    -\")) {\n                result -= operand.get(i + 1);\n            } else if\
    \ (op.get(i).equals(\"*\")) {\n                result *= operand.get(i + 1);\n\
    \            } else if (op.get(i).equals(\"//\")) {\n                result /=\
    \ operand.get(i + 1);\n            } else if (op.get(i).equals(\"**\")) {\n  \
    \              result = (long) Math.pow(result, operand.get(i + 1));\n       \
    \     }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpprvi2_bh.java:49)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = operand.get(0);\n        for (int i = 0; i < op.size(); i++) {\n  \
    \          switch (op.get(i)) {\n                case \"+\":\n               \
    \     result += operand.get(i + 1);\n                    break;\n            \
    \    case \"-\":\n                    result -= operand.get(i + 1);\n        \
    \            break;\n                case \"*\":\n                    result *=\
    \ operand.get(i + 1);\n                    break;\n                case \"//\"\
    :\n                    result /= operand.get(i + 1);\n                    break;\n\
    \                case \"**\":\n                    result = (long) Math.pow(result,\
    \ operand.get(i + 1));\n                    break;\n            }\n        }\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"\
    *\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxuz10xw7.java:52)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = operand.get(0);\n        for (int i = 0; i < op.size(); i++) {\n  \
    \          if (op.get(i).equals(\"+\")) {\n                result += operand.get(i\
    \ + 1);\n            } else if (op.get(i).equals(\"-\")) {\n                result\
    \ -= operand.get(i + 1);\n            } else if (op.get(i).equals(\"*\")) {\n\
    \                result *= operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    //\")) {\n                result /= operand.get(i + 1);\n            } else if\
    \ (op.get(i).equals(\"**\")) {\n                result = (long) Math.pow(result,\
    \ operand.get(i + 1));\n            }\n        }\n        return result;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphpxurzdm.java:46)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = operand.get(0);\n        for (int i = 0; i < op.size(); i++) {\n  \
    \          if (op.get(i).equals(\"+\")) {\n                result += operand.get(i\
    \ + 1);\n            } else if (op.get(i).equals(\"-\")) {\n                result\
    \ -= operand.get(i + 1);\n            } else if (op.get(i).equals(\"*\")) {\n\
    \                result *= operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    //\")) {\n                result /= operand.get(i + 1);\n            } else if\
    \ (op.get(i).equals(\"**\")) {\n                result = (long) Math.pow(result,\
    \ operand.get(i + 1));\n            }\n        }\n        return result;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphpxurzdm.java:46)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        //\
    \ Write your code here\n        // To print results to the standard output you\
    \ can use System.out.println()\n        // Example: System.out.println(\"Hello\
    \ world!\");\n        long result = operand.get(0);\n        for (int i = 0; i\
    \ < op.size(); i++) {\n            if (op.get(i).equals(\"+\")) {\n          \
    \      result += operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    -\")) {\n                result -= operand.get(i + 1);\n            } else if\
    \ (op.get(i).equals(\"*\")) {\n                result *= operand.get(i + 1);\n\
    \            } else if (op.get(i).equals(\"//\")) {\n                result /=\
    \ operand.get(i + 1);\n            } else if (op.get(i).equals(\"**\")) {\n  \
    \              result = (long) Math.pow(result, operand.get(i + 1));\n       \
    \     }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpprvi2_bh.java:49)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        //\
    \ Write your code here\n        // To print results to the standard output you\
    \ can use System.out.println()\n        // Example: System.out.println(\"Hello\
    \ world!\");\n        long result = operand.get(0);\n        for (int i = 0; i\
    \ < op.size(); i++) {\n            switch (op.get(i)) {\n                case\
    \ \"+\":\n                    result += operand.get(i + 1);\n                \
    \    break;\n                case \"-\":\n                    result -= operand.get(i\
    \ + 1);\n                    break;\n                case \"*\":\n           \
    \         result *= operand.get(i + 1);\n                    break;\n        \
    \        case \"//\":\n                    result /= operand.get(i + 1);\n   \
    \                 break;\n                case \"**\":\n                    result\
    \ = (long) Math.pow(result, operand.get(i + 1));\n                    break;\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpn1f0usqr.java:55)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = operand.get(0);\n        for (int i = 0; i < op.size(); i++) {\n  \
    \          switch (op.get(i)) {\n                case \"+\":\n               \
    \     result += operand.get(i + 1);\n                    break;\n            \
    \    case \"-\":\n                    result -= operand.get(i + 1);\n        \
    \            break;\n                case \"*\":\n                    result *=\
    \ operand.get(i + 1);\n                    break;\n                case \"//\"\
    :\n                    result /= operand.get(i + 1);\n                    break;\n\
    \                case \"**\":\n                    result = (long) Math.pow(result,\
    \ operand.get(i + 1));\n                    break;\n            }\n        }\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"\
    *\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxuz10xw7.java:52)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = operand.get(0);\n        for (int i = 0; i < op.size(); i++) {\n  \
    \          if (op.get(i).equals(\"+\")) {\n                result += operand.get(i\
    \ + 1);\n            } else if (op.get(i).equals(\"-\")) {\n                result\
    \ -= operand.get(i + 1);\n            } else if (op.get(i).equals(\"*\")) {\n\
    \                result *= operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    //\")) {\n                result /= operand.get(i + 1);\n            } else if\
    \ (op.get(i).equals(\"**\")) {\n                result = (long) Math.pow(result,\
    \ operand.get(i + 1));\n            }\n        }\n        return result;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphpxurzdm.java:46)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        //\
    \ Write your code here\n        // To print results to the standard output you\
    \ can use System.out.println()\n        // Example: System.out.println(\"Hello\
    \ world!\");\n        long result = operand.get(0);\n        for (int i = 0; i\
    \ < op.size(); i++) {\n            switch (op.get(i)) {\n                case\
    \ \"+\":\n                    result += operand.get(i + 1);\n                \
    \    break;\n                case \"-\":\n                    result -= operand.get(i\
    \ + 1);\n                    break;\n                case \"*\":\n           \
    \         result *= operand.get(i + 1);\n                    break;\n        \
    \        case \"//\":\n                    result /= operand.get(i + 1);\n   \
    \                 break;\n                case \"**\":\n                    result\
    \ = (long) Math.pow(result, operand.get(i + 1));\n                    break;\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpn1f0usqr.java:55)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        //\
    \ Write your code here\n        // To print results to the standard output you\
    \ can use System.out.println()\n        // Example: System.out.println(\"Hello\
    \ world!\");\n        long result = operand.get(0);\n        for (int i = 0; i\
    \ < op.size(); i++) {\n            if (op.get(i).equals(\"+\")) {\n          \
    \      result += operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    -\")) {\n                result -= operand.get(i + 1);\n            } else if\
    \ (op.get(i).equals(\"*\")) {\n                result *= operand.get(i + 1);\n\
    \            } else if (op.get(i).equals(\"//\")) {\n                result /=\
    \ operand.get(i + 1);\n            } else if (op.get(i).equals(\"**\")) {\n  \
    \              result = (long) Math.pow(result, operand.get(i + 1));\n       \
    \     }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpprvi2_bh.java:49)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        //\
    \ Write your code here\n        // To print results to the standard output you\
    \ can use System.out.println()\n        // Example: System.out.println(\"Hello\
    \ world!\");\n        long result = operand.get(0);\n        for (int i = 0; i\
    \ < op.size(); i++) {\n            if (op.get(i).equals(\"+\")) {\n          \
    \      result += operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    -\")) {\n                result -= operand.get(i + 1);\n            } else if\
    \ (op.get(i).equals(\"*\")) {\n                result *= operand.get(i + 1);\n\
    \            } else if (op.get(i).equals(\"//\")) {\n                result /=\
    \ operand.get(i + 1);\n            } else if (op.get(i).equals(\"**\")) {\n  \
    \              result = (long) Math.pow(result, operand.get(i + 1));\n       \
    \     }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpprvi2_bh.java:49)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        //\
    \ Write your code here\n        // To print results to the standard output you\
    \ can use System.out.println()\n        // Example: System.out.println(\"Hello\
    \ world!\");\n        long result = operand.get(0);\n        for (int i = 0; i\
    \ < op.size(); i++) {\n            if (op.get(i).equals(\"+\")) {\n          \
    \      result += operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    -\")) {\n                result -= operand.get(i + 1);\n            } else if\
    \ (op.get(i).equals(\"*\")) {\n                result *= operand.get(i + 1);\n\
    \            } else if (op.get(i).equals(\"//\")) {\n                result /=\
    \ operand.get(i + 1);\n            } else if (op.get(i).equals(\"**\")) {\n  \
    \              result = (long) Math.pow(result, operand.get(i + 1));\n       \
    \     }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpprvi2_bh.java:49)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        //\
    \ Write your code here\n        // To print results to the standard output you\
    \ can use System.out.println()\n        // Example: System.out.println(\"Hello\
    \ world!\");\n        long result = operand.get(0);\n        for (int i = 0; i\
    \ < op.size(); i++) {\n            if (op.get(i).equals(\"+\")) {\n          \
    \      result += operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    -\")) {\n                result -= operand.get(i + 1);\n            } else if\
    \ (op.get(i).equals(\"*\")) {\n                result *= operand.get(i + 1);\n\
    \            } else if (op.get(i).equals(\"//\")) {\n                result /=\
    \ operand.get(i + 1);\n            } else if (op.get(i).equals(\"**\")) {\n  \
    \              result = (long) Math.pow(result, operand.get(i + 1));\n       \
    \     }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpprvi2_bh.java:49)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        //\
    \ Write your code here\n        // To print results to the standard output you\
    \ can use System.out.println()\n        // Example: System.out.println(\"Hello\
    \ world!\");\n        long result = operand.get(0);\n        for (int i = 0; i\
    \ < op.size(); i++) {\n            if (op.get(i).equals(\"+\")) {\n          \
    \      result += operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    -\")) {\n                result -= operand.get(i + 1);\n            } else if\
    \ (op.get(i).equals(\"*\")) {\n                result *= operand.get(i + 1);\n\
    \            } else if (op.get(i).equals(\"//\")) {\n                result /=\
    \ operand.get(i + 1);\n            } else if (op.get(i).equals(\"**\")) {\n  \
    \              result = (long) Math.pow(result, operand.get(i + 1));\n       \
    \     }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpprvi2_bh.java:49)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = operand.get(0);\n        for (int i = 0; i < op.size(); i++) {\n  \
    \          switch (op.get(i)) {\n                case \"+\":\n               \
    \     result += operand.get(i + 1);\n                    break;\n            \
    \    case \"-\":\n                    result -= operand.get(i + 1);\n        \
    \            break;\n                case \"*\":\n                    result *=\
    \ operand.get(i + 1);\n                    break;\n                case \"//\"\
    :\n                    result /= operand.get(i + 1);\n                    break;\n\
    \                case \"**\":\n                    result = (long) Math.pow(result,\
    \ operand.get(i + 1));\n                    break;\n            }\n        }\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"\
    *\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxuz10xw7.java:52)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        //\
    \ Write your code here\n        // To print results to the standard output you\
    \ can use System.out.println()\n        // Example: System.out.println(\"Hello\
    \ world!\");\n        long result = operand.get(0);\n        for (int i = 0; i\
    \ < op.size(); i++) {\n            if (op.get(i).equals(\"+\")) {\n          \
    \      result += operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    -\")) {\n                result -= operand.get(i + 1);\n            } else if\
    \ (op.get(i).equals(\"*\")) {\n                result *= operand.get(i + 1);\n\
    \            } else if (op.get(i).equals(\"//\")) {\n                result /=\
    \ operand.get(i + 1);\n            } else if (op.get(i).equals(\"**\")) {\n  \
    \              result = (long) Math.pow(result, operand.get(i + 1));\n       \
    \     }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpprvi2_bh.java:49)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        //\
    \ Write your code here\n        // To print results to the standard output you\
    \ can use System.out.println()\n        // Example: System.out.println(\"Hello\
    \ world!\");\n        long result = operand.get(0);\n        for (int i = 0; i\
    \ < op.size(); i++) {\n            switch (op.get(i)) {\n                case\
    \ \"+\":\n                    result += operand.get(i + 1);\n                \
    \    break;\n                case \"-\":\n                    result -= operand.get(i\
    \ + 1);\n                    break;\n                case \"*\":\n           \
    \         result *= operand.get(i + 1);\n                    break;\n        \
    \        case \"//\":\n                    result /= operand.get(i + 1);\n   \
    \                 break;\n                case \"**\":\n                    result\
    \ = (long) Math.pow(result, operand.get(i + 1));\n                    break;\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpn1f0usqr.java:55)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        //\
    \ Write your code here\n        // To print results to the standard output you\
    \ can use System.out.println()\n        // Example: System.out.println(\"Hello\
    \ world!\");\n        long result = operand.get(0);\n        for (int i = 0; i\
    \ < op.size(); i++) {\n            if (op.get(i).equals(\"+\")) {\n          \
    \      result += operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    -\")) {\n                result -= operand.get(i + 1);\n            } else if\
    \ (op.get(i).equals(\"*\")) {\n                result *= operand.get(i + 1);\n\
    \            } else if (op.get(i).equals(\"//\")) {\n                result /=\
    \ operand.get(i + 1);\n            } else if (op.get(i).equals(\"**\")) {\n  \
    \              result = (long) Math.pow(result, operand.get(i + 1));\n       \
    \     }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpprvi2_bh.java:49)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = operand.get(0);\n        for (int i = 0; i < op.size(); i++) {\n  \
    \          if (op.get(i).equals(\"+\")) {\n                result += operand.get(i\
    \ + 1);\n            } else if (op.get(i).equals(\"-\")) {\n                result\
    \ -= operand.get(i + 1);\n            } else if (op.get(i).equals(\"*\")) {\n\
    \                result *= operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    //\")) {\n                result /= operand.get(i + 1);\n            } else if\
    \ (op.get(i).equals(\"**\")) {\n                result = (long) Math.pow(result,\
    \ operand.get(i + 1));\n            }\n        }\n        return result;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphpxurzdm.java:46)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        //\
    \ Write your code here\n        // To print results to the standard output you\
    \ can use System.out.println()\n        // Example: System.out.println(\"Hello\
    \ world!\");\n        long result = operand.get(0);\n        for (int i = 0; i\
    \ < op.size(); i++) {\n            switch (op.get(i)) {\n                case\
    \ \"+\":\n                    result += operand.get(i + 1);\n                \
    \    break;\n                case \"-\":\n                    result -= operand.get(i\
    \ + 1);\n                    break;\n                case \"*\":\n           \
    \         result *= operand.get(i + 1);\n                    break;\n        \
    \        case \"//\":\n                    result /= operand.get(i + 1);\n   \
    \                 break;\n                case \"**\":\n                    result\
    \ = (long) Math.pow(result, operand.get(i + 1));\n                    break;\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpn1f0usqr.java:55)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = operand.get(0);\n        for (int i = 0; i < op.size(); i++) {\n  \
    \          if (op.get(i).equals(\"+\")) {\n                result += operand.get(i\
    \ + 1);\n            } else if (op.get(i).equals(\"-\")) {\n                result\
    \ -= operand.get(i + 1);\n            } else if (op.get(i).equals(\"*\")) {\n\
    \                result *= operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    //\")) {\n                result /= operand.get(i + 1);\n            } else if\
    \ (op.get(i).equals(\"**\")) {\n                result = (long) Math.pow(result,\
    \ operand.get(i + 1));\n            }\n        }\n        return result;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphpxurzdm.java:46)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        //\
    \ Write your code here.\n        return 0;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplx69jpb6.java:32)\n"
  stdout: ''
  timestamp: 1659792415
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = operand.get(0);\n        for (int i = 0; i < op.size(); i++) {\n  \
    \          switch (op.get(i)) {\n                case \"+\":\n               \
    \     result += operand.get(i + 1);\n                    break;\n            \
    \    case \"-\":\n                    result -= operand.get(i + 1);\n        \
    \            break;\n                case \"*\":\n                    result *=\
    \ operand.get(i + 1);\n                    break;\n                case \"//\"\
    :\n                    result /= operand.get(i + 1);\n                    break;\n\
    \                case \"**\":\n                    result = (long) Math.pow(result,\
    \ operand.get(i + 1));\n                    break;\n            }\n        }\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"\
    *\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxuz10xw7.java:52)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = operand.get(0);\n        for (int i = 0; i < op.size(); i++) {\n  \
    \          if (op.get(i).equals(\"+\")) {\n                result += operand.get(i\
    \ + 1);\n            } else if (op.get(i).equals(\"-\")) {\n                result\
    \ -= operand.get(i + 1);\n            } else if (op.get(i).equals(\"*\")) {\n\
    \                result *= operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    //\")) {\n                result /= operand.get(i + 1);\n            } else if\
    \ (op.get(i).equals(\"**\")) {\n                result = (long) Math.pow(result,\
    \ operand.get(i + 1));\n            }\n        }\n        return result;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphpxurzdm.java:46)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        //\
    \ Write your code here\n        // To print results to the standard output you\
    \ can use System.out.println()\n        // Example: System.out.println(\"Hello\
    \ world!\");\n        long result = operand.get(0);\n        for (int i = 0; i\
    \ < op.size(); i++) {\n            if (op.get(i).equals(\"+\")) {\n          \
    \      result += operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    -\")) {\n                result -= operand.get(i + 1);\n            } else if\
    \ (op.get(i).equals(\"*\")) {\n                result *= operand.get(i + 1);\n\
    \            } else if (op.get(i).equals(\"//\")) {\n                result /=\
    \ operand.get(i + 1);\n            } else if (op.get(i).equals(\"**\")) {\n  \
    \              result = (long) Math.pow(result, operand.get(i + 1));\n       \
    \     }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpprvi2_bh.java:49)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        //\
    \ Write your code here\n        // To print results to the standard output you\
    \ can use System.out.println()\n        // Example: System.out.println(\"Hello\
    \ world!\");\n        long result = operand.get(0);\n        for (int i = 0; i\
    \ < op.size(); i++) {\n            if (op.get(i).equals(\"+\")) {\n          \
    \      result += operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    -\")) {\n                result -= operand.get(i + 1);\n            } else if\
    \ (op.get(i).equals(\"*\")) {\n                result *= operand.get(i + 1);\n\
    \            } else if (op.get(i).equals(\"//\")) {\n                result /=\
    \ operand.get(i + 1);\n            } else if (op.get(i).equals(\"**\")) {\n  \
    \              result = (long) Math.pow(result, operand.get(i + 1));\n       \
    \     }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpprvi2_bh.java:49)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        //\
    \ Write your code here\n        // To print results to the standard output you\
    \ can use System.out.println()\n        // Example: System.out.println(\"Hello\
    \ world!\");\n        long result = operand.get(0);\n        for (int i = 0; i\
    \ < op.size(); i++) {\n            switch (op.get(i)) {\n                case\
    \ \"+\":\n                    result += operand.get(i + 1);\n                \
    \    break;\n                case \"-\":\n                    result -= operand.get(i\
    \ + 1);\n                    break;\n                case \"*\":\n           \
    \         result *= operand.get(i + 1);\n                    break;\n        \
    \        case \"//\":\n                    result /= operand.get(i + 1);\n   \
    \                 break;\n                case \"**\":\n                    result\
    \ = (long) Math.pow(result, operand.get(i + 1));\n                    break;\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpn1f0usqr.java:55)\n"
  stdout: ''
