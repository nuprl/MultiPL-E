name: HumanEval_6_parse_nested_parens
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // Input to this function is a string represented multiple\
  \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
  \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
  \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
  (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
  \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
  \ paren_string) {\n"
tests: "    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"\
  (()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
  \ (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((()))\
  \ (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
  \ (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
  \ ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
completions: ["        ArrayList<Long> result = new ArrayList<Long>();\n        String[]\
    \ parens = paren_string.split(\" \");\n        for (String paren : parens) {\n\
    \            long max_depth = 0;\n            long depth = 0;\n            for\
    \ (int i = 0; i < paren.length(); i++) {\n                if (paren.charAt(i)\
    \ == '(') {\n                    depth++;\n                    max_depth = Math.max(max_depth,\
    \ depth);\n                } else if (paren.charAt(i) == ')') {\n            \
    \        depth--;\n                }\n            }\n            result.add(max_depth);\n\
    \        }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        String[] paren_groups = paren_string.split(\" \");\n        for (String\
    \ paren_group : paren_groups) {\n            long max_nesting = 0;\n         \
    \   long current_nesting = 0;\n            for (int i = 0; i < paren_group.length();\
    \ i++) {\n                if (paren_group.charAt(i) == '(') {\n              \
    \      current_nesting++;\n                    max_nesting = Math.max(max_nesting,\
    \ current_nesting);\n                } else if (paren_group.charAt(i) == ')')\
    \ {\n                    current_nesting--;\n                }\n            }\n\
    \            result.add(max_nesting);\n        }\n        return result;", " \
    \       ArrayList<Long> result = new ArrayList<Long>();\n        String[] groups\
    \ = paren_string.split(\" \");\n        for (String group : groups) {\n      \
    \      long max_depth = 0;\n            long depth = 0;\n            for (int\
    \ i = 0; i < group.length(); i++) {\n                if (group.charAt(i) == '(')\
    \ {\n                    depth++;\n                    max_depth = Math.max(max_depth,\
    \ depth);\n                } else if (group.charAt(i) == ')') {\n            \
    \        depth--;\n                }\n            }\n            result.add(max_depth);\n\
    \        }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        // Write your code here.\n        return result;", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        String[] groups = paren_string.split(\"\
    \ \");\n        for (String group : groups) {\n            long max_depth = 0;\n\
    \            long depth = 0;\n            for (char c : group.toCharArray()) {\n\
    \                if (c == '(') {\n                    depth++;\n             \
    \       max_depth = Math.max(max_depth, depth);\n                } else if (c\
    \ == ')') {\n                    depth--;\n                }\n            }\n\
    \            result.add(max_depth);\n        }\n        return result;", "   \
    \     ArrayList<Long> result = new ArrayList<Long>();\n        for (String s :\
    \ paren_string.split(\" \")) {\n            long max_level = 0;\n            long\
    \ cur_level = 0;\n            for (int i = 0; i < s.length(); i++) {\n       \
    \         if (s.charAt(i) == '(') {\n                    cur_level++;\n      \
    \              max_level = Math.max(max_level, cur_level);\n                }\
    \ else if (s.charAt(i) == ')') {\n                    cur_level--;\n         \
    \       }\n            }\n            result.add(max_level);\n        }\n    \
    \    return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        String[] paren_groups = paren_string.split(\" \");\n        for (String\
    \ paren_group : paren_groups) {\n            long max_depth = 0;\n           \
    \ long depth = 0;\n            for (int i = 0; i < paren_group.length(); i++)\
    \ {\n                char c = paren_group.charAt(i);\n                if (c ==\
    \ '(') {\n                    depth++;\n                    max_depth = Math.max(max_depth,\
    \ depth);\n                } else if (c == ')') {\n                    depth--;\n\
    \                }\n            }\n            result.add(max_depth);\n      \
    \  }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        String[] groups = paren_string.split(\" \");\n        for (String group\
    \ : groups) {\n            long max_level = 0;\n            long level = 0;\n\
    \            for (int i = 0; i < group.length(); i++) {\n                if (group.charAt(i)\
    \ == '(') {\n                    level++;\n                    max_level = Math.max(max_level,\
    \ level);\n                } else if (group.charAt(i) == ')') {\n            \
    \        level--;\n                }\n            }\n            result.add(max_level);\n\
    \        }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        String[] groups = paren_string.split(\" \");\n        for (String group\
    \ : groups) {\n            long max_depth = 0;\n            long cur_depth = 0;\n\
    \            for (int i = 0; i < group.length(); i++) {\n                if (group.charAt(i)\
    \ == '(') {\n                    cur_depth++;\n                    max_depth =\
    \ Math.max(max_depth, cur_depth);\n                } else if (group.charAt(i)\
    \ == ')') {\n                    cur_depth--;\n                }\n           \
    \ }\n            result.add(max_depth);\n        }\n        return result;", " \
    \       ArrayList<Long> result = new ArrayList<Long>();\n        String[] parens\
    \ = paren_string.split(\" \");\n        for (String paren : parens) {\n      \
    \      result.add(parseNestedParensHelper(paren));\n        }\n        return\
    \ result;", "        ArrayList<Long> result = new ArrayList<Long>();\n       \
    \ ArrayList<String> paren_groups = new ArrayList<String>(Arrays.asList(paren_string.split(\"\
    \ \")));\n        for (String paren_group : paren_groups) {\n            long\
    \ max_depth = 0;\n            long current_depth = 0;\n            for (int i\
    \ = 0; i < paren_group.length(); i++) {\n                if (paren_group.charAt(i)\
    \ == '(') {\n                    current_depth++;\n                    if (current_depth\
    \ > max_depth) {\n                        max_depth = current_depth;\n       \
    \             }\n                } else if (paren_group.charAt(i) == ')') {\n\
    \                    current_depth--;\n                }\n            }\n    \
    \        result.add(max_depth);\n        }\n        return result;", "       \
    \ ArrayList<Long> result = new ArrayList<Long>();\n        String[] parens = paren_string.split(\"\
    \ \");\n        for (String paren : parens) {\n            long maxLevel = 0;\n\
    \            long level = 0;\n            for (char c : paren.toCharArray()) {\n\
    \                if (c == '(') {\n                    level++;\n             \
    \       maxLevel = Math.max(maxLevel, level);\n                } else if (c ==\
    \ ')') {\n                    level--;\n                }\n            }\n   \
    \         result.add(maxLevel);\n        }\n        return result;", "       \
    \ ArrayList<Long> result = new ArrayList<Long>();\n        String[] groups = paren_string.split(\"\
    \ \");\n        for (String group : groups) {\n            long max_depth = 0;\n\
    \            long current_depth = 0;\n            for (char c : group.toCharArray())\
    \ {\n                if (c == '(') {\n                    current_depth++;\n \
    \                   max_depth = Math.max(max_depth, current_depth);\n        \
    \        } else if (c == ')') {\n                    current_depth--;\n      \
    \          }\n            }\n            result.add(max_depth);\n        }\n \
    \       return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        String[] parens = paren_string.split(\" \");\n        for (String paren\
    \ : parens) {\n            long max_depth = 0;\n            long depth = 0;\n\
    \            for (int i = 0; i < paren.length(); i++) {\n                if (paren.charAt(i)\
    \ == '(') {\n                    depth++;\n                    max_depth = Math.max(max_depth,\
    \ depth);\n                } else if (paren.charAt(i) == ')') {\n            \
    \        depth--;\n                }\n            }\n            result.add(max_depth);\n\
    \        }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        String[] groups = paren_string.split(\" \");\n        for (String group\
    \ : groups) {\n            long max_depth = 0;\n            long depth = 0;\n\
    \            for (char c : group.toCharArray()) {\n                if (c == '(')\
    \ {\n                    depth++;\n                    max_depth = Math.max(max_depth,\
    \ depth);\n                } else if (c == ')') {\n                    depth--;\n\
    \                }\n            }\n            result.add(max_depth);\n      \
    \  }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        String[] groups = paren_string.split(\" \");\n        for (String group\
    \ : groups) {\n            long max_depth = 0;\n            long current_depth\
    \ = 0;\n            for (char c : group.toCharArray()) {\n                if (c\
    \ == '(') {\n                    current_depth += 1;\n                    max_depth\
    \ = Math.max(max_depth, current_depth);\n                } else if (c == ')')\
    \ {\n                    current_depth -= 1;\n                }\n            }\n\
    \            result.add(max_depth);\n        }\n        return result;", "   \
    \     ArrayList<Long> result = new ArrayList<Long>();\n        String[] groups\
    \ = paren_string.split(\" \");\n        for (String group : groups) {\n      \
    \      long max_depth = 0;\n            long current_depth = 0;\n            for\
    \ (int i = 0; i < group.length(); i++) {\n                if (group.charAt(i)\
    \ == '(') {\n                    current_depth += 1;\n                    max_depth\
    \ = Math.max(max_depth, current_depth);\n                } else if (group.charAt(i)\
    \ == ')') {\n                    current_depth -= 1;\n                }\n    \
    \        }\n            result.add(max_depth);\n        }\n        return result;",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        String[] paren_groups\
    \ = paren_string.split(\" \");\n        for (String paren_group : paren_groups)\
    \ {\n            result.add(parseNestedParensHelper(paren_group));\n        }\n\
    \        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        String[] parens = paren_string.split(\" \");\n        for (String paren\
    \ : parens) {\n            result.add(parseNestedParensHelper(paren));\n     \
    \   }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        String[] paren_groups = paren_string.split(\" \");\n        for (String\
    \ paren_group : paren_groups) {\n            long max_nesting = 0;\n         \
    \   long current_nesting = 0;\n            for (int i = 0; i < paren_group.length();\
    \ i++) {\n                if (paren_group.charAt(i) == '(') {\n              \
    \      current_nesting++;\n                    max_nesting = Math.max(max_nesting,\
    \ current_nesting);\n                } else if (paren_group.charAt(i) == ')')\
    \ {\n                    current_nesting--;\n                }\n            }\n\
    \            result.add(max_nesting);\n        }\n        return result;", " \
    \       // Write your code here\n        // To print results to the standard output\
    \ you can use System.out.println()\n        // Example: System.out.println(\"\
    Hello world!\");\n        ArrayList<Long> result = new ArrayList<Long>();\n  \
    \      String[] groups = paren_string.split(\" \");\n        for (String group\
    \ : groups) {\n            long max = 0;\n            long count = 0;\n      \
    \      for (int i = 0; i < group.length(); i++) {\n                if (group.charAt(i)\
    \ == '(') {\n                    count++;\n                    max = Math.max(max,\
    \ count);\n                } else if (group.charAt(i) == ')') {\n            \
    \        count--;\n                }\n            }\n            result.add(max);\n\
    \        }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        String[] parens = paren_string.split(\" \");\n        for (String paren\
    \ : parens) {\n            long max = 0;\n            long count = 0;\n      \
    \      for (char c : paren.toCharArray()) {\n                if (c == '(') {\n\
    \                    count++;\n                    max = Math.max(max, count);\n\
    \                } else if (c == ')') {\n                    count--;\n      \
    \          }\n            }\n            result.add(max);\n        }\n       \
    \ return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        String[] parens = paren_string.split(\" \");\n        for (String paren\
    \ : parens) {\n            long max_depth = 0;\n            long depth = 0;\n\
    \            for (int i = 0; i < paren.length(); i++) {\n                if (paren.charAt(i)\
    \ == '(') {\n                    depth++;\n                    max_depth = Math.max(max_depth,\
    \ depth);\n                } else if (paren.charAt(i) == ')') {\n            \
    \        depth--;\n                }\n            }\n            result.add(max_depth);\n\
    \        }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        // Write your code here\n        return result;", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        String[] paren_groups = paren_string.split(\"\
    \ \");\n        for (String paren_group : paren_groups) {\n            long max_nesting\
    \ = 0;\n            long current_nesting = 0;\n            for (int i = 0; i <\
    \ paren_group.length(); i++) {\n                if (paren_group.charAt(i) == '(')\
    \ {\n                    current_nesting++;\n                    max_nesting =\
    \ Math.max(max_nesting, current_nesting);\n                } else if (paren_group.charAt(i)\
    \ == ')') {\n                    current_nesting--;\n                }\n     \
    \       }\n            result.add(max_nesting);\n        }\n        return result;",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        for (String paren_group\
    \ : paren_string.split(\" \")) {\n            long max_nesting = 0;\n        \
    \    long current_nesting = 0;\n            for (int i = 0; i < paren_group.length();\
    \ i++) {\n                if (paren_group.charAt(i) == '(') {\n              \
    \      current_nesting += 1;\n                    max_nesting = Math.max(max_nesting,\
    \ current_nesting);\n                } else if (paren_group.charAt(i) == ')')\
    \ {\n                    current_nesting -= 1;\n                }\n          \
    \  }\n            result.add(max_nesting);\n        }\n        return result;",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        String[] paren_groups\
    \ = paren_string.split(\" \");\n        for (String paren_group : paren_groups)\
    \ {\n            result.add(parseNestedParensHelper(paren_group));\n        }\n\
    \        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        ArrayList<Long> stack = new ArrayList<Long>();\n        long deepest\
    \ = 0;\n        for (int i = 0; i < paren_string.length(); i++) {\n          \
    \  if (paren_string.charAt(i) == '(') {\n                stack.add((long)1l);\n\
    \                if (stack.size() > deepest) {\n                    deepest =\
    \ stack.size();\n                }\n            } else if (paren_string.charAt(i)\
    \ == ')') {\n                stack.remove(stack.size() - 1);\n            } else\
    \ if (paren_string.charAt(i) == ' ') {\n                result.add(deepest);\n\
    \                deepest = 0;\n            }\n        }\n        result.add(deepest);\n\
    \        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        String[] parens = paren_string.split(\" \");\n        for (String paren\
    \ : parens) {\n            long max = 0;\n            long current = 0;\n    \
    \        for (char c : paren.toCharArray()) {\n                if (c == '(') {\n\
    \                    current++;\n                    max = Math.max(max, current);\n\
    \                } else if (c == ')') {\n                    current--;\n    \
    \            }\n            }\n            result.add(max);\n        }\n     \
    \   return result;", "        // >>> parseNestedParens((\"(()()) ((())) () ((())()())\"\
    ))\n        // (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l,\
    \ (long)3l)))\n        ArrayList<Long> result = new ArrayList<Long>();\n     \
    \   // BEGIN SOLUTION\n        String[] groups = paren_string.split(\" \");\n\
    \        for (String group : groups) {\n            long max = 0;\n          \
    \  long current = 0;\n            for (int i = 0; i < group.length(); i++) {\n\
    \                char c = group.charAt(i);\n                if (c == '(') {\n\
    \                    current++;\n                    max = Math.max(max, current);\n\
    \                } else if (c == ')') {\n                    current--;\n    \
    \            }\n            }\n            result.add(max);\n        }\n     \
    \   // END SOLUTION\n        return result;", "        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        int max_depth = 0;\n        int depth = 0;\n\
    \        for (int i = 0; i < paren_string.length(); i++) {\n            if (paren_string.charAt(i)\
    \ == '(') {\n                depth += 1;\n                max_depth = Math.max(max_depth,\
    \ depth);\n            } else if (paren_string.charAt(i) == ')') {\n         \
    \       depth -= 1;\n            } else if (paren_string.charAt(i) == ' ') {\n\
    \                result.add((long)max_depth);\n                max_depth = 0;\n\
    \                depth = 0;\n            }\n        }\n        result.add((long)max_depth);\n\
    \        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        String[] groups = paren_string.split(\" \");\n        for (String group\
    \ : groups) {\n            long max_depth = 0;\n            long depth = 0;\n\
    \            for (int i = 0; i < group.length(); i++) {\n                if (group.charAt(i)\
    \ == '(') {\n                    depth++;\n                    max_depth = Math.max(max_depth,\
    \ depth);\n                } else if (group.charAt(i) == ')') {\n            \
    \        depth--;\n                }\n            }\n            result.add(max_depth);\n\
    \        }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        String[] groups = paren_string.split(\" \");\n        for (String group\
    \ : groups) {\n            long max_nesting = 0;\n            long current_nesting\
    \ = 0;\n            for (int i = 0; i < group.length(); i++) {\n             \
    \   if (group.charAt(i) == '(') {\n                    current_nesting++;\n  \
    \                  max_nesting = Math.max(max_nesting, current_nesting);\n   \
    \             } else if (group.charAt(i) == ')') {\n                    current_nesting--;\n\
    \                }\n            }\n            result.add(max_nesting);\n    \
    \    }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        String[] parens = paren_string.split(\" \");\n        for (String paren\
    \ : parens) {\n            long max_depth = 0;\n            long depth = 0;\n\
    \            for (char c : paren.toCharArray()) {\n                if (c == '(')\
    \ {\n                    depth += 1;\n                    max_depth = Math.max(max_depth,\
    \ depth);\n                } else if (c == ')') {\n                    depth -=\
    \ 1;\n                }\n            }\n            result.add(max_depth);\n \
    \       }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        String[] groups = paren_string.split(\" \");\n        for (String group\
    \ : groups) {\n            long max_depth = 0;\n            long depth = 0;\n\
    \            for (int i = 0; i < group.length(); i++) {\n                if (group.charAt(i)\
    \ == '(') {\n                    depth += 1;\n                    max_depth =\
    \ Math.max(max_depth, depth);\n                } else if (group.charAt(i) == ')')\
    \ {\n                    depth -= 1;\n                }\n            }\n     \
    \       result.add(max_depth);\n        }\n        return result;", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        String[] groups = paren_string.split(\"\
    \ \");\n        for (String group : groups) {\n            long max_depth = 0;\n\
    \            long depth = 0;\n            for (int i = 0; i < group.length();\
    \ i++) {\n                if (group.charAt(i) == '(') {\n                    depth++;\n\
    \                    max_depth = Math.max(max_depth, depth);\n               \
    \ } else if (group.charAt(i) == ')') {\n                    depth--;\n       \
    \         }\n            }\n            result.add(max_depth);\n        }\n  \
    \      return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        String[] paren_groups = paren_string.split(\" \");\n        for (String\
    \ paren_group : paren_groups) {\n            long max_depth = 0;\n           \
    \ long depth = 0;\n            for (int i = 0; i < paren_group.length(); i++)\
    \ {\n                if (paren_group.charAt(i) == '(') {\n                   \
    \ depth += 1;\n                    max_depth = Math.max(max_depth, depth);\n \
    \               } else if (paren_group.charAt(i) == ')') {\n                 \
    \   depth -= 1;\n                }\n            }\n            result.add(max_depth);\n\
    \        }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        String[] parens = paren_string.split(\" \");\n        for (String paren\
    \ : parens) {\n            long max_depth = 0;\n            long depth = 0;\n\
    \            for (char c : paren.toCharArray()) {\n                if (c == '(')\
    \ {\n                    depth += 1;\n                    max_depth = Math.max(max_depth,\
    \ depth);\n                } else if (c == ')') {\n                    depth -=\
    \ 1;\n                }\n            }\n            result.add(max_depth);\n \
    \       }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        String[] groups = paren_string.split(\" \");\n        for (String group\
    \ : groups) {\n            long max_depth = 0;\n            long depth = 0;\n\
    \            for (int i = 0; i < group.length(); i++) {\n                if (group.charAt(i)\
    \ == '(') {\n                    depth += 1;\n                    max_depth =\
    \ Math.max(max_depth, depth);\n                } else if (group.charAt(i) == ')')\
    \ {\n                    depth -= 1;\n                }\n            }\n     \
    \       result.add(max_depth);\n        }\n        return result;", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        String[] parens = paren_string.split(\"\
    \ \");\n        for (String paren : parens) {\n            long max_depth = 0;\n\
    \            long depth = 0;\n            for (int i = 0; i < paren.length();\
    \ i++) {\n                if (paren.charAt(i) == '(') {\n                    depth++;\n\
    \                    max_depth = Math.max(max_depth, depth);\n               \
    \ } else if (paren.charAt(i) == ')') {\n                    depth--;\n       \
    \         }\n            }\n            result.add(max_depth);\n        }\n  \
    \      return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        String[] parens = paren_string.split(\" \");\n        for (String paren\
    \ : parens) {\n            long max_depth = 0;\n            long depth = 0;\n\
    \            for (int i = 0; i < paren.length(); i++) {\n                if (paren.charAt(i)\
    \ == '(') {\n                    depth++;\n                    max_depth = Math.max(max_depth,\
    \ depth);\n                } else if (paren.charAt(i) == ')') {\n            \
    \        depth--;\n                }\n            }\n            result.add(max_depth);\n\
    \        }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        String[] groups = paren_string.split(\" \");\n        for (String group\
    \ : groups) {\n            long max_depth = 0;\n            long depth = 0;\n\
    \            for (char c : group.toCharArray()) {\n                if (c == '(')\
    \ {\n                    depth++;\n                    max_depth = Math.max(max_depth,\
    \ depth);\n                } else if (c == ')') {\n                    depth--;\n\
    \                }\n            }\n            result.add(max_depth);\n      \
    \  }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        String[] parens = paren_string.split(\" \");\n        for (String paren\
    \ : parens) {\n            long max_depth = 0;\n            long depth = 0;\n\
    \            for (int i = 0; i < paren.length(); i++) {\n                if (paren.charAt(i)\
    \ == '(') {\n                    depth++;\n                    max_depth = Math.max(max_depth,\
    \ depth);\n                } else if (paren.charAt(i) == ')') {\n            \
    \        depth--;\n                }\n            }\n            result.add(max_depth);\n\
    \        }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        String[] paren_groups = paren_string.split(\" \");\n        for (String\
    \ paren_group : paren_groups) {\n            result.add(parseNestedParensHelper(paren_group));\n\
    \        }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        String[] parens = paren_string.split(\" \");\n        for (String paren\
    \ : parens) {\n            long max = 0;\n            long count = 0;\n      \
    \      for (char c : paren.toCharArray()) {\n                if (c == '(') {\n\
    \                    count += 1;\n                    max = Math.max(max, count);\n\
    \                } else if (c == ')') {\n                    count -= 1;\n   \
    \             }\n            }\n            result.add(max);\n        }\n    \
    \    return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        String[] groups = paren_string.split(\" \");\n        for (String group\
    \ : groups) {\n            int max_depth = 0;\n            int depth = 0;\n  \
    \          for (int i = 0; i < group.length(); i++) {\n                if (group.charAt(i)\
    \ == '(') {\n                    depth += 1;\n                    max_depth =\
    \ Math.max(max_depth, depth);\n                } else if (group.charAt(i) == ')')\
    \ {\n                    depth -= 1;\n                }\n            }\n     \
    \       result.add((long)max_depth);\n        }\n        return result;", "  \
    \      ArrayList<Long> result = new ArrayList<Long>();\n        String[] parens\
    \ = paren_string.split(\" \");\n        for (String paren : parens) {\n      \
    \      long max_depth = 0;\n            long depth = 0;\n            for (int\
    \ i = 0; i < paren.length(); i++) {\n                if (paren.charAt(i) == '(')\
    \ {\n                    depth++;\n                    max_depth = Math.max(max_depth,\
    \ depth);\n                } else if (paren.charAt(i) == ')') {\n            \
    \        depth--;\n                }\n            }\n            result.add(max_depth);\n\
    \        }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        String[] parens = paren_string.split(\" \");\n        for (String paren\
    \ : parens) {\n            long max_depth = 0;\n            long depth = 0;\n\
    \            for (int i = 0; i < paren.length(); i++) {\n                if (paren.charAt(i)\
    \ == '(') {\n                    depth++;\n                    max_depth = Math.max(max_depth,\
    \ depth);\n                } else if (paren.charAt(i) == ')') {\n            \
    \        depth--;\n                }\n            }\n            result.add(max_depth);\n\
    \        }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        String[] groups = paren_string.split(\" \");\n        for (String group\
    \ : groups) {\n            long max_depth = 0;\n            long depth = 0;\n\
    \            for (int i = 0; i < group.length(); i++) {\n                if (group.charAt(i)\
    \ == '(') {\n                    depth++;\n                    max_depth = Math.max(max_depth,\
    \ depth);\n                } else if (group.charAt(i) == ')') {\n            \
    \        depth--;\n                }\n            }\n            result.add(max_depth);\n\
    \        }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        String[] groups = paren_string.split(\" \");\n        for (String group\
    \ : groups) {\n            long max_depth = 0;\n            long depth = 0;\n\
    \            for (int i = 0; i < group.length(); i++) {\n                if (group.charAt(i)\
    \ == '(') {\n                    depth++;\n                    max_depth = Math.max(max_depth,\
    \ depth);\n                } else if (group.charAt(i) == ')') {\n            \
    \        depth--;\n                }\n            }\n            result.add(max_depth);\n\
    \        }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        String[] paren_groups = paren_string.split(\" \");\n        for (String\
    \ paren_group : paren_groups) {\n            long max_depth = 0;\n           \
    \ long current_depth = 0;\n            for (int i = 0; i < paren_group.length();\
    \ i++) {\n                if (paren_group.charAt(i) == '(') {\n              \
    \      current_depth++;\n                    max_depth = Math.max(max_depth, current_depth);\n\
    \                } else if (paren_group.charAt(i) == ')') {\n                \
    \    current_depth--;\n                }\n            }\n            result.add(max_depth);\n\
    \        }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        String[] paren_groups = paren_string.split(\" \");\n        for (String\
    \ paren_group : paren_groups) {\n            long max_level = 0;\n           \
    \ long level = 0;\n            for (char c : paren_group.toCharArray()) {\n  \
    \              if (c == '(') {\n                    level += 1;\n            \
    \        max_level = Math.max(max_level, level);\n                } else if (c\
    \ == ')') {\n                    level -= 1;\n                }\n            }\n\
    \            result.add(max_level);\n        }\n        return result;", "   \
    \     ArrayList<Long> result = new ArrayList<Long>();\n        String[] paren_groups\
    \ = paren_string.split(\" \");\n        for (String paren_group : paren_groups)\
    \ {\n            long max_depth = 0;\n            long depth = 0;\n          \
    \  for (int i = 0; i < paren_group.length(); i++) {\n                if (paren_group.charAt(i)\
    \ == '(') {\n                    depth++;\n                    max_depth = Math.max(max_depth,\
    \ depth);\n                } else if (paren_group.charAt(i) == ')') {\n      \
    \              depth--;\n                }\n            }\n            result.add(max_depth);\n\
    \        }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        String[] parens = paren_string.split(\" \");\n        for (String paren\
    \ : parens) {\n            long max_depth = 0;\n            long depth = 0;\n\
    \            for (int i = 0; i < paren.length(); i++) {\n                if (paren.charAt(i)\
    \ == '(') {\n                    depth++;\n                    max_depth = Math.max(max_depth,\
    \ depth);\n                } else if (paren.charAt(i) == ')') {\n            \
    \        depth--;\n                }\n            }\n            result.add(max_depth);\n\
    \        }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        String[] groups = paren_string.split(\" \");\n        for (String group\
    \ : groups) {\n            long max_depth = 0;\n            long current_depth\
    \ = 0;\n            for (int i = 0; i < group.length(); i++) {\n             \
    \   if (group.charAt(i) == '(') {\n                    current_depth++;\n    \
    \                max_depth = Math.max(max_depth, current_depth);\n           \
    \     } else if (group.charAt(i) == ')') {\n                    current_depth--;\n\
    \                }\n            }\n            result.add(max_depth);\n      \
    \  }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        String[] groups = paren_string.split(\" \");\n        for (String group\
    \ : groups) {\n            result.add(parseNestedParensHelper(group));\n     \
    \   }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        String[] parens = paren_string.split(\" \");\n        for (String paren\
    \ : parens) {\n            long max_depth = 0;\n            long depth = 0;\n\
    \            for (char c : paren.toCharArray()) {\n                if (c == '(')\
    \ {\n                    depth++;\n                    max_depth = Math.max(max_depth,\
    \ depth);\n                } else if (c == ')') {\n                    depth--;\n\
    \                }\n            }\n            result.add(max_depth);\n      \
    \  }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        String[] groups = paren_string.split(\" \");\n        for (String group\
    \ : groups) {\n            long max_depth = 0;\n            long current_depth\
    \ = 0;\n            for (int i = 0; i < group.length(); i++) {\n             \
    \   if (group.charAt(i) == '(') {\n                    current_depth += 1;\n \
    \                   max_depth = Math.max(max_depth, current_depth);\n        \
    \        } else if (group.charAt(i) == ')') {\n                    current_depth\
    \ -= 1;\n                }\n            }\n            result.add(max_depth);\n\
    \        }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        String[] groups = paren_string.split(\" \");\n        for (String group\
    \ : groups) {\n            long max_depth = 0;\n            long depth = 0;\n\
    \            for (int i = 0; i < group.length(); i++) {\n                if (group.charAt(i)\
    \ == '(') {\n                    depth++;\n                    max_depth = Math.max(max_depth,\
    \ depth);\n                } else if (group.charAt(i) == ')') {\n            \
    \        depth--;\n                }\n            }\n            result.add(max_depth);\n\
    \        }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        String[] paren_groups = paren_string.split(\" \");\n        for (String\
    \ paren_group : paren_groups) {\n            long max_level = 0;\n           \
    \ long level = 0;\n            for (int i = 0; i < paren_group.length(); i++)\
    \ {\n                if (paren_group.charAt(i) == '(') {\n                   \
    \ level++;\n                    max_level = Math.max(max_level, level);\n    \
    \            } else if (paren_group.charAt(i) == ')') {\n                    level--;\n\
    \                }\n            }\n            result.add(max_level);\n      \
    \  }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        String[] parens = paren_string.split(\" \");\n        for (String paren\
    \ : parens) {\n            long max_depth = 0;\n            long depth = 0;\n\
    \            for (char c : paren.toCharArray()) {\n                if (c == '(')\
    \ {\n                    depth++;\n                    max_depth = Math.max(max_depth,\
    \ depth);\n                } else if (c == ')') {\n                    depth--;\n\
    \                }\n            }\n            result.add(max_depth);\n      \
    \  }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        String[] parens = paren_string.split(\" \");\n        for (String paren\
    \ : parens) {\n            long max_depth = 0;\n            long depth = 0;\n\
    \            for (int i = 0; i < paren.length(); i++) {\n                if (paren.charAt(i)\
    \ == '(') {\n                    depth++;\n                    max_depth = Math.max(max_depth,\
    \ depth);\n                } else if (paren.charAt(i) == ')') {\n            \
    \        depth--;\n                }\n            }\n            result.add(max_depth);\n\
    \        }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        String[] parens = paren_string.split(\" \");\n        for (String paren\
    \ : parens) {\n            long max_depth = 0;\n            long depth = 0;\n\
    \            for (int i = 0; i < paren.length(); i++) {\n                if (paren.charAt(i)\
    \ == '(') {\n                    depth++;\n                    max_depth = Math.max(max_depth,\
    \ depth);\n                } else if (paren.charAt(i) == ')') {\n            \
    \        depth--;\n                }\n            }\n            result.add(max_depth);\n\
    \        }\n        return result;", "        // Write your code here\n      \
    \  // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        String[] groups = paren_string.split(\"\
    \ \");\n        for (String group : groups) {\n            result.add(parseNestedParensHelper(group));\n\
    \        }\n        return result;", "        ArrayList<Long> res = new ArrayList<Long>();\n\
    \        String[] parens = paren_string.split(\" \");\n        for (String paren\
    \ : parens) {\n            long max_depth = 0;\n            long depth = 0;\n\
    \            for (int i = 0; i < paren.length(); i++) {\n                if (paren.charAt(i)\
    \ == '(') {\n                    depth++;\n                    max_depth = Math.max(max_depth,\
    \ depth);\n                } else {\n                    depth--;\n          \
    \      }\n            }\n            res.add(max_depth);\n        }\n        return\
    \ res;", "        ArrayList<Long> result = new ArrayList<Long>();\n        String[]\
    \ groups = paren_string.split(\" \");\n        for (String group : groups) {\n\
    \            long max_depth = 0;\n            long depth = 0;\n            for\
    \ (int i = 0; i < group.length(); i++) {\n                if (group.charAt(i)\
    \ == '(') {\n                    depth++;\n                    max_depth = Math.max(max_depth,\
    \ depth);\n                } else if (group.charAt(i) == ')') {\n            \
    \        depth--;\n                }\n            }\n            result.add(max_depth);\n\
    \        }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        String[] parens = paren_string.split(\" \");\n        for (String paren\
    \ : parens) {\n            long max_depth = 0;\n            long depth = 0;\n\
    \            for (int i = 0; i < paren.length(); i++) {\n                if (paren.charAt(i)\
    \ == '(') {\n                    depth++;\n                    max_depth = Math.max(max_depth,\
    \ depth);\n                } else if (paren.charAt(i) == ')') {\n            \
    \        depth--;\n                }\n            }\n            result.add(max_depth);\n\
    \        }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        String[] parens = paren_string.split(\" \");\n        for (String paren\
    \ : parens) {\n            result.add(parseNestedParensHelper(paren));\n     \
    \   }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        String[] parens = paren_string.split(\" \");\n        for (String paren\
    \ : parens) {\n            long max_level = 0;\n            long level = 0;\n\
    \            for (int i = 0; i < paren.length(); i++) {\n                if (paren.charAt(i)\
    \ == '(') {\n                    level++;\n                    max_level = Math.max(max_level,\
    \ level);\n                } else if (paren.charAt(i) == ')') {\n            \
    \        level--;\n                }\n            }\n            result.add(max_level);\n\
    \        }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        String[] groups = paren_string.split(\" \");\n        for (String group\
    \ : groups) {\n            long max_depth = 0;\n            long depth = 0;\n\
    \            for (int i = 0; i < group.length(); i++) {\n                if (group.charAt(i)\
    \ == '(') {\n                    depth++;\n                    max_depth = Math.max(max_depth,\
    \ depth);\n                } else if (group.charAt(i) == ')') {\n            \
    \        depth--;\n                }\n            }\n            result.add(max_depth);\n\
    \        }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        String[] groups = paren_string.split(\" \");\n        for (String group\
    \ : groups) {\n            long max_nesting = 0;\n            long current_nesting\
    \ = 0;\n            for (char c : group.toCharArray()) {\n                if (c\
    \ == '(') {\n                    current_nesting++;\n                    max_nesting\
    \ = Math.max(max_nesting, current_nesting);\n                } else if (c == ')')\
    \ {\n                    current_nesting--;\n                }\n            }\n\
    \            result.add(max_nesting);\n        }\n        return result;", " \
    \       ArrayList<Long> result = new ArrayList<Long>();\n        for (String group\
    \ : paren_string.split(\" \")) {\n            long max_depth = 0;\n          \
    \  long depth = 0;\n            for (char c : group.toCharArray()) {\n       \
    \         if (c == '(') {\n                    depth++;\n                    max_depth\
    \ = Math.max(max_depth, depth);\n                } else if (c == ')') {\n    \
    \                depth--;\n                }\n            }\n            result.add(max_depth);\n\
    \        }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        String[] groups = paren_string.split(\" \");\n        for (String group\
    \ : groups) {\n            int max_depth = 0;\n            int depth = 0;\n  \
    \          for (char c : group.toCharArray()) {\n                if (c == '(')\
    \ {\n                    depth += 1;\n                    max_depth = Math.max(max_depth,\
    \ depth);\n                } else if (c == ')') {\n                    depth -=\
    \ 1;\n                }\n            }\n            result.add((long)max_depth);\n\
    \        }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        String[] parens = paren_string.split(\" \");\n        for (String paren\
    \ : parens) {\n            long max_depth = 0;\n            long current_depth\
    \ = 0;\n            for (int i = 0; i < paren.length(); i++) {\n             \
    \   if (paren.charAt(i) == '(') {\n                    current_depth++;\n    \
    \                max_depth = Math.max(max_depth, current_depth);\n           \
    \     } else if (paren.charAt(i) == ')') {\n                    current_depth--;\n\
    \                }\n            }\n            result.add(max_depth);\n      \
    \  }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        String[] parens = paren_string.split(\" \");\n        for (String paren\
    \ : parens) {\n            long max_depth = 0;\n            long depth = 0;\n\
    \            for (int i = 0; i < paren.length(); i++) {\n                if (paren.charAt(i)\
    \ == '(') {\n                    depth++;\n                    max_depth = Math.max(max_depth,\
    \ depth);\n                } else if (paren.charAt(i) == ')') {\n            \
    \        depth--;\n                }\n            }\n            result.add(max_depth);\n\
    \        }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        ArrayList<Long> stack = new ArrayList<Long>();\n        long max = 0;\n\
    \        for (int i = 0; i < paren_string.length(); i++) {\n            if (paren_string.charAt(i)\
    \ == '(') {\n                stack.add((long)1l);\n                max = Math.max(max,\
    \ (long)stack.size());\n            } else if (paren_string.charAt(i) == ')')\
    \ {\n                stack.remove(stack.size() - 1);\n            } else if (paren_string.charAt(i)\
    \ == ' ') {\n                result.add(max);\n                max = 0;\n    \
    \        }\n        }\n        result.add(max);\n        return result;", "  \
    \      ArrayList<Long> result = new ArrayList<Long>();\n        int max = 0;\n\
    \        int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
    \                if (count > max) {\n                    max = count;\n      \
    \          }\n            } else if (paren_string.charAt(i) == ')') {\n      \
    \          count--;\n            } else if (paren_string.charAt(i) == ' ') {\n\
    \                result.add((long)max);\n                max = 0;\n          \
    \      count = 0;\n            }\n        }\n        result.add((long)max);\n\
    \        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        String[] paren_groups = paren_string.split(\" \");\n        for (String\
    \ paren_group : paren_groups) {\n            long max_nesting = 0;\n         \
    \   long nesting = 0;\n            for (int i = 0; i < paren_group.length(); i++)\
    \ {\n                if (paren_group.charAt(i) == '(') {\n                   \
    \ nesting += 1;\n                    max_nesting = Math.max(max_nesting, nesting);\n\
    \                } else if (paren_group.charAt(i) == ')') {\n                \
    \    nesting -= 1;\n                }\n            }\n            result.add(max_nesting);\n\
    \        }\n        return result;", "        ArrayList<Long> ret = new ArrayList<Long>();\n\
    \        String[] groups = paren_string.split(\" \");\n        for (String group\
    \ : groups) {\n            long max_depth = 0;\n            long depth = 0;\n\
    \            for (char c : group.toCharArray()) {\n                if (c == '(')\
    \ {\n                    depth++;\n                    max_depth = Math.max(max_depth,\
    \ depth);\n                } else if (c == ')') {\n                    depth--;\n\
    \                }\n            }\n            ret.add(max_depth);\n        }\n\
    \        return ret;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        // >>> YOUR CODE HERE\n        String[] parens = paren_string.split(\"\
    \ \");\n        for (String paren : parens) {\n            int max = 0;\n    \
    \        int curr = 0;\n            for (int i = 0; i < paren.length(); i++) {\n\
    \                if (paren.charAt(i) == '(') {\n                    curr++;\n\
    \                    max = Math.max(max, curr);\n                } else {\n  \
    \                  curr--;\n                }\n            }\n            result.add((long)max);\n\
    \        }\n        // <<< END YOUR CODE\n        return result;", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        String[] parens = paren_string.split(\"\
    \ \");\n        for (String paren : parens) {\n            long max_depth = 0;\n\
    \            long depth = 0;\n            for (int i = 0; i < paren.length();\
    \ i++) {\n                if (paren.charAt(i) == '(') {\n                    depth++;\n\
    \                    max_depth = Math.max(max_depth, depth);\n               \
    \ } else if (paren.charAt(i) == ')') {\n                    depth--;\n       \
    \         }\n            }\n            result.add(max_depth);\n        }\n  \
    \      return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        String[] parens = paren_string.split(\" \");\n        for (String paren\
    \ : parens) {\n            long max_level = 0;\n            long level = 0;\n\
    \            for (char c : paren.toCharArray()) {\n                if (c == '(')\
    \ {\n                    level++;\n                    max_level = Math.max(max_level,\
    \ level);\n                } else if (c == ')') {\n                    level--;\n\
    \                }\n            }\n            result.add(max_level);\n      \
    \  }\n        return result;", "        ArrayList<Long> output = new ArrayList<Long>();\n\
    \        String[] groups = paren_string.split(\" \");\n        for (String group\
    \ : groups) {\n            long max_depth = 0;\n            long depth = 0;\n\
    \            for (char c : group.toCharArray()) {\n                if (c == '(')\
    \ {\n                    depth++;\n                    max_depth = Math.max(max_depth,\
    \ depth);\n                } else if (c == ')') {\n                    depth--;\n\
    \                }\n            }\n            output.add(max_depth);\n      \
    \  }\n        return output;", "        // >>> parseNestedParens((\"(()()) ((()))\
    \ () ((())()())\"))\n        // (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)1l, (long)3l)))\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        // BEGIN SOLUTION\n        // END SOLUTION\n        return result;",
  "        ArrayList<Long> res = new ArrayList<Long>();\n        String[] groups =\
    \ paren_string.split(\" \");\n        for (String group : groups) {\n        \
    \    long max_depth = 0;\n            long depth = 0;\n            for (int i\
    \ = 0; i < group.length(); i++) {\n                if (group.charAt(i) == '(')\
    \ {\n                    depth++;\n                    max_depth = Math.max(max_depth,\
    \ depth);\n                } else if (group.charAt(i) == ')') {\n            \
    \        depth--;\n                }\n            }\n            res.add(max_depth);\n\
    \        }\n        return res;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        String[] paren_groups = paren_string.split(\" \");\n        for (String\
    \ paren_group : paren_groups) {\n            long max_depth = 0;\n           \
    \ long depth = 0;\n            for (int i = 0; i < paren_group.length(); i++)\
    \ {\n                char c = paren_group.charAt(i);\n                if (c ==\
    \ '(') {\n                    depth++;\n                    max_depth = Math.max(max_depth,\
    \ depth);\n                } else if (c == ')') {\n                    depth--;\n\
    \                }\n            }\n            result.add(max_depth);\n      \
    \  }\n        return result;", "        // >>> parseNestedParens((\"(()()) ((()))\
    \ () ((())()())\"))\n        // (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)1l, (long)3l)))\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        // BEGIN SOLUTION\n        String[] parens = paren_string.split(\" \"\
    );\n        for (String paren : parens) {\n            int max = 0;\n        \
    \    int curr = 0;\n            for (int i = 0; i < paren.length(); i++) {\n \
    \               if (paren.charAt(i) == '(') {\n                    curr++;\n \
    \                   max = Math.max(max, curr);\n                } else {\n   \
    \                 curr--;\n                }\n            }\n            result.add((long)max);\n\
    \        }\n        // END SOLUTION\n        return result;", "        ArrayList<Long>\
    \ paren_levels = new ArrayList<Long>();\n        for (String paren_group : paren_string.split(\"\
    \ \")) {\n            long paren_level = 0;\n            long max_paren_level\
    \ = 0;\n            for (char c : paren_group.toCharArray()) {\n             \
    \   if (c == '(') {\n                    paren_level += 1;\n                }\
    \ else if (c == ')') {\n                    paren_level -= 1;\n              \
    \  }\n                max_paren_level = Math.max(max_paren_level, paren_level);\n\
    \            }\n            paren_levels.add(max_paren_level);\n        }\n  \
    \      return paren_levels;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        for (String paren_group : paren_string.split(\" \")) {\n            long\
    \ max_nesting = 0;\n            long current_nesting = 0;\n            for (char\
    \ c : paren_group.toCharArray()) {\n                if (c == '(') {\n        \
    \            current_nesting += 1;\n                    max_nesting = Math.max(max_nesting,\
    \ current_nesting);\n                } else if (c == ')') {\n                \
    \    current_nesting -= 1;\n                }\n            }\n            result.add(max_nesting);\n\
    \        }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        ArrayList<Long> temp = new ArrayList<Long>();\n        int i = 0;\n \
    \       int j = 0;\n        int k = 0;\n        int l = 0;\n        int m = 0;\n\
    \        int n = 0;\n        int o = 0;\n        int p = 0;\n        int q = 0;\n\
    \        int r = 0;\n        int s = 0;\n        int t = 0;\n        int u = 0;\n\
    \        int v = 0;\n        int w = 0;\n        int x = 0;\n        int y = 0;\n\
    \        int z = 0;\n        int aa = 0;\n        int ab = 0;\n        int ac\
    \ = 0;\n        int ad = 0;\n        int ae = 0;\n        int af = 0;\n      \
    \  int ag = 0;\n        int ah = 0;\n        int ai = 0;\n        int aj = 0;\n\
    \        int ak = 0;\n        int al = 0;\n        int am = 0;\n        int an\
    \ = 0;\n        int ao = 0;\n        int ap = 0;\n        int aq = 0;\n      \
    \  int ar = 0;\n        int as = 0;\n        int at = 0;\n        int au = 0;\n\
    \        int av = 0;\n        int aw = 0;\n        int ax = 0;\n        int ay\
    \ = 0;\n        int az = 0;\n        int ba = 0;\n        int bb = 0;\n      \
    \  int bc = 0;\n        int bd = 0;\n        int be = 0;\n        int bf = 0;\n\
    \        int bg = 0;\n        int bh = 0;\n        int bi = 0;\n        int bj\
    \ = 0;\n        int bk = 0;\n        int bl = 0;\n        int bm = 0;\n      \
    \  int bn = 0;\n        int bo = 0;\n        int bp = 0;\n        int bq = 0;\n\
    \        int br = 0;\n        int bs = 0;\n        int bt = 0;\n        int bu\
    \ = 0;\n        int bv =", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        String[] groups = paren_string.split(\" \");\n        for (String group\
    \ : groups) {\n            long max_depth = 0;\n            long cur_depth = 0;\n\
    \            for (char c : group.toCharArray()) {\n                if (c == '(')\
    \ {\n                    cur_depth++;\n                    max_depth = Math.max(max_depth,\
    \ cur_depth);\n                } else if (c == ')') {\n                    cur_depth--;\n\
    \                }\n            }\n            result.add(max_depth);\n      \
    \  }\n        return result;", "        ArrayList<Long> paren_levels = new ArrayList<Long>();\n\
    \        String[] paren_groups = paren_string.split(\" \");\n        for (String\
    \ paren_group : paren_groups) {\n            long max_level = 0l;\n          \
    \  long level = 0l;\n            for (int i = 0; i < paren_group.length(); i++)\
    \ {\n                if (paren_group.charAt(i) == '(') {\n                   \
    \ level++;\n                    if (level > max_level) {\n                   \
    \     max_level = level;\n                    }\n                } else if (paren_group.charAt(i)\
    \ == ')') {\n                    level--;\n                }\n            }\n\
    \            paren_levels.add(max_level);\n        }\n        return paren_levels;",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        String[] groups\
    \ = paren_string.split(\" \");\n        for (String group : groups) {\n      \
    \      long max_depth = 0;\n            long depth = 0;\n            for (char\
    \ c : group.toCharArray()) {\n                if (c == '(') {\n              \
    \      depth += 1;\n                    max_depth = Math.max(max_depth, depth);\n\
    \                } else if (c == ')') {\n                    depth -= 1;\n   \
    \             }\n            }\n            result.add(max_depth);\n        }\n\
    \        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        String[] groups = paren_string.split(\" \");\n        for (String group\
    \ : groups) {\n            long max_depth = 0;\n            long depth = 0;\n\
    \            for (int i = 0; i < group.length(); i++) {\n                if (group.charAt(i)\
    \ == '(') {\n                    depth++;\n                    max_depth = Math.max(max_depth,\
    \ depth);\n                } else if (group.charAt(i) == ')') {\n            \
    \        depth--;\n                }\n            }\n            result.add(max_depth);\n\
    \        }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        // Write your code here.\n        return result;", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        String[] parens = paren_string.split(\"\
    \ \");\n        for (String paren : parens) {\n            result.add(parseNestedParensHelper(paren));\n\
    \        }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        String[] parens = paren_string.split(\" \");\n        for (String paren\
    \ : parens) {\n            result.add(parseNestedParensHelper(paren));\n     \
    \   }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        String[] paren_groups = paren_string.split(\" \");\n        for (String\
    \ group : paren_groups) {\n            long max_depth = 0;\n            long depth\
    \ = 0;\n            for (char c : group.toCharArray()) {\n                if (c\
    \ == '(') {\n                    depth++;\n                    max_depth = Math.max(max_depth,\
    \ depth);\n                } else if (c == ')') {\n                    depth--;\n\
    \                }\n            }\n            result.add(max_depth);\n      \
    \  }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        String[] parens = paren_string.split(\" \");\n        for (String paren\
    \ : parens) {\n            long max_depth = 0;\n            long depth = 0;\n\
    \            for (int i = 0; i < paren.length(); i++) {\n                if (paren.charAt(i)\
    \ == '(') {\n                    depth++;\n                    max_depth = Math.max(max_depth,\
    \ depth);\n                } else if (paren.charAt(i) == ')') {\n            \
    \        depth--;\n                }\n            }\n            result.add(max_depth);\n\
    \        }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        String[] parens = paren_string.split(\" \");\n        for (String paren\
    \ : parens) {\n            result.add(parseNestedParensHelper(paren));\n     \
    \   }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        String[] parens = paren_string.split(\" \");\n        for (String paren\
    \ : parens) {\n            result.add(parseNestedParensHelper(paren));\n     \
    \   }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        String[] groups = paren_string.split(\" \");\n        for (String group\
    \ : groups) {\n            long max_depth = 0;\n            long depth = 0;\n\
    \            for (char c : group.toCharArray()) {\n                if (c == '(')\
    \ {\n                    depth++;\n                    max_depth = Math.max(max_depth,\
    \ depth);\n                } else if (c == ')') {\n                    depth--;\n\
    \                }\n            }\n            result.add(max_depth);\n      \
    \  }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        for (String s : paren_string.split(\" \")) {\n            long max_depth\
    \ = 0;\n            long depth = 0;\n            for (char c : s.toCharArray())\
    \ {\n                if (c == '(') {\n                    depth++;\n         \
    \           max_depth = Math.max(max_depth, depth);\n                } else if\
    \ (c == ')') {\n                    depth--;\n                }\n            }\n\
    \            result.add(max_depth);\n        }\n        return result;", "   \
    \     ArrayList<Long> result = new ArrayList<Long>();\n        String[] paren_groups\
    \ = paren_string.split(\" \");\n        for (String paren_group : paren_groups)\
    \ {\n            long max_depth = 0;\n            long current_depth = 0;\n  \
    \          for (int i = 0; i < paren_group.length(); i++) {\n                if\
    \ (paren_group.charAt(i) == '(') {\n                    current_depth++;\n   \
    \                 max_depth = Math.max(max_depth, current_depth);\n          \
    \      } else if (paren_group.charAt(i) == ')') {\n                    current_depth--;\n\
    \                }\n            }\n            result.add(max_depth);\n      \
    \  }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        String[] parens = paren_string.split(\" \");\n        for (String paren\
    \ : parens) {\n            long max_depth = 0;\n            long depth = 0;\n\
    \            for (int i = 0; i < paren.length(); i++) {\n                if (paren.charAt(i)\
    \ == '(') {\n                    depth++;\n                    max_depth = Math.max(max_depth,\
    \ depth);\n                } else if (paren.charAt(i) == ')') {\n            \
    \        depth--;\n                }\n            }\n            result.add(max_depth);\n\
    \        }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        String[] groups = paren_string.split(\" \");\n        for (String group\
    \ : groups) {\n            long max_depth = 0;\n            long depth = 0;\n\
    \            for (int i = 0; i < group.length(); i++) {\n                if (group.charAt(i)\
    \ == '(') {\n                    depth++;\n                    max_depth = Math.max(max_depth,\
    \ depth);\n                } else if (group.charAt(i) == ')') {\n            \
    \        depth--;\n                }\n            }\n            result.add(max_depth);\n\
    \        }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        String[] groups = paren_string.split(\" \");\n        for (String group\
    \ : groups) {\n            long max_nesting = 0;\n            long current_nesting\
    \ = 0;\n            for (int i = 0; i < group.length(); i++) {\n             \
    \   if (group.charAt(i) == '(') {\n                    current_nesting++;\n  \
    \                  max_nesting = Math.max(max_nesting, current_nesting);\n   \
    \             } else if (group.charAt(i) == ')') {\n                    current_nesting--;\n\
    \                }\n            }\n            result.add(max_nesting);\n    \
    \    }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        String[] parens = paren_string.split(\" \");\n        for (String paren\
    \ : parens) {\n            long max = 0;\n            long curr = 0;\n       \
    \     for (int i = 0; i < paren.length(); i++) {\n                if (paren.charAt(i)\
    \ == '(') {\n                    curr++;\n                    max = Math.max(max,\
    \ curr);\n                } else {\n                    curr--;\n            \
    \    }\n            }\n            result.add(max);\n        }\n        return\
    \ result;", "        ArrayList<Long> result = new ArrayList<Long>();\n       \
    \ String[] groups = paren_string.split(\" \");\n        for (String group : groups)\
    \ {\n            long max_depth = 0;\n            long depth = 0;\n          \
    \  for (int i = 0; i < group.length(); i++) {\n                if (group.charAt(i)\
    \ == '(') {\n                    depth += 1;\n                    max_depth =\
    \ Math.max(max_depth, depth);\n                } else if (group.charAt(i) == ')')\
    \ {\n                    depth -= 1;\n                }\n            }\n     \
    \       result.add(max_depth);\n        }\n        return result;", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        for (String paren_group : paren_string.split(\"\
    \ \")) {\n            long max_depth = 0;\n            long depth = 0;\n     \
    \       for (char c : paren_group.toCharArray()) {\n                if (c == '(')\
    \ {\n                    depth++;\n                    max_depth = Math.max(max_depth,\
    \ depth);\n                } else if (c == ')') {\n                    depth--;\n\
    \                }\n            }\n            result.add(max_depth);\n      \
    \  }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        // Write your code here.\n        return result;", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        String[] groups = paren_string.split(\"\
    \ \");\n        for (String group : groups) {\n            long max_depth = 0;\n\
    \            long depth = 0;\n            for (char c : group.toCharArray()) {\n\
    \                if (c == '(') {\n                    depth += 1;\n          \
    \          max_depth = Math.max(max_depth, depth);\n                } else if\
    \ (c == ')') {\n                    depth -= 1;\n                }\n         \
    \   }\n            result.add(max_depth);\n        }\n        return result;",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        String[] groups\
    \ = paren_string.split(\" \");\n        for (String group : groups) {\n      \
    \      int max_depth = 0;\n            int depth = 0;\n            for (int i\
    \ = 0; i < group.length(); i++) {\n                if (group.charAt(i) == '(')\
    \ {\n                    depth += 1;\n                    max_depth = Math.max(max_depth,\
    \ depth);\n                } else if (group.charAt(i) == ')') {\n            \
    \        depth -= 1;\n                }\n            }\n            result.add((long)max_depth);\n\
    \        }\n        return result;", "        ArrayList<Long> max_depth = new\
    \ ArrayList<Long>();\n        for (String paren_group : paren_string.split(\"\
    \ \")) {\n            long depth = 0;\n            long max_depth_group = 0;\n\
    \            for (int i = 0; i < paren_group.length(); i++) {\n              \
    \  if (paren_group.charAt(i) == '(') {\n                    depth++;\n       \
    \             max_depth_group = Math.max(max_depth_group, depth);\n          \
    \      } else if (paren_group.charAt(i) == ')') {\n                    depth--;\n\
    \                }\n            }\n            max_depth.add(max_depth_group);\n\
    \        }\n        return max_depth;", "        ArrayList<Long> result = new\
    \ ArrayList<Long>();\n        String[] groups = paren_string.split(\" \");\n \
    \       for (String group : groups) {\n            long max_depth = 0;\n     \
    \       long depth = 0;\n            for (int i = 0; i < group.length(); i++)\
    \ {\n                if (group.charAt(i) == '(') {\n                    depth++;\n\
    \                    max_depth = Math.max(max_depth, depth);\n               \
    \ } else if (group.charAt(i) == ')') {\n                    depth--;\n       \
    \         }\n            }\n            result.add(max_depth);\n        }\n  \
    \      return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        String[] groups = paren_string.split(\" \");\n        for (String group\
    \ : groups) {\n            long max_level = 0;\n            long level = 0;\n\
    \            for (char c : group.toCharArray()) {\n                if (c == '(')\
    \ {\n                    level++;\n                    max_level = Math.max(max_level,\
    \ level);\n                } else if (c == ')') {\n                    level--;\n\
    \                }\n            }\n            result.add(max_level);\n      \
    \  }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        String[] groups = paren_string.split(\" \");\n        for (String group\
    \ : groups) {\n            long max_depth = 0;\n            long depth = 0;\n\
    \            for (char c : group.toCharArray()) {\n                if (c == '(')\
    \ {\n                    depth += 1;\n                    max_depth = Math.max(max_depth,\
    \ depth);\n                } else if (c == ')') {\n                    depth -=\
    \ 1;\n                }\n            }\n            result.add(max_depth);\n \
    \       }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        String[] paren_groups = paren_string.split(\" \");\n        for (String\
    \ paren_group : paren_groups) {\n            long max_depth = 0;\n           \
    \ long current_depth = 0;\n            for (int i = 0; i < paren_group.length();\
    \ i++) {\n                if (paren_group.charAt(i) == '(') {\n              \
    \      current_depth++;\n                    max_depth = Math.max(max_depth, current_depth);\n\
    \                } else if (paren_group.charAt(i) == ')') {\n                \
    \    current_depth--;\n                }\n            }\n            result.add(max_depth);\n\
    \        }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        String[] paren_groups = paren_string.split(\" \");\n        for (String\
    \ paren_group : paren_groups) {\n            long max_depth = 0;\n           \
    \ long depth = 0;\n            for (int i = 0; i < paren_group.length(); i++)\
    \ {\n                if (paren_group.charAt(i) == '(') {\n                   \
    \ depth++;\n                    max_depth = Math.max(max_depth, depth);\n    \
    \            } else if (paren_group.charAt(i) == ')') {\n                    depth--;\n\
    \                }\n            }\n            result.add(max_depth);\n      \
    \  }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        String[] parens = paren_string.split(\" \");\n        for (String paren\
    \ : parens) {\n            long max_depth = 0;\n            long depth = 0;\n\
    \            for (int i = 0; i < paren.length(); i++) {\n                if (paren.charAt(i)\
    \ == '(') {\n                    depth++;\n                    max_depth = Math.max(max_depth,\
    \ depth);\n                } else if (paren.charAt(i) == ')') {\n            \
    \        depth--;\n                }\n            }\n            result.add(max_depth);\n\
    \        }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        String[] groups = paren_string.split(\" \");\n        for (String group\
    \ : groups) {\n            long max_depth = 0;\n            long depth = 0;\n\
    \            for (int i = 0; i < group.length(); i++) {\n                if (group.charAt(i)\
    \ == '(') {\n                    depth++;\n                    max_depth = Math.max(max_depth,\
    \ depth);\n                } else if (group.charAt(i) == ')') {\n            \
    \        depth--;\n                }\n            }\n            result.add(max_depth);\n\
    \        }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        String[] groups = paren_string.split(\" \");\n        for (String group\
    \ : groups) {\n            int max_depth = 0;\n            int depth = 0;\n  \
    \          for (int i = 0; i < group.length(); i++) {\n                if (group.charAt(i)\
    \ == '(') {\n                    depth += 1;\n                    max_depth =\
    \ Math.max(max_depth, depth);\n                } else if (group.charAt(i) == ')')\
    \ {\n                    depth -= 1;\n                }\n            }\n     \
    \       result.add((long)max_depth);\n        }\n        return result;", "  \
    \      ArrayList<Long> result = new ArrayList<Long>();\n        String[] paren_groups\
    \ = paren_string.split(\" \");\n        for (String group : paren_groups) {\n\
    \            long max_depth = 0;\n            long depth = 0;\n            for\
    \ (char c : group.toCharArray()) {\n                if (c == '(') {\n        \
    \            depth++;\n                    max_depth = Math.max(max_depth, depth);\n\
    \                } else if (c == ')') {\n                    depth--;\n      \
    \          }\n            }\n            result.add(max_depth);\n        }\n \
    \       return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        String[] parens = paren_string.split(\" \");\n        for (String paren\
    \ : parens) {\n            result.add(parseNestedParensHelper(paren));\n     \
    \   }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        // Write your code here.\n        return result;", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        for (String paren_group : paren_string.split(\"\
    \ \")) {\n            long max_depth = 0l;\n            long depth = 0l;\n   \
    \         for (char c : paren_group.toCharArray()) {\n                if (c ==\
    \ '(') {\n                    depth++;\n                    max_depth = Math.max(max_depth,\
    \ depth);\n                } else if (c == ')') {\n                    depth--;\n\
    \                }\n            }\n            result.add(max_depth);\n      \
    \  }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        String[] groups = paren_string.split(\" \");\n        for (String group\
    \ : groups) {\n            long max_depth = 0;\n            long depth = 0;\n\
    \            for (int i = 0; i < group.length(); i++) {\n                if (group.charAt(i)\
    \ == '(') {\n                    depth++;\n                    max_depth = Math.max(max_depth,\
    \ depth);\n                } else if (group.charAt(i) == ')') {\n            \
    \        depth--;\n                }\n            }\n            result.add(max_depth);\n\
    \        }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        String[] paren_groups = paren_string.split(\" \");\n        for (String\
    \ paren_group : paren_groups) {\n            long max_depth = 0;\n           \
    \ long curr_depth = 0;\n            for (int i = 0; i < paren_group.length();\
    \ i++) {\n                if (paren_group.charAt(i) == '(') {\n              \
    \      curr_depth++;\n                    max_depth = Math.max(max_depth, curr_depth);\n\
    \                } else if (paren_group.charAt(i) == ')') {\n                \
    \    curr_depth--;\n                }\n            }\n            result.add(max_depth);\n\
    \        }\n        return result;", "        // >>> parseNestedParens((\"(()())\
    \ ((())) () ((())()())\"))\n        // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n        ArrayList<Long> ret = new ArrayList<Long>();\n\
    \        // YOUR CODE HERE\n        return ret;", "        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        String[] parens = paren_string.split(\" \"\
    );\n        for (String paren : parens) {\n            result.add(parseNestedParensHelper(paren));\n\
    \        }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        String[] groups = paren_string.split(\" \");\n        for (String group\
    \ : groups) {\n            long max_depth = 0;\n            long depth = 0;\n\
    \            for (char c : group.toCharArray()) {\n                if (c == '(')\
    \ {\n                    depth += 1;\n                    max_depth = Math.max(max_depth,\
    \ depth);\n                } else if (c == ')') {\n                    depth -=\
    \ 1;\n                }\n            }\n            result.add(max_depth);\n \
    \       }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        String[] groups = paren_string.split(\" \");\n        for (String group\
    \ : groups) {\n            long max_depth = 0;\n            long current_depth\
    \ = 0;\n            for (int i = 0; i < group.length(); i++) {\n             \
    \   if (group.charAt(i) == '(') {\n                    current_depth++;\n    \
    \                max_depth = Math.max(max_depth, current_depth);\n           \
    \     } else if (group.charAt(i) == ')') {\n                    current_depth--;\n\
    \                }\n            }\n            result.add(max_depth);\n      \
    \  }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        String[] paren_groups = paren_string.split(\" \");\n        for (String\
    \ paren_group : paren_groups) {\n            long max_nesting = 0;\n         \
    \   long current_nesting = 0;\n            for (char c : paren_group.toCharArray())\
    \ {\n                if (c == '(') {\n                    current_nesting += 1;\n\
    \                    max_nesting = Math.max(max_nesting, current_nesting);\n \
    \               } else if (c == ')') {\n                    current_nesting -=\
    \ 1;\n                }\n            }\n            result.add(max_nesting);\n\
    \        }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        // Write your code here\n        // To print results to the standard\
    \ output you can use System.out.println()\n        // Example: System.out.println(\"\
    Hello world!\");\n        String[] groups = paren_string.split(\" \");\n     \
    \   for (String group : groups) {\n            int max = 0;\n            int count\
    \ = 0;\n            for (int i = 0; i < group.length(); i++) {\n             \
    \   if (group.charAt(i) == '(') {\n                    count++;\n            \
    \        max = Math.max(max, count);\n                } else {\n             \
    \       count--;\n                }\n            }\n            result.add((long)max);\n\
    \        }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        String[] paren_groups = paren_string.split(\" \");\n        for (String\
    \ paren_group : paren_groups) {\n            long max_depth = 0;\n           \
    \ long current_depth = 0;\n            for (int i = 0; i < paren_group.length();\
    \ i++) {\n                if (paren_group.charAt(i) == '(') {\n              \
    \      current_depth++;\n                    max_depth = Math.max(max_depth, current_depth);\n\
    \                } else if (paren_group.charAt(i) == ')') {\n                \
    \    current_depth--;\n                }\n            }\n            result.add(max_depth);\n\
    \        }\n        return result;", "        // Write your code here\n      \
    \  ArrayList<Long> result = new ArrayList<Long>();\n        String[] groups =\
    \ paren_string.split(\" \");\n        for (String group : groups) {\n        \
    \    int max = 0;\n            int count = 0;\n            for (int i = 0; i <\
    \ group.length(); i++) {\n                if (group.charAt(i) == '(') {\n    \
    \                count++;\n                    max = Math.max(max, count);\n \
    \               } else {\n                    count--;\n                }\n  \
    \          }\n            result.add((long)max);\n        }\n        return result;",
  "        ArrayList<Long> max_depth = new ArrayList<Long>();\n        for (String\
    \ paren_group : paren_string.split(\" \")) {\n            long depth = 0;\n  \
    \          long max_depth_so_far = 0;\n            for (int i = 0; i < paren_group.length();\
    \ i++) {\n                if (paren_group.charAt(i) == '(') {\n              \
    \      depth++;\n                    max_depth_so_far = Math.max(max_depth_so_far,\
    \ depth);\n                } else if (paren_group.charAt(i) == ')') {\n      \
    \              depth--;\n                }\n            }\n            max_depth.add(max_depth_so_far);\n\
    \        }\n        return max_depth;", "        ArrayList<Long> result = new\
    \ ArrayList<Long>();\n        String[] paren_groups = paren_string.split(\" \"\
    );\n        for (String paren_group : paren_groups) {\n            long max_depth\
    \ = 0;\n            long curr_depth = 0;\n            for (int i = 0; i < paren_group.length();\
    \ i++) {\n                if (paren_group.charAt(i) == '(') {\n              \
    \      curr_depth++;\n                    max_depth = Math.max(max_depth, curr_depth);\n\
    \                } else if (paren_group.charAt(i) == ')') {\n                \
    \    curr_depth--;\n                }\n            }\n            result.add(max_depth);\n\
    \        }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        String[] groups = paren_string.split(\" \");\n        for (String group\
    \ : groups) {\n            int max_depth = 0;\n            int depth = 0;\n  \
    \          for (char c : group.toCharArray()) {\n                if (c == '(')\
    \ {\n                    depth += 1;\n                    max_depth = Math.max(max_depth,\
    \ depth);\n                } else if (c == ')') {\n                    depth -=\
    \ 1;\n                }\n            }\n            result.add((long)max_depth);\n\
    \        }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        // >>> YOUR CODE HERE\n        return result;", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        String[] paren_groups = paren_string.split(\"\
    \ \");\n        for (String paren_group : paren_groups) {\n            int max_depth\
    \ = 0;\n            int depth = 0;\n            for (int i = 0; i < paren_group.length();\
    \ i++) {\n                if (paren_group.charAt(i) == '(') {\n              \
    \      depth++;\n                    max_depth = Math.max(max_depth, depth);\n\
    \                } else if (paren_group.charAt(i) == ')') {\n                \
    \    depth--;\n                }\n            }\n            result.add((long)max_depth);\n\
    \        }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        String[] groups = paren_string.split(\" \");\n        for (String group\
    \ : groups) {\n            long max_depth = 0;\n            long depth = 0;\n\
    \            for (int i = 0; i < group.length(); i++) {\n                if (group.charAt(i)\
    \ == '(') {\n                    depth++;\n                    max_depth = Math.max(max_depth,\
    \ depth);\n                } else if (group.charAt(i) == ')') {\n            \
    \        depth--;\n                }\n            }\n            result.add(max_depth);\n\
    \        }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        for (String paren_group : paren_string.split(\" \")) {\n            long\
    \ max_depth = 0;\n            long current_depth = 0;\n            for (char c\
    \ : paren_group.toCharArray()) {\n                if (c == '(') {\n          \
    \          current_depth += 1;\n                    max_depth = Math.max(max_depth,\
    \ current_depth);\n                } else if (c == ')') {\n                  \
    \  current_depth -= 1;\n                }\n            }\n            result.add(max_depth);\n\
    \        }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        String[] parens = paren_string.split(\" \");\n        for (String paren\
    \ : parens) {\n            long max = 0;\n            long count = 0;\n      \
    \      for (int i = 0; i < paren.length(); i++) {\n                if (paren.charAt(i)\
    \ == '(') {\n                    count++;\n                    max = Math.max(max,\
    \ count);\n                } else {\n                    count--;\n          \
    \      }\n            }\n            result.add(max);\n        }\n        return\
    \ result;", "        ArrayList<Long> result = new ArrayList<Long>();\n       \
    \ String[] groups = paren_string.split(\" \");\n        for (String group : groups)\
    \ {\n            long max_depth = 0;\n            long depth = 0;\n          \
    \  for (int i = 0; i < group.length(); i++) {\n                if (group.charAt(i)\
    \ == '(') {\n                    depth++;\n                    max_depth = Math.max(max_depth,\
    \ depth);\n                } else if (group.charAt(i) == ')') {\n            \
    \        depth--;\n                }\n            }\n            result.add(max_depth);\n\
    \        }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        String[] groups = paren_string.split(\" \");\n        for (String group\
    \ : groups) {\n            result.add(parseNestedParensHelper(group));\n     \
    \   }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        String[] groups = paren_string.split(\" \");\n        for (String group\
    \ : groups) {\n            long max_depth = 0;\n            long depth = 0;\n\
    \            for (char c : group.toCharArray()) {\n                if (c == '(')\
    \ {\n                    depth += 1;\n                    max_depth = Math.max(max_depth,\
    \ depth);\n                } else if (c == ')') {\n                    depth -=\
    \ 1;\n                }\n            }\n            result.add(max_depth);\n \
    \       }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        String[] parens = paren_string.split(\" \");\n        for (String paren\
    \ : parens) {\n            long max = 0;\n            long count = 0;\n      \
    \      for (int i = 0; i < paren.length(); i++) {\n                if (paren.charAt(i)\
    \ == '(') {\n                    count++;\n                    max = Math.max(max,\
    \ count);\n                } else {\n                    count--;\n          \
    \      }\n            }\n            result.add(max);\n        }\n        return\
    \ result;", "        ArrayList<Long> result = new ArrayList<Long>();\n       \
    \ String[] parens = paren_string.split(\" \");\n        for (String paren : parens)\
    \ {\n            result.add(parseNestedParensHelper(paren, 0, 0));\n        }\n\
    \        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        String[] parens = paren_string.split(\" \");\n        for (String paren\
    \ : parens) {\n            long max_depth = 0;\n            long depth = 0;\n\
    \            for (int i = 0; i < paren.length(); i++) {\n                if (paren.charAt(i)\
    \ == '(') {\n                    depth++;\n                    max_depth = Math.max(max_depth,\
    \ depth);\n                } else if (paren.charAt(i) == ')') {\n            \
    \        depth--;\n                }\n            }\n            result.add(max_depth);\n\
    \        }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        String[] groups = paren_string.split(\" \");\n        for (String group\
    \ : groups) {\n            long max_depth = 0;\n            long depth = 0;\n\
    \            for (char c : group.toCharArray()) {\n                if (c == '(')\
    \ {\n                    depth++;\n                    max_depth = Math.max(max_depth,\
    \ depth);\n                } else if (c == ')') {\n                    depth--;\n\
    \                }\n            }\n            result.add(max_depth);\n      \
    \  }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        String[] groups = paren_string.split(\" \");\n        for (String group\
    \ : groups) {\n            long max_depth = 0;\n            long current_depth\
    \ = 0;\n            for (char c : group.toCharArray()) {\n                if (c\
    \ == '(') {\n                    current_depth++;\n                    max_depth\
    \ = Math.max(max_depth, current_depth);\n                } else if (c == ')')\
    \ {\n                    current_depth--;\n                }\n            }\n\
    \            result.add(max_depth);\n        }\n        return result;", "   \
    \     ArrayList<Long> result = new ArrayList<Long>();\n        String[] groups\
    \ = paren_string.split(\" \");\n        for (String group : groups) {\n      \
    \      long max_depth = 0;\n            long current_depth = 0;\n            for\
    \ (char c : group.toCharArray()) {\n                if (c == '(') {\n        \
    \            current_depth += 1;\n                    max_depth = Math.max(max_depth,\
    \ current_depth);\n                } else if (c == ')') {\n                  \
    \  current_depth -= 1;\n                }\n            }\n            result.add(max_depth);\n\
    \        }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        String[] groups = paren_string.split(\" \");\n        for (String group\
    \ : groups) {\n            result.add(parseNestedParensHelper(group));\n     \
    \   }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        String[] groups = paren_string.split(\" \");\n        for (String group\
    \ : groups) {\n            long max_depth = 0;\n            long depth = 0;\n\
    \            for (int i = 0; i < group.length(); i++) {\n                if (group.charAt(i)\
    \ == '(') {\n                    depth++;\n                    max_depth = Math.max(max_depth,\
    \ depth);\n                } else if (group.charAt(i) == ')') {\n            \
    \        depth--;\n                }\n            }\n            result.add(max_depth);\n\
    \        }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        String[] parens = paren_string.split(\" \");\n        for (String paren\
    \ : parens) {\n            long max_depth = 0;\n            long depth = 0;\n\
    \            for (int i = 0; i < paren.length(); i++) {\n                if (paren.charAt(i)\
    \ == '(') {\n                    depth++;\n                    max_depth = Math.max(max_depth,\
    \ depth);\n                } else if (paren.charAt(i) == ')') {\n            \
    \        depth--;\n                }\n            }\n            result.add(max_depth);\n\
    \        }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        String[] groups = paren_string.split(\" \");\n        for (String group\
    \ : groups) {\n            long max_depth = 0;\n            long depth = 0;\n\
    \            for (int i = 0; i < group.length(); i++) {\n                if (group.charAt(i)\
    \ == '(') {\n                    depth += 1;\n                    max_depth =\
    \ Math.max(max_depth, depth);\n                } else if (group.charAt(i) == ')')\
    \ {\n                    depth -= 1;\n                }\n            }\n     \
    \       result.add(max_depth);\n        }\n        return result;", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        String[] groups = paren_string.split(\"\
    \ \");\n        for (String group : groups) {\n            long max_depth = 0;\n\
    \            long depth = 0;\n            for (int i = 0; i < group.length();\
    \ i++) {\n                if (group.charAt(i) == '(') {\n                    depth++;\n\
    \                    max_depth = Math.max(max_depth, depth);\n               \
    \ } else if (group.charAt(i) == ')') {\n                    depth--;\n       \
    \         }\n            }\n            result.add(max_depth);\n        }\n  \
    \      return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        String[] parens = paren_string.split(\" \");\n        for (String paren\
    \ : parens) {\n            long max_depth = 0;\n            long depth = 0;\n\
    \            for (int i = 0; i < paren.length(); i++) {\n                if (paren.charAt(i)\
    \ == '(') {\n                    depth++;\n                    max_depth = Math.max(max_depth,\
    \ depth);\n                } else if (paren.charAt(i) == ')') {\n            \
    \        depth--;\n                }\n            }\n            result.add(max_depth);\n\
    \        }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        String[] parens = paren_string.split(\" \");\n        for (String paren\
    \ : parens) {\n            long max_depth = 0;\n            long depth = 0;\n\
    \            for (int i = 0; i < paren.length(); i++) {\n                if (paren.charAt(i)\
    \ == '(') {\n                    depth += 1;\n                    max_depth =\
    \ Math.max(max_depth, depth);\n                } else if (paren.charAt(i) == ')')\
    \ {\n                    depth -= 1;\n                }\n            }\n     \
    \       result.add(max_depth);\n        }\n        return result;", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        String[] parens = paren_string.split(\"\
    \ \");\n        for (String paren : parens) {\n            result.add(parseNestedParensHelper(paren));\n\
    \        }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        String[] paren_groups = paren_string.split(\" \");\n        for (String\
    \ paren_group : paren_groups) {\n            long max_nesting = 0;\n         \
    \   long current_nesting = 0;\n            for (int i = 0; i < paren_group.length();\
    \ i++) {\n                if (paren_group.charAt(i) == '(') {\n              \
    \      current_nesting++;\n                    max_nesting = Math.max(max_nesting,\
    \ current_nesting);\n                } else if (paren_group.charAt(i) == ')')\
    \ {\n                    current_nesting--;\n                }\n            }\n\
    \            result.add(max_nesting);\n        }\n        return result;", " \
    \       ArrayList<Long> result = new ArrayList<Long>();\n        String[] parens\
    \ = paren_string.split(\" \");\n        for (String paren : parens) {\n      \
    \      long max_nesting = 0;\n            long current_nesting = 0;\n        \
    \    for (int i = 0; i < paren.length(); i++) {\n                if (paren.charAt(i)\
    \ == '(') {\n                    current_nesting += 1;\n                    max_nesting\
    \ = Math.max(max_nesting, current_nesting);\n                } else if (paren.charAt(i)\
    \ == ')') {\n                    current_nesting -= 1;\n                }\n  \
    \          }\n            result.add(max_nesting);\n        }\n        return\
    \ result;", "        ArrayList<Long> result = new ArrayList<Long>();\n       \
    \ String[] parens = paren_string.split(\" \");\n        for (String paren : parens)\
    \ {\n            long max_depth = 0;\n            long depth = 0;\n          \
    \  for (int i = 0; i < paren.length(); i++) {\n                if (paren.charAt(i)\
    \ == '(') {\n                    depth++;\n                    max_depth = Math.max(max_depth,\
    \ depth);\n                } else if (paren.charAt(i) == ')') {\n            \
    \        depth--;\n                }\n            }\n            result.add(max_depth);\n\
    \        }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        String[] groups = paren_string.split(\" \");\n        for (String group\
    \ : groups) {\n            result.add(parseNestedParensHelper(group));\n     \
    \   }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        String[] groups = paren_string.split(\" \");\n        for (String group\
    \ : groups) {\n            long max_depth = 0;\n            long depth = 0;\n\
    \            for (int i = 0; i < group.length(); i++) {\n                if (group.charAt(i)\
    \ == '(') {\n                    depth++;\n                    max_depth = Math.max(max_depth,\
    \ depth);\n                } else if (group.charAt(i) == ')') {\n            \
    \        depth--;\n                }\n            }\n            result.add(max_depth);\n\
    \        }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        String[] groups = paren_string.split(\" \");\n        for (String group\
    \ : groups) {\n            long max_depth = 0;\n            long depth = 0;\n\
    \            for (char c : group.toCharArray()) {\n                if (c == '(')\
    \ {\n                    depth++;\n                    max_depth = Math.max(max_depth,\
    \ depth);\n                } else if (c == ')') {\n                    depth--;\n\
    \                }\n            }\n            result.add(max_depth);\n      \
    \  }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        ArrayList<Long> temp = new ArrayList<Long>();\n        for (int i = 0;\
    \ i < paren_string.length(); i++) {\n            if (paren_string.charAt(i) ==\
    \ '(') {\n                temp.add((long)1l);\n            } else if (paren_string.charAt(i)\
    \ == ')') {\n                temp.add((long)-1l);\n            } else if (paren_string.charAt(i)\
    \ == ' ') {\n                result.add(Collections.max(temp));\n            \
    \    temp = new ArrayList<Long>();\n            }\n        }\n        result.add(Collections.max(temp));\n\
    \        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        for (String parens : paren_string.split(\" \")) {\n            long max_depth\
    \ = 0;\n            long cur_depth = 0;\n            for (char c : parens.toCharArray())\
    \ {\n                if (c == '(') {\n                    cur_depth += 1;\n  \
    \                  max_depth = Math.max(max_depth, cur_depth);\n             \
    \   } else if (c == ')') {\n                    cur_depth -= 1;\n            \
    \    }\n            }\n            result.add(max_depth);\n        }\n       \
    \ return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        String[] groups = paren_string.split(\" \");\n        for (String group\
    \ : groups) {\n            long max_depth = 0;\n            long cur_depth = 0;\n\
    \            for (int i = 0; i < group.length(); i++) {\n                if (group.charAt(i)\
    \ == '(') {\n                    cur_depth++;\n                    max_depth =\
    \ Math.max(max_depth, cur_depth);\n                } else if (group.charAt(i)\
    \ == ')') {\n                    cur_depth--;\n                }\n           \
    \ }\n            result.add(max_depth);\n        }\n        return result;", " \
    \       ArrayList<Long> result = new ArrayList<Long>();\n        String[] parens\
    \ = paren_string.split(\" \");\n        for (String paren : parens) {\n      \
    \      result.add(parseNestedParensHelper(paren));\n        }\n        return\
    \ result;", "        ArrayList<Long> result = new ArrayList<Long>();\n       \
    \ String[] paren_groups = paren_string.split(\" \");\n        for (String paren_group\
    \ : paren_groups) {\n            long max_depth = 0;\n            long current_depth\
    \ = 0;\n            for (int i = 0; i < paren_group.length(); i++) {\n       \
    \         if (paren_group.charAt(i) == '(') {\n                    current_depth++;\n\
    \                    max_depth = Math.max(max_depth, current_depth);\n       \
    \         } else if (paren_group.charAt(i) == ')') {\n                    current_depth--;\n\
    \                }\n            }\n            result.add(max_depth);\n      \
    \  }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        String[] groups = paren_string.split(\" \");\n        for (String group\
    \ : groups) {\n            long max_depth = 0;\n            long depth = 0;\n\
    \            for (int i = 0; i < group.length(); i++) {\n                if (group.charAt(i)\
    \ == '(') {\n                    depth++;\n                    max_depth = Math.max(max_depth,\
    \ depth);\n                } else if (group.charAt(i) == ')') {\n            \
    \        depth--;\n                }\n            }\n            result.add(max_depth);\n\
    \        }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        // Write your code here.\n        return result;", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        String[] parens = paren_string.split(\"\
    \ \");\n        for (String paren : parens) {\n            long max_depth = 0;\n\
    \            long depth = 0;\n            for (int i = 0; i < paren.length();\
    \ i++) {\n                if (paren.charAt(i) == '(') {\n                    depth++;\n\
    \                    max_depth = Math.max(max_depth, depth);\n               \
    \ } else if (paren.charAt(i) == ')') {\n                    depth--;\n       \
    \         }\n            }\n            result.add(max_depth);\n        }\n  \
    \      return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        ArrayList<Long> stack = new ArrayList<Long>();\n        long max = 0;\n\
    \        for (int i = 0; i < paren_string.length(); i++) {\n            if (paren_string.charAt(i)\
    \ == '(') {\n                stack.add((long)1l);\n                max = Math.max(max,\
    \ (long)stack.size());\n            } else if (paren_string.charAt(i) == ')')\
    \ {\n                stack.remove(stack.size() - 1);\n            } else if (paren_string.charAt(i)\
    \ == ' ') {\n                result.add(max);\n                max = 0;\n    \
    \        }\n        }\n        result.add(max);\n        return result;", "  \
    \      ArrayList<Long> result = new ArrayList<Long>();\n        String[] parens\
    \ = paren_string.split(\" \");\n        for (String paren : parens) {\n      \
    \      long max_depth = 0;\n            long depth = 0;\n            for (int\
    \ i = 0; i < paren.length(); i++) {\n                if (paren.charAt(i) == '(')\
    \ {\n                    depth++;\n                    max_depth = Math.max(max_depth,\
    \ depth);\n                } else if (paren.charAt(i) == ')') {\n            \
    \        depth--;\n                }\n            }\n            result.add(max_depth);\n\
    \        }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        String[] groups = paren_string.split(\" \");\n        for (String group\
    \ : groups) {\n            long max_depth = 0;\n            long cur_depth = 0;\n\
    \            for (int i = 0; i < group.length(); i++) {\n                if (group.charAt(i)\
    \ == '(') {\n                    cur_depth++;\n                    max_depth =\
    \ Math.max(max_depth, cur_depth);\n                } else if (group.charAt(i)\
    \ == ')') {\n                    cur_depth--;\n                }\n           \
    \ }\n            result.add(max_depth);\n        }\n        return result;", " \
    \       ArrayList<Long> result = new ArrayList<Long>();\n        String[] paren_groups\
    \ = paren_string.split(\" \");\n        for (String paren_group : paren_groups)\
    \ {\n            long max_depth = 0;\n            long depth = 0;\n          \
    \  for (int i = 0; i < paren_group.length(); i++) {\n                if (paren_group.charAt(i)\
    \ == '(') {\n                    depth++;\n                    max_depth = Math.max(max_depth,\
    \ depth);\n                } else if (paren_group.charAt(i) == ')') {\n      \
    \              depth--;\n                }\n            }\n            result.add(max_depth);\n\
    \        }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        String[] groups = paren_string.split(\" \");\n        for (String group\
    \ : groups) {\n            long max_depth = 0;\n            long depth = 0;\n\
    \            for (int i = 0; i < group.length(); i++) {\n                if (group.charAt(i)\
    \ == '(') {\n                    depth++;\n                    max_depth = Math.max(max_depth,\
    \ depth);\n                } else if (group.charAt(i) == ')') {\n            \
    \        depth--;\n                }\n            }\n            result.add(max_depth);\n\
    \        }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        String[] groups = paren_string.split(\" \");\n        for (String group\
    \ : groups) {\n            long max_depth = 0;\n            long current_depth\
    \ = 0;\n            for (int i = 0; i < group.length(); i++) {\n             \
    \   if (group.charAt(i) == '(') {\n                    current_depth++;\n    \
    \                max_depth = Math.max(max_depth, current_depth);\n           \
    \     } else if (group.charAt(i) == ')') {\n                    current_depth--;\n\
    \                }\n            }\n            result.add(max_depth);\n      \
    \  }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        String[] groups = paren_string.split(\" \");\n        for (String group\
    \ : groups) {\n            long max_depth = 0;\n            long depth = 0;\n\
    \            for (int i = 0; i < group.length(); i++) {\n                if (group.charAt(i)\
    \ == '(') {\n                    depth++;\n                    max_depth = Math.max(max_depth,\
    \ depth);\n                } else if (group.charAt(i) == ')') {\n            \
    \        depth--;\n                }\n            }\n            result.add(max_depth);\n\
    \        }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        String[] parens = paren_string.split(\" \");\n        for (String paren\
    \ : parens) {\n            result.add(parseNestedParensHelper(paren));\n     \
    \   }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        String[] parens = paren_string.split(\" \");\n        for (String paren\
    \ : parens) {\n            long max_depth = 0;\n            long current_depth\
    \ = 0;\n            for (int i = 0; i < paren.length(); i++) {\n             \
    \   if (paren.charAt(i) == '(') {\n                    current_depth++;\n    \
    \                max_depth = Math.max(max_depth, current_depth);\n           \
    \     } else if (paren.charAt(i) == ')') {\n                    current_depth--;\n\
    \                }\n            }\n            result.add(max_depth);\n      \
    \  }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        String[] parens = paren_string.split(\" \");\n        for (String paren\
    \ : parens) {\n            long max_depth = 0;\n            long current_depth\
    \ = 0;\n            for (int i = 0; i < paren.length(); i++) {\n             \
    \   if (paren.charAt(i) == '(') {\n                    current_depth++;\n    \
    \                max_depth = Math.max(max_depth, current_depth);\n           \
    \     } else if (paren.charAt(i) == ')') {\n                    current_depth--;\n\
    \                }\n            }\n            result.add(max_depth);\n      \
    \  }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        String[] groups = paren_string.split(\" \");\n        for (String group\
    \ : groups) {\n            long max_depth = 0;\n            long depth = 0;\n\
    \            for (char c : group.toCharArray()) {\n                if (c == '(')\
    \ {\n                    depth += 1;\n                    max_depth = Math.max(max_depth,\
    \ depth);\n                } else if (c == ')') {\n                    depth -=\
    \ 1;\n                }\n            }\n            result.add(max_depth);\n \
    \       }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        String[] parens = paren_string.split(\" \");\n        for (String paren\
    \ : parens) {\n            long max_depth = 0;\n            long depth = 0;\n\
    \            for (int i = 0; i < paren.length(); i++) {\n                if (paren.charAt(i)\
    \ == '(') {\n                    depth++;\n                    max_depth = Math.max(max_depth,\
    \ depth);\n                } else if (paren.charAt(i) == ')') {\n            \
    \        depth--;\n                }\n            }\n            result.add(max_depth);\n\
    \        }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        String[] parens = paren_string.split(\" \");\n        for (String paren\
    \ : parens) {\n            long max_nesting = 0l;\n            long current_nesting\
    \ = 0l;\n            for (char c : paren.toCharArray()) {\n                if\
    \ (c == '(') {\n                    current_nesting++;\n                    max_nesting\
    \ = Math.max(max_nesting, current_nesting);\n                } else if (c == ')')\
    \ {\n                    current_nesting--;\n                }\n            }\n\
    \            result.add(max_nesting);\n        }\n        return result;", " \
    \       ArrayList<Long> result = new ArrayList<Long>();\n        String[] groups\
    \ = paren_string.split(\" \");\n        for (String group : groups) {\n      \
    \      long max_nesting = 0;\n            long current_nesting = 0;\n        \
    \    for (int i = 0; i < group.length(); i++) {\n                if (group.charAt(i)\
    \ == '(') {\n                    current_nesting++;\n                    max_nesting\
    \ = Math.max(max_nesting, current_nesting);\n                } else if (group.charAt(i)\
    \ == ')') {\n                    current_nesting--;\n                }\n     \
    \       }\n            result.add(max_nesting);\n        }\n        return result;",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        String[] paren_groups\
    \ = paren_string.split(\" \");\n        for (String paren_group : paren_groups)\
    \ {\n            long max_depth = 0;\n            long current_depth = 0;\n  \
    \          for (int i = 0; i < paren_group.length(); i++) {\n                if\
    \ (paren_group.charAt(i) == '(') {\n                    current_depth++;\n   \
    \                 max_depth = Math.max(max_depth, current_depth);\n          \
    \      } else if (paren_group.charAt(i) == ')') {\n                    current_depth--;\n\
    \                }\n            }\n            result.add(max_depth);\n      \
    \  }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        String[] paren_groups = paren_string.split(\" \");\n        for (String\
    \ paren_group : paren_groups) {\n            long max_level = 0;\n           \
    \ long current_level = 0;\n            for (int i = 0; i < paren_group.length();\
    \ i++) {\n                if (paren_group.charAt(i) == '(') {\n              \
    \      current_level++;\n                    max_level = Math.max(max_level, current_level);\n\
    \                } else if (paren_group.charAt(i) == ')') {\n                \
    \    current_level--;\n                }\n            }\n            result.add(max_level);\n\
    \        }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        String[] parens = paren_string.split(\" \");\n        for (String paren\
    \ : parens) {\n            long max_depth = 0;\n            long depth = 0;\n\
    \            for (int i = 0; i < paren.length(); i++) {\n                if (paren.charAt(i)\
    \ == '(') {\n                    depth += 1;\n                    max_depth =\
    \ Math.max(max_depth, depth);\n                } else if (paren.charAt(i) == ')')\
    \ {\n                    depth -= 1;\n                }\n            }\n     \
    \       result.add(max_depth);\n        }\n        return result;", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        // Write your code here.\n        return\
    \ result;", "        ArrayList<Long> result = new ArrayList<Long>();\n       \
    \ String[] parens = paren_string.split(\" \");\n        for (String paren : parens)\
    \ {\n            long max_depth = 0;\n            long depth = 0;\n          \
    \  for (char c : paren.toCharArray()) {\n                if (c == '(') {\n   \
    \                 depth += 1;\n                    max_depth = Math.max(max_depth,\
    \ depth);\n                } else if (c == ')') {\n                    depth -=\
    \ 1;\n                }\n            }\n            result.add(max_depth);\n \
    \       }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        String[] groups = paren_string.split(\" \");\n        for (String group\
    \ : groups) {\n            long max_depth = 0;\n            long depth = 0;\n\
    \            for (int i = 0; i < group.length(); i++) {\n                if (group.charAt(i)\
    \ == '(') {\n                    depth++;\n                    max_depth = Math.max(max_depth,\
    \ depth);\n                } else if (group.charAt(i) == ')') {\n            \
    \        depth--;\n                }\n            }\n            result.add(max_depth);\n\
    \        }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        for (String paren : paren_string.split(\" \")) {\n            result.add(parseNestedParensHelper(paren));\n\
    \        }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        // >>> YOUR CODE HERE\n        return result;", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        String[] groups = paren_string.split(\"\
    \ \");\n        for (String group : groups) {\n            long max_depth = 0;\n\
    \            long depth = 0;\n            for (int i = 0; i < group.length();\
    \ i++) {\n                if (group.charAt(i) == '(') {\n                    depth++;\n\
    \                    max_depth = Math.max(max_depth, depth);\n               \
    \ } else if (group.charAt(i) == ')') {\n                    depth--;\n       \
    \         }\n            }\n            result.add(max_depth);\n        }\n  \
    \      return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        String[] groups = paren_string.split(\" \");\n        for (String group\
    \ : groups) {\n            long max_depth = 0;\n            long depth = 0;\n\
    \            for (int i = 0; i < group.length(); i++) {\n                if (group.charAt(i)\
    \ == '(') {\n                    depth++;\n                    max_depth = Math.max(max_depth,\
    \ depth);\n                } else if (group.charAt(i) == ')') {\n            \
    \        depth--;\n                }\n            }\n            result.add(max_depth);\n\
    \        }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        String[] groups = paren_string.split(\" \");\n        for (String group\
    \ : groups) {\n            long max_depth = 0;\n            long depth = 0;\n\
    \            for (int i = 0; i < group.length(); i++) {\n                if (group.charAt(i)\
    \ == '(') {\n                    depth++;\n                    max_depth = Math.max(max_depth,\
    \ depth);\n                } else if (group.charAt(i) == ')') {\n            \
    \        depth--;\n                }\n            }\n            result.add(max_depth);\n\
    \        }\n        return result;"]
stop_tokens:
- "\n    }\n"
