name: HumanEval_6_parse_nested_parens
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // Input to this function is a string represented multiple\
  \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
  \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
  \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
  (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
  \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
  \ paren_string) {\n"
tests: "    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"\
  (()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
  \ (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((()))\
  \ (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
  \ (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
  \ ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
completions: ["        ArrayList<Long> result = new ArrayList<Long>();\n        String[]\
    \ parens = paren_string.split(\" \");\n        for (String paren : parens) {\n\
    \            long max_depth = 0;\n            long depth = 0;\n            for\
    \ (int i = 0; i < paren.length(); i++) {\n                if (paren.charAt(i)\
    \ == '(') {\n                    depth++;\n                    max_depth = Math.max(max_depth,\
    \ depth);\n                } else if (paren.charAt(i) == ')') {\n            \
    \        depth--;\n                }\n            }\n            result.add(max_depth);\n\
    \        }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        String[] paren_groups = paren_string.split(\" \");\n        for (String\
    \ paren_group : paren_groups) {\n            long max_nesting = 0;\n         \
    \   long current_nesting = 0;\n            for (int i = 0; i < paren_group.length();\
    \ i++) {\n                if (paren_group.charAt(i) == '(') {\n              \
    \      current_nesting++;\n                    max_nesting = Math.max(max_nesting,\
    \ current_nesting);\n                } else if (paren_group.charAt(i) == ')')\
    \ {\n                    current_nesting--;\n                }\n            }\n\
    \            result.add(max_nesting);\n        }\n        return result;", " \
    \       ArrayList<Long> result = new ArrayList<Long>();\n        String[] groups\
    \ = paren_string.split(\" \");\n        for (String group : groups) {\n      \
    \      long max_depth = 0;\n            long depth = 0;\n            for (int\
    \ i = 0; i < group.length(); i++) {\n                if (group.charAt(i) == '(')\
    \ {\n                    depth++;\n                    max_depth = Math.max(max_depth,\
    \ depth);\n                } else if (group.charAt(i) == ')') {\n            \
    \        depth--;\n                }\n            }\n            result.add(max_depth);\n\
    \        }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        // Write your code here.\n        return result;", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        String[] groups = paren_string.split(\"\
    \ \");\n        for (String group : groups) {\n            long max_depth = 0;\n\
    \            long depth = 0;\n            for (char c : group.toCharArray()) {\n\
    \                if (c == '(') {\n                    depth++;\n             \
    \       max_depth = Math.max(max_depth, depth);\n                } else if (c\
    \ == ')') {\n                    depth--;\n                }\n            }\n\
    \            result.add(max_depth);\n        }\n        return result;", "   \
    \     ArrayList<Long> result = new ArrayList<Long>();\n        for (String s :\
    \ paren_string.split(\" \")) {\n            long max_level = 0;\n            long\
    \ cur_level = 0;\n            for (int i = 0; i < s.length(); i++) {\n       \
    \         if (s.charAt(i) == '(') {\n                    cur_level++;\n      \
    \              max_level = Math.max(max_level, cur_level);\n                }\
    \ else if (s.charAt(i) == ')') {\n                    cur_level--;\n         \
    \       }\n            }\n            result.add(max_level);\n        }\n    \
    \    return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        String[] paren_groups = paren_string.split(\" \");\n        for (String\
    \ paren_group : paren_groups) {\n            long max_depth = 0;\n           \
    \ long depth = 0;\n            for (int i = 0; i < paren_group.length(); i++)\
    \ {\n                char c = paren_group.charAt(i);\n                if (c ==\
    \ '(') {\n                    depth++;\n                    max_depth = Math.max(max_depth,\
    \ depth);\n                } else if (c == ')') {\n                    depth--;\n\
    \                }\n            }\n            result.add(max_depth);\n      \
    \  }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        String[] groups = paren_string.split(\" \");\n        for (String group\
    \ : groups) {\n            long max_level = 0;\n            long level = 0;\n\
    \            for (int i = 0; i < group.length(); i++) {\n                if (group.charAt(i)\
    \ == '(') {\n                    level++;\n                    max_level = Math.max(max_level,\
    \ level);\n                } else if (group.charAt(i) == ')') {\n            \
    \        level--;\n                }\n            }\n            result.add(max_level);\n\
    \        }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        String[] groups = paren_string.split(\" \");\n        for (String group\
    \ : groups) {\n            long max_depth = 0;\n            long cur_depth = 0;\n\
    \            for (int i = 0; i < group.length(); i++) {\n                if (group.charAt(i)\
    \ == '(') {\n                    cur_depth++;\n                    max_depth =\
    \ Math.max(max_depth, cur_depth);\n                } else if (group.charAt(i)\
    \ == ')') {\n                    cur_depth--;\n                }\n           \
    \ }\n            result.add(max_depth);\n        }\n        return result;", " \
    \       ArrayList<Long> result = new ArrayList<Long>();\n        String[] parens\
    \ = paren_string.split(\" \");\n        for (String paren : parens) {\n      \
    \      result.add(parseNestedParensHelper(paren));\n        }\n        return\
    \ result;", "        ArrayList<Long> result = new ArrayList<Long>();\n       \
    \ ArrayList<String> paren_groups = new ArrayList<String>(Arrays.asList(paren_string.split(\"\
    \ \")));\n        for (String paren_group : paren_groups) {\n            long\
    \ max_depth = 0;\n            long current_depth = 0;\n            for (int i\
    \ = 0; i < paren_group.length(); i++) {\n                if (paren_group.charAt(i)\
    \ == '(') {\n                    current_depth++;\n                    if (current_depth\
    \ > max_depth) {\n                        max_depth = current_depth;\n       \
    \             }\n                } else if (paren_group.charAt(i) == ')') {\n\
    \                    current_depth--;\n                }\n            }\n    \
    \        result.add(max_depth);\n        }\n        return result;", "       \
    \ ArrayList<Long> result = new ArrayList<Long>();\n        String[] parens = paren_string.split(\"\
    \ \");\n        for (String paren : parens) {\n            long maxLevel = 0;\n\
    \            long level = 0;\n            for (char c : paren.toCharArray()) {\n\
    \                if (c == '(') {\n                    level++;\n             \
    \       maxLevel = Math.max(maxLevel, level);\n                } else if (c ==\
    \ ')') {\n                    level--;\n                }\n            }\n   \
    \         result.add(maxLevel);\n        }\n        return result;", "       \
    \ ArrayList<Long> result = new ArrayList<Long>();\n        String[] groups = paren_string.split(\"\
    \ \");\n        for (String group : groups) {\n            long max_depth = 0;\n\
    \            long current_depth = 0;\n            for (char c : group.toCharArray())\
    \ {\n                if (c == '(') {\n                    current_depth++;\n \
    \                   max_depth = Math.max(max_depth, current_depth);\n        \
    \        } else if (c == ')') {\n                    current_depth--;\n      \
    \          }\n            }\n            result.add(max_depth);\n        }\n \
    \       return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        String[] parens = paren_string.split(\" \");\n        for (String paren\
    \ : parens) {\n            long max_depth = 0;\n            long depth = 0;\n\
    \            for (int i = 0; i < paren.length(); i++) {\n                if (paren.charAt(i)\
    \ == '(') {\n                    depth++;\n                    max_depth = Math.max(max_depth,\
    \ depth);\n                } else if (paren.charAt(i) == ')') {\n            \
    \        depth--;\n                }\n            }\n            result.add(max_depth);\n\
    \        }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        String[] groups = paren_string.split(\" \");\n        for (String group\
    \ : groups) {\n            long max_depth = 0;\n            long depth = 0;\n\
    \            for (char c : group.toCharArray()) {\n                if (c == '(')\
    \ {\n                    depth++;\n                    max_depth = Math.max(max_depth,\
    \ depth);\n                } else if (c == ')') {\n                    depth--;\n\
    \                }\n            }\n            result.add(max_depth);\n      \
    \  }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        String[] groups = paren_string.split(\" \");\n        for (String group\
    \ : groups) {\n            long max_depth = 0;\n            long current_depth\
    \ = 0;\n            for (char c : group.toCharArray()) {\n                if (c\
    \ == '(') {\n                    current_depth += 1;\n                    max_depth\
    \ = Math.max(max_depth, current_depth);\n                } else if (c == ')')\
    \ {\n                    current_depth -= 1;\n                }\n            }\n\
    \            result.add(max_depth);\n        }\n        return result;", "   \
    \     ArrayList<Long> result = new ArrayList<Long>();\n        String[] groups\
    \ = paren_string.split(\" \");\n        for (String group : groups) {\n      \
    \      long max_depth = 0;\n            long current_depth = 0;\n            for\
    \ (int i = 0; i < group.length(); i++) {\n                if (group.charAt(i)\
    \ == '(') {\n                    current_depth += 1;\n                    max_depth\
    \ = Math.max(max_depth, current_depth);\n                } else if (group.charAt(i)\
    \ == ')') {\n                    current_depth -= 1;\n                }\n    \
    \        }\n            result.add(max_depth);\n        }\n        return result;",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        String[] paren_groups\
    \ = paren_string.split(\" \");\n        for (String paren_group : paren_groups)\
    \ {\n            result.add(parseNestedParensHelper(paren_group));\n        }\n\
    \        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        String[] parens = paren_string.split(\" \");\n        for (String paren\
    \ : parens) {\n            result.add(parseNestedParensHelper(paren));\n     \
    \   }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        String[] paren_groups = paren_string.split(\" \");\n        for (String\
    \ paren_group : paren_groups) {\n            long max_nesting = 0;\n         \
    \   long current_nesting = 0;\n            for (int i = 0; i < paren_group.length();\
    \ i++) {\n                if (paren_group.charAt(i) == '(') {\n              \
    \      current_nesting++;\n                    max_nesting = Math.max(max_nesting,\
    \ current_nesting);\n                } else if (paren_group.charAt(i) == ')')\
    \ {\n                    current_nesting--;\n                }\n            }\n\
    \            result.add(max_nesting);\n        }\n        return result;"]
stop_tokens:
- "\n    }\n"
