name: HumanEval_118_get_closest_vowel
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // You are given a word. Your task is to find the closest vowel\
  \ that stands between \n    // two consonants from the right side of the word (case\
  \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return empty\
  \ string if you didn't\n    // find any vowel met the above condition. \n    //\
  \ You may assume that the given string contains English letter only.\n    // Example:\n\
  \    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n    // >>> getClosestVowel((\"\
  FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"quick\"))\n    // (\"\"\
  )\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n    public static String\
  \ getClosestVowel(String word) {\n"
tests: "    }\n    public static void main(String[] args) {\n    assert(getClosestVowel((\"\
  yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
  u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
  eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n\
  \    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
  most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n\
  \    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
  quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"i\"\
  )));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
  Above\")).equals((\"o\")));\n    }\n\n}\n"
completions: ["        String vowels = \"aeiouAEIOU\";\n        String consonants\
    \ = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n        String result = \"\
    \";\n        for (int i = word.length() - 1; i >= 0; i--) {\n            if (vowels.contains(word.substring(i,\
    \ i + 1))) {\n                if (i + 1 < word.length() && consonants.contains(word.substring(i\
    \ + 1, i + 2))) {\n                    if (i - 1 >= 0 && consonants.contains(word.substring(i\
    \ - 1, i))) {\n                        result = word.substring(i, i + 1);\n  \
    \                      break;\n                    }\n                }\n    \
    \        }\n        }\n        return result;", "        String vowels = \"aeiouAEIOU\"\
    ;\n        String consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n        String result = \"\";\n        for (int i = word.length() - 1; i >=\
    \ 0; i--) {\n            if (consonants.contains(word.substring(i, i + 1))) {\n\
    \                for (int j = i - 1; j >= 0; j--) {\n                    if (vowels.contains(word.substring(j,\
    \ j + 1))) {\n                        result = word.substring(j, j + 1);\n   \
    \                     break;\n                    }\n                }\n     \
    \           break;\n            }\n        }\n        return result;", "     \
    \   String vowels = \"aeiouAEIOU\";\n        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = word.length() - 1; i >= 0; i--) {\n            char c =\
    \ word.charAt(i);\n            if (vowels.indexOf(c) != -1) {\n              \
    \  sb.append(c);\n            } else {\n                if (sb.length() > 0) {\n\
    \                    return sb.toString();\n                }\n            }\n\
    \        }\n        return \"\";", "        // Your code here\n        return\
    \ \"\";", "        String vowels = \"aeiouAEIOU\";\n        String result = \"\
    \";\n        for (int i = word.length() - 1; i >= 0; i--) {\n            if (vowels.contains(word.substring(i,\
    \ i + 1))) {\n                result = word.substring(i, i + 1);\n           \
    \     break;\n            }\n        }\n        return result;", "        // Write\
    \ your code here\n        return \"\";", "        String vowels = \"aeiou\";\n\
    \        int index = word.length() - 1;\n        while (index >= 0) {\n      \
    \      if (vowels.contains(word.substring(index, index + 1))) {\n            \
    \    if (index + 1 < word.length() && !vowels.contains(word.substring(index +\
    \ 1, index + 2))) {\n                    return word.substring(index, index +\
    \ 1);\n                }\n            }\n            index--;\n        }\n   \
    \     return \"\";", "        // TODO: Implement your solution here\n        return\
    \ \"\";", "        String vowels = \"aeiouAEIOU\";\n        String consonants\
    \ = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n        String result = \"\
    \";\n        int index = word.length() - 1;\n        while (index >= 0) {\n  \
    \          if (vowels.contains(word.substring(index, index + 1))) {\n        \
    \        if (index == word.length() - 1) {\n                    break;\n     \
    \           }\n                if (consonants.contains(word.substring(index +\
    \ 1, index + 2))) {\n                    result = word.substring(index, index\
    \ + 1);\n                    break;\n                }\n            }\n      \
    \      index--;\n        }\n        return result;", "        String vowels =\
    \ \"aeiouAEIOU\";\n        String consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n        String result = \"\";\n        for (int i = word.length() - 1; i >=\
    \ 0; i--) {\n            if (consonants.contains(word.substring(i, i + 1))) {\n\
    \                for (int j = i - 1; j >= 0; j--) {\n                    if (vowels.contains(word.substring(j,\
    \ j + 1))) {\n                        result = word.substring(j, j + 1);\n   \
    \                     break;\n                    }\n                }\n     \
    \           break;\n            }\n        }\n        return result;", "     \
    \   String vowels = \"aeiou\";\n        String consonants = \"bcdfghjklmnpqrstvwxyz\"\
    ;\n        String result = \"\";\n        int index = word.length() - 1;\n   \
    \     while (index >= 0) {\n            String letter = word.substring(index,\
    \ index + 1);\n            if (vowels.contains(letter)) {\n                result\
    \ = letter;\n                break;\n            }\n            index--;\n   \
    \     }\n        return result;", "        String vowels = \"aeiouAEIOU\";\n \
    \       String consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n\
    \        String result = \"\";\n        for (int i = word.length() - 1; i >= 0;\
    \ i--) {\n            if (consonants.contains(word.substring(i, i + 1))) {\n \
    \               for (int j = i - 1; j >= 0; j--) {\n                    if (vowels.contains(word.substring(j,\
    \ j + 1))) {\n                        result = word.substring(j, j + 1);\n   \
    \                     break;\n                    }\n                }\n     \
    \           break;\n            }\n        }\n        return result;", "     \
    \   // TODO: Write your code here\n        return \"\";", "        String vowels\
    \ = \"aeiou\";\n        String result = \"\";\n        int index = word.length()\
    \ - 1;\n        while (index >= 0) {\n            if (vowels.contains(word.substring(index,\
    \ index + 1))) {\n                result = word.substring(index, index + 1);\n\
    \                break;\n            }\n            index--;\n        }\n    \
    \    return result;", "        String vowels = \"aeiou\";\n        String result\
    \ = \"\";\n        int index = word.length() - 1;\n        while (index >= 0)\
    \ {\n            if (vowels.contains(word.substring(index, index + 1))) {\n  \
    \              result = word.substring(index, index + 1);\n                break;\n\
    \            }\n            index--;\n        }\n        return result;", "  \
    \      // TODO: Implement your solution here\n        return \"\";", "       \
    \ String vowels = \"aeiouAEIOU\";\n        String consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n        String result = \"\";\n        for (int i = word.length() - 1; i >=\
    \ 0; i--) {\n            if (consonants.contains(word.substring(i, i + 1))) {\n\
    \                if (i == word.length() - 1) {\n                    return \"\"\
    ;\n                }\n                for (int j = i + 1; j < word.length(); j++)\
    \ {\n                    if (vowels.contains(word.substring(j, j + 1))) {\n  \
    \                      return word.substring(j, j + 1);\n                    }\n\
    \                }\n            }\n        }\n        return result;", "     \
    \   String vowels = \"aeiouAEIOU\";\n        String result = \"\";\n        int\
    \ index = -1;\n        for (int i = word.length() - 1; i >= 0; i--) {\n      \
    \      if (vowels.contains(word.substring(i, i + 1))) {\n                if (i\
    \ == word.length() - 1) {\n                    continue;\n                }\n\
    \                if (i == 0) {\n                    continue;\n              \
    \  }\n                if (vowels.contains(word.substring(i - 1, i))) {\n     \
    \               continue;\n                }\n                if (vowels.contains(word.substring(i\
    \ + 1, i + 2))) {\n                    continue;\n                }\n        \
    \        index = i;\n                break;\n            }\n        }\n      \
    \  if (index != -1) {\n            result = word.substring(index, index + 1);\n\
    \        }\n        return result;", "        String vowels = \"aeiouAEIOU\";\n\
    \        String consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n\
    \        int index = word.length() - 1;\n        while (index >= 0) {\n      \
    \      if (vowels.indexOf(word.charAt(index)) != -1) {\n                if (index\
    \ > 0 && consonants.indexOf(word.charAt(index - 1)) != -1) {\n               \
    \     return word.substring(index, index + 1);\n                }\n          \
    \  }\n            index--;\n        }\n        return \"\";", "        // Your\
    \ code here\n        return \"\";"]
stop_tokens:
- "\n    }\n"
