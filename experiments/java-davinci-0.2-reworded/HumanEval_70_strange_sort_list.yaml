name: HumanEval_70_strange_sort_list
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // Given array list of integers, return array list in strange\
  \ order.\n    // Strange sorting, is when you start with the minimum value,\n  \
  \  // then maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
  \    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
  \ (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
  \ (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
  \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
  \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
  \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
  \ strangeSortList(ArrayList<Long> lst) {\n"
tests: "    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
  \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
  \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n \
  \   assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
  \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
  \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
  \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
  \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
  \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
  \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
  \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
  \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
  \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n \
  \   assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
  \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
  \ (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
  \ (long)8l, (long)2l, (long)7l, (long)3l, (long)6l, (long)4l, (long)5l)))));\n \
  \   assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l, (long)2l,\
  \ (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new ArrayList<Long>(Arrays.asList((long)-5l,\
  \ (long)5l, (long)-5l, (long)5l, (long)0l, (long)2l, (long)2l, (long)2l)))));\n\
  \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
  \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
completions: ["        ArrayList<Long> result = new ArrayList<Long>();\n        Collections.sort(lst);\n\
    \        int i = 0;\n        int j = lst.size() - 1;\n        while (i <= j) {\n\
    \            result.add(lst.get(i));\n            if (i != j) {\n            \
    \    result.add(lst.get(j));\n            }\n            i++;\n            j--;\n\
    \        }\n        return result;", "        ArrayList<Long> res = new ArrayList<Long>();\n\
    \        if (lst.size() == 0) {\n            return res;\n        }\n        if\
    \ (lst.size() == 1) {\n            res.add(lst.get(0));\n            return res;\n\
    \        }\n        ArrayList<Long> sorted = new ArrayList<Long>(lst);\n     \
    \   Collections.sort(sorted);\n        int i = 0;\n        int j = sorted.size()\
    \ - 1;\n        while (i <= j) {\n            res.add(sorted.get(i));\n      \
    \      i++;\n            if (i <= j) {\n                res.add(sorted.get(j));\n\
    \                j--;\n            }\n        }\n        return res;", "     \
    \   // Your code here\n        return lst;", "        ArrayList<Long> res = new\
    \ ArrayList<Long>();\n        if (lst.size() == 0) {\n            return res;\n\
    \        }\n        Collections.sort(lst);\n        int i = 0;\n        int j\
    \ = lst.size() - 1;\n        while (i <= j) {\n            res.add(lst.get(i));\n\
    \            if (i != j) {\n                res.add(lst.get(j));\n           \
    \ }\n            i += 1;\n            j -= 1;\n        }\n        return res;",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        if (lst.size()\
    \ == 0) {\n            return result;\n        }\n        if (lst.size() == 1)\
    \ {\n            result.add(lst.get(0));\n            return result;\n       \
    \ }\n        ArrayList<Long> lst1 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ lst2 = new ArrayList<Long>();\n        for (int i = 0; i < lst.size(); i++)\
    \ {\n            if (i % 2 == 0) {\n                lst1.add(lst.get(i));\n  \
    \          } else {\n                lst2.add(lst.get(i));\n            }\n  \
    \      }\n        Collections.sort(lst1);\n        Collections.sort(lst2);\n \
    \       Collections.reverse(lst2);\n        for (int i = 0; i < lst1.size(); i++)\
    \ {\n            result.add(lst1.get(i));\n            if (i < lst2.size()) {\n\
    \                result.add(lst2.get(i));\n            }\n        }\n        return\
    \ result;", "        ArrayList<Long> result = new ArrayList<Long>();\n       \
    \ if (lst.size() == 0) {\n            return result;\n        }\n        Collections.sort(lst);\n\
    \        int i = 0;\n        int j = lst.size() - 1;\n        while (i <= j) {\n\
    \            result.add(lst.get(i));\n            if (i != j) {\n            \
    \    result.add(lst.get(j));\n            }\n            i++;\n            j--;\n\
    \        }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (lst.size() == 0) {\n            return result;\n        }\n     \
    \   if (lst.size() == 1) {\n            result.add(lst.get(0));\n            return\
    \ result;\n        }\n        ArrayList<Long> sorted = new ArrayList<Long>(lst);\n\
    \        Collections.sort(sorted);\n        int i = 0;\n        int j = sorted.size()\
    \ - 1;\n        while (i <= j) {\n            result.add(sorted.get(i));\n   \
    \         i++;\n            if (i <= j) {\n                result.add(sorted.get(j));\n\
    \                j--;\n            }\n        }\n        return result;", "  \
    \      ArrayList<Long> ret = new ArrayList<Long>();\n        if (lst.size() ==\
    \ 0) {\n            return ret;\n        }\n        Collections.sort(lst);\n \
    \       int i = 0;\n        int j = lst.size() - 1;\n        while (i < j) {\n\
    \            ret.add(lst.get(i));\n            ret.add(lst.get(j));\n        \
    \    i++;\n            j--;\n        }\n        if (i == j) {\n            ret.add(lst.get(i));\n\
    \        }\n        return ret;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (lst.size() == 0) {\n            return result;\n        }\n     \
    \   Collections.sort(lst);\n        int i = 0;\n        int j = lst.size() - 1;\n\
    \        while (i <= j) {\n            result.add(lst.get(i));\n            if\
    \ (i != j) {\n                result.add(lst.get(j));\n            }\n       \
    \     i++;\n            j--;\n        }\n        return result;", "        ArrayList<Long>\
    \ res = new ArrayList<Long>();\n        if (lst.size() == 0) {\n            return\
    \ res;\n        }\n        if (lst.size() == 1) {\n            res.add(lst.get(0));\n\
    \            return res;\n        }\n        Collections.sort(lst);\n        int\
    \ i = 0;\n        int j = lst.size() - 1;\n        while (i <= j) {\n        \
    \    res.add(lst.get(i));\n            if (i != j) {\n                res.add(lst.get(j));\n\
    \            }\n            i++;\n            j--;\n        }\n        return\
    \ res;", "        if (lst.size() == 0) {\n            return lst;\n        }\n\
    \        ArrayList<Long> result = new ArrayList<Long>();\n        long min = lst.get(0);\n\
    \        long max = lst.get(0);\n        for (int i = 0; i < lst.size(); i++)\
    \ {\n            if (lst.get(i) < min) {\n                min = lst.get(i);\n\
    \            }\n            if (lst.get(i) > max) {\n                max = lst.get(i);\n\
    \            }\n        }\n        int minIndex = lst.indexOf(min);\n        int\
    \ maxIndex = lst.indexOf(max);\n        boolean minFirst = true;\n        while\
    \ (lst.size() > 0) {\n            if (minFirst) {\n                result.add(lst.get(minIndex));\n\
    \                lst.remove(minIndex);\n                min = lst.get(0);\n  \
    \              max = lst.get(0);\n                for (int i = 0; i < lst.size();\
    \ i++) {\n                    if (lst.get(i) < min) {\n                      \
    \  min = lst.get(i);\n                    }\n                    if (lst.get(i)\
    \ > max) {\n                        max = lst.get(i);\n                    }\n\
    \                }\n                minIndex = lst.indexOf(min);\n           \
    \     maxIndex = lst.indexOf(max);\n                minFirst = false;\n      \
    \      } else {\n                result.add(lst.get(maxIndex));\n            \
    \    lst.remove(maxIndex);\n                min = lst.get(0);\n              \
    \  max = lst.get(0);\n                for (int i = 0; i < lst.size(); i++) {\n\
    \                    if (lst.get(i) < min) {\n                        min = lst.get(i);\n\
    \                    }\n                    if (lst.get(i) > max) {\n        \
    \                max = lst.get(i);\n                    }\n                }\n\
    \                minIndex = lst.indexOf(min);\n                maxIndex = lst.indexOf",
  "        ArrayList<Long> res = new ArrayList<Long>();\n        if (lst.size() ==\
    \ 0) {\n            return res;\n        }\n        Collections.sort(lst);\n \
    \       int i = 0;\n        int j = lst.size() - 1;\n        while (i <= j) {\n\
    \            res.add(lst.get(i));\n            if (i != j) {\n               \
    \ res.add(lst.get(j));\n            }\n            i++;\n            j--;\n  \
    \      }\n        return res;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        ArrayList<Long> lstCopy = new ArrayList<Long>(lst);\n        while (lstCopy.size()\
    \ > 0) {\n            result.add(Collections.min(lstCopy));\n            lstCopy.remove(Collections.min(lstCopy));\n\
    \            if (lstCopy.size() > 0) {\n                result.add(Collections.max(lstCopy));\n\
    \                lstCopy.remove(Collections.max(lstCopy));\n            }\n  \
    \      }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (lst.size() == 0) {\n            return result;\n        }\n     \
    \   Collections.sort(lst);\n        int i = 0;\n        int j = lst.size() - 1;\n\
    \        while (i <= j) {\n            result.add(lst.get(i));\n            if\
    \ (i != j) {\n                result.add(lst.get(j));\n            }\n       \
    \     i += 1;\n            j -= 1;\n        }\n        return result;", "    \
    \    ArrayList<Long> result = new ArrayList<Long>();\n        if (lst.size() ==\
    \ 0) {\n            return result;\n        }\n        Collections.sort(lst);\n\
    \        int i = 0;\n        int j = lst.size() - 1;\n        while (i <= j) {\n\
    \            result.add(lst.get(i));\n            if (i != j) {\n            \
    \    result.add(lst.get(j));\n            }\n            i++;\n            j--;\n\
    \        }\n        return result;", "        ArrayList<Long> sorted = new ArrayList<Long>();\n\
    \        ArrayList<Long> remaining = new ArrayList<Long>(lst);\n        while\
    \ (remaining.size() > 0) {\n            long min = remaining.get(0);\n       \
    \     long max = remaining.get(0);\n            for (long i : remaining) {\n \
    \               if (i < min) {\n                    min = i;\n               \
    \ }\n                if (i > max) {\n                    max = i;\n          \
    \      }\n            }\n            sorted.add(min);\n            remaining.remove(min);\n\
    \            if (remaining.size() > 0) {\n                sorted.add(max);\n \
    \               remaining.remove(max);\n            }\n        }\n        return\
    \ sorted;", "        // Your code here\n        return lst;", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (lst.size() == 0) {\n          \
    \  return result;\n        }\n        Collections.sort(lst);\n        int i =\
    \ 0;\n        while (result.size() < lst.size()) {\n            result.add(lst.get(i));\n\
    \            if (i + 1 < lst.size()) {\n                result.add(lst.get(lst.size()\
    \ - i - 1));\n            }\n            i += 1;\n        }\n        return result;",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        if (lst.size()\
    \ == 0) {\n            return result;\n        }\n        Collections.sort(lst);\n\
    \        int i = 0;\n        int j = lst.size() - 1;\n        while (i <= j) {\n\
    \            result.add(lst.get(i));\n            if (i != j) {\n            \
    \    result.add(lst.get(j));\n            }\n            i += 1;\n           \
    \ j -= 1;\n        }\n        return result;", "        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        ArrayList<Long> copy = new ArrayList<Long>(lst);\n\
    \        Collections.sort(copy);\n        int i = 0;\n        while (copy.size()\
    \ > 0) {\n            if (i % 2 == 0) {\n                result.add(copy.get(0));\n\
    \                copy.remove(0);\n            } else {\n                result.add(copy.get(copy.size()\
    \ - 1));\n                copy.remove(copy.size() - 1);\n            }\n     \
    \       i += 1;\n        }\n        return result;"]
stop_tokens:
- "\n    }\n"
