language: java
name: HumanEval_99_closest_integer
results:
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        return\
    \ 0;\n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppm7dhyhm.java:26)\n"
  stdout: ''
  timestamp: 1659805164
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        return\
    \ 0;\n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppm7dhyhm.java:26)\n"
  stdout: ''
  timestamp: 1659805164
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        return\
    \ 0l;\n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpb1c0au6v.java:26)\n"
  stdout: ''
  timestamp: 1659805164
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // >>>\
    \ closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        return 0;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsvvnu5ri.java:35)\n"
  stdout: ''
  timestamp: 1659805164
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        double\
    \ d = Double.parseDouble(value);\n        return (long)Math.round(d);\n    }\n\
    \    public static void main(String[] args) {\n    assert(closestInteger((\"10\"\
    )) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1syyopjb.java:29)\n"
  stdout: ''
  timestamp: 1659805164
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        return\
    \ 0;\n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppm7dhyhm.java:26)\n"
  stdout: ''
  timestamp: 1659805164
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // >>>\
    \ closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // >>> closestInteger((\"14.5\"))\n      \
    \  // (15l)\n        // >>> closestInteger((\"-14.5\"))\n        // (-15l)\n \
    \       // >>> closestInteger((\"-14.6\"))\n        // (-15l)\n        // >>>\
    \ closestInteger((\"-14.4\"))\n        // (-14l)\n        // >>> closestInteger((\"\
    14.4\"))\n        // (14l)\n        // >>> closestInteger((\"14.6\"))\n      \
    \  // (15l)\n        // >>> closestInteger((\"-14.6\"))\n        // (-15l)\n \
    \       // >>> closestInteger((\"-14.4\"))\n        // (-14l)\n        // >>>\
    \ closestInteger((\"14.4\"))\n        // (14l)\n        // >>> closestInteger((\"\
    14.6\"))\n        // (15l)\n        // >>> closestInteger((\"-14.6\"))\n     \
    \   // (-15l)\n        // >>> closestInteger((\"-14.4\"))\n        // (-14l)\n\
    \        // >>> closestInteger((\"14.4\"))\n        // (14l)\n        // >>> closestInteger((\"\
    14.6\"))\n        // (15l)\n        // >>> closestInteger((\"-14.6\"))\n     \
    \   // (-15l)\n        // >>> closestInteger((\"-14.4\"))\n        // (-14l)\n\
    \        // >>> closestInteger((\"14.4\"))\n        // (14l)\n        // >>> closestInteger((\"\
    14.6\"))\n        // (15l)\n        // >>> closestInteger((\"-14.6\"))\n     \
    \   // (-15l)\n        // >>> closestInteger((\"-14.4\"))\n        // (-14l)\n\
    \        // >>> closestInteger((\"14.4\"))\n        // (14l)\n        // >>> closestInteger((\"\
    14.6\"))\n        // (15l)\n        // >>> closestInteger((\"-14.6\"))\n     \
    \   // (-15l)\n        // >>> closestInteger((\"-14.4\"))\n        // (-14l)\n\
    \        // >>> closestInteger(\n    }\n    public static void main(String[] args)\
    \ {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptykadf11.java:76: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659805164
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // Write\
    \ your code here\n        // To print results to the standard output you can use\
    \ System.out.println()\n        // Example: System.out.println(\"Hello world!\"\
    );\n        return 0;\n    }\n    public static void main(String[] args) {\n \
    \   assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpp1ttznjw.java:29)\n"
  stdout: ''
  timestamp: 1659805164
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        return\
    \ 0;\n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppm7dhyhm.java:26)\n"
  stdout: ''
  timestamp: 1659805164
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        return\
    \ 0;\n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppm7dhyhm.java:26)\n"
  stdout: ''
  timestamp: 1659805164
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // >>>\
    \ closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from zero means that if the given number\
    \ is equidistant\n        // from two integers, the one you should return is the\
    \ one that is the\n        // farthest from zero. For example closest_integer(\"\
    14.5\") should\n        // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n        // >>> closestInteger((\"10\"))\n        // (10l)\n        //\
    \ >>> closestInteger((\"15.3\"))\n        // (15l)\n        // Note:\n       \
    \ // Rounding away from zero means that if the given number is equidistant\n \
    \       // from two integers, the one you should return is the one that is the\n\
    \        // farthest from zero. For example closest_integer(\"14.5\") should\n\
    \        // return 15 and closest_integer(\"-14.5\") should return -15.\n    \
    \    // >>> closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from\n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcn7kse5_.java:65: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659805164
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // >>>\
    \ closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from zero means that if the given number\
    \ is equidistant\n        // from two integers, the one you should return is the\
    \ one that is the\n        // farthest from zero. For example closest_integer(\"\
    14.5\") should\n        // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n        // >>> closestInteger((\"10\"))\n        // (10l)\n        //\
    \ >>> closestInteger((\"15.3\"))\n        // (15l)\n        // Note:\n       \
    \ // Rounding away from zero means that if the given number is equidistant\n \
    \       // from two integers, the one you should return is the one that is the\n\
    \        // farthest from zero. For example closest_integer(\"14.5\") should\n\
    \        // return 15 and closest_integer(\"-14.5\") should return -15.\n    \
    \    // >>> closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from\n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcn7kse5_.java:65: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659805164
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // >>>\
    \ closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from zero means that if the given number\
    \ is equidistant\n        // from two integers, the one you should return is the\
    \ one that is the\n        // farthest from zero. For example closest_integer(\"\
    14.5\") should\n        // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n        // >>> closestInteger((\"10\"))\n        // (10l)\n        //\
    \ >>> closestInteger((\"15.3\"))\n        // (15l)\n        // Note:\n       \
    \ // Rounding away from zero means that if the given number is equidistant\n \
    \       // from two integers, the one you should return is the one that is the\n\
    \        // farthest from zero. For example closest_integer(\"14.5\") should\n\
    \        // return 15 and closest_integer(\"-14.5\") should return -15.\n    \
    \    // >>> closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from\n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcn7kse5_.java:65: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659805164
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // >>>\
    \ closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from zero means that if the given number\
    \ is equidistant\n        // from two integers, the one you should return is the\
    \ one that is the\n        // farthest from zero. For example closest_integer(\"\
    14.5\") should\n        // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n        // >>> closestInteger((\"10\"))\n        // (10l)\n        //\
    \ >>> closestInteger((\"15.3\"))\n        // (15l)\n        // Note:\n       \
    \ // Rounding away from zero means that if the given number is equidistant\n \
    \       // from two integers, the one you should return is the one that is the\n\
    \        // farthest from zero. For example closest_integer(\"14.5\") should\n\
    \        // return 15 and closest_integer(\"-14.5\") should return -15.\n    \
    \    // >>> closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from\n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcn7kse5_.java:65: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659805164
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // >>>\
    \ closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // >>> closestInteger((\"14.5\"))\n      \
    \  // (15l)\n        // >>> closestInteger((\"-14.5\"))\n        // (-15l)\n \
    \       // >>> closestInteger((\"-14.6\"))\n        // (-15l)\n        // >>>\
    \ closestInteger((\"-14.4\"))\n        // (-14l)\n        // >>> closestInteger((\"\
    -14.0\"))\n        // (-14l)\n        // >>> closestInteger((\"-14.1\"))\n   \
    \     // (-14l)\n        // >>> closestInteger((\"-14.2\"))\n        // (-14l)\n\
    \        // >>> closestInteger((\"-14.3\"))\n        // (-14l)\n        // >>>\
    \ closestInteger((\"-14.4\"))\n        // (-14l)\n        // >>> closestInteger((\"\
    -14.5\"))\n        // (-15l)\n        // >>> closestInteger((\"-14.6\"))\n   \
    \     // (-15l)\n        // >>> closestInteger((\"-14.7\"))\n        // (-15l)\n\
    \        // >>> closestInteger((\"-14.8\"))\n        // (-15l)\n        // >>>\
    \ closestInteger((\"-14.9\"))\n        // (-15l)\n        // >>> closestInteger((\"\
    -15.0\"))\n        // (-15l)\n        // >>> closestInteger((\"-15.1\"))\n   \
    \     // (-15l)\n        // >>> closestInteger((\"-15.2\"))\n        // (-15l)\n\
    \        // >>> closestInteger((\"-15.3\"))\n        // (-15l)\n        // >>>\
    \ closestInteger((\"-15.4\"))\n        // (-15l)\n        // >>> closestInteger((\"\
    -15.5\"))\n        // (-16l)\n        // >>> closestInteger((\"-15.6\"))\n   \
    \     // (-16l)\n        // >>> closestInteger((\"-15.7\"))\n        // (-16l)\n\
    \        // >>> closestInteger((\"-15.8\"))\n        // (-16l)\n        // >>>\
    \ closestInteger((\"-15.9\"))\n        // (-\n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpolyfn0c4.java:75: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659805164
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // >>>\
    \ closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // >>> closestInteger((\"15.7\"))\n      \
    \  // (16l)\n        // >>> closestInteger((\"-15.7\"))\n        // (-16l)\n \
    \       // >>> closestInteger((\"-15.3\"))\n        // (-15l)\n        // >>>\
    \ closestInteger((\"-15.1\"))\n        // (-15l)\n        // >>> closestInteger((\"\
    -15.0\"))\n        // (-15l)\n        // >>> closestInteger((\"-14.9\"))\n   \
    \     // (-15l)\n        // >>> closestInteger((\"-14.5\"))\n        // (-15l)\n\
    \        // >>> closestInteger((\"-14.1\"))\n        // (-14l)\n        // >>>\
    \ closestInteger((\"-14.0\"))\n        // (-14l)\n        // >>> closestInteger((\"\
    -13.9\"))\n        // (-14l)\n        // >>> closestInteger((\"-13.5\"))\n   \
    \     // (-14l)\n        // >>> closestInteger((\"-13.1\"))\n        // (-13l)\n\
    \        // >>> closestInteger((\"-13.0\"))\n        // (-13l)\n        // >>>\
    \ closestInteger((\"-12.9\"))\n        // (-13l)\n        // >>> closestInteger((\"\
    -12.5\"))\n        // (-13l)\n        // >>> closestInteger((\"-12.1\"))\n   \
    \     // (-12l)\n        // >>> closestInteger((\"-12.0\"))\n        // (-12l)\n\
    \        // >>> closestInteger((\"-11.9\"))\n        // (-12l)\n        // >>>\
    \ closestInteger((\"-11.5\"))\n        // (-12l)\n        // >>> closestInteger((\"\
    -11.1\"))\n        // (-11l)\n        // >>> closestInteger((\"-11.0\"))\n   \
    \     // (-11l)\n        // >>> closestInteger((\"-10.9\"))\n        // (-11l)\n\
    \        // >>> closestInteger((\"-10.5\"))\n        // (-11l)\n        // >>>\
    \ closestInteger((\"-10.1\"))\n        // (-\n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp06cey4a1.java:75: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659805164
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // >>>\
    \ closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        BigDecimal bd = new BigDecimal(value);\n\
    \        bd = bd.setScale(0, RoundingMode.HALF_UP);\n        return bd.longValue();\n\
    \    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805164
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        return\
    \ 0;\n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppm7dhyhm.java:26)\n"
  stdout: ''
  timestamp: 1659805164
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // >>>\
    \ closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from zero means that if the given number\
    \ is equidistant\n        // from two integers, the one you should return is the\
    \ one that is the\n        // farthest from zero. For example closest_integer(\"\
    14.5\") should\n        // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n        // >>> closestInteger((\"10\"))\n        // (10l)\n        //\
    \ >>> closestInteger((\"15.3\"))\n        // (15l)\n        // Note:\n       \
    \ // Rounding away from zero means that if the given number is equidistant\n \
    \       // from two integers, the one you should return is the one that is the\n\
    \        // farthest from zero. For example closest_integer(\"14.5\") should\n\
    \        // return 15 and closest_integer(\"-14.5\") should return -15.\n    \
    \    // >>> closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from\n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcn7kse5_.java:65: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659805164
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // >>>\
    \ closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from zero means that if the given number\
    \ is equidistant\n        // from two integers, the one you should return is the\
    \ one that is the\n        // farthest from zero. For example closest_integer(\"\
    14.5\") should\n        // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n        // >>> closestInteger((\"10\"))\n        // (10l)\n        //\
    \ >>> closestInteger((\"15.3\"))\n        // (15l)\n        // Note:\n       \
    \ // Rounding away from zero means that if the given number is equidistant\n \
    \       // from two integers, the one you should return is the one that is the\n\
    \        // farthest from zero. For example closest_integer(\"14.5\") should\n\
    \        // return 15 and closest_integer(\"-14.5\") should return -15.\n    \
    \    // >>> closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from\n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcn7kse5_.java:65: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659805164
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        return\
    \ Math.round(Double.parseDouble(value));\n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcaf6h6s2.java:28)\n"
  stdout: ''
  timestamp: 1659805164
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        return\
    \ 0;\n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppm7dhyhm.java:26)\n"
  stdout: ''
  timestamp: 1659805164
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // >>>\
    \ your code here <<<\n        return 0;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqh75orhy.java:27)\n"
  stdout: ''
  timestamp: 1659805164
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        return\
    \ 0l;\n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpb1c0au6v.java:26)\n"
  stdout: ''
  timestamp: 1659805164
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // >>>\
    \ closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // >>> closestInteger((\"-15.3\"))\n     \
    \   // (-15l)\n        // >>> closestInteger((\"-15.6\"))\n        // (-16l)\n\
    \        // >>> closestInteger((\"15.6\"))\n        // (16l)\n        // >>> closestInteger((\"\
    15.5\"))\n        // (16l)\n        // >>> closestInteger((\"-15.5\"))\n     \
    \   // (-16l)\n        // >>> closestInteger((\"-15.4\"))\n        // (-15l)\n\
    \        // >>> closestInteger((\"15.4\"))\n        // (15l)\n        // >>> closestInteger((\"\
    15.0\"))\n        // (15l)\n        // >>> closestInteger((\"-15.0\"))\n     \
    \   // (-15l)\n        // >>> closestInteger((\"-15.1\"))\n        // (-16l)\n\
    \        // >>> closestInteger((\"15.1\"))\n        // (16l)\n        // >>> closestInteger((\"\
    -15.2\"))\n        // (-16l)\n        // >>> closestInteger((\"15.2\"))\n    \
    \    // (16l)\n        // >>> closestInteger((\"-15.7\"))\n        // (-16l)\n\
    \        // >>> closestInteger((\"15.7\"))\n        // (16l)\n        // >>> closestInteger((\"\
    -15.8\"))\n        // (-16l)\n        // >>> closestInteger((\"15.8\"))\n    \
    \    // (16l)\n        // >>> closestInteger((\"-15.9\"))\n        // (-16l)\n\
    \        // >>> closestInteger((\"15.9\"))\n        // (16l)\n        // >>> closestInteger((\"\
    -15.0\"))\n        // (-15l)\n        // >>> closestInteger((\"15.0\"))\n    \
    \    // (15l)\n        // >>> closestInteger((\"-15.1\"))\n        // (-16l)\n\
    \        // >>> closestInteger((\"15.1\"))\n        // (16l)\n        // >>> closestInteger((\"\
    -15.2\"))\n        // (-16l)\n        // >>> closestInteger(\n    }\n    public\
    \ static void main(String[] args) {\n    assert(closestInteger((\"10\")) == (10l));\n\
    \    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpm_lgnazp.java:76: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659805164
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        return\
    \ Math.round(Double.parseDouble(value));\n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcaf6h6s2.java:28)\n"
  stdout: ''
  timestamp: 1659805164
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        return\
    \ Math.round(Double.parseDouble(value));\n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcaf6h6s2.java:28)\n"
  stdout: ''
  timestamp: 1659805164
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        return\
    \ 0l;\n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpb1c0au6v.java:26)\n"
  stdout: ''
  timestamp: 1659805164
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        BigDecimal\
    \ bd = new BigDecimal(value);\n        return bd.setScale(0, BigDecimal.ROUND_HALF_UP).longValue();\n\
    \    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805164
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // >>>\
    \ closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // >>> closestInteger((\"-15.3\"))\n     \
    \   // (-15l)\n        // >>> closestInteger((\"-14.5\"))\n        // (-15l)\n\
    \        // >>> closestInteger((\"14.5\"))\n        // (15l)\n        // >>> closestInteger((\"\
    14.4\"))\n        // (14l)\n        // >>> closestInteger((\"14.6\"))\n      \
    \  // (15l)\n        // >>> closestInteger((\"14.49\"))\n        // (14l)\n  \
    \      // >>> closestInteger((\"14.51\"))\n        // (15l)\n        // >>> closestInteger((\"\
    14.500001\"))\n        // (15l)\n        // >>> closestInteger((\"14.4999999\"\
    ))\n        // (14l)\n        // >>> closestInteger((\"14.500000000000001\"))\n\
    \        // (15l)\n        // >>> closestInteger((\"14.499999999999999\"))\n \
    \       // (14l)\n        // >>> closestIntegern\
    \    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpuca2o68v.java:50: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659805164
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        return\
    \ 0;\n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppm7dhyhm.java:26)\n"
  stdout: ''
  timestamp: 1659805164
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        BigDecimal\
    \ bd = new BigDecimal(value);\n        return bd.setScale(0, RoundingMode.HALF_UP).longValue();\n\
    \    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805164
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // >>>\
    \ closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from zero means that if the given number\
    \ is equidistant\n        // from two integers, the one you should return is the\
    \ one that is the\n        // farthest from zero. For example closest_integer(\"\
    14.5\") should\n        // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n        // >>> closestInteger((\"10\"))\n        // (10l)\n        //\
    \ >>> closestInteger((\"15.3\"))\n        // (15l)\n        // Note:\n       \
    \ // Rounding away from zero means that if the given number is equidistant\n \
    \       // from two integers, the one you should return is the one that is the\n\
    \        // farthest from zero. For example closest_integer(\"14.5\") should\n\
    \        // return 15 and closest_integer(\"-14.5\") should return -15.\n    \
    \    // >>> closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from\n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcn7kse5_.java:65: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659805164
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        return\
    \ 0;\n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppm7dhyhm.java:26)\n"
  stdout: ''
  timestamp: 1659805164
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        return\
    \ 0;\n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppm7dhyhm.java:26)\n"
  stdout: ''
  timestamp: 1659805164
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        double\
    \ d = Double.parseDouble(value);\n        long l = (long) d;\n        if (d -\
    \ l > 0.5) {\n            return l + 1;\n        } else {\n            return\
    \ l;\n        }\n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvpeffgcw.java:33)\n"
  stdout: ''
  timestamp: 1659805164
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // Your\
    \ code here\n        return 0l;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplqrvqai5.java:27)\n"
  stdout: ''
  timestamp: 1659805164
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        return\
    \ 0;\n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppm7dhyhm.java:26)\n"
  stdout: ''
  timestamp: 1659805164
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // >>>\
    \ closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from zero means that if the given number\
    \ is equidistant\n        // from two integers, the one you should return is the\
    \ one that is the\n        // farthest from zero. For example closest_integer(\"\
    14.5\") should\n        // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n        // >>> closestInteger((\"10\"))\n        // (10l)\n        //\
    \ >>> closestInteger((\"15.3\"))\n        // (15l)\n        // Note:\n       \
    \ // Rounding away from zero means that if the given number is equidistant\n \
    \       // from two integers, the one you should return is the one that is the\n\
    \        // farthest from zero. For example closest_integer(\"14.5\") should\n\
    \        // return 15 and closest_integer(\"-14.5\") should return -15.\n    \
    \    // >>> closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from\n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcn7kse5_.java:65: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659805164
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // >>>\
    \ closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // >>> closestInteger((\"15.7\"))\n      \
    \  // (16l)\n        // >>> closestInteger((\"-15.7\"))\n        // (-16l)\n \
    \       // >>> closestInteger((\"-15.3\"))\n        // (-15l)\n        // >>>\
    \ closestInteger((\"-15.0\"))\n        // (-15l)\n        // >>> closestInteger((\"\
    -15.1\"))\n        // (-16l)\n        // >>> closestInteger((\"-15.5\"))\n   \
    \     // (-16l)\n        // >>> closestInteger((\"-15.6\"))\n        // (-16l)\n\
    \        // >>> closestInteger((\"-15.9\"))\n        // (-16l)\n        // >>>\
    \ closestInteger((\"-15.999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999\n\
    \    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpflqz68gz.java:44: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659805164
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // >>>\
    \ closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        return 0;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsvvnu5ri.java:35)\n"
  stdout: ''
  timestamp: 1659805164
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // Your\
    \ code here\n        return 0;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp11w254yw.java:27)\n"
  stdout: ''
  timestamp: 1659805164
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // >>>\
    \ closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from zero means that if the given number\
    \ is equidistant\n        // from two integers, the one you should return is the\
    \ one that is the\n        // farthest from zero. For example closest_integer(\"\
    14.5\") should\n        // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n        // >>> closestInteger((\"10\"))\n        // (10l)\n        //\
    \ >>> closestInteger((\"15.3\"))\n        // (15l)\n        // Note:\n       \
    \ // Rounding away from zero means that if the given number is equidistant\n \
    \       // from two integers, the one you should return is the one that is the\n\
    \        // farthest from zero. For example closest_integer(\"14.5\") should\n\
    \        // return 15 and closest_integer(\"-14.5\") should return -15.\n    \
    \    // >>> closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from\n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcn7kse5_.java:65: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659805164
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // >>>\
    \ closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // >>> closestInteger((\"15.6\"))\n      \
    \  // (16l)\n        // >>> closestInteger((\"-15.3\"))\n        // (-15l)\n \
    \       // >>> closestInteger((\"-15.6\"))\n        // (-16l)\n        // >>>\
    \ closestInteger((\"-15.0\"))\n        // (-15l)\n        // >>> closestInteger((\"\
    -15.1\"))\n        // (-15l)\n        // >>> closestInteger((\"-15.5\"))\n   \
    \     // (-16l)\n        // >>> closestInteger((\"-15.9\"))\n        // (-16l)\n\
    \        // >>> closestInteger((\"-15.99\"))\n        // (-16l)\n        // >>>\
    \ closestInteger((\"-15.9999\"))\n        // (-16l)\n        // >>> closestInteger((\"\
    -15.999999\"))\n        // (-16l)\n        // >>> closestInteger((\"-15.99999999\"\
    ))\n        // (-16l)\n        // >>> closestInteger((\"-15.9999999999\"))\n \
    \       // (-16l)\n        // >>> closestInteger((\"-15.999999999999\"))\n   \
    \     // (-16l)\n        // >>> closestInteger((\"-15.99999999999999\"))\n   \
    \     // (-16l)\n        // >>> closestInteger((\"-15.9999999999999999\"))\n \
    \       // (-16l)\n        // >>> closestInteger((\"-15.999999999999999999\"))\n\
    \        // (-16l)\n        // >>> closestInteger((\"-15.99999999999999999999\"\
    ))\n        // (-16l)\n        // >>> closestInteger((\"-15.9999999999999999999999\"\
    ))\n        // (-16l)\n        // >>> closestInteger((\"-15.999999999999999999999999\"\
    ))\n        // (-16l)\n        // >>> closestInteger((\"-15.99999999999999999999999999\"\
    ))\n        // (-16l)\n        // >>> closestInteger((\"-15.9999999999999999999999999999\"\
    ))\n        // (-16l)\n        // >>> closestInteger((\"-15.9999999999999999\n\
    \    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpalyhuqc1.java:70: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659805164
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // >>>\
    \ closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // >>> closestInteger((\"14.5\"))\n      \
    \  // (15l)\n        // >>> closestInteger((\"-14.5\"))\n        // (-15l)\n \
    \       // >>> closestInteger((\"-14.6\"))\n        // (-15l)\n        // >>>\
    \ closestInteger((\"-14.4\"))\n        // (-14l)\n        // >>> closestInteger((\"\
    -14.0\"))\n        // (-14l)\n        // >>> closestInteger((\"-14.1\"))\n   \
    \     // (-14l)\n        // >>> closestInteger((\"-14.2\"))\n        // (-14l)\n\
    \        // >>> closestInteger((\"-14.3\"))\n        // (-14l)\n        // >>>\
    \ closestInteger((\"-14.4\"))\n        // (-14l)\n        // >>> closestInteger((\"\
    -14.5\"))\n        // (-15l)\n        // >>> closestInteger((\"-14.6\"))\n   \
    \     // (-15l)\n        // >>> closestInteger((\"-14.7\"))\n        // (-15l)\n\
    \        // >>> closestInteger((\"-14.8\"))\n        // (-15l)\n        // >>>\
    \ closestInteger((\"-14.9\"))\n        // (-15l)\n        // >>> closestInteger((\"\
    -15.0\"))\n        // (-15l)\n        // >>> closestInteger((\"-15.1\"))\n   \
    \     // (-15l)\n        // >>> closestInteger((\"-15.2\"))\n        // (-15l)\n\
    \        // >>> closestInteger((\"-15.3\"))\n        // (-15l)\n        // >>>\
    \ closestInteger((\"-15.4\"))\n        // (-15l)\n        // >>> closestInteger((\"\
    -15.5\"))\n        // (-16l)\n        // >>> closestInteger((\"-15.6\"))\n   \
    \     // (-16l)\n        // >>> closestInteger((\"-15.7\"))\n        // (-16l)\n\
    \        // >>> closestInteger((\"-15.8\"))\n        // (-16l)\n        // >>>\
    \ closestInteger((\"-15.9\"))\n        // (-\n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpolyfn0c4.java:75: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659805164
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // >>>\
    \ closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // >>> closestInteger((\"14.5\"))\n      \
    \  // (15l)\n        // >>> closestInteger((\"-14.5\"))\n        // (-15l)\n \
    \       // >>> closestInteger((\"-14.6\"))\n        // (-15l)\n        // >>>\
    \ closestInteger((\"-14.4\"))\n        // (-14l)\n        // >>> closestInteger((\"\
    -14.0\"))\n        // (-14l)\n        // >>> closestInteger((\"-14.1\"))\n   \
    \     // (-14l)\n        // >>> closestInteger((\"-14.2\"))\n        // (-14l)\n\
    \        // >>> closestInteger((\"-14.3\"))\n        // (-14l)\n        // >>>\
    \ closestInteger((\"-14.4\"))\n        // (-14l)\n        // >>> closestInteger((\"\
    -14.5\"))\n        // (-15l)\n        // >>> closestInteger((\"-14.6\"))\n   \
    \     // (-15l)\n        // >>> closestInteger((\"-14.7\"))\n        // (-15l)\n\
    \        // >>> closestInteger((\"-14.8\"))\n        // (-15l)\n        // >>>\
    \ closestInteger((\"-14.9\"))\n        // (-15l)\n        // >>> closestInteger((\"\
    -15.0\"))\n        // (-15l)\n        // >>> closestInteger((\"-15.1\"))\n   \
    \     // (-15l)\n        // >>> closestInteger((\"-15.2\"))\n        // (-15l)\n\
    \        // >>> closestInteger((\"-15.3\"))\n        // (-15l)\n        // >>>\
    \ closestInteger((\"-15.4\"))\n        // (-15l)\n        // >>> closestInteger((\"\
    -15.5\"))\n        // (-16l)\n        // >>> closestInteger((\"-15.6\"))\n   \
    \     // (-16l)\n        // >>> closestInteger((\"-15.7\"))\n        // (-16l)\n\
    \        // >>> closestInteger((\"-15.8\"))\n        // (-16l)\n        // >>>\
    \ closestInteger((\"-15.9\"))\n        // (-\n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpolyfn0c4.java:75: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659805164
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        return\
    \ 0;\n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppm7dhyhm.java:26)\n"
  stdout: ''
  timestamp: 1659805164
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        return\
    \ 0;\n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppm7dhyhm.java:26)\n"
  stdout: ''
  timestamp: 1659805164
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        double\
    \ d = Double.parseDouble(value);\n        return (long) Math.round(d);\n    }\n\
    \    public static void main(String[] args) {\n    assert(closestInteger((\"10\"\
    )) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprnf03tog.java:29)\n"
  stdout: ''
  timestamp: 1659805164
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        return\
    \ 0;\n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppm7dhyhm.java:26)\n"
  stdout: ''
  timestamp: 1659805164
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        double\
    \ d = Double.parseDouble(value);\n        long l = Math.round(d);\n        return\
    \ l;\n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjt5qnvm4.java:30)\n"
  stdout: ''
  timestamp: 1659805164
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // >>>\
    \ closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from zero means that if the given number\
    \ is equidistant\n        // from two integers, the one you should return is the\
    \ one that is the\n        // farthest from zero. For example closest_integer(\"\
    14.5\") should\n        // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n        // >>> closestInteger((\"10\"))\n        // (10l)\n        //\
    \ >>> closestInteger((\"15.3\"))\n        // (15l)\n        // Note:\n       \
    \ // Rounding away from zero means that if the given number is equidistant\n \
    \       // from two integers, the one you should return is the one that is the\n\
    \        // farthest from zero. For example closest_integer(\"14.5\") should\n\
    \        // return 15 and closest_integer(\"-14.5\") should return -15.\n    \
    \    // >>> closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from\n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcn7kse5_.java:65: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659805164
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        double\
    \ d = Double.parseDouble(value);\n        return (long) Math.round(d);\n    }\n\
    \    public static void main(String[] args) {\n    assert(closestInteger((\"10\"\
    )) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprnf03tog.java:29)\n"
  stdout: ''
  timestamp: 1659805164
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // >>>\
    \ closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        return 0;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsvvnu5ri.java:35)\n"
  stdout: ''
  timestamp: 1659805164
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // >>>\
    \ closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // >>> closestInteger((\"14.5\"))\n      \
    \  // (15l)\n        // >>> closestInteger((\"-14.5\"))\n        // (-15l)\n \
    \       // >>> closestInteger((\"-14.6\"))\n        // (-15l)\n        // >>>\
    \ closestInteger((\"-14.4\"))\n        // (-14l)\n        // >>> closestInteger((\"\
    14.4\"))\n        // (14l)\n        // >>> closestInteger((\"14.6\"))\n      \
    \  // (15l)\n        // >>> closestInteger((\"14.5\"))\n        // (15l)\n   \
    \     // >>> closestInteger((\"14.4\"))\n        // (14l)\n        // >>> closestInteger((\"\
    14.6\"))\n        // (15l)\n        // >>> closestInteger((\"14.5\"))\n      \
    \  // (15l)\n        // >>> closestInteger((\"14.4\"))\n        // (14l)\n   \
    \     // >>> closestInteger((\"14.6\"))\n        // (15l)\n        // >>> closestInteger((\"\
    14.5\"))\n        // (15l)\n        // >>> closestInteger((\"14.4\"))\n      \
    \  // (14l)\n        // >>> closestInteger((\"14.6\"))\n        // (15l)\n   \
    \     // >>> closestInteger((\"14.5\"))\n        // (15l)\n        // >>> closestInteger((\"\
    14.4\"))\n        // (14l)\n        // >>> closestInteger((\"14.6\"))\n      \
    \  // (15l)\n        // >>> closestInteger((\"14.5\"))\n        // (15l)\n   \
    \     // >>> closestInteger((\"14.4\"))\n        // (14l)\n        // >>> closestInteger((\"\
    14.6\"))\n        // (15l)\n        // >>> closestInteger((\"14.5\"))\n      \
    \  // (15l)\n        // >>> closestInteger((\"14.4\"))\n        // (14l)\n   \
    \     // >>> closestInteger((\"14.6\"))\n        // (15l)\n        // >>> closestInteger((\"\
    14.5\"))\n        // (15\n    }\n    public static void main(String[] args) {\n\
    \    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6c53_5lf.java:77: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659805165
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // >>>\
    \ closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        return 0;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsvvnu5ri.java:35)\n"
  stdout: ''
  timestamp: 1659805164
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        return\
    \ 0;\n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppm7dhyhm.java:26)\n"
  stdout: ''
  timestamp: 1659805164
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // >>>\
    \ closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from zero means that if the given number\
    \ is equidistant\n        // from two integers, the one you should return is the\
    \ one that is the\n        // farthest from zero. For example closest_integer(\"\
    14.5\") should\n        // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n        // >>> closestInteger((\"10\"))\n        // (10l)\n        //\
    \ >>> closestInteger((\"15.3\"))\n        // (15l)\n        // Note:\n       \
    \ // Rounding away from zero means that if the given number is equidistant\n \
    \       // from two integers, the one you should return is the one that is the\n\
    \        // farthest from zero. For example closest_integer(\"14.5\") should\n\
    \        // return 15 and closest_integer(\"-14.5\") should return -15.\n    \
    \    // >>> closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from\n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcn7kse5_.java:65: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659805164
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // >>>\
    \ closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from zero means that if the given number\
    \ is equidistant\n        // from two integers, the one you should return is the\
    \ one that is the\n        // farthest from zero. For example closest_integer(\"\
    14.5\") should\n        // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n        // >>> closestInteger((\"10\"))\n        // (10l)\n        //\
    \ >>> closestInteger((\"15.3\"))\n        // (15l)\n        // Note:\n       \
    \ // Rounding away from zero means that if the given number is equidistant\n \
    \       // from two integers, the one you should return is the one that is the\n\
    \        // farthest from zero. For example closest_integer(\"14.5\") should\n\
    \        // return 15 and closest_integer(\"-14.5\") should return -15.\n    \
    \    // >>> closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from\n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcn7kse5_.java:65: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659805164
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // >>>\
    \ closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // >>> closestInteger((\"14.5\"))\n      \
    \  // (15l)\n        // >>> closestInteger((\"-14.5\"))\n        // (-15l)\n \
    \       // >>> closestInteger((\"-15.3\"))\n        // (-15l)\n        // >>>\
    \ closestInteger((\"-10\"))\n        // (-10l)\n        // >>> closestInteger((\"\
    -5\"))\n        // (-5l)\n        // >>> closestInteger((\"0\"))\n        // (0l)\n\
    \        // >>> closestInteger((\"5\"))\n        // (5l)\n        // >>> closestInteger((\"\
    10\"))\n        // (10l)\n        // >>> closestInteger((\"15.3\"))\n        //\
    \ (15l)\n        // >>> closestInteger((\"14.5\"))\n        // (15l)\n       \
    \ // >>> closestInteger((\"-14.5\"))\n        // (-15l)\n        // >>> closestInteger((\"\
    -15.3\"))\n        // (-15l)\n        // >>> closestInteger((\"-10\"))\n     \
    \   // (-10l)\n        // >>> closestInteger((\"-5\"))\n        // (-5l)\n   \
    \     // >>> closestInteger((\"0\"))\n        // (0l)\n        // >>> closestInteger((\"\
    5\"))\n        // (5l)\n        // >>> closestInteger((\"10\"))\n        // (10l)\n\
    \        // >>> closestInteger((\"15.3\"))\n        // (15l)\n        // >>> closestInteger((\"\
    14.5\"))\n        // (15l)\n        // >>> closestInteger((\"-14.5\"))\n     \
    \   // (-15l)\n        // >>> closestInteger((\"-15.3\"))\n        // (-15l)\n\
    \        // >>> closestInteger((\"-10\"))\n        // (-10l)\n        // >>> closestInteger((\"\
    -5\"))\n        // (-5l)\n        // >>> closestInteger((\"0\"))\n        // (0l)\n\
    \        // >>> closestInteger((\"5\"))\n        // (5l)\n        // >>> closestInteger((\"\
    10\"))\n        // (10l)\n    }\n    public static void main(String[] args) {\n\
    \    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpparg3bq2.java:79: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659805165
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        return\
    \ 0;\n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppm7dhyhm.java:26)\n"
  stdout: ''
  timestamp: 1659805164
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // >>>\
    \ closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from zero means that if the given number\
    \ is equidistant\n        // from two integers, the one you should return is the\
    \ one that is the\n        // farthest from zero. For example closest_integer(\"\
    14.5\") should\n        // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n        // >>> closestInteger((\"10\"))\n        // (10l)\n        //\
    \ >>> closestInteger((\"15.3\"))\n        // (15l)\n        // Note:\n       \
    \ // Rounding away from zero means that if the given number is equidistant\n \
    \       // from two integers, the one you should return is the one that is the\n\
    \        // farthest from zero. For example closest_integer(\"14.5\") should\n\
    \        // return 15 and closest_integer(\"-14.5\") should return -15.\n    \
    \    // >>> closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from\n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcn7kse5_.java:65: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659805164
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        return\
    \ 0;\n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppm7dhyhm.java:26)\n"
  stdout: ''
  timestamp: 1659805164
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        BigDecimal\
    \ bd = new BigDecimal(value);\n        bd = bd.setScale(0, RoundingMode.HALF_UP);\n\
    \        return bd.longValue();\n    }\n    public static void main(String[] args)\
    \ {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805165
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        return\
    \ 0;\n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppm7dhyhm.java:26)\n"
  stdout: ''
  timestamp: 1659805164
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // >>>\
    \ your code here <<<\n        return 0;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqh75orhy.java:27)\n"
  stdout: ''
  timestamp: 1659805164
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // >>>\
    \ closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from zero means that if the given number\
    \ is equidistant\n        // from two integers, the one you should return is the\
    \ one that is the\n        // farthest from zero. For example closest_integer(\"\
    14.5\") should\n        // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n        // >>> closestInteger((\"10\"))\n        // (10l)\n        //\
    \ >>> closestInteger((\"15.3\"))\n        // (15l)\n        // Note:\n       \
    \ // Rounding away from zero means that if the given number is equidistant\n \
    \       // from two integers, the one you should return is the one that is the\n\
    \        // farthest from zero. For example closest_integer(\"14.5\") should\n\
    \        // return 15 and closest_integer(\"-14.5\") should return -15.\n    \
    \    // >>> closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from\n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcn7kse5_.java:65: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659805164
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // >>>\
    \ closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from zero means that if the given number\
    \ is equidistant\n        // from two integers, the one you should return is the\
    \ one that is the\n        // farthest from zero. For example closest_integer(\"\
    14.5\") should\n        // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n        // >>> closestInteger((\"10\"))\n        // (10l)\n        //\
    \ >>> closestInteger((\"15.3\"))\n        // (15l)\n        // Note:\n       \
    \ // Rounding away from zero means that if the given number is equidistant\n \
    \       // from two integers, the one you should return is the one that is the\n\
    \        // farthest from zero. For example closest_integer(\"14.5\") should\n\
    \        // return 15 and closest_integer(\"-14.5\") should return -15.\n    \
    \    // >>> closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from\n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcn7kse5_.java:65: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659805164
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // >>>\
    \ closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // >>> closestInteger((\"14.5\"))\n      \
    \  // (15l)\n        // >>> closestInteger((\"-14.5\"))\n        // (-15l)\n \
    \       // >>> closestInteger((\"-14.6\"))\n        // (-15l)\n        // >>>\
    \ closestInteger((\"-14.4\"))\n        // (-14l)\n        // >>> closestInteger((\"\
    -14.0\"))\n        // (-14l)\n        // >>> closestInteger((\"-14.1\"))\n   \
    \     // (-14l)\n        // >>> closestInteger((\"-14.2\"))\n        // (-14l)\n\
    \        // >>> closestInteger((\"-14.3\"))\n        // (-14l)\n        // >>>\
    \ closestInteger((\"-14.4\"))\n        // (-14l)\n        // >>> closestInteger((\"\
    -14.5\"))\n        // (-15l)\n        // >>> closestInteger((\"-14.6\"))\n   \
    \     // (-15l)\n        // >>> closestInteger((\"-14.7\"))\n        // (-15l)\n\
    \        // >>> closestInteger((\"-14.8\"))\n        // (-15l)\n        // >>>\
    \ closestInteger((\"-14.9\"))\n        // (-15l)\n        // >>> closestInteger((\"\
    -15.0\"))\n        // (-15l)\n        // >>> closestInteger((\"-15.1\"))\n   \
    \     // (-15l)\n        // >>> closestInteger((\"-15.2\"))\n        // (-15l)\n\
    \        // >>> closestInteger((\"-15.3\"))\n        // (-15l)\n        // >>>\
    \ closestInteger((\"-15.4\"))\n        // (-15l)\n        // >>> closestInteger((\"\
    -15.5\"))\n        // (-16l)\n        // >>> closestInteger((\"-15.6\"))\n   \
    \     // (-16l)\n        // >>> closestInteger((\"-15.7\"))\n        // (-16l)\n\
    \        // >>> closestInteger((\"-15.8\"))\n        // (-16l)\n        // >>>\
    \ closestInteger((\"-15.9\"))\n        // (-\n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpolyfn0c4.java:75: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659805164
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // >>>\
    \ closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // >>> closestInteger((\"15.5\"))\n      \
    \  // (16l)\n        // >>> closestInteger((\"-15.5\"))\n        // (-16l)\n \
    \       // >>> closestInteger((\"-15.4\"))\n        // (-15l)\n        // >>>\
    \ closestInteger((\"-15.6\"))\n        // (-16l)\n        // >>> closestInteger((\"\
    -15.6\"))\n        // (-16l)\n        // >>> closestInteger((\"-15.6\"))\n   \
    \     // (-16l)\n        // >>> closestInteger((\"-15.6\"))\n        // (-16l)\n\
    \        // >>> closestInteger((\"-15.6\"))\n        // (-16l)\n        // >>>\
    \ closestInteger((\"-15.6\"))\n        // (-16l)\n        // >>> closestInteger((\"\
    -15.6\"))\n        // (-16l)\n        // >>> closestInteger((\"-15.6\"))\n   \
    \     // (-16l)\n        // >>> closestInteger((\"-15.6\"))\n        // (-16l)\n\
    \        // >>> closestInteger((\"-15.6\"))\n        // (-16l)\n        // >>>\
    \ closestInteger((\"-15.6\"))\n        // (-16l)\n        // >>> closestInteger((\"\
    -15.6\"))\n        // (-16l)\n        // >>> closestInteger((\"-15.6\"))\n   \
    \     // (-16l)\n        // >>> closestInteger((\"-15.6\"))\n        // (-16l)\n\
    \        // >>> closestInteger((\"-15.6\"))\n        // (-16l)\n        // >>>\
    \ closestInteger((\"-15.6\"))\n        // (-16l)\n        // >>> closestInteger((\"\
    -15.6\"))\n        // (-16l)\n        // >>> closestInteger((\"-15.6\"))\n   \
    \     // (-16l)\n        // >>> closestInteger((\"-15.6\"))\n        // (-16l)\n\
    \        // >>> closestInteger((\"-15.6\"))\n        // (-16l)\n        // >>>\
    \ closestInteger((\"-15.6\"))\n        // (-\n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxle2pd65.java:75: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659805165
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // >>>\
    \ closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // >>> closestInteger((\"-15.3\"))\n     \
    \   // (-15l)\n        // >>> closestInteger((\"-15.6\"))\n        // (-16l)\n\
    \        // >>> closestInteger((\"-15.5\"))\n        // (-16l)\n        // >>>\
    \ closestInteger((\"-15.4\"))\n        // (-15l)\n        // >>> closestInteger((\"\
    -15.2\"))\n        // (-15l)\n        // >>> closestInteger((\"-15.0\"))\n   \
    \     // (-15l)\n        // >>> closestInteger((\"-14.9\"))\n        // (-15l)\n\
    \        // >>> closestInteger((\"-14.8\"))\n        // (-15l)\n        // >>>\
    \ closestInteger((\"-14.7\"))\n        // (-15l)\n        // >>> closestInteger((\"\
    -14.6\"))\n        // (-15l)\n        // >>> closestInteger((\"-14.5\"))\n   \
    \     // (-15l)\n        // >>> closestInteger((\"-14.4\"))\n        // (-15l)\n\
    \        // >>> closestInteger((\"-14.3\"))\n        // (-15l)\n        // >>>\
    \ closestInteger((\"-14.2\"))\n        // (-15l)\n        // >>> closestInteger((\"\
    -14.1\"))\n        // (-15l)\n        // >>> closestInteger((\"-14.0\"))\n   \
    \     // (-14l)\n        // >>> closestInteger((\"-13.9\"))\n        // (-14l)\n\
    \        // >>> closestInteger((\"-13.8\"))\n        // (-14l)\n        // >>>\
    \ closestInteger((\"-13.7\"))\n        // (-14l)\n        // >>> closestInteger((\"\
    -13.6\"))\n        // (-14l)\n        // >>> closestInteger((\"-13.5\"))\n   \
    \     // (-14l)\n        // >>> closestInteger((\"-13.4\"))\n        // (-14l)\n\
    \        // >>> closestInteger((\"-13.3\"))\n        // (-14l)\n        // >>>\
    \ closestInteger((\"-13.2\"))\n        //\n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpoiwse4pt.java:75: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659805165
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        return\
    \ 0;\n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppm7dhyhm.java:26)\n"
  stdout: ''
  timestamp: 1659805164
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        return\
    \ Math.round(Double.parseDouble(value));\n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcaf6h6s2.java:28)\n"
  stdout: ''
  timestamp: 1659805164
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        BigDecimal\
    \ bd = new BigDecimal(value);\n        return bd.setScale(0, RoundingMode.HALF_UP).longValue();\n\
    \    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805164
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // >>>\
    \ your code here <<<\n        return 0;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqh75orhy.java:27)\n"
  stdout: ''
  timestamp: 1659805164
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        return\
    \ 0;\n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppm7dhyhm.java:26)\n"
  stdout: ''
  timestamp: 1659805164
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        return\
    \ 0;\n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppm7dhyhm.java:26)\n"
  stdout: ''
  timestamp: 1659805164
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        return\
    \ 0;\n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppm7dhyhm.java:26)\n"
  stdout: ''
  timestamp: 1659805164
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // Your\
    \ code here\n        return 0;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp11w254yw.java:27)\n"
  stdout: ''
  timestamp: 1659805164
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        return\
    \ 0;\n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppm7dhyhm.java:26)\n"
  stdout: ''
  timestamp: 1659805164
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        return\
    \ 0;\n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppm7dhyhm.java:26)\n"
  stdout: ''
  timestamp: 1659805164
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // >>>\
    \ closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from zero means that if the given number\
    \ is equidistant\n        // from two integers, the one you should return is the\
    \ one that is the\n        // farthest from zero. For example closest_integer(\"\
    14.5\") should\n        // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n        // >>> closestInteger((\"10\"))\n        // (10l)\n        //\
    \ >>> closestInteger((\"15.3\"))\n        // (15l)\n        // Note:\n       \
    \ // Rounding away from zero means that if the given number is equidistant\n \
    \       // from two integers, the one you should return is the one that is the\n\
    \        // farthest from zero. For example closest_integer(\"14.5\") should\n\
    \        // return 15 and closest_integer(\"-14.5\") should return -15.\n    \
    \    // >>> closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from\n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcn7kse5_.java:65: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659805164
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // >>>\
    \ closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from zero means that if the given number\
    \ is equidistant\n        // from two integers, the one you should return is the\
    \ one that is the\n        // farthest from zero. For example closest_integer(\"\
    14.5\") should\n        // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n        // >>> closestInteger((\"10\"))\n        // (10l)\n        //\
    \ >>> closestInteger((\"15.3\"))\n        // (15l)\n        // Note:\n       \
    \ // Rounding away from zero means that if the given number is equidistant\n \
    \       // from two integers, the one you should return is the one that is the\n\
    \        // farthest from zero. For example closest_integer(\"14.5\") should\n\
    \        // return 15 and closest_integer(\"-14.5\") should return -15.\n    \
    \    // >>> closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from\n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcn7kse5_.java:65: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659805164
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        return\
    \ 0;\n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppm7dhyhm.java:26)\n"
  stdout: ''
  timestamp: 1659805164
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // >>>\
    \ closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from zero means that if the given number\
    \ is equidistant\n        // from two integers, the one you should return is the\
    \ one that is the\n        // farthest from zero. For example closest_integer(\"\
    14.5\") should\n        // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n        // >>> closestInteger((\"10\"))\n        // (10l)\n        //\
    \ >>> closestInteger((\"15.3\"))\n        // (15l)\n        // Note:\n       \
    \ // Rounding away from zero means that if the given number is equidistant\n \
    \       // from two integers, the one you should return is the one that is the\n\
    \        // farthest from zero. For example closest_integer(\"14.5\") should\n\
    \        // return 15 and closest_integer(\"-14.5\") should return -15.\n    \
    \    // >>> closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from\n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcn7kse5_.java:65: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659805164
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        return\
    \ 0l;\n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpb1c0au6v.java:26)\n"
  stdout: ''
  timestamp: 1659805164
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // >>>\
    \ closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from zero means that if the given number\
    \ is equidistant\n        // from two integers, the one you should return is the\
    \ one that is the\n        // farthest from zero. For example closest_integer(\"\
    14.5\") should\n        // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n        // >>> closestInteger((\"10\"))\n        // (10l)\n        //\
    \ >>> closestInteger((\"15.3\"))\n        // (15l)\n        // Note:\n       \
    \ // Rounding away from zero means that if the given number is equidistant\n \
    \       // from two integers, the one you should return is the one that is the\n\
    \        // farthest from zero. For example closest_integer(\"14.5\") should\n\
    \        // return 15 and closest_integer(\"-14.5\") should return -15.\n    \
    \    // >>> closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from\n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcn7kse5_.java:65: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659805164
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        return\
    \ 0;\n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppm7dhyhm.java:26)\n"
  stdout: ''
  timestamp: 1659805164
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        double\
    \ d = Double.parseDouble(value);\n        if (d > 0) {\n            return (long)Math.ceil(d);\n\
    \        } else {\n            return (long)Math.floor(d);\n        }\n    }\n\
    \    public static void main(String[] args) {\n    assert(closestInteger((\"10\"\
    )) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpiv70jz54.java:34)\n"
  stdout: ''
  timestamp: 1659805165
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // >>>\
    \ closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from zero means that if the given number\
    \ is equidistant\n        // from two integers, the one you should return is the\
    \ one that is the\n        // farthest from zero. For example closest_integer(\"\
    14.5\") should\n        // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n        // >>> closestInteger((\"10\"))\n        // (10l)\n        //\
    \ >>> closestInteger((\"15.3\"))\n        // (15l)\n        // Note:\n       \
    \ // Rounding away from zero means that if the given number is equidistant\n \
    \       // from two integers, the one you should return is the one that is the\n\
    \        // farthest from zero. For example closest_integer(\"14.5\") should\n\
    \        // return 15 and closest_integer(\"-14.5\") should return -15.\n    \
    \    // >>> closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from\n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcn7kse5_.java:65: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659805164
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        return\
    \ 0;\n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppm7dhyhm.java:26)\n"
  stdout: ''
  timestamp: 1659805164
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // >>>\
    \ closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from zero means that if the given number\
    \ is equidistant\n        // from two integers, the one you should return is the\
    \ one that is the\n        // farthest from zero. For example closest_integer(\"\
    14.5\") should\n        // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n        // >>> closestInteger((\"10\"))\n        // (10l)\n        //\
    \ >>> closestInteger((\"15.3\"))\n        // (15l)\n        // Note:\n       \
    \ // Rounding away from zero means that if the given number is equidistant\n \
    \       // from two integers, the one you should return is the one that is the\n\
    \        // farthest from zero. For example closest_integer(\"14.5\") should\n\
    \        // return 15 and closest_integer(\"-14.5\") should return -15.\n    \
    \    // >>> closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from\n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcn7kse5_.java:65: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659805164
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        return\
    \ 0;\n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppm7dhyhm.java:26)\n"
  stdout: ''
  timestamp: 1659805164
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        double\
    \ d = Double.parseDouble(value);\n        long l = Math.round(d);\n        return\
    \ l;\n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjt5qnvm4.java:30)\n"
  stdout: ''
  timestamp: 1659805164
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        return\
    \ 0;\n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppm7dhyhm.java:26)\n"
  stdout: ''
  timestamp: 1659805164
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // >>>\
    \ closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        return (long) Math.round(Double.parseDouble(value));\n\
    \    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6vq297_r.java:37)\n"
  stdout: ''
  timestamp: 1659805165
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // >>>\
    \ closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // >>> closestInteger((\"-15.3\"))\n     \
    \   // (-15l)\n        // >>> closestInteger((\"-15.6\"))\n        // (-16l)\n\
    \        // >>> closestInteger((\"-15.5\"))\n        // (-16l)\n        // >>>\
    \ closestInteger((\"-15.4\"))\n        // (-15l)\n        // >>> closestInteger((\"\
    -15.1\"))\n        // (-15l)\n        // >>> closestInteger((\"-15.0\"))\n   \
    \     // (-15l)\n        // >>> closestInteger((\"-14.9\"))\n        // (-15l)\n\
    \        // >>> closestInteger((\"-14.6\"))\n        // (-15l)\n        // >>>\
    \ closestInteger((\"-14.5\"))\n        // (-15l)\n        // >>> closestInteger((\"\
    -14.4\"))\n        // (-14l)\n        // >>> closestInteger((\"-14.1\"))\n   \
    \     // (-14l)\n        // >>> closestInteger((\"-14.0\"))\n        // (-14l)\n\
    \        // >>> closestInteger((\"-13.9\"))\n        // (-14l)\n        // >>>\
    \ closestInteger((\"-13.6\"))\n        // (-14l)\n        // >>> closestInteger((\"\
    -13.5\"))\n        // (-14l)\n        // >>> closestInteger((\"-13.4\"))\n   \
    \     // (-13l)\n        // >>> closestInteger((\"-13.1\"))\n        // (-13l)\n\
    \        // >>> closestInteger((\"-13.0\"))\n        // (-13l)\n        // >>>\
    \ closestInteger((\"-12.9\"))\n        // (-13l)\n        // >>> closestInteger((\"\
    -12.6\"))\n        // (-13l)\n        // >>> closestInteger((\"-12.5\"))\n   \
    \     // (-13l)\n        // >>> closestInteger((\"-12.4\"))\n        // (-12l)\n\
    \        // >>> closestInteger((\"-12.1\"))\n        // (-12l)\n        // >>>\
    \ closestInteger((\"-12.0\"))\n        //\n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzb40zm2q.java:75: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659805165
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // >>>\
    \ closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from zero means that if the given number\
    \ is equidistant\n        // from two integers, the one you should return is the\
    \ one that is the\n        // farthest from zero. For example closest_integer(\"\
    14.5\") should\n        // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n        // >>> closestInteger((\"10\"))\n        // (10l)\n        //\
    \ >>> closestInteger((\"15.3\"))\n        // (15l)\n        // Note:\n       \
    \ // Rounding away from zero means that if the given number is equidistant\n \
    \       // from two integers, the one you should return is the one that is the\n\
    \        // farthest from zero. For example closest_integer(\"14.5\") should\n\
    \        // return 15 and closest_integer(\"-14.5\") should return -15.\n    \
    \    // >>> closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from\n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcn7kse5_.java:65: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659805164
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // Your\
    \ code here\n        return 0;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp11w254yw.java:27)\n"
  stdout: ''
  timestamp: 1659805164
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        return\
    \ Math.round(Double.parseDouble(value));\n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcaf6h6s2.java:28)\n"
  stdout: ''
  timestamp: 1659805164
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // >>>\
    \ closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        BigDecimal bd = new BigDecimal(value);\n\
    \        return bd.setScale(0, RoundingMode.HALF_UP).longValue();\n    }\n   \
    \ public static void main(String[] args) {\n    assert(closestInteger((\"10\"\
    )) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805165
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        return\
    \ 0;\n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppm7dhyhm.java:26)\n"
  stdout: ''
  timestamp: 1659805164
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // Write\
    \ your code here\n        double d = Double.parseDouble(value);\n        long\
    \ l = Math.round(d);\n        return l;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpi3_i_2zm.java:31)\n"
  stdout: ''
  timestamp: 1659805166
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // >>>\
    \ closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        BigDecimal bd = new BigDecimal(value);\n\
    \        bd = bd.setScale(0, RoundingMode.HALF_UP);\n        return bd.longValue();\n\
    \    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805164
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // BEGIN\
    \ SOLUTION\n        double d = Double.parseDouble(value);\n        long l = (long)\
    \ d;\n        if (d - l >= 0.5) {\n            return l + 1;\n        } else {\n\
    \            return l;\n        }\n        // END SOLUTION\n    }\n    public\
    \ static void main(String[] args) {\n    assert(closestInteger((\"10\")) == (10l));\n\
    \    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmq_w_e0r.java:36)\n"
  stdout: ''
  timestamp: 1659805165
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        double\
    \ d = Double.parseDouble(value);\n        return Math.round(d);\n    }\n    public\
    \ static void main(String[] args) {\n    assert(closestInteger((\"10\")) == (10l));\n\
    \    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfwfetizb.java:29)\n"
  stdout: ''
  timestamp: 1659805166
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        return\
    \ 0;\n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppm7dhyhm.java:26)\n"
  stdout: ''
  timestamp: 1659805164
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        return\
    \ 0;\n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppm7dhyhm.java:26)\n"
  stdout: ''
  timestamp: 1659805164
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // >>>\
    \ closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from zero means that if the given number\
    \ is equidistant\n        // from two integers, the one you should return is the\
    \ one that is the\n        // farthest from zero. For example closest_integer(\"\
    14.5\") should\n        // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n        // >>> closestInteger((\"10\"))\n        // (10l)\n        //\
    \ >>> closestInteger((\"15.3\"))\n        // (15l)\n        // Note:\n       \
    \ // Rounding away from zero means that if the given number is equidistant\n \
    \       // from two integers, the one you should return is the one that is the\n\
    \        // farthest from zero. For example closest_integer(\"14.5\") should\n\
    \        // return 15 and closest_integer(\"-14.5\") should return -15.\n    \
    \    // >>> closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from\n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcn7kse5_.java:65: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659805164
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        return\
    \ Math.round(Double.parseDouble(value));\n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcaf6h6s2.java:28)\n"
  stdout: ''
  timestamp: 1659805164
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // Your\
    \ code here\n        return 0;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp11w254yw.java:27)\n"
  stdout: ''
  timestamp: 1659805164
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // >>>\
    \ closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from zero means that if the given number\
    \ is equidistant\n        // from two integers, the one you should return is the\
    \ one that is the\n        // farthest from zero. For example closest_integer(\"\
    14.5\") should\n        // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n        // >>> closestInteger((\"10\"))\n        // (10l)\n        //\
    \ >>> closestInteger((\"15.3\"))\n        // (15l)\n        // Note:\n       \
    \ // Rounding away from zero means that if the given number is equidistant\n \
    \       // from two integers, the one you should return is the one that is the\n\
    \        // farthest from zero. For example closest_integer(\"14.5\") should\n\
    \        // return 15 and closest_integer(\"-14.5\") should return -15.\n    \
    \    // >>> closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from\n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcn7kse5_.java:65: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659805164
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        return\
    \ 0;\n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppm7dhyhm.java:26)\n"
  stdout: ''
  timestamp: 1659805164
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        return\
    \ 0;\n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppm7dhyhm.java:26)\n"
  stdout: ''
  timestamp: 1659805164
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // >>>\
    \ your code here <<<\n        return 0;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqh75orhy.java:27)\n"
  stdout: ''
  timestamp: 1659805164
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        BigDecimal\
    \ bd = new BigDecimal(value);\n        return bd.setScale(0, BigDecimal.ROUND_HALF_UP).longValue();\n\
    \    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805164
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        BigDecimal\
    \ bd = new BigDecimal(value);\n        bd = bd.setScale(0, RoundingMode.HALF_UP);\n\
    \        return bd.longValue();\n    }\n    public static void main(String[] args)\
    \ {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805165
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // Your\
    \ code here\n        return 0;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp11w254yw.java:27)\n"
  stdout: ''
  timestamp: 1659805164
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // >>>\
    \ closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // >>> closestInteger((\"15.5\"))\n      \
    \  // (16l)\n        // >>> closestInteger((\"-15.5\"))\n        // (-16l)\n \
    \       // >>> closestInteger((\"-15.6\"))\n        // (-16l)\n        // >>>\
    \ closestInteger((\"-15.4\"))\n        // (-15l)\n        // >>> closestInteger((\"\
    -15.0\"))\n        // (-15l)\n        // >>> closestInteger((\"-15.1\"))\n   \
    \     // (-15l)\n        // >>> closestInteger((\"-15.2\"))\n        // (-15l)\n\
    \        // >>> closestInteger((\"-15.3\"))\n        // (-15l)\n        // >>>\
    \ closestInteger((\"-15.4\"))\n        // (-15l)\n        // >>> closestInteger((\"\
    -15.5\"))\n        // (-16l)\n        // >>> closestInteger((\"-15.6\"))\n   \
    \     // (-16l)\n        // >>> closestInteger((\"-15.7\"))\n        // (-16l)\n\
    \        // >>> closestInteger((\"-15.8\"))\n        // (-16l)\n        // >>>\
    \ closestInteger((\"-15.9\"))\n        // (-16l)\n        // >>> closestInteger((\"\
    -15.0\"))\n        // (-15l)\n        // >>> closestInteger((\"-15.1\"))\n   \
    \     // (-15l)\n        // >>> closestInteger((\"-15.2\"))\n        // (-15l)\n\
    \        // >>> closestInteger((\"-15.3\"))\n        // (-15l)\n        // >>>\
    \ closestInteger((\"-15.4\"))\n        // (-15l)\n        // >>> closestInteger((\"\
    -15.5\"))\n        // (-16l)\n        // >>> closestInteger((\"-15.6\"))\n   \
    \     // (-16l)\n        // >>> closestInteger((\"-15.7\"))\n        // (-16l)\n\
    \        // >>> closestInteger((\"-15.8\"))\n        // (-16l)\n        // >>>\
    \ closestInteger((\"-15.9\"))\n        // (-\n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpry8t7n2o.java:75: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659805165
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        return\
    \ 0;\n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppm7dhyhm.java:26)\n"
  stdout: ''
  timestamp: 1659805164
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // >>>\
    \ closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // >>> closestInteger((\"-15.3\"))\n     \
    \   // (-15l)\n        // >>> closestInteger((\"-15.5\"))\n        // (-16l)\n\
    \        // >>> closestInteger((\"-15.6\"))\n        // (-16l)\n        // >>>\
    \ closestInteger((\"-15.7\"))\n        // (-16l)\n        // >>> closestInteger((\"\
    -15.8\"))\n        // (-16l)\n        // >>> closestInteger((\"-15.9\"))\n   \
    \     // (-16l)\n        // >>> closestInteger((\"-16.0\"))\n        // (-16l)\n\
    \        // >>> closestInteger((\"-16.1\"))\n        // (-16l)\n        // >>>\
    \ closestInteger((\"-16.2\"))\n        // (-16l)\n        // >>> closestInteger((\"\
    -16.3\"))\n        // (-16l)\n        // >>> closestInteger((\"-16.4\"))\n   \
    \     // (-16l)\n        // >>> closestInteger((\"-16.5\"))\n        // (-16l)\n\
    \        // >>> closestInteger((\"-16.6\"))\n        // (-16l)\n        // >>>\
    \ closestInteger((\"-16.7\"))\n        // (-16l)\n        // >>> closestInteger((\"\
    -16.8\"))\n        // (-16l)\n        // >>> closestInteger((\"-16.9\"))\n   \
    \     // (-16l)\n        // >>> closestInteger((\"-17.0\"))\n        // (-17l)\n\
    \        // >>> closestInteger((\"-17.1\"))\n        // (-17l)\n        // >>>\
    \ closestInteger((\"-17.2\"))\n        // (-17l)\n        // >>> closestInteger((\"\
    -17.3\"))\n        // (-17l)\n        // >>> closestInteger((\"-17.4\"))\n   \
    \     // (-17l)\n        // >>> closestInteger((\"-17.5\"))\n        // (-17l)\n\
    \        // >>> closestInteger((\"-17.6\"))\n        // (-17l)\n        // >>>\
    \ closestInteger((\"-17.7\"))\n        //\n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwauygn9q.java:75: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659805165
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // >>>\
    \ closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // >>> closestInteger((\"-15.3\"))\n     \
    \   // (-15l)\n        // >>> closestInteger((\"-15.6\"))\n        // (-16l)\n\
    \        // >>> closestInteger((\"15.6\"))\n        // (16l)\n        // >>> closestInteger((\"\
    15.5\"))\n        // (16l)\n        // >>> closestInteger((\"-15.5\"))\n     \
    \   // (-16l)\n        // >>> closestInteger((\"-15.4\"))\n        // (-15l)\n\
    \        // >>> closestInteger((\"15.4\"))\n        // (15l)\n        // >>> closestInteger((\"\
    -15.0\"))\n        // (-15l)\n        // >>> closestInteger((\"15.0\"))\n    \
    \    // (15l)\n        // >>> closestInteger((\"-15.1\"))\n        // (-16l)\n\
    \        // >>> closestInteger((\"15.1\"))\n        // (16l)\n        // >>> closestInteger((\"\
    -15.2\"))\n        // (-16l)\n        // >>> closestInteger((\"15.2\"))\n    \
    \    // (16l)\n        // >>> closestInteger((\"-15.3\"))\n        // (-15l)\n\
    \        // >>> closestInteger((\"15.3\"))\n        // (15l)\n        // >>> closestInteger((\"\
    -15.4\"))\n        // (-15l)\n        // >>> closestInteger((\"15.4\"))\n    \
    \    // (15l)\n        // >>> closestInteger((\"-15.5\"))\n        // (-16l)\n\
    \        // >>> closestInteger((\"15.5\"))\n        // (16l)\n        // >>> closestInteger((\"\
    -15.6\"))\n        // (-16l)\n        // >>> closestInteger((\"15.6\"))\n    \
    \    // (16l)\n        // >>> closestInteger((\"-15.7\"))\n        // (-16l)\n\
    \        // >>> closestInteger((\"15.7\"))\n        // (16l)\n        // >>> closestInteger((\"\
    -15.8\"))\n        // (-16l)\n        // >>> closestInteger(\n    }\n    public\
    \ static void main(String[] args) {\n    assert(closestInteger((\"10\")) == (10l));\n\
    \    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptbcv0nfk.java:76: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659805165
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        return\
    \ 0l;\n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpb1c0au6v.java:26)\n"
  stdout: ''
  timestamp: 1659805164
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // >>>\
    \ closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from zero means that if the given number\
    \ is equidistant\n        // from two integers, the one you should return is the\
    \ one that is the\n        // farthest from zero. For example closest_integer(\"\
    14.5\") should\n        // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n        // >>> closestInteger((\"10\"))\n        // (10l)\n        //\
    \ >>> closestInteger((\"15.3\"))\n        // (15l)\n        // Note:\n       \
    \ // Rounding away from zero means that if the given number is equidistant\n \
    \       // from two integers, the one you should return is the one that is the\n\
    \        // farthest from zero. For example closest_integer(\"14.5\") should\n\
    \        // return 15 and closest_integer(\"-14.5\") should return -15.\n    \
    \    // >>> closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from\n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcn7kse5_.java:65: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659805164
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // >>>\
    \ closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // >>> closestInteger((\"14.5\"))\n      \
    \  // (15l)\n        // >>> closestInteger((\"-14.5\"))\n        // (-15l)\n \
    \       // >>> closestInteger((\"-14.6\"))\n        // (-15l)\n        // >>>\
    \ closestInteger((\"-14.4\"))\n        // (-14l)\n        // >>> closestInteger((\"\
    -14.0\"))\n        // (-14l)\n        // >>> closestInteger((\"-14.1\"))\n   \
    \     // (-14l)\n        // >>> closestInteger((\"-14.2\"))\n        // (-14l)\n\
    \        // >>> closestInteger((\"-14.3\"))\n        // (-14l)\n        // >>>\
    \ closestInteger((\"-14.4\"))\n        // (-14l)\n        // >>> closestInteger((\"\
    -14.5\"))\n        // (-15l)\n        // >>> closestInteger((\"-14.6\"))\n   \
    \     // (-15l)\n        // >>> closestInteger((\"-14.7\"))\n        // (-15l)\n\
    \        // >>> closestInteger((\"-14.8\"))\n        // (-15l)\n        // >>>\
    \ closestInteger((\"-14.9\"))\n        // (-15l)\n        // >>> closestInteger((\"\
    -15.0\"))\n        // (-15l)\n        // >>> closestInteger((\"-15.1\"))\n   \
    \     // (-15l)\n        // >>> closestInteger((\"-15.2\"))\n        // (-15l)\n\
    \        // >>> closestInteger((\"-15.3\"))\n        // (-15l)\n        // >>>\
    \ closestInteger((\"-15.4\"))\n        // (-15l)\n        // >>> closestInteger((\"\
    -15.5\"))\n        // (-16l)\n        // >>> closestInteger((\"-15.6\"))\n   \
    \     // (-16l)\n        // >>> closestInteger((\"-15.7\"))\n        // (-16l)\n\
    \        // >>> closestInteger((\"-15.8\"))\n        // (-16l)\n        // >>>\
    \ closestInteger((\"-15.9\"))\n        // (-\n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpolyfn0c4.java:75: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659805164
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // >>>\
    \ closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from zero means that if the given number\
    \ is equidistant\n        // from two integers, the one you should return is the\
    \ one that is the\n        // farthest from zero. For example closest_integer(\"\
    14.5\") should\n        // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n        // >>> closestInteger((\"10\"))\n        // (10l)\n        //\
    \ >>> closestInteger((\"15.3\"))\n        // (15l)\n        // Note:\n       \
    \ // Rounding away from zero means that if the given number is equidistant\n \
    \       // from two integers, the one you should return is the one that is the\n\
    \        // farthest from zero. For example closest_integer(\"14.5\") should\n\
    \        // return 15 and closest_integer(\"-14.5\") should return -15.\n    \
    \    // >>> closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from\n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcn7kse5_.java:65: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659805164
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // >>>\
    \ closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // >>> closestInteger((\"15.5\"))\n      \
    \  // (16l)\n        // >>> closestInteger((\"-15.5\"))\n        // (-16l)\n \
    \       // >>> closestInteger((\"-15.6\"))\n        // (-16l)\n        // >>>\
    \ closestInteger((\"-15.4\"))\n        // (-15l)\n        // >>> closestInteger((\"\
    -15.0\"))\n        // (-15l)\n        // >>> closestInteger((\"-15.1\"))\n   \
    \     // (-15l)\n        // >>> closestInteger((\"-15.2\"))\n        // (-15l)\n\
    \        // >>> closestInteger((\"-15.3\"))\n        // (-15l)\n        // >>>\
    \ closestInteger((\"-15.4\"))\n        // (-15l)\n        // >>> closestInteger((\"\
    -15.5\"))\n        // (-16l)\n        // >>> closestInteger((\"-15.6\"))\n   \
    \     // (-16l)\n        // >>> closestInteger((\"-15.7\"))\n        // (-16l)\n\
    \        // >>> closestInteger((\"-15.8\"))\n        // (-16l)\n        // >>>\
    \ closestInteger((\"-15.9\"))\n        // (-16l)\n        // >>> closestInteger((\"\
    -15.0\"))\n        // (-15l)\n        // >>> closestInteger((\"-15.1\"))\n   \
    \     // (-15l)\n        // >>> closestInteger((\"-15.2\"))\n        // (-15l)\n\
    \        // >>> closestInteger((\"-15.3\"))\n        // (-15l)\n        // >>>\
    \ closestInteger((\"-15.4\"))\n        // (-15l)\n        // >>> closestInteger((\"\
    -15.5\"))\n        // (-16l)\n        // >>> closestInteger((\"-15.6\"))\n   \
    \     // (-16l)\n        // >>> closestInteger((\"-15.7\"))\n        // (-16l)\n\
    \        // >>> closestInteger((\"-15.8\"))\n        // (-16l)\n        // >>>\
    \ closestInteger((\"-15.9\"))\n        // (-\n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpry8t7n2o.java:75: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659805165
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        return\
    \ 0;\n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppm7dhyhm.java:26)\n"
  stdout: ''
  timestamp: 1659805164
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // >>>\
    \ closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from zero means that if the given number\
    \ is equidistant\n        // from two integers, the one you should return is the\
    \ one that is the\n        // farthest from zero. For example closest_integer(\"\
    14.5\") should\n        // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n        // >>> closestInteger((\"10\"))\n        // (10l)\n        //\
    \ >>> closestInteger((\"15.3\"))\n        // (15l)\n        // Note:\n       \
    \ // Rounding away from zero means that if the given number is equidistant\n \
    \       // from two integers, the one you should return is the one that is the\n\
    \        // farthest from zero. For example closest_integer(\"14.5\") should\n\
    \        // return 15 and closest_integer(\"-14.5\") should return -15.\n    \
    \    // >>> closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from\n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcn7kse5_.java:65: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659805164
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        return\
    \ Math.round(Double.parseDouble(value));\n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcaf6h6s2.java:28)\n"
  stdout: ''
  timestamp: 1659805164
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        return\
    \ 0;\n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppm7dhyhm.java:26)\n"
  stdout: ''
  timestamp: 1659805164
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // >>>\
    \ closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from zero means that if the given number\
    \ is equidistant\n        // from two integers, the one you should return is the\
    \ one that is the\n        // farthest from zero. For example closest_integer(\"\
    14.5\") should\n        // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n        // >>> closestInteger((\"10\"))\n        // (10l)\n        //\
    \ >>> closestInteger((\"15.3\"))\n        // (15l)\n        // Note:\n       \
    \ // Rounding away from zero means that if the given number is equidistant\n \
    \       // from two integers, the one you should return is the one that is the\n\
    \        // farthest from zero. For example closest_integer(\"14.5\") should\n\
    \        // return 15 and closest_integer(\"-14.5\") should return -15.\n    \
    \    // >>> closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from\n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcn7kse5_.java:65: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659805164
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        return\
    \ 0;\n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppm7dhyhm.java:26)\n"
  stdout: ''
  timestamp: 1659805164
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        BigDecimal\
    \ bd = new BigDecimal(value);\n        return bd.setScale(0, RoundingMode.HALF_UP).longValue();\n\
    \    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805164
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // >>>\
    \ closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        double d = Double.parseDouble(value);\n \
    \       if (d < 0) {\n            return (long) Math.ceil(d);\n        } else\
    \ {\n            return (long) Math.floor(d);\n        }\n    }\n    public static\
    \ void main(String[] args) {\n    assert(closestInteger((\"10\")) == (10l));\n\
    \    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpoqwcvecx.java:41)\n"
  stdout: ''
  timestamp: 1659805166
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // >>>\
    \ closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // >>> closestInteger((\"-15.3\"))\n     \
    \   // (-15l)\n        // >>> closestInteger((\"-15.6\"))\n        // (-16l)\n\
    \        // >>> closestInteger((\"-15.0\"))\n        // (-15l)\n        // >>>\
    \ closestInteger((\"-15.1\"))\n        // (-15l)\n        // >>> closestInteger((\"\
    -15.4\"))\n        // (-15l)\n        // >>> closestInteger((\"-15.5\"))\n   \
    \     // (-16l)\n        // >>> closestInteger((\"-15.6\"))\n        // (-16l)\n\
    \        // >>> closestInteger((\"-15.7\"))\n        // (-16l)\n        // >>>\
    \ closestInteger((\"-15.8\"))\n        // (-16l)\n        // >>> closestInteger((\"\
    -15.9\"))\n        // (-16l)\n        // >>> closestIntegern\
    \    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppuy9xakw.java:48: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659805166
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        double\
    \ d = Double.parseDouble(value);\n        return Math.round(d);\n    }\n    public\
    \ static void main(String[] args) {\n    assert(closestInteger((\"10\")) == (10l));\n\
    \    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfwfetizb.java:29)\n"
  stdout: ''
  timestamp: 1659805166
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // >>>\
    \ closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        return 0;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsvvnu5ri.java:35)\n"
  stdout: ''
  timestamp: 1659805164
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // >>>\
    \ closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // >>> closestInteger((\"-15.3\"))\n     \
    \   // (-15l)\n        // >>> closestInteger((\"-15.6\"))\n        // (-16l)\n\
    \        // >>> closestInteger((\"-15.5\"))\n        // (-16l)\n        // >>>\
    \ closestInteger((\"-15.4\"))\n        // (-15l)\n        // >>> closestInteger((\"\
    -15.1\"))\n        // (-15l)\n        // >>> closestInteger((\"-15.0\"))\n   \
    \     // (-15l)\n        // >>> closestInteger((\"-14.9\"))\n        // (-15l)\n\
    \        // >>> closestInteger((\"-14.8\"))\n        // (-15l)\n        // >>>\
    \ closestInteger((\"-14.7\"))\n        // (-15l)\n        // >>> closestInteger((\"\
    -14.6\"))\n        // (-15l)\n        // >>> closestInteger((\"-14.5\"))\n   \
    \     // (-15l)\n        // >>> closestInteger((\"-14.4\"))\n        // (-15l)\n\
    \        // >>> closestInteger((\"-14.3\"))\n        // (-15l)\n        // >>>\
    \ closestInteger((\"-14.2\"))\n        // (-15l)\n        // >>> closestInteger((\"\
    -14.1\"))\n        // (-15l)\n        // >>> closestInteger((\"-14.0\"))\n   \
    \     // (-14l)\n        // >>> closestInteger((\"-13.9\"))\n        // (-14l)\n\
    \        // >>> closestInteger((\"-13.8\"))\n        // (-14l)\n        // >>>\
    \ closestInteger((\"-13.7\"))\n        // (-14l)\n        // >>> closestInteger((\"\
    -13.6\"))\n        // (-14l)\n        // >>> closestInteger((\"-13.5\"))\n   \
    \     // (-14l)\n        // >>> closestInteger((\"-13.4\"))\n        // (-14l)\n\
    \        // >>> closestInteger((\"-13.3\"))\n        // (-14l)\n        // >>>\
    \ closestInteger((\"-13.2\"))\n        //\n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpffeu7il7.java:75: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659805166
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        double\
    \ d = Double.parseDouble(value);\n        return (long)Math.round(d);\n    }\n\
    \    public static void main(String[] args) {\n    assert(closestInteger((\"10\"\
    )) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1syyopjb.java:29)\n"
  stdout: ''
  timestamp: 1659805164
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // >>>\
    \ closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from zero means that if the given number\
    \ is equidistant\n        // from two integers, the one you should return is the\
    \ one that is the\n        // farthest from zero. For example closest_integer(\"\
    14.5\") should\n        // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n        // >>> closestInteger((\"10\"))\n        // (10l)\n        //\
    \ >>> closestInteger((\"15.3\"))\n        // (15l)\n        // Note:\n       \
    \ // Rounding away from zero means that if the given number is equidistant\n \
    \       // from two integers, the one you should return is the one that is the\n\
    \        // farthest from zero. For example closest_integer(\"14.5\") should\n\
    \        // return 15 and closest_integer(\"-14.5\") should return -15.\n    \
    \    // >>> closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from\n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcn7kse5_.java:65: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659805164
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        return\
    \ 0;\n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppm7dhyhm.java:26)\n"
  stdout: ''
  timestamp: 1659805164
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        return\
    \ 0;\n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppm7dhyhm.java:26)\n"
  stdout: ''
  timestamp: 1659805164
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        return\
    \ 0;\n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppm7dhyhm.java:26)\n"
  stdout: ''
  timestamp: 1659805164
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // >>>\
    \ your code here <<<\n        return 0;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqh75orhy.java:27)\n"
  stdout: ''
  timestamp: 1659805164
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // >>>\
    \ closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from zero means that if the given number\
    \ is equidistant\n        // from two integers, the one you should return is the\
    \ one that is the\n        // farthest from zero. For example closest_integer(\"\
    14.5\") should\n        // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n        // >>> closestInteger((\"10\"))\n        // (10l)\n        //\
    \ >>> closestInteger((\"15.3\"))\n        // (15l)\n        // Note:\n       \
    \ // Rounding away from zero means that if the given number is equidistant\n \
    \       // from two integers, the one you should return is the one that is the\n\
    \        // farthest from zero. For example closest_integer(\"14.5\") should\n\
    \        // return 15 and closest_integer(\"-14.5\") should return -15.\n    \
    \    // >>> closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from\n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcn7kse5_.java:65: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659805164
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        return\
    \ 0l;\n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpb1c0au6v.java:26)\n"
  stdout: ''
  timestamp: 1659805164
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // >>>\
    \ closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from zero means that if the given number\
    \ is equidistant\n        // from two integers, the one you should return is the\
    \ one that is the\n        // farthest from zero. For example closest_integer(\"\
    14.5\") should\n        // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n        // >>> closestInteger((\"10\"))\n        // (10l)\n        //\
    \ >>> closestInteger((\"15.3\"))\n        // (15l)\n        // Note:\n       \
    \ // Rounding away from zero means that if the given number is equidistant\n \
    \       // from two integers, the one you should return is the one that is the\n\
    \        // farthest from zero. For example closest_integer(\"14.5\") should\n\
    \        // return 15 and closest_integer(\"-14.5\") should return -15.\n    \
    \    // >>> closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from\n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcn7kse5_.java:65: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659805164
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // >>>\
    \ closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // >>> closestInteger((\"14.5\"))\n      \
    \  // (15l)\n        // >>> closestInteger((\"-14.5\"))\n        // (-15l)\n \
    \       // >>> closestInteger((\"-14.6\"))\n        // (-15l)\n        // >>>\
    \ closestInteger((\"-14.4\"))\n        // (-14l)\n        // >>> closestInteger((\"\
    -14.0\"))\n        // (-14l)\n        // >>> closestInteger((\"-14.1\"))\n   \
    \     // (-14l)\n        // >>> closestInteger((\"-14.2\"))\n        // (-14l)\n\
    \        // >>> closestInteger((\"-14.3\"))\n        // (-14l)\n        // >>>\
    \ closestInteger((\"-14.4\"))\n        // (-14l)\n        // >>> closestInteger((\"\
    -14.5\"))\n        // (-15l)\n        // >>> closestInteger((\"-14.6\"))\n   \
    \     // (-15l)\n        // >>> closestInteger((\"-14.7\"))\n        // (-15l)\n\
    \        // >>> closestInteger((\"-14.8\"))\n        // (-15l)\n        // >>>\
    \ closestInteger((\"-14.9\"))\n        // (-15l)\n        // >>> closestInteger((\"\
    -14.99\"))\n        // (-15l)\n        // >>> closestInteger((\"-14.999\"))\n\
    \        // (-15l)\n        // >>> closestInteger((\"-14.9999\"))\n        //\
    \ (-15l)\n        // >>> closestInteger((\"-14.99999\"))\n        // (-15l)\n\
    \        // >>> closestInteger((\"-14.999999\"))\n        // (-15l)\n        //\
    \ >>> closestInteger((\"-14.9999999\"))\n        // (-15l)\n        // >>> closestInteger((\"\
    -14.99999999\"))\n        // (-15l)\n        // >>> closestInteger((\"-14.999999999\"\
    ))\n        // (-15l)\n        // >>> closestInteger((\"-14.9999999999\"))\n \
    \       // (-15l)\n        // >>> closestInteger((\"-\n    }\n    public static\
    \ void main(String[] args) {\n    assert(closestInteger((\"10\")) == (10l));\n\
    \    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpf_sq1gzt.java:74: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659805166
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // >>>\
    \ closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // >>> closestInteger((\"15.5\"))\n      \
    \  // (16l)\n        // >>> closestInteger((\"-15.5\"))\n        // (-16l)\n \
    \       // >>> closestInteger((\"-15.4\"))\n        // (-15l)\n        // >>>\
    \ closestInteger((\"-15.6\"))\n        // (-16l)\n        // >>> closestInteger((\"\
    -15.7\"))\n        // (-16l)\n        // >>> closestInteger((\"-15.8\"))\n   \
    \     // (-16l)\n        // >>> closestInteger((\"-15.9\"))\n        // (-16l)\n\
    \        // >>> closestInteger((\"-15.0\"))\n        // (-15l)\n        // >>>\
    \ closestInteger((\"-15.1\"))\n        // (-16l)\n        // >>> closestInteger((\"\
    -15.2\"))\n        // (-16l)\n        // >>> closestInteger((\"-15.3\"))\n   \
    \     // (-16l)\n        // >>> closestInteger((\"-15.4\"))\n        // (-16l)\n\
    \        // >>> closestInteger((\"-15.5\"))\n        // (-16l)\n        // >>>\
    \ closestInteger((\"-15.6\"))\n        // (-16l)\n        // >>> closestInteger((\"\
    -15.7\"))\n        // (-16l)\n        // >>> closestInteger((\"-15.8\"))\n   \
    \     // (-16l)\n        // >>> closestInteger((\"-15.9\"))\n        // (-16l)\n\
    \        // >>> closestInteger((\"-15.0\"))\n        // (-15l)\n        // >>>\
    \ closestInteger((\"-15.1\"))\n        // (-16l)\n        // >>> closestInteger((\"\
    -15.2\"))\n        // (-16l)\n        // >>> closestInteger((\"-15.3\"))\n   \
    \     // (-16l)\n        // >>> closestInteger((\"-15.4\"))\n        // (-16l)\n\
    \        // >>> closestInteger((\"-15.5\"))\n        // (-16l)\n        // >>>\
    \ closestInteger((\"-15.6\"))\n        // (-\n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnx4b5at5.java:75: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659805166
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        return\
    \ 0;\n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppm7dhyhm.java:26)\n"
  stdout: ''
  timestamp: 1659805164
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        return\
    \ 0;\n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppm7dhyhm.java:26)\n"
  stdout: ''
  timestamp: 1659805164
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // >>>\
    \ closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // >>> closestInteger((\"-15.3\"))\n     \
    \   // (-15l)\n        // >>> closestInteger((\"-15.6\"))\n        // (-16l)\n\
    \        // >>> closestInteger((\"-15.5\"))\n        // (-16l)\n        // >>>\
    \ closestInteger((\"-15.4\"))\n        // (-15l)\n        // >>> closestInteger((\"\
    -15.2\"))\n        // (-15l)\n        // >>> closestInteger((\"-15.1\"))\n   \
    \     // (-15l)\n        // >>> closestInteger((\"-15.0\"))\n        // (-15l)\n\
    \        // >>> closestInteger((\"-14.9\"))\n        // (-15l)\n        // >>>\
    \ closestInteger((\"-14.8\"))\n        // (-15l)\n        // >>> closestInteger((\"\
    -14.7\"))\n        // (-15l)\n        // >>> closestInteger((\"-14.6\"))\n   \
    \     // (-15l)\n        // >>> closestInteger((\"-14.5\"))\n        // (-15l)\n\
    \        // >>> closestInteger((\"-14.4\"))\n        // (-15l)\n        // >>>\
    \ closestInteger((\"-14.3\"))\n        // (-15l)\n        // >>> closestInteger((\"\
    -14.2\"))\n        // (-15l)\n        // >>> closestInteger((\"-14.1\"))\n   \
    \     // (-15l)\n        // >>> closestInteger((\"-14.0\"))\n        // (-14l)\n\
    \        // >>> closestInteger((\"-13.9\"))\n        // (-14l)\n        // >>>\
    \ closestInteger((\"-13.8\"))\n        // (-14l)\n        // >>> closestInteger((\"\
    -13.7\"))\n        // (-14l)\n        // >>> closestInteger((\"-13.6\"))\n   \
    \     // (-14l)\n        // >>> closestInteger((\"-13.5\"))\n        // (-14l)\n\
    \        // >>> closestInteger((\"-13.4\"))\n        // (-14l)\n        // >>>\
    \ closestInteger((\"-13.3\"))\n        //\n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzqu3nkgw.java:75: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659805165
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // >>>\
    \ closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from zero means that if the given number\
    \ is equidistant\n        // from two integers, the one you should return is the\
    \ one that is the\n        // farthest from zero. For example closest_integer(\"\
    14.5\") should\n        // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n        // >>> closestInteger((\"10\"))\n        // (10l)\n        //\
    \ >>> closestInteger((\"15.3\"))\n        // (15l)\n        // Note:\n       \
    \ // Rounding away from zero means that if the given number is equidistant\n \
    \       // from two integers, the one you should return is the one that is the\n\
    \        // farthest from zero. For example closest_integer(\"14.5\") should\n\
    \        // return 15 and closest_integer(\"-14.5\") should return -15.\n    \
    \    // >>> closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from\n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcn7kse5_.java:65: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659805164
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // >>>\
    \ closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from zero means that if the given number\
    \ is equidistant\n        // from two integers, the one you should return is the\
    \ one that is the\n        // farthest from zero. For example closest_integer(\"\
    14.5\") should\n        // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n        // >>> closestInteger((\"10\"))\n        // (10l)\n        //\
    \ >>> closestInteger((\"15.3\"))\n        // (15l)\n        // Note:\n       \
    \ // Rounding away from zero means that if the given number is equidistant\n \
    \       // from two integers, the one you should return is the one that is the\n\
    \        // farthest from zero. For example closest_integer(\"14.5\") should\n\
    \        // return 15 and closest_integer(\"-14.5\") should return -15.\n    \
    \    // >>> closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from\n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcn7kse5_.java:65: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659805164
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        return\
    \ 0;\n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppm7dhyhm.java:26)\n"
  stdout: ''
  timestamp: 1659805164
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // >>>\
    \ closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from zero means that if the given number\
    \ is equidistant\n        // from two integers, the one you should return is the\
    \ one that is the\n        // farthest from zero. For example closest_integer(\"\
    14.5\") should\n        // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n        // >>> closestInteger((\"10\"))\n        // (10l)\n        //\
    \ >>> closestInteger((\"15.3\"))\n        // (15l)\n        // Note:\n       \
    \ // Rounding away from zero means that if the given number is equidistant\n \
    \       // from two integers, the one you should return is the one that is the\n\
    \        // farthest from zero. For example closest_integer(\"14.5\") should\n\
    \        // return 15 and closest_integer(\"-14.5\") should return -15.\n    \
    \    // >>> closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from\n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcn7kse5_.java:65: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659805164
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        return\
    \ 0;\n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppm7dhyhm.java:26)\n"
  stdout: ''
  timestamp: 1659805164
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // >>>\
    \ closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // >>> closestInteger((\"-15.3\"))\n     \
    \   // (-15l)\n        // >>> closestInteger((\"-15.6\"))\n        // (-16l)\n\
    \        // >>> closestInteger((\"-15.5\"))\n        // (-16l)\n        // >>>\
    \ closestInteger((\"-15.4\"))\n        // (-15l)\n        // >>> closestInteger((\"\
    -15.0\"))\n        // (-15l)\n        // >>> closestInteger((\"-15.1\"))\n   \
    \     // (-16l)\n        // >>> closestInteger((\"-15.2\"))\n        // (-16l)\n\
    \        // >>> closestInteger((\"-15.3\"))\n        // (-15l)\n        // >>>\
    \ closestInteger((\"-15.4\"))\n        // (-15l)\n        // >>> closestInteger((\"\
    -15.5\"))\n        // (-16l)\n        // >>> closestInteger((\"-15.6\"))\n   \
    \     // (-16l)\n        // >>> closestInteger((\"-15.7\"))\n        // (-16l)\n\
    \        // >>> closestInteger((\"-15.8\"))\n        // (-16l)\n        // >>>\
    \ closestInteger((\"-15.9\"))\n        // (-16l)\n        // >>> closestInteger((\"\
    -15.0\"))\n        // (-15l)\n        // >>> closestInteger((\"-15.1\"))\n   \
    \     // (-16l)\n        // >>> closestInteger((\"-15.2\"))\n        // (-16l)\n\
    \        // >>> closestInteger((\"-15.3\"))\n        // (-15l)\n        // >>>\
    \ closestInteger((\"-15.4\"))\n        // (-15l)\n        // >>> closestInteger((\"\
    -15.5\"))\n        // (-16l)\n        // >>> closestInteger((\"-15.6\"))\n   \
    \     // (-16l)\n        // >>> closestInteger((\"-15.7\"))\n        // (-16l)\n\
    \        // >>> closestInteger((\"-15.8\"))\n        // (-16l)\n        // >>>\
    \ closestInteger((\"-15.9\"))\n        //\n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpuf1gsepy.java:75: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659805165
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // >>>\
    \ closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        return 0;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsvvnu5ri.java:35)\n"
  stdout: ''
  timestamp: 1659805164
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        return\
    \ 0;\n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppm7dhyhm.java:26)\n"
  stdout: ''
  timestamp: 1659805164
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // >>>\
    \ closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // >>> closestInteger((\"-15.3\"))\n     \
    \   // (-15l)\n        // >>> closestInteger((\"-15.6\"))\n        // (-16l)\n\
    \        // >>> closestInteger((\"-15.5\"))\n        // (-16l)\n        // >>>\
    \ closestInteger((\"-15.4\"))\n        // (-15l)\n        // >>> closestInteger((\"\
    15.6\"))\n        // (16l)\n        // >>> closestInteger((\"15.5\"))\n      \
    \  // (16l)\n        // >>> closestInteger((\"15.4\"))\n        // (15l)\n   \
    \     // >>> closestInteger((\"0.0\"))\n        // (0l)\n        // >>> closestInteger((\"\
    0.1\"))\n        // (0l)\n        // >>> closestInteger((\"0.2\"))\n        //\
    \ (0l)\n        // >>> closestInteger((\"0.3\"))\n        // (0l)\n        //\
    \ >>> closestInteger((\"0.4\"))\n        // (0l)\n        // >>> closestInteger((\"\
    0.5\"))\n        // (1l)\n        // >>> closestInteger((\"0.6\"))\n        //\
    \ (1l)\n        // >>> closestInteger((\"0.7\"))\n        // (1l)\n        //\
    \ >>> closestInteger((\"0.8\"))\n        // (1l)\n        // >>> closestInteger((\"\
    0.9\"))\n        // (1l)\n        // >>> closestInteger((\"-0.0\"))\n        //\
    \ (0l)\n        // >>> closestInteger((\"-0.1\"))\n        // (0l)\n        //\
    \ >>> closestInteger((\"-0.2\"))\n        // (0l)\n        // >>> closestInteger((\"\
    -0.3\"))\n        // (0l)\n        // >>> closestInteger((\"-0.4\"))\n       \
    \ // (0l)\n        // >>> closestInteger((\"-0.5\"))\n        // (-1l)\n     \
    \   // >>> closestInteger((\"-0.6\"))\n        // (-1l)\n        // >>> closestInteger((\"\
    -\n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp84irof7s.java:76: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659805166
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        return\
    \ 0;\n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppm7dhyhm.java:26)\n"
  stdout: ''
  timestamp: 1659805164
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // >>>\
    \ closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from zero means that if the given number\
    \ is equidistant\n        // from two integers, the one you should return is the\
    \ one that is the\n        // farthest from zero. For example closest_integer(\"\
    14.5\") should\n        // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n        BigDecimal bd = new BigDecimal(value);\n        BigDecimal rounded\
    \ = bd.setScale(0, RoundingMode.HALF_UP);\n        return rounded.longValue();\n\
    \    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805166
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // >>>\
    \ closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // >>> closestInteger((\"14.5\"))\n      \
    \  // (15l)\n        // >>> closestInteger((\"-14.5\"))\n        // (-15l)\n \
    \       // >>> closestInteger((\"-14.6\"))\n        // (-15l)\n        // >>>\
    \ closestInteger((\"-14.4\"))\n        // (-14l)\n        // >>> closestInteger((\"\
    -14.0\"))\n        // (-14l)\n        // >>> closestInteger((\"-14.1\"))\n   \
    \     // (-14l)\n        // >>> closestInteger((\"-14.2\"))\n        // (-14l)\n\
    \        // >>> closestInteger((\"-14.3\"))\n        // (-14l)\n        // >>>\
    \ closestInteger((\"-14.4\"))\n        // (-14l)\n        // >>> closestInteger((\"\
    -14.5\"))\n        // (-15l)\n        // >>> closestInteger((\"-14.6\"))\n   \
    \     // (-15l)\n        // >>> closestInteger((\"-14.7\"))\n        // (-15l)\n\
    \        // >>> closestInteger((\"-14.8\"))\n        // (-15l)\n        // >>>\
    \ closestInteger((\"-14.9\"))\n        // (-15l)\n        // >>> closestInteger((\"\
    -15.0\"))\n        // (-15l)\n        // >>> closestInteger((\"-15.1\"))\n   \
    \     // (-15l)\n        // >>> closestInteger((\"-15.2\"))\n        // (-15l)\n\
    \        // >>> closestInteger((\"-15.3\"))\n        // (-15l)\n        // >>>\
    \ closestInteger((\"-15.4\"))\n        // (-15l)\n        // >>> closestInteger((\"\
    -15.5\"))\n        // (-16l)\n        // >>> closestInteger((\"-15.6\"))\n   \
    \     // (-16l)\n        // >>> closestInteger((\"-15.7\"))\n        // (-16l)\n\
    \        // >>> closestInteger((\"-15.8\"))\n        // (-16l)\n        // >>>\
    \ closestInteger((\"-15.9\"))\n        // (-\n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpolyfn0c4.java:75: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659805164
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        double\
    \ d = Double.parseDouble(value);\n        return Math.round(d);\n    }\n    public\
    \ static void main(String[] args) {\n    assert(closestInteger((\"10\")) == (10l));\n\
    \    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfwfetizb.java:29)\n"
  stdout: ''
  timestamp: 1659805166
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        return\
    \ 0;\n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppm7dhyhm.java:26)\n"
  stdout: ''
  timestamp: 1659805164
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        return\
    \ 0;\n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppm7dhyhm.java:26)\n"
  stdout: ''
  timestamp: 1659805164
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        return\
    \ 0;\n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppm7dhyhm.java:26)\n"
  stdout: ''
  timestamp: 1659805164
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        return\
    \ 0;\n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppm7dhyhm.java:26)\n"
  stdout: ''
  timestamp: 1659805164
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        double\
    \ d = Double.parseDouble(value);\n        return (long)Math.round(d);\n    }\n\
    \    public static void main(String[] args) {\n    assert(closestInteger((\"10\"\
    )) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1syyopjb.java:29)\n"
  stdout: ''
  timestamp: 1659805164
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        return\
    \ 0;\n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppm7dhyhm.java:26)\n"
  stdout: ''
  timestamp: 1659805164
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        return\
    \ Math.round(Double.parseDouble(value));\n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcaf6h6s2.java:28)\n"
  stdout: ''
  timestamp: 1659805164
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // >>>\
    \ closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from zero means that if the given number\
    \ is equidistant\n        // from two integers, the one you should return is the\
    \ one that is the\n        // farthest from zero. For example closest_integer(\"\
    14.5\") should\n        // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n        // >>> closestInteger((\"10\"))\n        // (10l)\n        //\
    \ >>> closestInteger((\"15.3\"))\n        // (15l)\n        // Note:\n       \
    \ // Rounding away from zero means that if the given number is equidistant\n \
    \       // from two integers, the one you should return is the one that is the\n\
    \        // farthest from zero. For example closest_integer(\"14.5\") should\n\
    \        // return 15 and closest_integer(\"-14.5\") should return -15.\n    \
    \    // >>> closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from\n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcn7kse5_.java:65: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659805164
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // >>>\
    \ your code here <<<\n        return 0;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqh75orhy.java:27)\n"
  stdout: ''
  timestamp: 1659805164
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // >>>\
    \ your code here <<<\n        return 0;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqh75orhy.java:27)\n"
  stdout: ''
  timestamp: 1659805164
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // >>>\
    \ your code here <<<\n        return 0;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqh75orhy.java:27)\n"
  stdout: ''
  timestamp: 1659805164
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // >>>\
    \ closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        double d = Double.parseDouble(value);\n \
    \       if (d > 0) {\n            return (long) Math.ceil(d);\n        } else\
    \ {\n            return (long) Math.floor(d);\n        }\n    }\n    public static\
    \ void main(String[] args) {\n    assert(closestInteger((\"10\")) == (10l));\n\
    \    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0jn3d571.java:43)\n"
  stdout: ''
  timestamp: 1659805166
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // >>>\
    \ closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from zero means that if the given number\
    \ is equidistant\n        // from two integers, the one you should return is the\
    \ one that is the\n        // farthest from zero. For example closest_integer(\"\
    14.5\") should\n        // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n        // >>> closestInteger((\"10\"))\n        // (10l)\n        //\
    \ >>> closestInteger((\"15.3\"))\n        // (15l)\n        // Note:\n       \
    \ // Rounding away from zero means that if the given number is equidistant\n \
    \       // from two integers, the one you should return is the one that is the\n\
    \        // farthest from zero. For example closest_integer(\"14.5\") should\n\
    \        // return 15 and closest_integer(\"-14.5\") should return -15.\n    \
    \    // >>> closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from\n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcn7kse5_.java:65: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659805164
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        return\
    \ 0;\n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppm7dhyhm.java:26)\n"
  stdout: ''
  timestamp: 1659805164
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // >>>\
    \ closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // >>> closestInteger((\"-15.3\"))\n     \
    \   // (-15l)\n        // >>> closestInteger((\"-15.6\"))\n        // (-16l)\n\
    \        // >>> closestInteger((\"-15.6\"))\n        // (-16l)\n        // >>>\
    \ closestInteger((\"-15.6\"))\n        // (-16l)\n        // >>> closestInteger((\"\
    -15.6\"))\n        // (-16l)\n        // >>> closestInteger((\"-15.6\"))\n   \
    \     // (-16l)\n        // >>> closestInteger((\"-15.6\"))\n        // (-16l)\n\
    \        // >>> closestInteger((\"-15.6\"))\n        // (-16l)\n        // >>>\
    \ closestInteger((\"-15.6\"))\n        // (-16l)\n        // >>> closestInteger((\"\
    -15.6\"))\n        // (-16l)\n        // >>> closestInteger((\"-15.6\"))\n   \
    \     // (-16l)\n        // >>> closestInteger((\"-15.6\"))\n        // (-16l)\n\
    \        // >>> closestInteger((\"-15.6\"))\n        // (-16l)\n        // >>>\
    \ closestInteger((\"-15.6\"))\n        // (-16l)\n        // >>> closestInteger((\"\
    -15.6\"))\n        // (-16l)\n        // >>> closestInteger((\"-15.6\"))\n   \
    \     // (-16l)\n        // >>> closestInteger((\"-15.6\"))\n        // (-16l)\n\
    \        // >>> closestInteger((\"-15.6\"))\n        // (-16l)\n        // >>>\
    \ closestInteger((\"-15.6\"))\n        // (-16l)\n        // >>> closestInteger((\"\
    -15.6\"))\n        // (-16l)\n        // >>> closestInteger((\"-15.6\"))\n   \
    \     // (-16l)\n        // >>> closestInteger((\"-15.6\"))\n        // (-16l)\n\
    \        // >>> closestInteger((\"-15.6\"))\n        // (-16l)\n        // >>>\
    \ closestInteger((\"-15.6\"))\n        //\n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpj3ff5b3_.java:75: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659805166
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // >>>\
    \ closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        double d = Double.parseDouble(value);\n \
    \       if (d > 0) {\n            return (long) Math.ceil(d);\n        } else\
    \ {\n            return (long) Math.floor(d);\n        }\n    }\n    public static\
    \ void main(String[] args) {\n    assert(closestInteger((\"10\")) == (10l));\n\
    \    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0jn3d571.java:43)\n"
  stdout: ''
  timestamp: 1659805166
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // >>>\
    \ closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from zero means that if the given number\
    \ is equidistant\n        // from two integers, the one you should return is the\
    \ one that is the\n        // farthest from zero. For example closest_integer(\"\
    14.5\") should\n        // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n        // >>> closestInteger((\"10\"))\n        // (10l)\n        //\
    \ >>> closestInteger((\"15.3\"))\n        // (15l)\n        // Note:\n       \
    \ // Rounding away from zero means that if the given number is equidistant\n \
    \       // from two integers, the one you should return is the one that is the\n\
    \        // farthest from zero. For example closest_integer(\"14.5\") should\n\
    \        // return 15 and closest_integer(\"-14.5\") should return -15.\n    \
    \    // >>> closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from\n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcn7kse5_.java:65: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659805164
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // >>>\
    \ closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from zero means that if the given number\
    \ is equidistant\n        // from two integers, the one you should return is the\
    \ one that is the\n        // farthest from zero. For example closest_integer(\"\
    14.5\") should\n        // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n        // >>> closestInteger((\"10\"))\n        // (10l)\n        //\
    \ >>> closestInteger((\"15.3\"))\n        // (15l)\n        // Note:\n       \
    \ // Rounding away from zero means that if the given number is equidistant\n \
    \       // from two integers, the one you should return is the one that is the\n\
    \        // farthest from zero. For example closest_integer(\"14.5\") should\n\
    \        // return 15 and closest_integer(\"-14.5\") should return -15.\n    \
    \    // >>> closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from\n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcn7kse5_.java:65: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659805164
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // >>>\
    \ closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from zero means that if the given number\
    \ is equidistant\n        // from two integers, the one you should return is the\
    \ one that is the\n        // farthest from zero. For example closest_integer(\"\
    14.5\") should\n        // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n        // >>> closestInteger((\"10\"))\n        // (10l)\n        //\
    \ >>> closestInteger((\"15.3\"))\n        // (15l)\n        // Note:\n       \
    \ // Rounding away from zero means that if the given number is equidistant\n \
    \       // from two integers, the one you should return is the one that is the\n\
    \        // farthest from zero. For example closest_integer(\"14.5\") should\n\
    \        // return 15 and closest_integer(\"-14.5\") should return -15.\n    \
    \    // >>> closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from\n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcn7kse5_.java:65: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659805164
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // >>>\
    \ closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // >>> closestInteger((\"14.5\"))\n      \
    \  // (15l)\n        // >>> closestInteger((\"-14.5\"))\n        // (-15l)\n \
    \       // >>> closestInteger((\"-14.6\"))\n        // (-15l)\n        // >>>\
    \ closestInteger((\"-14.4\"))\n        // (-14l)\n        // >>> closestInteger((\"\
    -14.0\"))\n        // (-14l)\n        // >>> closestInteger((\"-14.1\"))\n   \
    \     // (-14l)\n        // >>> closestInteger((\"-14.2\"))\n        // (-14l)\n\
    \        // >>> closestInteger((\"-14.3\"))\n        // (-14l)\n        // >>>\
    \ closestInteger((\"-14.4\"))\n        // (-14l)\n        // >>> closestInteger((\"\
    -14.5\"))\n        // (-15l)\n        // >>> closestInteger((\"-14.6\"))\n   \
    \     // (-15l)\n        // >>> closestInteger((\"-14.7\"))\n        // (-15l)\n\
    \        // >>> closestInteger((\"-14.8\"))\n        // (-15l)\n        // >>>\
    \ closestInteger((\"-14.9\"))\n        // (-15l)\n        // >>> closestInteger((\"\
    -15.0\"))\n        // (-15l)\n        // >>> closestInteger((\"-15.1\"))\n   \
    \     // (-15l)\n        // >>> closestInteger((\"-15.2\"))\n        // (-15l)\n\
    \        // >>> closestInteger((\"-15.3\"))\n        // (-15l)\n        // >>>\
    \ closestInteger((\"-15.4\"))\n        // (-15l)\n        // >>> closestInteger((\"\
    -15.5\"))\n        // (-16l)\n        // >>> closestInteger((\"-15.6\"))\n   \
    \     // (-16l)\n        // >>> closestInteger((\"-15.7\"))\n        // (-16l)\n\
    \        // >>> closestInteger((\"-15.8\"))\n        // (-16l)\n        // >>>\
    \ closestInteger((\"-15.9\"))\n        // (-\n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpolyfn0c4.java:75: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659805164
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // >>>\
    \ closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // >>> closestInteger((\"-15.3\"))\n     \
    \   // (-15l)\n        // >>> closestInteger((\"-15.5\"))\n        // (-16l)\n\
    \        // >>> closestInteger((\"-15.6\"))\n        // (-16l)\n        // >>>\
    \ closestInteger((\"-15.7\"))\n        // (-16l)\n        // >>> closestInteger((\"\
    -15.8\"))\n        // (-16l)\n        // >>> closestInteger((\"-15.9\"))\n   \
    \     // (-16l)\n        // >>> closestInteger((\"-15.0\"))\n        // (-15l)\n\
    \        // >>> closestInteger((\"-15.1\"))\n        // (-16l)\n        // >>>\
    \ closestInteger((\"-15.2\"))\n        // (-16l)\n        // >>> closestInteger((\"\
    -15.3\"))\n        // (-15l)\n        // >>> closestInteger((\"-15.4\"))\n   \
    \     // (-15l)\n        // >>> closestInteger((\"-15.5\"))\n        // (-16l)\n\
    \        // >>> closestInteger((\"-15.6\"))\n        // (-16l)\n        // >>>\
    \ closestInteger((\"-15.7\"))\n        // (-16l)\n        // >>> closestInteger((\"\
    -15.8\"))\n        // (-16l)\n        // >>> closestInteger((\"-15.9\"))\n   \
    \     // (-16l)\n        // >>> closestInteger((\"-15.0\"))\n        // (-15l)\n\
    \        // >>> closestInteger((\"-15.1\"))\n        // (-16l)\n        // >>>\
    \ closestInteger((\"-15.2\"))\n        // (-16l)\n        // >>> closestInteger((\"\
    -15.3\"))\n        // (-15l)\n        // >>> closestInteger((\"-15.4\"))\n   \
    \     // (-15l)\n        // >>> closestInteger((\"-15.5\"))\n        // (-16l)\n\
    \        // >>> closestInteger((\"-15.6\"))\n        // (-16l)\n        // >>>\
    \ closestInteger((\"-15.7\"))\n        //\n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpji5vr41o.java:75: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659805166
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        return\
    \ 0;\n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppm7dhyhm.java:26)\n"
  stdout: ''
  timestamp: 1659805164
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // >>>\
    \ closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from zero means that if the given number\
    \ is equidistant\n        // from two integers, the one you should return is the\
    \ one that is the\n        // farthest from zero. For example closest_integer(\"\
    14.5\") should\n        // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n        // >>> closestInteger((\"10\"))\n        // (10l)\n        //\
    \ >>> closestInteger((\"15.3\"))\n        // (15l)\n        // Note:\n       \
    \ // Rounding away from zero means that if the given number is equidistant\n \
    \       // from two integers, the one you should return is the one that is the\n\
    \        // farthest from zero. For example closest_integer(\"14.5\") should\n\
    \        // return 15 and closest_integer(\"-14.5\") should return -15.\n    \
    \    // >>> closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from\n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcn7kse5_.java:65: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659805164
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // >>>\
    \ closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // >>> closestInteger((\"-15.3\"))\n     \
    \   // (-15l)\n        // >>> closestInteger((\"-15.6\"))\n        // (-16l)\n\
    \        // >>> closestInteger((\"-15.5\"))\n        // (-16l)\n        // >>>\
    \ closestInteger((\"-15.4\"))\n        // (-15l)\n        // >>> closestInteger((\"\
    15.6\"))\n        // (16l)\n        // >>> closestInteger((\"15.5\"))\n      \
    \  // (16l)\n        // >>> closestInteger((\"15.4\"))\n        // (15l)\n   \
    \     // >>> closestInteger((\"0\"))\n        // (0l)\n        // >>> closestInteger((\"\
    -0\"))\n        // (0l)\n        // >>> closestInteger((\"-0.0\"))\n        //\
    \ (0l)\n        // >>> closestInteger((\"0.0\"))\n        // (0l)\n        //\
    \ >>> closestInteger((\"0.1\"))\n        // (0l)\n        // >>> closestInteger((\"\
    -0.1\"))\n        // (0l)\n        // >>> closestInteger((\"-0.5\"))\n       \
    \ // (-1l)\n        // >>> closestInteger((\"0.5\"))\n        // (1l)\n      \
    \  // >>> closestInteger((\"0.6\"))\n        // (1l)\n        // >>> closestInteger((\"\
    -0.6\"))\n        // (-1l)\n        // >>> closestInteger((\"0.4\"))\n       \
    \ // (0l)\n        // >>> closestInteger((\"-0.4\"))\n        // (0l)\n      \
    \  // >>> closestInteger((\"0.9\"))\n        // (1l)\n        // >>> closestInteger((\"\
    -0.9\"))\n        // (-1l)\n        // >>> closestInteger((\"0.99\"))\n      \
    \  // (1l)\n        // >>> closestInteger((\"-0.99\"))\n        // (-1l)\n   \
    \     // >>> closestInteger((\"0.01\"))\n        // (0l)\n        // >>> closestInteger((\"\
    -0.01\n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp85y5b4o3.java:76: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659805166
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // >>>\
    \ closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // >>> closestInteger((\"-15.3\"))\n     \
    \   // (-15l)\n        // >>> closestInteger((\"-15.6\"))\n        // (-16l)\n\
    \        // >>> closestInteger((\"-15.5\"))\n        // (-16l)\n        // >>>\
    \ closestInteger((\"-15.4\"))\n        // (-15l)\n        // >>> closestInteger((\"\
    -15.0\"))\n        // (-15l)\n        // >>> closestInteger((\"-14.9\"))\n   \
    \     // (-15l)\n        // >>> closestInteger((\"14.9\"))\n        // (15l)\n\
    \        // >>> closestInteger((\"15.0\"))\n        // (15l)\n        // >>> closestInteger((\"\
    15.4\"))\n        // (15l)\n        // >>> closestInteger((\"15.5\"))\n      \
    \  // (16l)\n        // >>> closestInteger((\"15.6\"))\n        // (16l)\n   \
    \     // >>> closestInteger((\"0.0\"))\n        // (0l)\n        // >>> closestInteger((\"\
    0.4\"))\n        // (0l)\n        // >>> closestInteger((\"0.5\"))\n        //\
    \ (1l)\n        // >>> closestInteger((\"0.6\"))\n        // (1l)\n        //\
    \ >>> closestInteger((\"-0.6\"))\n        // (-1l)\n        // >>> closestInteger((\"\
    -0.5\"))\n        // (-1l)\n        // >>> closestInteger((\"-0.4\"))\n      \
    \  // (0l)\n        // >>> closestInteger((\"-0.0\"))\n        // (0l)\n     \
    \   // >>> closestInteger((\"-0.1\"))\n        // (0l)\n        // >>> closestInteger((\"\
    -0.2\"))\n        // (0l)\n        // >>> closestInteger((\"-0.3\"))\n       \
    \ // (0l)\n        // >>> closestInteger((\"-0.4\"))\n        // (0l)\n      \
    \  // >>> closestInteger((\"-0.5\"))\n        // (-1l)\n        // >>> closest\n\
    \    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpr9wn1wq7.java:76: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659805166
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // >>>\
    \ closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        double d = Double.parseDouble(value);\n \
    \       long l = (long) d;\n        if (d > 0) {\n            if (d - l > 0.5)\
    \ {\n                return l + 1;\n            } else {\n                return\
    \ l;\n            }\n        } else {\n            if (d - l < -0.5) {\n     \
    \           return l - 1;\n            } else {\n                return l;\n \
    \           }\n        }\n    }\n    public static void main(String[] args) {\n\
    \    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_eha1olq.java:50)\n"
  stdout: ''
  timestamp: 1659805166
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // >>>\
    \ closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from zero means that if the given number\
    \ is equidistant\n        // from two integers, the one you should return is the\
    \ one that is the\n        // farthest from zero. For example closest_integer(\"\
    14.5\") should\n        // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n        // >>> closestInteger((\"10\"))\n        // (10l)\n        //\
    \ >>> closestInteger((\"15.3\"))\n        // (15l)\n        // Note:\n       \
    \ // Rounding away from zero means that if the given number is equidistant\n \
    \       // from two integers, the one you should return is the one that is the\n\
    \        // farthest from zero. For example closest_integer(\"14.5\") should\n\
    \        // return 15 and closest_integer(\"-14.5\") should return -15.\n    \
    \    // >>> closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from\n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcn7kse5_.java:65: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659805164
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // >>>\
    \ closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from zero means that if the given number\
    \ is equidistant\n        // from two integers, the one you should return is the\
    \ one that is the\n        // farthest from zero. For example closest_integer(\"\
    14.5\") should\n        // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n        // >>> closestInteger((\"10\"))\n        // (10l)\n        //\
    \ >>> closestInteger((\"15.3\"))\n        // (15l)\n        // Note:\n       \
    \ // Rounding away from zero means that if the given number is equidistant\n \
    \       // from two integers, the one you should return is the one that is the\n\
    \        // farthest from zero. For example closest_integer(\"14.5\") should\n\
    \        // return 15 and closest_integer(\"-14.5\") should return -15.\n    \
    \    // >>> closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from\n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcn7kse5_.java:65: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659805164
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // >>>\
    \ closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from zero means that if the given number\
    \ is equidistant\n        // from two integers, the one you should return is the\
    \ one that is the\n        // farthest from zero. For example closest_integer(\"\
    14.5\") should\n        // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n        // >>> closestInteger((\"10\"))\n        // (10l)\n        //\
    \ >>> closestInteger((\"15.3\"))\n        // (15l)\n        // Note:\n       \
    \ // Rounding away from zero means that if the given number is equidistant\n \
    \       // from two integers, the one you should return is the one that is the\n\
    \        // farthest from zero. For example closest_integer(\"14.5\") should\n\
    \        // return 15 and closest_integer(\"-14.5\") should return -15.\n    \
    \    // >>> closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from\n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcn7kse5_.java:65: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659805164
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        return\
    \ 0;\n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppm7dhyhm.java:26)\n"
  stdout: ''
  timestamp: 1659805164
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // >>>\
    \ closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // >>> closestInteger((\"14.5\"))\n      \
    \  // (15l)\n        // >>> closestInteger((\"-14.5\"))\n        // (-15l)\n \
    \       // >>> closestInteger((\"-14.4\"))\n        // (-14l)\n        // >>>\
    \ closestInteger((\"-14.6\"))\n        // (-15l)\n        // >>> closestInteger((\"\
    -14.6\"))\n        // (-15l)\n        // >>> closestInteger((\"-14.6\"))\n   \
    \     // (-15l)\n        // >>> closestInteger((\"-14.6\"))\n        // (-15l)\n\
    \        // >>> closestInteger((\"-14.6\"))\n        // (-15l)\n        // >>>\
    \ closestInteger((\"-14.6\"))\n        // (-15l)\n        // >>> closestInteger((\"\
    -14.6\"))\n        // (-15l)\n        // >>> closestInteger((\"-14.6\"))\n   \
    \     // (-15l)\n        // >>> closestInteger((\"-14.6\"))\n        // (-15l)\n\
    \        // >>> closestInteger((\"-14.6\"))\n        // (-15l)\n        // >>>\
    \ closestInteger((\"-14.6\"))\n        // (-15l)\n        // >>> closestInteger((\"\
    -14.6\"))\n        // (-15l)\n        // >>> closestInteger((\"-14.6\"))\n   \
    \     // (-15l)\n        // >>> closestInteger((\"-14.6\"))\n        // (-15l)\n\
    \        // >>> closestInteger((\"-14.6\"))\n        // (-15l)\n        // >>>\
    \ closestInteger((\"-14.6\"))\n        // (-15l)\n        // >>> closestInteger((\"\
    -14.6\"))\n        // (-15l)\n        // >>> closestInteger((\"-14.6\"))\n   \
    \     // (-15l)\n        // >>> closestInteger((\"-14.6\"))\n        // (-15l)\n\
    \        // >>> closestInteger((\"-14.6\"))\n        // (-15l)\n        // >>>\
    \ closestInteger((\"-14.6\"))\n        // (-\n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8k0orst_.java:75: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659805166
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // >>>\
    \ closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from zero means that if the given number\
    \ is equidistant\n        // from two integers, the one you should return is the\
    \ one that is the\n        // farthest from zero. For example closest_integer(\"\
    14.5\") should\n        // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n        // >>> closestInteger((\"10\"))\n        // (10l)\n        //\
    \ >>> closestInteger((\"15.3\"))\n        // (15l)\n        // Note:\n       \
    \ // Rounding away from zero means that if the given number is equidistant\n \
    \       // from two integers, the one you should return is the one that is the\n\
    \        // farthest from zero. For example closest_integer(\"14.5\") should\n\
    \        // return 15 and closest_integer(\"-14.5\") should return -15.\n    \
    \    // >>> closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from\n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcn7kse5_.java:65: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659805164
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // >>>\
    \ your code here <<<\n        return 0l;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpi5hz9c33.java:27)\n"
  stdout: ''
  timestamp: 1659805166
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // >>>\
    \ closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from zero means that if the given number\
    \ is equidistant\n        // from two integers, the one you should return is the\
    \ one that is the\n        // farthest from zero. For example closest_integer(\"\
    14.5\") should\n        // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n        // >>> closestInteger((\"10\"))\n        // (10l)\n        //\
    \ >>> closestInteger((\"15.3\"))\n        // (15l)\n        // Note:\n       \
    \ // Rounding away from zero means that if the given number is equidistant\n \
    \       // from two integers, the one you should return is the one that is the\n\
    \        // farthest from zero. For example closest_integer(\"14.5\") should\n\
    \        // return 15 and closest_integer(\"-14.5\") should return -15.\n    \
    \    // >>> closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from\n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcn7kse5_.java:65: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659805164
