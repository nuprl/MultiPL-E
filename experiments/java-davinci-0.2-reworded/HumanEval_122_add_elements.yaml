name: HumanEval_122_add_elements
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // Given a non-empty array array list of integers arr and an\
  \ integer k, return\n    // the sum of the elements with at most two digits from\
  \ the first k elements of arr.\n    // Example:\n    // >>> addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
  \ (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
  \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n   \
  \ // 2. 1 <= k <= len(arr)\n    public static long addElements(ArrayList<Long> arr,\
  \ long k) {\n"
tests: "    }\n    public static void main(String[] args) {\n    assert(addElements((new\
  \ ArrayList<Long>(Arrays.asList((long)1l, (long)-2l, (long)-3l, (long)41l, (long)57l,\
  \ (long)76l, (long)87l, (long)88l, (long)99l))), (3l)) == (-4l));\n    assert(addElements((new\
  \ ArrayList<Long>(Arrays.asList((long)111l, (long)121l, (long)3l, (long)4000l, (long)5l,\
  \ (long)6l))), (2l)) == (0l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)11l,\
  \ (long)21l, (long)3l, (long)90l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
  \ (4l)) == (125l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
  \ (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
  \ (4l)) == (24l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l))),\
  \ (1l)) == (1l));\n    }\n\n}\n"
completions: ['        return arr.stream().limit(k).filter(x -> x < 100).mapToLong(Long::longValue).sum();',
  "        long sum = 0;\n        for (int i = 0; i < k; i++) {\n            if (arr.get(i)\
    \ < 100) {\n                sum += arr.get(i);\n            }\n        }\n   \
    \     return sum;", "        long sum = 0;\n        for (int i = 0; i < k; i++)\
    \ {\n            long num = arr.get(i);\n            if (num < 100) {\n      \
    \          sum += num;\n            }\n        }\n        return sum;", '        return
    arr.stream().limit(k).filter(x -> x < 100).mapToLong(x -> x).sum();', '        return
    arr.stream().limit(k).filter(x -> x < 100).mapToLong(x -> x).sum();', "      \
    \  long sum = 0;\n        for (int i = 0; i < k; i++) {\n            long num\
    \ = arr.get(i);\n            if (num < 100) {\n                sum += num;\n \
    \           }\n        }\n        return sum;", '        return arr.stream().limit(k).filter(x
    -> x < 100).mapToLong(x -> x).sum();', '        return arr.stream().limit(k).filter(x
    -> x < 100).mapToLong(x -> x).sum();', "        long sum = 0;\n        for (int\
    \ i = 0; i < k; i++) {\n            if (arr.get(i) < 100) {\n                sum\
    \ += arr.get(i);\n            }\n        }\n        return sum;", "        long\
    \ sum = 0;\n        for (int i = 0; i < k; i++) {\n            long num = arr.get(i);\n\
    \            if (num < 100) {\n                sum += num;\n            }\n  \
    \      }\n        return sum;", "        long sum = 0;\n        for (int i = 0;\
    \ i < k; i++) {\n            if (arr.get(i) < 100) {\n                sum += arr.get(i);\n\
    \            }\n        }\n        return sum;", '        return arr.stream().filter(x
    -> x < 100).limit(k).mapToLong(x -> x).sum();', '        return arr.stream().limit(k).filter(x
    -> x < 100).mapToLong(x -> x).sum();', '        return arr.stream().filter(x ->
    x < 100).limit(k).mapToLong(x -> x).sum();', "        long sum = 0;\n        for\
    \ (int i = 0; i < k; i++) {\n            if (arr.get(i) < 100) {\n           \
    \     sum += arr.get(i);\n            }\n        }\n        return sum;", '        return
    arr.stream().limit(k).filter(x -> x < 100).mapToLong(x -> x).sum();', "      \
    \  long sum = 0;\n        for (int i = 0; i < k; i++) {\n            if (arr.get(i)\
    \ < 100) {\n                sum += arr.get(i);\n            }\n        }\n   \
    \     return sum;", "        long sum = 0;\n        for (int i = 0; i < k; i++)\
    \ {\n            if (arr.get(i) < 100) {\n                sum += arr.get(i);\n\
    \            }\n        }\n        return sum;", '        return arr.stream().filter(x
    -> x < 100).limit(k).mapToLong(x -> x).sum();', '        return arr.stream().filter(x
    -> x < 100).limit(k).mapToLong(x -> x).sum();']
stop_tokens:
- "\n    }\n"
