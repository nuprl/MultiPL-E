name: HumanEval_136_largest_smallest_integers
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // Create a function that returns a pair (a, b), where 'a'\
  \ is\n    // the largest of negative integers, and 'b' is the smallest\n    // of\
  \ positive integers in an array array list.\n    // If there is no negative or positive\
  \ integers, return them as null.\n    // Examples:\n    // >>> largestSmallestIntegers((new\
  \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)3l, (long)5l,\
  \ (long)7l))))\n    // Pair.with(Optional.of(Optional.empty()), Optional.of(1l))\n\
  \    // >>> largestSmallestIntegers((new ArrayList<Long>(Arrays.asList())))\n  \
  \  // Pair.with(Optional.of(Optional.empty()), Optional.of(Optional.empty()))\n\
  \    // >>> largestSmallestIntegers((new ArrayList<Long>(Arrays.asList((long)0l))))\n\
  \    // Pair.with(Optional.of(Optional.empty()), Optional.of(Optional.empty()))\n\
  \    public static Pair<Optional<Long>, Optional<Long>> largestSmallestIntegers(ArrayList<Long>\
  \ lst) {\n"
tests: "    }\n    public static void main(String[] args) {\n    assert(largestSmallestIntegers((new\
  \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)3l, (long)5l,\
  \ (long)7l)))).equals(Pair.with(Optional.of(Optional.empty()), Optional.of(1l))));\n\
  \    assert(largestSmallestIntegers((new ArrayList<Long>(Arrays.asList((long)2l,\
  \ (long)4l, (long)1l, (long)3l, (long)5l, (long)7l, (long)0l)))).equals(Pair.with(Optional.of(Optional.empty()),\
  \ Optional.of(1l))));\n    assert(largestSmallestIntegers((new ArrayList<Long>(Arrays.asList((long)1l,\
  \ (long)3l, (long)2l, (long)4l, (long)5l, (long)6l, (long)-2l)))).equals(Pair.with(-2l,\
  \ 1l)));\n    assert(largestSmallestIntegers((new ArrayList<Long>(Arrays.asList((long)4l,\
  \ (long)5l, (long)3l, (long)6l, (long)2l, (long)7l, (long)-7l)))).equals(Pair.with(-7l,\
  \ 2l)));\n    assert(largestSmallestIntegers((new ArrayList<Long>(Arrays.asList((long)7l,\
  \ (long)3l, (long)8l, (long)4l, (long)9l, (long)2l, (long)5l, (long)-9l)))).equals(Pair.with(-9l,\
  \ 2l)));\n    assert(largestSmallestIntegers((new ArrayList<Long>(Arrays.asList()))).equals(Pair.with(Optional.of(Optional.empty()),\
  \ Optional.of(Optional.empty()))));\n    assert(largestSmallestIntegers((new ArrayList<Long>(Arrays.asList((long)0l)))).equals(Pair.with(Optional.of(Optional.empty()),\
  \ Optional.of(Optional.empty()))));\n    assert(largestSmallestIntegers((new ArrayList<Long>(Arrays.asList((long)-1l,\
  \ (long)-3l, (long)-5l, (long)-6l)))).equals(Pair.with(Optional.of(-1l), Optional.of(Optional.empty()))));\n\
  \    assert(largestSmallestIntegers((new ArrayList<Long>(Arrays.asList((long)-1l,\
  \ (long)-3l, (long)-5l, (long)-6l, (long)0l)))).equals(Pair.with(Optional.of(-1l),\
  \ Optional.of(Optional.empty()))));\n    assert(largestSmallestIntegers((new ArrayList<Long>(Arrays.asList((long)-6l,\
  \ (long)-4l, (long)-4l, (long)-3l, (long)1l)))).equals(Pair.with(-3l, 1l)));\n \
  \   assert(largestSmallestIntegers((new ArrayList<Long>(Arrays.asList((long)-6l,\
  \ (long)-4l, (long)-4l, (long)-3l, (long)-100l, (long)1l)))).equals(Pair.with(-3l,\
  \ 1l)));\n    }\n\n}\n"
completions: ["        // Your code here\n        return null;", '        return null;',
  "        // Write your code here\n        return null;", "        // Write your\
    \ code here\n        // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        return null;",
  "        Optional<Long> largest = Optional.empty();\n        Optional<Long> smallest\
    \ = Optional.empty();\n        for (Long l : lst) {\n            if (l < 0) {\n\
    \                if (!largest.isPresent() || largest.get() < l) {\n          \
    \          largest = Optional.of(l);\n                }\n            } else if\
    \ (l > 0) {\n                if (!smallest.isPresent() || smallest.get() > l)\
    \ {\n                    smallest = Optional.of(l);\n                }\n     \
    \       }\n        }\n        return Pair.with(largest, smallest);", "       \
    \ // Write your code here\n        return null;", "        // Write your code\
    \ here\n        // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        return null;",
  "        // Write your code here\n        // To print results to the standard output\
    \ you can use System.out.println()\n        // Example: System.out.println(\"\
    Hello world!\");\n        if (lst.size() == 0) {\n            return Pair.with(Optional.of(Optional.empty()),\
    \ Optional.of(Optional.empty()));\n        }\n        Long maxNegative = null;\n\
    \        Long minPositive = null;\n        for (Long l : lst) {\n            if\
    \ (l < 0) {\n                if (maxNegative == null || l > maxNegative) {\n \
    \                   maxNegative = l;\n                }\n            } else if\
    \ (l > 0) {\n                if (minPositive == null || l < minPositive) {\n \
    \                   minPositive = l;\n                }\n            }\n     \
    \   }\n        return Pair.with(Optional.of(maxNegative), Optional.of(minPositive));",
  "        Optional<Long> largest = lst.stream().filter(x -> x < 0).max(Comparator.naturalOrder());\n\
    \        Optional<Long> smallest = lst.stream().filter(x -> x > 0).min(Comparator.naturalOrder());\n\
    \        return Pair.with(largest, smallest);", '        return Pair.with(Optional.of(lst.stream().filter(x
    -> x < 0).max(Comparator.naturalOrder())), Optional.of(lst.stream().filter(x ->
    x > 0).min(Comparator.naturalOrder())));', "        Optional<Long> largest = Optional.empty();\n\
    \        Optional<Long> smallest = Optional.empty();\n        for (Long l : lst)\
    \ {\n            if (l < 0) {\n                if (!largest.isPresent() || largest.get()\
    \ < l) {\n                    largest = Optional.of(l);\n                }\n \
    \           } else if (l > 0) {\n                if (!smallest.isPresent() ||\
    \ smallest.get() > l) {\n                    smallest = Optional.of(l);\n    \
    \            }\n            }\n        }\n        return Pair.with(largest, smallest);",
  "        Optional<Long> largest = Optional.empty();\n        Optional<Long> smallest\
    \ = Optional.empty();\n        for (Long l : lst) {\n            if (l < 0) {\n\
    \                if (!largest.isPresent() || largest.get() < l) {\n          \
    \          largest = Optional.of(l);\n                }\n            } else if\
    \ (l > 0) {\n                if (!smallest.isPresent() || smallest.get() > l)\
    \ {\n                    smallest = Optional.of(l);\n                }\n     \
    \       }\n        }\n        return Pair.with(largest, smallest);", "       \
    \ // Write your code here\n        // To print results to the standard output\
    \ you can use System.out.println()\n        // Example: System.out.println(\"\
    Hello world!\");\n        Long largestNegative = null;\n        Long smallestPositive\
    \ = null;\n        for (Long i : lst) {\n            if (i < 0) {\n          \
    \      if (largestNegative == null || largestNegative < i) {\n               \
    \     largestNegative = i;\n                }\n            } else if (i > 0) {\n\
    \                if (smallestPositive == null || smallestPositive > i) {\n   \
    \                 smallestPositive = i;\n                }\n            }\n  \
    \      }\n        return Pair.with(Optional.ofNullable(largestNegative), Optional.ofNullable(smallestPositive));",
  "        Optional<Long> largestNegative = Optional.empty();\n        Optional<Long>\
    \ smallestPositive = Optional.empty();\n        for (Long l : lst) {\n       \
    \     if (l < 0) {\n                if (!largestNegative.isPresent() || largestNegative.get()\
    \ < l) {\n                    largestNegative = Optional.of(l);\n            \
    \    }\n            } else if (l > 0) {\n                if (!smallestPositive.isPresent()\
    \ || smallestPositive.get() > l) {\n                    smallestPositive = Optional.of(l);\n\
    \                }\n            }\n        }\n        return Pair.with(largestNegative,\
    \ smallestPositive);", '        return null;', "        // Write your code here\n\
    \        // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        return null;",
  "        // Write your code here\n        // To print results to the standard output\
    \ you can use System.out.println()\n        // Example: System.out.println(\"\
    Hello world!\");\n        return null;", "        // Your code here.\n       \
    \ return null;", "        Optional<Long> largest = Optional.empty();\n       \
    \ Optional<Long> smallest = Optional.empty();\n        for (Long i : lst) {\n\
    \            if (i < 0) {\n                if (!largest.isPresent() || largest.get()\
    \ < i) {\n                    largest = Optional.of(i);\n                }\n \
    \           } else if (i > 0) {\n                if (!smallest.isPresent() ||\
    \ smallest.get() > i) {\n                    smallest = Optional.of(i);\n    \
    \            }\n            }\n        }\n        return Pair.with(largest, smallest);",
  "        Optional<Long> largestNegative = lst.stream().filter(x -> x < 0).max(Comparator.naturalOrder());\n\
    \        Optional<Long> smallestPositive = lst.stream().filter(x -> x > 0).min(Comparator.naturalOrder());\n\
    \        return Pair.with(largestNegative, smallestPositive);"]
stop_tokens:
- "\n    }\n"
