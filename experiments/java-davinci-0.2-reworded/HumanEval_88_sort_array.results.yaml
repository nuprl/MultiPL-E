language: java
name: HumanEval_88_sort_array
results:
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (array.size() == 0) {\n        \
    \    return result;\n        }\n        if (array.size() == 1) {\n           \
    \ result.add(array.get(0));\n            return result;\n        }\n        if\
    \ (array.size() == 2) {\n            if ((array.get(0) + array.get(1)) % 2 ==\
    \ 0) {\n                result.add(array.get(1));\n                result.add(array.get(0));\n\
    \                return result;\n            } else {\n                result.add(array.get(0));\n\
    \                result.add(array.get(1));\n                return result;\n \
    \           }\n        }\n        ArrayList<Long> odd = new ArrayList<Long>();\n\
    \        ArrayList<Long> even = new ArrayList<Long>();\n        for (int i = 0;\
    \ i < array.size(); i++) {\n            if (array.get(i) % 2 == 0) {\n       \
    \         even.add(array.get(i));\n            } else {\n                odd.add(array.get(i));\n\
    \            }\n        }\n        Collections.sort(odd);\n        Collections.sort(even);\n\
    \        if ((array.get(0) + array.get(array.size() - 1)) % 2 == 0) {\n      \
    \      Collections.reverse(even);\n        }\n        odd.addAll(even);\n    \
    \    return odd;\n    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpv6r8zwbx.java:63)\n"
  stdout: ''
  timestamp: 1659800393
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (array.size() == 0) {\n        \
    \    return result;\n        }\n        if (array.size() == 1) {\n           \
    \ result.add(array.get(0));\n            return result;\n        }\n        long\
    \ first = array.get(0);\n        long last = array.get(array.size() - 1);\n  \
    \      long sum = first + last;\n        if (sum % 2 == 0) {\n            Collections.sort(array,\
    \ Collections.reverseOrder());\n        } else {\n            Collections.sort(array);\n\
    \        }\n        return array;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800393
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        ArrayList<Long>\
    \ sorted = new ArrayList<Long>();\n        ArrayList<Long> odd = new ArrayList<Long>();\n\
    \        ArrayList<Long> even = new ArrayList<Long>();\n        for (Long i :\
    \ array) {\n            if (i % 2 == 0) {\n                even.add(i);\n    \
    \        } else {\n                odd.add(i);\n            }\n        }\n   \
    \     Collections.sort(odd);\n        Collections.sort(even);\n        Collections.reverse(even);\n\
    \        sorted.addAll(odd);\n        sorted.addAll(even);\n        return sorted;\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdnh_b1zk.java:44)\n"
  stdout: ''
  timestamp: 1659800393
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (array.size() == 0) {\n        \
    \    return result;\n        }\n        if (array.size() == 1) {\n           \
    \ result.add(array.get(0));\n            return result;\n        }\n        if\
    \ (array.size() == 2) {\n            if ((array.get(0) + array.get(1)) % 2 ==\
    \ 0) {\n                result.add(array.get(1));\n                result.add(array.get(0));\n\
    \                return result;\n            } else {\n                result.add(array.get(0));\n\
    \                result.add(array.get(1));\n                return result;\n \
    \           }\n        }\n        if ((array.get(0) + array.get(array.size() -\
    \ 1)) % 2 == 0) {\n            for (int i = 0; i < array.size(); i++) {\n    \
    \            result.add(array.get(array.size() - 1 - i));\n            }\n   \
    \         return result;\n        } else {\n            for (int i = 0; i < array.size();\
    \ i++) {\n                result.add(array.get(i));\n            }\n         \
    \   return result;\n        }\n    }\n    public static void main(String[] args)\
    \ {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmxps60qw.java:58)\n"
  stdout: ''
  timestamp: 1659800393
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        ArrayList<Long>\
    \ sortedArray = new ArrayList<Long>();\n        if (array.size() == 0) {\n   \
    \         return array;\n        }\n        if (array.size() == 1) {\n       \
    \     return array;\n        }\n        if (array.size() == 2) {\n           \
    \ if (array.get(0) > array.get(1)) {\n                sortedArray.add(array.get(1));\n\
    \                sortedArray.add(array.get(0));\n                return sortedArray;\n\
    \            }\n            return array;\n        }\n        if ((array.get(0)\
    \ + array.get(array.size() - 1)) % 2 == 0) {\n            Collections.sort(array,\
    \ Collections.reverseOrder());\n            return array;\n        }\n       \
    \ Collections.sort(array);\n        return array;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800393
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        if (array.size()\
    \ == 0) {\n            return array;\n        }\n        if (array.size() == 1)\
    \ {\n            return array;\n        }\n        if (array.size() == 2) {\n\
    \            if (array.get(0) > array.get(1)) {\n                Long temp = array.get(0);\n\
    \                array.set(0, array.get(1));\n                array.set(1, temp);\n\
    \            }\n            return array;\n        }\n        if (array.size()\
    \ == 3) {\n            if (array.get(0) > array.get(1)) {\n                Long\
    \ temp = array.get(0);\n                array.set(0, array.get(1));\n        \
    \        array.set(1, temp);\n            }\n            if (array.get(1) > array.get(2))\
    \ {\n                Long temp = array.get(1);\n                array.set(1, array.get(2));\n\
    \                array.set(2, temp);\n            }\n            if (array.get(0)\
    \ > array.get(1)) {\n                Long temp = array.get(0);\n             \
    \   array.set(0, array.get(1));\n                array.set(1, temp);\n       \
    \     }\n            return array;\n        }\n        if (array.size() == 4)\
    \ {\n            if (array.get(0) > array.get(1)) {\n                Long temp\
    \ = array.get(0);\n                array.set(0, array.get(1));\n             \
    \   array.set(1, temp);\n            }\n            if (array.get(2) > array.get(3))\
    \ {\n                Long temp = array.get(2);\n                array.set(2, array.get(3));\n\
    \                array.set(3, temp);\n            }\n            if (array.get(0)\
    \ > array.get(2)) {\n                Long temp = array.get(0);\n             \
    \   array.set(0, array.get(2));\n                array.set(2, temp);\n       \
    \     }\n            if (array.get(1) > array.get(3)) {\n                Long\
    \ temp = array.get(1\n    }\n    public static void main(String[] args) {\n  \
    \  assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmlk9yogi.java:73: error: ')' expected\n                Long temp\
    \ = array.get(1\n                                       ^\n/tmp/tmpmlk9yogi.java:75:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n    ^\n2 errors\n"
  stdout: ''
  timestamp: 1659800392
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (array.size() == 0) {\n        \
    \    return result;\n        }\n        if (array.size() == 1) {\n           \
    \ result.add(array.get(0));\n            return result;\n        }\n        if\
    \ (array.size() == 2) {\n            result.add(array.get(0));\n            result.add(array.get(1));\n\
    \            return result;\n        }\n        if (array.size() == 3) {\n   \
    \         result.add(array.get(0));\n            result.add(array.get(1));\n \
    \           result.add(array.get(2));\n            return result;\n        }\n\
    \        if (array.size() == 4) {\n            result.add(array.get(0));\n   \
    \         result.add(array.get(1));\n            result.add(array.get(2));\n \
    \           result.add(array.get(3));\n            return result;\n        }\n\
    \        if (array.size() == 5) {\n            result.add(array.get(0));\n   \
    \         result.add(array.get(1));\n            result.add(array.get(2));\n \
    \           result.add(array.get(3));\n            result.add(array.get(4));\n\
    \            return result;\n        }\n        if (array.size() == 6) {\n   \
    \         result.add(array.get(0));\n            result.add(array.get(1));\n \
    \           result.add(array.get(2));\n            result.add(array.get(3));\n\
    \            result.add(array.get(4));\n            result.add(array.get(5));\n\
    \            return result;\n        }\n        if (array.size() == 7) {\n   \
    \         result.add(array.get(0));\n            result.add(array.get(1));\n \
    \           result.add(array.get(2));\n            result.add(array.get(3));\n\
    \            result.add(array.get(4));\n            result.add(array.get(5));\n\
    \            result.add(array.get(6));\n            return result;\n        }\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpz0qi46gh.java:77: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659800393
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (array.size() == 0) {\n        \
    \    return result;\n        }\n        if (array.size() == 1) {\n           \
    \ result.add(array.get(0));\n            return result;\n        }\n        if\
    \ (array.size() == 2) {\n            if ((array.get(0) + array.get(1)) % 2 ==\
    \ 0) {\n                result.add(array.get(1));\n                result.add(array.get(0));\n\
    \                return result;\n            } else {\n                result.add(array.get(0));\n\
    \                result.add(array.get(1));\n                return result;\n \
    \           }\n        }\n        if ((array.get(0) + array.get(array.size() -\
    \ 1)) % 2 == 0) {\n            for (int i = 0; i < array.size(); i++) {\n    \
    \            if (i % 2 == 0) {\n                    result.add(array.get(array.size()\
    \ - 1 - i / 2));\n                } else {\n                    result.add(array.get(i\
    \ / 2));\n                }\n            }\n        } else {\n            for\
    \ (int i = 0; i < array.size(); i++) {\n                if (i % 2 == 0) {\n  \
    \                  result.add(array.get(i / 2));\n                } else {\n \
    \                   result.add(array.get(array.size() - 1 - i / 2));\n       \
    \         }\n            }\n        }\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp84qj5ilh.java:65)\n"
  stdout: ''
  timestamp: 1659800393
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        ArrayList<Long>\
    \ sorted = new ArrayList<Long>();\n        ArrayList<Long> odd = new ArrayList<Long>();\n\
    \        ArrayList<Long> even = new ArrayList<Long>();\n        for (Long i :\
    \ array) {\n            if (i % 2 == 0) {\n                even.add(i);\n    \
    \        } else {\n                odd.add(i);\n            }\n        }\n   \
    \     Collections.sort(odd);\n        Collections.sort(even);\n        Collections.reverse(even);\n\
    \        sorted.addAll(odd);\n        sorted.addAll(even);\n        return sorted;\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdnh_b1zk.java:44)\n"
  stdout: ''
  timestamp: 1659800393
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (array.size() == 0) {\n        \
    \    return result;\n        }\n        if (array.size() == 1) {\n           \
    \ result.add(array.get(0));\n            return result;\n        }\n        if\
    \ (array.size() == 2) {\n            if ((array.get(0) + array.get(1)) % 2 ==\
    \ 0) {\n                result.add(array.get(1));\n                result.add(array.get(0));\n\
    \                return result;\n            } else {\n                result.add(array.get(0));\n\
    \                result.add(array.get(1));\n                return result;\n \
    \           }\n        }\n        if ((array.get(0) + array.get(array.size() -\
    \ 1)) % 2 == 0) {\n            for (int i = 0; i < array.size(); i++) {\n    \
    \            if (i % 2 == 0) {\n                    result.add(array.get(array.size()\
    \ - 1 - i / 2));\n                } else {\n                    result.add(array.get(i\
    \ / 2));\n                }\n            }\n        } else {\n            for\
    \ (int i = 0; i < array.size(); i++) {\n                if (i % 2 == 0) {\n  \
    \                  result.add(array.get(i / 2));\n                } else {\n \
    \                   result.add(array.get(array.size() - 1 - i / 2));\n       \
    \         }\n            }\n        }\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp84qj5ilh.java:65)\n"
  stdout: ''
  timestamp: 1659800393
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        ArrayList<Long> odd = new ArrayList<Long>();\n\
    \        ArrayList<Long> even = new ArrayList<Long>();\n        for (Long i :\
    \ array) {\n            if (i % 2 == 0) {\n                even.add(i);\n    \
    \        } else {\n                odd.add(i);\n            }\n        }\n   \
    \     Collections.sort(odd);\n        Collections.sort(even);\n        Collections.reverse(even);\n\
    \        for (Long i : odd) {\n            result.add(i);\n        }\n       \
    \ for (Long i : even) {\n            result.add(i);\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpesctrgez.java:48)\n"
  stdout: ''
  timestamp: 1659800393
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        long sum = array.get(0)\
    \ + array.get(array.size() - 1);\n        if (sum % 2 == 0) {\n            Collections.sort(array,\
    \ Collections.reverseOrder());\n        } else {\n            Collections.sort(array);\n\
    \        }\n        return array;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmp1v0qizxi.java:24)\n\tat Problem.main(tmp1v0qizxi.java:33)\n"
  stdout: ''
  timestamp: 1659800393
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        return array;\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmqnnwgz6.java:29)\n"
  stdout: ''
  timestamp: 1659800393
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        ArrayList<Long>\
    \ sorted = new ArrayList<Long>();\n        ArrayList<Long> odd = new ArrayList<Long>();\n\
    \        ArrayList<Long> even = new ArrayList<Long>();\n        for (int i = 0;\
    \ i < array.size(); i++) {\n            if (array.get(i) % 2 == 0) {\n       \
    \         even.add(array.get(i));\n            } else {\n                odd.add(array.get(i));\n\
    \            }\n        }\n        Collections.sort(odd);\n        Collections.sort(even);\n\
    \        Collections.reverse(even);\n        for (int i = 0; i < odd.size(); i++)\
    \ {\n            sorted.add(odd.get(i));\n        }\n        for (int i = 0; i\
    \ < even.size(); i++) {\n            sorted.add(even.get(i));\n        }\n   \
    \     return sorted;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmb_1urpx.java:48)\n"
  stdout: ''
  timestamp: 1659800393
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        ArrayList<Long> odd = new ArrayList<Long>();\n\
    \        ArrayList<Long> even = new ArrayList<Long>();\n        for (Long i :\
    \ array) {\n            if (i % 2 == 0) {\n                even.add(i);\n    \
    \        } else {\n                odd.add(i);\n            }\n        }\n   \
    \     Collections.sort(odd);\n        Collections.sort(even);\n        Collections.reverse(even);\n\
    \        result.addAll(odd);\n        result.addAll(even);\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpr6zufhhz.java:44)\n"
  stdout: ''
  timestamp: 1659800393
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (array.size() == 0) {\n        \
    \    return result;\n        }\n        if (array.size() == 1) {\n           \
    \ result.add(array.get(0));\n            return result;\n        }\n        if\
    \ (array.size() == 2) {\n            if ((array.get(0) + array.get(1)) % 2 ==\
    \ 0) {\n                result.add(array.get(1));\n                result.add(array.get(0));\n\
    \                return result;\n            } else {\n                result.add(array.get(0));\n\
    \                result.add(array.get(1));\n                return result;\n \
    \           }\n        }\n        if ((array.get(0) + array.get(array.size() -\
    \ 1)) % 2 == 0) {\n            for (int i = array.size() - 1; i >= 0; i--) {\n\
    \                result.add(array.get(i));\n            }\n            return\
    \ result;\n        } else {\n            for (int i = 0; i < array.size(); i++)\
    \ {\n                result.add(array.get(i));\n            }\n            return\
    \ result;\n        }\n    }\n    public static void main(String[] args) {\n  \
    \  assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcmzs9pq3.java:58)\n"
  stdout: ''
  timestamp: 1659800393
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        return array;\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmqnnwgz6.java:29)\n"
  stdout: ''
  timestamp: 1659800393
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        if (array.size()\
    \ == 0) {\n            return array;\n        }\n        if (array.size() == 1)\
    \ {\n            return array;\n        }\n        if (array.size() == 2) {\n\
    \            if (array.get(0) > array.get(1)) {\n                Long temp = array.get(0);\n\
    \                array.set(0, array.get(1));\n                array.set(1, temp);\n\
    \            }\n            return array;\n        }\n        if (array.size()\
    \ == 3) {\n            if (array.get(0) > array.get(1)) {\n                Long\
    \ temp = array.get(0);\n                array.set(0, array.get(1));\n        \
    \        array.set(1, temp);\n            }\n            if (array.get(1) > array.get(2))\
    \ {\n                Long temp = array.get(1);\n                array.set(1, array.get(2));\n\
    \                array.set(2, temp);\n            }\n            if (array.get(0)\
    \ > array.get(1)) {\n                Long temp = array.get(0);\n             \
    \   array.set(0, array.get(1));\n                array.set(1, temp);\n       \
    \     }\n            return array;\n        }\n        if (array.size() == 4)\
    \ {\n            if (array.get(0) > array.get(1)) {\n                Long temp\
    \ = array.get(0);\n                array.set(0, array.get(1));\n             \
    \   array.set(1, temp);\n            }\n            if (array.get(2) > array.get(3))\
    \ {\n                Long temp = array.get(2);\n                array.set(2, array.get(3));\n\
    \                array.set(3, temp);\n            }\n            if (array.get(0)\
    \ > array.get(2)) {\n                Long temp = array.get(0);\n             \
    \   array.set(0, array.get(2));\n                array.set(2, temp);\n       \
    \     }\n            if (array.get(1) > array.get(3)) {\n                Long\
    \ temp = array.get(1\n    }\n    public static void main(String[] args) {\n  \
    \  assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmlk9yogi.java:73: error: ')' expected\n                Long temp\
    \ = array.get(1\n                                       ^\n/tmp/tmpmlk9yogi.java:75:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n    ^\n2 errors\n"
  stdout: ''
  timestamp: 1659800392
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        ArrayList<Long>\
    \ sorted = new ArrayList<Long>();\n        return sorted;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpy5cmy_r5.java:29)\n"
  stdout: ''
  timestamp: 1659800393
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        for (int i = 0; i < array.size(); i++)\
    \ {\n            result.add(array.get(i));\n        }\n        if (result.size()\
    \ > 0) {\n            if ((result.get(0) + result.get(result.size() - 1)) % 2\
    \ == 0) {\n                Collections.sort(result, Collections.reverseOrder());\n\
    \            } else {\n                Collections.sort(result);\n           \
    \ }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800393
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        return array;\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmqnnwgz6.java:29)\n"
  stdout: ''
  timestamp: 1659800393
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        ArrayList<Long>\
    \ sorted = new ArrayList<Long>();\n        ArrayList<Long> odd = new ArrayList<Long>();\n\
    \        ArrayList<Long> even = new ArrayList<Long>();\n        for (Long i :\
    \ array) {\n            if (i % 2 == 0) {\n                even.add(i);\n    \
    \        } else {\n                odd.add(i);\n            }\n        }\n   \
    \     Collections.sort(odd);\n        Collections.sort(even);\n        Collections.reverse(even);\n\
    \        sorted.addAll(odd);\n        sorted.addAll(even);\n        return sorted;\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdnh_b1zk.java:44)\n"
  stdout: ''
  timestamp: 1659800393
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        // Write your code\
    \ here\n        // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        return array;\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8rd1kz2p.java:32)\n"
  stdout: ''
  timestamp: 1659800393
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        ArrayList<Long> odd = new ArrayList<Long>();\n\
    \        ArrayList<Long> even = new ArrayList<Long>();\n        for (Long i :\
    \ array) {\n            if (i % 2 == 0) {\n                even.add(i);\n    \
    \        } else {\n                odd.add(i);\n            }\n        }\n   \
    \     Collections.sort(odd);\n        Collections.sort(even);\n        Collections.reverse(even);\n\
    \        result.addAll(odd);\n        result.addAll(even);\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpr6zufhhz.java:44)\n"
  stdout: ''
  timestamp: 1659800393
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (array.size() == 0) {\n        \
    \    return result;\n        }\n        if (array.size() == 1) {\n           \
    \ result.add(array.get(0));\n            return result;\n        }\n        if\
    \ (array.size() == 2) {\n            if ((array.get(0) + array.get(1)) % 2 ==\
    \ 0) {\n                result.add(array.get(1));\n                result.add(array.get(0));\n\
    \                return result;\n            } else {\n                result.add(array.get(0));\n\
    \                result.add(array.get(1));\n                return result;\n \
    \           }\n        }\n        ArrayList<Long> odd = new ArrayList<Long>();\n\
    \        ArrayList<Long> even = new ArrayList<Long>();\n        for (Long i :\
    \ array) {\n            if (i % 2 == 0) {\n                even.add(i);\n    \
    \        } else {\n                odd.add(i);\n            }\n        }\n   \
    \     Collections.sort(odd);\n        Collections.sort(even);\n        Collections.reverse(even);\n\
    \        result.addAll(odd);\n        result.addAll(even);\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2gh4zpwr.java:62)\n"
  stdout: ''
  timestamp: 1659800393
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        ArrayList<Long>\
    \ sortedArray = new ArrayList<Long>();\n        if (array.size() == 0) {\n   \
    \         return sortedArray;\n        }\n        if (array.size() == 1) {\n \
    \           sortedArray.add(array.get(0));\n            return sortedArray;\n\
    \        }\n        if (array.size() == 2) {\n            if ((array.get(0) +\
    \ array.get(1)) % 2 == 0) {\n                sortedArray.add(array.get(1));\n\
    \                sortedArray.add(array.get(0));\n                return sortedArray;\n\
    \            } else {\n                sortedArray.add(array.get(0));\n      \
    \          sortedArray.add(array.get(1));\n                return sortedArray;\n\
    \            }\n        }\n        ArrayList<Long> oddArray = new ArrayList<Long>();\n\
    \        ArrayList<Long> evenArray = new ArrayList<Long>();\n        for (int\
    \ i = 0; i < array.size(); i++) {\n            if (array.get(i) % 2 == 0) {\n\
    \                evenArray.add(array.get(i));\n            } else {\n        \
    \        oddArray.add(array.get(i));\n            }\n        }\n        Collections.sort(oddArray);\n\
    \        Collections.sort(evenArray);\n        if ((array.get(0) + array.get(array.size()\
    \ - 1)) % 2 == 0) {\n            Collections.reverse(evenArray);\n        }\n\
    \        for (int i = 0; i < oddArray.size(); i++) {\n            sortedArray.add(oddArray.get(i));\n\
    \        }\n        for (int i = 0; i < evenArray.size(); i++) {\n           \
    \ sortedArray.add(evenArray.get(i));\n        }\n        return sortedArray;\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfl1g2d9e.java:68)\n"
  stdout: ''
  timestamp: 1659800393
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        return array;\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmqnnwgz6.java:29)\n"
  stdout: ''
  timestamp: 1659800393
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        return array;\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmqnnwgz6.java:29)\n"
  stdout: ''
  timestamp: 1659800393
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        ArrayList<Long>\
    \ sorted = new ArrayList<Long>();\n        if (array.size() == 0) {\n        \
    \    return sorted;\n        }\n        if (array.size() == 1) {\n           \
    \ sorted.add(array.get(0));\n            return sorted;\n        }\n        if\
    \ (array.size() == 2) {\n            if (array.get(0) < array.get(1)) {\n    \
    \            sorted.add(array.get(0));\n                sorted.add(array.get(1));\n\
    \            } else {\n                sorted.add(array.get(1));\n           \
    \     sorted.add(array.get(0));\n            }\n            return sorted;\n \
    \       }\n        if (array.size() == 3) {\n            if (array.get(0) < array.get(1))\
    \ {\n                if (array.get(1) < array.get(2)) {\n                    sorted.add(array.get(0));\n\
    \                    sorted.add(array.get(1));\n                    sorted.add(array.get(2));\n\
    \                } else {\n                    if (array.get(0) < array.get(2))\
    \ {\n                        sorted.add(array.get(0));\n                     \
    \   sorted.add(array.get(2));\n                        sorted.add(array.get(1));\n\
    \                    } else {\n                        sorted.add(array.get(2));\n\
    \                        sorted.add(array.get(0));\n                        sorted.add(array.get(1));\n\
    \                    }\n                }\n            } else {\n            \
    \    if (array.get(0) < array.get(2)) {\n                    sorted.add(array.get(1));\n\
    \                    sorted.add(array.get(0));\n                    sorted.add(array.get(2));\n\
    \                } else {\n                    if (array.get(1) < array.get(2))\
    \ {\n                        sorted.add(array.get(1));\n                     \
    \   sorted.add(array.get(2));\n                        sorted.add(array.get(0));\n\
    \                    } else {\n                        sorted.add(array.get(2));\n\
    \                        sorted.add(array.get(1));\n                        sorted.add(array.get(0));\n\
    \n    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpoc_a6h8r.java:75: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n1 error\n"
  stdout: ''
  timestamp: 1659800392
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        ArrayList<Long>\
    \ sorted = new ArrayList<Long>();\n        for (Long i : array) {\n          \
    \  sorted.add(i);\n        }\n        Collections.sort(sorted);\n        if ((array.get(0)\
    \ + array.get(array.size() - 1)) % 2 == 0) {\n            Collections.reverse(sorted);\n\
    \        }\n        return sorted;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmp07rkl6u2.java:29)\n\tat Problem.main(tmp07rkl6u2.java:35)\n"
  stdout: ''
  timestamp: 1659800393
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        return null;\n \
    \   }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.sortArray(java.util.ArrayList)\"\
    \ is null\n\tat Problem.main(tmpmx0ttyzx.java:27)\n"
  stdout: ''
  timestamp: 1659800393
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        return null;\n \
    \   }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.sortArray(java.util.ArrayList)\"\
    \ is null\n\tat Problem.main(tmpmx0ttyzx.java:27)\n"
  stdout: ''
  timestamp: 1659800393
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        ArrayList<Long>\
    \ sorted = new ArrayList<Long>();\n        if (array.size() == 0) {\n        \
    \    return sorted;\n        }\n        if (array.size() == 1) {\n           \
    \ sorted.add(array.get(0));\n            return sorted;\n        }\n        if\
    \ (array.size() == 2) {\n            if (array.get(0) > array.get(1)) {\n    \
    \            sorted.add(array.get(1));\n                sorted.add(array.get(0));\n\
    \            } else {\n                sorted.add(array.get(0));\n           \
    \     sorted.add(array.get(1));\n            }\n            return sorted;\n \
    \       }\n        if ((array.get(0) + array.get(array.size() - 1)) % 2 == 0)\
    \ {\n            sorted = sortArray(array.subList(1, array.size() - 1));\n   \
    \         sorted.add(0, array.get(array.size() - 1));\n            sorted.add(array.get(0));\n\
    \        } else {\n            sorted = sortArray(array.subList(1, array.size()\
    \ - 1));\n            sorted.add(0, array.get(0));\n            sorted.add(array.get(array.size()\
    \ - 1));\n        }\n        return sorted;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptriz4kr0.java:43: error: incompatible types: List<Long> cannot\
    \ be converted to ArrayList<Long>\n            sorted = sortArray(array.subList(1,\
    \ array.size() - 1));\n                                            ^\n/tmp/tmptriz4kr0.java:47:\
    \ error: incompatible types: List<Long> cannot be converted to ArrayList<Long>\n\
    \            sorted = sortArray(array.subList(1, array.size() - 1));\n       \
    \                                     ^\nNote: Some messages have been simplified;\
    \ recompile with -Xdiags:verbose to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1659800393
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (array.size() == 0) {\n        \
    \    return result;\n        }\n        if (array.size() == 1) {\n           \
    \ result.add(array.get(0));\n            return result;\n        }\n        if\
    \ (array.size() % 2 == 0) {\n            for (int i = 0; i < array.size(); i++)\
    \ {\n                if (i % 2 == 0) {\n                    result.add(array.get(i));\n\
    \                } else {\n                    result.add(0, array.get(i));\n\
    \                }\n            }\n        } else {\n            for (int i =\
    \ 0; i < array.size(); i++) {\n                if (i % 2 == 0) {\n           \
    \         result.add(0, array.get(i));\n                } else {\n           \
    \         result.add(array.get(i));\n                }\n            }\n      \
    \  }\n        return result;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzg6nv9ur.java:54)\n"
  stdout: ''
  timestamp: 1659800394
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (array.size() == 0) {\n        \
    \    return result;\n        }\n        if (array.size() == 1) {\n           \
    \ result.add(array.get(0));\n            return result;\n        }\n        if\
    \ (array.size() == 2) {\n            if ((array.get(0) + array.get(1)) % 2 ==\
    \ 0) {\n                result.add(array.get(1));\n                result.add(array.get(0));\n\
    \                return result;\n            } else {\n                result.add(array.get(0));\n\
    \                result.add(array.get(1));\n                return result;\n \
    \           }\n        }\n        ArrayList<Long> odd = new ArrayList<Long>();\n\
    \        ArrayList<Long> even = new ArrayList<Long>();\n        for (int i = 0;\
    \ i < array.size(); i++) {\n            if (array.get(i) % 2 == 0) {\n       \
    \         even.add(array.get(i));\n            } else {\n                odd.add(array.get(i));\n\
    \            }\n        }\n        Collections.sort(odd);\n        Collections.sort(even);\n\
    \        if ((array.get(0) + array.get(array.size() - 1)) % 2 == 0) {\n      \
    \      Collections.reverse(even);\n        }\n        odd.addAll(even);\n    \
    \    return odd;\n    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpv6r8zwbx.java:63)\n"
  stdout: ''
  timestamp: 1659800393
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        ArrayList<Long>\
    \ sortedArray = new ArrayList<Long>();\n        if (array.size() == 0) {\n   \
    \         return sortedArray;\n        }\n        if (array.size() == 1) {\n \
    \           sortedArray.add(array.get(0));\n            return sortedArray;\n\
    \        }\n        if (array.size() == 2) {\n            if ((array.get(0) +\
    \ array.get(1)) % 2 == 0) {\n                sortedArray.add(array.get(1));\n\
    \                sortedArray.add(array.get(0));\n                return sortedArray;\n\
    \            } else {\n                sortedArray.add(array.get(0));\n      \
    \          sortedArray.add(array.get(1));\n                return sortedArray;\n\
    \            }\n        }\n        ArrayList<Long> oddArray = new ArrayList<Long>();\n\
    \        ArrayList<Long> evenArray = new ArrayList<Long>();\n        for (Long\
    \ i : array) {\n            if (i % 2 == 0) {\n                evenArray.add(i);\n\
    \            } else {\n                oddArray.add(i);\n            }\n     \
    \   }\n        Collections.sort(oddArray);\n        Collections.sort(evenArray);\n\
    \        Collections.reverse(evenArray);\n        sortedArray.addAll(oddArray);\n\
    \        sortedArray.addAll(evenArray);\n        return sortedArray;\n    }\n\
    \    public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzhf_17ni.java:62)\n"
  stdout: ''
  timestamp: 1659800394
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (array.size() == 0) {\n        \
    \    return result;\n        }\n        if (array.size() == 1) {\n           \
    \ result.add(array.get(0));\n            return result;\n        }\n        if\
    \ (array.size() == 2) {\n            if ((array.get(0) + array.get(1)) % 2 ==\
    \ 0) {\n                result.add(array.get(1));\n                result.add(array.get(0));\n\
    \                return result;\n            } else {\n                result.add(array.get(0));\n\
    \                result.add(array.get(1));\n                return result;\n \
    \           }\n        }\n        if ((array.get(0) + array.get(array.size() -\
    \ 1)) % 2 == 0) {\n            for (int i = 0; i < array.size(); i++) {\n    \
    \            if (i % 2 == 0) {\n                    result.add(array.get(array.size()\
    \ - 1 - i / 2));\n                } else {\n                    result.add(array.get(i\
    \ / 2));\n                }\n            }\n        } else {\n            for\
    \ (int i = 0; i < array.size(); i++) {\n                if (i % 2 == 0) {\n  \
    \                  result.add(array.get(i / 2));\n                } else {\n \
    \                   result.add(array.get(array.size() - 1 - i / 2));\n       \
    \         }\n            }\n        }\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp84qj5ilh.java:65)\n"
  stdout: ''
  timestamp: 1659800393
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        return null;\n \
    \   }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.sortArray(java.util.ArrayList)\"\
    \ is null\n\tat Problem.main(tmpmx0ttyzx.java:27)\n"
  stdout: ''
  timestamp: 1659800393
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (array.size() == 0) {\n        \
    \    return result;\n        }\n        if (array.size() == 1) {\n           \
    \ result.add(array.get(0));\n            return result;\n        }\n        if\
    \ (array.size() == 2) {\n            if ((array.get(0) + array.get(1)) % 2 ==\
    \ 0) {\n                result.add(array.get(1));\n                result.add(array.get(0));\n\
    \                return result;\n            } else {\n                result.add(array.get(0));\n\
    \                result.add(array.get(1));\n                return result;\n \
    \           }\n        }\n        if ((array.get(0) + array.get(array.size() -\
    \ 1)) % 2 == 0) {\n            for (int i = 0; i < array.size(); i++) {\n    \
    \            if (i % 2 == 0) {\n                    result.add(array.get(array.size()\
    \ - 1 - i / 2));\n                } else {\n                    result.add(array.get(i\
    \ / 2));\n                }\n            }\n        } else {\n            for\
    \ (int i = 0; i < array.size(); i++) {\n                if (i % 2 == 0) {\n  \
    \                  result.add(array.get(i / 2));\n                } else {\n \
    \                   result.add(array.get(array.size() - 1 - i / 2));\n       \
    \         }\n            }\n        }\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp84qj5ilh.java:65)\n"
  stdout: ''
  timestamp: 1659800393
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        ArrayList<Long> odd = new ArrayList<Long>();\n\
    \        ArrayList<Long> even = new ArrayList<Long>();\n        for (int i = 0;\
    \ i < array.size(); i++) {\n            if (array.get(i) % 2 == 0) {\n       \
    \         even.add(array.get(i));\n            } else {\n                odd.add(array.get(i));\n\
    \            }\n        }\n        Collections.sort(odd);\n        Collections.sort(even);\n\
    \        Collections.reverse(even);\n        for (int i = 0; i < odd.size(); i++)\
    \ {\n            result.add(odd.get(i));\n        }\n        for (int i = 0; i\
    \ < even.size(); i++) {\n            result.add(even.get(i));\n        }\n   \
    \     return result;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpunzvxtoh.java:48)\n"
  stdout: ''
  timestamp: 1659800394
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        ArrayList<Long> odd = new ArrayList<Long>();\n\
    \        ArrayList<Long> even = new ArrayList<Long>();\n        for (Long i :\
    \ array) {\n            if (i % 2 == 0) {\n                even.add(i);\n    \
    \        } else {\n                odd.add(i);\n            }\n        }\n   \
    \     Collections.sort(odd);\n        Collections.sort(even);\n        Collections.reverse(even);\n\
    \        result.addAll(odd);\n        result.addAll(even);\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpr6zufhhz.java:44)\n"
  stdout: ''
  timestamp: 1659800393
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        return array;\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmqnnwgz6.java:29)\n"
  stdout: ''
  timestamp: 1659800393
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        if (array.size()\
    \ == 0) {\n            return array;\n        }\n        if (array.size() == 1)\
    \ {\n            return array;\n        }\n        if (array.size() == 2) {\n\
    \            if (array.get(0) > array.get(1)) {\n                long temp = array.get(0);\n\
    \                array.set(0, array.get(1));\n                array.set(1, temp);\n\
    \            }\n            return array;\n        }\n        if (array.size()\
    \ == 3) {\n            if (array.get(0) > array.get(1)) {\n                long\
    \ temp = array.get(0);\n                array.set(0, array.get(1));\n        \
    \        array.set(1, temp);\n            }\n            if (array.get(1) > array.get(2))\
    \ {\n                long temp = array.get(1);\n                array.set(1, array.get(2));\n\
    \                array.set(2, temp);\n            }\n            if (array.get(0)\
    \ > array.get(1)) {\n                long temp = array.get(0);\n             \
    \   array.set(0, array.get(1));\n                array.set(1, temp);\n       \
    \     }\n            return array;\n        }\n        if (array.size() == 4)\
    \ {\n            if (array.get(0) > array.get(1)) {\n                long temp\
    \ = array.get(0);\n                array.set(0, array.get(1));\n             \
    \   array.set(1, temp);\n            }\n            if (array.get(2) > array.get(3))\
    \ {\n                long temp = array.get(2);\n                array.set(2, array.get(3));\n\
    \                array.set(3, temp);\n            }\n            if (array.get(0)\
    \ > array.get(2)) {\n                long temp = array.get(0);\n             \
    \   array.set(0, array.get(2));\n                array.set(2, temp);\n       \
    \     }\n            if (array.get(1) > array.get(3)) {\n                long\
    \ temp = array.get(1\n    }\n    public static void main(String[] args) {\n  \
    \  assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfmg44cci.java:73: error: ')' expected\n                long temp\
    \ = array.get(1\n                                       ^\n/tmp/tmpfmg44cci.java:75:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n    ^\n2 errors\n"
  stdout: ''
  timestamp: 1659800393
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        // Write your code\
    \ here\n        // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (array.size() == 0) {\n        \
    \    return result;\n        }\n        else if (array.size() == 1) {\n      \
    \      result.add(array.get(0));\n            return result;\n        }\n    \
    \    else {\n            ArrayList<Long> odd = new ArrayList<Long>();\n      \
    \      ArrayList<Long> even = new ArrayList<Long>();\n            for (int i =\
    \ 0; i < array.size(); i++) {\n                if (array.get(i) % 2 == 0) {\n\
    \                    even.add(array.get(i));\n                }\n            \
    \    else {\n                    odd.add(array.get(i));\n                }\n \
    \           }\n            Collections.sort(odd);\n            Collections.sort(even);\n\
    \            Collections.reverse(even);\n            for (int i = 0; i < odd.size();\
    \ i++) {\n                result.add(odd.get(i));\n            }\n           \
    \ for (int i = 0; i < even.size(); i++) {\n                result.add(even.get(i));\n\
    \            }\n            return result;\n        }\n    }\n    public static\
    \ void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbh_hdwln.java:61)\n"
  stdout: ''
  timestamp: 1659800395
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        return array;\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmqnnwgz6.java:29)\n"
  stdout: ''
  timestamp: 1659800393
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        return array;\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmqnnwgz6.java:29)\n"
  stdout: ''
  timestamp: 1659800393
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        // Write your code\
    \ here\n        // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        return array;\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8rd1kz2p.java:32)\n"
  stdout: ''
  timestamp: 1659800393
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        ArrayList<Long>\
    \ sorted = new ArrayList<Long>();\n        ArrayList<Long> odd = new ArrayList<Long>();\n\
    \        ArrayList<Long> even = new ArrayList<Long>();\n        for (Long i :\
    \ array) {\n            if (i % 2 == 0) {\n                even.add(i);\n    \
    \        } else {\n                odd.add(i);\n            }\n        }\n   \
    \     Collections.sort(odd);\n        Collections.sort(even);\n        Collections.reverse(even);\n\
    \        sorted.addAll(odd);\n        sorted.addAll(even);\n        return sorted;\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdnh_b1zk.java:44)\n"
  stdout: ''
  timestamp: 1659800393
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        ArrayList<Long>\
    \ sorted = new ArrayList<Long>();\n        if (array.size() == 0) {\n        \
    \    return sorted;\n        }\n        if (array.size() == 1) {\n           \
    \ sorted.add(array.get(0));\n            return sorted;\n        }\n        if\
    \ (array.size() == 2) {\n            if ((array.get(0) + array.get(1)) % 2 ==\
    \ 0) {\n                sorted.add(array.get(1));\n                sorted.add(array.get(0));\n\
    \                return sorted;\n            } else {\n                sorted.add(array.get(0));\n\
    \                sorted.add(array.get(1));\n                return sorted;\n \
    \           }\n        }\n        if ((array.get(0) + array.get(array.size() -\
    \ 1)) % 2 == 0) {\n            sorted.add(array.get(array.size() - 1));\n    \
    \        sorted.addAll(sortArray(new ArrayList<Long>(array.subList(1, array.size()\
    \ - 1))));\n            sorted.add(array.get(0));\n            return sorted;\n\
    \        } else {\n            sorted.add(array.get(0));\n            sorted.addAll(sortArray(new\
    \ ArrayList<Long>(array.subList(1, array.size() - 1))));\n            sorted.add(array.get(array.size()\
    \ - 1));\n            return sorted;\n        }\n    }\n    public static void\
    \ main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpizx_8v5z.java:58)\n"
  stdout: ''
  timestamp: 1659800394
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        return array;\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmqnnwgz6.java:29)\n"
  stdout: ''
  timestamp: 1659800393
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        ArrayList<Long>\
    \ sortedArray = new ArrayList<Long>();\n        if (array.size() == 0) {\n   \
    \         return sortedArray;\n        }\n        if (array.size() == 1) {\n \
    \           sortedArray.add(array.get(0));\n            return sortedArray;\n\
    \        }\n        if (array.size() == 2) {\n            if ((array.get(0) +\
    \ array.get(1)) % 2 == 0) {\n                sortedArray.add(array.get(1));\n\
    \                sortedArray.add(array.get(0));\n                return sortedArray;\n\
    \            } else {\n                sortedArray.add(array.get(0));\n      \
    \          sortedArray.add(array.get(1));\n                return sortedArray;\n\
    \            }\n        }\n        if ((array.get(0) + array.get(array.size()\
    \ - 1)) % 2 == 0) {\n            for (int i = 0; i < array.size(); i++) {\n  \
    \              if (i % 2 == 0) {\n                    sortedArray.add(array.get(array.size()\
    \ - 1 - i));\n                } else {\n                    sortedArray.add(array.get(i));\n\
    \                }\n            }\n        } else {\n            for (int i =\
    \ 0; i < array.size(); i++) {\n                if (i % 2 == 0) {\n           \
    \         sortedArray.add(array.get(i));\n                } else {\n         \
    \           sortedArray.add(array.get(array.size() - 1 - i));\n              \
    \  }\n            }\n        }\n        return sortedArray;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7loqovak.java:65)\n"
  stdout: ''
  timestamp: 1659800394
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (array.size() == 0) {\n        \
    \    return result;\n        }\n        if (array.size() == 1) {\n           \
    \ result.add(array.get(0));\n            return result;\n        }\n        if\
    \ (array.size() == 2) {\n            if ((array.get(0) + array.get(1)) % 2 ==\
    \ 0) {\n                result.add(array.get(1));\n                result.add(array.get(0));\n\
    \                return result;\n            } else {\n                result.add(array.get(0));\n\
    \                result.add(array.get(1));\n                return result;\n \
    \           }\n        }\n        if ((array.get(0) + array.get(array.size() -\
    \ 1)) % 2 == 0) {\n            for (int i = array.size() - 1; i >= 0; i--) {\n\
    \                result.add(array.get(i));\n            }\n            return\
    \ result;\n        } else {\n            for (int i = 0; i < array.size(); i++)\
    \ {\n                result.add(array.get(i));\n            }\n            return\
    \ result;\n        }\n    }\n    public static void main(String[] args) {\n  \
    \  assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcmzs9pq3.java:58)\n"
  stdout: ''
  timestamp: 1659800393
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        if (array.size()\
    \ == 0) {\n            return array;\n        }\n        if (array.size() == 1)\
    \ {\n            return array;\n        }\n        if (array.size() == 2) {\n\
    \            if (array.get(0) > array.get(1)) {\n                long temp = array.get(0);\n\
    \                array.set(0, array.get(1));\n                array.set(1, temp);\n\
    \            }\n            return array;\n        }\n        if (array.get(0)\
    \ + array.get(array.size() - 1) % 2 == 0) {\n            Collections.sort(array,\
    \ Collections.reverseOrder());\n        } else {\n            Collections.sort(array);\n\
    \        }\n        return array;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpr293sr89.java:49)\n"
  stdout: ''
  timestamp: 1659800394
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (array.size() == 0) {\n        \
    \    return result;\n        }\n        if (array.size() == 1) {\n           \
    \ result.add(array.get(0));\n            return result;\n        }\n        long\
    \ first = array.get(0);\n        long last = array.get(array.size() - 1);\n  \
    \      if ((first + last) % 2 == 0) {\n            Collections.sort(array, Collections.reverseOrder());\n\
    \        } else {\n            Collections.sort(array);\n        }\n        return\
    \ array;\n    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800394
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (array.size() == 0) {\n        \
    \    return result;\n        }\n        if (array.size() == 1) {\n           \
    \ result.add(array.get(0));\n            return result;\n        }\n        if\
    \ (array.size() == 2) {\n            if ((array.get(0) + array.get(1)) % 2 ==\
    \ 0) {\n                result.add(array.get(1));\n                result.add(array.get(0));\n\
    \                return result;\n            } else {\n                result.add(array.get(0));\n\
    \                result.add(array.get(1));\n                return result;\n \
    \           }\n        }\n        if ((array.get(0) + array.get(array.size() -\
    \ 1)) % 2 == 0) {\n            int i = 0;\n            int j = array.size() -\
    \ 1;\n            while (i < j) {\n                result.add(array.get(j));\n\
    \                result.add(array.get(i));\n                i = i + 1;\n     \
    \           j = j - 1;\n            }\n            if (i == j) {\n           \
    \     result.add(array.get(i));\n            }\n            return result;\n \
    \       } else {\n            int i = 0;\n            int j = array.size() - 1;\n\
    \            while (i < j) {\n                result.add(array.get(i));\n    \
    \            result.add(array.get(j));\n                i = i + 1;\n         \
    \       j = j - 1;\n            }\n            if (i == j) {\n               \
    \ result.add(array.get(i));\n            }\n            return result;\n     \
    \   }\n    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzonmekrs.java:74)\n"
  stdout: ''
  timestamp: 1659800394
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        return null;\n \
    \   }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.sortArray(java.util.ArrayList)\"\
    \ is null\n\tat Problem.main(tmpmx0ttyzx.java:27)\n"
  stdout: ''
  timestamp: 1659800393
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        if (array.size()\
    \ == 0) {\n            return array;\n        }\n        if (array.size() == 1)\
    \ {\n            return array;\n        }\n        if (array.size() == 2) {\n\
    \            if (array.get(0) > array.get(1)) {\n                Long temp = array.get(0);\n\
    \                array.set(0, array.get(1));\n                array.set(1, temp);\n\
    \            }\n            return array;\n        }\n        if (array.size()\
    \ == 3) {\n            if (array.get(0) > array.get(1)) {\n                Long\
    \ temp = array.get(0);\n                array.set(0, array.get(1));\n        \
    \        array.set(1, temp);\n            }\n            if (array.get(1) > array.get(2))\
    \ {\n                Long temp = array.get(1);\n                array.set(1, array.get(2));\n\
    \                array.set(2, temp);\n            }\n            if (array.get(0)\
    \ > array.get(1)) {\n                Long temp = array.get(0);\n             \
    \   array.set(0, array.get(1));\n                array.set(1, temp);\n       \
    \     }\n            return array;\n        }\n        if (array.size() == 4)\
    \ {\n            if (array.get(0) > array.get(1)) {\n                Long temp\
    \ = array.get(0);\n                array.set(0, array.get(1));\n             \
    \   array.set(1, temp);\n            }\n            if (array.get(2) > array.get(3))\
    \ {\n                Long temp = array.get(2);\n                array.set(2, array.get(3));\n\
    \                array.set(3, temp);\n            }\n            if (array.get(0)\
    \ > array.get(2)) {\n                Long temp = array.get(0);\n             \
    \   array.set(0, array.get(2));\n                array.set(2, temp);\n       \
    \     }\n            if (array.get(1) > array.get(3)) {\n                Long\
    \ temp = array.get(1\n    }\n    public static void main(String[] args) {\n  \
    \  assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmlk9yogi.java:73: error: ')' expected\n                Long temp\
    \ = array.get(1\n                                       ^\n/tmp/tmpmlk9yogi.java:75:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n    ^\n2 errors\n"
  stdout: ''
  timestamp: 1659800392
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (array.size() == 0) {\n        \
    \    return result;\n        }\n        if (array.size() == 1) {\n           \
    \ result.add(array.get(0));\n            return result;\n        }\n        if\
    \ (array.size() == 2) {\n            if ((array.get(0) + array.get(1)) % 2 ==\
    \ 0) {\n                result.add(array.get(1));\n                result.add(array.get(0));\n\
    \                return result;\n            } else {\n                result.add(array.get(0));\n\
    \                result.add(array.get(1));\n                return result;\n \
    \           }\n        }\n        if ((array.get(0) + array.get(array.size() -\
    \ 1)) % 2 == 0) {\n            for (int i = 0; i < array.size(); i++) {\n    \
    \            if (i % 2 == 0) {\n                    result.add(array.get(array.size()\
    \ - 1 - i / 2));\n                } else {\n                    result.add(array.get(i\
    \ / 2));\n                }\n            }\n        } else {\n            for\
    \ (int i = 0; i < array.size(); i++) {\n                if (i % 2 == 0) {\n  \
    \                  result.add(array.get(i / 2));\n                } else {\n \
    \                   result.add(array.get(array.size() - 1 - i / 2));\n       \
    \         }\n            }\n        }\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp84qj5ilh.java:65)\n"
  stdout: ''
  timestamp: 1659800393
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (array.size() == 0) {\n        \
    \    return result;\n        }\n        if (array.size() == 1) {\n           \
    \ result.add(array.get(0));\n            return result;\n        }\n        if\
    \ (array.size() == 2) {\n            if ((array.get(0) + array.get(1)) % 2 ==\
    \ 0) {\n                result.add(array.get(1));\n                result.add(array.get(0));\n\
    \                return result;\n            } else {\n                result.add(array.get(0));\n\
    \                result.add(array.get(1));\n                return result;\n \
    \           }\n        }\n        ArrayList<Long> evens = new ArrayList<Long>();\n\
    \        ArrayList<Long> odds = new ArrayList<Long>();\n        for (int i = 0;\
    \ i < array.size(); i++) {\n            if (array.get(i) % 2 == 0) {\n       \
    \         evens.add(array.get(i));\n            } else {\n                odds.add(array.get(i));\n\
    \            }\n        }\n        Collections.sort(evens);\n        Collections.sort(odds);\n\
    \        if ((array.get(0) + array.get(array.size() - 1)) % 2 == 0) {\n      \
    \      Collections.reverse(evens);\n            Collections.reverse(odds);\n \
    \       }\n        for (int i = 0; i < odds.size(); i++) {\n            result.add(odds.get(i));\n\
    \        }\n        for (int i = 0; i < evens.size(); i++) {\n            result.add(evens.get(i));\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqqzn6o2v.java:69)\n"
  stdout: ''
  timestamp: 1659800395
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        ArrayList<Long>\
    \ sortedArray = new ArrayList<Long>();\n        ArrayList<Long> oddArray = new\
    \ ArrayList<Long>();\n        ArrayList<Long> evenArray = new ArrayList<Long>();\n\
    \        for (Long i : array) {\n            if (i % 2 == 0) {\n             \
    \   evenArray.add(i);\n            } else {\n                oddArray.add(i);\n\
    \            }\n        }\n        Collections.sort(oddArray);\n        Collections.sort(evenArray);\n\
    \        Collections.reverse(evenArray);\n        sortedArray.addAll(oddArray);\n\
    \        sortedArray.addAll(evenArray);\n        return sortedArray;\n    }\n\
    \    public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0prajy06.java:44)\n"
  stdout: ''
  timestamp: 1659800394
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (array.size() == 0) {\n        \
    \    return result;\n        }\n        if (array.size() == 1) {\n           \
    \ result.add(array.get(0));\n            return result;\n        }\n        if\
    \ (array.size() == 2) {\n            if ((array.get(0) + array.get(1)) % 2 ==\
    \ 0) {\n                result.add(array.get(1));\n                result.add(array.get(0));\n\
    \                return result;\n            } else {\n                result.add(array.get(0));\n\
    \                result.add(array.get(1));\n                return result;\n \
    \           }\n        }\n        if ((array.get(0) + array.get(array.size() -\
    \ 1)) % 2 == 0) {\n            for (int i = 0; i < array.size(); i++) {\n    \
    \            if (i % 2 == 0) {\n                    result.add(array.get(array.size()\
    \ - 1 - i / 2));\n                } else {\n                    result.add(array.get(i\
    \ / 2));\n                }\n            }\n        } else {\n            for\
    \ (int i = 0; i < array.size(); i++) {\n                if (i % 2 == 0) {\n  \
    \                  result.add(array.get(i / 2));\n                } else {\n \
    \                   result.add(array.get(array.size() - 1 - i / 2));\n       \
    \         }\n            }\n        }\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp84qj5ilh.java:65)\n"
  stdout: ''
  timestamp: 1659800393
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        ArrayList<Long>\
    \ sorted = new ArrayList<Long>();\n        if (array.size() == 0) {\n        \
    \    return sorted;\n        }\n        if (array.size() == 1) {\n           \
    \ sorted.add(array.get(0));\n            return sorted;\n        }\n        if\
    \ (array.size() == 2) {\n            sorted.add(array.get(0));\n            sorted.add(array.get(1));\n\
    \            return sorted;\n        }\n        if (array.size() == 3) {\n   \
    \         sorted.add(array.get(0));\n            sorted.add(array.get(1));\n \
    \           sorted.add(array.get(2));\n            return sorted;\n        }\n\
    \        if (array.size() == 4) {\n            sorted.add(array.get(0));\n   \
    \         sorted.add(array.get(1));\n            sorted.add(array.get(2));\n \
    \           sorted.add(array.get(3));\n            return sorted;\n        }\n\
    \        if (array.size() == 5) {\n            sorted.add(array.get(0));\n   \
    \         sorted.add(array.get(1));\n            sorted.add(array.get(2));\n \
    \           sorted.add(array.get(3));\n            sorted.add(array.get(4));\n\
    \            return sorted;\n        }\n        if (array.size() == 6) {\n   \
    \         sorted.add(array.get(0));\n            sorted.add(array.get(1));\n \
    \           sorted.add(array.get(2));\n            sorted.add(array.get(3));\n\
    \            sorted.add(array.get(4));\n            sorted.add(array.get(5));\n\
    \            return sorted;\n        }\n        if (array.size() == 7) {\n   \
    \         sorted.add(array.get(0));\n            sorted.add(array.get(1));\n \
    \           sorted.add(array.get(2));\n            sorted.add(array.get(3));\n\
    \            sorted.add(array.get(4));\n            sorted.add(array.get(5));\n\
    \            sorted.add(array.get(6));\n            return sorted;\n        }\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbbbiyl45.java:77: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659800394
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (array.size() == 0) {\n        \
    \    return result;\n        }\n        if (array.size() == 1) {\n           \
    \ result.add(array.get(0));\n            return result;\n        }\n        if\
    \ (array.size() == 2) {\n            if ((array.get(0) + array.get(1)) % 2 ==\
    \ 0) {\n                result.add(array.get(1));\n                result.add(array.get(0));\n\
    \                return result;\n            } else {\n                result.add(array.get(0));\n\
    \                result.add(array.get(1));\n                return result;\n \
    \           }\n        }\n        if ((array.get(0) + array.get(array.size() -\
    \ 1)) % 2 == 0) {\n            result.add(array.get(array.size() - 1));\n    \
    \        result.addAll(sortArray(new ArrayList<Long>(array.subList(1, array.size()\
    \ - 1))));\n            result.add(array.get(0));\n            return result;\n\
    \        } else {\n            result.add(array.get(0));\n            result.addAll(sortArray(new\
    \ ArrayList<Long>(array.subList(1, array.size() - 1))));\n            result.add(array.get(array.size()\
    \ - 1));\n            return result;\n        }\n    }\n    public static void\
    \ main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpd_bcyrsx.java:58)\n"
  stdout: ''
  timestamp: 1659800395
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        return array;\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmqnnwgz6.java:29)\n"
  stdout: ''
  timestamp: 1659800393
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        if (array.size()\
    \ == 0) {\n            return array;\n        }\n        if (array.size() == 1)\
    \ {\n            return array;\n        }\n        if (array.size() == 2) {\n\
    \            if (array.get(0) > array.get(1)) {\n                long temp = array.get(0);\n\
    \                array.set(0, array.get(1));\n                array.set(1, temp);\n\
    \            }\n            return array;\n        }\n        if (array.get(0)\
    \ + array.get(array.size() - 1) % 2 == 0) {\n            Collections.sort(array,\
    \ Collections.reverseOrder());\n        } else {\n            Collections.sort(array);\n\
    \        }\n        return array;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpr293sr89.java:49)\n"
  stdout: ''
  timestamp: 1659800394
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        ArrayList<Long>\
    \ sortedArray = new ArrayList<Long>();\n        int firstIndex = 0;\n        int\
    \ lastIndex = array.size() - 1;\n        int sum = (int)(array.get(firstIndex)\
    \ + array.get(lastIndex));\n        if (sum % 2 == 0) {\n            Collections.sort(array,\
    \ Collections.reverseOrder());\n        } else {\n            Collections.sort(array);\n\
    \        }\n        return array;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmpy5649xkg.java:27)\n\tat Problem.main(tmpy5649xkg.java:36)\n"
  stdout: ''
  timestamp: 1659800395
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        return null;\n \
    \   }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.sortArray(java.util.ArrayList)\"\
    \ is null\n\tat Problem.main(tmpmx0ttyzx.java:27)\n"
  stdout: ''
  timestamp: 1659800393
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (array.size() == 0) {\n        \
    \    return result;\n        }\n        if (array.size() == 1) {\n           \
    \ result.add(array.get(0));\n            return result;\n        }\n        if\
    \ (array.size() == 2) {\n            if ((array.get(0) + array.get(1)) % 2 ==\
    \ 0) {\n                result.add(array.get(1));\n                result.add(array.get(0));\n\
    \                return result;\n            } else {\n                result.add(array.get(0));\n\
    \                result.add(array.get(1));\n                return result;\n \
    \           }\n        }\n        if ((array.get(0) + array.get(array.size() -\
    \ 1)) % 2 == 0) {\n            for (int i = array.size() - 1; i >= 0; i--) {\n\
    \                result.add(array.get(i));\n            }\n            return\
    \ result;\n        } else {\n            for (int i = 0; i < array.size(); i++)\
    \ {\n                result.add(array.get(i));\n            }\n            return\
    \ result;\n        }\n    }\n    public static void main(String[] args) {\n  \
    \  assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcmzs9pq3.java:58)\n"
  stdout: ''
  timestamp: 1659800393
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (array.size() == 0) {\n        \
    \    return result;\n        }\n        if (array.size() == 1) {\n           \
    \ result.add(array.get(0));\n            return result;\n        }\n        if\
    \ (array.size() == 2) {\n            if ((array.get(0) + array.get(1)) % 2 ==\
    \ 0) {\n                result.add(array.get(1));\n                result.add(array.get(0));\n\
    \                return result;\n            } else {\n                result.add(array.get(0));\n\
    \                result.add(array.get(1));\n                return result;\n \
    \           }\n        }\n        if ((array.get(0) + array.get(array.size() -\
    \ 1)) % 2 == 0) {\n            for (int i = array.size() - 1; i >= 0; i--) {\n\
    \                result.add(array.get(i));\n            }\n            return\
    \ result;\n        } else {\n            for (int i = 0; i < array.size(); i++)\
    \ {\n                result.add(array.get(i));\n            }\n            return\
    \ result;\n        }\n    }\n    public static void main(String[] args) {\n  \
    \  assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcmzs9pq3.java:58)\n"
  stdout: ''
  timestamp: 1659800393
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        return array;\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmqnnwgz6.java:29)\n"
  stdout: ''
  timestamp: 1659800393
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        ArrayList<Long> odd = new ArrayList<Long>();\n\
    \        ArrayList<Long> even = new ArrayList<Long>();\n        for (Long i :\
    \ array) {\n            if (i % 2 == 0) {\n                even.add(i);\n    \
    \        } else {\n                odd.add(i);\n            }\n        }\n   \
    \     Collections.sort(odd);\n        Collections.sort(even);\n        Collections.reverse(even);\n\
    \        result.addAll(odd);\n        result.addAll(even);\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpr6zufhhz.java:44)\n"
  stdout: ''
  timestamp: 1659800393
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        ArrayList<Long> odd = new ArrayList<Long>();\n\
    \        ArrayList<Long> even = new ArrayList<Long>();\n        for (int i = 0;\
    \ i < array.size(); i++) {\n            if (array.get(i) % 2 == 0) {\n       \
    \         even.add(array.get(i));\n            } else {\n                odd.add(array.get(i));\n\
    \            }\n        }\n        Collections.sort(odd);\n        Collections.sort(even);\n\
    \        Collections.reverse(even);\n        for (int i = 0; i < odd.size(); i++)\
    \ {\n            result.add(odd.get(i));\n        }\n        for (int i = 0; i\
    \ < even.size(); i++) {\n            result.add(even.get(i));\n        }\n   \
    \     return result;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpunzvxtoh.java:48)\n"
  stdout: ''
  timestamp: 1659800394
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (array.size() == 0) {\n        \
    \    return result;\n        }\n        if (array.size() == 1) {\n           \
    \ result.add(array.get(0));\n            return result;\n        }\n        if\
    \ (array.size() == 2) {\n            result.add(array.get(0));\n            result.add(array.get(1));\n\
    \            return result;\n        }\n        if (array.size() == 3) {\n   \
    \         result.add(array.get(0));\n            result.add(array.get(1));\n \
    \           result.add(array.get(2));\n            return result;\n        }\n\
    \        if (array.size() == 4) {\n            result.add(array.get(0));\n   \
    \         result.add(array.get(1));\n            result.add(array.get(2));\n \
    \           result.add(array.get(3));\n            return result;\n        }\n\
    \        if (array.size() == 5) {\n            result.add(array.get(0));\n   \
    \         result.add(array.get(1));\n            result.add(array.get(2));\n \
    \           result.add(array.get(3));\n            result.add(array.get(4));\n\
    \            return result;\n        }\n        if (array.size() == 6) {\n   \
    \         result.add(array.get(0));\n            result.add(array.get(1));\n \
    \           result.add(array.get(2));\n            result.add(array.get(3));\n\
    \            result.add(array.get(4));\n            result.add(array.get(5));\n\
    \            return result;\n        }\n        if (array.size() == 7) {\n   \
    \         result.add(array.get(0));\n            result.add(array.get(1));\n \
    \           result.add(array.get(2));\n            result.add(array.get(3));\n\
    \            result.add(array.get(4));\n            result.add(array.get(5));\n\
    \            result.add(array.get(6));\n            return result;\n        }\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpz0qi46gh.java:77: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659800393
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        ArrayList<Long> odd = new ArrayList<Long>();\n\
    \        ArrayList<Long> even = new ArrayList<Long>();\n        for (int i = 0;\
    \ i < array.size(); i++) {\n            if (array.get(i) % 2 == 0) {\n       \
    \         even.add(array.get(i));\n            } else {\n                odd.add(array.get(i));\n\
    \            }\n        }\n        Collections.sort(odd);\n        Collections.sort(even);\n\
    \        Collections.reverse(even);\n        result.addAll(odd);\n        result.addAll(even);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjnaxzf76.java:44)\n"
  stdout: ''
  timestamp: 1659800395
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        // Write your code\
    \ here\n        // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        return array;\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8rd1kz2p.java:32)\n"
  stdout: ''
  timestamp: 1659800393
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        return null;\n \
    \   }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.sortArray(java.util.ArrayList)\"\
    \ is null\n\tat Problem.main(tmpmx0ttyzx.java:27)\n"
  stdout: ''
  timestamp: 1659800393
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        ArrayList<Long> even = new ArrayList<Long>();\n\
    \        ArrayList<Long> odd = new ArrayList<Long>();\n        for (int i = 0;\
    \ i < array.size(); i++) {\n            if (array.get(i) % 2 == 0) {\n       \
    \         even.add(array.get(i));\n            } else {\n                odd.add(array.get(i));\n\
    \            }\n        }\n        Collections.sort(even);\n        Collections.sort(odd);\n\
    \        Collections.reverse(odd);\n        for (int i = 0; i < odd.size(); i++)\
    \ {\n            result.add(odd.get(i));\n        }\n        for (int i = 0; i\
    \ < even.size(); i++) {\n            result.add(even.get(i));\n        }\n   \
    \     return result;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7ooz4ch4.java:48)\n"
  stdout: ''
  timestamp: 1659800395
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (array.size() == 0) {\n        \
    \    return result;\n        }\n        if (array.size() == 1) {\n           \
    \ result.add(array.get(0));\n            return result;\n        }\n        if\
    \ (array.size() == 2) {\n            if ((array.get(0) + array.get(1)) % 2 ==\
    \ 0) {\n                result.add(array.get(1));\n                result.add(array.get(0));\n\
    \                return result;\n            } else {\n                result.add(array.get(0));\n\
    \                result.add(array.get(1));\n                return result;\n \
    \           }\n        }\n        ArrayList<Long> odd = new ArrayList<Long>();\n\
    \        ArrayList<Long> even = new ArrayList<Long>();\n        for (Long i :\
    \ array) {\n            if (i % 2 == 0) {\n                even.add(i);\n    \
    \        } else {\n                odd.add(i);\n            }\n        }\n   \
    \     Collections.sort(odd);\n        Collections.sort(even);\n        if ((array.get(0)\
    \ + array.get(array.size() - 1)) % 2 == 0) {\n            Collections.reverse(even);\n\
    \        }\n        odd.addAll(even);\n        return odd;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptrk4u265.java:63)\n"
  stdout: ''
  timestamp: 1659800395
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        return array;\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmqnnwgz6.java:29)\n"
  stdout: ''
  timestamp: 1659800393
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        return array;\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmqnnwgz6.java:29)\n"
  stdout: ''
  timestamp: 1659800393
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        return array;\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmqnnwgz6.java:29)\n"
  stdout: ''
  timestamp: 1659800393
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        return null;\n \
    \   }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.sortArray(java.util.ArrayList)\"\
    \ is null\n\tat Problem.main(tmpmx0ttyzx.java:27)\n"
  stdout: ''
  timestamp: 1659800393
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        return array;\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmqnnwgz6.java:29)\n"
  stdout: ''
  timestamp: 1659800393
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (array.size() == 0) {\n        \
    \    return result;\n        }\n        if (array.size() == 1) {\n           \
    \ result.add(array.get(0));\n            return result;\n        }\n        if\
    \ (array.size() == 2) {\n            if ((array.get(0) + array.get(1)) % 2 ==\
    \ 0) {\n                result.add(array.get(1));\n                result.add(array.get(0));\n\
    \                return result;\n            } else {\n                result.add(array.get(0));\n\
    \                result.add(array.get(1));\n                return result;\n \
    \           }\n        }\n        if ((array.get(0) + array.get(array.size() -\
    \ 1)) % 2 == 0) {\n            for (int i = 0; i < array.size(); i++) {\n    \
    \            if (i % 2 == 0) {\n                    result.add(array.get(array.size()\
    \ - 1 - i / 2));\n                } else {\n                    result.add(array.get(i\
    \ / 2));\n                }\n            }\n        } else {\n            for\
    \ (int i = 0; i < array.size(); i++) {\n                if (i % 2 == 0) {\n  \
    \                  result.add(array.get(i / 2));\n                } else {\n \
    \                   result.add(array.get(array.size() - 1 - i / 2));\n       \
    \         }\n            }\n        }\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp84qj5ilh.java:65)\n"
  stdout: ''
  timestamp: 1659800393
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        ArrayList<Long>\
    \ sorted = new ArrayList<Long>();\n        ArrayList<Long> odd = new ArrayList<Long>();\n\
    \        ArrayList<Long> even = new ArrayList<Long>();\n        for (Long i :\
    \ array) {\n            if (i % 2 == 0) {\n                even.add(i);\n    \
    \        } else {\n                odd.add(i);\n            }\n        }\n   \
    \     Collections.sort(odd);\n        Collections.sort(even);\n        if ((odd.get(0)\
    \ + even.get(even.size() - 1)) % 2 == 0) {\n            Collections.reverse(even);\n\
    \        }\n        sorted.addAll(odd);\n        sorted.addAll(even);\n      \
    \  return sorted;\n    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmpwkbkypqh.java:36)\n\tat Problem.main(tmpwkbkypqh.java:44)\n"
  stdout: ''
  timestamp: 1659800395
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        return null;\n \
    \   }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.sortArray(java.util.ArrayList)\"\
    \ is null\n\tat Problem.main(tmpmx0ttyzx.java:27)\n"
  stdout: ''
  timestamp: 1659800393
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (array.size() == 0) {\n        \
    \    return result;\n        }\n        if (array.size() == 1) {\n           \
    \ result.add(array.get(0));\n            return result;\n        }\n        if\
    \ (array.size() == 2) {\n            if ((array.get(0) + array.get(1)) % 2 ==\
    \ 0) {\n                result.add(array.get(1));\n                result.add(array.get(0));\n\
    \                return result;\n            } else {\n                result.add(array.get(0));\n\
    \                result.add(array.get(1));\n                return result;\n \
    \           }\n        }\n        if ((array.get(0) + array.get(array.size() -\
    \ 1)) % 2 == 0) {\n            Collections.sort(array, Collections.reverseOrder());\n\
    \            return array;\n        } else {\n            Collections.sort(array);\n\
    \            return array;\n        }\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpd_8z4dts.java:56)\n"
  stdout: ''
  timestamp: 1659800395
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        ArrayList<Long> odd = new ArrayList<Long>();\n\
    \        ArrayList<Long> even = new ArrayList<Long>();\n        for (Long i :\
    \ array) {\n            if (i % 2 == 0) {\n                even.add(i);\n    \
    \        } else {\n                odd.add(i);\n            }\n        }\n   \
    \     Collections.sort(odd);\n        Collections.sort(even);\n        Collections.reverse(even);\n\
    \        odd.addAll(even);\n        return odd;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpv_7e1huz.java:43)\n"
  stdout: ''
  timestamp: 1659800395
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (array.size() == 0) {\n        \
    \    return result;\n        }\n        if (array.size() == 1) {\n           \
    \ result.add(array.get(0));\n            return result;\n        }\n        if\
    \ (array.size() == 2) {\n            if ((array.get(0) + array.get(1)) % 2 ==\
    \ 0) {\n                result.add(array.get(1));\n                result.add(array.get(0));\n\
    \                return result;\n            } else {\n                result.add(array.get(0));\n\
    \                result.add(array.get(1));\n                return result;\n \
    \           }\n        }\n        ArrayList<Long> odd = new ArrayList<Long>();\n\
    \        ArrayList<Long> even = new ArrayList<Long>();\n        for (int i = 0;\
    \ i < array.size(); i++) {\n            if (array.get(i) % 2 == 0) {\n       \
    \         even.add(array.get(i));\n            } else {\n                odd.add(array.get(i));\n\
    \            }\n        }\n        Collections.sort(odd);\n        Collections.sort(even);\n\
    \        if ((array.get(0) + array.get(array.size() - 1)) % 2 == 0) {\n      \
    \      Collections.reverse(even);\n        }\n        for (int i = 0; i < odd.size();\
    \ i++) {\n            result.add(odd.get(i));\n        }\n        for (int i =\
    \ 0; i < even.size(); i++) {\n            result.add(even.get(i));\n        }\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_kro5199.java:68)\n"
  stdout: ''
  timestamp: 1659800395
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (array.size() == 0) {\n        \
    \    return result;\n        }\n        if (array.size() == 1) {\n           \
    \ result.add(array.get(0));\n            return result;\n        }\n        if\
    \ (array.size() == 2) {\n            if ((array.get(0) + array.get(1)) % 2 ==\
    \ 0) {\n                result.add(array.get(1));\n                result.add(array.get(0));\n\
    \                return result;\n            } else {\n                result.add(array.get(0));\n\
    \                result.add(array.get(1));\n                return result;\n \
    \           }\n        }\n        if ((array.get(0) + array.get(array.size() -\
    \ 1)) % 2 == 0) {\n            for (int i = array.size() - 1; i >= 0; i--) {\n\
    \                result.add(array.get(i));\n            }\n            return\
    \ result;\n        } else {\n            for (int i = 0; i < array.size(); i++)\
    \ {\n                result.add(array.get(i));\n            }\n            return\
    \ result;\n        }\n    }\n    public static void main(String[] args) {\n  \
    \  assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcmzs9pq3.java:58)\n"
  stdout: ''
  timestamp: 1659800393
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        int sum = 0;\n        for (int i =\
    \ 0; i < array.size(); i++) {\n            sum += array.get(i);\n        }\n \
    \       if (sum % 2 == 0) {\n            Collections.sort(array, Collections.reverseOrder());\n\
    \        } else {\n            Collections.sort(array);\n        }\n        return\
    \ array;\n    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpg0nra320.java:40)\n"
  stdout: ''
  timestamp: 1659800395
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        if (array.size()\
    \ == 0) {\n            return array;\n        }\n        if (array.size() == 1)\
    \ {\n            return array;\n        }\n        if (array.size() == 2) {\n\
    \            if (array.get(0) > array.get(1)) {\n                return array;\n\
    \            } else {\n                ArrayList<Long> result = new ArrayList<Long>();\n\
    \                result.add(array.get(1));\n                result.add(array.get(0));\n\
    \                return result;\n            }\n        }\n        if ((array.get(0)\
    \ + array.get(array.size() - 1)) % 2 == 0) {\n            Collections.sort(array,\
    \ Collections.reverseOrder());\n        } else {\n            Collections.sort(array);\n\
    \        }\n        return array;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqkfe1xtw.java:52)\n"
  stdout: ''
  timestamp: 1659800395
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (array.size() == 0) {\n        \
    \    return result;\n        }\n        if (array.size() == 1) {\n           \
    \ result.add(array.get(0));\n            return result;\n        }\n        if\
    \ (array.size() == 2) {\n            if ((array.get(0) + array.get(1)) % 2 ==\
    \ 0) {\n                result.add(array.get(1));\n                result.add(array.get(0));\n\
    \                return result;\n            } else {\n                result.add(array.get(0));\n\
    \                result.add(array.get(1));\n                return result;\n \
    \           }\n        }\n        ArrayList<Long> odd = new ArrayList<Long>();\n\
    \        ArrayList<Long> even = new ArrayList<Long>();\n        for (int i = 0;\
    \ i < array.size(); i++) {\n            if (array.get(i) % 2 == 0) {\n       \
    \         even.add(array.get(i));\n            } else {\n                odd.add(array.get(i));\n\
    \            }\n        }\n        Collections.sort(odd);\n        Collections.sort(even);\n\
    \        if ((array.get(0) + array.get(array.size() - 1)) % 2 == 0) {\n      \
    \      Collections.reverse(even);\n        }\n        odd.addAll(even);\n    \
    \    return odd;\n    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpv6r8zwbx.java:63)\n"
  stdout: ''
  timestamp: 1659800393
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        return null;\n \
    \   }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.sortArray(java.util.ArrayList)\"\
    \ is null\n\tat Problem.main(tmpmx0ttyzx.java:27)\n"
  stdout: ''
  timestamp: 1659800393
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (array.size() == 0) {\n        \
    \    return result;\n        }\n        if (array.size() == 1) {\n           \
    \ result.add(array.get(0));\n            return result;\n        }\n        if\
    \ (array.size() == 2) {\n            result.add(array.get(0));\n            result.add(array.get(1));\n\
    \            return result;\n        }\n        if (array.size() == 3) {\n   \
    \         result.add(array.get(0));\n            result.add(array.get(1));\n \
    \           result.add(array.get(2));\n            return result;\n        }\n\
    \        if (array.size() == 4) {\n            result.add(array.get(0));\n   \
    \         result.add(array.get(1));\n            result.add(array.get(2));\n \
    \           result.add(array.get(3));\n            return result;\n        }\n\
    \        if (array.size() == 5) {\n            result.add(array.get(0));\n   \
    \         result.add(array.get(1));\n            result.add(array.get(2));\n \
    \           result.add(array.get(3));\n            result.add(array.get(4));\n\
    \            return result;\n        }\n        if (array.size() == 6) {\n   \
    \         result.add(array.get(0));\n            result.add(array.get(1));\n \
    \           result.add(array.get(2));\n            result.add(array.get(3));\n\
    \            result.add(array.get(4));\n            result.add(array.get(5));\n\
    \            return result;\n        }\n        if (array.size() == 7) {\n   \
    \         result.add(array.get(0));\n            result.add(array.get(1));\n \
    \           result.add(array.get(2));\n            result.add(array.get(3));\n\
    \            result.add(array.get(4));\n            result.add(array.get(5));\n\
    \            result.add(array.get(6));\n            return result;\n        }\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpz0qi46gh.java:77: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659800393
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (array.size() == 0) {\n        \
    \    return result;\n        }\n        if (array.size() == 1) {\n           \
    \ result.add(array.get(0));\n            return result;\n        }\n        if\
    \ (array.size() == 2) {\n            if ((array.get(0) + array.get(1)) % 2 ==\
    \ 0) {\n                result.add(array.get(1));\n                result.add(array.get(0));\n\
    \                return result;\n            } else {\n                result.add(array.get(0));\n\
    \                result.add(array.get(1));\n                return result;\n \
    \           }\n        }\n        if ((array.get(0) + array.get(array.size() -\
    \ 1)) % 2 == 0) {\n            ArrayList<Long> temp = new ArrayList<Long>();\n\
    \            for (int i = 0; i < array.size(); i++) {\n                temp.add(array.get(i));\n\
    \            }\n            Collections.sort(temp);\n            Collections.reverse(temp);\n\
    \            return temp;\n        } else {\n            ArrayList<Long> temp\
    \ = new ArrayList<Long>();\n            for (int i = 0; i < array.size(); i++)\
    \ {\n                temp.add(array.get(i));\n            }\n            Collections.sort(temp);\n\
    \            return temp;\n        }\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp89ekbay4.java:65)\n"
  stdout: ''
  timestamp: 1659800395
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        ArrayList<Long> odd = new ArrayList<Long>();\n\
    \        ArrayList<Long> even = new ArrayList<Long>();\n        for (int i = 0;\
    \ i < array.size(); i++) {\n            if (array.get(i) % 2 == 0) {\n       \
    \         even.add(array.get(i));\n            } else {\n                odd.add(array.get(i));\n\
    \            }\n        }\n        Collections.sort(odd);\n        Collections.sort(even);\n\
    \        Collections.reverse(even);\n        for (int i = 0; i < odd.size(); i++)\
    \ {\n            result.add(odd.get(i));\n        }\n        for (int i = 0; i\
    \ < even.size(); i++) {\n            result.add(even.get(i));\n        }\n   \
    \     return result;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpunzvxtoh.java:48)\n"
  stdout: ''
  timestamp: 1659800394
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        return array;\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmqnnwgz6.java:29)\n"
  stdout: ''
  timestamp: 1659800393
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (array.size() == 0) {\n        \
    \    return result;\n        }\n        if (array.size() == 1) {\n           \
    \ result.add(array.get(0));\n            return result;\n        }\n        if\
    \ (array.size() == 2) {\n            if ((array.get(0) + array.get(1)) % 2 ==\
    \ 0) {\n                result.add(array.get(1));\n                result.add(array.get(0));\n\
    \                return result;\n            } else {\n                result.add(array.get(0));\n\
    \                result.add(array.get(1));\n                return result;\n \
    \           }\n        }\n        if ((array.get(0) + array.get(array.size() -\
    \ 1)) % 2 == 0) {\n            for (int i = 0; i < array.size(); i++) {\n    \
    \            result.add(array.get(array.size() - 1 - i));\n            }\n   \
    \         return result;\n        } else {\n            for (int i = 0; i < array.size();\
    \ i++) {\n                result.add(array.get(i));\n            }\n         \
    \   return result;\n        }\n    }\n    public static void main(String[] args)\
    \ {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmxps60qw.java:58)\n"
  stdout: ''
  timestamp: 1659800393
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        ArrayList<Long>\
    \ sorted = new ArrayList<Long>();\n        if (array.size() == 0) {\n        \
    \    return sorted;\n        }\n        if (array.size() == 1) {\n           \
    \ sorted.add(array.get(0));\n            return sorted;\n        }\n        if\
    \ (array.size() == 2) {\n            if (array.get(0) < array.get(1)) {\n    \
    \            sorted.add(array.get(0));\n                sorted.add(array.get(1));\n\
    \            } else {\n                sorted.add(array.get(1));\n           \
    \     sorted.add(array.get(0));\n            }\n            return sorted;\n \
    \       }\n        if (array.size() > 2) {\n            if ((array.get(0) + array.get(array.size()\
    \ - 1)) % 2 == 0) {\n                sorted = sortArray(array.subList(1, array.size()\
    \ - 1));\n                sorted.add(0, array.get(array.size() - 1));\n      \
    \          sorted.add(array.get(0));\n            } else {\n                sorted\
    \ = sortArray(array.subList(1, array.size() - 1));\n                sorted.add(0,\
    \ array.get(0));\n                sorted.add(array.get(array.size() - 1));\n \
    \           }\n        }\n        return sorted;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9zuxeo17.java:44: error: incompatible types: List<Long> cannot\
    \ be converted to ArrayList<Long>\n                sorted = sortArray(array.subList(1,\
    \ array.size() - 1));\n                                                ^\n/tmp/tmp9zuxeo17.java:48:\
    \ error: incompatible types: List<Long> cannot be converted to ArrayList<Long>\n\
    \                sorted = sortArray(array.subList(1, array.size() - 1));\n   \
    \                                             ^\nNote: Some messages have been\
    \ simplified; recompile with -Xdiags:verbose to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1659800395
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        return array;\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmqnnwgz6.java:29)\n"
  stdout: ''
  timestamp: 1659800393
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (array.size() == 0) {\n        \
    \    return result;\n        }\n        if (array.size() == 1) {\n           \
    \ result.add(array.get(0));\n            return result;\n        }\n        if\
    \ (array.size() == 2) {\n            if ((array.get(0) + array.get(1)) % 2 ==\
    \ 0) {\n                result.add(array.get(1));\n                result.add(array.get(0));\n\
    \                return result;\n            } else {\n                result.add(array.get(0));\n\
    \                result.add(array.get(1));\n                return result;\n \
    \           }\n        }\n        ArrayList<Long> odd = new ArrayList<Long>();\n\
    \        ArrayList<Long> even = new ArrayList<Long>();\n        for (int i = 0;\
    \ i < array.size(); i++) {\n            if (array.get(i) % 2 == 0) {\n       \
    \         even.add(array.get(i));\n            } else {\n                odd.add(array.get(i));\n\
    \            }\n        }\n        Collections.sort(odd);\n        Collections.sort(even);\n\
    \        if ((array.get(0) + array.get(array.size() - 1)) % 2 == 0) {\n      \
    \      Collections.reverse(even);\n        }\n        odd.addAll(even);\n    \
    \    return odd;\n    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpv6r8zwbx.java:63)\n"
  stdout: ''
  timestamp: 1659800393
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        return array;\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmqnnwgz6.java:29)\n"
  stdout: ''
  timestamp: 1659800393
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        return null;\n \
    \   }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.sortArray(java.util.ArrayList)\"\
    \ is null\n\tat Problem.main(tmpmx0ttyzx.java:27)\n"
  stdout: ''
  timestamp: 1659800393
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (array.size() == 0) {\n        \
    \    return result;\n        }\n        if (array.size() == 1) {\n           \
    \ result.add(array.get(0));\n            return result;\n        }\n        if\
    \ (array.size() == 2) {\n            if ((array.get(0) + array.get(1)) % 2 ==\
    \ 0) {\n                result.add(array.get(1));\n                result.add(array.get(0));\n\
    \                return result;\n            } else {\n                result.add(array.get(0));\n\
    \                result.add(array.get(1));\n                return result;\n \
    \           }\n        }\n        if ((array.get(0) + array.get(array.size() -\
    \ 1)) % 2 == 0) {\n            for (int i = 0; i < array.size(); i++) {\n    \
    \            result.add(array.get(array.size() - 1 - i));\n            }\n   \
    \         return result;\n        } else {\n            for (int i = 0; i < array.size();\
    \ i++) {\n                result.add(array.get(i));\n            }\n         \
    \   return result;\n        }\n    }\n    public static void main(String[] args)\
    \ {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmxps60qw.java:58)\n"
  stdout: ''
  timestamp: 1659800393
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        ArrayList<Long>\
    \ sortedArray = new ArrayList<Long>();\n        ArrayList<Long> oddArray = new\
    \ ArrayList<Long>();\n        ArrayList<Long> evenArray = new ArrayList<Long>();\n\
    \        for (Long i : array) {\n            if (i % 2 == 0) {\n             \
    \   evenArray.add(i);\n            } else {\n                oddArray.add(i);\n\
    \            }\n        }\n        Collections.sort(oddArray);\n        Collections.sort(evenArray);\n\
    \        Collections.reverse(evenArray);\n        sortedArray.addAll(oddArray);\n\
    \        sortedArray.addAll(evenArray);\n        return sortedArray;\n    }\n\
    \    public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0prajy06.java:44)\n"
  stdout: ''
  timestamp: 1659800394
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        return null;\n \
    \   }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.sortArray(java.util.ArrayList)\"\
    \ is null\n\tat Problem.main(tmpmx0ttyzx.java:27)\n"
  stdout: ''
  timestamp: 1659800393
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (array.size() == 0) {\n        \
    \    return result;\n        }\n        if (array.size() == 1) {\n           \
    \ result.add(array.get(0));\n            return result;\n        }\n        if\
    \ (array.size() == 2) {\n            if ((array.get(0) + array.get(1)) % 2 ==\
    \ 0) {\n                result.add(array.get(1));\n                result.add(array.get(0));\n\
    \                return result;\n            } else {\n                result.add(array.get(0));\n\
    \                result.add(array.get(1));\n                return result;\n \
    \           }\n        }\n        if ((array.get(0) + array.get(array.size() -\
    \ 1)) % 2 == 0) {\n            Collections.sort(array, Collections.reverseOrder());\n\
    \            return array;\n        } else {\n            Collections.sort(array);\n\
    \            return array;\n        }\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpd_8z4dts.java:56)\n"
  stdout: ''
  timestamp: 1659800395
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        return null;\n \
    \   }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.sortArray(java.util.ArrayList)\"\
    \ is null\n\tat Problem.main(tmpmx0ttyzx.java:27)\n"
  stdout: ''
  timestamp: 1659800393
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        return null;\n \
    \   }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.sortArray(java.util.ArrayList)\"\
    \ is null\n\tat Problem.main(tmpmx0ttyzx.java:27)\n"
  stdout: ''
  timestamp: 1659800393
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        return null;\n \
    \   }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.sortArray(java.util.ArrayList)\"\
    \ is null\n\tat Problem.main(tmpmx0ttyzx.java:27)\n"
  stdout: ''
  timestamp: 1659800393
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (array.size() == 0) {\n        \
    \    return result;\n        }\n        if (array.size() == 1) {\n           \
    \ result.add(array.get(0));\n            return result;\n        }\n        if\
    \ (array.size() == 2) {\n            if ((array.get(0) + array.get(1)) % 2 ==\
    \ 0) {\n                result.add(array.get(1));\n                result.add(array.get(0));\n\
    \                return result;\n            } else {\n                result.add(array.get(0));\n\
    \                result.add(array.get(1));\n                return result;\n \
    \           }\n        }\n        if ((array.get(0) + array.get(array.size() -\
    \ 1)) % 2 == 0) {\n            for (int i = array.size() - 1; i >= 0; i--) {\n\
    \                result.add(array.get(i));\n            }\n            return\
    \ result;\n        } else {\n            for (int i = 0; i < array.size(); i++)\
    \ {\n                result.add(array.get(i));\n            }\n            return\
    \ result;\n        }\n    }\n    public static void main(String[] args) {\n  \
    \  assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcmzs9pq3.java:58)\n"
  stdout: ''
  timestamp: 1659800393
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (array.size() == 0) {\n        \
    \    return result;\n        }\n        if (array.size() == 1) {\n           \
    \ result.add(array.get(0));\n            return result;\n        }\n        if\
    \ (array.size() == 2) {\n            if ((array.get(0) + array.get(1)) % 2 ==\
    \ 0) {\n                result.add(array.get(1));\n                result.add(array.get(0));\n\
    \                return result;\n            } else {\n                result.add(array.get(0));\n\
    \                result.add(array.get(1));\n                return result;\n \
    \           }\n        }\n        ArrayList<Long> odd = new ArrayList<Long>();\n\
    \        ArrayList<Long> even = new ArrayList<Long>();\n        for (int i = 0;\
    \ i < array.size(); i++) {\n            if (array.get(i) % 2 == 0) {\n       \
    \         even.add(array.get(i));\n            } else {\n                odd.add(array.get(i));\n\
    \            }\n        }\n        Collections.sort(odd);\n        Collections.sort(even);\n\
    \        if ((array.get(0) + array.get(array.size() - 1)) % 2 == 0) {\n      \
    \      Collections.reverse(even);\n        }\n        for (int i = 0; i < odd.size();\
    \ i++) {\n            result.add(odd.get(i));\n        }\n        for (int i =\
    \ 0; i < even.size(); i++) {\n            result.add(even.get(i));\n        }\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_kro5199.java:68)\n"
  stdout: ''
  timestamp: 1659800395
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        ArrayList<Long> even = new ArrayList<Long>();\n\
    \        ArrayList<Long> odd = new ArrayList<Long>();\n        for (int i = 0;\
    \ i < array.size(); i++) {\n            if (array.get(i) % 2 == 0) {\n       \
    \         even.add(array.get(i));\n            } else {\n                odd.add(array.get(i));\n\
    \            }\n        }\n        Collections.sort(even);\n        Collections.sort(odd);\n\
    \        Collections.reverse(odd);\n        for (int i = 0; i < odd.size(); i++)\
    \ {\n            result.add(odd.get(i));\n        }\n        for (int i = 0; i\
    \ < even.size(); i++) {\n            result.add(even.get(i));\n        }\n   \
    \     return result;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7ooz4ch4.java:48)\n"
  stdout: ''
  timestamp: 1659800395
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (array.size() == 0) {\n        \
    \    return result;\n        }\n        if (array.size() == 1) {\n           \
    \ result.add(array.get(0));\n            return result;\n        }\n        if\
    \ (array.size() == 2) {\n            if ((array.get(0) + array.get(1)) % 2 ==\
    \ 0) {\n                result.add(array.get(1));\n                result.add(array.get(0));\n\
    \                return result;\n            } else {\n                result.add(array.get(0));\n\
    \                result.add(array.get(1));\n                return result;\n \
    \           }\n        }\n        int i = 0;\n        int j = array.size() - 1;\n\
    \        while (i < j) {\n            if ((array.get(i) + array.get(j)) % 2 ==\
    \ 0) {\n                result.add(array.get(j));\n                result.add(array.get(i));\n\
    \                i++;\n                j--;\n            } else {\n          \
    \      result.add(array.get(i));\n                result.add(array.get(j));\n\
    \                i++;\n                j--;\n            }\n        }\n      \
    \  if (i == j) {\n            result.add(array.get(i));\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmputsd_296.java:66)\n"
  stdout: ''
  timestamp: 1659800396
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        return null;\n \
    \   }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.sortArray(java.util.ArrayList)\"\
    \ is null\n\tat Problem.main(tmpmx0ttyzx.java:27)\n"
  stdout: ''
  timestamp: 1659800393
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (array.size() == 0) {\n        \
    \    return result;\n        }\n        if (array.size() == 1) {\n           \
    \ result.add(array.get(0));\n            return result;\n        }\n        if\
    \ (array.size() == 2) {\n            if ((array.get(0) + array.get(1)) % 2 ==\
    \ 0) {\n                result.add(array.get(1));\n                result.add(array.get(0));\n\
    \                return result;\n            } else {\n                result.add(array.get(0));\n\
    \                result.add(array.get(1));\n                return result;\n \
    \           }\n        }\n        ArrayList<Long> odd = new ArrayList<Long>();\n\
    \        ArrayList<Long> even = new ArrayList<Long>();\n        for (int i = 0;\
    \ i < array.size(); i++) {\n            if (array.get(i) % 2 == 0) {\n       \
    \         even.add(array.get(i));\n            } else {\n                odd.add(array.get(i));\n\
    \            }\n        }\n        Collections.sort(odd);\n        Collections.sort(even);\n\
    \        if ((array.get(0) + array.get(array.size() - 1)) % 2 == 0) {\n      \
    \      Collections.reverse(even);\n        }\n        for (int i = 0; i < odd.size();\
    \ i++) {\n            result.add(odd.get(i));\n        }\n        for (int i =\
    \ 0; i < even.size(); i++) {\n            result.add(even.get(i));\n        }\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_kro5199.java:68)\n"
  stdout: ''
  timestamp: 1659800395
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        for (Long i : array) {\n          \
    \  result.add(i);\n        }\n        if (array.size() > 0) {\n            if\
    \ ((array.get(0) + array.get(array.size() - 1)) % 2 == 0) {\n                Collections.sort(result,\
    \ Collections.reverseOrder());\n            } else {\n                Collections.sort(result);\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800396
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (array.size() == 0) {\n        \
    \    return result;\n        }\n        if (array.size() == 1) {\n           \
    \ result.add(array.get(0));\n            return result;\n        }\n        if\
    \ (array.size() == 2) {\n            result.add(array.get(0));\n            result.add(array.get(1));\n\
    \            return result;\n        }\n        if (array.size() > 2) {\n    \
    \        if ((array.get(0) + array.get(array.size() - 1)) % 2 == 0) {\n      \
    \          result.add(array.get(0));\n                result.add(array.get(array.size()\
    \ - 1));\n                array.remove(0);\n                array.remove(array.size()\
    \ - 1);\n                while (array.size() > 0) {\n                    result.add(array.get(0));\n\
    \                    array.remove(0);\n                }\n                return\
    \ result;\n            } else {\n                result.add(array.get(array.size()\
    \ - 1));\n                result.add(array.get(0));\n                array.remove(array.size()\
    \ - 1);\n                array.remove(0);\n                while (array.size()\
    \ > 0) {\n                    result.add(array.get(0));\n                    array.remove(0);\n\
    \                }\n                return result;\n            }\n        }\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplbcm2h3o.java:65)\n"
  stdout: ''
  timestamp: 1659800396
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        return array;\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmqnnwgz6.java:29)\n"
  stdout: ''
  timestamp: 1659800393
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        if (array.size()\
    \ == 0) {\n            return array;\n        }\n        if (array.size() == 1)\
    \ {\n            return array;\n        }\n        if (array.size() == 2) {\n\
    \            if (array.get(0) > array.get(1)) {\n                Long temp = array.get(0);\n\
    \                array.set(0, array.get(1));\n                array.set(1, temp);\n\
    \            }\n            return array;\n        }\n        ArrayList<Long>\
    \ left = new ArrayList<Long>();\n        ArrayList<Long> right = new ArrayList<Long>();\n\
    \        for (int i = 0; i < array.size(); i++) {\n            if (i < array.size()\
    \ / 2) {\n                left.add(array.get(i));\n            } else {\n    \
    \            right.add(array.get(i));\n            }\n        }\n        left\
    \ = sortArray(left);\n        right = sortArray(right);\n        return merge(left,\
    \ right);\n    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpf6y4zpq3.java:49: error: cannot find symbol\n        return merge(left,\
    \ right);\n               ^\n  symbol:   method merge(ArrayList<Long>,ArrayList<Long>)\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659800396
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (array.size() == 0) {\n        \
    \    return result;\n        }\n        if (array.size() == 1) {\n           \
    \ result.add(array.get(0));\n            return result;\n        }\n        if\
    \ (array.size() == 2) {\n            if ((array.get(0) + array.get(1)) % 2 ==\
    \ 0) {\n                result.add(array.get(1));\n                result.add(array.get(0));\n\
    \                return result;\n            } else {\n                result.add(array.get(0));\n\
    \                result.add(array.get(1));\n                return result;\n \
    \           }\n        }\n        if ((array.get(0) + array.get(array.size() -\
    \ 1)) % 2 == 0) {\n            for (int i = 0; i < array.size(); i++) {\n    \
    \            if (i % 2 == 0) {\n                    result.add(array.get(array.size()\
    \ - 1 - i / 2));\n                } else {\n                    result.add(array.get(i\
    \ / 2));\n                }\n            }\n        } else {\n            for\
    \ (int i = 0; i < array.size(); i++) {\n                if (i % 2 == 0) {\n  \
    \                  result.add(array.get(i / 2));\n                } else {\n \
    \                   result.add(array.get(array.size() - 1 - i / 2));\n       \
    \         }\n            }\n        }\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp84qj5ilh.java:65)\n"
  stdout: ''
  timestamp: 1659800393
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        return null;\n \
    \   }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.sortArray(java.util.ArrayList)\"\
    \ is null\n\tat Problem.main(tmpmx0ttyzx.java:27)\n"
  stdout: ''
  timestamp: 1659800393
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        ArrayList<Long>\
    \ sorted = new ArrayList<Long>();\n        if (array.size() == 0) {\n        \
    \    return sorted;\n        }\n        if (array.size() == 1) {\n           \
    \ sorted.add(array.get(0));\n            return sorted;\n        }\n        if\
    \ (array.size() == 2) {\n            if (array.get(0) > array.get(1)) {\n    \
    \            sorted.add(array.get(1));\n                sorted.add(array.get(0));\n\
    \            } else {\n                sorted.add(array.get(0));\n           \
    \     sorted.add(array.get(1));\n            }\n            return sorted;\n \
    \       }\n        if ((array.get(0) + array.get(array.size() - 1)) % 2 == 0)\
    \ {\n            for (int i = 0; i < array.size(); i++) {\n                sorted.add(array.get(array.size()\
    \ - 1 - i));\n            }\n        } else {\n            for (int i = 0; i <\
    \ array.size(); i++) {\n                sorted.add(array.get(i));\n          \
    \  }\n        }\n        return sorted;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpchh6cu8n.java:56)\n"
  stdout: ''
  timestamp: 1659800396
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        ArrayList<Long>\
    \ sorted = new ArrayList<Long>();\n        if (array.size() == 0) {\n        \
    \    return array;\n        }\n        if (array.size() == 1) {\n            return\
    \ array;\n        }\n        if (array.size() == 2) {\n            if (array.get(0)\
    \ > array.get(1)) {\n                sorted.add(array.get(1));\n             \
    \   sorted.add(array.get(0));\n            } else {\n                sorted.add(array.get(0));\n\
    \                sorted.add(array.get(1));\n            }\n            return\
    \ sorted;\n        }\n        if ((array.get(0) + array.get(array.size() - 1))\
    \ % 2 == 0) {\n            sorted = sortArray(array, true);\n        } else {\n\
    \            sorted = sortArray(array, false);\n        }\n        return sorted;\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzfbgv0nu.java:42: error: method sortArray in class Problem cannot\
    \ be applied to given types;\n            sorted = sortArray(array, true);\n \
    \                    ^\n  required: ArrayList<Long>\n  found:    ArrayList<Long>,boolean\n\
    \  reason: actual and formal argument lists differ in length\n/tmp/tmpzfbgv0nu.java:44:\
    \ error: method sortArray in class Problem cannot be applied to given types;\n\
    \            sorted = sortArray(array, false);\n                     ^\n  required:\
    \ ArrayList<Long>\n  found:    ArrayList<Long>,boolean\n  reason: actual and formal\
    \ argument lists differ in length\n2 errors\n"
  stdout: ''
  timestamp: 1659800396
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        ArrayList<Long>\
    \ ret = new ArrayList<Long>();\n        if (array.size() == 0) {\n           \
    \ return ret;\n        }\n        if (array.size() == 1) {\n            ret.add(array.get(0));\n\
    \            return ret;\n        }\n        if (array.size() == 2) {\n      \
    \      if (array.get(0) > array.get(1)) {\n                ret.add(array.get(1));\n\
    \                ret.add(array.get(0));\n            } else {\n              \
    \  ret.add(array.get(0));\n                ret.add(array.get(1));\n          \
    \  }\n            return ret;\n        }\n        if ((array.get(0) + array.get(array.size()\
    \ - 1)) % 2 == 0) {\n            return sortArrayDesc(array);\n        } else\
    \ {\n            return sortArrayAsc(array);\n        }\n    }\n    public static\
    \ void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprk7yw8x5.java:43: error: cannot find symbol\n            return\
    \ sortArrayDesc(array);\n                   ^\n  symbol:   method sortArrayDesc(ArrayList<Long>)\n\
    \  location: class Problem\n/tmp/tmprk7yw8x5.java:45: error: cannot find symbol\n\
    \            return sortArrayAsc(array);\n                   ^\n  symbol:   method\
    \ sortArrayAsc(ArrayList<Long>)\n  location: class Problem\n2 errors\n"
  stdout: ''
  timestamp: 1659800396
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        return array;\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmqnnwgz6.java:29)\n"
  stdout: ''
  timestamp: 1659800393
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (array.size() == 0) {\n        \
    \    return result;\n        }\n        if (array.size() == 1) {\n           \
    \ result.add(array.get(0));\n            return result;\n        }\n        if\
    \ (array.size() == 2) {\n            if ((array.get(0) + array.get(1)) % 2 ==\
    \ 0) {\n                result.add(array.get(1));\n                result.add(array.get(0));\n\
    \                return result;\n            } else {\n                result.add(array.get(0));\n\
    \                result.add(array.get(1));\n                return result;\n \
    \           }\n        }\n        if ((array.get(0) + array.get(array.size() -\
    \ 1)) % 2 == 0) {\n            for (int i = 0; i < array.size(); i++) {\n    \
    \            if (i % 2 == 0) {\n                    result.add(array.get(array.size()\
    \ - 1 - i / 2));\n                } else {\n                    result.add(array.get(i\
    \ / 2));\n                }\n            }\n        } else {\n            for\
    \ (int i = 0; i < array.size(); i++) {\n                if (i % 2 == 0) {\n  \
    \                  result.add(array.get(i / 2));\n                } else {\n \
    \                   result.add(array.get(array.size() - 1 - i / 2));\n       \
    \         }\n            }\n        }\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp84qj5ilh.java:65)\n"
  stdout: ''
  timestamp: 1659800393
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (array.size() == 0) {\n        \
    \    return result;\n        }\n        if (array.size() == 1) {\n           \
    \ result.add(array.get(0));\n            return result;\n        }\n        if\
    \ (array.size() == 2) {\n            if ((array.get(0) + array.get(1)) % 2 ==\
    \ 0) {\n                result.add(array.get(1));\n                result.add(array.get(0));\n\
    \                return result;\n            } else {\n                result.add(array.get(0));\n\
    \                result.add(array.get(1));\n                return result;\n \
    \           }\n        }\n        if ((array.get(0) + array.get(array.size() -\
    \ 1)) % 2 == 0) {\n            for (int i = array.size() - 1; i >= 0; i--) {\n\
    \                result.add(array.get(i));\n            }\n            return\
    \ result;\n        } else {\n            for (int i = 0; i < array.size(); i++)\
    \ {\n                result.add(array.get(i));\n            }\n            return\
    \ result;\n        }\n    }\n    public static void main(String[] args) {\n  \
    \  assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcmzs9pq3.java:58)\n"
  stdout: ''
  timestamp: 1659800393
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (array.size() == 0) {\n        \
    \    return result;\n        }\n        if (array.size() == 1) {\n           \
    \ result.add(array.get(0));\n            return result;\n        }\n        if\
    \ (array.size() == 2) {\n            if ((array.get(0) + array.get(1)) % 2 ==\
    \ 0) {\n                result.add(array.get(1));\n                result.add(array.get(0));\n\
    \                return result;\n            } else {\n                result.add(array.get(0));\n\
    \                result.add(array.get(1));\n                return result;\n \
    \           }\n        }\n        ArrayList<Long> even = new ArrayList<Long>();\n\
    \        ArrayList<Long> odd = new ArrayList<Long>();\n        for (int i = 0;\
    \ i < array.size(); i++) {\n            if (array.get(i) % 2 == 0) {\n       \
    \         even.add(array.get(i));\n            } else {\n                odd.add(array.get(i));\n\
    \            }\n        }\n        Collections.sort(even);\n        Collections.sort(odd);\n\
    \        if ((array.get(0) + array.get(array.size() - 1)) % 2 == 0) {\n      \
    \      Collections.reverse(even);\n            Collections.reverse(odd);\n   \
    \     }\n        for (int i = 0; i < odd.size(); i++) {\n            result.add(odd.get(i));\n\
    \        }\n        for (int i = 0; i < even.size(); i++) {\n            result.add(even.get(i));\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzzmdpsld.java:69)\n"
  stdout: ''
  timestamp: 1659800396
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        return array;\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmqnnwgz6.java:29)\n"
  stdout: ''
  timestamp: 1659800393
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (array.size() == 0) {\n        \
    \    return result;\n        }\n        if (array.size() == 1) {\n           \
    \ result.add(array.get(0));\n            return result;\n        }\n        if\
    \ (array.size() == 2) {\n            if ((array.get(0) + array.get(1)) % 2 ==\
    \ 0) {\n                result.add(array.get(1));\n                result.add(array.get(0));\n\
    \                return result;\n            } else {\n                result.add(array.get(0));\n\
    \                result.add(array.get(1));\n                return result;\n \
    \           }\n        }\n        if ((array.get(0) + array.get(array.size() -\
    \ 1)) % 2 == 0) {\n            for (int i = 0; i < array.size(); i++) {\n    \
    \            if (i % 2 == 0) {\n                    result.add(array.get(array.size()\
    \ - i - 1));\n                } else {\n                    result.add(array.get(i));\n\
    \                }\n            }\n        } else {\n            for (int i =\
    \ 0; i < array.size(); i++) {\n                if (i % 2 == 0) {\n           \
    \         result.add(array.get(i));\n                } else {\n              \
    \      result.add(array.get(array.size() - i - 1));\n                }\n     \
    \       }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7t4yhi0k.java:65)\n"
  stdout: ''
  timestamp: 1659800396
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        return array;\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmqnnwgz6.java:29)\n"
  stdout: ''
  timestamp: 1659800393
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        ArrayList<Long> odd = new ArrayList<Long>();\n\
    \        ArrayList<Long> even = new ArrayList<Long>();\n        for (Long i :\
    \ array) {\n            if (i % 2 == 0) {\n                even.add(i);\n    \
    \        } else {\n                odd.add(i);\n            }\n        }\n   \
    \     Collections.sort(odd);\n        Collections.sort(even);\n        Collections.reverse(even);\n\
    \        result.addAll(odd);\n        result.addAll(even);\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpr6zufhhz.java:44)\n"
  stdout: ''
  timestamp: 1659800393
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        ArrayList<Long>\
    \ sorted = new ArrayList<Long>();\n        ArrayList<Long> evens = new ArrayList<Long>();\n\
    \        ArrayList<Long> odds = new ArrayList<Long>();\n        for (Long i :\
    \ array) {\n            if (i % 2 == 0) {\n                evens.add(i);\n   \
    \         } else {\n                odds.add(i);\n            }\n        }\n \
    \       Collections.sort(evens);\n        Collections.sort(odds);\n        Collections.reverse(odds);\n\
    \        sorted.addAll(odds);\n        sorted.addAll(evens);\n        return sorted;\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0q1hgcu0.java:44)\n"
  stdout: ''
  timestamp: 1659800396
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (array.size() == 0) {\n        \
    \    return result;\n        }\n        if (array.size() == 1) {\n           \
    \ result.add(array.get(0));\n            return result;\n        }\n        if\
    \ (array.size() == 2) {\n            if ((array.get(0) + array.get(1)) % 2 ==\
    \ 0) {\n                result.add(array.get(1));\n                result.add(array.get(0));\n\
    \                return result;\n            } else {\n                result.add(array.get(0));\n\
    \                result.add(array.get(1));\n                return result;\n \
    \           }\n        }\n        ArrayList<Long> odd = new ArrayList<Long>();\n\
    \        ArrayList<Long> even = new ArrayList<Long>();\n        for (int i = 0;\
    \ i < array.size(); i++) {\n            if (array.get(i) % 2 == 0) {\n       \
    \         even.add(array.get(i));\n            } else {\n                odd.add(array.get(i));\n\
    \            }\n        }\n        Collections.sort(odd);\n        Collections.sort(even);\n\
    \        Collections.reverse(even);\n        for (int i = 0; i < odd.size(); i++)\
    \ {\n            result.add(odd.get(i));\n        }\n        for (int i = 0; i\
    \ < even.size(); i++) {\n            result.add(even.get(i));\n        }\n   \
    \     return result;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo_v2cej3.java:66)\n"
  stdout: ''
  timestamp: 1659800396
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        return array;\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmqnnwgz6.java:29)\n"
  stdout: ''
  timestamp: 1659800393
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        for (int i = 0; i < array.size(); i++)\
    \ {\n            result.add(array.get(i));\n        }\n        if (result.size()\
    \ > 0) {\n            if ((result.get(0) + result.get(result.size() - 1)) % 2\
    \ == 0) {\n                Collections.sort(result, Collections.reverseOrder());\n\
    \            } else {\n                Collections.sort(result);\n           \
    \ }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800393
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        ArrayList<Long>\
    \ sortedArray = new ArrayList<Long>();\n        ArrayList<Long> oddArray = new\
    \ ArrayList<Long>();\n        ArrayList<Long> evenArray = new ArrayList<Long>();\n\
    \        for (Long i : array) {\n            if (i % 2 == 0) {\n             \
    \   evenArray.add(i);\n            } else {\n                oddArray.add(i);\n\
    \            }\n        }\n        Collections.sort(oddArray);\n        Collections.sort(evenArray,\
    \ Collections.reverseOrder());\n        sortedArray.addAll(oddArray);\n      \
    \  sortedArray.addAll(evenArray);\n        return sortedArray;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2vp5edy_.java:43)\n"
  stdout: ''
  timestamp: 1659800396
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        ArrayList<Long>\
    \ sortedArray = new ArrayList<Long>();\n        if (array.size() == 0) {\n   \
    \         return sortedArray;\n        }\n        if (array.size() == 1) {\n \
    \           sortedArray.add(array.get(0));\n            return sortedArray;\n\
    \        }\n        if (array.size() == 2) {\n            if ((array.get(0) +\
    \ array.get(1)) % 2 == 0) {\n                sortedArray.add(array.get(1));\n\
    \                sortedArray.add(array.get(0));\n                return sortedArray;\n\
    \            } else {\n                sortedArray.add(array.get(0));\n      \
    \          sortedArray.add(array.get(1));\n                return sortedArray;\n\
    \            }\n        }\n        if ((array.get(0) + array.get(array.size()\
    \ - 1)) % 2 == 0) {\n            for (int i = 0; i < array.size(); i++) {\n  \
    \              if (i % 2 == 0) {\n                    sortedArray.add(array.get(array.size()\
    \ - 1 - i));\n                } else {\n                    sortedArray.add(array.get(i));\n\
    \                }\n            }\n        } else {\n            for (int i =\
    \ 0; i < array.size(); i++) {\n                if (i % 2 == 0) {\n           \
    \         sortedArray.add(array.get(i));\n                } else {\n         \
    \           sortedArray.add(array.get(array.size() - 1 - i));\n              \
    \  }\n            }\n        }\n        return sortedArray;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7loqovak.java:65)\n"
  stdout: ''
  timestamp: 1659800394
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        return array;\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmqnnwgz6.java:29)\n"
  stdout: ''
  timestamp: 1659800393
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        // Write your code\
    \ here\n        // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        return array;\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8rd1kz2p.java:32)\n"
  stdout: ''
  timestamp: 1659800393
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (array.size() == 0) {\n        \
    \    return result;\n        }\n        if (array.size() == 1) {\n           \
    \ result.add(array.get(0));\n            return result;\n        }\n        if\
    \ (array.size() > 1) {\n            if ((array.get(0) + array.get(array.size()\
    \ - 1)) % 2 == 0) {\n                Collections.sort(array, Collections.reverseOrder());\n\
    \            } else {\n                Collections.sort(array);\n            }\n\
    \            return array;\n        }\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800396
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        return null;\n \
    \   }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.sortArray(java.util.ArrayList)\"\
    \ is null\n\tat Problem.main(tmpmx0ttyzx.java:27)\n"
  stdout: ''
  timestamp: 1659800393
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        return array;\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmqnnwgz6.java:29)\n"
  stdout: ''
  timestamp: 1659800393
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        ArrayList<Long>\
    \ array1 = new ArrayList<Long>();\n        ArrayList<Long> array2 = new ArrayList<Long>();\n\
    \        for (int i = 0; i < array.size(); i++) {\n            if (i % 2 == 0)\
    \ {\n                array1.add(array.get(i));\n            } else {\n       \
    \         array2.add(array.get(i));\n            }\n        }\n        Collections.sort(array1);\n\
    \        Collections.sort(array2, Collections.reverseOrder());\n        ArrayList<Long>\
    \ array3 = new ArrayList<Long>();\n        for (int i = 0; i < array.size(); i++)\
    \ {\n            if (i % 2 == 0) {\n                array3.add(array1.get(i /\
    \ 2));\n            } else {\n                array3.add(array2.get(i / 2));\n\
    \            }\n        }\n        return array3;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpg3ov603d.java:48)\n"
  stdout: ''
  timestamp: 1659800396
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        ArrayList<Long>\
    \ sortedArray = new ArrayList<Long>();\n        int sum = 0;\n        for (int\
    \ i = 0; i < array.size(); i++) {\n            sum += array.get(i);\n        }\n\
    \        if (sum % 2 == 0) {\n            Collections.sort(array, Collections.reverseOrder());\n\
    \        } else {\n            Collections.sort(array);\n        }\n        return\
    \ array;\n    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqhfapxg_.java:40)\n"
  stdout: ''
  timestamp: 1659800396
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        return array;\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmqnnwgz6.java:29)\n"
  stdout: ''
  timestamp: 1659800393
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        return array;\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmqnnwgz6.java:29)\n"
  stdout: ''
  timestamp: 1659800393
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (array.size() == 0) {\n        \
    \    return result;\n        }\n        if (array.size() == 1) {\n           \
    \ result.add(array.get(0));\n            return result;\n        }\n        if\
    \ (array.size() == 2) {\n            if ((array.get(0) + array.get(1)) % 2 ==\
    \ 0) {\n                result.add(array.get(1));\n                result.add(array.get(0));\n\
    \                return result;\n            } else {\n                result.add(array.get(0));\n\
    \                result.add(array.get(1));\n                return result;\n \
    \           }\n        }\n        if ((array.get(0) + array.get(array.size() -\
    \ 1)) % 2 == 0) {\n            result.add(array.get(array.size() - 1));\n    \
    \        result.addAll(sortArray(new ArrayList<Long>(array.subList(1, array.size()\
    \ - 1))));\n            result.add(array.get(0));\n            return result;\n\
    \        } else {\n            result.add(array.get(0));\n            result.addAll(sortArray(new\
    \ ArrayList<Long>(array.subList(1, array.size() - 1))));\n            result.add(array.get(array.size()\
    \ - 1));\n            return result;\n        }\n    }\n    public static void\
    \ main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpd_bcyrsx.java:58)\n"
  stdout: ''
  timestamp: 1659800395
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        return array;\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmqnnwgz6.java:29)\n"
  stdout: ''
  timestamp: 1659800393
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (array.size() == 0) {\n        \
    \    return result;\n        }\n        if (array.size() == 1) {\n           \
    \ result.add(array.get(0));\n            return result;\n        }\n        if\
    \ (array.size() == 2) {\n            if ((array.get(0) + array.get(1)) % 2 ==\
    \ 0) {\n                result.add(array.get(1));\n                result.add(array.get(0));\n\
    \                return result;\n            } else {\n                result.add(array.get(0));\n\
    \                result.add(array.get(1));\n                return result;\n \
    \           }\n        }\n        if ((array.get(0) + array.get(array.size() -\
    \ 1)) % 2 == 0) {\n            result.add(array.get(array.size() - 1));\n    \
    \        result.addAll(sortArray(new ArrayList<Long>(array.subList(1, array.size()\
    \ - 1))));\n            result.add(array.get(0));\n            return result;\n\
    \        } else {\n            result.add(array.get(0));\n            result.addAll(sortArray(new\
    \ ArrayList<Long>(array.subList(1, array.size() - 1))));\n            result.add(array.get(array.size()\
    \ - 1));\n            return result;\n        }\n    }\n    public static void\
    \ main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpd_bcyrsx.java:58)\n"
  stdout: ''
  timestamp: 1659800395
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (array.size() == 0) {\n        \
    \    return result;\n        }\n        if (array.size() == 1) {\n           \
    \ result.add(array.get(0));\n            return result;\n        }\n        int\
    \ first = 0;\n        int last = array.size() - 1;\n        if ((array.get(first)\
    \ + array.get(last)) % 2 == 0) {\n            while (first <= last) {\n      \
    \          result.add(array.get(last));\n                result.add(array.get(first));\n\
    \                first++;\n                last--;\n            }\n        } else\
    \ {\n            while (first <= last) {\n                result.add(array.get(first));\n\
    \                result.add(array.get(last));\n                first++;\n    \
    \            last--;\n            }\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwas07w8s.java:54)\n"
  stdout: ''
  timestamp: 1659800396
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        return null;\n \
    \   }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.sortArray(java.util.ArrayList)\"\
    \ is null\n\tat Problem.main(tmpmx0ttyzx.java:27)\n"
  stdout: ''
  timestamp: 1659800393
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        return array;\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmqnnwgz6.java:29)\n"
  stdout: ''
  timestamp: 1659800393
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (array.size() == 0) {\n        \
    \    return result;\n        }\n        if (array.size() == 1) {\n           \
    \ result.add(array.get(0));\n            return result;\n        }\n        if\
    \ (array.size() == 2) {\n            if ((array.get(0) + array.get(1)) % 2 ==\
    \ 0) {\n                result.add(array.get(1));\n                result.add(array.get(0));\n\
    \                return result;\n            } else {\n                result.add(array.get(0));\n\
    \                result.add(array.get(1));\n                return result;\n \
    \           }\n        }\n        if ((array.get(0) + array.get(array.size() -\
    \ 1)) % 2 == 0) {\n            for (int i = array.size() - 1; i >= 0; i--) {\n\
    \                result.add(array.get(i));\n            }\n            return\
    \ result;\n        } else {\n            for (int i = 0; i < array.size(); i++)\
    \ {\n                result.add(array.get(i));\n            }\n            return\
    \ result;\n        }\n    }\n    public static void main(String[] args) {\n  \
    \  assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcmzs9pq3.java:58)\n"
  stdout: ''
  timestamp: 1659800393
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (array.size() == 0) {\n        \
    \    return result;\n        }\n        if (array.size() == 1) {\n           \
    \ result.add(array.get(0));\n            return result;\n        }\n        if\
    \ (array.size() == 2) {\n            if ((array.get(0) + array.get(1)) % 2 ==\
    \ 0) {\n                result.add(array.get(1));\n                result.add(array.get(0));\n\
    \                return result;\n            } else {\n                result.add(array.get(0));\n\
    \                result.add(array.get(1));\n                return result;\n \
    \           }\n        }\n        ArrayList<Long> odd = new ArrayList<Long>();\n\
    \        ArrayList<Long> even = new ArrayList<Long>();\n        for (int i = 0;\
    \ i < array.size(); i++) {\n            if (array.get(i) % 2 == 0) {\n       \
    \         even.add(array.get(i));\n            } else {\n                odd.add(array.get(i));\n\
    \            }\n        }\n        Collections.sort(odd);\n        Collections.sort(even);\n\
    \        if ((array.get(0) + array.get(array.size() - 1)) % 2 == 0) {\n      \
    \      Collections.reverse(even);\n        }\n        for (int i = 0; i < odd.size();\
    \ i++) {\n            result.add(odd.get(i));\n        }\n        for (int i =\
    \ 0; i < even.size(); i++) {\n            result.add(even.get(i));\n        }\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_kro5199.java:68)\n"
  stdout: ''
  timestamp: 1659800395
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        // Write your code\
    \ here\n        // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        return array;\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8rd1kz2p.java:32)\n"
  stdout: ''
  timestamp: 1659800393
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (array.size() == 0) {\n        \
    \    return result;\n        }\n        if (array.size() == 1) {\n           \
    \ result.add(array.get(0));\n            return result;\n        }\n        if\
    \ (array.size() == 2) {\n            if ((array.get(0) + array.get(1)) % 2 ==\
    \ 0) {\n                result.add(array.get(1));\n                result.add(array.get(0));\n\
    \                return result;\n            } else {\n                result.add(array.get(0));\n\
    \                result.add(array.get(1));\n                return result;\n \
    \           }\n        }\n        if ((array.get(0) + array.get(array.size() -\
    \ 1)) % 2 == 0) {\n            for (int i = array.size() - 1; i >= 0; i--) {\n\
    \                result.add(array.get(i));\n            }\n            return\
    \ result;\n        } else {\n            for (int i = 0; i < array.size(); i++)\
    \ {\n                result.add(array.get(i));\n            }\n            return\
    \ result;\n        }\n    }\n    public static void main(String[] args) {\n  \
    \  assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcmzs9pq3.java:58)\n"
  stdout: ''
  timestamp: 1659800393
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        ArrayList<Long>\
    \ sorted = new ArrayList<Long>();\n        ArrayList<Long> even = new ArrayList<Long>();\n\
    \        ArrayList<Long> odd = new ArrayList<Long>();\n        for (Long i : array)\
    \ {\n            if (i % 2 == 0) {\n                even.add(i);\n           \
    \ } else {\n                odd.add(i);\n            }\n        }\n        Collections.sort(even);\n\
    \        Collections.sort(odd);\n        if (even.size() > 0 && odd.size() > 0)\
    \ {\n            if ((even.get(0) + odd.get(odd.size() - 1)) % 2 == 0) {\n   \
    \             Collections.reverse(odd);\n            }\n        }\n        sorted.addAll(odd);\n\
    \        sorted.addAll(even);\n        return sorted;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpap43qpcn.java:48)\n"
  stdout: ''
  timestamp: 1659800396
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (array.size() == 0) {\n        \
    \    return array;\n        }\n        if (array.size() == 1) {\n            return\
    \ array;\n        }\n        if (array.size() == 2) {\n            if (array.get(0)\
    \ > array.get(1)) {\n                result.add(array.get(1));\n             \
    \   result.add(array.get(0));\n                return result;\n            } else\
    \ {\n                return array;\n            }\n        }\n        if (array.size()\
    \ == 3) {\n            if (array.get(0) > array.get(1)) {\n                result.add(array.get(1));\n\
    \                result.add(array.get(0));\n                if (result.get(0)\
    \ > array.get(2)) {\n                    result.add(0, array.get(2));\n      \
    \          } else {\n                    if (result.get(1) > array.get(2)) {\n\
    \                        result.add(1, array.get(2));\n                    } else\
    \ {\n                        result.add(array.get(2));\n                    }\n\
    \                }\n                return result;\n            } else {\n   \
    \             if (array.get(0) > array.get(2)) {\n                    result.add(array.get(2));\n\
    \                    result.add(array.get(0));\n                    result.add(array.get(1));\n\
    \                } else {\n                    if (array.get(1) > array.get(2))\
    \ {\n                        result.add(array.get(0));\n                     \
    \   result.add(array.get(2));\n                        result.add(array.get(1));\n\
    \                    } else {\n                        result.add(array.get(0));\n\
    \                        result.add(array.get(1));\n                        result.add(array.get(2));\n\
    \                    }\n                }\n                return result;\n  \
    \          }\n        }\n        if (array.size() > 3) {\n            if (array.get(0)\
    \ > array.get(1)) {\n                result.add(array.get(1));\n             \
    \   result.add(array.get(0));\n    }\n    public static void main(String[] args)\
    \ {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpw6odcno1.java:78: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n1 error\n"
  stdout: ''
  timestamp: 1659800395
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (array.size() == 0) {\n        \
    \    return result;\n        }\n        if (array.size() == 1) {\n           \
    \ result.add(array.get(0));\n            return result;\n        }\n        if\
    \ (array.size() == 2) {\n            if ((array.get(0) + array.get(1)) % 2 ==\
    \ 0) {\n                result.add(array.get(1));\n                result.add(array.get(0));\n\
    \                return result;\n            } else {\n                result.add(array.get(0));\n\
    \                result.add(array.get(1));\n                return result;\n \
    \           }\n        }\n        if ((array.get(0) + array.get(array.size() -\
    \ 1)) % 2 == 0) {\n            for (int i = array.size() - 1; i >= 0; i--) {\n\
    \                result.add(array.get(i));\n            }\n            return\
    \ result;\n        } else {\n            for (int i = 0; i < array.size(); i++)\
    \ {\n                result.add(array.get(i));\n            }\n            return\
    \ result;\n        }\n    }\n    public static void main(String[] args) {\n  \
    \  assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcmzs9pq3.java:58)\n"
  stdout: ''
  timestamp: 1659800393
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        return null;\n \
    \   }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.sortArray(java.util.ArrayList)\"\
    \ is null\n\tat Problem.main(tmpmx0ttyzx.java:27)\n"
  stdout: ''
  timestamp: 1659800393
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        if (array.size()\
    \ <= 1) {\n            return array;\n        }\n        ArrayList<Long> left\
    \ = new ArrayList<Long>();\n        ArrayList<Long> right = new ArrayList<Long>();\n\
    \        for (int i = 1; i < array.size(); i++) {\n            if (array.get(i)\
    \ < array.get(0)) {\n                left.add(array.get(i));\n            } else\
    \ {\n                right.add(array.get(i));\n            }\n        }\n    \
    \    left = sortArray(left);\n        right = sortArray(right);\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        for (int i = 0; i < left.size(); i++)\
    \ {\n            result.add(left.get(i));\n        }\n        result.add(array.get(0));\n\
    \        for (int i = 0; i < right.size(); i++) {\n            result.add(right.get(i));\n\
    \        }\n        if ((array.get(0) + array.get(array.size() - 1)) % 2 == 0)\
    \ {\n            Collections.reverse(result);\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5u1pm0e8.java:55)\n"
  stdout: ''
  timestamp: 1659800396
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        return null;\n \
    \   }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.sortArray(java.util.ArrayList)\"\
    \ is null\n\tat Problem.main(tmpmx0ttyzx.java:27)\n"
  stdout: ''
  timestamp: 1659800393
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (array.size() == 0) {\n        \
    \    return result;\n        }\n        if (array.size() == 1) {\n           \
    \ result.add(array.get(0));\n            return result;\n        }\n        if\
    \ (array.size() == 2) {\n            result.add(array.get(0));\n            result.add(array.get(1));\n\
    \            return result;\n        }\n        if (array.size() == 3) {\n   \
    \         result.add(array.get(0));\n            result.add(array.get(1));\n \
    \           result.add(array.get(2));\n            return result;\n        }\n\
    \        if (array.size() == 4) {\n            result.add(array.get(0));\n   \
    \         result.add(array.get(1));\n            result.add(array.get(2));\n \
    \           result.add(array.get(3));\n            return result;\n        }\n\
    \        if (array.size() == 5) {\n            result.add(array.get(0));\n   \
    \         result.add(array.get(1));\n            result.add(array.get(2));\n \
    \           result.add(array.get(3));\n            result.add(array.get(4));\n\
    \            return result;\n        }\n        if (array.size() == 6) {\n   \
    \         result.add(array.get(0));\n            result.add(array.get(1));\n \
    \           result.add(array.get(2));\n            result.add(array.get(3));\n\
    \            result.add(array.get(4));\n            result.add(array.get(5));\n\
    \            return result;\n        }\n        if (array.size() == 7) {\n   \
    \         result.add(array.get(0));\n            result.add(array.get(1));\n \
    \           result.add(array.get(2));\n            result.add(array.get(3));\n\
    \            result.add(array.get(4));\n            result.add(array.get(5));\n\
    \            result.add(array.get(6));\n            return result;\n        }\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpz0qi46gh.java:77: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659800393
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        ArrayList<Long>\
    \ ret = new ArrayList<Long>();\n        if (array.size() == 0) {\n           \
    \ return ret;\n        }\n        if (array.size() == 1) {\n            ret.add(array.get(0));\n\
    \            return ret;\n        }\n        if (array.size() == 2) {\n      \
    \      if (array.get(0) > array.get(1)) {\n                ret.add(array.get(1));\n\
    \                ret.add(array.get(0));\n            } else {\n              \
    \  ret.add(array.get(0));\n                ret.add(array.get(1));\n          \
    \  }\n            return ret;\n        }\n        if ((array.get(0) + array.get(array.size()\
    \ - 1)) % 2 == 0) {\n            for (int i = array.size() - 1; i >= 0; i--) {\n\
    \                ret.add(array.get(i));\n            }\n        } else {\n   \
    \         for (int i = 0; i < array.size(); i++) {\n                ret.add(array.get(i));\n\
    \            }\n        }\n        return ret;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpj58dgp0e.java:56)\n"
  stdout: ''
  timestamp: 1659800396
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        // Your code here\n\
    \        return null;\n    }\n    public static void main(String[] args) {\n \
    \   assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.sortArray(java.util.ArrayList)\"\
    \ is null\n\tat Problem.main(tmpqhtg9vv1.java:28)\n"
  stdout: ''
  timestamp: 1659800397
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (array.size() == 0) {\n        \
    \    return result;\n        }\n        if (array.size() == 1) {\n           \
    \ result.add(array.get(0));\n            return result;\n        }\n        if\
    \ (array.size() == 2) {\n            if ((array.get(0) + array.get(1)) % 2 ==\
    \ 0) {\n                result.add(array.get(1));\n                result.add(array.get(0));\n\
    \                return result;\n            } else {\n                result.add(array.get(0));\n\
    \                result.add(array.get(1));\n                return result;\n \
    \           }\n        }\n        if ((array.get(0) + array.get(array.size() -\
    \ 1)) % 2 == 0) {\n            for (int i = 0; i < array.size(); i++) {\n    \
    \            result.add(array.get(array.size() - 1 - i));\n            }\n   \
    \         return result;\n        } else {\n            for (int i = 0; i < array.size();\
    \ i++) {\n                result.add(array.get(i));\n            }\n         \
    \   return result;\n        }\n    }\n    public static void main(String[] args)\
    \ {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmxps60qw.java:58)\n"
  stdout: ''
  timestamp: 1659800393
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        return null;\n \
    \   }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.sortArray(java.util.ArrayList)\"\
    \ is null\n\tat Problem.main(tmpmx0ttyzx.java:27)\n"
  stdout: ''
  timestamp: 1659800393
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        return array;\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmqnnwgz6.java:29)\n"
  stdout: ''
  timestamp: 1659800393
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (array.size() == 0) {\n        \
    \    return result;\n        }\n        if (array.size() == 1) {\n           \
    \ result.add(array.get(0));\n            return result;\n        }\n        if\
    \ (array.size() == 2) {\n            if ((array.get(0) + array.get(1)) % 2 ==\
    \ 0) {\n                result.add(array.get(1));\n                result.add(array.get(0));\n\
    \                return result;\n            } else {\n                result.add(array.get(0));\n\
    \                result.add(array.get(1));\n                return result;\n \
    \           }\n        }\n        ArrayList<Long> left = new ArrayList<Long>();\n\
    \        ArrayList<Long> right = new ArrayList<Long>();\n        for (int i =\
    \ 0; i < array.size(); i++) {\n            if (i < array.size() / 2) {\n     \
    \           left.add(array.get(i));\n            } else {\n                right.add(array.get(i));\n\
    \            }\n        }\n        left = sortArray(left);\n        right = sortArray(right);\n\
    \        int leftIndex = 0;\n        int rightIndex = 0;\n        while (leftIndex\
    \ < left.size() && rightIndex < right.size()) {\n            if ((left.get(leftIndex)\
    \ + right.get(rightIndex)) % 2 == 0) {\n                result.add(right.get(rightIndex));\n\
    \                rightIndex++;\n            } else {\n                result.add(left.get(leftIndex));\n\
    \                leftIndex++;\n            }\n        }\n        while (leftIndex\
    \ < left.size()) {\n            result.add(left.get(leftIndex));\n           \
    \ leftIndex++;\n        }\n        while (rightIndex < right.size()) {\n     \
    \       result.add(right.get(rightIndex));\n            rightIndex++;\n      \
    \  }\n        return result;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpua_blx45.java:78)\n"
  stdout: ''
  timestamp: 1659800397
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        return array;\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmqnnwgz6.java:29)\n"
  stdout: ''
  timestamp: 1659800393
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        ArrayList<Long> odd = new ArrayList<Long>();\n\
    \        ArrayList<Long> even = new ArrayList<Long>();\n        for (Long i :\
    \ array) {\n            if (i % 2 == 0) {\n                even.add(i);\n    \
    \        } else {\n                odd.add(i);\n            }\n        }\n   \
    \     Collections.sort(odd);\n        Collections.sort(even);\n        Collections.reverse(even);\n\
    \        for (Long i : odd) {\n            result.add(i);\n        }\n       \
    \ for (Long i : even) {\n            result.add(i);\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpesctrgez.java:48)\n"
  stdout: ''
  timestamp: 1659800393
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        return array;\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmqnnwgz6.java:29)\n"
  stdout: ''
  timestamp: 1659800393
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprfrcuej_.java:29)\n"
  stdout: ''
  timestamp: 1659800397
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        int length = array.size();\n      \
    \  if (length == 0) {\n            return result;\n        }\n        if (length\
    \ == 1) {\n            result.add(array.get(0));\n            return result;\n\
    \        }\n        long first = array.get(0);\n        long last = array.get(length\
    \ - 1);\n        long sum = first + last;\n        if (sum % 2 == 0) {\n     \
    \       Collections.sort(array, Collections.reverseOrder());\n        } else {\n\
    \            Collections.sort(array);\n        }\n        return array;\n    }\n\
    \    public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800397
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        // Write your code\
    \ here\n        // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        return array;\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8rd1kz2p.java:32)\n"
  stdout: ''
  timestamp: 1659800393
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (array.size() == 0) {\n        \
    \    return result;\n        }\n        if (array.size() == 1) {\n           \
    \ result.add(array.get(0));\n            return result;\n        }\n        if\
    \ (array.size() == 2) {\n            if ((array.get(0) + array.get(1)) % 2 ==\
    \ 0) {\n                result.add(array.get(1));\n                result.add(array.get(0));\n\
    \                return result;\n            } else {\n                result.add(array.get(0));\n\
    \                result.add(array.get(1));\n                return result;\n \
    \           }\n        }\n        ArrayList<Long> odd = new ArrayList<Long>();\n\
    \        ArrayList<Long> even = new ArrayList<Long>();\n        for (int i = 0;\
    \ i < array.size(); i++) {\n            if (array.get(i) % 2 == 0) {\n       \
    \         even.add(array.get(i));\n            } else {\n                odd.add(array.get(i));\n\
    \            }\n        }\n        Collections.sort(odd);\n        Collections.sort(even);\n\
    \        if ((array.get(0) + array.get(array.size() - 1)) % 2 == 0) {\n      \
    \      Collections.reverse(even);\n        }\n        for (int i = 0; i < odd.size();\
    \ i++) {\n            result.add(odd.get(i));\n        }\n        for (int i =\
    \ 0; i < even.size(); i++) {\n            result.add(even.get(i));\n        }\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_kro5199.java:68)\n"
  stdout: ''
  timestamp: 1659800395
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        if (array.size()\
    \ == 0) {\n            return array;\n        }\n        if (array.size() == 1)\
    \ {\n            return array;\n        }\n        if (array.size() == 2) {\n\
    \            if (array.get(0) > array.get(1)) {\n                long temp = array.get(0);\n\
    \                array.set(0, array.get(1));\n                array.set(1, temp);\n\
    \            }\n            return array;\n        }\n        if (array.size()\
    \ == 3) {\n            if (array.get(0) > array.get(1)) {\n                long\
    \ temp = array.get(0);\n                array.set(0, array.get(1));\n        \
    \        array.set(1, temp);\n            }\n            if (array.get(1) > array.get(2))\
    \ {\n                long temp = array.get(1);\n                array.set(1, array.get(2));\n\
    \                array.set(2, temp);\n            }\n            if (array.get(0)\
    \ > array.get(1)) {\n                long temp = array.get(0);\n             \
    \   array.set(0, array.get(1));\n                array.set(1, temp);\n       \
    \     }\n            return array;\n        }\n        if (array.size() == 4)\
    \ {\n            if (array.get(0) > array.get(1)) {\n                long temp\
    \ = array.get(0);\n                array.set(0, array.get(1));\n             \
    \   array.set(1, temp);\n            }\n            if (array.get(2) > array.get(3))\
    \ {\n                long temp = array.get(2);\n                array.set(2, array.get(3));\n\
    \                array.set(3, temp);\n            }\n            if (array.get(0)\
    \ > array.get(2)) {\n                long temp = array.get(0);\n             \
    \   array.set(0, array.get(2));\n                array.set(2, temp);\n       \
    \     }\n            if (array.get(1) > array.get(3)) {\n                long\
    \ temp = array.get(1\n    }\n    public static void main(String[] args) {\n  \
    \  assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfmg44cci.java:73: error: ')' expected\n                long temp\
    \ = array.get(1\n                                       ^\n/tmp/tmpfmg44cci.java:75:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n    ^\n2 errors\n"
  stdout: ''
  timestamp: 1659800393
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        return array;\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmqnnwgz6.java:29)\n"
  stdout: ''
  timestamp: 1659800393
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        return array;\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmqnnwgz6.java:29)\n"
  stdout: ''
  timestamp: 1659800393
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        // Write your code\
    \ here\n        // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        return array;\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8rd1kz2p.java:32)\n"
  stdout: ''
  timestamp: 1659800393
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        return null;\n \
    \   }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.sortArray(java.util.ArrayList)\"\
    \ is null\n\tat Problem.main(tmpmx0ttyzx.java:27)\n"
  stdout: ''
  timestamp: 1659800393
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        ArrayList<Long>\
    \ sortedArray = new ArrayList<Long>();\n        if (array.size() == 0) {\n   \
    \         return sortedArray;\n        }\n        if (array.size() == 1) {\n \
    \           sortedArray.add(array.get(0));\n            return sortedArray;\n\
    \        }\n        if (array.size() == 2) {\n            if (array.get(0) > array.get(1))\
    \ {\n                sortedArray.add(array.get(1));\n                sortedArray.add(array.get(0));\n\
    \            } else {\n                sortedArray.add(array.get(0));\n      \
    \          sortedArray.add(array.get(1));\n            }\n            return sortedArray;\n\
    \        }\n        if (array.size() == 3) {\n            if (array.get(0) > array.get(1))\
    \ {\n                if (array.get(1) > array.get(2)) {\n                    sortedArray.add(array.get(2));\n\
    \                    sortedArray.add(array.get(1));\n                    sortedArray.add(array.get(0));\n\
    \                } else {\n                    if (array.get(0) > array.get(2))\
    \ {\n                        sortedArray.add(array.get(1));\n                \
    \        sortedArray.add(array.get(2));\n                        sortedArray.add(array.get(0));\n\
    \                    } else {\n                        sortedArray.add(array.get(1));\n\
    \                        sortedArray.add(array.get(0));\n                    \
    \    sortedArray.add(array.get(2));\n                    }\n                }\n\
    \            } else {\n                if (array.get(0) > array.get(2)) {\n  \
    \                  sortedArray.add(array.get(2));\n                    sortedArray.add(array.get(0));\n\
    \                    sortedArray.add(array.get(1));\n                } else {\n\
    \                    if (array.get(1) > array.get(2)) {\n                    \
    \    sortedArray.add(array.get(0));\n                        sortedArray.add(array.get(2));\n\
    \                        sortedArray.add(array.get(1));\n                    }\
    \ else {\n                        sortedArray.add(array.get(0));\n    }\n    public\
    \ static void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpym6t7lci.java:72: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n1 error\n"
  stdout: ''
  timestamp: 1659800396
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (array.size() == 0) {\n        \
    \    return result;\n        }\n        if (array.size() == 1) {\n           \
    \ result.add(array.get(0));\n            return result;\n        }\n        if\
    \ (array.size() == 2) {\n            if ((array.get(0) + array.get(1)) % 2 ==\
    \ 0) {\n                result.add(array.get(1));\n                result.add(array.get(0));\n\
    \                return result;\n            } else {\n                result.add(array.get(0));\n\
    \                result.add(array.get(1));\n                return result;\n \
    \           }\n        }\n        if ((array.get(0) + array.get(array.size() -\
    \ 1)) % 2 == 0) {\n            for (int i = array.size() - 1; i >= 0; i--) {\n\
    \                result.add(array.get(i));\n            }\n            return\
    \ result;\n        } else {\n            for (int i = 0; i < array.size(); i++)\
    \ {\n                result.add(array.get(i));\n            }\n            return\
    \ result;\n        }\n    }\n    public static void main(String[] args) {\n  \
    \  assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcmzs9pq3.java:58)\n"
  stdout: ''
  timestamp: 1659800393
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (array.size() == 0) {\n        \
    \    return result;\n        }\n        if (array.size() == 1) {\n           \
    \ result.add(array.get(0));\n            return result;\n        }\n        if\
    \ (array.size() == 2) {\n            if ((array.get(0) + array.get(1)) % 2 ==\
    \ 0) {\n                result.add(array.get(1));\n                result.add(array.get(0));\n\
    \                return result;\n            } else {\n                result.add(array.get(0));\n\
    \                result.add(array.get(1));\n                return result;\n \
    \           }\n        }\n        ArrayList<Long> odd = new ArrayList<Long>();\n\
    \        ArrayList<Long> even = new ArrayList<Long>();\n        for (int i = 0;\
    \ i < array.size(); i++) {\n            if (array.get(i) % 2 == 0) {\n       \
    \         even.add(array.get(i));\n            } else {\n                odd.add(array.get(i));\n\
    \            }\n        }\n        Collections.sort(odd);\n        Collections.sort(even);\n\
    \        if ((array.get(0) + array.get(array.size() - 1)) % 2 == 0) {\n      \
    \      Collections.reverse(even);\n        }\n        result.addAll(odd);\n  \
    \      result.addAll(even);\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo_sfkywp.java:64)\n"
  stdout: ''
  timestamp: 1659800397
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        return null;\n \
    \   }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.sortArray(java.util.ArrayList)\"\
    \ is null\n\tat Problem.main(tmpmx0ttyzx.java:27)\n"
  stdout: ''
  timestamp: 1659800393
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        ArrayList<Long> odd = new ArrayList<Long>();\n\
    \        ArrayList<Long> even = new ArrayList<Long>();\n        for (Long i :\
    \ array) {\n            if (i % 2 == 0) {\n                even.add(i);\n    \
    \        } else {\n                odd.add(i);\n            }\n        }\n   \
    \     Collections.sort(odd);\n        Collections.sort(even);\n        Collections.reverse(even);\n\
    \        result.addAll(odd);\n        result.addAll(even);\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpr6zufhhz.java:44)\n"
  stdout: ''
  timestamp: 1659800393
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (array.size() == 0) {\n        \
    \    return result;\n        }\n        if (array.size() == 1) {\n           \
    \ result.add(array.get(0));\n            return result;\n        }\n        if\
    \ (array.size() == 2) {\n            if ((array.get(0) + array.get(1)) % 2 ==\
    \ 0) {\n                result.add(array.get(1));\n                result.add(array.get(0));\n\
    \                return result;\n            } else {\n                result.add(array.get(0));\n\
    \                result.add(array.get(1));\n                return result;\n \
    \           }\n        }\n        ArrayList<Long> odd = new ArrayList<Long>();\n\
    \        ArrayList<Long> even = new ArrayList<Long>();\n        for (Long i :\
    \ array) {\n            if (i % 2 == 0) {\n                even.add(i);\n    \
    \        } else {\n                odd.add(i);\n            }\n        }\n   \
    \     Collections.sort(odd);\n        Collections.sort(even);\n        Collections.reverse(even);\n\
    \        for (Long i : odd) {\n            result.add(i);\n        }\n       \
    \ for (Long i : even) {\n            result.add(i);\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1kvzwnwb.java:66)\n"
  stdout: ''
  timestamp: 1659800397
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        // Write your code\
    \ here\n        // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        return array;\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8rd1kz2p.java:32)\n"
  stdout: ''
  timestamp: 1659800393
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        return array;\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmqnnwgz6.java:29)\n"
  stdout: ''
  timestamp: 1659800393
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        ArrayList<Long>\
    \ sortedArray = new ArrayList<Long>();\n        for (Long i : array) {\n     \
    \       sortedArray.add(i);\n        }\n        Collections.sort(sortedArray);\n\
    \        if ((array.get(0) + array.get(array.size() - 1)) % 2 == 0) {\n      \
    \      Collections.reverse(sortedArray);\n        }\n        return sortedArray;\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmpfqqagjt2.java:29)\n\tat Problem.main(tmpfqqagjt2.java:35)\n"
  stdout: ''
  timestamp: 1659800397
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        ArrayList<Long>\
    \ sorted = new ArrayList<Long>();\n        if (array.size() == 0) {\n        \
    \    return sorted;\n        }\n        if (array.size() == 1) {\n           \
    \ sorted.add(array.get(0));\n            return sorted;\n        }\n        if\
    \ (array.size() == 2) {\n            sorted.add(array.get(0));\n            sorted.add(array.get(1));\n\
    \            return sorted;\n        }\n        long first = array.get(0);\n \
    \       long last = array.get(array.size() - 1);\n        if ((first + last) %\
    \ 2 == 0) {\n            sorted.add(last);\n            sorted.add(first);\n \
    \       } else {\n            sorted.add(first);\n            sorted.add(last);\n\
    \        }\n        return sorted;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjx_rcii8.java:51)\n"
  stdout: ''
  timestamp: 1659800397
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        return null;\n \
    \   }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.sortArray(java.util.ArrayList)\"\
    \ is null\n\tat Problem.main(tmpmx0ttyzx.java:27)\n"
  stdout: ''
  timestamp: 1659800393
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        return null;\n \
    \   }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.sortArray(java.util.ArrayList)\"\
    \ is null\n\tat Problem.main(tmpmx0ttyzx.java:27)\n"
  stdout: ''
  timestamp: 1659800393
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        ArrayList<Long>\
    \ sorted = new ArrayList<Long>();\n        if (array.size() == 0) {\n        \
    \    return sorted;\n        }\n        if (array.size() == 1) {\n           \
    \ sorted.add(array.get(0));\n            return sorted;\n        }\n        if\
    \ (array.size() == 2) {\n            if (array.get(0) < array.get(1)) {\n    \
    \            sorted.add(array.get(0));\n                sorted.add(array.get(1));\n\
    \            } else {\n                sorted.add(array.get(1));\n           \
    \     sorted.add(array.get(0));\n            }\n            return sorted;\n \
    \       }\n        ArrayList<Long> left = new ArrayList<Long>();\n        ArrayList<Long>\
    \ right = new ArrayList<Long>();\n        for (int i = 0; i < array.size(); i++)\
    \ {\n            if (i < array.size() / 2) {\n                left.add(array.get(i));\n\
    \            } else {\n                right.add(array.get(i));\n            }\n\
    \        }\n        left = sortArray(left);\n        right = sortArray(right);\n\
    \        int leftIndex = 0;\n        int rightIndex = 0;\n        while (leftIndex\
    \ < left.size() && rightIndex < right.size()) {\n            if (left.get(leftIndex)\
    \ < right.get(rightIndex)) {\n                sorted.add(left.get(leftIndex));\n\
    \                leftIndex++;\n            } else {\n                sorted.add(right.get(rightIndex));\n\
    \                rightIndex++;\n            }\n        }\n        while (leftIndex\
    \ < left.size()) {\n            sorted.add(left.get(leftIndex));\n           \
    \ leftIndex++;\n        }\n        while (rightIndex < right.size()) {\n     \
    \       sorted.add(right.get(rightIndex));\n            rightIndex++;\n      \
    \  }\n        if ((array.get(0) + array.get(array.size() - 1)) % 2 == 0) {\n \
    \           Collections.reverse(sorted);\n        }\n        return sorted;\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_8l53n9z.java:81)\n"
  stdout: ''
  timestamp: 1659800397
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        if (array.size()\
    \ == 0) {\n            return array;\n        }\n        if (array.size() == 1)\
    \ {\n            return array;\n        }\n        if (array.size() == 2) {\n\
    \            if (array.get(0) > array.get(1)) {\n                Long temp = array.get(0);\n\
    \                array.set(0, array.get(1));\n                array.set(1, temp);\n\
    \            }\n            return array;\n        }\n        ArrayList<Long>\
    \ left = new ArrayList<Long>();\n        ArrayList<Long> right = new ArrayList<Long>();\n\
    \        for (int i = 0; i < array.size(); i++) {\n            if (i < array.size()\
    \ / 2) {\n                left.add(array.get(i));\n            } else {\n    \
    \            right.add(array.get(i));\n            }\n        }\n        left\
    \ = sortArray(left);\n        right = sortArray(right);\n        return merge(left,\
    \ right);\n    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpf6y4zpq3.java:49: error: cannot find symbol\n        return merge(left,\
    \ right);\n               ^\n  symbol:   method merge(ArrayList<Long>,ArrayList<Long>)\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659800396
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (array.size() == 0) {\n        \
    \    return result;\n        }\n        if (array.size() == 1) {\n           \
    \ result.add(array.get(0));\n            return result;\n        }\n        if\
    \ (array.size() == 2) {\n            if ((array.get(0) + array.get(1)) % 2 ==\
    \ 0) {\n                result.add(array.get(1));\n                result.add(array.get(0));\n\
    \                return result;\n            } else {\n                result.add(array.get(0));\n\
    \                result.add(array.get(1));\n                return result;\n \
    \           }\n        }\n        if ((array.get(0) + array.get(array.size() -\
    \ 1)) % 2 == 0) {\n            for (int i = array.size() - 1; i >= 0; i--) {\n\
    \                result.add(array.get(i));\n            }\n            return\
    \ result;\n        } else {\n            for (int i = 0; i < array.size(); i++)\
    \ {\n                result.add(array.get(i));\n            }\n            return\
    \ result;\n        }\n    }\n    public static void main(String[] args) {\n  \
    \  assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcmzs9pq3.java:58)\n"
  stdout: ''
  timestamp: 1659800393
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        ArrayList<Long> odd = new ArrayList<Long>();\n\
    \        ArrayList<Long> even = new ArrayList<Long>();\n        for (Long i :\
    \ array) {\n            if (i % 2 == 0) {\n                even.add(i);\n    \
    \        } else {\n                odd.add(i);\n            }\n        }\n   \
    \     Collections.sort(odd);\n        Collections.sort(even);\n        Collections.reverse(even);\n\
    \        result.addAll(odd);\n        result.addAll(even);\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpr6zufhhz.java:44)\n"
  stdout: ''
  timestamp: 1659800393
