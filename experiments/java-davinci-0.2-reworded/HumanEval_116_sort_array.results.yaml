language: java
name: HumanEval_116_sort_array
results:
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> sorted = new ArrayList<Long>();\n\
    \        ArrayList<Long> negative = new ArrayList<Long>();\n        ArrayList<Long>\
    \ positive = new ArrayList<Long>();\n        for (Long l : arr) {\n          \
    \  if (l < 0) {\n                negative.add(l);\n            } else {\n    \
    \            positive.add(l);\n            }\n        }\n        Collections.sort(negative);\n\
    \        Collections.sort(positive);\n        Collections.reverse(negative);\n\
    \        for (Long l : negative) {\n            sorted.add(l);\n        }\n  \
    \      for (Long l : positive) {\n            sorted.add(l);\n        }\n    \
    \    return sorted;\n    }\n    public static void main(String[] args) {\n   \
    \ assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1nhfw_z_.java:42)\n"
  stdout: ''
  timestamp: 1659794682
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        // your code here\n        return\
    \ arr;\n    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9qnbvh18.java:24)\n"
  stdout: ''
  timestamp: 1659794682
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> sorted = new ArrayList<Long>();\n\
    \        ArrayList<Long> zeros = new ArrayList<Long>();\n        ArrayList<Long>\
    \ ones = new ArrayList<Long>();\n        ArrayList<Long> twos = new ArrayList<Long>();\n\
    \        ArrayList<Long> threes = new ArrayList<Long>();\n        ArrayList<Long>\
    \ fours = new ArrayList<Long>();\n        ArrayList<Long> fives = new ArrayList<Long>();\n\
    \        ArrayList<Long> sixes = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sevens = new ArrayList<Long>();\n        ArrayList<Long> eights = new ArrayList<Long>();\n\
    \        ArrayList<Long> nines = new ArrayList<Long>();\n        ArrayList<Long>\
    \ tens = new ArrayList<Long>();\n        ArrayList<Long> elevens = new ArrayList<Long>();\n\
    \        ArrayList<Long> twelves = new ArrayList<Long>();\n        ArrayList<Long>\
    \ thirteens = new ArrayList<Long>();\n        ArrayList<Long> fourteens = new\
    \ ArrayList<Long>();\n        ArrayList<Long> fifteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> sixteens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ seventeens = new ArrayList<Long>();\n        ArrayList<Long> eightteens = new\
    \ ArrayList<Long>();\n        ArrayList<Long> nineteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> twenties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ thirtys = new ArrayList<Long>();\n        ArrayList<Long> fortys = new ArrayList<Long>();\n\
    \        ArrayList<Long> fiftys = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sixtys = new ArrayList<Long>();\n        ArrayList<Long> seventys = new ArrayList<Long>();\n\
    \        ArrayList<Long> eighty = new ArrayList<Long>();\n        ArrayList<Long>\
    \ ninety = new ArrayList<Long>();\n        ArrayList<Long> hundred = new ArrayList<Long>();\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpryv79wbv.java:50: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659794682
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> sorted = new ArrayList<Long>();\n\
    \        for (long i = 0; i < arr.size(); i++) {\n            sorted.add(arr.get((int)i));\n\
    \        }\n        Collections.sort(sorted, new Comparator<Long>() {\n      \
    \      @Override\n            public int compare(Long a, Long b) {\n         \
    \       String aBinary = Long.toBinaryString(a);\n                String bBinary\
    \ = Long.toBinaryString(b);\n                int aOnes = 0;\n                int\
    \ bOnes = 0;\n                for (int i = 0; i < aBinary.length(); i++) {\n \
    \                   if (aBinary.charAt(i) == '1') {\n                        aOnes++;\n\
    \                    }\n                }\n                for (int i = 0; i <\
    \ bBinary.length(); i++) {\n                    if (bBinary.charAt(i) == '1')\
    \ {\n                        bOnes++;\n                    }\n               \
    \ }\n                if (aOnes == bOnes) {\n                    return a.compareTo(b);\n\
    \                } else {\n                    return aOnes - bOnes;\n       \
    \         }\n            }\n        });\n        return sorted;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyj057t5z.java:52)\n"
  stdout: ''
  timestamp: 1659794682
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> sorted = new ArrayList<Long>();\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            long num = arr.get(i);\n\
    \            int ones = 0;\n            while (num > 0) {\n                ones\
    \ += num % 2;\n                num /= 2;\n            }\n            sorted.add(ones);\n\
    \        }\n        for (int i = 0; i < sorted.size(); i++) {\n            for\
    \ (int j = i + 1; j < sorted.size(); j++) {\n                if (sorted.get(i)\
    \ > sorted.get(j)) {\n                    long temp = sorted.get(i);\n       \
    \             sorted.set(i, sorted.get(j));\n                    sorted.set(j,\
    \ temp);\n                    temp = arr.get(i);\n                    arr.set(i,\
    \ arr.get(j));\n                    arr.set(j, temp);\n                }\n   \
    \         }\n        }\n        return arr;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdojd1qll.java:28: error: incompatible types: int cannot be converted\
    \ to Long\n            sorted.add(ones);\n                       ^\nNote: Some\
    \ messages have been simplified; recompile with -Xdiags:verbose to get full output\n\
    1 error\n"
  stdout: ''
  timestamp: 1659794682
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        ArrayList<Long> temp = new ArrayList<Long>();\n        ArrayList<Long>\
    \ temp2 = new ArrayList<Long>();\n        ArrayList<Long> temp3 = new ArrayList<Long>();\n\
    \        ArrayList<Long> temp4 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ temp5 = new ArrayList<Long>();\n        ArrayList<Long> temp6 = new ArrayList<Long>();\n\
    \        ArrayList<Long> temp7 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ temp8 = new ArrayList<Long>();\n        ArrayList<Long> temp9 = new ArrayList<Long>();\n\
    \        ArrayList<Long> temp10 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ temp11 = new ArrayList<Long>();\n        ArrayList<Long> temp12 = new ArrayList<Long>();\n\
    \        ArrayList<Long> temp13 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ temp14 = new ArrayList<Long>();\n        ArrayList<Long> temp15 = new ArrayList<Long>();\n\
    \        ArrayList<Long> temp16 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ temp17 = new ArrayList<Long>();\n        ArrayList<Long> temp18 = new ArrayList<Long>();\n\
    \        ArrayList<Long> temp19 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ temp20 = new ArrayList<Long>();\n        ArrayList<Long> temp21 = new ArrayList<Long>();\n\
    \        ArrayList<Long> temp22 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ temp23 = new ArrayList<Long>();\n        ArrayList<Long> temp24 = new ArrayList<Long>();\n\
    \        ArrayList<Long> temp25 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ temp26 = new ArrayList<Long>();\n        ArrayList<Long> temp27 = new ArrayList<Long>();\n\
    \        ArrayList<Long> temp28 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ temp29 = new ArrayList<Long>();\n        ArrayList\n    }\n    public static\
    \ void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbw663tyt.java:50: error: not a statement\n        ArrayList\n \
    \       ^\n/tmp/tmpbw663tyt.java:50: error: ';' expected\n        ArrayList\n\
    \                 ^\n2 errors\n"
  stdout: ''
  timestamp: 1659794681
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> sorted = new ArrayList<>();\n\
    \        for (Long l : arr) {\n            sorted.add(l);\n        }\n       \
    \ Collections.sort(sorted, new Comparator<Long>() {\n            @Override\n \
    \           public int compare(Long l1, Long l2) {\n                int b1 = Long.bitCount(l1);\n\
    \                int b2 = Long.bitCount(l2);\n                if (b1 == b2) {\n\
    \                    return l1.compareTo(l2);\n                }\n           \
    \     return b1 - b2;\n            }\n        });\n        return sorted;\n  \
    \  }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_cizohys.java:39)\n"
  stdout: ''
  timestamp: 1659794682
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> sorted = new ArrayList<Long>();\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            sorted.add(arr.get(i));\n\
    \        }\n        Collections.sort(sorted, new Comparator<Long>() {\n      \
    \      @Override\n            public int compare(Long a, Long b) {\n         \
    \       int aOnes = countOnes(a);\n                int bOnes = countOnes(b);\n\
    \                if (aOnes == bOnes) {\n                    return a.compareTo(b);\n\
    \                } else {\n                    return aOnes - bOnes;\n       \
    \         }\n            }\n        });\n        return sorted;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplnb2_1s9.java:27: error: cannot find symbol\n                int\
    \ aOnes = countOnes(a);\n                            ^\n  symbol: method countOnes(Long)\n\
    /tmp/tmplnb2_1s9.java:28: error: cannot find symbol\n                int bOnes\
    \ = countOnes(b);\n                            ^\n  symbol: method countOnes(Long)\n\
    2 errors\n"
  stdout: ''
  timestamp: 1659794682
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> sorted = new ArrayList<Long>();\n\
    \        ArrayList<Long> zeros = new ArrayList<Long>();\n        ArrayList<Long>\
    \ ones = new ArrayList<Long>();\n        ArrayList<Long> twos = new ArrayList<Long>();\n\
    \        ArrayList<Long> threes = new ArrayList<Long>();\n        ArrayList<Long>\
    \ fours = new ArrayList<Long>();\n        ArrayList<Long> fives = new ArrayList<Long>();\n\
    \        ArrayList<Long> sixes = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sevens = new ArrayList<Long>();\n        ArrayList<Long> eights = new ArrayList<Long>();\n\
    \        ArrayList<Long> nines = new ArrayList<Long>();\n        ArrayList<Long>\
    \ tens = new ArrayList<Long>();\n        ArrayList<Long> elevens = new ArrayList<Long>();\n\
    \        ArrayList<Long> twelves = new ArrayList<Long>();\n        ArrayList<Long>\
    \ thirteens = new ArrayList<Long>();\n        ArrayList<Long> fourteens = new\
    \ ArrayList<Long>();\n        ArrayList<Long> fifteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> sixteens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ seventeens = new ArrayList<Long>();\n        ArrayList<Long> eighteen = new\
    \ ArrayList<Long>();\n        ArrayList<Long> nineteen = new ArrayList<Long>();\n\
    \        ArrayList<Long> twenty = new ArrayList<Long>();\n        ArrayList<Long>\
    \ twentyone = new ArrayList<Long>();\n        ArrayList<Long> twentytwo = new\
    \ ArrayList<Long>();\n        ArrayList<Long> twentythree = new ArrayList<Long>();\n\
    \        ArrayList<Long> twentyfour = new ArrayList<Long>();\n        ArrayList<Long>\
    \ twentyfive = new ArrayList<Long>();\n        ArrayList<Long> twentysix = new\
    \ ArrayList<Long>();\n        ArrayList<Long> twentyseven = new ArrayList<Long>();\n\
    \        ArrayList<Long> twentyeight = new ArrayList<Long>();\n    }\n    public\
    \ static void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2_advmc1.java:50: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659794682
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> sorted = new ArrayList<Long>();\n\
    \        ArrayList<Long> zeros = new ArrayList<Long>();\n        ArrayList<Long>\
    \ ones = new ArrayList<Long>();\n        ArrayList<Long> twos = new ArrayList<Long>();\n\
    \        ArrayList<Long> threes = new ArrayList<Long>();\n        ArrayList<Long>\
    \ fours = new ArrayList<Long>();\n        ArrayList<Long> fives = new ArrayList<Long>();\n\
    \        ArrayList<Long> sixes = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sevens = new ArrayList<Long>();\n        ArrayList<Long> eights = new ArrayList<Long>();\n\
    \        ArrayList<Long> nines = new ArrayList<Long>();\n        ArrayList<Long>\
    \ tens = new ArrayList<Long>();\n        ArrayList<Long> elevens = new ArrayList<Long>();\n\
    \        ArrayList<Long> twelves = new ArrayList<Long>();\n        ArrayList<Long>\
    \ thirteens = new ArrayList<Long>();\n        ArrayList<Long> fourteens = new\
    \ ArrayList<Long>();\n        ArrayList<Long> fifteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> sixteens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ seventeens = new ArrayList<Long>();\n        ArrayList<Long> eightteens = new\
    \ ArrayList<Long>();\n        ArrayList<Long> nineteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> twenties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ negatives = new ArrayList<Long>();\n        for (Long i : arr) {\n         \
    \   if (i < 0) {\n                negatives.add(i);\n            } else if (i\
    \ == 0) {\n                zeros.add(i);\n            } else if (i == 1) {\n \
    \               ones.add(i);\n            } else if (i == 2) {\n             \
    \   twos.add(i);\n            } else if (i == 3) {\n                threes.add(i);\n\
    \            } else if (i == 4) {\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqagddbsj.java:56: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n1 error\n"
  stdout: ''
  timestamp: 1659794681
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        ArrayList<Long> ones = new ArrayList<Long>();\n        ArrayList<Long>\
    \ zeros = new ArrayList<Long>();\n        for (Long i : arr) {\n            if\
    \ (Long.bitCount(i) == 0) {\n                zeros.add(i);\n            } else\
    \ {\n                ones.add(i);\n            }\n        }\n        Collections.sort(ones);\n\
    \        Collections.sort(zeros);\n        result.addAll(ones);\n        result.addAll(zeros);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp89mj8_1d.java:37)\n"
  stdout: ''
  timestamp: 1659794682
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> sorted = new ArrayList<Long>();\n\
    \        for (Long l : arr) {\n            sorted.add(l);\n        }\n       \
    \ Collections.sort(sorted, new Comparator<Long>() {\n            @Override\n \
    \           public int compare(Long l1, Long l2) {\n                int l1Ones\
    \ = Long.bitCount(l1);\n                int l2Ones = Long.bitCount(l2);\n    \
    \            if (l1Ones == l2Ones) {\n                    return l1.compareTo(l2);\n\
    \                } else {\n                    return l1Ones - l2Ones;\n     \
    \           }\n            }\n        });\n        return sorted;\n    }\n   \
    \ public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppatijbhq.java:40)\n"
  stdout: ''
  timestamp: 1659794682
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        // Your code here\n        ArrayList<Long>\
    \ sorted = new ArrayList<Long>();\n        for (int i = 0; i < arr.size(); i++)\
    \ {\n            sorted.add(arr.get(i));\n        }\n        Collections.sort(sorted,\
    \ new Comparator<Long>() {\n            @Override\n            public int compare(Long\
    \ a, Long b) {\n                String aBin = Long.toBinaryString(a);\n      \
    \          String bBin = Long.toBinaryString(b);\n                int aOnes =\
    \ 0;\n                int bOnes = 0;\n                for (int i = 0; i < aBin.length();\
    \ i++) {\n                    if (aBin.charAt(i) == '1') {\n                 \
    \       aOnes++;\n                    }\n                }\n                for\
    \ (int i = 0; i < bBin.length(); i++) {\n                    if (bBin.charAt(i)\
    \ == '1') {\n                        bOnes++;\n                    }\n       \
    \         }\n                if (aOnes < bOnes) {\n                    return\
    \ -1;\n                } else if (aOnes > bOnes) {\n                    return\
    \ 1;\n                } else {\n                    if (a < b) {\n           \
    \             return -1;\n                    } else if (a > b) {\n          \
    \              return 1;\n                    } else {\n                     \
    \   return 0;\n                    }\n                }\n            }\n     \
    \   });\n        return sorted;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_wbtwe80.java:61)\n"
  stdout: ''
  timestamp: 1659794682
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> sorted = new ArrayList<>();\n\
    \        ArrayList<Long> negatives = new ArrayList<>();\n        ArrayList<Long>\
    \ positives = new ArrayList<>();\n        for (Long l : arr) {\n            if\
    \ (l < 0) {\n                negatives.add(l);\n            } else {\n       \
    \         positives.add(l);\n            }\n        }\n        Collections.sort(negatives);\n\
    \        Collections.sort(positives);\n        Collections.reverse(negatives);\n\
    \        Collections.reverse(positives);\n        for (Long l : negatives) {\n\
    \            sorted.add(l);\n        }\n        for (Long l : positives) {\n \
    \           sorted.add(l);\n        }\n        return sorted;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjf8m1qvp.java:43)\n"
  stdout: ''
  timestamp: 1659794682
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> sorted = new ArrayList<Long>();\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            sorted.add(arr.get(i));\n\
    \        }\n        Collections.sort(sorted, new Comparator<Long>() {\n      \
    \      @Override\n            public int compare(Long a, Long b) {\n         \
    \       String aBin = Long.toBinaryString(a);\n                String bBin = Long.toBinaryString(b);\n\
    \                int aOnes = (int) aBin.chars().filter(ch -> ch == '1').count();\n\
    \                int bOnes = (int) bBin.chars().filter(ch -> ch == '1').count();\n\
    \                if (aOnes == bOnes) {\n                    return a.compareTo(b);\n\
    \                } else {\n                    return aOnes - bOnes;\n       \
    \         }\n            }\n        });\n        return sorted;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo23ypq6i.java:42)\n"
  stdout: ''
  timestamp: 1659794682
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> sorted = new ArrayList<Long>();\n\
    \        ArrayList<Long> zeros = new ArrayList<Long>();\n        ArrayList<Long>\
    \ ones = new ArrayList<Long>();\n        ArrayList<Long> twos = new ArrayList<Long>();\n\
    \        ArrayList<Long> threes = new ArrayList<Long>();\n        ArrayList<Long>\
    \ fours = new ArrayList<Long>();\n        ArrayList<Long> fives = new ArrayList<Long>();\n\
    \        ArrayList<Long> sixes = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sevens = new ArrayList<Long>();\n        ArrayList<Long> eights = new ArrayList<Long>();\n\
    \        ArrayList<Long> nines = new ArrayList<Long>();\n        ArrayList<Long>\
    \ tens = new ArrayList<Long>();\n        ArrayList<Long> elevens = new ArrayList<Long>();\n\
    \        ArrayList<Long> twelves = new ArrayList<Long>();\n        ArrayList<Long>\
    \ thirteens = new ArrayList<Long>();\n        ArrayList<Long> fourteens = new\
    \ ArrayList<Long>();\n        ArrayList<Long> fifteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> sixteens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ seventeens = new ArrayList<Long>();\n        ArrayList<Long> eightteens = new\
    \ ArrayList<Long>();\n        ArrayList<Long> nineteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> twenties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ thirtys = new ArrayList<Long>();\n        ArrayList<Long> fortys = new ArrayList<Long>();\n\
    \        ArrayList<Long> fiftys = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sixtys = new ArrayList<Long>();\n        ArrayList<Long> seventys = new ArrayList<Long>();\n\
    \        ArrayList<Long> eighty = new ArrayList<Long>();\n        ArrayList<Long>\
    \ ninety = new ArrayList<Long>();\n        ArrayList<Long> hundred = new ArrayList<Long>();\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpryv79wbv.java:50: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659794682
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> sorted = new ArrayList<Long>();\n\
    \        for (Long l : arr) {\n            sorted.add(l);\n        }\n       \
    \ Collections.sort(sorted, new Comparator<Long>() {\n            @Override\n \
    \           public int compare(Long l1, Long l2) {\n                int num1 =\
    \ Long.bitCount(l1);\n                int num2 = Long.bitCount(l2);\n        \
    \        if (num1 == num2) {\n                    return l1.compareTo(l2);\n \
    \               }\n                return num1 - num2;\n            }\n      \
    \  });\n        return sorted;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpiwm349wl.java:39)\n"
  stdout: ''
  timestamp: 1659794682
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> sorted = new ArrayList<Long>();\n\
    \        for (Long l : arr) {\n            sorted.add(l);\n        }\n       \
    \ Collections.sort(sorted, new Comparator<Long>() {\n            @Override\n \
    \           public int compare(Long l1, Long l2) {\n                int ones1\
    \ = Long.bitCount(l1);\n                int ones2 = Long.bitCount(l2);\n     \
    \           if (ones1 == ones2) {\n                    return l1.compareTo(l2);\n\
    \                }\n                return ones1 - ones2;\n            }\n   \
    \     });\n        return sorted;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpajt_ust4.java:39)\n"
  stdout: ''
  timestamp: 1659794682
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> sorted = new ArrayList<Long>();\n\
    \        ArrayList<Long> negatives = new ArrayList<Long>();\n        ArrayList<Long>\
    \ positives = new ArrayList<Long>();\n        for (Long i : arr) {\n         \
    \   if (i < 0) {\n                negatives.add(i);\n            } else {\n  \
    \              positives.add(i);\n            }\n        }\n        Collections.sort(negatives);\n\
    \        Collections.sort(positives);\n        for (Long i : negatives) {\n  \
    \          sorted.add(i);\n        }\n        for (Long i : positives) {\n   \
    \         sorted.add(i);\n        }\n        return sorted;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphtgr7mnh.java:41)\n"
  stdout: ''
  timestamp: 1659794682
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> sorted = new ArrayList<Long>();\n\
    \        ArrayList<Long> zeros = new ArrayList<Long>();\n        ArrayList<Long>\
    \ ones = new ArrayList<Long>();\n        ArrayList<Long> twos = new ArrayList<Long>();\n\
    \        ArrayList<Long> threes = new ArrayList<Long>();\n        ArrayList<Long>\
    \ fours = new ArrayList<Long>();\n        ArrayList<Long> fives = new ArrayList<Long>();\n\
    \        ArrayList<Long> sixes = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sevens = new ArrayList<Long>();\n        ArrayList<Long> eights = new ArrayList<Long>();\n\
    \        ArrayList<Long> nines = new ArrayList<Long>();\n        ArrayList<Long>\
    \ tens = new ArrayList<Long>();\n        ArrayList<Long> elevens = new ArrayList<Long>();\n\
    \        ArrayList<Long> twelves = new ArrayList<Long>();\n        ArrayList<Long>\
    \ thirteens = new ArrayList<Long>();\n        ArrayList<Long> fourteens = new\
    \ ArrayList<Long>();\n        ArrayList<Long> fifteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> sixteens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ seventeens = new ArrayList<Long>();\n        ArrayList<Long> eightteens = new\
    \ ArrayList<Long>();\n        ArrayList<Long> ninteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> twenties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ twentyones = new ArrayList<Long>();\n        ArrayList<Long> twentytwos = new\
    \ ArrayList<Long>();\n        ArrayList<Long> twentythrees = new ArrayList<Long>();\n\
    \        ArrayList<Long> twentyfours = new ArrayList<Long>();\n        ArrayList<Long>\
    \ twentyfives = new ArrayList<Long>();\n        ArrayList<Long> twentysixes =\
    \ new ArrayList<Long>();\n        ArrayList<Long> twentysevens = new ArrayList<Long>();\n\
    \        ArrayList<Long\n    }\n    public static void main(String[] args) {\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2_24ubgk.java:50: error: > expected\n    }\n    ^\n/tmp/tmp2_24ubgk.java:49:\
    \ error: not a statement\n        ArrayList<Long\n                 ^\n2 errors\n"
  stdout: ''
  timestamp: 1659794681
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> sorted = new ArrayList<Long>();\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            long num = arr.get(i);\n\
    \            int count = 0;\n            while (num > 0) {\n                count\
    \ += num % 2;\n                num /= 2;\n            }\n            sorted.add(count);\n\
    \        }\n        for (int i = 0; i < sorted.size(); i++) {\n            for\
    \ (int j = i + 1; j < sorted.size(); j++) {\n                if (sorted.get(i)\
    \ > sorted.get(j)) {\n                    long temp = sorted.get(i);\n       \
    \             sorted.set(i, sorted.get(j));\n                    sorted.set(j,\
    \ temp);\n                    temp = arr.get(i);\n                    arr.set(i,\
    \ arr.get(j));\n                    arr.set(j, temp);\n                }\n   \
    \         }\n        }\n        return arr;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1gelm597.java:28: error: incompatible types: int cannot be converted\
    \ to Long\n            sorted.add(count);\n                       ^\nNote: Some\
    \ messages have been simplified; recompile with -Xdiags:verbose to get full output\n\
    1 error\n"
  stdout: ''
  timestamp: 1659794682
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> sorted = new ArrayList<Long>();\n\
    \        ArrayList<Long> positives = new ArrayList<Long>();\n        ArrayList<Long>\
    \ negatives = new ArrayList<Long>();\n        for (Long l : arr) {\n         \
    \   if (l >= 0) {\n                positives.add(l);\n            } else {\n \
    \               negatives.add(l);\n            }\n        }\n        Collections.sort(positives,\
    \ new Comparator<Long>() {\n            public int compare(Long l1, Long l2) {\n\
    \                return Long.bitCount(l1) - Long.bitCount(l2);\n            }\n\
    \        });\n        Collections.sort(negatives, new Comparator<Long>() {\n \
    \           public int compare(Long l1, Long l2) {\n                return Long.bitCount(l2)\
    \ - Long.bitCount(l1);\n            }\n        });\n        sorted.addAll(positives);\n\
    \        sorted.addAll(negatives);\n        return sorted;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpp4a_a16t.java:45)\n"
  stdout: ''
  timestamp: 1659794682
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> sorted = new ArrayList<>();\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            sorted.add(arr.get(i));\n\
    \        }\n        Collections.sort(sorted, new Comparator<Long>() {\n      \
    \      @Override\n            public int compare(Long a, Long b) {\n         \
    \       int aOnes = countOnes(a);\n                int bOnes = countOnes(b);\n\
    \                if (aOnes == bOnes) {\n                    return a.compareTo(b);\n\
    \                } else {\n                    return aOnes - bOnes;\n       \
    \         }\n            }\n        });\n        return sorted;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7bgim7dd.java:27: error: cannot find symbol\n                int\
    \ aOnes = countOnes(a);\n                            ^\n  symbol: method countOnes(Long)\n\
    /tmp/tmp7bgim7dd.java:28: error: cannot find symbol\n                int bOnes\
    \ = countOnes(b);\n                            ^\n  symbol: method countOnes(Long)\n\
    2 errors\n"
  stdout: ''
  timestamp: 1659794682
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> sorted = new ArrayList<Long>();\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            sorted.add(arr.get(i));\n\
    \        }\n        Collections.sort(sorted, new Comparator<Long>() {\n      \
    \      @Override\n            public int compare(Long a, Long b) {\n         \
    \       String aBin = Long.toBinaryString(a);\n                String bBin = Long.toBinaryString(b);\n\
    \                int aOnes = 0;\n                int bOnes = 0;\n            \
    \    for (int i = 0; i < aBin.length(); i++) {\n                    if (aBin.charAt(i)\
    \ == '1') {\n                        aOnes++;\n                    }\n       \
    \         }\n                for (int i = 0; i < bBin.length(); i++) {\n     \
    \               if (bBin.charAt(i) == '1') {\n                        bOnes++;\n\
    \                    }\n                }\n                if (aOnes == bOnes)\
    \ {\n                    return a.compareTo(b);\n                } else {\n  \
    \                  return aOnes - bOnes;\n                }\n            }\n \
    \       });\n        return sorted;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkhtlhohp.java:52)\n"
  stdout: ''
  timestamp: 1659794682
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> res = new ArrayList<Long>();\n\
    \        ArrayList<Long> neg = new ArrayList<Long>();\n        ArrayList<Long>\
    \ pos = new ArrayList<Long>();\n        for (Long l : arr) {\n            if (l\
    \ < 0) {\n                neg.add(l);\n            } else {\n                pos.add(l);\n\
    \            }\n        }\n        Collections.sort(neg);\n        Collections.sort(pos);\n\
    \        Collections.reverse(neg);\n        for (Long l : neg) {\n           \
    \ res.add(l);\n        }\n        for (Long l : pos) {\n            res.add(l);\n\
    \        }\n        return res;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp48jwtu65.java:42)\n"
  stdout: ''
  timestamp: 1659794683
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        ArrayList<Long> positive = new ArrayList<Long>();\n        ArrayList<Long>\
    \ negative = new ArrayList<Long>();\n        for (Long l : arr) {\n          \
    \  if (l < 0) {\n                negative.add(l);\n            } else {\n    \
    \            positive.add(l);\n            }\n        }\n        positive.sort(new\
    \ Comparator<Long>() {\n            public int compare(Long a, Long b) {\n   \
    \             int aOnes = Long.bitCount(a);\n                int bOnes = Long.bitCount(b);\n\
    \                if (aOnes < bOnes) {\n                    return -1;\n      \
    \          } else if (aOnes > bOnes) {\n                    return 1;\n      \
    \          } else {\n                    return a.compareTo(b);\n            \
    \    }\n            }\n        });\n        negative.sort(new Comparator<Long>()\
    \ {\n            public int compare(Long a, Long b) {\n                int aOnes\
    \ = Long.bitCount(a);\n                int bOnes = Long.bitCount(b);\n       \
    \         if (aOnes < bOnes) {\n                    return -1;\n             \
    \   } else if (aOnes > bOnes) {\n                    return 1;\n             \
    \   } else {\n                    return a.compareTo(b);\n                }\n\
    \            }\n        });\n        Collections.reverse(negative);\n        result.addAll(negative);\n\
    \        result.addAll(positive);\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1k5yf_ri.java:63)\n"
  stdout: ''
  timestamp: 1659794683
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        // Your code here\n        ArrayList<Long>\
    \ sorted = new ArrayList<Long>();\n        ArrayList<Long> negative = new ArrayList<Long>();\n\
    \        ArrayList<Long> positive = new ArrayList<Long>();\n        for (Long\
    \ l : arr) {\n            if (l < 0) {\n                negative.add(l);\n   \
    \         } else {\n                positive.add(l);\n            }\n        }\n\
    \        Collections.sort(negative);\n        Collections.sort(positive);\n  \
    \      for (Long l : negative) {\n            sorted.add(l);\n        }\n    \
    \    for (Long l : positive) {\n            sorted.add(l);\n        }\n      \
    \  return sorted;\n    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpruafnn8w.java:42)\n"
  stdout: ''
  timestamp: 1659794683
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        ArrayList<Long> temp = new ArrayList<Long>();\n        for (Long i :\
    \ arr) {\n            temp.add(i);\n        }\n        Collections.sort(temp,\
    \ new Comparator<Long>() {\n            @Override\n            public int compare(Long\
    \ o1, Long o2) {\n                int count1 = 0;\n                int count2\
    \ = 0;\n                for (char c : Long.toBinaryString(o1).toCharArray()) {\n\
    \                    if (c == '1') {\n                        count1++;\n    \
    \                }\n                }\n                for (char c : Long.toBinaryString(o2).toCharArray())\
    \ {\n                    if (c == '1') {\n                        count2++;\n\
    \                    }\n                }\n                if (count1 == count2)\
    \ {\n                    return o1.compareTo(o2);\n                }\n       \
    \         return count1 - count2;\n            }\n        });\n        return\
    \ temp;\n    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp22p2x1jx.java:50)\n"
  stdout: ''
  timestamp: 1659794683
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        ArrayList<Long> temp = new ArrayList<Long>();\n        ArrayList<Long>\
    \ temp2 = new ArrayList<Long>();\n        ArrayList<Long> temp3 = new ArrayList<Long>();\n\
    \        ArrayList<Long> temp4 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ temp5 = new ArrayList<Long>();\n        ArrayList<Long> temp6 = new ArrayList<Long>();\n\
    \        ArrayList<Long> temp7 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ temp8 = new ArrayList<Long>();\n        ArrayList<Long> temp9 = new ArrayList<Long>();\n\
    \        ArrayList<Long> temp10 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ temp11 = new ArrayList<Long>();\n        ArrayList<Long> temp12 = new ArrayList<Long>();\n\
    \        ArrayList<Long> temp13 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ temp14 = new ArrayList<Long>();\n        ArrayList<Long> temp15 = new ArrayList<Long>();\n\
    \        ArrayList<Long> temp16 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ temp17 = new ArrayList<Long>();\n        ArrayList<Long> temp18 = new ArrayList<Long>();\n\
    \        ArrayList<Long> temp19 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ temp20 = new ArrayList<Long>();\n        ArrayList<Long> temp21 = new ArrayList<Long>();\n\
    \        ArrayList<Long> temp22 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ temp23 = new ArrayList<Long>();\n        ArrayList<Long> temp24 = new ArrayList<Long>();\n\
    \        ArrayList<Long> temp25 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ temp26 = new ArrayList<Long>();\n        ArrayList<Long> temp27 = new ArrayList<Long>();\n\
    \        ArrayList<Long> temp28 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ temp29 = new ArrayList<Long>();\n        ArrayList\n    }\n    public static\
    \ void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbw663tyt.java:50: error: not a statement\n        ArrayList\n \
    \       ^\n/tmp/tmpbw663tyt.java:50: error: ';' expected\n        ArrayList\n\
    \                 ^\n2 errors\n"
  stdout: ''
  timestamp: 1659794681
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> sorted = new ArrayList<Long>();\n\
    \        for (Long l : arr) {\n            sorted.add(l);\n        }\n       \
    \ Collections.sort(sorted, new Comparator<Long>() {\n            @Override\n \
    \           public int compare(Long a, Long b) {\n                int aOnes =\
    \ countOnes(a);\n                int bOnes = countOnes(b);\n                if\
    \ (aOnes == bOnes) {\n                    return a.compareTo(b);\n           \
    \     } else {\n                    return aOnes - bOnes;\n                }\n\
    \            }\n        });\n        return sorted;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfj7agt7i.java:27: error: cannot find symbol\n                int\
    \ aOnes = countOnes(a);\n                            ^\n  symbol: method countOnes(Long)\n\
    /tmp/tmpfj7agt7i.java:28: error: cannot find symbol\n                int bOnes\
    \ = countOnes(b);\n                            ^\n  symbol: method countOnes(Long)\n\
    2 errors\n"
  stdout: ''
  timestamp: 1659794683
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> sorted = new ArrayList<>();\n\
    \        ArrayList<Long> negatives = new ArrayList<>();\n        ArrayList<Long>\
    \ positives = new ArrayList<>();\n        for (Long i : arr) {\n            if\
    \ (i < 0) {\n                negatives.add(i);\n            } else {\n       \
    \         positives.add(i);\n            }\n        }\n        Collections.sort(negatives);\n\
    \        Collections.sort(positives);\n        for (Long i : negatives) {\n  \
    \          sorted.add(i);\n        }\n        for (Long i : positives) {\n   \
    \         sorted.add(i);\n        }\n        return sorted;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwg_ll4zp.java:41)\n"
  stdout: ''
  timestamp: 1659794684
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        // Your code here\n        return\
    \ arr;\n    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvyxipufw.java:24)\n"
  stdout: ''
  timestamp: 1659794684
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> sorted = new ArrayList<Long>();\n\
    \        ArrayList<Long> positives = new ArrayList<Long>();\n        ArrayList<Long>\
    \ negatives = new ArrayList<Long>();\n        for (Long l : arr) {\n         \
    \   if (l >= 0) {\n                positives.add(l);\n            } else {\n \
    \               negatives.add(l);\n            }\n        }\n        Collections.sort(positives,\
    \ new Comparator<Long>() {\n            public int compare(Long l1, Long l2) {\n\
    \                int ones1 = Long.bitCount(l1);\n                int ones2 = Long.bitCount(l2);\n\
    \                if (ones1 == ones2) {\n                    return l1.compareTo(l2);\n\
    \                } else {\n                    return ones1 - ones2;\n       \
    \         }\n            }\n        });\n        Collections.sort(negatives, new\
    \ Comparator<Long>() {\n            public int compare(Long l1, Long l2) {\n \
    \               int ones1 = Long.bitCount(l1);\n                int ones2 = Long.bitCount(l2);\n\
    \                if (ones1 == ones2) {\n                    return l1.compareTo(l2);\n\
    \                } else {\n                    return ones1 - ones2;\n       \
    \         }\n            }\n        });\n        Collections.reverse(negatives);\n\
    \        sorted.addAll(negatives);\n        sorted.addAll(positives);\n      \
    \  return sorted;\n    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpafif07m6.java:59)\n"
  stdout: ''
  timestamp: 1659794684
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        // Your code here\n        return\
    \ arr;\n    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvyxipufw.java:24)\n"
  stdout: ''
  timestamp: 1659794684
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        // your code here\n        ArrayList<Long>\
    \ sorted = new ArrayList<Long>();\n        for (int i = 0; i < arr.size(); i++)\
    \ {\n            sorted.add(arr.get(i));\n        }\n        Collections.sort(sorted,\
    \ new Comparator<Long>() {\n            @Override\n            public int compare(Long\
    \ o1, Long o2) {\n                String binary1 = Long.toBinaryString(o1);\n\
    \                String binary2 = Long.toBinaryString(o2);\n                int\
    \ ones1 = 0;\n                int ones2 = 0;\n                for (int i = 0;\
    \ i < binary1.length(); i++) {\n                    if (binary1.charAt(i) == '1')\
    \ {\n                        ones1++;\n                    }\n               \
    \ }\n                for (int i = 0; i < binary2.length(); i++) {\n          \
    \          if (binary2.charAt(i) == '1') {\n                        ones2++;\n\
    \                    }\n                }\n                if (ones1 < ones2)\
    \ {\n                    return -1;\n                } else if (ones1 > ones2)\
    \ {\n                    return 1;\n                } else {\n               \
    \     if (o1 < o2) {\n                        return -1;\n                   \
    \ } else if (o1 > o2) {\n                        return 1;\n                 \
    \   } else {\n                        return 0;\n                    }\n     \
    \           }\n            }\n        });\n        return sorted;\n    }\n   \
    \ public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0ht6lpe0.java:61)\n"
  stdout: ''
  timestamp: 1659794684
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> sorted = new ArrayList<Long>();\n\
    \        ArrayList<Long> zeros = new ArrayList<Long>();\n        ArrayList<Long>\
    \ ones = new ArrayList<Long>();\n        ArrayList<Long> twos = new ArrayList<Long>();\n\
    \        ArrayList<Long> threes = new ArrayList<Long>();\n        ArrayList<Long>\
    \ fours = new ArrayList<Long>();\n        ArrayList<Long> fives = new ArrayList<Long>();\n\
    \        ArrayList<Long> sixes = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sevens = new ArrayList<Long>();\n        ArrayList<Long> eights = new ArrayList<Long>();\n\
    \        ArrayList<Long> nines = new ArrayList<Long>();\n        ArrayList<Long>\
    \ tens = new ArrayList<Long>();\n        ArrayList<Long> elevens = new ArrayList<Long>();\n\
    \        ArrayList<Long> twelves = new ArrayList<Long>();\n        ArrayList<Long>\
    \ thirteens = new ArrayList<Long>();\n        ArrayList<Long> fourteens = new\
    \ ArrayList<Long>();\n        ArrayList<Long> fifteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> sixteens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ seventeens = new ArrayList<Long>();\n        ArrayList<Long> eighteens = new\
    \ ArrayList<Long>();\n        ArrayList<Long> ninteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> twenties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ thirties = new ArrayList<Long>();\n        ArrayList<Long> fourties = new ArrayList<Long>();\n\
    \        ArrayList<Long> fifties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sixties = new ArrayList<Long>();\n        ArrayList<Long> seventies = new ArrayList<Long>();\n\
    \        ArrayList<Long> eighties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ ninties = new ArrayList<Long>();\n        ArrayList<Long> hundreds = new\n \
    \   }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5gd6g8vh.java:49: error: <identifier> expected\n        ArrayList<Long>\
    \ hundreds = new\n                                      ^\n/tmp/tmp5gd6g8vh.java:50:\
    \ error: '(' or '[' expected\n    }\n    ^\n2 errors\n"
  stdout: ''
  timestamp: 1659794683
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> sorted = new ArrayList<Long>();\n\
    \        ArrayList<Long> negatives = new ArrayList<Long>();\n        ArrayList<Long>\
    \ positives = new ArrayList<Long>();\n        for (Long num : arr) {\n       \
    \     if (num < 0) {\n                negatives.add(num);\n            } else\
    \ {\n                positives.add(num);\n            }\n        }\n        Collections.sort(negatives);\n\
    \        Collections.sort(positives);\n        Collections.reverse(negatives);\n\
    \        sorted.addAll(negatives);\n        sorted.addAll(positives);\n      \
    \  return sorted;\n    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcqgsf_n6.java:38)\n"
  stdout: ''
  timestamp: 1659794684
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> sorted = new ArrayList<Long>();\n\
    \        ArrayList<Long> zeros = new ArrayList<Long>();\n        ArrayList<Long>\
    \ ones = new ArrayList<Long>();\n        ArrayList<Long> twos = new ArrayList<Long>();\n\
    \        ArrayList<Long> threes = new ArrayList<Long>();\n        ArrayList<Long>\
    \ fours = new ArrayList<Long>();\n        ArrayList<Long> fives = new ArrayList<Long>();\n\
    \        ArrayList<Long> sixes = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sevens = new ArrayList<Long>();\n        ArrayList<Long> eights = new ArrayList<Long>();\n\
    \        ArrayList<Long> nines = new ArrayList<Long>();\n        ArrayList<Long>\
    \ tens = new ArrayList<Long>();\n        ArrayList<Long> elevens = new ArrayList<Long>();\n\
    \        ArrayList<Long> twelves = new ArrayList<Long>();\n        ArrayList<Long>\
    \ thirteens = new ArrayList<Long>();\n        ArrayList<Long> fourteens = new\
    \ ArrayList<Long>();\n        ArrayList<Long> fifteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> sixteens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ seventeens = new ArrayList<Long>();\n        ArrayList<Long> eighteens = new\
    \ ArrayList<Long>();\n        ArrayList<Long> nineteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> twenties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ thirtys = new ArrayList<Long>();\n        ArrayList<Long> fourtys = new ArrayList<Long>();\n\
    \        ArrayList<Long> fiftys = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sixtys = new ArrayList<Long>();\n        ArrayList<Long> seventys = new ArrayList<Long>();\n\
    \        ArrayList<Long> eighty = new ArrayList<Long>();\n        ArrayList<Long>\
    \ ninety = new ArrayList<Long>();\n        ArrayList<Long> hundred = new ArrayList<Long>\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb4dd387l.java:50: error: '(' or '[' expected\n    }\n    ^\n1 error\n"
  stdout: ''
  timestamp: 1659794683
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        // Your code here\n        ArrayList<Long>\
    \ sorted = new ArrayList<Long>();\n        ArrayList<Long> sorted2 = new ArrayList<Long>();\n\
    \        ArrayList<Long> sorted3 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sorted4 = new ArrayList<Long>();\n        ArrayList<Long> sorted5 = new ArrayList<Long>();\n\
    \        ArrayList<Long> sorted6 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sorted7 = new ArrayList<Long>();\n        ArrayList<Long> sorted8 = new ArrayList<Long>();\n\
    \        ArrayList<Long> sorted9 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sorted10 = new ArrayList<Long>();\n        ArrayList<Long> sorted11 = new ArrayList<Long>();\n\
    \        ArrayList<Long> sorted12 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sorted13 = new ArrayList<Long>();\n        ArrayList<Long> sorted14 = new ArrayList<Long>();\n\
    \        ArrayList<Long> sorted15 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sorted16 = new ArrayList<Long>();\n        ArrayList<Long> sorted17 = new ArrayList<Long>();\n\
    \        ArrayList<Long> sorted18 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sorted19 = new ArrayList<Long>();\n        ArrayList<Long> sorted20 = new ArrayList<Long>();\n\
    \        ArrayList<Long> sorted21 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sorted22 = new ArrayList<Long>();\n        ArrayList<Long> sorted23 = new ArrayList<Long>();\n\
    \        ArrayList<Long> sorted24 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sorted25 = new ArrayList<Long>();\n        ArrayList<Long> sorted26 = new ArrayList<Long>();\n\
    \        ArrayList<Long> sorted27 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sorted28 = new ArrayList<Long>();\n        ArrayList<Long> sorted29 = new ArrayList<Long>();\n\
    \        ArrayList<Long> sorted30 = new ArrayList<\n    }\n    public static void\
    \ main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphph05d27.java:51: error: illegal start of type\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659794683
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> sorted = new ArrayList<Long>();\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            sorted.add(arr.get(i));\n\
    \        }\n        Collections.sort(sorted, new Comparator<Long>() {\n      \
    \      @Override\n            public int compare(Long a, Long b) {\n         \
    \       int aOnes = Long.bitCount(a);\n                int bOnes = Long.bitCount(b);\n\
    \                if (aOnes == bOnes) {\n                    return Long.compare(a,\
    \ b);\n                }\n                return Integer.compare(aOnes, bOnes);\n\
    \            }\n        });\n        return sorted;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpb0s30qfh.java:39)\n"
  stdout: ''
  timestamp: 1659794684
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> sorted = new ArrayList<Long>();\n\
    \        for (Long l : arr) {\n            sorted.add(l);\n        }\n       \
    \ Collections.sort(sorted, new Comparator<Long>() {\n            @Override\n \
    \           public int compare(Long l1, Long l2) {\n                String s1\
    \ = Long.toBinaryString(l1);\n                String s2 = Long.toBinaryString(l2);\n\
    \                int c1 = 0;\n                int c2 = 0;\n                for\
    \ (int i = 0; i < s1.length(); i++) {\n                    if (s1.charAt(i) ==\
    \ '1') {\n                        c1++;\n                    }\n             \
    \   }\n                for (int i = 0; i < s2.length(); i++) {\n             \
    \       if (s2.charAt(i) == '1') {\n                        c2++;\n          \
    \          }\n                }\n                if (c1 == c2) {\n           \
    \         return l1.compareTo(l2);\n                } else {\n               \
    \     return c1 - c2;\n                }\n            }\n        });\n       \
    \ return sorted;\n    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyilzx597.java:52)\n"
  stdout: ''
  timestamp: 1659794684
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> sorted = new ArrayList<Long>();\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            long num = arr.get(i);\n\
    \            int ones = 0;\n            while (num > 0) {\n                ones\
    \ += num % 2;\n                num /= 2;\n            }\n            sorted.add(ones);\n\
    \        }\n        for (int i = 0; i < sorted.size(); i++) {\n            for\
    \ (int j = i + 1; j < sorted.size(); j++) {\n                if (sorted.get(i)\
    \ > sorted.get(j)) {\n                    long temp = sorted.get(i);\n       \
    \             sorted.set(i, sorted.get(j));\n                    sorted.set(j,\
    \ temp);\n                    temp = arr.get(i);\n                    arr.set(i,\
    \ arr.get(j));\n                    arr.set(j, temp);\n                }\n   \
    \         }\n        }\n        return arr;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdojd1qll.java:28: error: incompatible types: int cannot be converted\
    \ to Long\n            sorted.add(ones);\n                       ^\nNote: Some\
    \ messages have been simplified; recompile with -Xdiags:verbose to get full output\n\
    1 error\n"
  stdout: ''
  timestamp: 1659794682
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        // your code here\n        ArrayList<Long>\
    \ sorted = new ArrayList<Long>();\n        ArrayList<Long> zeros = new ArrayList<Long>();\n\
    \        ArrayList<Long> ones = new ArrayList<Long>();\n        ArrayList<Long>\
    \ twos = new ArrayList<Long>();\n        ArrayList<Long> threes = new ArrayList<Long>();\n\
    \        ArrayList<Long> fours = new ArrayList<Long>();\n        ArrayList<Long>\
    \ fives = new ArrayList<Long>();\n        ArrayList<Long> sixes = new ArrayList<Long>();\n\
    \        ArrayList<Long> sevens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ eights = new ArrayList<Long>();\n        ArrayList<Long> nines = new ArrayList<Long>();\n\
    \        ArrayList<Long> tens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ elevens = new ArrayList<Long>();\n        ArrayList<Long> twelves = new ArrayList<Long>();\n\
    \        ArrayList<Long> thirteens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ fourteens = new ArrayList<Long>();\n        ArrayList<Long> fifteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> sixteens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ seventeens = new ArrayList<Long>();\n        ArrayList<Long> eighteens = new\
    \ ArrayList<Long>();\n        ArrayList<Long> ninteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> twenties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ thirties = new ArrayList<Long>();\n        ArrayList<Long> fourties = new ArrayList<Long>();\n\
    \        ArrayList<Long> fifties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sixties = new ArrayList<Long>();\n        ArrayList<Long> seventies = new ArrayList<Long>();\n\
    \        ArrayList<Long> eighties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ ninties = new ArrayList<Long>();\n        ArrayList\n    }\n    public static\
    \ void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpuuldp64e.java:50: error: not a statement\n        ArrayList\n \
    \       ^\n/tmp/tmpuuldp64e.java:50: error: ';' expected\n        ArrayList\n\
    \                 ^\n2 errors\n"
  stdout: ''
  timestamp: 1659794683
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> sorted = new ArrayList<Long>();\n\
    \        ArrayList<Long> zeros = new ArrayList<Long>();\n        ArrayList<Long>\
    \ ones = new ArrayList<Long>();\n        ArrayList<Long> twos = new ArrayList<Long>();\n\
    \        ArrayList<Long> threes = new ArrayList<Long>();\n        ArrayList<Long>\
    \ fours = new ArrayList<Long>();\n        ArrayList<Long> fives = new ArrayList<Long>();\n\
    \        ArrayList<Long> sixes = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sevens = new ArrayList<Long>();\n        ArrayList<Long> eights = new ArrayList<Long>();\n\
    \        ArrayList<Long> nines = new ArrayList<Long>();\n        ArrayList<Long>\
    \ tens = new ArrayList<Long>();\n        ArrayList<Long> elevens = new ArrayList<Long>();\n\
    \        ArrayList<Long> twelves = new ArrayList<Long>();\n        ArrayList<Long>\
    \ thirteens = new ArrayList<Long>();\n        ArrayList<Long> fourteens = new\
    \ ArrayList<Long>();\n        ArrayList<Long> fifteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> sixteens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ seventeens = new ArrayList<Long>();\n        ArrayList<Long> eighteens = new\
    \ ArrayList<Long>();\n        ArrayList<Long> ninteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> twenties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ thirties = new ArrayList<Long>();\n        ArrayList<Long> fourties = new ArrayList<Long>();\n\
    \        ArrayList<Long> fifties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sixties = new ArrayList<Long>();\n        ArrayList<Long> seventies = new ArrayList<Long>();\n\
    \        ArrayList<Long> eighties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ ninties = new ArrayList<Long>();\n        ArrayList<Long> hundreds = new\n \
    \   }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5gd6g8vh.java:49: error: <identifier> expected\n        ArrayList<Long>\
    \ hundreds = new\n                                      ^\n/tmp/tmp5gd6g8vh.java:50:\
    \ error: '(' or '[' expected\n    }\n    ^\n2 errors\n"
  stdout: ''
  timestamp: 1659794683
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        // your code here\n        return\
    \ arr;\n    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9qnbvh18.java:24)\n"
  stdout: ''
  timestamp: 1659794682
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        // Your code here\n        return\
    \ arr;\n    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvyxipufw.java:24)\n"
  stdout: ''
  timestamp: 1659794684
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> sorted = new ArrayList<Long>();\n\
    \        ArrayList<Long> zeros = new ArrayList<Long>();\n        ArrayList<Long>\
    \ ones = new ArrayList<Long>();\n        ArrayList<Long> twos = new ArrayList<Long>();\n\
    \        ArrayList<Long> threes = new ArrayList<Long>();\n        ArrayList<Long>\
    \ fours = new ArrayList<Long>();\n        ArrayList<Long> fives = new ArrayList<Long>();\n\
    \        ArrayList<Long> sixes = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sevens = new ArrayList<Long>();\n        ArrayList<Long> eights = new ArrayList<Long>();\n\
    \        ArrayList<Long> nines = new ArrayList<Long>();\n        ArrayList<Long>\
    \ tens = new ArrayList<Long>();\n        ArrayList<Long> elevens = new ArrayList<Long>();\n\
    \        ArrayList<Long> twelves = new ArrayList<Long>();\n        ArrayList<Long>\
    \ thirteens = new ArrayList<Long>();\n        ArrayList<Long> fourteens = new\
    \ ArrayList<Long>();\n        ArrayList<Long> fifteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> sixteens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ seventeens = new ArrayList<Long>();\n        ArrayList<Long> eighteens = new\
    \ ArrayList<Long>();\n        ArrayList<Long> ninteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> twenties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ thirties = new ArrayList<Long>();\n        ArrayList<Long> forties = new ArrayList<Long>();\n\
    \        ArrayList<Long> fifties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sixties = new ArrayList<Long>();\n        ArrayList<Long> seventies = new ArrayList<Long>();\n\
    \        ArrayList<Long> eighties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ nineties = new ArrayList<Long>();\n        ArrayList<Long> hundreds = new Array\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnt38bvb0.java:50: error: '(' or '[' expected\n    }\n    ^\n1 error\n"
  stdout: ''
  timestamp: 1659794683
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        // your code here\n        ArrayList<Long>\
    \ sorted = new ArrayList<Long>();\n        ArrayList<Long> sorted2 = new ArrayList<Long>();\n\
    \        ArrayList<Long> sorted3 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sorted4 = new ArrayList<Long>();\n        ArrayList<Long> sorted5 = new ArrayList<Long>();\n\
    \        ArrayList<Long> sorted6 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sorted7 = new ArrayList<Long>();\n        ArrayList<Long> sorted8 = new ArrayList<Long>();\n\
    \        ArrayList<Long> sorted9 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sorted10 = new ArrayList<Long>();\n        ArrayList<Long> sorted11 = new ArrayList<Long>();\n\
    \        ArrayList<Long> sorted12 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sorted13 = new ArrayList<Long>();\n        ArrayList<Long> sorted14 = new ArrayList<Long>();\n\
    \        ArrayList<Long> sorted15 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sorted16 = new ArrayList<Long>();\n        ArrayList<Long> sorted17 = new ArrayList<Long>();\n\
    \        ArrayList<Long> sorted18 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sorted19 = new ArrayList<Long>();\n        ArrayList<Long> sorted20 = new ArrayList<Long>();\n\
    \        ArrayList<Long> sorted21 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sorted22 = new ArrayList<Long>();\n        ArrayList<Long> sorted23 = new ArrayList<Long>();\n\
    \        ArrayList<Long> sorted24 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sorted25 = new ArrayList<Long>();\n        ArrayList<Long> sorted26 = new ArrayList<Long>();\n\
    \        ArrayList<Long> sorted27 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sorted28 = new ArrayList<Long>();\n        ArrayList<Long> sorted29 = new ArrayList<Long>();\n\
    \        ArrayList<Long> sorted30 = new ArrayList<\n    }\n    public static void\
    \ main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpedczu1vv.java:51: error: illegal start of type\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659794683
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> sorted = new ArrayList<Long>();\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            Long num = arr.get(i);\n\
    \            int ones = 0;\n            while (num > 0) {\n                ones\
    \ += num % 2;\n                num /= 2;\n            }\n            if (sorted.size()\
    \ == 0) {\n                sorted.add(arr.get(i));\n            } else {\n   \
    \             int j = 0;\n                while (j < sorted.size()) {\n      \
    \              Long num2 = sorted.get(j);\n                    int ones2 = 0;\n\
    \                    while (num2 > 0) {\n                        ones2 += num2\
    \ % 2;\n                        num2 /= 2;\n                    }\n          \
    \          if (ones < ones2) {\n                        sorted.add(j, arr.get(i));\n\
    \                        break;\n                    } else if (ones == ones2)\
    \ {\n                        if (arr.get(i) < sorted.get(j)) {\n             \
    \               sorted.add(j, arr.get(i));\n                            break;\n\
    \                        }\n                    }\n                    j++;\n\
    \                }\n                if (j == sorted.size()) {\n              \
    \      sorted.add(arr.get(i));\n                }\n            }\n        }\n\
    \        return sorted;\n    }\n    public static void main(String[] args) {\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpih17u51r.java:59)\n"
  stdout: ''
  timestamp: 1659794684
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        // Your code here\n        return\
    \ arr;\n    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvyxipufw.java:24)\n"
  stdout: ''
  timestamp: 1659794684
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        ArrayList<Long> negative = new ArrayList<Long>();\n        ArrayList<Long>\
    \ positive = new ArrayList<Long>();\n        for (Long l : arr) {\n          \
    \  if (l < 0) {\n                negative.add(l);\n            } else {\n    \
    \            positive.add(l);\n            }\n        }\n        Collections.sort(negative);\n\
    \        Collections.sort(positive);\n        Collections.reverse(negative);\n\
    \        for (Long l : negative) {\n            result.add(l);\n        }\n  \
    \      for (Long l : positive) {\n            result.add(l);\n        }\n    \
    \    return result;\n    }\n    public static void main(String[] args) {\n   \
    \ assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsap2mqh3.java:42)\n"
  stdout: ''
  timestamp: 1659794684
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        ArrayList<Long> zero = new ArrayList<Long>();\n        ArrayList<Long>\
    \ one = new ArrayList<Long>();\n        ArrayList<Long> two = new ArrayList<Long>();\n\
    \        ArrayList<Long> three = new ArrayList<Long>();\n        ArrayList<Long>\
    \ four = new ArrayList<Long>();\n        ArrayList<Long> five = new ArrayList<Long>();\n\
    \        ArrayList<Long> six = new ArrayList<Long>();\n        ArrayList<Long>\
    \ seven = new ArrayList<Long>();\n        ArrayList<Long> eight = new ArrayList<Long>();\n\
    \        ArrayList<Long> nine = new ArrayList<Long>();\n        ArrayList<Long>\
    \ ten = new ArrayList<Long>();\n        ArrayList<Long> eleven = new ArrayList<Long>();\n\
    \        ArrayList<Long> twelve = new ArrayList<Long>();\n        ArrayList<Long>\
    \ thirteen = new ArrayList<Long>();\n        ArrayList<Long> fourteen = new ArrayList<Long>();\n\
    \        ArrayList<Long> fifteen = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sixteen = new ArrayList<Long>();\n        ArrayList<Long> seventeen = new ArrayList<Long>();\n\
    \        ArrayList<Long> eighteen = new ArrayList<Long>();\n        ArrayList<Long>\
    \ nineteen = new ArrayList<Long>();\n        ArrayList<Long> twenty = new ArrayList<Long>();\n\
    \        ArrayList<Long> twentyone = new ArrayList<Long>();\n        ArrayList<Long>\
    \ twentytwo = new ArrayList<Long>();\n        ArrayList<Long> twentythree = new\
    \ ArrayList<Long>();\n        ArrayList<Long> twentyfour = new ArrayList<Long>();\n\
    \        ArrayList<Long> twentyfive = new ArrayList<Long>();\n        ArrayList<Long>\
    \ twentysix = new ArrayList<Long>();\n        ArrayList<Long> twentyseven = new\
    \ ArrayList<Long>();\n        ArrayList<Long> twentyeight = new ArrayList<Long>();\n\
    \        ArrayList<Long> twentynine = new ArrayList<Long>();\n        ArrayList<\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmph7uuean4.java:52: error: illegal start of type\n    }\n    ^\n\
    /tmp/tmph7uuean4.java:51: error: not a statement\n        ArrayList<\n       \
    \          ^\n2 errors\n"
  stdout: ''
  timestamp: 1659794683
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        // Your code here\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        for (Long l : arr) {\n            result.add(l);\n\
    \        }\n        Collections.sort(result, new Comparator<Long>() {\n      \
    \      @Override\n            public int compare(Long l1, Long l2) {\n       \
    \         int l1Ones = Long.bitCount(l1);\n                int l2Ones = Long.bitCount(l2);\n\
    \                if (l1Ones == l2Ones) {\n                    return l1.compareTo(l2);\n\
    \                } else {\n                    return l1Ones - l2Ones;\n     \
    \           }\n            }\n        });\n        return result;\n    }\n   \
    \ public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpknwysirz.java:41)\n"
  stdout: ''
  timestamp: 1659794684
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> sorted = new ArrayList<Long>();\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            long num = arr.get(i);\n\
    \            int ones = 0;\n            while (num > 0) {\n                ones\
    \ += num % 2;\n                num /= 2;\n            }\n            sorted.add(ones);\n\
    \        }\n        ArrayList<Long> sorted2 = new ArrayList<Long>();\n       \
    \ for (int i = 0; i < arr.size(); i++) {\n            long num = arr.get(i);\n\
    \            int ones = 0;\n            while (num > 0) {\n                ones\
    \ += num % 2;\n                num /= 2;\n            }\n            sorted2.add(ones);\n\
    \        }\n        for (int i = 0; i < arr.size(); i++) {\n            for (int\
    \ j = i + 1; j < arr.size(); j++) {\n                if (sorted.get(i) > sorted.get(j))\
    \ {\n                    long temp = sorted.get(i);\n                    sorted.set(i,\
    \ sorted.get(j));\n                    sorted.set(j, temp);\n                \
    \    temp = sorted2.get(i);\n                    sorted2.set(i, sorted2.get(j));\n\
    \                    sorted2.set(j, temp);\n                }\n            }\n\
    \        }\n        for (int i = 0; i < arr.size(); i++) {\n            for (int\
    \ j = i + 1; j < arr.size(); j++) {\n                if (sorted.get(i) == sorted.get(j))\
    \ {\n                    if (sorted2.get(i) > sorted2.get(j)) {\n            \
    \            long temp = sorted2.get(i);\n                        sorted2.set(i,\
    \ sorted2.get(j));\n                        sorted2.set(j, temp);\n          \
    \          }\n                }\n            }\n        }\n        return sorted2;\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_w1thq4e.java:28: error: incompatible types: int cannot be converted\
    \ to Long\n            sorted.add(ones);\n                       ^\n/tmp/tmp_w1thq4e.java:38:\
    \ error: incompatible types: int cannot be converted to Long\n            sorted2.add(ones);\n\
    \                        ^\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1659794684
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        ArrayList<Long> temp = new ArrayList<Long>();\n        ArrayList<Long>\
    \ temp2 = new ArrayList<Long>();\n        ArrayList<Long> temp3 = new ArrayList<Long>();\n\
    \        ArrayList<Long> temp4 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ temp5 = new ArrayList<Long>();\n        ArrayList<Long> temp6 = new ArrayList<Long>();\n\
    \        ArrayList<Long> temp7 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ temp8 = new ArrayList<Long>();\n        ArrayList<Long> temp9 = new ArrayList<Long>();\n\
    \        ArrayList<Long> temp10 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ temp11 = new ArrayList<Long>();\n        ArrayList<Long> temp12 = new ArrayList<Long>();\n\
    \        ArrayList<Long> temp13 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ temp14 = new ArrayList<Long>();\n        ArrayList<Long> temp15 = new ArrayList<Long>();\n\
    \        ArrayList<Long> temp16 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ temp17 = new ArrayList<Long>();\n        ArrayList<Long> temp18 = new ArrayList<Long>();\n\
    \        ArrayList<Long> temp19 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ temp20 = new ArrayList<Long>();\n        ArrayList<Long> temp21 = new ArrayList<Long>();\n\
    \        ArrayList<Long> temp22 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ temp23 = new ArrayList<Long>();\n        ArrayList<Long> temp24 = new ArrayList<Long>();\n\
    \        ArrayList<Long> temp25 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ temp26 = new ArrayList<Long>();\n        ArrayList<Long> temp27 = new ArrayList<Long>();\n\
    \        ArrayList<Long> temp28 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ temp29 = new ArrayList<Long>();\n        ArrayList\n    }\n    public static\
    \ void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbw663tyt.java:50: error: not a statement\n        ArrayList\n \
    \       ^\n/tmp/tmpbw663tyt.java:50: error: ';' expected\n        ArrayList\n\
    \                 ^\n2 errors\n"
  stdout: ''
  timestamp: 1659794681
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        ArrayList<Long> zeros = new ArrayList<Long>();\n        ArrayList<Long>\
    \ ones = new ArrayList<Long>();\n        ArrayList<Long> twos = new ArrayList<Long>();\n\
    \        ArrayList<Long> threes = new ArrayList<Long>();\n        ArrayList<Long>\
    \ fours = new ArrayList<Long>();\n        ArrayList<Long> fives = new ArrayList<Long>();\n\
    \        ArrayList<Long> sixes = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sevens = new ArrayList<Long>();\n        ArrayList<Long> eights = new ArrayList<Long>();\n\
    \        ArrayList<Long> nines = new ArrayList<Long>();\n        ArrayList<Long>\
    \ tens = new ArrayList<Long>();\n        ArrayList<Long> elevens = new ArrayList<Long>();\n\
    \        ArrayList<Long> twelves = new ArrayList<Long>();\n        ArrayList<Long>\
    \ thirteens = new ArrayList<Long>();\n        ArrayList<Long> fourteens = new\
    \ ArrayList<Long>();\n        ArrayList<Long> fifteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> sixteens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ seventeens = new ArrayList<Long>();\n        ArrayList<Long> eightteens = new\
    \ ArrayList<Long>();\n        ArrayList<Long> nineteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> twenties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ thirtys = new ArrayList<Long>();\n        ArrayList<Long> fortys = new ArrayList<Long>();\n\
    \        ArrayList<Long> fiftys = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sixtys = new ArrayList<Long>();\n        ArrayList<Long> seventys = new ArrayList<Long>();\n\
    \        ArrayList<Long> eighty = new ArrayList<Long>();\n        ArrayList<Long>\
    \ ninety = new ArrayList<Long>();\n        ArrayList<Long> hundred = new ArrayList<Long>();\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjkmtfnqi.java:50: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659794684
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        ArrayList<Long> temp = new ArrayList<Long>();\n        ArrayList<Long>\
    \ temp2 = new ArrayList<Long>();\n        ArrayList<Long> temp3 = new ArrayList<Long>();\n\
    \        ArrayList<Long> temp4 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ temp5 = new ArrayList<Long>();\n        ArrayList<Long> temp6 = new ArrayList<Long>();\n\
    \        ArrayList<Long> temp7 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ temp8 = new ArrayList<Long>();\n        ArrayList<Long> temp9 = new ArrayList<Long>();\n\
    \        ArrayList<Long> temp10 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ temp11 = new ArrayList<Long>();\n        ArrayList<Long> temp12 = new ArrayList<Long>();\n\
    \        ArrayList<Long> temp13 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ temp14 = new ArrayList<Long>();\n        ArrayList<Long> temp15 = new ArrayList<Long>();\n\
    \        ArrayList<Long> temp16 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ temp17 = new ArrayList<Long>();\n        ArrayList<Long> temp18 = new ArrayList<Long>();\n\
    \        ArrayList<Long> temp19 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ temp20 = new ArrayList<Long>();\n        ArrayList<Long> temp21 = new ArrayList<Long>();\n\
    \        ArrayList<Long> temp22 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ temp23 = new ArrayList<Long>();\n        ArrayList<Long> temp24 = new ArrayList<Long>();\n\
    \        ArrayList<Long> temp25 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ temp26 = new ArrayList<Long>();\n        ArrayList<Long> temp27 = new ArrayList<Long>();\n\
    \        ArrayList<Long> temp28 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ temp29 = new ArrayList<Long>();\n        ArrayList\n    }\n    public static\
    \ void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbw663tyt.java:50: error: not a statement\n        ArrayList\n \
    \       ^\n/tmp/tmpbw663tyt.java:50: error: ';' expected\n        ArrayList\n\
    \                 ^\n2 errors\n"
  stdout: ''
  timestamp: 1659794681
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        // Your code here\n        ArrayList<Long>\
    \ sorted = new ArrayList<Long>();\n        ArrayList<Long> zeros = new ArrayList<Long>();\n\
    \        ArrayList<Long> ones = new ArrayList<Long>();\n        ArrayList<Long>\
    \ twos = new ArrayList<Long>();\n        ArrayList<Long> threes = new ArrayList<Long>();\n\
    \        ArrayList<Long> fours = new ArrayList<Long>();\n        ArrayList<Long>\
    \ fives = new ArrayList<Long>();\n        ArrayList<Long> sixes = new ArrayList<Long>();\n\
    \        ArrayList<Long> sevens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ eights = new ArrayList<Long>();\n        ArrayList<Long> nines = new ArrayList<Long>();\n\
    \        ArrayList<Long> tens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ elevens = new ArrayList<Long>();\n        ArrayList<Long> twelves = new ArrayList<Long>();\n\
    \        ArrayList<Long> thirteens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ fourteens = new ArrayList<Long>();\n        ArrayList<Long> fifteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> sixteens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ seventeens = new ArrayList<Long>();\n        ArrayList<Long> eighteens = new\
    \ ArrayList<Long>();\n        ArrayList<Long> nineteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> twenties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ thirties = new ArrayList<Long>();\n        ArrayList<Long> fourties = new ArrayList<Long>();\n\
    \        ArrayList<Long> fifties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sixties = new ArrayList<Long>();\n        ArrayList<Long> seventies = new ArrayList<Long>();\n\
    \        ArrayList<Long> eighties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ nineties = new ArrayList<Long>();\n        ArrayList<Long\n    }\n    public\
    \ static void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqsi8yt7d.java:51: error: > expected\n    }\n    ^\n/tmp/tmpqsi8yt7d.java:50:\
    \ error: not a statement\n        ArrayList<Long\n                 ^\n2 errors\n"
  stdout: ''
  timestamp: 1659794684
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        return arr;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpeye6p7lq.java:23)\n"
  stdout: ''
  timestamp: 1659794684
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> sorted = new ArrayList<Long>();\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            sorted.add(arr.get(i));\n\
    \        }\n        Collections.sort(sorted, new Comparator<Long>() {\n      \
    \      @Override\n            public int compare(Long a, Long b) {\n         \
    \       int aOnes = Long.bitCount(a);\n                int bOnes = Long.bitCount(b);\n\
    \                if (aOnes == bOnes) {\n                    return a.compareTo(b);\n\
    \                } else {\n                    return aOnes - bOnes;\n       \
    \         }\n            }\n        });\n        return sorted;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkj41nbxz.java:40)\n"
  stdout: ''
  timestamp: 1659794685
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> sorted = new ArrayList<Long>();\n\
    \        ArrayList<Long> negatives = new ArrayList<Long>();\n        ArrayList<Long>\
    \ positives = new ArrayList<Long>();\n        for (Long l : arr) {\n         \
    \   if (l < 0) {\n                negatives.add(l);\n            } else {\n  \
    \              positives.add(l);\n            }\n        }\n        Collections.sort(negatives);\n\
    \        Collections.sort(positives);\n        Collections.reverse(negatives);\n\
    \        for (Long l : negatives) {\n            sorted.add(l);\n        }\n \
    \       for (Long l : positives) {\n            sorted.add(l);\n        }\n  \
    \      return sorted;\n    }\n    public static void main(String[] args) {\n \
    \   assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0rha2cqn.java:42)\n"
  stdout: ''
  timestamp: 1659794685
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> sorted = new ArrayList<Long>();\n\
    \        ArrayList<Long> sortedByOnes = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sortedByDecimal = new ArrayList<Long>();\n        ArrayList<Long> sortedByOnesAndDecimal\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByOnesAndDecimalAndNegative\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByNegative = new ArrayList<Long>();\n\
    \        ArrayList<Long> sortedByNegativeAndDecimal = new ArrayList<Long>();\n\
    \        ArrayList<Long> sortedByNegativeAndOnes = new ArrayList<Long>();\n  \
    \      ArrayList<Long> sortedByNegativeAndOnesAndDecimal = new ArrayList<Long>();\n\
    \        ArrayList<Long> sortedByZero = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sortedByZeroAndDecimal = new ArrayList<Long>();\n        ArrayList<Long> sortedByZeroAndOnes\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByZeroAndOnesAndDecimal\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByZeroAndNegative =\
    \ new ArrayList<Long>();\n        ArrayList<Long> sortedByZeroAndNegativeAndDecimal\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByZeroAndNegativeAndOnes\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByZeroAndNegativeAndOnesAndDecimal\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByZeroAndNegativeAndOnesAndDecimalAndPositive\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByZeroAndNegativeAndOnesAndDecimalAndPositiveAndDecimal\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByZeroAndNegativeAndOnesAndDecimalAndPositiveAndOnes\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByZeroAndNegativeAndOnesAndDecimalAndPositiveAndOnesAndDecimal\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByZeroAnd\n    }\n \
    \   public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpq8gng5kn.java:41: error: ';' expected\n        ArrayList<Long>\
    \ sortedByZeroAnd\n                                       ^\n1 error\n"
  stdout: ''
  timestamp: 1659794684
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> sorted = new ArrayList<Long>();\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            sorted.add(arr.get(i));\n\
    \        }\n        Collections.sort(sorted, new Comparator<Long>() {\n      \
    \      @Override\n            public int compare(Long a, Long b) {\n         \
    \       int aOnes = Long.bitCount(a);\n                int bOnes = Long.bitCount(b);\n\
    \                if (aOnes == bOnes) {\n                    return a.compareTo(b);\n\
    \                } else {\n                    return aOnes - bOnes;\n       \
    \         }\n            }\n        });\n        return sorted;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkj41nbxz.java:40)\n"
  stdout: ''
  timestamp: 1659794685
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> sorted = new ArrayList<>();\n\
    \        ArrayList<Long> negative = new ArrayList<>();\n        ArrayList<Long>\
    \ positive = new ArrayList<>();\n        for (Long l : arr) {\n            if\
    \ (l < 0) {\n                negative.add(l);\n            } else {\n        \
    \        positive.add(l);\n            }\n        }\n        Collections.sort(negative);\n\
    \        Collections.sort(positive);\n        Collections.reverse(negative);\n\
    \        for (Long l : negative) {\n            sorted.add(l);\n        }\n  \
    \      for (Long l : positive) {\n            sorted.add(l);\n        }\n    \
    \    return sorted;\n    }\n    public static void main(String[] args) {\n   \
    \ assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkx_yb90_.java:42)\n"
  stdout: ''
  timestamp: 1659794685
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> sorted = new ArrayList<Long>();\n\
    \        ArrayList<Long> zeros = new ArrayList<Long>();\n        ArrayList<Long>\
    \ ones = new ArrayList<Long>();\n        for (Long i : arr) {\n            if\
    \ (i == 0) {\n                zeros.add(i);\n            } else {\n          \
    \      ones.add(i);\n            }\n        }\n        Collections.sort(ones);\n\
    \        sorted.addAll(zeros);\n        sorted.addAll(ones);\n        return sorted;\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfmjgjaik.java:36)\n"
  stdout: ''
  timestamp: 1659794685
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> sorted = new ArrayList<>();\n\
    \        for (Long l : arr) {\n            sorted.add(l);\n        }\n       \
    \ Collections.sort(sorted, new Comparator<Long>() {\n            @Override\n \
    \           public int compare(Long l1, Long l2) {\n                String s1\
    \ = Long.toBinaryString(l1);\n                String s2 = Long.toBinaryString(l2);\n\
    \                int ones1 = 0;\n                int ones2 = 0;\n            \
    \    for (int i = 0; i < s1.length(); i++) {\n                    if (s1.charAt(i)\
    \ == '1') {\n                        ones1++;\n                    }\n       \
    \         }\n                for (int i = 0; i < s2.length(); i++) {\n       \
    \             if (s2.charAt(i) == '1') {\n                        ones2++;\n \
    \                   }\n                }\n                if (ones1 == ones2)\
    \ {\n                    return l1.compareTo(l2);\n                } else {\n\
    \                    return ones1 - ones2;\n                }\n            }\n\
    \        });\n        return sorted;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo0n__8nx.java:52)\n"
  stdout: ''
  timestamp: 1659794685
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> sorted = new ArrayList<Long>();\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            sorted.add(arr.get(i));\n\
    \        }\n        Collections.sort(sorted, new Comparator<Long>() {\n      \
    \      @Override\n            public int compare(Long a, Long b) {\n         \
    \       int aOnes = countOnes(a);\n                int bOnes = countOnes(b);\n\
    \                if (aOnes == bOnes) {\n                    return a.compareTo(b);\n\
    \                } else {\n                    return aOnes - bOnes;\n       \
    \         }\n            }\n        });\n        return sorted;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplnb2_1s9.java:27: error: cannot find symbol\n                int\
    \ aOnes = countOnes(a);\n                            ^\n  symbol: method countOnes(Long)\n\
    /tmp/tmplnb2_1s9.java:28: error: cannot find symbol\n                int bOnes\
    \ = countOnes(b);\n                            ^\n  symbol: method countOnes(Long)\n\
    2 errors\n"
  stdout: ''
  timestamp: 1659794682
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        ArrayList<Long> temp = new ArrayList<Long>();\n        ArrayList<Long>\
    \ temp2 = new ArrayList<Long>();\n        ArrayList<Long> temp3 = new ArrayList<Long>();\n\
    \        ArrayList<Long> temp4 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ temp5 = new ArrayList<Long>();\n        ArrayList<Long> temp6 = new ArrayList<Long>();\n\
    \        ArrayList<Long> temp7 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ temp8 = new ArrayList<Long>();\n        ArrayList<Long> temp9 = new ArrayList<Long>();\n\
    \        ArrayList<Long> temp10 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ temp11 = new ArrayList<Long>();\n        ArrayList<Long> temp12 = new ArrayList<Long>();\n\
    \        ArrayList<Long> temp13 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ temp14 = new ArrayList<Long>();\n        ArrayList<Long> temp15 = new ArrayList<Long>();\n\
    \        ArrayList<Long> temp16 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ temp17 = new ArrayList<Long>();\n        ArrayList<Long> temp18 = new ArrayList<Long>();\n\
    \        ArrayList<Long> temp19 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ temp20 = new ArrayList<Long>();\n        ArrayList<Long> temp21 = new ArrayList<Long>();\n\
    \        ArrayList<Long> temp22 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ temp23 = new ArrayList<Long>();\n        ArrayList<Long> temp24 = new ArrayList<Long>();\n\
    \        ArrayList<Long> temp25 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ temp26 = new ArrayList<Long>();\n        ArrayList<Long> temp27 = new ArrayList<Long>();\n\
    \        ArrayList<Long> temp28 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ temp29 = new ArrayList<Long>();\n        ArrayList\n    }\n    public static\
    \ void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbw663tyt.java:50: error: not a statement\n        ArrayList\n \
    \       ^\n/tmp/tmpbw663tyt.java:50: error: ';' expected\n        ArrayList\n\
    \                 ^\n2 errors\n"
  stdout: ''
  timestamp: 1659794681
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> sorted = new ArrayList<Long>();\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            sorted.add(arr.get(i));\n\
    \        }\n        Collections.sort(sorted, new Comparator<Long>() {\n      \
    \      @Override\n            public int compare(Long a, Long b) {\n         \
    \       int aOnes = getOnes(a);\n                int bOnes = getOnes(b);\n   \
    \             if (aOnes == bOnes) {\n                    return a.compareTo(b);\n\
    \                } else {\n                    return aOnes - bOnes;\n       \
    \         }\n            }\n        });\n        return sorted;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxm986i0l.java:27: error: cannot find symbol\n                int\
    \ aOnes = getOnes(a);\n                            ^\n  symbol: method getOnes(Long)\n\
    /tmp/tmpxm986i0l.java:28: error: cannot find symbol\n                int bOnes\
    \ = getOnes(b);\n                            ^\n  symbol: method getOnes(Long)\n\
    2 errors\n"
  stdout: ''
  timestamp: 1659794685
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> sorted = new ArrayList<Long>();\n\
    \        ArrayList<Long> zeros = new ArrayList<Long>();\n        ArrayList<Long>\
    \ ones = new ArrayList<Long>();\n        ArrayList<Long> twos = new ArrayList<Long>();\n\
    \        ArrayList<Long> threes = new ArrayList<Long>();\n        ArrayList<Long>\
    \ fours = new ArrayList<Long>();\n        ArrayList<Long> fives = new ArrayList<Long>();\n\
    \        ArrayList<Long> sixes = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sevens = new ArrayList<Long>();\n        ArrayList<Long> eights = new ArrayList<Long>();\n\
    \        ArrayList<Long> nines = new ArrayList<Long>();\n        ArrayList<Long>\
    \ tens = new ArrayList<Long>();\n        ArrayList<Long> elevens = new ArrayList<Long>();\n\
    \        ArrayList<Long> twelves = new ArrayList<Long>();\n        ArrayList<Long>\
    \ thirteens = new ArrayList<Long>();\n        ArrayList<Long> fourteens = new\
    \ ArrayList<Long>();\n        ArrayList<Long> fifteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> sixteens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ seventeens = new ArrayList<Long>();\n        ArrayList<Long> eightteens = new\
    \ ArrayList<Long>();\n        ArrayList<Long> nineteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> twenties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ thirties = new ArrayList<Long>();\n        ArrayList<Long> fourties = new ArrayList<Long>();\n\
    \        ArrayList<Long> fifties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sixties = new ArrayList<Long>();\n        ArrayList<Long> seventies = new ArrayList<Long>();\n\
    \        ArrayList<Long> eighties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ nineties = new ArrayList<Long>();\n        ArrayList<Long> hundreds = new ArrayList\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpi1ys6p61.java:50: error: '(' or '[' expected\n    }\n    ^\n1 error\n"
  stdout: ''
  timestamp: 1659794684
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        // your code here\n        ArrayList<Long>\
    \ sorted = new ArrayList<Long>();\n        ArrayList<Long> sorted2 = new ArrayList<Long>();\n\
    \        ArrayList<Long> sorted3 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sorted4 = new ArrayList<Long>();\n        ArrayList<Long> sorted5 = new ArrayList<Long>();\n\
    \        ArrayList<Long> sorted6 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sorted7 = new ArrayList<Long>();\n        ArrayList<Long> sorted8 = new ArrayList<Long>();\n\
    \        ArrayList<Long> sorted9 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sorted10 = new ArrayList<Long>();\n        ArrayList<Long> sorted11 = new ArrayList<Long>();\n\
    \        ArrayList<Long> sorted12 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sorted13 = new ArrayList<Long>();\n        ArrayList<Long> sorted14 = new ArrayList<Long>();\n\
    \        ArrayList<Long> sorted15 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sorted16 = new ArrayList<Long>();\n        ArrayList<Long> sorted17 = new ArrayList<Long>();\n\
    \        ArrayList<Long> sorted18 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sorted19 = new ArrayList<Long>();\n        ArrayList<Long> sorted20 = new ArrayList<Long>();\n\
    \        ArrayList<Long> sorted21 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sorted22 = new ArrayList<Long>();\n        ArrayList<Long> sorted23 = new ArrayList<Long>();\n\
    \        ArrayList<Long> sorted24 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sorted25 = new ArrayList<Long>();\n        ArrayList<Long> sorted26 = new ArrayList<Long>();\n\
    \        ArrayList<Long> sorted27 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sorted28 = new ArrayList<Long>();\n        ArrayList<Long> sorted29 = new ArrayList<Long>();\n\
    \        ArrayList<Long> sorted30 = new ArrayList<\n    }\n    public static void\
    \ main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpedczu1vv.java:51: error: illegal start of type\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659794683
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> sorted = new ArrayList<Long>();\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            sorted.add(arr.get(i));\n\
    \        }\n        Collections.sort(sorted, new Comparator<Long>() {\n      \
    \      @Override\n            public int compare(Long a, Long b) {\n         \
    \       if (Long.bitCount(a) == Long.bitCount(b)) {\n                    return\
    \ a.compareTo(b);\n                } else {\n                    return Long.bitCount(a)\
    \ - Long.bitCount(b);\n                }\n            }\n        });\n       \
    \ return sorted;\n    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp86vms6rl.java:38)\n"
  stdout: ''
  timestamp: 1659794685
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        ArrayList<Long> sorted = new ArrayList<Long>();\n        for (Long i\
    \ : arr) {\n            sorted.add(i);\n        }\n        Collections.sort(sorted);\n\
    \        for (Long i : sorted) {\n            result.add(i);\n        }\n    \
    \    return result;\n    }\n    public static void main(String[] args) {\n   \
    \ assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpndkjp9b_.java:32)\n"
  stdout: ''
  timestamp: 1659794685
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        ArrayList<Long> temp = new ArrayList<Long>();\n        ArrayList<Long>\
    \ temp2 = new ArrayList<Long>();\n        ArrayList<Long> temp3 = new ArrayList<Long>();\n\
    \        ArrayList<Long> temp4 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ temp5 = new ArrayList<Long>();\n        ArrayList<Long> temp6 = new ArrayList<Long>();\n\
    \        ArrayList<Long> temp7 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ temp8 = new ArrayList<Long>();\n        ArrayList<Long> temp9 = new ArrayList<Long>();\n\
    \        ArrayList<Long> temp10 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ temp11 = new ArrayList<Long>();\n        ArrayList<Long> temp12 = new ArrayList<Long>();\n\
    \        ArrayList<Long> temp13 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ temp14 = new ArrayList<Long>();\n        ArrayList<Long> temp15 = new ArrayList<Long>();\n\
    \        ArrayList<Long> temp16 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ temp17 = new ArrayList<Long>();\n        ArrayList<Long> temp18 = new ArrayList<Long>();\n\
    \        ArrayList<Long> temp19 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ temp20 = new ArrayList<Long>();\n        ArrayList<Long> temp21 = new ArrayList<Long>();\n\
    \        ArrayList<Long> temp22 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ temp23 = new ArrayList<Long>();\n        ArrayList<Long> temp24 = new ArrayList<Long>();\n\
    \        ArrayList<Long> temp25 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ temp26 = new ArrayList<Long>();\n        ArrayList<Long> temp27 = new ArrayList<Long>();\n\
    \        ArrayList<Long> temp28 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ temp29 = new ArrayList<Long>();\n        ArrayList\n    }\n    public static\
    \ void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbw663tyt.java:50: error: not a statement\n        ArrayList\n \
    \       ^\n/tmp/tmpbw663tyt.java:50: error: ';' expected\n        ArrayList\n\
    \                 ^\n2 errors\n"
  stdout: ''
  timestamp: 1659794681
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> sorted = new ArrayList<Long>();\n\
    \        ArrayList<Long> sorted_ones = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sorted_zeros = new ArrayList<Long>();\n        for (Long i : arr) {\n      \
    \      if (Long.bitCount(i) == 0) {\n                sorted_zeros.add(i);\n  \
    \          } else {\n                sorted_ones.add(i);\n            }\n    \
    \    }\n        Collections.sort(sorted_ones);\n        Collections.sort(sorted_zeros);\n\
    \        sorted.addAll(sorted_ones);\n        sorted.addAll(sorted_zeros);\n \
    \       return sorted;\n    }\n    public static void main(String[] args) {\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9ab2azmy.java:37)\n"
  stdout: ''
  timestamp: 1659794685
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> sorted = new ArrayList<Long>();\n\
    \        ArrayList<Long> sortedByOnes = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sortedByDecimal = new ArrayList<Long>();\n        ArrayList<Long> sortedByOnesAndDecimal\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByOnesAndDecimalAndNegative\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByNegative = new ArrayList<Long>();\n\
    \        ArrayList<Long> sortedByNegativeAndDecimal = new ArrayList<Long>();\n\
    \        ArrayList<Long> sortedByNegativeAndOnes = new ArrayList<Long>();\n  \
    \      ArrayList<Long> sortedByNegativeAndOnesAndDecimal = new ArrayList<Long>();\n\
    \        ArrayList<Long> sortedByDecimalAndNegative = new ArrayList<Long>();\n\
    \        ArrayList<Long> sortedByDecimalAndOnes = new ArrayList<Long>();\n   \
    \     ArrayList<Long> sortedByDecimalAndOnesAndNegative = new ArrayList<Long>();\n\
    \        ArrayList<Long> sortedByDecimalAndNegativeAndOnes = new ArrayList<Long>();\n\
    \        ArrayList<Long> sortedByNegativeAndDecimalAndOnes = new ArrayList<Long>();\n\
    \        ArrayList<Long> sortedByOnesAndNegativeAndDecimal = new ArrayList<Long>();\n\
    \        ArrayList<Long> sortedByOnesAndDecimalAndNegative = new ArrayList<Long>();\n\
    \        ArrayList<Long> sortedByNegativeAndOnesAndDecimal = new ArrayList<Long>();\n\
    \        ArrayList<Long> sortedByDecimalAndOnesAndNegative = new ArrayList<Long>();\n\
    \        ArrayList<Long> sortedByNegativeAndDecimalAndOnes = new ArrayList<Long>();\n\
    \        ArrayList<Long> sortedByOnesAndNegativeAndDecimal = new ArrayList<Long>();\n\
    \        ArrayList<Long> sortedByOnesAndDecimalAndNegative = new ArrayList<Long>();\n\
    \        ArrayList<Long> sortedByNegativeAndOnesAndDecimal = new ArrayList<Long>();\n\
    \        ArrayList\n    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8r7okh87.java:42: error: not a statement\n        ArrayList\n \
    \       ^\n/tmp/tmp8r7okh87.java:42: error: ';' expected\n        ArrayList\n\
    \                 ^\n2 errors\n"
  stdout: ''
  timestamp: 1659794684
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        // Your code here\n        return\
    \ arr;\n    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvyxipufw.java:24)\n"
  stdout: ''
  timestamp: 1659794684
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        // Your code here\n        return\
    \ arr;\n    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvyxipufw.java:24)\n"
  stdout: ''
  timestamp: 1659794684
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        // your code here\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        ArrayList<Long> temp = new ArrayList<Long>();\n\
    \        for (Long i : arr) {\n            temp.add(i);\n        }\n        Collections.sort(temp);\n\
    \        for (Long i : temp) {\n            result.add(i);\n        }\n      \
    \  return result;\n    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvfpc4oxm.java:33)\n"
  stdout: ''
  timestamp: 1659794685
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        ArrayList<Long> zeros = new ArrayList<Long>();\n        ArrayList<Long>\
    \ ones = new ArrayList<Long>();\n        ArrayList<Long> twos = new ArrayList<Long>();\n\
    \        ArrayList<Long> threes = new ArrayList<Long>();\n        ArrayList<Long>\
    \ fours = new ArrayList<Long>();\n        ArrayList<Long> fives = new ArrayList<Long>();\n\
    \        ArrayList<Long> sixes = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sevens = new ArrayList<Long>();\n        ArrayList<Long> eights = new ArrayList<Long>();\n\
    \        ArrayList<Long> nines = new ArrayList<Long>();\n        ArrayList<Long>\
    \ tens = new ArrayList<Long>();\n        ArrayList<Long> elevens = new ArrayList<Long>();\n\
    \        ArrayList<Long> twelves = new ArrayList<Long>();\n        ArrayList<Long>\
    \ thirteens = new ArrayList<Long>();\n        ArrayList<Long> fourteens = new\
    \ ArrayList<Long>();\n        ArrayList<Long> fifteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> sixteens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ seventeens = new ArrayList<Long>();\n        ArrayList<Long> eightteens = new\
    \ ArrayList<Long>();\n        ArrayList<Long> nineteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> twenties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ thirties = new ArrayList<Long>();\n        ArrayList<Long> fourties = new ArrayList<Long>();\n\
    \        ArrayList<Long> fifties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sixties = new ArrayList<Long>();\n        ArrayList<Long> seventies = new ArrayList<Long>();\n\
    \        ArrayList<Long> eighties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ nineties = new ArrayList<Long>();\n        ArrayList<Long> hundreds = new ArrayList\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvugmvueb.java:50: error: '(' or '[' expected\n    }\n    ^\n1 error\n"
  stdout: ''
  timestamp: 1659794685
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        // Your code here\n        ArrayList<Long>\
    \ sorted = new ArrayList<Long>();\n        for (int i = 0; i < arr.size(); i++)\
    \ {\n            sorted.add(arr.get(i));\n        }\n        Collections.sort(sorted,\
    \ new Comparator<Long>() {\n            @Override\n            public int compare(Long\
    \ a, Long b) {\n                int aOnes = Long.bitCount(a);\n              \
    \  int bOnes = Long.bitCount(b);\n                if (aOnes == bOnes) {\n    \
    \                return a.compareTo(b);\n                } else {\n          \
    \          return aOnes - bOnes;\n                }\n            }\n        });\n\
    \        return sorted;\n    }\n    public static void main(String[] args) {\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0w6ztb51.java:41)\n"
  stdout: ''
  timestamp: 1659794686
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> sorted = new ArrayList<Long>();\n\
    \        ArrayList<Long> negatives = new ArrayList<Long>();\n        ArrayList<Long>\
    \ positives = new ArrayList<Long>();\n        for (Long l : arr) {\n         \
    \   if (l < 0) {\n                negatives.add(l);\n            } else {\n  \
    \              positives.add(l);\n            }\n        }\n        Collections.sort(negatives);\n\
    \        Collections.sort(positives);\n        Collections.reverse(negatives);\n\
    \        for (Long l : negatives) {\n            sorted.add(l);\n        }\n \
    \       for (Long l : positives) {\n            sorted.add(l);\n        }\n  \
    \      return sorted;\n    }\n    public static void main(String[] args) {\n \
    \   assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0rha2cqn.java:42)\n"
  stdout: ''
  timestamp: 1659794685
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> sorted = new ArrayList<Long>();\n\
    \        ArrayList<Long> negative = new ArrayList<Long>();\n        ArrayList<Long>\
    \ positive = new ArrayList<Long>();\n        for (Long i : arr) {\n          \
    \  if (i < 0) {\n                negative.add(i);\n            } else {\n    \
    \            positive.add(i);\n            }\n        }\n        Collections.sort(negative);\n\
    \        Collections.sort(positive);\n        for (Long i : negative) {\n    \
    \        sorted.add(i);\n        }\n        for (Long i : positive) {\n      \
    \      sorted.add(i);\n        }\n        return sorted;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7v65a3od.java:41)\n"
  stdout: ''
  timestamp: 1659794686
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> sorted = new ArrayList<Long>();\n\
    \        ArrayList<Long> negatives = new ArrayList<Long>();\n        ArrayList<Long>\
    \ positives = new ArrayList<Long>();\n        for (Long l : arr) {\n         \
    \   if (l < 0) {\n                negatives.add(l);\n            } else {\n  \
    \              positives.add(l);\n            }\n        }\n        Collections.sort(negatives);\n\
    \        Collections.sort(positives);\n        Collections.reverse(negatives);\n\
    \        Collections.reverse(positives);\n        for (Long l : negatives) {\n\
    \            sorted.add(l);\n        }\n        for (Long l : positives) {\n \
    \           sorted.add(l);\n        }\n        return sorted;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphl17tkza.java:43)\n"
  stdout: ''
  timestamp: 1659794685
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        ArrayList<Long> positive = new ArrayList<Long>();\n        ArrayList<Long>\
    \ negative = new ArrayList<Long>();\n        for (Long i : arr) {\n          \
    \  if (i < 0) {\n                negative.add(i);\n            } else {\n    \
    \            positive.add(i);\n            }\n        }\n        positive.sort(new\
    \ Comparator<Long>() {\n            @Override\n            public int compare(Long\
    \ o1, Long o2) {\n                int o1Ones = Integer.bitCount(o1.intValue());\n\
    \                int o2Ones = Integer.bitCount(o2.intValue());\n             \
    \   if (o1Ones == o2Ones) {\n                    return o1.compareTo(o2);\n  \
    \              } else {\n                    return o1Ones - o2Ones;\n       \
    \         }\n            }\n        });\n        negative.sort(new Comparator<Long>()\
    \ {\n            @Override\n            public int compare(Long o1, Long o2) {\n\
    \                int o1Ones = Integer.bitCount(o1.intValue());\n             \
    \   int o2Ones = Integer.bitCount(o2.intValue());\n                if (o1Ones\
    \ == o2Ones) {\n                    return o1.compareTo(o2);\n               \
    \ } else {\n                    return o1Ones - o2Ones;\n                }\n \
    \           }\n        });\n        Collections.reverse(negative);\n        result.addAll(negative);\n\
    \        result.addAll(positive);\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnzk4s8lw.java:61)\n"
  stdout: ''
  timestamp: 1659794686
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        // your code here\n        // return\
    \ arr;\n        // System.out.println(arr);\n        // System.out.println(arr.stream().map(x\
    \ -> Long.bitCount(x)).collect(Collectors.toList()));\n        // System.out.println(arr.stream().map(x\
    \ -> Long.bitCount(x)).collect(Collectors.toList()).indexOf(1));\n        // System.out.println(arr.stream().map(x\
    \ -> Long.bitCount(x)).collect(Collectors.toList()).indexOf(2));\n        // System.out.println(arr.stream().map(x\
    \ -> Long.bitCount(x)).collect(Collectors.toList()).indexOf(3));\n        // System.out.println(arr.stream().map(x\
    \ -> Long.bitCount(x)).collect(Collectors.toList()).indexOf(4));\n        // System.out.println(arr.stream().map(x\
    \ -> Long.bitCount(x)).collect(Collectors.toList()).indexOf(5));\n        // System.out.println(arr.stream().map(x\
    \ -> Long.bitCount(x)).collect(Collectors.toList()).indexOf(6));\n        // System.out.println(arr.stream().map(x\
    \ -> Long.bitCount(x)).collect(Collectors.toList()).indexOf(7));\n        // System.out.println(arr.stream().map(x\
    \ -> Long.bitCount(x)).collect(Collectors.toList()).indexOf(8));\n        // System.out.println(arr.stream().map(x\
    \ -> Long.bitCount(x)).collect(Collectors.toList()).indexOf(9));\n        // System.out.println(arr.stream().map(x\
    \ -> Long.bitCount(x)).collect(Collectors.toList()).indexOf(10));\n        //\
    \ System.out.println(arr.stream().map(x -> Long.bitCount(x)).collect(Collectors.toList()).indexOf(11));\n\
    \        // System.out.println(arr.stream().map(x -> Long.bitCount(x)).collect(Collectors.toList()).indexOf(12));\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkqtmdx2s.java:36: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659794686
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> sorted = new ArrayList<Long>();\n\
    \        ArrayList<Long> zeros = new ArrayList<Long>();\n        ArrayList<Long>\
    \ ones = new ArrayList<Long>();\n        ArrayList<Long> twos = new ArrayList<Long>();\n\
    \        ArrayList<Long> threes = new ArrayList<Long>();\n        ArrayList<Long>\
    \ fours = new ArrayList<Long>();\n        ArrayList<Long> fives = new ArrayList<Long>();\n\
    \        ArrayList<Long> sixes = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sevens = new ArrayList<Long>();\n        ArrayList<Long> eights = new ArrayList<Long>();\n\
    \        ArrayList<Long> nines = new ArrayList<Long>();\n        ArrayList<Long>\
    \ tens = new ArrayList<Long>();\n        ArrayList<Long> elevens = new ArrayList<Long>();\n\
    \        ArrayList<Long> twelves = new ArrayList<Long>();\n        ArrayList<Long>\
    \ thirteens = new ArrayList<Long>();\n        ArrayList<Long> fourteens = new\
    \ ArrayList<Long>();\n        ArrayList<Long> fifteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> sixteens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ seventeens = new ArrayList<Long>();\n        ArrayList<Long> eighteens = new\
    \ ArrayList<Long>();\n        ArrayList<Long> ninteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> twenties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ thirties = new ArrayList<Long>();\n        ArrayList<Long> forties = new ArrayList<Long>();\n\
    \        ArrayList<Long> fifties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sixties = new ArrayList<Long>();\n        ArrayList<Long> seventies = new ArrayList<Long>();\n\
    \        ArrayList<Long> eighties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ nineties = new ArrayList<Long>();\n        ArrayList<Long> hundreds = new Array\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnt38bvb0.java:50: error: '(' or '[' expected\n    }\n    ^\n1 error\n"
  stdout: ''
  timestamp: 1659794683
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        // Your code here\n        return\
    \ arr;\n    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvyxipufw.java:24)\n"
  stdout: ''
  timestamp: 1659794684
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> sorted = new ArrayList<Long>();\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            int ones = 0;\n \
    \           long num = arr.get(i);\n            while (num > 0) {\n          \
    \      if (num % 2 == 1) {\n                    ones++;\n                }\n \
    \               num /= 2;\n            }\n            sorted.add(ones * 100000000\
    \ + arr.get(i));\n        }\n        Collections.sort(sorted);\n        for (int\
    \ i = 0; i < sorted.size(); i++) {\n            sorted.set(i, sorted.get(i) %\
    \ 100000000);\n        }\n        return sorted;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgwbwwv4g.java:40)\n"
  stdout: ''
  timestamp: 1659794686
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> sorted = new ArrayList<Long>();\n\
    \        ArrayList<Long> zeros = new ArrayList<Long>();\n        ArrayList<Long>\
    \ ones = new ArrayList<Long>();\n        ArrayList<Long> twos = new ArrayList<Long>();\n\
    \        ArrayList<Long> threes = new ArrayList<Long>();\n        ArrayList<Long>\
    \ fours = new ArrayList<Long>();\n        ArrayList<Long> fives = new ArrayList<Long>();\n\
    \        ArrayList<Long> sixes = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sevens = new ArrayList<Long>();\n        ArrayList<Long> eights = new ArrayList<Long>();\n\
    \        ArrayList<Long> nines = new ArrayList<Long>();\n        ArrayList<Long>\
    \ tens = new ArrayList<Long>();\n        ArrayList<Long> elevens = new ArrayList<Long>();\n\
    \        ArrayList<Long> twelves = new ArrayList<Long>();\n        ArrayList<Long>\
    \ thirteens = new ArrayList<Long>();\n        ArrayList<Long> fourteens = new\
    \ ArrayList<Long>();\n        ArrayList<Long> fifteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> sixteens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ seventeens = new ArrayList<Long>();\n        ArrayList<Long> eightteens = new\
    \ ArrayList<Long>();\n        ArrayList<Long> ninteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> twenties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ twentyones = new ArrayList<Long>();\n        ArrayList<Long> twentytwos = new\
    \ ArrayList<Long>();\n        ArrayList<Long> twentythrees = new ArrayList<Long>();\n\
    \        ArrayList<Long> twentyfours = new ArrayList<Long>();\n        ArrayList<Long>\
    \ twentyfives = new ArrayList<Long>();\n        ArrayList<Long> twentysixes =\
    \ new ArrayList<Long>();\n        ArrayList<Long> twentysevens = new ArrayList<Long>();\n\
    \        ArrayList<Long\n    }\n    public static void main(String[] args) {\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2_24ubgk.java:50: error: > expected\n    }\n    ^\n/tmp/tmp2_24ubgk.java:49:\
    \ error: not a statement\n        ArrayList<Long\n                 ^\n2 errors\n"
  stdout: ''
  timestamp: 1659794681
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> sorted = new ArrayList<Long>();\n\
    \        ArrayList<Long> sortedByOnes = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sortedByDecimal = new ArrayList<Long>();\n        for (Long num : arr) {\n \
    \           sorted.add(num);\n        }\n        Collections.sort(sorted);\n \
    \       for (Long num : sorted) {\n            sortedByOnes.add(num);\n      \
    \  }\n        Collections.sort(sortedByOnes, new Comparator<Long>() {\n      \
    \      @Override\n            public int compare(Long num1, Long num2) {\n   \
    \             String binary1 = Long.toBinaryString(num1);\n                String\
    \ binary2 = Long.toBinaryString(num2);\n                int count1 = 0;\n    \
    \            int count2 = 0;\n                for (int i = 0; i < binary1.length();\
    \ i++) {\n                    if (binary1.charAt(i) == '1') {\n              \
    \          count1++;\n                    }\n                }\n             \
    \   for (int i = 0; i < binary2.length(); i++) {\n                    if (binary2.charAt(i)\
    \ == '1') {\n                        count2++;\n                    }\n      \
    \          }\n                if (count1 == count2) {\n                    return\
    \ 0;\n                } else if (count1 > count2) {\n                    return\
    \ 1;\n                } else {\n                    return -1;\n             \
    \   }\n            }\n        });\n        return sortedByOnes;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6gpjchuv.java:60)\n"
  stdout: ''
  timestamp: 1659794686
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        ArrayList<Long> temp = new ArrayList<Long>();\n        for (Long i :\
    \ arr) {\n            temp.add(i);\n        }\n        Collections.sort(temp,\
    \ new Comparator<Long>() {\n            @Override\n            public int compare(Long\
    \ a, Long b) {\n                String aBin = Long.toBinaryString(a);\n      \
    \          String bBin = Long.toBinaryString(b);\n                int aOnes =\
    \ 0;\n                int bOnes = 0;\n                for (int i = 0; i < aBin.length();\
    \ i++) {\n                    if (aBin.charAt(i) == '1') {\n                 \
    \       aOnes++;\n                    }\n                }\n                for\
    \ (int i = 0; i < bBin.length(); i++) {\n                    if (bBin.charAt(i)\
    \ == '1') {\n                        bOnes++;\n                    }\n       \
    \         }\n                if (aOnes == bOnes) {\n                    return\
    \ a.compareTo(b);\n                } else {\n                    return aOnes\
    \ - bOnes;\n                }\n            }\n        });\n        for (Long i\
    \ : temp) {\n            result.add(i);\n        }\n        return result;\n \
    \   }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmps_3m5hzd.java:56)\n"
  stdout: ''
  timestamp: 1659794686
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> sorted = new ArrayList<Long>();\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            sorted.add(arr.get(i));\n\
    \        }\n        Collections.sort(sorted, new Comparator<Long>() {\n      \
    \      @Override\n            public int compare(Long a, Long b) {\n         \
    \       String aBin = Long.toBinaryString(a);\n                String bBin = Long.toBinaryString(b);\n\
    \                int aOnes = 0;\n                int bOnes = 0;\n            \
    \    for (int i = 0; i < aBin.length(); i++) {\n                    if (aBin.charAt(i)\
    \ == '1') {\n                        aOnes++;\n                    }\n       \
    \         }\n                for (int i = 0; i < bBin.length(); i++) {\n     \
    \               if (bBin.charAt(i) == '1') {\n                        bOnes++;\n\
    \                    }\n                }\n                if (aOnes == bOnes)\
    \ {\n                    return a.compareTo(b);\n                } else {\n  \
    \                  return aOnes - bOnes;\n                }\n            }\n \
    \       });\n        return sorted;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkhtlhohp.java:52)\n"
  stdout: ''
  timestamp: 1659794682
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        // Your code here\n        // return\
    \ arr;\n        return new ArrayList<Long>(arr.stream().sorted(Comparator.comparing(Problem::countOnes).thenComparing(Comparator.naturalOrder())).collect(Collectors.toList()));\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_v51s0u6.java:22: error: invalid method reference\n        return\
    \ new ArrayList<Long>(arr.stream().sorted(Comparator.comparing(Problem::countOnes).thenComparing(Comparator.naturalOrder())).collect(Collectors.toList()));\n\
    \                                                                            ^\n\
    \  cannot find symbol\n    symbol:   method countOnes()\n    location: class Problem\n\
    1 error\n"
  stdout: ''
  timestamp: 1659794686
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> sorted = new ArrayList<Long>();\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            sorted.add(arr.get(i));\n\
    \        }\n        Collections.sort(sorted, new Comparator<Long>() {\n      \
    \      @Override\n            public int compare(Long a, Long b) {\n         \
    \       String aBin = Long.toBinaryString(a);\n                String bBin = Long.toBinaryString(b);\n\
    \                int aOnes = 0;\n                int bOnes = 0;\n            \
    \    for (int i = 0; i < aBin.length(); i++) {\n                    if (aBin.charAt(i)\
    \ == '1') {\n                        aOnes++;\n                    }\n       \
    \         }\n                for (int i = 0; i < bBin.length(); i++) {\n     \
    \               if (bBin.charAt(i) == '1') {\n                        bOnes++;\n\
    \                    }\n                }\n                if (aOnes == bOnes)\
    \ {\n                    return a.compareTo(b);\n                } else {\n  \
    \                  return aOnes - bOnes;\n                }\n            }\n \
    \       });\n        return sorted;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkhtlhohp.java:52)\n"
  stdout: ''
  timestamp: 1659794682
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> sorted = new ArrayList<Long>();\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            sorted.add(arr.get(i));\n\
    \        }\n        Collections.sort(sorted, new Comparator<Long>() {\n      \
    \      @Override\n            public int compare(Long a, Long b) {\n         \
    \       String aBin = Long.toBinaryString(a);\n                String bBin = Long.toBinaryString(b);\n\
    \                int aOnes = 0;\n                int bOnes = 0;\n            \
    \    for (int i = 0; i < aBin.length(); i++) {\n                    if (aBin.charAt(i)\
    \ == '1') {\n                        aOnes++;\n                    }\n       \
    \         }\n                for (int i = 0; i < bBin.length(); i++) {\n     \
    \               if (bBin.charAt(i) == '1') {\n                        bOnes++;\n\
    \                    }\n                }\n                if (aOnes == bOnes)\
    \ {\n                    return a.compareTo(b);\n                } else {\n  \
    \                  return aOnes - bOnes;\n                }\n            }\n \
    \       });\n        return sorted;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkhtlhohp.java:52)\n"
  stdout: ''
  timestamp: 1659794682
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> sorted = new ArrayList<Long>();\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            long num = arr.get(i);\n\
    \            int ones = 0;\n            while (num > 0) {\n                ones\
    \ += num % 2;\n                num /= 2;\n            }\n            sorted.add(ones);\n\
    \        }\n        ArrayList<Long> sorted2 = new ArrayList<Long>();\n       \
    \ for (int i = 0; i < arr.size(); i++) {\n            long num = arr.get(i);\n\
    \            int ones = 0;\n            while (num > 0) {\n                ones\
    \ += num % 2;\n                num /= 2;\n            }\n            sorted2.add(ones);\n\
    \        }\n        Collections.sort(sorted2);\n        ArrayList<Long> sorted3\
    \ = new ArrayList<Long>();\n        for (int i = 0; i < sorted2.size(); i++) {\n\
    \            long num = sorted2.get(i);\n            for (int j = 0; j < sorted.size();\
    \ j++) {\n                if (sorted.get(j) == num) {\n                    sorted3.add(arr.get(j));\n\
    \                    sorted.set(j, -1l);\n                    break;\n       \
    \         }\n            }\n        }\n        return sorted3;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1afxjdg1.java:28: error: incompatible types: int cannot be converted\
    \ to Long\n            sorted.add(ones);\n                       ^\n/tmp/tmp1afxjdg1.java:38:\
    \ error: incompatible types: int cannot be converted to Long\n            sorted2.add(ones);\n\
    \                        ^\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1659794686
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        // Your code here\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        ArrayList<Long> temp = new ArrayList<Long>();\n\
    \        ArrayList<Long> temp2 = new ArrayList<Long>();\n        for (int i =\
    \ 0; i < arr.size(); i++) {\n            if (arr.get(i) < 0) {\n             \
    \   temp.add(arr.get(i));\n            } else {\n                temp2.add(arr.get(i));\n\
    \            }\n        }\n        Collections.sort(temp);\n        Collections.sort(temp2,\
    \ new Comparator<Long>() {\n            public int compare(Long a, Long b) {\n\
    \                String aa = Long.toBinaryString(a);\n                String bb\
    \ = Long.toBinaryString(b);\n                int aaa = 0;\n                int\
    \ bbb = 0;\n                for (int i = 0; i < aa.length(); i++) {\n        \
    \            if (aa.charAt(i) == '1') {\n                        aaa++;\n    \
    \                }\n                }\n                for (int i = 0; i < bb.length();\
    \ i++) {\n                    if (bb.charAt(i) == '1') {\n                   \
    \     bbb++;\n                    }\n                }\n                if (aaa\
    \ == bbb) {\n                    return a.compareTo(b);\n                } else\
    \ {\n                    return aaa - bbb;\n                }\n            }\n\
    \        });\n        for (int i = 0; i < temp.size(); i++) {\n            result.add(temp.get(i));\n\
    \        }\n        for (int i = 0; i < temp2.size(); i++) {\n            result.add(temp2.get(i));\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpacm95w8g.java:65)\n"
  stdout: ''
  timestamp: 1659794686
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> sorted = new ArrayList<Long>();\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            sorted.add(arr.get(i));\n\
    \        }\n        Collections.sort(sorted, new Comparator<Long>() {\n      \
    \      @Override\n            public int compare(Long o1, Long o2) {\n       \
    \         int o1Ones = Long.bitCount(o1);\n                int o2Ones = Long.bitCount(o2);\n\
    \                if (o1Ones == o2Ones) {\n                    return o1.compareTo(o2);\n\
    \                } else {\n                    return o1Ones - o2Ones;\n     \
    \           }\n            }\n        });\n        return sorted;\n    }\n   \
    \ public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkdj1wgpi.java:40)\n"
  stdout: ''
  timestamp: 1659794686
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> sorted = new ArrayList<Long>();\n\
    \        ArrayList<Long> negatives = new ArrayList<Long>();\n        ArrayList<Long>\
    \ positives = new ArrayList<Long>();\n        for (Long i : arr) {\n         \
    \   if (i < 0) {\n                negatives.add(i);\n            } else {\n  \
    \              positives.add(i);\n            }\n        }\n        Collections.sort(negatives);\n\
    \        Collections.sort(positives);\n        for (Long i : negatives) {\n  \
    \          sorted.add(i);\n        }\n        for (Long i : positives) {\n   \
    \         sorted.add(i);\n        }\n        return sorted;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphtgr7mnh.java:41)\n"
  stdout: ''
  timestamp: 1659794682
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> sorted = new ArrayList<Long>();\n\
    \        ArrayList<Long> zeros = new ArrayList<Long>();\n        ArrayList<Long>\
    \ ones = new ArrayList<Long>();\n        ArrayList<Long> twos = new ArrayList<Long>();\n\
    \        ArrayList<Long> threes = new ArrayList<Long>();\n        ArrayList<Long>\
    \ fours = new ArrayList<Long>();\n        ArrayList<Long> fives = new ArrayList<Long>();\n\
    \        ArrayList<Long> sixes = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sevens = new ArrayList<Long>();\n        ArrayList<Long> eights = new ArrayList<Long>();\n\
    \        ArrayList<Long> nines = new ArrayList<Long>();\n        ArrayList<Long>\
    \ tens = new ArrayList<Long>();\n        ArrayList<Long> elevens = new ArrayList<Long>();\n\
    \        ArrayList<Long> twelves = new ArrayList<Long>();\n        ArrayList<Long>\
    \ thirteens = new ArrayList<Long>();\n        ArrayList<Long> fourteens = new\
    \ ArrayList<Long>();\n        ArrayList<Long> fifteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> sixteens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ seventeens = new ArrayList<Long>();\n        ArrayList<Long> eightteens = new\
    \ ArrayList<Long>();\n        ArrayList<Long> nineteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> twenties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ thirties = new ArrayList<Long>();\n        ArrayList<Long> forties = new ArrayList<Long>();\n\
    \        ArrayList<Long> fifties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sixties = new ArrayList<Long>();\n        ArrayList<Long> seventies = new ArrayList<Long>();\n\
    \        ArrayList<Long> eighties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ nineties = new ArrayList<Long>();\n        ArrayList<Long> hundreds = new ArrayList\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1dagg43c.java:50: error: '(' or '[' expected\n    }\n    ^\n1 error\n"
  stdout: ''
  timestamp: 1659794685
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> sorted = new ArrayList<Long>();\n\
    \        ArrayList<Long> zeros = new ArrayList<Long>();\n        ArrayList<Long>\
    \ ones = new ArrayList<Long>();\n        ArrayList<Long> twos = new ArrayList<Long>();\n\
    \        ArrayList<Long> threes = new ArrayList<Long>();\n        ArrayList<Long>\
    \ fours = new ArrayList<Long>();\n        ArrayList<Long> fives = new ArrayList<Long>();\n\
    \        ArrayList<Long> sixes = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sevens = new ArrayList<Long>();\n        ArrayList<Long> eights = new ArrayList<Long>();\n\
    \        ArrayList<Long> nines = new ArrayList<Long>();\n        ArrayList<Long>\
    \ tens = new ArrayList<Long>();\n        ArrayList<Long> elevens = new ArrayList<Long>();\n\
    \        ArrayList<Long> twelves = new ArrayList<Long>();\n        ArrayList<Long>\
    \ thirteens = new ArrayList<Long>();\n        ArrayList<Long> fourteens = new\
    \ ArrayList<Long>();\n        ArrayList<Long> fifteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> sixteens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ seventeens = new ArrayList<Long>();\n        ArrayList<Long> eighteens = new\
    \ ArrayList<Long>();\n        ArrayList<Long> ninteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> twenties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ thirty = new ArrayList<Long>();\n        ArrayList<Long> forty = new ArrayList<Long>();\n\
    \        ArrayList<Long> fifty = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sixty = new ArrayList<Long>();\n        ArrayList<Long> seventy = new ArrayList<Long>();\n\
    \        ArrayList<Long> eighty = new ArrayList<Long>();\n        ArrayList<Long>\
    \ ninety = new ArrayList<Long>();\n        ArrayList<Long> hundred = new ArrayList<Long>();\n\
    \        ArrayList\n    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpg7m2mw65.java:50: error: not a statement\n        ArrayList\n \
    \       ^\n/tmp/tmpg7m2mw65.java:50: error: ';' expected\n        ArrayList\n\
    \                 ^\n2 errors\n"
  stdout: ''
  timestamp: 1659794685
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        // your code here\n        ArrayList<Long>\
    \ sorted = new ArrayList<Long>();\n        for (int i = 0; i < arr.size(); i++)\
    \ {\n            sorted.add(arr.get(i));\n        }\n        Collections.sort(sorted,\
    \ new Comparator<Long>() {\n            @Override\n            public int compare(Long\
    \ a, Long b) {\n                String aBin = Long.toBinaryString(a);\n      \
    \          String bBin = Long.toBinaryString(b);\n                int aOnes =\
    \ 0;\n                int bOnes = 0;\n                for (int i = 0; i < aBin.length();\
    \ i++) {\n                    if (aBin.charAt(i) == '1') {\n                 \
    \       aOnes++;\n                    }\n                }\n                for\
    \ (int i = 0; i < bBin.length(); i++) {\n                    if (bBin.charAt(i)\
    \ == '1') {\n                        bOnes++;\n                    }\n       \
    \         }\n                if (aOnes == bOnes) {\n                    return\
    \ a.compareTo(b);\n                } else {\n                    return aOnes\
    \ - bOnes;\n                }\n            }\n        });\n        return sorted;\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpi4wc8nic.java:53)\n"
  stdout: ''
  timestamp: 1659794686
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> sorted = new ArrayList<Long>();\n\
    \        ArrayList<Long> sortedByOnes = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sortedByDecimal = new ArrayList<Long>();\n        ArrayList<Long> sortedByOnesAndDecimal\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByOnesAndDecimalAndNegative\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByOnesAndDecimalAndNegativeAndZero\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByOnesAndDecimalAndNegativeAndZeroAndPositive\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByOnesAndDecimalAndNegativeAndZeroAndPositiveAndZero\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByOnesAndDecimalAndNegativeAndZeroAndPositiveAndZeroAndNegative\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByOnesAndDecimalAndNegativeAndZeroAndPositiveAndZeroAndNegativeAndZero\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByOnesAndDecimalAndNegativeAndZeroAndPositiveAndZeroAndNegativeAndZeroAndPositive\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByOnesAndDecimalAndNegativeAndZeroAndPositiveAndZeroAndNegativeAndZeroAndPositiveAndZero\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByOnesAndDecimalAndNegativeAndZeroAndPositiveAndZeroAndNegativeAndZeroAndPositiveAndZeroAndNegative\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByOnesAndDecimalAndNegativeAndZeroAndPositiveAndZeroAndNegativeAndZeroAndPositiveAndZeroAndNegativeAndZero\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByOnesAndDecimalAndNegativeAndZeroAndPositiveAndZeroAndNegativeAndZeroAndPositiveAndZeroAndNegativeAndZeroAndPositive\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByOnesAndDecimalAndNegativeAndZeroAndPositiveAndZeroAndNeg\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7k66l6cn.java:35: error: ';' expected\n        ArrayList<Long>\
    \ sortedByOnesAndDecimalAndNegativeAndZeroAndPositiveAndZeroAndNeg\n         \
    \                                                                            \
    \   ^\n1 error\n"
  stdout: ''
  timestamp: 1659794685
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> sorted = new ArrayList<Long>();\n\
    \        for (Long l : arr) {\n            sorted.add(l);\n        }\n       \
    \ Collections.sort(sorted, (a, b) -> {\n            int aOnes = Long.bitCount(a);\n\
    \            int bOnes = Long.bitCount(b);\n            if (aOnes == bOnes) {\n\
    \                return a.compareTo(b);\n            } else {\n              \
    \  return aOnes - bOnes;\n            }\n        });\n        return sorted;\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwyjrd3oa.java:37)\n"
  stdout: ''
  timestamp: 1659794687
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        return arr;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpeye6p7lq.java:23)\n"
  stdout: ''
  timestamp: 1659794684
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> sorted = new ArrayList<Long>();\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            sorted.add(arr.get(i));\n\
    \        }\n        Collections.sort(sorted, new Comparator<Long>() {\n      \
    \      @Override\n            public int compare(Long x, Long y) {\n         \
    \       int xOnes = Long.bitCount(x);\n                int yOnes = Long.bitCount(y);\n\
    \                if (xOnes == yOnes) {\n                    return x.compareTo(y);\n\
    \                } else {\n                    return xOnes - yOnes;\n       \
    \         }\n            }\n        });\n        return sorted;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4_z10f4q.java:40)\n"
  stdout: ''
  timestamp: 1659794687
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> sorted = new ArrayList<Long>();\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            sorted.add(arr.get(i));\n\
    \        }\n        Collections.sort(sorted, new Comparator<Long>() {\n      \
    \      @Override\n            public int compare(Long a, Long b) {\n         \
    \       String aBin = Long.toBinaryString(a);\n                String bBin = Long.toBinaryString(b);\n\
    \                int aOnes = 0;\n                int bOnes = 0;\n            \
    \    for (int i = 0; i < aBin.length(); i++) {\n                    if (aBin.charAt(i)\
    \ == '1') {\n                        aOnes++;\n                    }\n       \
    \         }\n                for (int i = 0; i < bBin.length(); i++) {\n     \
    \               if (bBin.charAt(i) == '1') {\n                        bOnes++;\n\
    \                    }\n                }\n                if (aOnes == bOnes)\
    \ {\n                    return a.compareTo(b);\n                } else {\n  \
    \                  return aOnes - bOnes;\n                }\n            }\n \
    \       });\n        return sorted;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkhtlhohp.java:52)\n"
  stdout: ''
  timestamp: 1659794682
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        // your code here\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        ArrayList<Long> temp = new ArrayList<Long>();\n\
    \        ArrayList<Long> temp2 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ temp3 = new ArrayList<Long>();\n        ArrayList<Long> temp4 = new ArrayList<Long>();\n\
    \        ArrayList<Long> temp5 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ temp6 = new ArrayList<Long>();\n        ArrayList<Long> temp7 = new ArrayList<Long>();\n\
    \        ArrayList<Long> temp8 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ temp9 = new ArrayList<Long>();\n        ArrayList<Long> temp10 = new ArrayList<Long>();\n\
    \        ArrayList<Long> temp11 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ temp12 = new ArrayList<Long>();\n        ArrayList<Long> temp13 = new ArrayList<Long>();\n\
    \        ArrayList<Long> temp14 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ temp15 = new ArrayList<Long>();\n        ArrayList<Long> temp16 = new ArrayList<Long>();\n\
    \        ArrayList<Long> temp17 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ temp18 = new ArrayList<Long>();\n        ArrayList<Long> temp19 = new ArrayList<Long>();\n\
    \        ArrayList<Long> temp20 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ temp21 = new ArrayList<Long>();\n        ArrayList<Long> temp22 = new ArrayList<Long>();\n\
    \        ArrayList<Long> temp23 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ temp24 = new ArrayList<Long>();\n        ArrayList<Long> temp25 = new ArrayList<Long>();\n\
    \        ArrayList<Long> temp26 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ temp27 = new ArrayList<Long>();\n        ArrayList<Long> temp28 = new ArrayList<Long>();\n\
    \        ArrayList<Long> temp29 = new ArrayList<Long\n    }\n    public static\
    \ void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp10meu_ef.java:51: error: > expected\n    }\n    ^\n1 error\n"
  stdout: ''
  timestamp: 1659794686
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        // your code here\n        ArrayList<Long>\
    \ res = new ArrayList<Long>();\n        ArrayList<Long> res2 = new ArrayList<Long>();\n\
    \        ArrayList<Long> res3 = new ArrayList<Long>();\n        for (Long i :\
    \ arr) {\n            if (i < 0) {\n                res.add(i);\n            }\
    \ else {\n                res2.add(i);\n            }\n        }\n        Collections.sort(res);\n\
    \        Collections.sort(res2, new Comparator<Long>() {\n            public int\
    \ compare(Long a, Long b) {\n                String aa = Long.toBinaryString(a);\n\
    \                String bb = Long.toBinaryString(b);\n                int aaa\
    \ = 0;\n                int bbb = 0;\n                for (int i = 0; i < aa.length();\
    \ i++) {\n                    if (aa.charAt(i) == '1') {\n                   \
    \     aaa++;\n                    }\n                }\n                for (int\
    \ i = 0; i < bb.length(); i++) {\n                    if (bb.charAt(i) == '1')\
    \ {\n                        bbb++;\n                    }\n                }\n\
    \                if (aaa == bbb) {\n                    return a.compareTo(b);\n\
    \                } else {\n                    return aaa - bbb;\n           \
    \     }\n            }\n        });\n        for (Long i : res) {\n          \
    \  res3.add(i);\n        }\n        for (Long i : res2) {\n            res3.add(i);\n\
    \        }\n        return res3;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsjpneo8u.java:65)\n"
  stdout: ''
  timestamp: 1659794687
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> sorted = new ArrayList<Long>();\n\
    \        ArrayList<Long> ones = new ArrayList<Long>();\n        ArrayList<Long>\
    \ zeros = new ArrayList<Long>();\n        for (Long num : arr) {\n           \
    \ if (num < 0) {\n                sorted.add(num);\n            } else if (num\
    \ == 0) {\n                zeros.add(num);\n            } else {\n           \
    \     ones.add(num);\n            }\n        }\n        Collections.sort(ones);\n\
    \        sorted.addAll(zeros);\n        sorted.addAll(ones);\n        return sorted;\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkmkmadgf.java:38)\n"
  stdout: ''
  timestamp: 1659794687
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> sorted = new ArrayList<Long>();\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            sorted.add(arr.get(i));\n\
    \        }\n        Collections.sort(sorted, new Comparator<Long>() {\n      \
    \      @Override\n            public int compare(Long o1, Long o2) {\n       \
    \         int o1Ones = countOnes(o1);\n                int o2Ones = countOnes(o2);\n\
    \                if (o1Ones == o2Ones) {\n                    return o1.compareTo(o2);\n\
    \                } else {\n                    return o1Ones - o2Ones;\n     \
    \           }\n            }\n        });\n        return sorted;\n    }\n   \
    \ public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxa2gi2dc.java:27: error: cannot find symbol\n                int\
    \ o1Ones = countOnes(o1);\n                             ^\n  symbol: method countOnes(Long)\n\
    /tmp/tmpxa2gi2dc.java:28: error: cannot find symbol\n                int o2Ones\
    \ = countOnes(o2);\n                             ^\n  symbol: method countOnes(Long)\n\
    2 errors\n"
  stdout: ''
  timestamp: 1659794687
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> sorted = new ArrayList<Long>();\n\
    \        ArrayList<Long> negatives = new ArrayList<Long>();\n        ArrayList<Long>\
    \ positives = new ArrayList<Long>();\n        for (Long l : arr) {\n         \
    \   if (l < 0) {\n                negatives.add(l);\n            } else {\n  \
    \              positives.add(l);\n            }\n        }\n        Collections.sort(negatives);\n\
    \        Collections.sort(positives);\n        Collections.reverse(negatives);\n\
    \        for (Long l : negatives) {\n            sorted.add(l);\n        }\n \
    \       for (Long l : positives) {\n            sorted.add(l);\n        }\n  \
    \      return sorted;\n    }\n    public static void main(String[] args) {\n \
    \   assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0rha2cqn.java:42)\n"
  stdout: ''
  timestamp: 1659794685
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        // Your code here\n        ArrayList<Long>\
    \ sorted = new ArrayList<Long>();\n        ArrayList<Long> zeros = new ArrayList<Long>();\n\
    \        ArrayList<Long> ones = new ArrayList<Long>();\n        ArrayList<Long>\
    \ twos = new ArrayList<Long>();\n        ArrayList<Long> threes = new ArrayList<Long>();\n\
    \        ArrayList<Long> fours = new ArrayList<Long>();\n        ArrayList<Long>\
    \ fives = new ArrayList<Long>();\n        ArrayList<Long> sixes = new ArrayList<Long>();\n\
    \        ArrayList<Long> sevens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ eights = new ArrayList<Long>();\n        ArrayList<Long> nines = new ArrayList<Long>();\n\
    \        ArrayList<Long> tens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ elevens = new ArrayList<Long>();\n        ArrayList<Long> twelves = new ArrayList<Long>();\n\
    \        ArrayList<Long> thirteens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ fourteens = new ArrayList<Long>();\n        ArrayList<Long> fifteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> sixteens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ seventeens = new ArrayList<Long>();\n        ArrayList<Long> eighteens = new\
    \ ArrayList<Long>();\n        ArrayList<Long> nineteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> twenties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ thirties = new ArrayList<Long>();\n        ArrayList<Long> fourties = new ArrayList<Long>();\n\
    \        ArrayList<Long> fifties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sixties = new ArrayList<Long>();\n        ArrayList<Long> seventies = new ArrayList<Long>();\n\
    \        ArrayList<Long> eighties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ nineties = new ArrayList<Long>();\n        ArrayList<Long\n    }\n    public\
    \ static void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqsi8yt7d.java:51: error: > expected\n    }\n    ^\n/tmp/tmpqsi8yt7d.java:50:\
    \ error: not a statement\n        ArrayList<Long\n                 ^\n2 errors\n"
  stdout: ''
  timestamp: 1659794684
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        // Your code here\n        ArrayList<Long>\
    \ sorted = new ArrayList<Long>();\n        ArrayList<Long> sortedOnes = new ArrayList<Long>();\n\
    \        ArrayList<Long> sortedZeros = new ArrayList<Long>();\n        for (Long\
    \ i : arr) {\n            if (Long.bitCount(i) == 0) {\n                sortedZeros.add(i);\n\
    \            } else {\n                sortedOnes.add(i);\n            }\n   \
    \     }\n        Collections.sort(sortedOnes);\n        Collections.sort(sortedZeros);\n\
    \        sorted.addAll(sortedZeros);\n        sorted.addAll(sortedOnes);\n   \
    \     return sorted;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcs45k7q3.java:38)\n"
  stdout: ''
  timestamp: 1659794687
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> sorted = new ArrayList<Long>();\n\
    \        ArrayList<Long> negatives = new ArrayList<Long>();\n        ArrayList<Long>\
    \ positives = new ArrayList<Long>();\n        for (Long l : arr) {\n         \
    \   if (l < 0) {\n                negatives.add(l);\n            } else {\n  \
    \              positives.add(l);\n            }\n        }\n        Collections.sort(negatives);\n\
    \        Collections.sort(positives);\n        for (Long l : negatives) {\n  \
    \          sorted.add(l);\n        }\n        for (Long l : positives) {\n   \
    \         sorted.add(l);\n        }\n        return sorted;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2ukpfm27.java:41)\n"
  stdout: ''
  timestamp: 1659794687
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        // Your code here\n        return\
    \ arr;\n    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvyxipufw.java:24)\n"
  stdout: ''
  timestamp: 1659794684
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> sorted = new ArrayList<Long>();\n\
    \        ArrayList<Long> zeros = new ArrayList<Long>();\n        ArrayList<Long>\
    \ ones = new ArrayList<Long>();\n        ArrayList<Long> twos = new ArrayList<Long>();\n\
    \        ArrayList<Long> threes = new ArrayList<Long>();\n        ArrayList<Long>\
    \ fours = new ArrayList<Long>();\n        ArrayList<Long> fives = new ArrayList<Long>();\n\
    \        ArrayList<Long> sixes = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sevens = new ArrayList<Long>();\n        ArrayList<Long> eights = new ArrayList<Long>();\n\
    \        ArrayList<Long> nines = new ArrayList<Long>();\n        ArrayList<Long>\
    \ tens = new ArrayList<Long>();\n        ArrayList<Long> elevens = new ArrayList<Long>();\n\
    \        ArrayList<Long> twelves = new ArrayList<Long>();\n        ArrayList<Long>\
    \ thirteens = new ArrayList<Long>();\n        ArrayList<Long> fourteens = new\
    \ ArrayList<Long>();\n        ArrayList<Long> fifteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> sixteens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ seventeens = new ArrayList<Long>();\n        ArrayList<Long> eightteens = new\
    \ ArrayList<Long>();\n        ArrayList<Long> nineteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> twenties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ thirtys = new ArrayList<Long>();\n        ArrayList<Long> fortys = new ArrayList<Long>();\n\
    \        ArrayList<Long> fiftys = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sixtys = new ArrayList<Long>();\n        ArrayList<Long> seventys = new ArrayList<Long>();\n\
    \        ArrayList<Long> eightyes = new ArrayList<Long>();\n        ArrayList<Long>\
    \ ninetyes = new ArrayList<Long>();\n        ArrayList<Long> hundreds = new ArrayList<Long\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpw_vs0_g9.java:50: error: > expected\n    }\n    ^\n1 error\n"
  stdout: ''
  timestamp: 1659794686
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        ArrayList<Long> one = new ArrayList<Long>();\n        ArrayList<Long>\
    \ zero = new ArrayList<Long>();\n        ArrayList<Long> negative = new ArrayList<Long>();\n\
    \        for (Long i : arr) {\n            if (i < 0) {\n                negative.add(i);\n\
    \            } else if (i == 0) {\n                zero.add(i);\n            }\
    \ else if (i == 1) {\n                one.add(i);\n            } else {\n    \
    \            int count = 0;\n                while (i > 0) {\n               \
    \     if (i % 2 == 1) {\n                        count++;\n                  \
    \  }\n                    i = i / 2;\n                }\n                result.add(count\
    \ * 100000000 + i);\n            }\n        }\n        Collections.sort(result);\n\
    \        for (int i = 0; i < result.size(); i++) {\n            result.set(i,\
    \ result.get(i) % 100000000);\n        }\n        result.addAll(one);\n      \
    \  result.addAll(zero);\n        Collections.sort(negative);\n        for (int\
    \ i = 0; i < negative.size(); i++) {\n            result.add(negative.get(i));\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpm5yw8pey.java:55)\n"
  stdout: ''
  timestamp: 1659794687
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> sorted = new ArrayList<Long>();\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            sorted.add(arr.get(i));\n\
    \        }\n        Collections.sort(sorted, new Comparator<Long>() {\n      \
    \      @Override\n            public int compare(Long a, Long b) {\n         \
    \       String aBin = Long.toBinaryString(a);\n                String bBin = Long.toBinaryString(b);\n\
    \                int aOnes = 0;\n                int bOnes = 0;\n            \
    \    for (int i = 0; i < aBin.length(); i++) {\n                    if (aBin.charAt(i)\
    \ == '1') {\n                        aOnes++;\n                    }\n       \
    \         }\n                for (int i = 0; i < bBin.length(); i++) {\n     \
    \               if (bBin.charAt(i) == '1') {\n                        bOnes++;\n\
    \                    }\n                }\n                if (aOnes == bOnes)\
    \ {\n                    return a.compareTo(b);\n                } else {\n  \
    \                  return aOnes - bOnes;\n                }\n            }\n \
    \       });\n        return sorted;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkhtlhohp.java:52)\n"
  stdout: ''
  timestamp: 1659794682
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        // your code here\n        return\
    \ arr;\n    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9qnbvh18.java:24)\n"
  stdout: ''
  timestamp: 1659794682
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        // your code here\n        return\
    \ arr;\n    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9qnbvh18.java:24)\n"
  stdout: ''
  timestamp: 1659794682
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        // your code here\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        ArrayList<Long> one = new ArrayList<Long>();\n\
    \        ArrayList<Long> zero = new ArrayList<Long>();\n        for (Long i :\
    \ arr) {\n            if (i < 0) {\n                result.add(i);\n         \
    \   } else if (i == 0) {\n                zero.add(i);\n            } else {\n\
    \                one.add(i);\n            }\n        }\n        Collections.sort(one);\n\
    \        Collections.sort(zero);\n        for (Long i : one) {\n            result.add(i);\n\
    \        }\n        for (Long i : zero) {\n            result.add(i);\n      \
    \  }\n        return result;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpt2xv4c4w.java:44)\n"
  stdout: ''
  timestamp: 1659794687
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        // Your code here\n        ArrayList<Long>\
    \ sorted = new ArrayList<Long>();\n        ArrayList<Long> sorted_ones = new ArrayList<Long>();\n\
    \        ArrayList<Long> sorted_zeros = new ArrayList<Long>();\n        for (Long\
    \ i : arr) {\n            if (Long.bitCount(i) == 0) {\n                sorted_zeros.add(i);\n\
    \            } else {\n                sorted_ones.add(i);\n            }\n  \
    \      }\n        Collections.sort(sorted_ones);\n        Collections.sort(sorted_zeros);\n\
    \        sorted.addAll(sorted_ones);\n        sorted.addAll(sorted_zeros);\n \
    \       return sorted;\n    }\n    public static void main(String[] args) {\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp08e_9btw.java:38)\n"
  stdout: ''
  timestamp: 1659794687
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> sorted = new ArrayList<Long>();\n\
    \        ArrayList<Long> zeros = new ArrayList<Long>();\n        ArrayList<Long>\
    \ ones = new ArrayList<Long>();\n        ArrayList<Long> twos = new ArrayList<Long>();\n\
    \        ArrayList<Long> threes = new ArrayList<Long>();\n        ArrayList<Long>\
    \ fours = new ArrayList<Long>();\n        ArrayList<Long> fives = new ArrayList<Long>();\n\
    \        ArrayList<Long> sixes = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sevens = new ArrayList<Long>();\n        ArrayList<Long> eights = new ArrayList<Long>();\n\
    \        ArrayList<Long> nines = new ArrayList<Long>();\n        ArrayList<Long>\
    \ tens = new ArrayList<Long>();\n        ArrayList<Long> elevens = new ArrayList<Long>();\n\
    \        ArrayList<Long> twelves = new ArrayList<Long>();\n        ArrayList<Long>\
    \ thirteens = new ArrayList<Long>();\n        ArrayList<Long> fourteens = new\
    \ ArrayList<Long>();\n        ArrayList<Long> fifteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> sixteens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ seventeens = new ArrayList<Long>();\n        ArrayList<Long> eighteens = new\
    \ ArrayList<Long>();\n        ArrayList<Long> ninteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> twenties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ thirties = new ArrayList<Long>();\n        ArrayList<Long> fourties = new ArrayList<Long>();\n\
    \        ArrayList<Long> fifties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sixties = new ArrayList<Long>();\n        ArrayList<Long> seventies = new ArrayList<Long>();\n\
    \        ArrayList<Long> eighties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ ninties = new ArrayList<Long>();\n        ArrayList<Long> hundreds = new\n \
    \   }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5gd6g8vh.java:49: error: <identifier> expected\n        ArrayList<Long>\
    \ hundreds = new\n                                      ^\n/tmp/tmp5gd6g8vh.java:50:\
    \ error: '(' or '[' expected\n    }\n    ^\n2 errors\n"
  stdout: ''
  timestamp: 1659794683
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        ArrayList<Long> ones = new ArrayList<Long>();\n        ArrayList<Long>\
    \ zeros = new ArrayList<Long>();\n        for (Long i : arr) {\n            if\
    \ (Long.bitCount(i) == 0) {\n                zeros.add(i);\n            } else\
    \ {\n                ones.add(i);\n            }\n        }\n        Collections.sort(ones);\n\
    \        Collections.sort(zeros);\n        result.addAll(ones);\n        result.addAll(zeros);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp89mj8_1d.java:37)\n"
  stdout: ''
  timestamp: 1659794682
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> sorted = new ArrayList<Long>();\n\
    \        ArrayList<Long> zeros = new ArrayList<Long>();\n        ArrayList<Long>\
    \ ones = new ArrayList<Long>();\n        ArrayList<Long> twos = new ArrayList<Long>();\n\
    \        ArrayList<Long> threes = new ArrayList<Long>();\n        ArrayList<Long>\
    \ fours = new ArrayList<Long>();\n        ArrayList<Long> fives = new ArrayList<Long>();\n\
    \        ArrayList<Long> sixes = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sevens = new ArrayList<Long>();\n        ArrayList<Long> eights = new ArrayList<Long>();\n\
    \        ArrayList<Long> nines = new ArrayList<Long>();\n        ArrayList<Long>\
    \ tens = new ArrayList<Long>();\n        ArrayList<Long> elevens = new ArrayList<Long>();\n\
    \        ArrayList<Long> twelves = new ArrayList<Long>();\n        ArrayList<Long>\
    \ thirteens = new ArrayList<Long>();\n        ArrayList<Long> fourteens = new\
    \ ArrayList<Long>();\n        ArrayList<Long> fifteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> sixteens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ seventeens = new ArrayList<Long>();\n        ArrayList<Long> eighteen = new\
    \ ArrayList<Long>();\n        ArrayList<Long> ninteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> twentys = new ArrayList<Long>();\n        ArrayList<Long>\
    \ twentone = new ArrayList<Long>();\n        ArrayList<Long> twenttwo = new ArrayList<Long>();\n\
    \        ArrayList<Long> twentthree = new ArrayList<Long>();\n        ArrayList<Long>\
    \ twentfour = new ArrayList<Long>();\n        ArrayList<Long> twentfive = new\
    \ ArrayList<Long>();\n        ArrayList<Long> twentsix = new ArrayList<Long>();\n\
    \        ArrayList<Long> twentseven = new ArrayList<Long>();\n        ArrayList<Long>\
    \ twenteight = new ArrayList<\n    }\n    public static void main(String[] args)\
    \ {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1h80uls4.java:50: error: illegal start of type\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659794686
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> sorted = new ArrayList<Long>();\n\
    \        ArrayList<Long> zeros = new ArrayList<Long>();\n        ArrayList<Long>\
    \ ones = new ArrayList<Long>();\n        ArrayList<Long> twos = new ArrayList<Long>();\n\
    \        ArrayList<Long> threes = new ArrayList<Long>();\n        ArrayList<Long>\
    \ fours = new ArrayList<Long>();\n        ArrayList<Long> fives = new ArrayList<Long>();\n\
    \        ArrayList<Long> sixes = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sevens = new ArrayList<Long>();\n        ArrayList<Long> eights = new ArrayList<Long>();\n\
    \        ArrayList<Long> nines = new ArrayList<Long>();\n        ArrayList<Long>\
    \ tens = new ArrayList<Long>();\n        ArrayList<Long> elevens = new ArrayList<Long>();\n\
    \        ArrayList<Long> twelves = new ArrayList<Long>();\n        ArrayList<Long>\
    \ thirteens = new ArrayList<Long>();\n        ArrayList<Long> fourteens = new\
    \ ArrayList<Long>();\n        ArrayList<Long> fifteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> sixteens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ seventeens = new ArrayList<Long>();\n        ArrayList<Long> eighteens = new\
    \ ArrayList<Long>();\n        ArrayList<Long> ninteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> twenties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ thirtys = new ArrayList<Long>();\n        ArrayList<Long> fourtys = new ArrayList<Long>();\n\
    \        ArrayList<Long> fiftys = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sixtys = new ArrayList<Long>();\n        ArrayList<Long> seventys = new ArrayList<Long>();\n\
    \        ArrayList<Long> eightyes = new ArrayList<Long>();\n        ArrayList<Long>\
    \ ninetyes = new ArrayList<Long>();\n        ArrayList<Long> hundreds = new ArrayList\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9ca1wee_.java:50: error: '(' or '[' expected\n    }\n    ^\n1 error\n"
  stdout: ''
  timestamp: 1659794686
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        ArrayList<Long> temp = new ArrayList<Long>();\n        for (int i = 0;\
    \ i < arr.size(); i++) {\n            temp.add(arr.get(i));\n        }\n     \
    \   for (int i = 0; i < arr.size(); i++) {\n            long min = temp.get(0);\n\
    \            int index = 0;\n            for (int j = 0; j < temp.size(); j++)\
    \ {\n                if (countOnes(temp.get(j)) < countOnes(min)) {\n        \
    \            min = temp.get(j);\n                    index = j;\n            \
    \    } else if (countOnes(temp.get(j)) == countOnes(min)) {\n                \
    \    if (temp.get(j) < min) {\n                        min = temp.get(j);\n  \
    \                      index = j;\n                    }\n                }\n\
    \            }\n            result.add(min);\n            temp.remove(index);\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmph__g5c7r.java:29: error: cannot find symbol\n                if\
    \ (countOnes(temp.get(j)) < countOnes(min)) {\n                    ^\n  symbol:\
    \   method countOnes(Long)\n  location: class Problem\n/tmp/tmph__g5c7r.java:29:\
    \ error: cannot find symbol\n                if (countOnes(temp.get(j)) < countOnes(min))\
    \ {\n                                             ^\n  symbol:   method countOnes(long)\n\
    \  location: class Problem\n/tmp/tmph__g5c7r.java:32: error: cannot find symbol\n\
    \                } else if (countOnes(temp.get(j)) == countOnes(min)) {\n    \
    \                       ^\n  symbol:   method countOnes(Long)\n  location: class\
    \ Problem\n/tmp/tmph__g5c7r.java:32: error: cannot find symbol\n             \
    \   } else if (countOnes(temp.get(j)) == countOnes(min)) {\n                 \
    \                                    ^\n  symbol:   method countOnes(long)\n \
    \ location: class Problem\n4 errors\n"
  stdout: ''
  timestamp: 1659794687
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        ArrayList<Long> sorted = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sorted2 = new ArrayList<Long>();\n        ArrayList<Long> sorted3 = new ArrayList<Long>();\n\
    \        ArrayList<Long> sorted4 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sorted5 = new ArrayList<Long>();\n        ArrayList<Long> sorted6 = new ArrayList<Long>();\n\
    \        ArrayList<Long> sorted7 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sorted8 = new ArrayList<Long>();\n        ArrayList<Long> sorted9 = new ArrayList<Long>();\n\
    \        ArrayList<Long> sorted10 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sorted11 = new ArrayList<Long>();\n        ArrayList<Long> sorted12 = new ArrayList<Long>();\n\
    \        ArrayList<Long> sorted13 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sorted14 = new ArrayList<Long>();\n        ArrayList<Long> sorted15 = new ArrayList<Long>();\n\
    \        ArrayList<Long> sorted16 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sorted17 = new ArrayList<Long>();\n        ArrayList<Long> sorted18 = new ArrayList<Long>();\n\
    \        ArrayList<Long> sorted19 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sorted20 = new ArrayList<Long>();\n        ArrayList<Long> sorted21 = new ArrayList<Long>();\n\
    \        ArrayList<Long> sorted22 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sorted23 = new ArrayList<Long>();\n        ArrayList<Long> sorted24 = new ArrayList<Long>();\n\
    \        ArrayList<Long> sorted25 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sorted26 = new ArrayList<Long>();\n        ArrayList<Long> sorted27 = new ArrayList<Long>();\n\
    \        ArrayList<Long> sorted28 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sorted29 = new ArrayList<Long>();\n        ArrayList\n    }\n    public static\
    \ void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqupk5tsv.java:50: error: not a statement\n        ArrayList\n \
    \       ^\n/tmp/tmpqupk5tsv.java:50: error: ';' expected\n        ArrayList\n\
    \                 ^\n2 errors\n"
  stdout: ''
  timestamp: 1659794687
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> sorted = new ArrayList<Long>();\n\
    \        ArrayList<Long> sorted2 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sorted3 = new ArrayList<Long>();\n        ArrayList<Long> sorted4 = new ArrayList<Long>();\n\
    \        ArrayList<Long> sorted5 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sorted6 = new ArrayList<Long>();\n        ArrayList<Long> sorted7 = new ArrayList<Long>();\n\
    \        ArrayList<Long> sorted8 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sorted9 = new ArrayList<Long>();\n        ArrayList<Long> sorted10 = new ArrayList<Long>();\n\
    \        ArrayList<Long> sorted11 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sorted12 = new ArrayList<Long>();\n        ArrayList<Long> sorted13 = new ArrayList<Long>();\n\
    \        ArrayList<Long> sorted14 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sorted15 = new ArrayList<Long>();\n        ArrayList<Long> sorted16 = new ArrayList<Long>();\n\
    \        ArrayList<Long> sorted17 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sorted18 = new ArrayList<Long>();\n        ArrayList<Long> sorted19 = new ArrayList<Long>();\n\
    \        ArrayList<Long> sorted20 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sorted21 = new ArrayList<Long>();\n        ArrayList<Long> sorted22 = new ArrayList<Long>();\n\
    \        ArrayList<Long> sorted23 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sorted24 = new ArrayList<Long>();\n        ArrayList<Long> sorted25 = new ArrayList<Long>();\n\
    \        ArrayList<Long> sorted26 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sorted27 = new ArrayList<Long>();\n        ArrayList<Long> sorted28 = new ArrayList<Long>();\n\
    \        ArrayList<Long> sorted29 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sorted30 = new ArrayList<Long>();\n        Array\n    }\n    public static void\
    \ main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp98g01ly3.java:50: error: not a statement\n        Array\n     \
    \   ^\n/tmp/tmp98g01ly3.java:50: error: ';' expected\n        Array\n        \
    \     ^\n2 errors\n"
  stdout: ''
  timestamp: 1659794687
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        // Your code here\n        return\
    \ arr;\n    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvyxipufw.java:24)\n"
  stdout: ''
  timestamp: 1659794684
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> sorted = new ArrayList<Long>();\n\
    \        ArrayList<Long> sortedByOnes = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sortedByZeros = new ArrayList<Long>();\n        for (Long i : arr) {\n     \
    \       if (i > 0) {\n                if (Long.bitCount(i) % 2 == 0) {\n     \
    \               sortedByZeros.add(i);\n                } else {\n            \
    \        sortedByOnes.add(i);\n                }\n            } else {\n     \
    \           sorted.add(i);\n            }\n        }\n        Collections.sort(sortedByOnes);\n\
    \        Collections.sort(sortedByZeros);\n        sorted.addAll(sortedByOnes);\n\
    \        sorted.addAll(sortedByZeros);\n        return sorted;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpd9a0o7fr.java:42)\n"
  stdout: ''
  timestamp: 1659794688
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> sorted = new ArrayList<Long>();\n\
    \        ArrayList<Long> sortedByOnes = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sortedByOnesAndDecimal = new ArrayList<Long>();\n        ArrayList<Long> sortedByDecimal\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByDecimalAndOnes = new\
    \ ArrayList<Long>();\n        ArrayList<Long> sortedByOnesAndDecimalAndOnes =\
    \ new ArrayList<Long>();\n        ArrayList<Long> sortedByOnesAndDecimalAndDecimal\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByDecimalAndOnesAndOnes\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByDecimalAndOnesAndDecimal\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByDecimalAndDecimalAndOnes\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByDecimalAndDecimalAndDecimal\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByOnesAndOnesAndOnes\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByOnesAndOnesAndDecimal\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByOnesAndDecimalAndOnesAndOnes\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByOnesAndDecimalAndOnesAndDecimal\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByOnesAndDecimalAndDecimalAndOnes\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByOnesAndDecimalAndDecimalAndDecimal\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByDecimalAndOnesAndOnesAndOnes\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByDecimalAndOnesAndOnesAndDecimal\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByDecimalAndOnesAndDecimalAndOnes\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByDecimalAndOnesAndDecimalAnd\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphdhvjyql.java:40: error: ';' expected\n        ArrayList<Long>\
    \ sortedByDecimalAndOnesAndDecimalAnd\n                                      \
    \                     ^\n1 error\n"
  stdout: ''
  timestamp: 1659794687
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> sorted = new ArrayList<Long>();\n\
    \        ArrayList<Long> zeros = new ArrayList<Long>();\n        ArrayList<Long>\
    \ ones = new ArrayList<Long>();\n        ArrayList<Long> twos = new ArrayList<Long>();\n\
    \        ArrayList<Long> threes = new ArrayList<Long>();\n        ArrayList<Long>\
    \ fours = new ArrayList<Long>();\n        ArrayList<Long> fives = new ArrayList<Long>();\n\
    \        ArrayList<Long> sixes = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sevens = new ArrayList<Long>();\n        ArrayList<Long> eights = new ArrayList<Long>();\n\
    \        ArrayList<Long> nines = new ArrayList<Long>();\n        ArrayList<Long>\
    \ tens = new ArrayList<Long>();\n        ArrayList<Long> elevens = new ArrayList<Long>();\n\
    \        ArrayList<Long> twelves = new ArrayList<Long>();\n        ArrayList<Long>\
    \ thirteens = new ArrayList<Long>();\n        ArrayList<Long> fourteens = new\
    \ ArrayList<Long>();\n        ArrayList<Long> fifteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> sixteens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ seventeens = new ArrayList<Long>();\n        ArrayList<Long> eighteens = new\
    \ ArrayList<Long>();\n        ArrayList<Long> ninteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> twenteens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ twentyones = new ArrayList<Long>();\n        ArrayList<Long> twentytwos = new\
    \ ArrayList<Long>();\n        ArrayList<Long> twentythrees = new ArrayList<Long>();\n\
    \        ArrayList<Long> twentyfours = new ArrayList<Long>();\n        ArrayList<Long>\
    \ twentyfives = new ArrayList<Long>();\n        ArrayList<Long> twentysixes =\
    \ new ArrayList<Long>();\n        ArrayList<Long> twentysevens = new ArrayList<Long>();\n\
    \        ArrayList\n    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnmg9zatb.java:49: error: not a statement\n        ArrayList\n \
    \       ^\n/tmp/tmpnmg9zatb.java:49: error: ';' expected\n        ArrayList\n\
    \                 ^\n2 errors\n"
  stdout: ''
  timestamp: 1659794687
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> res = new ArrayList<Long>();\n\
    \        ArrayList<Long> neg = new ArrayList<Long>();\n        ArrayList<Long>\
    \ pos = new ArrayList<Long>();\n        for (Long i : arr) {\n            if (i\
    \ < 0) {\n                neg.add(i);\n            } else {\n                pos.add(i);\n\
    \            }\n        }\n        Collections.sort(neg);\n        Collections.sort(pos);\n\
    \        for (Long i : neg) {\n            res.add(i);\n        }\n        for\
    \ (Long i : pos) {\n            res.add(i);\n        }\n        return res;\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmph7y2ae68.java:41)\n"
  stdout: ''
  timestamp: 1659794688
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> sorted = new ArrayList<Long>();\n\
    \        ArrayList<Long> zeros = new ArrayList<Long>();\n        ArrayList<Long>\
    \ ones = new ArrayList<Long>();\n        ArrayList<Long> twos = new ArrayList<Long>();\n\
    \        ArrayList<Long> threes = new ArrayList<Long>();\n        ArrayList<Long>\
    \ fours = new ArrayList<Long>();\n        ArrayList<Long> fives = new ArrayList<Long>();\n\
    \        ArrayList<Long> sixes = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sevens = new ArrayList<Long>();\n        ArrayList<Long> eights = new ArrayList<Long>();\n\
    \        ArrayList<Long> nines = new ArrayList<Long>();\n        ArrayList<Long>\
    \ tens = new ArrayList<Long>();\n        ArrayList<Long> elevens = new ArrayList<Long>();\n\
    \        ArrayList<Long> twelves = new ArrayList<Long>();\n        ArrayList<Long>\
    \ thirteens = new ArrayList<Long>();\n        ArrayList<Long> fourteens = new\
    \ ArrayList<Long>();\n        ArrayList<Long> fifteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> sixteens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ seventeens = new ArrayList<Long>();\n        ArrayList<Long> eighteens = new\
    \ ArrayList<Long>();\n        ArrayList<Long> ninteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> twenties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ thirtys = new ArrayList<Long>();\n        ArrayList<Long> fourtys = new ArrayList<Long>();\n\
    \        ArrayList<Long> fiftys = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sixtys = new ArrayList<Long>();\n        ArrayList<Long> seventys = new ArrayList<Long>();\n\
    \        ArrayList<Long> eighty = new ArrayList<Long>();\n        ArrayList<Long>\
    \ ninety = new ArrayList<Long>();\n        ArrayList<Long> hundred = new ArrayList<Long\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpg37ohd62.java:50: error: > expected\n    }\n    ^\n1 error\n"
  stdout: ''
  timestamp: 1659794687
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> sorted = new ArrayList<Long>();\n\
    \        ArrayList<Long> zeros = new ArrayList<Long>();\n        ArrayList<Long>\
    \ ones = new ArrayList<Long>();\n        ArrayList<Long> twos = new ArrayList<Long>();\n\
    \        ArrayList<Long> threes = new ArrayList<Long>();\n        ArrayList<Long>\
    \ fours = new ArrayList<Long>();\n        ArrayList<Long> fives = new ArrayList<Long>();\n\
    \        ArrayList<Long> sixes = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sevens = new ArrayList<Long>();\n        ArrayList<Long> eights = new ArrayList<Long>();\n\
    \        ArrayList<Long> nines = new ArrayList<Long>();\n        ArrayList<Long>\
    \ tens = new ArrayList<Long>();\n        ArrayList<Long> elevens = new ArrayList<Long>();\n\
    \        ArrayList<Long> twelves = new ArrayList<Long>();\n        ArrayList<Long>\
    \ thirteens = new ArrayList<Long>();\n        ArrayList<Long> fourteens = new\
    \ ArrayList<Long>();\n        ArrayList<Long> fifteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> sixteens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ seventeens = new ArrayList<Long>();\n        ArrayList<Long> eightteens = new\
    \ ArrayList<Long>();\n        ArrayList<Long> ninteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> twenties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ negatives = new ArrayList<Long>();\n        for (Long i : arr) {\n         \
    \   if (i < 0) {\n                negatives.add(i);\n            } else if (i\
    \ == 0) {\n                zeros.add(i);\n            } else if (i == 1) {\n \
    \               ones.add(i);\n            } else if (i == 2) {\n             \
    \   twos.add(i);\n            } else if (i == 3) {\n                threes.add(i);\n\
    \            } else if (i == 4)\n    }\n    public static void main(String[] args)\
    \ {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpf_sxg2t7.java:55: error: illegal start of statement\n    }\n  \
    \  ^\n/tmp/tmpf_sxg2t7.java:56: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n2 errors\n"
  stdout: ''
  timestamp: 1659794687
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        ArrayList<Long> negative = new ArrayList<>();\n        ArrayList<Long>\
    \ positive = new ArrayList<>();\n        for (Long l : arr) {\n            if\
    \ (l < 0) {\n                negative.add(l);\n            } else {\n        \
    \        positive.add(l);\n            }\n        }\n        Collections.sort(negative,\
    \ new Comparator<Long>() {\n            @Override\n            public int compare(Long\
    \ o1, Long o2) {\n                return Long.compare(o2, o1);\n            }\n\
    \        });\n        Collections.sort(positive, new Comparator<Long>() {\n  \
    \          @Override\n            public int compare(Long o1, Long o2) {\n   \
    \             return Long.compare(o1, o2);\n            }\n        });\n     \
    \   result.addAll(negative);\n        result.addAll(positive);\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4kal9fo5.java:47)\n"
  stdout: ''
  timestamp: 1659794688
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> sorted = new ArrayList<Long>();\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            sorted.add(arr.get(i));\n\
    \        }\n        Collections.sort(sorted, new Comparator<Long>() {\n      \
    \      @Override\n            public int compare(Long a, Long b) {\n         \
    \       String aBin = Long.toBinaryString(a);\n                String bBin = Long.toBinaryString(b);\n\
    \                int aOnes = 0;\n                int bOnes = 0;\n            \
    \    for (int i = 0; i < aBin.length(); i++) {\n                    if (aBin.charAt(i)\
    \ == '1') {\n                        aOnes++;\n                    }\n       \
    \         }\n                for (int i = 0; i < bBin.length(); i++) {\n     \
    \               if (bBin.charAt(i) == '1') {\n                        bOnes++;\n\
    \                    }\n                }\n                if (aOnes == bOnes)\
    \ {\n                    return a.compareTo(b);\n                } else {\n  \
    \                  return aOnes - bOnes;\n                }\n            }\n \
    \       });\n        return sorted;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkhtlhohp.java:52)\n"
  stdout: ''
  timestamp: 1659794682
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> sorted = new ArrayList<Long>();\n\
    \        ArrayList<Long> zeros = new ArrayList<Long>();\n        ArrayList<Long>\
    \ ones = new ArrayList<Long>();\n        ArrayList<Long> twos = new ArrayList<Long>();\n\
    \        ArrayList<Long> threes = new ArrayList<Long>();\n        ArrayList<Long>\
    \ fours = new ArrayList<Long>();\n        ArrayList<Long> fives = new ArrayList<Long>();\n\
    \        ArrayList<Long> sixes = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sevens = new ArrayList<Long>();\n        ArrayList<Long> eights = new ArrayList<Long>();\n\
    \        ArrayList<Long> nines = new ArrayList<Long>();\n        ArrayList<Long>\
    \ tens = new ArrayList<Long>();\n        ArrayList<Long> elevens = new ArrayList<Long>();\n\
    \        ArrayList<Long> twelves = new ArrayList<Long>();\n        ArrayList<Long>\
    \ thirteens = new ArrayList<Long>();\n        ArrayList<Long> fourteens = new\
    \ ArrayList<Long>();\n        ArrayList<Long> fifteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> sixteens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ seventeens = new ArrayList<Long>();\n        ArrayList<Long> eighteens = new\
    \ ArrayList<Long>();\n        ArrayList<Long> ninteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> twenties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ thirtys = new ArrayList<Long>();\n        ArrayList<Long> fortys = new ArrayList<Long>();\n\
    \        ArrayList<Long> fiftys = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sixtys = new ArrayList<Long>();\n        ArrayList<Long> seventys = new ArrayList<Long>();\n\
    \        ArrayList<Long> eightyes = new ArrayList<Long>();\n        ArrayList<Long>\
    \ ninetyes = new ArrayList<Long>();\n        ArrayList<Long> hundreds = new ArrayList<\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwu8t6nn9.java:50: error: illegal start of type\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659794687
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        return new ArrayList<Long>(arr.stream().sorted(Comparator.comparing(Problem::countOnes).thenComparing(Long::compareTo)).collect(Collectors.toList()));\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpg6qgh_92.java:20: error: invalid method reference\n        return\
    \ new ArrayList<Long>(arr.stream().sorted(Comparator.comparing(Problem::countOnes).thenComparing(Long::compareTo)).collect(Collectors.toList()));\n\
    \                                                                            ^\n\
    \  cannot find symbol\n    symbol:   method countOnes()\n    location: class Problem\n\
    1 error\n"
  stdout: ''
  timestamp: 1659794688
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            long num = arr.get(i);\n\
    \            int count = 0;\n            while (num > 0) {\n                count\
    \ += num % 2;\n                num = num / 2;\n            }\n            result.add(count);\n\
    \        }\n        ArrayList<Long> result2 = new ArrayList<Long>();\n       \
    \ for (int i = 0; i < arr.size(); i++) {\n            long num = arr.get(i);\n\
    \            int count = 0;\n            while (num > 0) {\n                count\
    \ += num % 2;\n                num = num / 2;\n            }\n            result2.add(count);\n\
    \        }\n        ArrayList<Long> result3 = new ArrayList<Long>();\n       \
    \ for (int i = 0; i < arr.size(); i++) {\n            long num = arr.get(i);\n\
    \            int count = 0;\n            while (num > 0) {\n                count\
    \ += num % 2;\n                num = num / 2;\n            }\n            result3.add(count);\n\
    \        }\n        ArrayList<Long> result4 = new ArrayList<Long>();\n       \
    \ for (int i = 0; i < arr.size(); i++) {\n            long num = arr.get(i);\n\
    \            int count = 0;\n            while (num > 0) {\n                count\
    \ += num % 2;\n                num = num / 2;\n            }\n            result4.add(count);\n\
    \        }\n        ArrayList<Long> result5 = new ArrayList<Long>();\n       \
    \ for (int i = 0; i < arr.size(); i++) {\n            long num = arr.get(i);\n\
    \            int count = 0;\n            while (num > 0) {\n                count\
    \ += num % 2;\n                num = num / 2;\n            }\n            result5.add(count);\n\
    \        }\n        ArrayList<Long> result6 = new ArrayList<Long>();\n       \
    \ for (int i = 0; i < arr.size(); i++) {\n            long num = arr.get(i);\n\
    \            int\n    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2nj4riee.java:73: error: not a statement\n            int\n   \
    \         ^\n/tmp/tmp2nj4riee.java:73: error: ';' expected\n            int\n\
    \               ^\n/tmp/tmp2nj4riee.java:75: error: illegal start of expression\n\
    \    public static void main(String[] args) {\n    ^\n3 errors\n"
  stdout: ''
  timestamp: 1659794687
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> sorted = new ArrayList<Long>();\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            sorted.add(arr.get(i));\n\
    \        }\n        Collections.sort(sorted, new Comparator<Long>() {\n      \
    \      @Override\n            public int compare(Long a, Long b) {\n         \
    \       String aBin = Long.toBinaryString(a);\n                String bBin = Long.toBinaryString(b);\n\
    \                int aOnes = 0;\n                int bOnes = 0;\n            \
    \    for (int i = 0; i < aBin.length(); i++) {\n                    if (aBin.charAt(i)\
    \ == '1') {\n                        aOnes++;\n                    }\n       \
    \         }\n                for (int i = 0; i < bBin.length(); i++) {\n     \
    \               if (bBin.charAt(i) == '1') {\n                        bOnes++;\n\
    \                    }\n                }\n                if (aOnes == bOnes)\
    \ {\n                    return a.compareTo(b);\n                } else {\n  \
    \                  return aOnes - bOnes;\n                }\n            }\n \
    \       });\n        return sorted;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkhtlhohp.java:52)\n"
  stdout: ''
  timestamp: 1659794682
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> sorted = new ArrayList<Long>();\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            Long l = arr.get(i);\n\
    \            if (l >= 0) {\n                sorted.add(l);\n            }\n  \
    \      }\n        Collections.sort(sorted, new Comparator<Long>() {\n        \
    \    public int compare(Long l1, Long l2) {\n                String s1 = Long.toBinaryString(l1);\n\
    \                String s2 = Long.toBinaryString(l2);\n                int ones1\
    \ = 0;\n                int ones2 = 0;\n                for (int i = 0; i < s1.length();\
    \ i++) {\n                    if (s1.charAt(i) == '1') {\n                   \
    \     ones1++;\n                    }\n                }\n                for\
    \ (int i = 0; i < s2.length(); i++) {\n                    if (s2.charAt(i) ==\
    \ '1') {\n                        ones2++;\n                    }\n          \
    \      }\n                if (ones1 == ones2) {\n                    return l1.compareTo(l2);\n\
    \                } else {\n                    return ones1 - ones2;\n       \
    \         }\n            }\n        });\n        for (int i = 0; i < arr.size();\
    \ i++) {\n            Long l = arr.get(i);\n            if (l < 0) {\n       \
    \         sorted.add(l);\n            }\n        }\n        return sorted;\n \
    \   }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjzz3458y.java:60)\n"
  stdout: ''
  timestamp: 1659794688
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        ArrayList<Long> zeros = new ArrayList<Long>();\n        ArrayList<Long>\
    \ ones = new ArrayList<Long>();\n        ArrayList<Long> twos = new ArrayList<Long>();\n\
    \        ArrayList<Long> threes = new ArrayList<Long>();\n        ArrayList<Long>\
    \ fours = new ArrayList<Long>();\n        ArrayList<Long> fives = new ArrayList<Long>();\n\
    \        ArrayList<Long> sixes = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sevens = new ArrayList<Long>();\n        ArrayList<Long> eights = new ArrayList<Long>();\n\
    \        ArrayList<Long> nines = new ArrayList<Long>();\n        ArrayList<Long>\
    \ tens = new ArrayList<Long>();\n        ArrayList<Long> elevens = new ArrayList<Long>();\n\
    \        ArrayList<Long> twelves = new ArrayList<Long>();\n        ArrayList<Long>\
    \ thirteens = new ArrayList<Long>();\n        ArrayList<Long> fourteens = new\
    \ ArrayList<Long>();\n        ArrayList<Long> fifteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> sixteens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ seventeens = new ArrayList<Long>();\n        ArrayList<Long> eightteens = new\
    \ ArrayList<Long>();\n        ArrayList<Long> nineteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> twenties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ thirties = new ArrayList<Long>();\n        ArrayList<Long> forties = new ArrayList<Long>();\n\
    \        ArrayList<Long> fifties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sixties = new ArrayList<Long>();\n        ArrayList<Long> seventies = new ArrayList<Long>();\n\
    \        ArrayList<Long> eighties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ nineties = new ArrayList<Long>();\n        ArrayList<Long> hundreds = new ArrayList\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7ftfbt61.java:50: error: '(' or '[' expected\n    }\n    ^\n1 error\n"
  stdout: ''
  timestamp: 1659794687
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        // Your code here\n        return\
    \ arr;\n    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvyxipufw.java:24)\n"
  stdout: ''
  timestamp: 1659794684
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> sorted = new ArrayList<>();\n\
    \        for (Long l : arr) {\n            sorted.add(l);\n        }\n       \
    \ Collections.sort(sorted, new Comparator<Long>() {\n            @Override\n \
    \           public int compare(Long l1, Long l2) {\n                String s1\
    \ = Long.toBinaryString(l1);\n                String s2 = Long.toBinaryString(l2);\n\
    \                int count1 = 0;\n                int count2 = 0;\n          \
    \      for (int i = 0; i < s1.length(); i++) {\n                    if (s1.charAt(i)\
    \ == '1') {\n                        count1++;\n                    }\n      \
    \          }\n                for (int i = 0; i < s2.length(); i++) {\n      \
    \              if (s2.charAt(i) == '1') {\n                        count2++;\n\
    \                    }\n                }\n                if (count1 == count2)\
    \ {\n                    return l1.compareTo(l2);\n                }\n       \
    \         return count1 - count2;\n            }\n        });\n        return\
    \ sorted;\n    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpg6b9fziy.java:51)\n"
  stdout: ''
  timestamp: 1659794688
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        return new ArrayList<Long>(arr.stream().sorted(Comparator.comparing(Problem::countOnes).thenComparing(Comparator.naturalOrder())).collect(Collectors.toList()));\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpg7044xna.java:20: error: invalid method reference\n        return\
    \ new ArrayList<Long>(arr.stream().sorted(Comparator.comparing(Problem::countOnes).thenComparing(Comparator.naturalOrder())).collect(Collectors.toList()));\n\
    \                                                                            ^\n\
    \  cannot find symbol\n    symbol:   method countOnes()\n    location: class Problem\n\
    1 error\n"
  stdout: ''
  timestamp: 1659794688
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> sorted = new ArrayList<Long>();\n\
    \        ArrayList<Long> zeros = new ArrayList<Long>();\n        ArrayList<Long>\
    \ ones = new ArrayList<Long>();\n        ArrayList<Long> twos = new ArrayList<Long>();\n\
    \        ArrayList<Long> threes = new ArrayList<Long>();\n        ArrayList<Long>\
    \ fours = new ArrayList<Long>();\n        ArrayList<Long> fives = new ArrayList<Long>();\n\
    \        ArrayList<Long> sixes = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sevens = new ArrayList<Long>();\n        ArrayList<Long> eights = new ArrayList<Long>();\n\
    \        ArrayList<Long> nines = new ArrayList<Long>();\n        ArrayList<Long>\
    \ tens = new ArrayList<Long>();\n        ArrayList<Long> elevens = new ArrayList<Long>();\n\
    \        ArrayList<Long> twelves = new ArrayList<Long>();\n        ArrayList<Long>\
    \ thirteens = new ArrayList<Long>();\n        ArrayList<Long> fourteens = new\
    \ ArrayList<Long>();\n        ArrayList<Long> fifteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> sixteens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ seventeens = new ArrayList<Long>();\n        ArrayList<Long> eightteens = new\
    \ ArrayList<Long>();\n        ArrayList<Long> nineteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> twenties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ twentyones = new ArrayList<Long>();\n        ArrayList<Long> twentytwos = new\
    \ ArrayList<Long>();\n        ArrayList<Long> twentythrees = new ArrayList<Long>();\n\
    \        ArrayList<Long> twentyfours = new ArrayList<Long>();\n        ArrayList<Long>\
    \ twentyfives = new ArrayList<Long>();\n        ArrayList<Long> twentysixes =\
    \ new ArrayList<Long>();\n        ArrayList<Long> twentysevens = new ArrayList<Long>();\n\
    \        ArrayList<Long>\n    }\n    public static void main(String[] args) {\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpry4huf4s.java:49: error: not a statement\n        ArrayList<Long>\n\
    \                 ^\n/tmp/tmpry4huf4s.java:49: error: ';' expected\n        ArrayList<Long>\n\
    \                       ^\n2 errors\n"
  stdout: ''
  timestamp: 1659794688
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        // your code here\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        for (Long l : arr) {\n            result.add(l);\n\
    \        }\n        Collections.sort(result, new Comparator<Long>() {\n      \
    \      @Override\n            public int compare(Long o1, Long o2) {\n       \
    \         int o1Ones = Long.bitCount(o1);\n                int o2Ones = Long.bitCount(o2);\n\
    \                if (o1Ones == o2Ones) {\n                    return o1.compareTo(o2);\n\
    \                } else {\n                    return o1Ones - o2Ones;\n     \
    \           }\n            }\n        });\n        return result;\n    }\n   \
    \ public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmeka5trq.java:41)\n"
  stdout: ''
  timestamp: 1659794689
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> sorted = new ArrayList<>();\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            long num = arr.get(i);\n\
    \            int ones = 0;\n            while (num > 0) {\n                ones\
    \ += num % 2;\n                num /= 2;\n            }\n            sorted.add(ones);\n\
    \        }\n        ArrayList<Long> sorted2 = new ArrayList<>();\n        for\
    \ (int i = 0; i < arr.size(); i++) {\n            long num = arr.get(i);\n   \
    \         int ones = 0;\n            while (num > 0) {\n                ones +=\
    \ num % 2;\n                num /= 2;\n            }\n            sorted2.add(ones);\n\
    \        }\n        for (int i = 0; i < arr.size(); i++) {\n            long num\
    \ = arr.get(i);\n            int ones = 0;\n            while (num > 0) {\n  \
    \              ones += num % 2;\n                num /= 2;\n            }\n  \
    \          sorted2.add(ones);\n        }\n        for (int i = 0; i < arr.size();\
    \ i++) {\n            long num = arr.get(i);\n            int ones = 0;\n    \
    \        while (num > 0) {\n                ones += num % 2;\n               \
    \ num /= 2;\n            }\n            sorted2.add(ones);\n        }\n      \
    \  for (int i = 0; i < arr.size(); i++) {\n            long num = arr.get(i);\n\
    \            int ones = 0;\n            while (num > 0) {\n                ones\
    \ += num % 2;\n                num /= 2;\n            }\n            sorted2.add(ones);\n\
    \        }\n        for (int i = 0; i < arr.size(); i++) {\n            long num\
    \ = arr.get(i);\n            int ones = 0;\n            while (num > 0) {\n  \
    \              ones += num % 2;\n                num /= 2;\n            }\n  \
    \          sorted2.add(ones);\n        }\n        for (int i = 0; i < arr.size();\
    \ i++) {\n            long num = arr.get(i);\n            int\n    }\n    public\
    \ static void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpimlz4la4.java:78: error: not a statement\n            int\n   \
    \         ^\n/tmp/tmpimlz4la4.java:78: error: ';' expected\n            int\n\
    \               ^\n/tmp/tmpimlz4la4.java:80: error: illegal start of expression\n\
    \    public static void main(String[] args) {\n    ^\n3 errors\n"
  stdout: ''
  timestamp: 1659794688
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> sorted = new ArrayList<Long>();\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            sorted.add(arr.get(i));\n\
    \        }\n        Collections.sort(sorted, new Comparator<Long>() {\n      \
    \      @Override\n            public int compare(Long a, Long b) {\n         \
    \       String aBin = Long.toBinaryString(a);\n                String bBin = Long.toBinaryString(b);\n\
    \                int aOnes = 0;\n                int bOnes = 0;\n            \
    \    for (int i = 0; i < aBin.length(); i++) {\n                    if (aBin.charAt(i)\
    \ == '1') {\n                        aOnes++;\n                    }\n       \
    \         }\n                for (int i = 0; i < bBin.length(); i++) {\n     \
    \               if (bBin.charAt(i) == '1') {\n                        bOnes++;\n\
    \                    }\n                }\n                if (aOnes == bOnes)\
    \ {\n                    return a.compareTo(b);\n                } else {\n  \
    \                  return aOnes - bOnes;\n                }\n            }\n \
    \       });\n        return sorted;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkhtlhohp.java:52)\n"
  stdout: ''
  timestamp: 1659794682
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> sorted = new ArrayList<Long>();\n\
    \        ArrayList<Long> sortedByOnes = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sortedByDecimal = new ArrayList<Long>();\n        for (int i = 0; i < arr.size();\
    \ i++) {\n            sortedByOnes.add(arr.get(i));\n            sortedByDecimal.add(arr.get(i));\n\
    \        }\n        Collections.sort(sortedByOnes, new Comparator<Long>() {\n\
    \            public int compare(Long a, Long b) {\n                return Long.bitCount(a)\
    \ - Long.bitCount(b);\n            }\n        });\n        Collections.sort(sortedByDecimal,\
    \ new Comparator<Long>() {\n            public int compare(Long a, Long b) {\n\
    \                return (int) (a - b);\n            }\n        });\n        for\
    \ (int i = 0; i < arr.size(); i++) {\n            if (Long.bitCount(sortedByOnes.get(i))\
    \ == Long.bitCount(sortedByOnes.get(i + 1))) {\n                sorted.add(sortedByDecimal.get(i));\n\
    \            } else {\n                sorted.add(sortedByOnes.get(i));\n    \
    \        }\n        }\n        return sorted;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 5 out of bounds for length 5\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmplrr9t2h7.java:38)\n\tat Problem.main(tmplrr9t2h7.java:47)\n"
  stdout: ''
  timestamp: 1659794689
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        // Your code here\n        ArrayList<Long>\
    \ sorted = new ArrayList<Long>();\n        ArrayList<Long> zeros = new ArrayList<Long>();\n\
    \        ArrayList<Long> ones = new ArrayList<Long>();\n        ArrayList<Long>\
    \ twos = new ArrayList<Long>();\n        ArrayList<Long> threes = new ArrayList<Long>();\n\
    \        ArrayList<Long> fours = new ArrayList<Long>();\n        ArrayList<Long>\
    \ fives = new ArrayList<Long>();\n        ArrayList<Long> sixes = new ArrayList<Long>();\n\
    \        ArrayList<Long> sevens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ eights = new ArrayList<Long>();\n        ArrayList<Long> nines = new ArrayList<Long>();\n\
    \        ArrayList<Long> tens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ elevens = new ArrayList<Long>();\n        ArrayList<Long> twelves = new ArrayList<Long>();\n\
    \        ArrayList<Long> thirteens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ fourteens = new ArrayList<Long>();\n        ArrayList<Long> fifteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> sixteens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ seventeens = new ArrayList<Long>();\n        ArrayList<Long> eighteens = new\
    \ ArrayList<Long>();\n        ArrayList<Long> nineteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> twenties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ thirtys = new ArrayList<Long>();\n        ArrayList<Long> fourtys = new ArrayList<Long>();\n\
    \        ArrayList<Long> fiftys = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sixtys = new ArrayList<Long>();\n        ArrayList<Long> seventys = new ArrayList<Long>();\n\
    \        ArrayList<Long> eighty = new ArrayList<Long>();\n        ArrayList<Long>\
    \ ninety = new ArrayList<Long>();\n        ArrayList<Long> hundred =\n    }\n\
    \    public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp87w762ib.java:51: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  stdout: ''
  timestamp: 1659794688
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        ArrayList<Long> zeros = new ArrayList<Long>();\n        ArrayList<Long>\
    \ ones = new ArrayList<Long>();\n        ArrayList<Long> twos = new ArrayList<Long>();\n\
    \        ArrayList<Long> threes = new ArrayList<Long>();\n        ArrayList<Long>\
    \ fours = new ArrayList<Long>();\n        ArrayList<Long> fives = new ArrayList<Long>();\n\
    \        ArrayList<Long> sixes = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sevens = new ArrayList<Long>();\n        ArrayList<Long> eights = new ArrayList<Long>();\n\
    \        ArrayList<Long> nines = new ArrayList<Long>();\n        ArrayList<Long>\
    \ tens = new ArrayList<Long>();\n        ArrayList<Long> elevens = new ArrayList<Long>();\n\
    \        ArrayList<Long> twelves = new ArrayList<Long>();\n        ArrayList<Long>\
    \ thirteens = new ArrayList<Long>();\n        ArrayList<Long> fourteens = new\
    \ ArrayList<Long>();\n        ArrayList<Long> fifteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> sixteens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ seventeens = new ArrayList<Long>();\n        ArrayList<Long> eightteens = new\
    \ ArrayList<Long>();\n        ArrayList<Long> nineteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> twenties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ thirties = new ArrayList<Long>();\n        ArrayList<Long> forties = new ArrayList<Long>();\n\
    \        ArrayList<Long> fifties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sixties = new ArrayList<Long>();\n        ArrayList<Long> seventies = new ArrayList<Long>();\n\
    \        ArrayList<Long> eighties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ nineties = new ArrayList<Long>();\n        ArrayList<Long> hundreds = new ArrayList\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7ftfbt61.java:50: error: '(' or '[' expected\n    }\n    ^\n1 error\n"
  stdout: ''
  timestamp: 1659794687
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        // your code here\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        ArrayList<Long> temp = new ArrayList<Long>();\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            temp.add(arr.get(i));\n\
    \        }\n        Collections.sort(temp);\n        for (int i = 0; i < temp.size();\
    \ i++) {\n            result.add(temp.get(i));\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3xhqvru0.java:33)\n"
  stdout: ''
  timestamp: 1659794689
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> sorted = new ArrayList<Long>();\n\
    \        ArrayList<Long> sortedOnes = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sortedZeros = new ArrayList<Long>();\n        for (int i = 0; i < arr.size();\
    \ i++) {\n            if (Long.bitCount(arr.get(i)) == 0) {\n                sortedZeros.add(arr.get(i));\n\
    \            } else {\n                sortedOnes.add(arr.get(i));\n         \
    \   }\n        }\n        Collections.sort(sortedOnes);\n        Collections.sort(sortedZeros);\n\
    \        sorted.addAll(sortedZeros);\n        sorted.addAll(sortedOnes);\n   \
    \     return sorted;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp51iuw4nd.java:37)\n"
  stdout: ''
  timestamp: 1659794689
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        // your code here\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        ArrayList<Long> sorted = new ArrayList<Long>();\n\
    \        ArrayList<Long> sorted2 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sorted3 = new ArrayList<Long>();\n        ArrayList<Long> sorted4 = new ArrayList<Long>();\n\
    \        ArrayList<Long> sorted5 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sorted6 = new ArrayList<Long>();\n        ArrayList<Long> sorted7 = new ArrayList<Long>();\n\
    \        ArrayList<Long> sorted8 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sorted9 = new ArrayList<Long>();\n        ArrayList<Long> sorted10 = new ArrayList<Long>();\n\
    \        ArrayList<Long> sorted11 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sorted12 = new ArrayList<Long>();\n        ArrayList<Long> sorted13 = new ArrayList<Long>();\n\
    \        ArrayList<Long> sorted14 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sorted15 = new ArrayList<Long>();\n        ArrayList<Long> sorted16 = new ArrayList<Long>();\n\
    \        ArrayList<Long> sorted17 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sorted18 = new ArrayList<Long>();\n        ArrayList<Long> sorted19 = new ArrayList<Long>();\n\
    \        ArrayList<Long> sorted20 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sorted21 = new ArrayList<Long>();\n        ArrayList<Long> sorted22 = new ArrayList<Long>();\n\
    \        ArrayList<Long> sorted23 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sorted24 = new ArrayList<Long>();\n        ArrayList<Long> sorted25 = new ArrayList<Long>();\n\
    \        ArrayList<Long> sorted26 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sorted27 = new ArrayList<Long>();\n        ArrayList<Long> sorted28 = new ArrayList<Long>();\n\
    \        ArrayList<Long> sorted29 = new ArrayList<Long\n    }\n    public static\
    \ void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4o4opql_.java:51: error: > expected\n    }\n    ^\n1 error\n"
  stdout: ''
  timestamp: 1659794688
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> sorted = new ArrayList<Long>();\n\
    \        ArrayList<Long> zeros = new ArrayList<Long>();\n        ArrayList<Long>\
    \ ones = new ArrayList<Long>();\n        ArrayList<Long> twos = new ArrayList<Long>();\n\
    \        ArrayList<Long> threes = new ArrayList<Long>();\n        ArrayList<Long>\
    \ fours = new ArrayList<Long>();\n        ArrayList<Long> fives = new ArrayList<Long>();\n\
    \        ArrayList<Long> sixes = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sevens = new ArrayList<Long>();\n        ArrayList<Long> eights = new ArrayList<Long>();\n\
    \        ArrayList<Long> nines = new ArrayList<Long>();\n        ArrayList<Long>\
    \ tens = new ArrayList<Long>();\n        ArrayList<Long> elevens = new ArrayList<Long>();\n\
    \        ArrayList<Long> twelves = new ArrayList<Long>();\n        ArrayList<Long>\
    \ thirteens = new ArrayList<Long>();\n        ArrayList<Long> fourteens = new\
    \ ArrayList<Long>();\n        ArrayList<Long> fifteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> sixteens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ seventeens = new ArrayList<Long>();\n        ArrayList<Long> eightteens = new\
    \ ArrayList<Long>();\n        ArrayList<Long> ninteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> twenties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ thirties = new ArrayList<Long>();\n        ArrayList<Long> fourties = new ArrayList<Long>();\n\
    \        ArrayList<Long> fifties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sixties = new ArrayList<Long>();\n        ArrayList<Long> seventies = new ArrayList<Long>();\n\
    \        ArrayList<Long> eighties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ ninties = new ArrayList<Long>();\n        ArrayList<Long> hundreds = new\n \
    \   }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1ccfoi8p.java:49: error: <identifier> expected\n        ArrayList<Long>\
    \ hundreds = new\n                                      ^\n/tmp/tmp1ccfoi8p.java:50:\
    \ error: '(' or '[' expected\n    }\n    ^\n2 errors\n"
  stdout: ''
  timestamp: 1659794688
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        ArrayList<Long> positive = new ArrayList<Long>();\n        ArrayList<Long>\
    \ negative = new ArrayList<Long>();\n        for (Long i : arr) {\n          \
    \  if (i >= 0) {\n                positive.add(i);\n            } else {\n   \
    \             negative.add(i);\n            }\n        }\n        Collections.sort(positive,\
    \ new Comparator<Long>() {\n            public int compare(Long a, Long b) {\n\
    \                int aOnes = Long.bitCount(a);\n                int bOnes = Long.bitCount(b);\n\
    \                if (aOnes == bOnes) {\n                    return a.compareTo(b);\n\
    \                } else {\n                    return aOnes - bOnes;\n       \
    \         }\n            }\n        });\n        Collections.sort(negative, new\
    \ Comparator<Long>() {\n            public int compare(Long a, Long b) {\n   \
    \             int aOnes = Long.bitCount(a);\n                int bOnes = Long.bitCount(b);\n\
    \                if (aOnes == bOnes) {\n                    return a.compareTo(b);\n\
    \                } else {\n                    return aOnes - bOnes;\n       \
    \         }\n            }\n        });\n        Collections.reverse(negative);\n\
    \        result.addAll(negative);\n        result.addAll(positive);\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpur0eeybq.java:59)\n"
  stdout: ''
  timestamp: 1659794689
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        ArrayList<Long> sorted = new ArrayList<Long>();\n        ArrayList<Long>\
    \ unsorted = new ArrayList<Long>();\n        for (Long l : arr) {\n          \
    \  if (l < 0) {\n                sorted.add(l);\n            } else {\n      \
    \          unsorted.add(l);\n            }\n        }\n        Collections.sort(sorted);\n\
    \        Collections.sort(unsorted, new Comparator<Long>() {\n            public\
    \ int compare(Long l1, Long l2) {\n                String s1 = Long.toBinaryString(l1);\n\
    \                String s2 = Long.toBinaryString(l2);\n                int ones1\
    \ = 0;\n                int ones2 = 0;\n                for (int i = 0; i < s1.length();\
    \ i++) {\n                    if (s1.charAt(i) == '1') {\n                   \
    \     ones1++;\n                    }\n                }\n                for\
    \ (int i = 0; i < s2.length(); i++) {\n                    if (s2.charAt(i) ==\
    \ '1') {\n                        ones2++;\n                    }\n          \
    \      }\n                if (ones1 == ones2) {\n                    return l1.compareTo(l2);\n\
    \                } else {\n                    return ones1 - ones2;\n       \
    \         }\n            }\n        });\n        for (Long l : sorted) {\n   \
    \         result.add(l);\n        }\n        for (Long l : unsorted) {\n     \
    \       result.add(l);\n        }\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpavtj1jsy.java:64)\n"
  stdout: ''
  timestamp: 1659794689
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        // Your code here\n        return\
    \ arr;\n    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvyxipufw.java:24)\n"
  stdout: ''
  timestamp: 1659794684
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> sorted = new ArrayList<Long>();\n\
    \        ArrayList<Long> sorted1 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sorted2 = new ArrayList<Long>();\n        ArrayList<Long> sorted3 = new ArrayList<Long>();\n\
    \        ArrayList<Long> sorted4 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sorted5 = new ArrayList<Long>();\n        ArrayList<Long> sorted6 = new ArrayList<Long>();\n\
    \        ArrayList<Long> sorted7 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sorted8 = new ArrayList<Long>();\n        ArrayList<Long> sorted9 = new ArrayList<Long>();\n\
    \        ArrayList<Long> sorted10 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sorted11 = new ArrayList<Long>();\n        ArrayList<Long> sorted12 = new ArrayList<Long>();\n\
    \        ArrayList<Long> sorted13 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sorted14 = new ArrayList<Long>();\n        ArrayList<Long> sorted15 = new ArrayList<Long>();\n\
    \        ArrayList<Long> sorted16 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sorted17 = new ArrayList<Long>();\n        ArrayList<Long> sorted18 = new ArrayList<Long>();\n\
    \        ArrayList<Long> sorted19 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sorted20 = new ArrayList<Long>();\n        ArrayList<Long> sorted21 = new ArrayList<Long>();\n\
    \        ArrayList<Long> sorted22 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sorted23 = new ArrayList<Long>();\n        ArrayList<Long> sorted24 = new ArrayList<Long>();\n\
    \        ArrayList<Long> sorted25 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sorted26 = new ArrayList<Long>();\n        ArrayList<Long> sorted27 = new ArrayList<Long>();\n\
    \        ArrayList<Long> sorted28 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sorted29 = new ArrayList<Long>();\n        Array\n    }\n    public static void\
    \ main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvb2dn5z8.java:50: error: not a statement\n        Array\n     \
    \   ^\n/tmp/tmpvb2dn5z8.java:50: error: ';' expected\n        Array\n        \
    \     ^\n2 errors\n"
  stdout: ''
  timestamp: 1659794688
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        // Your code here\n        return\
    \ arr;\n    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvyxipufw.java:24)\n"
  stdout: ''
  timestamp: 1659794684
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> sorted = new ArrayList<Long>();\n\
    \        ArrayList<Long> sortedByOnes = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sortedByDecimal = new ArrayList<Long>();\n        ArrayList<Long> sortedByOnesAndDecimal\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByOnesAndDecimalAndNegative\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByOnesAndDecimalAndNegativeAndZero\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByOnesAndDecimalAndNegativeAndZeroAndPositive\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByOnesAndDecimalAndNegativeAndZeroAndPositiveAndZero\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByOnesAndDecimalAndNegativeAndZeroAndPositiveAndZeroAndPositive\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByOnesAndDecimalAndNegativeAndZeroAndPositiveAndZeroAndPositiveAndZero\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByOnesAndDecimalAndNegativeAndZeroAndPositiveAndZeroAndPositiveAndZeroAndPositive\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByOnesAndDecimalAndNegativeAndZeroAndPositiveAndZeroAndPositiveAndZeroAndPositiveAndZero\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByOnesAndDecimalAndNegativeAndZeroAndPositiveAndZeroAndPositiveAndZeroAndPositiveAndZeroAndPositive\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByOnesAndDecimalAndNegativeAndZeroAndPositiveAndZeroAndPositiveAndZeroAndPositiveAndZeroAndPositiveAndZero\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByOnesAndDecimalAndNegativeAndZeroAndPositiveAndZeroAndPositiveAndZeroAndPositiveAndZeroAndPositiveAndZeroAndPositive\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByOnesAndDecimalAndNegativeAndZeroAndPositiveAndZeroAndPos\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppogn2b49.java:35: error: ';' expected\n        ArrayList<Long>\
    \ sortedByOnesAndDecimalAndNegativeAndZeroAndPositiveAndZeroAndPos\n         \
    \                                                                            \
    \   ^\n1 error\n"
  stdout: ''
  timestamp: 1659794688
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> sorted = new ArrayList<Long>();\n\
    \        ArrayList<Long> sorted2 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sorted3 = new ArrayList<Long>();\n        ArrayList<Long> sorted4 = new ArrayList<Long>();\n\
    \        ArrayList<Long> sorted5 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sorted6 = new ArrayList<Long>();\n        ArrayList<Long> sorted7 = new ArrayList<Long>();\n\
    \        ArrayList<Long> sorted8 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sorted9 = new ArrayList<Long>();\n        ArrayList<Long> sorted10 = new ArrayList<Long>();\n\
    \        ArrayList<Long> sorted11 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sorted12 = new ArrayList<Long>();\n        ArrayList<Long> sorted13 = new ArrayList<Long>();\n\
    \        ArrayList<Long> sorted14 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sorted15 = new ArrayList<Long>();\n        ArrayList<Long> sorted16 = new ArrayList<Long>();\n\
    \        ArrayList<Long> sorted17 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sorted18 = new ArrayList<Long>();\n        ArrayList<Long> sorted19 = new ArrayList<Long>();\n\
    \        ArrayList<Long> sorted20 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sorted21 = new ArrayList<Long>();\n        ArrayList<Long> sorted22 = new ArrayList<Long>();\n\
    \        ArrayList<Long> sorted23 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sorted24 = new ArrayList<Long>();\n        ArrayList<Long> sorted25 = new ArrayList<Long>();\n\
    \        ArrayList<Long> sorted26 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sorted27 = new ArrayList<Long>();\n        ArrayList<Long> sorted28 = new ArrayList<Long>();\n\
    \        ArrayList<Long> sorted29 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sorted30 = new ArrayList<Long>();\n        Array\n    }\n    public static void\
    \ main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp98g01ly3.java:50: error: not a statement\n        Array\n     \
    \   ^\n/tmp/tmp98g01ly3.java:50: error: ';' expected\n        Array\n        \
    \     ^\n2 errors\n"
  stdout: ''
  timestamp: 1659794687
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        ArrayList<Long> temp = new ArrayList<Long>();\n        for (int i = 0;\
    \ i < arr.size(); i++) {\n            temp.add(arr.get(i));\n        }\n     \
    \   Collections.sort(temp);\n        for (int i = 0; i < temp.size(); i++) {\n\
    \            result.add(temp.get(i));\n        }\n        return result;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8o28f6gr.java:32)\n"
  stdout: ''
  timestamp: 1659794689
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> sorted = new ArrayList<Long>();\n\
    \        ArrayList<Long> zeros = new ArrayList<Long>();\n        ArrayList<Long>\
    \ ones = new ArrayList<Long>();\n        ArrayList<Long> twos = new ArrayList<Long>();\n\
    \        ArrayList<Long> threes = new ArrayList<Long>();\n        ArrayList<Long>\
    \ fours = new ArrayList<Long>();\n        ArrayList<Long> fives = new ArrayList<Long>();\n\
    \        ArrayList<Long> sixes = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sevens = new ArrayList<Long>();\n        ArrayList<Long> eights = new ArrayList<Long>();\n\
    \        ArrayList<Long> nines = new ArrayList<Long>();\n        ArrayList<Long>\
    \ tens = new ArrayList<Long>();\n        ArrayList<Long> elevens = new ArrayList<Long>();\n\
    \        ArrayList<Long> twelves = new ArrayList<Long>();\n        ArrayList<Long>\
    \ thirteens = new ArrayList<Long>();\n        ArrayList<Long> fourteens = new\
    \ ArrayList<Long>();\n        ArrayList<Long> fifteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> sixteens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ seventeens = new ArrayList<Long>();\n        ArrayList<Long> eightteens = new\
    \ ArrayList<Long>();\n        ArrayList<Long> nineteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> twenties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ twentyones = new ArrayList<Long>();\n        ArrayList<Long> twentytwos = new\
    \ ArrayList<Long>();\n        ArrayList<Long> twentythrees = new ArrayList<Long>();\n\
    \        ArrayList<Long> twentyfours = new ArrayList<Long>();\n        ArrayList<Long>\
    \ twentyfives = new ArrayList<Long>();\n        ArrayList<Long> twentysixes =\
    \ new ArrayList<Long>();\n        ArrayList<Long> twentysevens = new ArrayList<Long>();\n\
    \        ArrayList<Long>\n    }\n    public static void main(String[] args) {\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpry4huf4s.java:49: error: not a statement\n        ArrayList<Long>\n\
    \                 ^\n/tmp/tmpry4huf4s.java:49: error: ';' expected\n        ArrayList<Long>\n\
    \                       ^\n2 errors\n"
  stdout: ''
  timestamp: 1659794688
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> sorted = new ArrayList<Long>();\n\
    \        ArrayList<Long> zeros = new ArrayList<Long>();\n        ArrayList<Long>\
    \ ones = new ArrayList<Long>();\n        ArrayList<Long> twos = new ArrayList<Long>();\n\
    \        ArrayList<Long> threes = new ArrayList<Long>();\n        ArrayList<Long>\
    \ fours = new ArrayList<Long>();\n        ArrayList<Long> fives = new ArrayList<Long>();\n\
    \        ArrayList<Long> sixes = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sevens = new ArrayList<Long>();\n        ArrayList<Long> eights = new ArrayList<Long>();\n\
    \        ArrayList<Long> nines = new ArrayList<Long>();\n        ArrayList<Long>\
    \ tens = new ArrayList<Long>();\n        ArrayList<Long> elevens = new ArrayList<Long>();\n\
    \        ArrayList<Long> twelves = new ArrayList<Long>();\n        ArrayList<Long>\
    \ thirteens = new ArrayList<Long>();\n        ArrayList<Long> fourteens = new\
    \ ArrayList<Long>();\n        ArrayList<Long> fifteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> sixteens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ seventeens = new ArrayList<Long>();\n        ArrayList<Long> eigteens = new\
    \ ArrayList<Long>();\n        ArrayList<Long> ninteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> twenteens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ twentyones = new ArrayList<Long>();\n        ArrayList<Long> twentytwos = new\
    \ ArrayList<Long>();\n        ArrayList<Long> twentythrees = new ArrayList<Long>();\n\
    \        ArrayList<Long> twentyfours = new ArrayList<Long>();\n        ArrayList<Long>\
    \ twentyfives = new ArrayList<Long>();\n        ArrayList<Long> twentysixes =\
    \ new ArrayList<Long>();\n        ArrayList<Long> twentysevens = new ArrayList<Long>();\n\
    \        Array\n    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxb7tp41y.java:49: error: not a statement\n        Array\n     \
    \   ^\n/tmp/tmpxb7tp41y.java:49: error: ';' expected\n        Array\n        \
    \     ^\n2 errors\n"
  stdout: ''
  timestamp: 1659794688
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> sorted = new ArrayList<Long>();\n\
    \        ArrayList<Long> zeros = new ArrayList<Long>();\n        ArrayList<Long>\
    \ ones = new ArrayList<Long>();\n        ArrayList<Long> twos = new ArrayList<Long>();\n\
    \        ArrayList<Long> threes = new ArrayList<Long>();\n        ArrayList<Long>\
    \ fours = new ArrayList<Long>();\n        ArrayList<Long> fives = new ArrayList<Long>();\n\
    \        ArrayList<Long> sixes = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sevens = new ArrayList<Long>();\n        ArrayList<Long> eights = new ArrayList<Long>();\n\
    \        ArrayList<Long> nines = new ArrayList<Long>();\n        ArrayList<Long>\
    \ tens = new ArrayList<Long>();\n        ArrayList<Long> elevens = new ArrayList<Long>();\n\
    \        ArrayList<Long> twelves = new ArrayList<Long>();\n        ArrayList<Long>\
    \ thirteens = new ArrayList<Long>();\n        ArrayList<Long> fourteens = new\
    \ ArrayList<Long>();\n        ArrayList<Long> fifteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> sixteens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ seventeens = new ArrayList<Long>();\n        ArrayList<Long> eightteens = new\
    \ ArrayList<Long>();\n        ArrayList<Long> nineteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> twenties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ thirtyones = new ArrayList<Long>();\n        ArrayList<Long> thirtytwos = new\
    \ ArrayList<Long>();\n        ArrayList<Long> thirtythrees = new ArrayList<Long>();\n\
    \        ArrayList<Long> thirtyfours = new ArrayList<Long>();\n        ArrayList<Long>\
    \ thirtyfives = new ArrayList<Long>();\n        ArrayList<Long> thirtysixes =\
    \ new ArrayList<Long>();\n        ArrayList<Long> thirtysevens = new ArrayList<Long>();\n\
    \        ArrayList<Long> thirty\n    }\n    public static void main(String[] args)\
    \ {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzdu8wovh.java:49: error: ';' expected\n        ArrayList<Long>\
    \ thirty\n                              ^\n1 error\n"
  stdout: ''
  timestamp: 1659794688
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        ArrayList<Long> positive = new ArrayList<Long>();\n        ArrayList<Long>\
    \ negative = new ArrayList<Long>();\n        for (Long l : arr) {\n          \
    \  if (l < 0) {\n                negative.add(l);\n            } else {\n    \
    \            positive.add(l);\n            }\n        }\n        Collections.sort(positive,\
    \ new Comparator<Long>() {\n            public int compare(Long a, Long b) {\n\
    \                String aBin = Long.toBinaryString(a);\n                String\
    \ bBin = Long.toBinaryString(b);\n                int aOnes = 0;\n           \
    \     int bOnes = 0;\n                for (int i = 0; i < aBin.length(); i++)\
    \ {\n                    if (aBin.charAt(i) == '1') {\n                      \
    \  aOnes++;\n                    }\n                }\n                for (int\
    \ i = 0; i < bBin.length(); i++) {\n                    if (bBin.charAt(i) ==\
    \ '1') {\n                        bOnes++;\n                    }\n          \
    \      }\n                if (aOnes == bOnes) {\n                    return a.compareTo(b);\n\
    \                } else {\n                    return aOnes - bOnes;\n       \
    \         }\n            }\n        });\n        Collections.sort(negative, new\
    \ Comparator<Long>() {\n            public int compare(Long a, Long b) {\n   \
    \             String aBin = Long.toBinaryString(a);\n                String bBin\
    \ = Long.toBinaryString(b);\n                int aOnes = 0;\n                int\
    \ bOnes = 0;\n                for (int i = 0; i < aBin.length(); i++) {\n    \
    \                if (aBin.charAt(i) == '1') {\n                        aOnes++;\n\
    \                    }\n                }\n                for (int i = 0; i <\
    \ bBin.length(); i++) {\n                    if (bBin.charAt(i) == '1') {\n  \
    \                      bOnes++;\n                    }\n                }\n  \
    \              if (aOnes == bOnes\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp46gvwtmx.java:69: error: ')' expected\n                if (aOnes\
    \ == bOnes\n                                  ^\n/tmp/tmp46gvwtmx.java:70: error:\
    \ illegal start of statement\n    }\n    ^\n/tmp/tmp46gvwtmx.java:82: error: reached\
    \ end of file while parsing\n}\n ^\n3 errors\n"
  stdout: ''
  timestamp: 1659794688
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> sorted = new ArrayList<Long>();\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            sorted.add(arr.get(i));\n\
    \        }\n        Collections.sort(sorted, new Comparator<Long>() {\n      \
    \      @Override\n            public int compare(Long a, Long b) {\n         \
    \       String aBin = Long.toBinaryString(a);\n                String bBin = Long.toBinaryString(b);\n\
    \                int aOnes = 0;\n                int bOnes = 0;\n            \
    \    for (int i = 0; i < aBin.length(); i++) {\n                    if (aBin.charAt(i)\
    \ == '1') {\n                        aOnes++;\n                    }\n       \
    \         }\n                for (int i = 0; i < bBin.length(); i++) {\n     \
    \               if (bBin.charAt(i) == '1') {\n                        bOnes++;\n\
    \                    }\n                }\n                if (aOnes == bOnes)\
    \ {\n                    return a.compareTo(b);\n                } else {\n  \
    \                  return aOnes - bOnes;\n                }\n            }\n \
    \       });\n        return sorted;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkhtlhohp.java:52)\n"
  stdout: ''
  timestamp: 1659794682
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        // Your code here\n        return\
    \ arr;\n    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvyxipufw.java:24)\n"
  stdout: ''
  timestamp: 1659794684
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        for (Long i : arr) {\n            result.add(i);\n        }\n       \
    \ Collections.sort(result, new Comparator<Long>() {\n            @Override\n \
    \           public int compare(Long o1, Long o2) {\n                int o1Ones\
    \ = Long.bitCount(o1);\n                int o2Ones = Long.bitCount(o2);\n    \
    \            if (o1Ones == o2Ones) {\n                    return o1.compareTo(o2);\n\
    \                }\n                return o1Ones - o2Ones;\n            }\n \
    \       });\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpb409uk1t.java:39)\n"
  stdout: ''
  timestamp: 1659794689
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            result.add(arr.get(i));\n\
    \        }\n        Collections.sort(result, new Comparator<Long>() {\n      \
    \      @Override\n            public int compare(Long a, Long b) {\n         \
    \       String aBinary = Long.toBinaryString(a);\n                String bBinary\
    \ = Long.toBinaryString(b);\n                int aOnes = 0;\n                int\
    \ bOnes = 0;\n                for (int i = 0; i < aBinary.length(); i++) {\n \
    \                   if (aBinary.charAt(i) == '1') {\n                        aOnes++;\n\
    \                    }\n                }\n                for (int i = 0; i <\
    \ bBinary.length(); i++) {\n                    if (bBinary.charAt(i) == '1')\
    \ {\n                        bOnes++;\n                    }\n               \
    \ }\n                if (aOnes > bOnes) {\n                    return 1;\n   \
    \             } else if (aOnes < bOnes) {\n                    return -1;\n  \
    \              } else {\n                    if (a > b) {\n                  \
    \      return 1;\n                    } else if (a < b) {\n                  \
    \      return -1;\n                    } else {\n                        return\
    \ 0;\n                    }\n                }\n            }\n        });\n \
    \       return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplwz40os4.java:60)\n"
  stdout: ''
  timestamp: 1659794689
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> sorted = new ArrayList<Long>();\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            sorted.add(arr.get(i));\n\
    \        }\n        Collections.sort(sorted, new Comparator<Long>() {\n      \
    \      @Override\n            public int compare(Long l1, Long l2) {\n       \
    \         int ones1 = Long.bitCount(l1);\n                int ones2 = Long.bitCount(l2);\n\
    \                if (ones1 == ones2) {\n                    return l1.compareTo(l2);\n\
    \                } else {\n                    return ones1 - ones2;\n       \
    \         }\n            }\n        });\n        return sorted;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzdee298x.java:40)\n"
  stdout: ''
  timestamp: 1659794689
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        ArrayList<Long> positive = new ArrayList<>();\n        ArrayList<Long>\
    \ negative = new ArrayList<>();\n        for (Long i : arr) {\n            if\
    \ (i >= 0) {\n                positive.add(i);\n            } else {\n       \
    \         negative.add(i);\n            }\n        }\n        Collections.sort(positive,\
    \ new Comparator<Long>() {\n            @Override\n            public int compare(Long\
    \ a, Long b) {\n                String aBinary = Long.toBinaryString(a);\n   \
    \             String bBinary = Long.toBinaryString(b);\n                int aOnes\
    \ = 0;\n                int bOnes = 0;\n                for (int i = 0; i < aBinary.length();\
    \ i++) {\n                    if (aBinary.charAt(i) == '1') {\n              \
    \          aOnes++;\n                    }\n                }\n              \
    \  for (int i = 0; i < bBinary.length(); i++) {\n                    if (bBinary.charAt(i)\
    \ == '1') {\n                        bOnes++;\n                    }\n       \
    \         }\n                if (aOnes == bOnes) {\n                    return\
    \ a.compareTo(b);\n                } else {\n                    return aOnes\
    \ - bOnes;\n                }\n            }\n        });\n        Collections.sort(negative,\
    \ new Comparator<Long>() {\n            @Override\n            public int compare(Long\
    \ a, Long b) {\n                String aBinary = Long.toBinaryString(a);\n   \
    \             String bBinary = Long.toBinaryString(b);\n                int aOnes\
    \ = 0;\n                int bOnes = 0;\n                for (int i = 0; i < aBinary.length();\
    \ i++) {\n                    if (aBinary.charAt(i) == '1') {\n              \
    \          aOnes++;\n                    }\n                }\n              \
    \  for (int i = 0; i < bBinary.length(); i++) {\n                    if (bBinary.charAt(i)\
    \ == '1') {\n                        bOnes++;\n                    }\n       \
    \         }\n                if (aOn\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppsvr3vzl.java:71: error: ')' expected\n                if (aOn\n\
    \                       ^\n/tmp/tmppsvr3vzl.java:72: error: illegal start of statement\n\
    \    }\n    ^\n/tmp/tmppsvr3vzl.java:84: error: reached end of file while parsing\n\
    }\n ^\n3 errors\n"
  stdout: ''
  timestamp: 1659794689
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> sorted = new ArrayList<Long>();\n\
    \        ArrayList<Long> sorted2 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sorted3 = new ArrayList<Long>();\n        ArrayList<Long> sorted4 = new ArrayList<Long>();\n\
    \        ArrayList<Long> sorted5 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sorted6 = new ArrayList<Long>();\n        ArrayList<Long> sorted7 = new ArrayList<Long>();\n\
    \        ArrayList<Long> sorted8 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sorted9 = new ArrayList<Long>();\n        ArrayList<Long> sorted10 = new ArrayList<Long>();\n\
    \        ArrayList<Long> sorted11 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sorted12 = new ArrayList<Long>();\n        ArrayList<Long> sorted13 = new ArrayList<Long>();\n\
    \        ArrayList<Long> sorted14 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sorted15 = new ArrayList<Long>();\n        ArrayList<Long> sorted16 = new ArrayList<Long>();\n\
    \        ArrayList<Long> sorted17 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sorted18 = new ArrayList<Long>();\n        ArrayList<Long> sorted19 = new ArrayList<Long>();\n\
    \        ArrayList<Long> sorted20 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sorted21 = new ArrayList<Long>();\n        ArrayList<Long> sorted22 = new ArrayList<Long>();\n\
    \        ArrayList<Long> sorted23 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sorted24 = new ArrayList<Long>();\n        ArrayList<Long> sorted25 = new ArrayList<Long>();\n\
    \        ArrayList<Long> sorted26 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sorted27 = new ArrayList<Long>();\n        ArrayList<Long> sorted28 = new ArrayList<Long>();\n\
    \        ArrayList<Long> sorted29 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sorted30 = new ArrayList<Long>();\n        Array\n    }\n    public static void\
    \ main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp98g01ly3.java:50: error: not a statement\n        Array\n     \
    \   ^\n/tmp/tmp98g01ly3.java:50: error: ';' expected\n        Array\n        \
    \     ^\n2 errors\n"
  stdout: ''
  timestamp: 1659794687
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        // your code here\n        ArrayList<Long>\
    \ sorted = new ArrayList<Long>();\n        ArrayList<Long> sorted2 = new ArrayList<Long>();\n\
    \        ArrayList<Long> sorted3 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sorted4 = new ArrayList<Long>();\n        ArrayList<Long> sorted5 = new ArrayList<Long>();\n\
    \        ArrayList<Long> sorted6 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sorted7 = new ArrayList<Long>();\n        ArrayList<Long> sorted8 = new ArrayList<Long>();\n\
    \        ArrayList<Long> sorted9 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sorted10 = new ArrayList<Long>();\n        ArrayList<Long> sorted11 = new ArrayList<Long>();\n\
    \        ArrayList<Long> sorted12 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sorted13 = new ArrayList<Long>();\n        ArrayList<Long> sorted14 = new ArrayList<Long>();\n\
    \        ArrayList<Long> sorted15 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sorted16 = new ArrayList<Long>();\n        ArrayList<Long> sorted17 = new ArrayList<Long>();\n\
    \        ArrayList<Long> sorted18 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sorted19 = new ArrayList<Long>();\n        ArrayList<Long> sorted20 = new ArrayList<Long>();\n\
    \        ArrayList<Long> sorted21 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sorted22 = new ArrayList<Long>();\n        ArrayList<Long> sorted23 = new ArrayList<Long>();\n\
    \        ArrayList<Long> sorted24 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sorted25 = new ArrayList<Long>();\n        ArrayList<Long> sorted26 = new ArrayList<Long>();\n\
    \        ArrayList<Long> sorted27 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sorted28 = new ArrayList<Long>();\n        ArrayList<Long> sorted29 = new ArrayList<Long>();\n\
    \        ArrayList<Long> sorted30 = new ArrayList<\n    }\n    public static void\
    \ main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpedczu1vv.java:51: error: illegal start of type\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659794683
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> sorted = new ArrayList<Long>();\n\
    \        ArrayList<Long> zeros = new ArrayList<Long>();\n        ArrayList<Long>\
    \ ones = new ArrayList<Long>();\n        ArrayList<Long> twos = new ArrayList<Long>();\n\
    \        ArrayList<Long> threes = new ArrayList<Long>();\n        ArrayList<Long>\
    \ fours = new ArrayList<Long>();\n        ArrayList<Long> fives = new ArrayList<Long>();\n\
    \        ArrayList<Long> sixes = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sevens = new ArrayList<Long>();\n        ArrayList<Long> eights = new ArrayList<Long>();\n\
    \        ArrayList<Long> nines = new ArrayList<Long>();\n        ArrayList<Long>\
    \ tens = new ArrayList<Long>();\n        ArrayList<Long> elevens = new ArrayList<Long>();\n\
    \        ArrayList<Long> twelves = new ArrayList<Long>();\n        ArrayList<Long>\
    \ thirteens = new ArrayList<Long>();\n        ArrayList<Long> fourteens = new\
    \ ArrayList<Long>();\n        ArrayList<Long> fifteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> sixteens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ seventeens = new ArrayList<Long>();\n        ArrayList<Long> eighteens = new\
    \ ArrayList<Long>();\n        ArrayList<Long> ninteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> twenties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ thirties = new ArrayList<Long>();\n        ArrayList<Long> forties = new ArrayList<Long>();\n\
    \        ArrayList<Long> fifties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sixties = new ArrayList<Long>();\n        ArrayList<Long> seventies = new ArrayList<Long>();\n\
    \        ArrayList<Long> eighties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ nineties = new ArrayList<Long>();\n        ArrayList<Long> hundreds = new Array\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnt38bvb0.java:50: error: '(' or '[' expected\n    }\n    ^\n1 error\n"
  stdout: ''
  timestamp: 1659794683
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> sorted = new ArrayList<Long>();\n\
    \        ArrayList<Long> zeros = new ArrayList<Long>();\n        ArrayList<Long>\
    \ ones = new ArrayList<Long>();\n        ArrayList<Long> twos = new ArrayList<Long>();\n\
    \        ArrayList<Long> threes = new ArrayList<Long>();\n        ArrayList<Long>\
    \ fours = new ArrayList<Long>();\n        ArrayList<Long> fives = new ArrayList<Long>();\n\
    \        ArrayList<Long> sixes = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sevens = new ArrayList<Long>();\n        ArrayList<Long> eights = new ArrayList<Long>();\n\
    \        ArrayList<Long> nines = new ArrayList<Long>();\n        ArrayList<Long>\
    \ tens = new ArrayList<Long>();\n        ArrayList<Long> elevens = new ArrayList<Long>();\n\
    \        ArrayList<Long> twelves = new ArrayList<Long>();\n        ArrayList<Long>\
    \ thirteens = new ArrayList<Long>();\n        ArrayList<Long> fourteens = new\
    \ ArrayList<Long>();\n        ArrayList<Long> fifteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> sixteens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ seventeens = new ArrayList<Long>();\n        ArrayList<Long> eightteens = new\
    \ ArrayList<Long>();\n        ArrayList<Long> nineteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> twenties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ twentyones = new ArrayList<Long>();\n        ArrayList<Long> twentytwos = new\
    \ ArrayList<Long>();\n        ArrayList<Long> twentythrees = new ArrayList<Long>();\n\
    \        ArrayList<Long> twentyfours = new ArrayList<Long>();\n        ArrayList<Long>\
    \ twentyfives = new ArrayList<Long>();\n        ArrayList<Long> twentysixes =\
    \ new ArrayList<Long>();\n        ArrayList<Long> twentysevens = new ArrayList<Long>();\n\
    \        ArrayList<Long>\n    }\n    public static void main(String[] args) {\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpry4huf4s.java:49: error: not a statement\n        ArrayList<Long>\n\
    \                 ^\n/tmp/tmpry4huf4s.java:49: error: ';' expected\n        ArrayList<Long>\n\
    \                       ^\n2 errors\n"
  stdout: ''
  timestamp: 1659794688
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        return new ArrayList<Long>(arr.stream().sorted(Comparator.comparing(Problem::countOnes).thenComparing(Long::longValue)).collect(Collectors.toList()));\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb054no2d.java:20: error: invalid method reference\n        return\
    \ new ArrayList<Long>(arr.stream().sorted(Comparator.comparing(Problem::countOnes).thenComparing(Long::longValue)).collect(Collectors.toList()));\n\
    \                                                                            ^\n\
    \  cannot find symbol\n    symbol:   method countOnes()\n    location: class Problem\n\
    1 error\n"
  stdout: ''
  timestamp: 1659794689
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> sorted = new ArrayList<>();\n\
    \        for (Long i : arr) {\n            sorted.add(i);\n        }\n       \
    \ Collections.sort(sorted, new Comparator<Long>() {\n            @Override\n \
    \           public int compare(Long o1, Long o2) {\n                int o1Ones\
    \ = Long.bitCount(o1);\n                int o2Ones = Long.bitCount(o2);\n    \
    \            if (o1Ones == o2Ones) {\n                    return o1.compareTo(o2);\n\
    \                }\n                return o1Ones - o2Ones;\n            }\n \
    \       });\n        return sorted;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7ewrxrcf.java:39)\n"
  stdout: ''
  timestamp: 1659794690
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> sorted = new ArrayList<Long>();\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            sorted.add(arr.get(i));\n\
    \        }\n        Collections.sort(sorted, new Comparator<Long>() {\n      \
    \      @Override\n            public int compare(Long a, Long b) {\n         \
    \       int aOnes = Long.bitCount(a);\n                int bOnes = Long.bitCount(b);\n\
    \                if (aOnes == bOnes) {\n                    return a.compareTo(b);\n\
    \                } else {\n                    return aOnes - bOnes;\n       \
    \         }\n            }\n        });\n        return sorted;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkj41nbxz.java:40)\n"
  stdout: ''
  timestamp: 1659794685
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> sorted = new ArrayList<>();\n\
    \        ArrayList<Long> zeros = new ArrayList<>();\n        ArrayList<Long> ones\
    \ = new ArrayList<>();\n        for (Long l : arr) {\n            if (Long.bitCount(l)\
    \ == 0) {\n                zeros.add(l);\n            } else {\n             \
    \   ones.add(l);\n            }\n        }\n        Collections.sort(zeros);\n\
    \        Collections.sort(ones);\n        sorted.addAll(zeros);\n        sorted.addAll(ones);\n\
    \        return sorted;\n    }\n    public static void main(String[] args) {\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxk4r86dm.java:37)\n"
  stdout: ''
  timestamp: 1659794690
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        Collections.sort(arr, new Comparator<Long>()\
    \ {\n            @Override\n            public int compare(Long a, Long b) {\n\
    \                int aOnes = Long.bitCount(a);\n                int bOnes = Long.bitCount(b);\n\
    \                if (aOnes == bOnes) {\n                    return a.compareTo(b);\n\
    \                }\n                return aOnes - bOnes;\n            }\n   \
    \     });\n        return arr;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpuxv4mu_o.java:35)\n"
  stdout: ''
  timestamp: 1659794690
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> sorted = new ArrayList<Long>();\n\
    \        for (Long i : arr) {\n            sorted.add(i);\n        }\n       \
    \ Collections.sort(sorted, new Comparator<Long>() {\n            @Override\n \
    \           public int compare(Long o1, Long o2) {\n                String s1\
    \ = Long.toBinaryString(o1);\n                String s2 = Long.toBinaryString(o2);\n\
    \                int ones1 = 0;\n                int ones2 = 0;\n            \
    \    for (int i = 0; i < s1.length(); i++) {\n                    if (s1.charAt(i)\
    \ == '1') {\n                        ones1++;\n                    }\n       \
    \         }\n                for (int i = 0; i < s2.length(); i++) {\n       \
    \             if (s2.charAt(i) == '1') {\n                        ones2++;\n \
    \                   }\n                }\n                if (ones1 == ones2)\
    \ {\n                    return o1.compareTo(o2);\n                } else {\n\
    \                    return ones1 - ones2;\n                }\n            }\n\
    \        });\n        return sorted;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpymy8le2l.java:52)\n"
  stdout: ''
  timestamp: 1659794690
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> sorted = new ArrayList<Long>();\n\
    \        ArrayList<Long> zeros = new ArrayList<Long>();\n        ArrayList<Long>\
    \ ones = new ArrayList<Long>();\n        ArrayList<Long> twos = new ArrayList<Long>();\n\
    \        ArrayList<Long> threes = new ArrayList<Long>();\n        ArrayList<Long>\
    \ fours = new ArrayList<Long>();\n        ArrayList<Long> fives = new ArrayList<Long>();\n\
    \        ArrayList<Long> sixes = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sevens = new ArrayList<Long>();\n        ArrayList<Long> eights = new ArrayList<Long>();\n\
    \        ArrayList<Long> nines = new ArrayList<Long>();\n        ArrayList<Long>\
    \ tens = new ArrayList<Long>();\n        ArrayList<Long> elevens = new ArrayList<Long>();\n\
    \        ArrayList<Long> twelves = new ArrayList<Long>();\n        ArrayList<Long>\
    \ thirteens = new ArrayList<Long>();\n        ArrayList<Long> fourteens = new\
    \ ArrayList<Long>();\n        ArrayList<Long> fifteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> sixteens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ seventeens = new ArrayList<Long>();\n        ArrayList<Long> eightteens = new\
    \ ArrayList<Long>();\n        ArrayList<Long> nineteens = new ArrayList<Long>();\n\
    \        ArrayList<Long> twenties = new ArrayList<Long>();\n        ArrayList<Long>\
    \ thirtys = new ArrayList<Long>();\n        ArrayList<Long> fourtys = new ArrayList<Long>();\n\
    \        ArrayList<Long> fiftys = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sixtys = new ArrayList<Long>();\n        ArrayList<Long> seventys = new ArrayList<Long>();\n\
    \        ArrayList<Long> eighty = new ArrayList<Long>();\n        ArrayList<Long>\
    \ ninety = new ArrayList<Long>();\n        ArrayList<Long> hundred = new ArrayList<Long>\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptroj48ge.java:50: error: '(' or '[' expected\n    }\n    ^\n1 error\n"
  stdout: ''
  timestamp: 1659794689
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        ArrayList<Long> zeros = new ArrayList<>();\n        ArrayList<Long> ones\
    \ = new ArrayList<>();\n        ArrayList<Long> twos = new ArrayList<>();\n  \
    \      ArrayList<Long> threes = new ArrayList<>();\n        ArrayList<Long> fours\
    \ = new ArrayList<>();\n        ArrayList<Long> fives = new ArrayList<>();\n \
    \       ArrayList<Long> sixes = new ArrayList<>();\n        ArrayList<Long> sevens\
    \ = new ArrayList<>();\n        ArrayList<Long> eights = new ArrayList<>();\n\
    \        ArrayList<Long> nines = new ArrayList<>();\n        ArrayList<Long> tens\
    \ = new ArrayList<>();\n        ArrayList<Long> elevens = new ArrayList<>();\n\
    \        ArrayList<Long> twelves = new ArrayList<>();\n        ArrayList<Long>\
    \ thirteens = new ArrayList<>();\n        ArrayList<Long> fourteens = new ArrayList<>();\n\
    \        ArrayList<Long> fifteens = new ArrayList<>();\n        ArrayList<Long>\
    \ sixteens = new ArrayList<>();\n        ArrayList<Long> seventeens = new ArrayList<>();\n\
    \        ArrayList<Long> eighteens = new ArrayList<>();\n        ArrayList<Long>\
    \ ninteens = new ArrayList<>();\n        ArrayList<Long> twenties = new ArrayList<>();\n\
    \        ArrayList<Long> twentyones = new ArrayList<>();\n        ArrayList<Long>\
    \ twentytwos = new ArrayList<>();\n        ArrayList<Long> twentythrees = new\
    \ ArrayList<>();\n        ArrayList<Long> twentyfours = new ArrayList<>();\n \
    \       ArrayList<Long> twentyfives = new ArrayList<>();\n        ArrayList<Long>\
    \ twentysixes = new ArrayList<>();\n        ArrayList<Long> twentysevens = new\
    \ ArrayList<>();\n        ArrayList<Long> twentyeights = new ArrayList<>();\n\
    \        ArrayList<Long> twentynines = new ArrayList<>();\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp58957wxt.java:52: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659794689
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        return new ArrayList<Long>(arr.stream().sorted(\n\
    \            (a, b) -> {\n                int aOnes = Long.bitCount(a);\n    \
    \            int bOnes = Long.bitCount(b);\n                if (aOnes == bOnes)\
    \ {\n                    return a.compareTo(b);\n                } else {\n  \
    \                  return aOnes - bOnes;\n                }\n            }\n \
    \       ).collect(Collectors.toList()));\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3kt8xogw.java:34)\n"
  stdout: ''
  timestamp: 1659794690
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        ArrayList<Long> temp = new ArrayList<Long>();\n        ArrayList<Long>\
    \ temp2 = new ArrayList<Long>();\n        ArrayList<Long> temp3 = new ArrayList<Long>();\n\
    \        ArrayList<Long> temp4 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ temp5 = new ArrayList<Long>();\n        ArrayList<Long> temp6 = new ArrayList<Long>();\n\
    \        ArrayList<Long> temp7 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ temp8 = new ArrayList<Long>();\n        ArrayList<Long> temp9 = new ArrayList<Long>();\n\
    \        ArrayList<Long> temp10 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ temp11 = new ArrayList<Long>();\n        ArrayList<Long> temp12 = new ArrayList<Long>();\n\
    \        ArrayList<Long> temp13 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ temp14 = new ArrayList<Long>();\n        ArrayList<Long> temp15 = new ArrayList<Long>();\n\
    \        ArrayList<Long> temp16 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ temp17 = new ArrayList<Long>();\n        ArrayList<Long> temp18 = new ArrayList<Long>();\n\
    \        ArrayList<Long> temp19 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ temp20 = new ArrayList<Long>();\n        ArrayList<Long> temp21 = new ArrayList<Long>();\n\
    \        ArrayList<Long> temp22 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ temp23 = new ArrayList<Long>();\n        ArrayList<Long> temp24 = new ArrayList<Long>();\n\
    \        ArrayList<Long> temp25 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ temp26 = new ArrayList<Long>();\n        ArrayList<Long> temp27 = new ArrayList<Long>();\n\
    \        ArrayList<Long> temp28 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ temp29 = new ArrayList<Long>();\n        ArrayList\n    }\n    public static\
    \ void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbw663tyt.java:50: error: not a statement\n        ArrayList\n \
    \       ^\n/tmp/tmpbw663tyt.java:50: error: ';' expected\n        ArrayList\n\
    \                 ^\n2 errors\n"
  stdout: ''
  timestamp: 1659794681
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        ArrayList<Long> sorted = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sorted2 = new ArrayList<Long>();\n        ArrayList<Long> sorted3 = new ArrayList<Long>();\n\
    \        ArrayList<Long> sorted4 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sorted5 = new ArrayList<Long>();\n        ArrayList<Long> sorted6 = new ArrayList<Long>();\n\
    \        ArrayList<Long> sorted7 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sorted8 = new ArrayList<Long>();\n        ArrayList<Long> sorted9 = new ArrayList<Long>();\n\
    \        ArrayList<Long> sorted10 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sorted11 = new ArrayList<Long>();\n        ArrayList<Long> sorted12 = new ArrayList<Long>();\n\
    \        ArrayList<Long> sorted13 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sorted14 = new ArrayList<Long>();\n        ArrayList<Long> sorted15 = new ArrayList<Long>();\n\
    \        ArrayList<Long> sorted16 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sorted17 = new ArrayList<Long>();\n        ArrayList<Long> sorted18 = new ArrayList<Long>();\n\
    \        ArrayList<Long> sorted19 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sorted20 = new ArrayList<Long>();\n        ArrayList<Long> sorted21 = new ArrayList<Long>();\n\
    \        ArrayList<Long> sorted22 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sorted23 = new ArrayList<Long>();\n        ArrayList<Long> sorted24 = new ArrayList<Long>();\n\
    \        ArrayList<Long> sorted25 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sorted26 = new ArrayList<Long>();\n        ArrayList<Long> sorted27 = new ArrayList<Long>();\n\
    \        ArrayList<Long> sorted28 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sorted29 = new ArrayList<Long>();\n        ArrayList\n    }\n    public static\
    \ void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqupk5tsv.java:50: error: not a statement\n        ArrayList\n \
    \       ^\n/tmp/tmpqupk5tsv.java:50: error: ';' expected\n        ArrayList\n\
    \                 ^\n2 errors\n"
  stdout: ''
  timestamp: 1659794687
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> sorted = new ArrayList<Long>();\n\
    \        for (Long l : arr) {\n            sorted.add(l);\n        }\n       \
    \ Collections.sort(sorted, new Comparator<Long>() {\n            @Override\n \
    \           public int compare(Long l1, Long l2) {\n                String s1\
    \ = Long.toBinaryString(l1);\n                String s2 = Long.toBinaryString(l2);\n\
    \                int ones1 = 0;\n                int ones2 = 0;\n            \
    \    for (int i = 0; i < s1.length(); i++) {\n                    if (s1.charAt(i)\
    \ == '1') {\n                        ones1++;\n                    }\n       \
    \         }\n                for (int i = 0; i < s2.length(); i++) {\n       \
    \             if (s2.charAt(i) == '1') {\n                        ones2++;\n \
    \                   }\n                }\n                if (ones1 < ones2) {\n\
    \                    return -1;\n                } else if (ones1 > ones2) {\n\
    \                    return 1;\n                } else {\n                   \
    \ return l1.compareTo(l2);\n                }\n            }\n        });\n  \
    \      return sorted;\n    }\n    public static void main(String[] args) {\n \
    \   assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpj_sua_wz.java:54)\n"
  stdout: ''
  timestamp: 1659794690
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> sorted = new ArrayList<Long>();\n\
    \        for (Long i : arr) {\n            sorted.add(i);\n        }\n       \
    \ Collections.sort(sorted, new Comparator<Long>() {\n            @Override\n \
    \           public int compare(Long a, Long b) {\n                String aBin\
    \ = Long.toBinaryString(a);\n                String bBin = Long.toBinaryString(b);\n\
    \                int aOnes = 0;\n                int bOnes = 0;\n            \
    \    for (int i = 0; i < aBin.length(); i++) {\n                    if (aBin.charAt(i)\
    \ == '1') {\n                        aOnes++;\n                    }\n       \
    \         }\n                for (int i = 0; i < bBin.length(); i++) {\n     \
    \               if (bBin.charAt(i) == '1') {\n                        bOnes++;\n\
    \                    }\n                }\n                if (aOnes > bOnes)\
    \ {\n                    return 1;\n                } else if (aOnes < bOnes)\
    \ {\n                    return -1;\n                } else {\n              \
    \      return a.compareTo(b);\n                }\n            }\n        });\n\
    \        return sorted;\n    }\n    public static void main(String[] args) {\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnl4enhb4.java:54)\n"
  stdout: ''
  timestamp: 1659794690
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> sorted = new ArrayList<>();\n\
    \        ArrayList<Long> ones = new ArrayList<>();\n        ArrayList<Long> zeros\
    \ = new ArrayList<>();\n        for (Long l : arr) {\n            if (Long.bitCount(l)\
    \ == 0) {\n                zeros.add(l);\n            } else {\n             \
    \   ones.add(l);\n            }\n        }\n        Collections.sort(ones);\n\
    \        Collections.sort(zeros);\n        sorted.addAll(ones);\n        sorted.addAll(zeros);\n\
    \        return sorted;\n    }\n    public static void main(String[] args) {\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplbd_bmij.java:37)\n"
  stdout: ''
  timestamp: 1659794690
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> sorted = new ArrayList<Long>();\n\
    \        ArrayList<Long> sortedByOnes = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sortedByDecimal = new ArrayList<Long>();\n        ArrayList<Long> sortedByOnesAndDecimal\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByOnesAndDecimalAndNegative\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByOnesAndDecimalAndNegativeAndZero\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByOnesAndDecimalAndNegativeAndZeroAndPositive\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByOnesAndDecimalAndNegativeAndZeroAndPositiveAndZero\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByOnesAndDecimalAndNegativeAndZeroAndPositiveAndZeroAndPositive\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByOnesAndDecimalAndNegativeAndZeroAndPositiveAndZeroAndPositiveAndZero\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByOnesAndDecimalAndNegativeAndZeroAndPositiveAndZeroAndPositiveAndZeroAndPositive\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByOnesAndDecimalAndNegativeAndZeroAndPositiveAndZeroAndPositiveAndZeroAndPositiveAndZero\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByOnesAndDecimalAndNegativeAndZeroAndPositiveAndZeroAndPositiveAndZeroAndPositiveAndZeroAndPositive\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByOnesAndDecimalAndNegativeAndZeroAndPositiveAndZeroAndPositiveAndZeroAndPositiveAndZeroAndPositiveAndZero\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByOnesAndDecimalAndNegativeAndZeroAndPositiveAndZeroAndPositiveAndZeroAndPositiveAndZeroAndPositiveAndZeroAndPositive\
    \ = new ArrayList<Long>();\n        ArrayList<Long> sortedByOnesAndDecimalAndNegativeAndZeroAndPositiveAndZeroAndPos\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppogn2b49.java:35: error: ';' expected\n        ArrayList<Long>\
    \ sortedByOnesAndDecimalAndNegativeAndZeroAndPositiveAndZeroAndPos\n         \
    \                                                                            \
    \   ^\n1 error\n"
  stdout: ''
  timestamp: 1659794688
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        // your code here\n        ArrayList<Long>\
    \ sorted = new ArrayList<Long>();\n        ArrayList<Long> sorted2 = new ArrayList<Long>();\n\
    \        ArrayList<Long> sorted3 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sorted4 = new ArrayList<Long>();\n        ArrayList<Long> sorted5 = new ArrayList<Long>();\n\
    \        ArrayList<Long> sorted6 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sorted7 = new ArrayList<Long>();\n        ArrayList<Long> sorted8 = new ArrayList<Long>();\n\
    \        ArrayList<Long> sorted9 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sorted10 = new ArrayList<Long>();\n        ArrayList<Long> sorted11 = new ArrayList<Long>();\n\
    \        ArrayList<Long> sorted12 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sorted13 = new ArrayList<Long>();\n        ArrayList<Long> sorted14 = new ArrayList<Long>();\n\
    \        ArrayList<Long> sorted15 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sorted16 = new ArrayList<Long>();\n        ArrayList<Long> sorted17 = new ArrayList<Long>();\n\
    \        ArrayList<Long> sorted18 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sorted19 = new ArrayList<Long>();\n        ArrayList<Long> sorted20 = new ArrayList<Long>();\n\
    \        ArrayList<Long> sorted21 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sorted22 = new ArrayList<Long>();\n        ArrayList<Long> sorted23 = new ArrayList<Long>();\n\
    \        ArrayList<Long> sorted24 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sorted25 = new ArrayList<Long>();\n        ArrayList<Long> sorted26 = new ArrayList<Long>();\n\
    \        ArrayList<Long> sorted27 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ sorted28 = new ArrayList<Long>();\n        ArrayList<Long> sorted29 = new ArrayList<Long>();\n\
    \        ArrayList<Long> sorted30 = new ArrayList<\n    }\n    public static void\
    \ main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpedczu1vv.java:51: error: illegal start of type\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659794683
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> sorted = new ArrayList<Long>();\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            sorted.add(arr.get(i));\n\
    \        }\n        Collections.sort(sorted, new Comparator<Long>() {\n      \
    \      @Override\n            public int compare(Long a, Long b) {\n         \
    \       String aBin = Long.toBinaryString(a);\n                String bBin = Long.toBinaryString(b);\n\
    \                int aOnes = 0;\n                int bOnes = 0;\n            \
    \    for (int i = 0; i < aBin.length(); i++) {\n                    if (aBin.charAt(i)\
    \ == '1') {\n                        aOnes++;\n                    }\n       \
    \         }\n                for (int i = 0; i < bBin.length(); i++) {\n     \
    \               if (bBin.charAt(i) == '1') {\n                        bOnes++;\n\
    \                    }\n                }\n                if (aOnes == bOnes)\
    \ {\n                    return a.compareTo(b);\n                } else {\n  \
    \                  return aOnes - bOnes;\n                }\n            }\n \
    \       });\n        return sorted;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkhtlhohp.java:52)\n"
  stdout: ''
  timestamp: 1659794682
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> sorted = new ArrayList<Long>();\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            sorted.add(arr.get(i));\n\
    \        }\n        Collections.sort(sorted, new Comparator<Long>() {\n      \
    \      @Override\n            public int compare(Long a, Long b) {\n         \
    \       String aBin = Long.toBinaryString(a);\n                String bBin = Long.toBinaryString(b);\n\
    \                int aOnes = 0;\n                int bOnes = 0;\n            \
    \    for (int i = 0; i < aBin.length(); i++) {\n                    if (aBin.charAt(i)\
    \ == '1') {\n                        aOnes++;\n                    }\n       \
    \         }\n                for (int i = 0; i < bBin.length(); i++) {\n     \
    \               if (bBin.charAt(i) == '1') {\n                        bOnes++;\n\
    \                    }\n                }\n                if (aOnes > bOnes)\
    \ {\n                    return 1;\n                } else if (aOnes < bOnes)\
    \ {\n                    return -1;\n                } else {\n              \
    \      if (a > b) {\n                        return 1;\n                    }\
    \ else if (a < b) {\n                        return -1;\n                    }\
    \ else {\n                        return 0;\n                    }\n         \
    \       }\n            }\n        });\n        return sorted;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6_yrx704.java:60)\n"
  stdout: ''
  timestamp: 1659794690
