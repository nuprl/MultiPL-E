name: HumanEval_117_select_words
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // Given a string s and a natural number n, you have been tasked\
  \ to implement \n    // a function that returns an array array list of all words\
  \ from string s that contain exactly \n    // n consonants, in order these words\
  \ appear in the string s.\n    // If the string s is empty then the function should\
  \ return an empty array list.\n    // Note: you may assume the input string contains\
  \ only letters and spaces.\n    // Examples:\n    // >>> selectWords((\"Mary had\
  \ a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
  little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
  \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n \
  \   // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
  \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
  world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
  Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n) {\n"
tests: "    }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
  Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
  little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
  \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n   \
  \ assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
  \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
  world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
  Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
  \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
  b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
completions: ["        ArrayList<String> result = new ArrayList<String>();\n     \
    \   String[] words = s.split(\" \");\n        for (String word : words) {\n  \
    \          if (countConsonants(word) == n) {\n                result.add(word);\n\
    \            }\n        }\n        return result;", "        ArrayList<String>\
    \ result = new ArrayList<String>();\n        String[] words = s.split(\" \");\n\
    \        for (String word : words) {\n            if (countConsonants(word) ==\
    \ n) {\n                result.add(word);\n            }\n        }\n        return\
    \ result;", "        ArrayList<String> result = new ArrayList<String>();\n   \
    \     String[] words = s.split(\" \");\n        for (String word : words) {\n\
    \            if (countConsonants(word) == n) {\n                result.add(word);\n\
    \            }\n        }\n        return result;", "        ArrayList<String>\
    \ words = new ArrayList<String>();\n        for (String word : s.split(\" \"))\
    \ {\n            if (countConsonants(word) == n) {\n                words.add(word);\n\
    \            }\n        }\n        return words;", "        ArrayList<String>\
    \ result = new ArrayList<String>();\n        String[] words = s.split(\" \");\n\
    \        for (String word : words) {\n            if (countConsonants(word) ==\
    \ n) {\n                result.add(word);\n            }\n        }\n        return\
    \ result;", "        ArrayList<String> result = new ArrayList<String>();\n   \
    \     String[] words = s.split(\" \");\n        for (String word : words) {\n\
    \            if (countConsonants(word) == n) {\n                result.add(word);\n\
    \            }\n        }\n        return result;", "        ArrayList<String>\
    \ result = new ArrayList<String>();\n        String[] words = s.split(\" \");\n\
    \        for (String word : words) {\n            if (consonants(word) == n) {\n\
    \                result.add(word);\n            }\n        }\n        return result;",
  "        ArrayList<String> result = new ArrayList<String>();\n        String[] words\
    \ = s.split(\" \");\n        for (String word : words) {\n            if (countConsonants(word)\
    \ == n) {\n                result.add(word);\n            }\n        }\n     \
    \   return result;", "        ArrayList<String> result = new ArrayList<String>();\n\
    \        String[] words = s.split(\" \");\n        for (String word : words) {\n\
    \            if (countConsonants(word) == n) {\n                result.add(word);\n\
    \            }\n        }\n        return result;", "        ArrayList<String>\
    \ result = new ArrayList<String>();\n        String[] words = s.split(\" \");\n\
    \        for (String word : words) {\n            if (countConsonants(word) ==\
    \ n) {\n                result.add(word);\n            }\n        }\n        return\
    \ result;", "        ArrayList<String> result = new ArrayList<String>();\n   \
    \     String[] words = s.split(\" \");\n        for (String word : words) {\n\
    \            if (countConsonants(word) == n) {\n                result.add(word);\n\
    \            }\n        }\n        return result;", "        ArrayList<String>\
    \ result = new ArrayList<String>();\n        String[] words = s.split(\" \");\n\
    \        for (String word : words) {\n            if (countConsonants(word) ==\
    \ n) {\n                result.add(word);\n            }\n        }\n        return\
    \ result;", "        ArrayList<String> result = new ArrayList<String>();\n   \
    \     String[] words = s.split(\" \");\n        for (String word : words) {\n\
    \            if (countConsonants(word) == n) {\n                result.add(word);\n\
    \            }\n        }\n        return result;", "        ArrayList<String>\
    \ result = new ArrayList<String>();\n        String[] words = s.split(\" \");\n\
    \        for (String word : words) {\n            if (countConsonants(word) ==\
    \ n) {\n                result.add(word);\n            }\n        }\n        return\
    \ result;", "        ArrayList<String> result = new ArrayList<String>();\n   \
    \     String[] words = s.split(\" \");\n        for (String word : words) {\n\
    \            if (countConsonants(word) == n) {\n                result.add(word);\n\
    \            }\n        }\n        return result;", "        ArrayList<String>\
    \ result = new ArrayList<String>();\n        String[] words = s.split(\" \");\n\
    \        for (String word : words) {\n            if (countConsonants(word) ==\
    \ n) {\n                result.add(word);\n            }\n        }\n        return\
    \ result;", "        ArrayList<String> res = new ArrayList<String>();\n      \
    \  String[] words = s.split(\" \");\n        for (String word : words) {\n   \
    \         if (countConsonants(word) == n) {\n                res.add(word);\n\
    \            }\n        }\n        return res;", "        ArrayList<String> result\
    \ = new ArrayList<String>();\n        String[] words = s.split(\" \");\n     \
    \   for (String word : words) {\n            if (countConsonants(word) == n) {\n\
    \                result.add(word);\n            }\n        }\n        return result;",
  "        ArrayList<String> result = new ArrayList<String>();\n        String[] words\
    \ = s.split(\" \");\n        for (String word : words) {\n            if (countConsonants(word)\
    \ == n) {\n                result.add(word);\n            }\n        }\n     \
    \   return result;", "        ArrayList<String> result = new ArrayList<String>();\n\
    \        String[] words = s.split(\" \");\n        for (String word : words) {\n\
    \            if (word.length() == n) {\n                result.add(word);\n  \
    \          }\n        }\n        return result;"]
stop_tokens:
- "\n    }\n"
