name: HumanEval_20_find_closest_elements
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // From a supplied array list of numbers (of length at least\
  \ two) select and return two that are the closest to each\n    // other and return\
  \ them in order (smaller number, larger number).\n    // >>> findClosestElements((new\
  \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
  \ (float)5.0f, (float)2.2f))))\n    // (Pair.with(2.0f, 2.2f))\n    // >>> findClosestElements((new\
  \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
  \ (float)5.0f, (float)2.0f))))\n    // (Pair.with(2.0f, 2.0f))\n    public static\
  \ Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n"
tests: "    }\n    public static void main(String[] args) {\n    assert(findClosestElements((new\
  \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.9f, (float)4.0f,\
  \ (float)5.0f, (float)2.2f)))).equals((Pair.with(3.9f, 4.0f))));\n    assert(findClosestElements((new\
  \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)5.9f, (float)4.0f,\
  \ (float)5.0f)))).equals((Pair.with(5.0f, 5.9f))));\n    assert(findClosestElements((new\
  \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
  \ (float)5.0f, (float)2.2f)))).equals((Pair.with(2.0f, 2.2f))));\n    assert(findClosestElements((new\
  \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
  \ (float)5.0f, (float)2.0f)))).equals((Pair.with(2.0f, 2.0f))));\n    assert(findClosestElements((new\
  \ ArrayList<Float>(Arrays.asList((float)1.1f, (float)2.2f, (float)3.1f, (float)4.1f,\
  \ (float)5.1f)))).equals((Pair.with(2.2f, 3.1f))));\n    }\n\n}\n"
completions: ["        // Your code goes here\n        return null;", "        float\
    \ min = Float.MAX_VALUE;\n        float min1 = 0;\n        float min2 = 0;\n \
    \       for (int i = 0; i < numbers.size() - 1; i++) {\n            for (int j\
    \ = i + 1; j < numbers.size(); j++) {\n                float diff = Math.abs(numbers.get(i)\
    \ - numbers.get(j));\n                if (diff < min) {\n                    min\
    \ = diff;\n                    min1 = numbers.get(i);\n                    min2\
    \ = numbers.get(j);\n                }\n            }\n        }\n        return\
    \ Pair.with(min1, min2);", "        // >>> YOUR CODE HERE <<<\n        return\
    \ null;", "        // Your code goes here\n        return null;", "        //\
    \ Your code here\n        return null;", "        // >>> findClosestElements((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f, (float)2.2f))))\n        // (Pair.with(2.0f, 2.2f))\n        //\
    \ >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))))\n        // (Pair.with(2.0f,\
    \ 2.0f))\n        // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))))\n      \
    \  // (Pair.with(2.0f, 2.0f))\n        // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))))\n      \
    \  // (Pair.with(2.0f, 2.0f))\n        // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))))\n      \
    \  // (Pair.with(2.0f, 2.0f))\n        // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.", "        //\
    \ Your code goes here.\n        return null;", "        // >>> YOUR CODE HERE\
    \ <<<\n        return null;", "        // Your code here\n        return null;",
  "        // Your code here\n        return null;", '        return null;', "   \
    \     Float minDiff = Float.MAX_VALUE;\n        Pair<Float, Float> closest = null;\n\
    \        for (int i = 0; i < numbers.size() - 1; i++) {\n            Float diff\
    \ = Math.abs(numbers.get(i) - numbers.get(i + 1));\n            if (diff < minDiff)\
    \ {\n                minDiff = diff;\n                closest = Pair.with(numbers.get(i),\
    \ numbers.get(i + 1));\n            }\n        }\n        return closest;", " \
    \       // >>> YOUR CODE HERE <<<\n        return null;", "        // >>> YOUR\
    \ CODE HERE <<<\n        return null;", "        // IMPLEMENT\n        return\
    \ null;", "        // Your code here\n        return null;", '        return null;',
  "        // Your code here\n        return null;", '        return null;', "   \
    \     float min = Float.MAX_VALUE;\n        Pair<Float, Float> minPair = null;\n\
    \        for (int i = 0; i < numbers.size() - 1; i++) {\n            for (int\
    \ j = i + 1; j < numbers.size(); j++) {\n                float diff = Math.abs(numbers.get(i)\
    \ - numbers.get(j));\n                if (diff < min) {\n                    min\
    \ = diff;\n                    minPair = Pair.with(numbers.get(i), numbers.get(j));\n\
    \                }\n            }\n        }\n        return minPair;"]
stop_tokens:
- "\n    }\n"
