name: HumanEval_139_special_factorial
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
  \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n \
  \   // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
  \ an integer as input and should return the special\n    // factorial of this integer.\n\
  \    public static long specialFactorial(long n) {\n"
tests: "    }\n    public static void main(String[] args) {\n    assert(specialFactorial((4l))\
  \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
  \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n"
completions: ["        if (n == 0) {\n            return 1;\n        }\n        long\
    \ ret = 1;\n        for (long i = 1; i <= n; i++) {\n            ret *= i;\n \
    \       }\n        return ret;", "        if (n == 0) {\n            return 1;\n\
    \        }\n        long result = 1;\n        for (long i = n; i > 0; i--) {\n\
    \            result *= i;\n        }\n        return result;", "        // Write\
    \ your code here\n        // To print results to the standard output you can use\
    \ System.out.println()\n        // Example: System.out.println(\"Hello world!\"\
    );\n        long result = 1;\n        for (long i = n; i > 0; i--) {\n       \
    \     result *= i;\n        }\n        return result;", "        long result =\
    \ 1;\n        for (long i = n; i > 0; i--) {\n            result *= factorial(i);\n\
    \        }\n        return result;", "        long result = 1;\n        for (long\
    \ i = n; i > 0; i--) {\n            result *= factorial(i);\n        }\n     \
    \   return result;", "        long result = 1;\n        for (long i = n; i > 0;\
    \ i--) {\n            result *= factorial(i);\n        }\n        return result;",
  "        if (n == 0) return 1;\n        long result = 1;\n        for (long i =\
    \ n; i > 0; i--) {\n            result *= i;\n        }\n        return result;",
  "        long result = 1;\n        for (long i = n; i > 0; i--) {\n            result\
    \ *= factorial(i);\n        }\n        return result;", "        long result =\
    \ 1;\n        for (long i = n; i > 0; i--) {\n            result *= factorial(i);\n\
    \        }\n        return result;", "        if (n == 0) {\n            return\
    \ 1;\n        }\n        long result = n;\n        for (long i = n - 1; i > 0;\
    \ i--) {\n            result *= i;\n        }\n        return result;", "    \
    \    long result = 1;\n        for (long i = n; i > 0; i--) {\n            result\
    \ *= factorial(i);\n        }\n        return result;", "        long result =\
    \ 1;\n        for (long i = n; i > 0; i--) {\n            result *= factorial(i);\n\
    \        }\n        return result;", "        long result = 1;\n        for (long\
    \ i = n; i > 0; i--) {\n            result *= factorial(i);\n        }\n     \
    \   return result;", "        long result = 1;\n        for (long i = n; i > 0;\
    \ i--) {\n            result *= factorial(i);\n        }\n        return result;",
  "        if (n == 0) {\n            return 1;\n        }\n        long result =\
    \ n;\n        for (long i = n - 1; i > 0; i--) {\n            result *= i;\n \
    \       }\n        return result;", "        if (n == 0) {\n            return\
    \ 1;\n        }\n        long result = 1;\n        for (long i = n; i > 0; i--)\
    \ {\n            result *= i;\n        }\n        return result;", "        long\
    \ result = 1;\n        for (long i = n; i > 0; i--) {\n            result *= factorial(i);\n\
    \        }\n        return result;", "        if (n == 0) {\n            return\
    \ 1;\n        }\n        long result = n;\n        for (long i = n - 1; i > 0;\
    \ i--) {\n            result *= i;\n        }\n        return result;", "    \
    \    long result = 1;\n        for (long i = n; i > 0; i--) {\n            result\
    \ *= factorial(i);\n        }\n        return result;", "        if (n == 0) return\
    \ 1;\n        return n * specialFactorial(n - 1);"]
stop_tokens:
- "\n    }\n"
