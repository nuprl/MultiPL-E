language: java
name: HumanEval_1_separate_paren_groups
results:
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the array list of those.\n    // Separate groups\
    \ are balanced (each open brace is properly closed) and not nested within each\
    \ other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"\
    ( ) (( )) (( )( ))\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                count--;\n\
    \            }\n            if (count == 0) {\n                end = i;\n    \
    \            result.add(paren_string.substring(start, end + 1));\n           \
    \     start = end + 1;\n            }\n        }\n        return result;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfz3yjplm.java:35)\n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the array list of those.\n    // Separate groups\
    \ are balanced (each open brace is properly closed) and not nested within each\
    \ other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"\
    ( ) (( )) (( )( ))\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> parenGroups\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                if (count\
    \ == 0) {\n                    start = i;\n                }\n               \
    \ count++;\n            } else if (paren_string.charAt(i) == ')') {\n        \
    \        count--;\n                if (count == 0) {\n                    end\
    \ = i;\n                    parenGroups.add(paren_string.substring(start, end\
    \ + 1));\n                }\n            }\n        }\n        return parenGroups;\n\
    \    }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpm9mpoj2m.java:40)\n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the array list of those.\n    // Separate groups\
    \ are balanced (each open brace is properly closed) and not nested within each\
    \ other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"\
    ( ) (( )) (( )( ))\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                if (count\
    \ == 0) {\n                    start = i;\n                }\n               \
    \ count++;\n            } else if (paren_string.charAt(i) == ')') {\n        \
    \        count--;\n                if (count == 0) {\n                    end\
    \ = i;\n                    result.add(paren_string.substring(start, end + 1));\n\
    \                }\n            }\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkrj0003n.java:40)\n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the array list of those.\n    // Separate groups\
    \ are balanced (each open brace is properly closed) and not nested within each\
    \ other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"\
    ( ) (( )) (( )( ))\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                count--;\n\
    \            }\n            if (count == 0) {\n                end = i;\n    \
    \            result.add(paren_string.substring(start, end + 1));\n           \
    \     start = end + 1;\n            }\n        }\n        return result;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfz3yjplm.java:35)\n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the array list of those.\n    // Separate groups\
    \ are balanced (each open brace is properly closed) and not nested within each\
    \ other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"\
    ( ) (( )) (( )( ))\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                count--;\n\
    \            }\n            if (count == 0) {\n                end = i;\n    \
    \            result.add(paren_string.substring(start, end + 1));\n           \
    \     start = end + 1;\n            }\n        }\n        return result;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfz3yjplm.java:35)\n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the array list of those.\n    // Separate groups\
    \ are balanced (each open brace is properly closed) and not nested within each\
    \ other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"\
    ( ) (( )) (( )( ))\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                count--;\n\
    \            }\n            if (count == 0) {\n                end = i;\n    \
    \            result.add(paren_string.substring(start, end + 1));\n           \
    \     start = end + 1;\n            }\n        }\n        return result;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfz3yjplm.java:35)\n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the array list of those.\n    // Separate groups\
    \ are balanced (each open brace is properly closed) and not nested within each\
    \ other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"\
    ( ) (( )) (( )( ))\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                if (count\
    \ == 0) {\n                    start = i;\n                }\n               \
    \ count++;\n            } else if (paren_string.charAt(i) == ')') {\n        \
    \        count--;\n                if (count == 0) {\n                    end\
    \ = i;\n                    result.add(paren_string.substring(start, end + 1));\n\
    \                }\n            }\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkrj0003n.java:40)\n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the array list of those.\n    // Separate groups\
    \ are balanced (each open brace is properly closed) and not nested within each\
    \ other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"\
    ( ) (( )) (( )( ))\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                count--;\n\
    \            }\n            if (count == 0) {\n                end = i;\n    \
    \            result.add(paren_string.substring(start, end + 1));\n           \
    \     start = end + 1;\n            }\n        }\n        return result;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfz3yjplm.java:35)\n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the array list of those.\n    // Separate groups\
    \ are balanced (each open brace is properly closed) and not nested within each\
    \ other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"\
    ( ) (( )) (( )( ))\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> paren_groups\
    \ = new ArrayList<String>();\n        int i = 0;\n        while (i < paren_string.length())\
    \ {\n            int open_paren_count = 0;\n            int close_paren_count\
    \ = 0;\n            int j = i;\n            while (j < paren_string.length())\
    \ {\n                if (paren_string.charAt(j) == '(') {\n                  \
    \  open_paren_count++;\n                } else if (paren_string.charAt(j) == ')')\
    \ {\n                    close_paren_count++;\n                }\n           \
    \     if (open_paren_count == close_paren_count) {\n                    break;\n\
    \                }\n                j++;\n            }\n            paren_groups.add(paren_string.substring(i,\
    \ j + 1));\n            i = j + 1;\n        }\n        return paren_groups;\n\
    \    }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6vkmn7b0.java:39)\n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the array list of those.\n    // Separate groups\
    \ are balanced (each open brace is properly closed) and not nested within each\
    \ other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"\
    ( ) (( )) (( )( ))\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                count--;\n\
    \            }\n            if (count == 0) {\n                end = i;\n    \
    \            result.add(paren_string.substring(start, end + 1));\n           \
    \     start = end + 1;\n            }\n        }\n        return result;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfz3yjplm.java:35)\n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the array list of those.\n    // Separate groups\
    \ are balanced (each open brace is properly closed) and not nested within each\
    \ other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"\
    ( ) (( )) (( )( ))\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int open = 0;\n        int close = 0;\n        for (int i = 0; i < paren_string.length();\
    \ i++) {\n            if (paren_string.charAt(i) == '(') {\n                open++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                close++;\n\
    \            }\n            if (open == close) {\n                end = i;\n \
    \               result.add(paren_string.substring(start, end + 1));\n        \
    \        start = end + 1;\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6n_18ueo.java:36)\n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the array list of those.\n    // Separate groups\
    \ are balanced (each open brace is properly closed) and not nested within each\
    \ other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"\
    ( ) (( )) (( )( ))\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        StringBuilder sb = new StringBuilder();\n\
    \        int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            char c = paren_string.charAt(i);\n            if (c == '(') {\n\
    \                count++;\n            } else if (c == ')') {\n              \
    \  count--;\n            }\n            if (count == 0) {\n                if\
    \ (sb.length() > 0) {\n                    result.add(sb.toString());\n      \
    \              sb = new StringBuilder();\n                }\n            } else\
    \ {\n                sb.append(c);\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1e34_l2z.java:38)\n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the array list of those.\n    // Separate groups\
    \ are balanced (each open brace is properly closed) and not nested within each\
    \ other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"\
    ( ) (( )) (( )( ))\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                if (count\
    \ == 0) {\n                    start = i;\n                }\n               \
    \ count++;\n            } else if (paren_string.charAt(i) == ')') {\n        \
    \        count--;\n                if (count == 0) {\n                    end\
    \ = i;\n                    result.add(paren_string.substring(start, end + 1));\n\
    \                }\n            }\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkrj0003n.java:40)\n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the array list of those.\n    // Separate groups\
    \ are balanced (each open brace is properly closed) and not nested within each\
    \ other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"\
    ( ) (( )) (( )( ))\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                count--;\n\
    \            }\n            if (count == 0) {\n                end = i;\n    \
    \            result.add(paren_string.substring(start, end + 1));\n           \
    \     start = end + 1;\n            }\n        }\n        return result;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfz3yjplm.java:35)\n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the array list of those.\n    // Separate groups\
    \ are balanced (each open brace is properly closed) and not nested within each\
    \ other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"\
    ( ) (( )) (( )( ))\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int open = 0;\n        int close = 0;\n\
    \        int start = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                open++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                close++;\n\
    \            }\n            if (open == close) {\n                result.add(paren_string.substring(start,\
    \ i + 1));\n                start = i + 1;\n            }\n        }\n       \
    \ return result;\n    }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9_vt21g3.java:34)\n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the array list of those.\n    // Separate groups\
    \ are balanced (each open brace is properly closed) and not nested within each\
    \ other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"\
    ( ) (( )) (( )( ))\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                count--;\n\
    \            }\n            if (count == 0) {\n                end = i;\n    \
    \            result.add(paren_string.substring(start, end + 1));\n           \
    \     start = end + 1;\n            }\n        }\n        return result;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfz3yjplm.java:35)\n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the array list of those.\n    // Separate groups\
    \ are balanced (each open brace is properly closed) and not nested within each\
    \ other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"\
    ( ) (( )) (( )( ))\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                if (count\
    \ == 0) {\n                    start = i;\n                }\n               \
    \ count++;\n            } else if (paren_string.charAt(i) == ')') {\n        \
    \        count--;\n                if (count == 0) {\n                    end\
    \ = i;\n                    result.add(paren_string.substring(start, end + 1));\n\
    \                }\n            }\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkrj0003n.java:40)\n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the array list of those.\n    // Separate groups\
    \ are balanced (each open brace is properly closed) and not nested within each\
    \ other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"\
    ( ) (( )) (( )( ))\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                if (count\
    \ == 0) {\n                    start = i;\n                }\n               \
    \ count++;\n            } else if (paren_string.charAt(i) == ')') {\n        \
    \        count--;\n                if (count == 0) {\n                    end\
    \ = i;\n                    result.add(paren_string.substring(start, end + 1));\n\
    \                }\n            }\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkrj0003n.java:40)\n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the array list of those.\n    // Separate groups\
    \ are balanced (each open brace is properly closed) and not nested within each\
    \ other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"\
    ( ) (( )) (( )( ))\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                count--;\n\
    \            }\n            if (count == 0) {\n                end = i;\n    \
    \            result.add(paren_string.substring(start, end + 1));\n           \
    \     start = end + 1;\n            }\n        }\n        return result;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfz3yjplm.java:35)\n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the array list of those.\n    // Separate groups\
    \ are balanced (each open brace is properly closed) and not nested within each\
    \ other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"\
    ( ) (( )) (( )( ))\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                count--;\n\
    \            }\n            if (count == 0) {\n                end = i;\n    \
    \            result.add(paren_string.substring(start, end + 1));\n           \
    \     start = end + 1;\n            }\n        }\n        return result;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfz3yjplm.java:35)\n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the array list of those.\n    // Separate groups\
    \ are balanced (each open brace is properly closed) and not nested within each\
    \ other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"\
    ( ) (( )) (( )( ))\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                count--;\n\
    \            }\n            if (count == 0) {\n                end = i;\n    \
    \            result.add(paren_string.substring(start, end + 1));\n           \
    \     start = end + 1;\n            }\n        }\n        return result;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfz3yjplm.java:35)\n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the array list of those.\n    // Separate groups\
    \ are balanced (each open brace is properly closed) and not nested within each\
    \ other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"\
    ( ) (( )) (( )( ))\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                count--;\n\
    \            }\n            if (count == 0) {\n                end = i;\n    \
    \            result.add(paren_string.substring(start, end + 1));\n           \
    \     start = end + 1;\n            }\n        }\n        return result;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfz3yjplm.java:35)\n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the array list of those.\n    // Separate groups\
    \ are balanced (each open brace is properly closed) and not nested within each\
    \ other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"\
    ( ) (( )) (( )( ))\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                if (count\
    \ == 0) {\n                    start = i;\n                }\n               \
    \ count++;\n            } else if (paren_string.charAt(i) == ')') {\n        \
    \        count--;\n                if (count == 0) {\n                    end\
    \ = i;\n                    result.add(paren_string.substring(start, end + 1));\n\
    \                }\n            }\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkrj0003n.java:40)\n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the array list of those.\n    // Separate groups\
    \ are balanced (each open brace is properly closed) and not nested within each\
    \ other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"\
    ( ) (( )) (( )( ))\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                count--;\n\
    \            }\n            if (count == 0) {\n                end = i;\n    \
    \            result.add(paren_string.substring(start, end + 1));\n           \
    \     start = end + 1;\n            }\n        }\n        return result;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfz3yjplm.java:35)\n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the array list of those.\n    // Separate groups\
    \ are balanced (each open brace is properly closed) and not nested within each\
    \ other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"\
    ( ) (( )) (( )( ))\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int open = 0;\n        int close = 0;\n\
    \        int start = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                open++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                close++;\n\
    \            }\n            if (open == close) {\n                result.add(paren_string.substring(start,\
    \ i + 1));\n                start = i + 1;\n            }\n        }\n       \
    \ return result;\n    }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9_vt21g3.java:34)\n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the array list of those.\n    // Separate groups\
    \ are balanced (each open brace is properly closed) and not nested within each\
    \ other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"\
    ( ) (( )) (( )( ))\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                if (count\
    \ == 0) {\n                    start = i;\n                }\n               \
    \ count++;\n            } else if (paren_string.charAt(i) == ')') {\n        \
    \        count--;\n                if (count == 0) {\n                    end\
    \ = i;\n                    result.add(paren_string.substring(start, end + 1));\n\
    \                }\n            }\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkrj0003n.java:40)\n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the array list of those.\n    // Separate groups\
    \ are balanced (each open brace is properly closed) and not nested within each\
    \ other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"\
    ( ) (( )) (( )( ))\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> ret =\
    \ new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n   \
    \     int open = 0;\n        int close = 0;\n        for (int i = 0; i < paren_string.length();\
    \ i++) {\n            if (paren_string.charAt(i) == '(') {\n                open++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                close++;\n\
    \            }\n            if (open == close) {\n                end = i;\n \
    \               ret.add(paren_string.substring(start, end + 1));\n           \
    \     start = end + 1;\n                open = 0;\n                close = 0;\n\
    \            }\n        }\n        return ret;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"(()())\", (String)\"\
    ((()))\", (String)\"()\", (String)\"((())()())\")))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp80jp8rq2.java:38)\n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the array list of those.\n    // Separate groups\
    \ are balanced (each open brace is properly closed) and not nested within each\
    \ other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"\
    ( ) (( )) (( )( ))\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                count--;\n\
    \            }\n            if (count == 0) {\n                end = i;\n    \
    \            result.add(paren_string.substring(start, end + 1));\n           \
    \     start = end + 1;\n            }\n        }\n        return result;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfz3yjplm.java:35)\n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the array list of those.\n    // Separate groups\
    \ are balanced (each open brace is properly closed) and not nested within each\
    \ other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"\
    ( ) (( )) (( )( ))\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       for (int i = 0; i < paren_string.length(); i++) {\n            if (paren_string.charAt(i)\
    \ == '(') {\n                start = i;\n            }\n            if (paren_string.charAt(i)\
    \ == ')') {\n                end = i;\n                result.add(paren_string.substring(start,\
    \ end + 1));\n            }\n        }\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(separateParenGroups((\"(()())\
    \ ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpv58ojw_r.java:31)\n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the array list of those.\n    // Separate groups\
    \ are balanced (each open brace is properly closed) and not nested within each\
    \ other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"\
    ( ) (( )) (( )( ))\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                count--;\n\
    \            }\n            if (count == 0) {\n                end = i;\n    \
    \            result.add(paren_string.substring(start, end + 1));\n           \
    \     start = end + 1;\n            }\n        }\n        return result;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfz3yjplm.java:35)\n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the array list of those.\n    // Separate groups\
    \ are balanced (each open brace is properly closed) and not nested within each\
    \ other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"\
    ( ) (( )) (( )( ))\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int open = 0;\n        int close = 0;\n\
    \        int start = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                open++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                close++;\n\
    \            }\n            if (open == close) {\n                result.add(paren_string.substring(start,\
    \ i + 1));\n                start = i + 1;\n            }\n        }\n       \
    \ return result;\n    }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9_vt21g3.java:34)\n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the array list of those.\n    // Separate groups\
    \ are balanced (each open brace is properly closed) and not nested within each\
    \ other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"\
    ( ) (( )) (( )( ))\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                count--;\n\
    \            }\n            if (count == 0) {\n                end = i;\n    \
    \            result.add(paren_string.substring(start, end + 1));\n           \
    \     start = end + 1;\n            }\n        }\n        return result;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfz3yjplm.java:35)\n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the array list of those.\n    // Separate groups\
    \ are balanced (each open brace is properly closed) and not nested within each\
    \ other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"\
    ( ) (( )) (( )( ))\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        StringBuilder sb = new StringBuilder();\n\
    \        int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            char c = paren_string.charAt(i);\n            if (c == '(') {\n\
    \                count++;\n            } else if (c == ')') {\n              \
    \  count--;\n            }\n            if (count == 0) {\n                result.add(sb.toString());\n\
    \                sb = new StringBuilder();\n            } else {\n           \
    \     sb.append(c);\n            }\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5cp0o0ag.java:36)\n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the array list of those.\n    // Separate groups\
    \ are balanced (each open brace is properly closed) and not nested within each\
    \ other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"\
    ( ) (( )) (( )( ))\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        StringBuilder sb = new StringBuilder();\n\
    \        int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                count--;\n\
    \            }\n            sb.append(paren_string.charAt(i));\n            if\
    \ (count == 0) {\n                result.add(sb.toString());\n               \
    \ sb = new StringBuilder();\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6zzd1prz.java:34)\n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the array list of those.\n    // Separate groups\
    \ are balanced (each open brace is properly closed) and not nested within each\
    \ other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"\
    ( ) (( )) (( )( ))\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int open = 0;\n        int close = 0;\n        for (int i = 0; i < paren_string.length();\
    \ i++) {\n            if (paren_string.charAt(i) == '(') {\n                open++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                close++;\n\
    \            }\n            if (open == close) {\n                end = i;\n \
    \               result.add(paren_string.substring(start, end + 1));\n        \
    \        start = end + 1;\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6n_18ueo.java:36)\n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the array list of those.\n    // Separate groups\
    \ are balanced (each open brace is properly closed) and not nested within each\
    \ other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"\
    ( ) (( )) (( )( ))\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                count--;\n\
    \            }\n            if (count == 0) {\n                end = i;\n    \
    \            result.add(paren_string.substring(start, end + 1));\n           \
    \     start = end + 1;\n            }\n        }\n        return result;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfz3yjplm.java:35)\n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the array list of those.\n    // Separate groups\
    \ are balanced (each open brace is properly closed) and not nested within each\
    \ other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"\
    ( ) (( )) (( )( ))\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                count--;\n\
    \            }\n            if (count == 0) {\n                end = i;\n    \
    \            result.add(paren_string.substring(start, end + 1));\n           \
    \     start = end + 1;\n            }\n        }\n        return result;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfz3yjplm.java:35)\n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the array list of those.\n    // Separate groups\
    \ are balanced (each open brace is properly closed) and not nested within each\
    \ other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"\
    ( ) (( )) (( )( ))\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        StringBuilder sb = new StringBuilder();\n\
    \        int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            char c = paren_string.charAt(i);\n            if (c == '(') {\n\
    \                count++;\n            } else if (c == ')') {\n              \
    \  count--;\n            }\n            if (count == 0) {\n                result.add(sb.toString());\n\
    \                sb = new StringBuilder();\n            } else {\n           \
    \     sb.append(c);\n            }\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5cp0o0ag.java:36)\n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the array list of those.\n    // Separate groups\
    \ are balanced (each open brace is properly closed) and not nested within each\
    \ other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"\
    ( ) (( )) (( )( ))\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                count--;\n\
    \            }\n            if (count == 0) {\n                end = i;\n    \
    \            result.add(paren_string.substring(start, end + 1));\n           \
    \     start = end + 1;\n            }\n        }\n        return result;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfz3yjplm.java:35)\n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the array list of those.\n    // Separate groups\
    \ are balanced (each open brace is properly closed) and not nested within each\
    \ other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"\
    ( ) (( )) (( )( ))\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                count--;\n\
    \            }\n            if (count == 0) {\n                end = i;\n    \
    \            result.add(paren_string.substring(start, end + 1));\n           \
    \     start = end + 1;\n            }\n        }\n        return result;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfz3yjplm.java:35)\n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the array list of those.\n    // Separate groups\
    \ are balanced (each open brace is properly closed) and not nested within each\
    \ other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"\
    ( ) (( )) (( )( ))\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                count--;\n\
    \            }\n            if (count == 0) {\n                end = i;\n    \
    \            result.add(paren_string.substring(start, end + 1));\n           \
    \     start = end + 1;\n            }\n        }\n        return result;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfz3yjplm.java:35)\n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the array list of those.\n    // Separate groups\
    \ are balanced (each open brace is properly closed) and not nested within each\
    \ other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"\
    ( ) (( )) (( )( ))\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> ret =\
    \ new ArrayList<String>();\n        StringBuilder sb = new StringBuilder();\n\
    \        int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                count--;\n\
    \            }\n            if (count == 0) {\n                ret.add(sb.toString());\n\
    \                sb = new StringBuilder();\n            } else {\n           \
    \     sb.append(paren_string.charAt(i));\n            }\n        }\n        return\
    \ ret;\n    }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_6erw01f.java:35)\n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the array list of those.\n    // Separate groups\
    \ are balanced (each open brace is properly closed) and not nested within each\
    \ other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"\
    ( ) (( )) (( )( ))\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        StringBuilder sb = new StringBuilder();\n\
    \        int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            char c = paren_string.charAt(i);\n            if (c == '(') {\n\
    \                count++;\n            } else if (c == ')') {\n              \
    \  count--;\n            }\n            if (count == 0) {\n                result.add(sb.toString());\n\
    \                sb = new StringBuilder();\n            } else {\n           \
    \     sb.append(c);\n            }\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5cp0o0ag.java:36)\n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the array list of those.\n    // Separate groups\
    \ are balanced (each open brace is properly closed) and not nested within each\
    \ other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"\
    ( ) (( )) (( )( ))\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        StringBuilder sb = new StringBuilder();\n\
    \        int open = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            char c = paren_string.charAt(i);\n            if (c == '(') {\n\
    \                open++;\n                sb.append(c);\n            } else if\
    \ (c == ')') {\n                open--;\n                sb.append(c);\n     \
    \       }\n            if (open == 0) {\n                result.add(sb.toString());\n\
    \                sb = new StringBuilder();\n            }\n        }\n       \
    \ return result;\n    }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppn89dhc4.java:36)\n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the array list of those.\n    // Separate groups\
    \ are balanced (each open brace is properly closed) and not nested within each\
    \ other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"\
    ( ) (( )) (( )( ))\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                count--;\n\
    \            }\n            if (count == 0) {\n                end = i;\n    \
    \            result.add(paren_string.substring(start, end + 1));\n           \
    \     start = end + 1;\n            }\n        }\n        return result;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfz3yjplm.java:35)\n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the array list of those.\n    // Separate groups\
    \ are balanced (each open brace is properly closed) and not nested within each\
    \ other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"\
    ( ) (( )) (( )( ))\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                count--;\n\
    \            }\n            if (count == 0) {\n                end = i;\n    \
    \            result.add(paren_string.substring(start, end + 1));\n           \
    \     start = end + 1;\n            }\n        }\n        return result;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfz3yjplm.java:35)\n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the array list of those.\n    // Separate groups\
    \ are balanced (each open brace is properly closed) and not nested within each\
    \ other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"\
    ( ) (( )) (( )( ))\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                count--;\n\
    \            }\n            if (count == 0) {\n                end = i;\n    \
    \            result.add(paren_string.substring(start, end + 1));\n           \
    \     start = end + 1;\n            }\n        }\n        return result;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfz3yjplm.java:35)\n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the array list of those.\n    // Separate groups\
    \ are balanced (each open brace is properly closed) and not nested within each\
    \ other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"\
    ( ) (( )) (( )( ))\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                count--;\n\
    \            }\n            if (count == 0) {\n                end = i;\n    \
    \            result.add(paren_string.substring(start, end + 1));\n           \
    \     start = end + 1;\n            }\n        }\n        return result;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfz3yjplm.java:35)\n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the array list of those.\n    // Separate groups\
    \ are balanced (each open brace is properly closed) and not nested within each\
    \ other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"\
    ( ) (( )) (( )( ))\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int open = 0;\n        int close = 0;\n        for (int i = 0; i < paren_string.length();\
    \ i++) {\n            if (paren_string.charAt(i) == '(') {\n                open++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                close++;\n\
    \            }\n            if (open == close) {\n                end = i;\n \
    \               result.add(paren_string.substring(start, end + 1));\n        \
    \        start = end + 1;\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6n_18ueo.java:36)\n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the array list of those.\n    // Separate groups\
    \ are balanced (each open brace is properly closed) and not nested within each\
    \ other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"\
    ( ) (( )) (( )( ))\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int open = 0;\n        int close = 0;\n        for (int i = 0; i < paren_string.length();\
    \ i++) {\n            if (paren_string.charAt(i) == '(') {\n                open++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                close++;\n\
    \            }\n            if (open == close) {\n                end = i;\n \
    \               result.add(paren_string.substring(start, end + 1));\n        \
    \        start = end + 1;\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6n_18ueo.java:36)\n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the array list of those.\n    // Separate groups\
    \ are balanced (each open brace is properly closed) and not nested within each\
    \ other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"\
    ( ) (( )) (( )( ))\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int open = 0;\n        int close = 0;\n        for (int i = 0; i < paren_string.length();\
    \ i++) {\n            if (paren_string.charAt(i) == '(') {\n                open++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                close++;\n\
    \            }\n            if (open == close) {\n                end = i;\n \
    \               result.add(paren_string.substring(start, end + 1));\n        \
    \        start = end + 1;\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6n_18ueo.java:36)\n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the array list of those.\n    // Separate groups\
    \ are balanced (each open brace is properly closed) and not nested within each\
    \ other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"\
    ( ) (( )) (( )( ))\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                count--;\n\
    \            }\n            if (count == 0) {\n                end = i;\n    \
    \            result.add(paren_string.substring(start, end + 1));\n           \
    \     start = end + 1;\n            }\n        }\n        return result;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfz3yjplm.java:35)\n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the array list of those.\n    // Separate groups\
    \ are balanced (each open brace is properly closed) and not nested within each\
    \ other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"\
    ( ) (( )) (( )( ))\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> ret =\
    \ new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n   \
    \     int open = 0;\n        int close = 0;\n        for (int i = 0; i < paren_string.length();\
    \ i++) {\n            if (paren_string.charAt(i) == '(') {\n                open++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                close++;\n\
    \            }\n            if (open == close) {\n                ret.add(paren_string.substring(start,\
    \ i + 1));\n                start = i + 1;\n            }\n        }\n       \
    \ return ret;\n    }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpn4gavww8.java:35)\n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the array list of those.\n    // Separate groups\
    \ are balanced (each open brace is properly closed) and not nested within each\
    \ other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"\
    ( ) (( )) (( )( ))\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                count--;\n\
    \            }\n            if (count == 0) {\n                end = i;\n    \
    \            result.add(paren_string.substring(start, end + 1));\n           \
    \     start = end + 1;\n            }\n        }\n        return result;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfz3yjplm.java:35)\n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the array list of those.\n    // Separate groups\
    \ are balanced (each open brace is properly closed) and not nested within each\
    \ other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"\
    ( ) (( )) (( )( ))\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int open = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                open++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                open--;\n\
    \            }\n            if (open == 0) {\n                end = i;\n     \
    \           result.add(paren_string.substring(start, end + 1));\n            \
    \    start = end + 1;\n            }\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmbml2hvw.java:35)\n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the array list of those.\n    // Separate groups\
    \ are balanced (each open brace is properly closed) and not nested within each\
    \ other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"\
    ( ) (( )) (( )( ))\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                count--;\n\
    \            }\n            if (count == 0) {\n                end = i;\n    \
    \            result.add(paren_string.substring(start, end + 1));\n           \
    \     start = end + 1;\n            }\n        }\n        return result;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfz3yjplm.java:35)\n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the array list of those.\n    // Separate groups\
    \ are balanced (each open brace is properly closed) and not nested within each\
    \ other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"\
    ( ) (( )) (( )( ))\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int open = 0;\n        int close = 0;\n        for (int i = 0; i < paren_string.length();\
    \ i++) {\n            if (paren_string.charAt(i) == '(') {\n                open++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                close++;\n\
    \            }\n            if (open == close) {\n                end = i;\n \
    \               result.add(paren_string.substring(start, end + 1));\n        \
    \        start = end + 1;\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6n_18ueo.java:36)\n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the array list of those.\n    // Separate groups\
    \ are balanced (each open brace is properly closed) and not nested within each\
    \ other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"\
    ( ) (( )) (( )( ))\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> ret =\
    \ new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n   \
    \     int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                if (count\
    \ == 0) {\n                    start = i;\n                }\n               \
    \ count++;\n            } else if (paren_string.charAt(i) == ')') {\n        \
    \        count--;\n                if (count == 0) {\n                    end\
    \ = i;\n                    ret.add(paren_string.substring(start, end + 1));\n\
    \                }\n            }\n        }\n        return ret;\n    }\n   \
    \ public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo44yf2cl.java:40)\n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the array list of those.\n    // Separate groups\
    \ are balanced (each open brace is properly closed) and not nested within each\
    \ other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"\
    ( ) (( )) (( )( ))\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int open = 0;\n        int start = 0;\n\
    \        for (int i = 0; i < paren_string.length(); i++) {\n            if (paren_string.charAt(i)\
    \ == '(') {\n                open++;\n            } else if (paren_string.charAt(i)\
    \ == ')') {\n                open--;\n            }\n            if (open == 0)\
    \ {\n                result.add(paren_string.substring(start, i + 1));\n     \
    \           start = i + 1;\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfvagpzuc.java:33)\n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the array list of those.\n    // Separate groups\
    \ are balanced (each open brace is properly closed) and not nested within each\
    \ other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"\
    ( ) (( )) (( )( ))\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                count--;\n\
    \            }\n            if (count == 0) {\n                end = i;\n    \
    \            result.add(paren_string.substring(start, end + 1));\n           \
    \     start = end + 1;\n            }\n        }\n        return result;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfz3yjplm.java:35)\n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the array list of those.\n    // Separate groups\
    \ are balanced (each open brace is properly closed) and not nested within each\
    \ other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"\
    ( ) (( )) (( )( ))\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        // TODO: Fill in this function\n\
    \        return null;\n    }\n    public static void main(String[] args) {\n \
    \   assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"(()())\", (String)\"((()))\", (String)\"\
    ()\", (String)\"((())()())\")))));\n    assert(separateParenGroups((\"() (())\
    \ ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"()\"\
    , (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.separateParenGroups(String)\"\
    \ is null\n\tat Problem.main(tmpqclvi33x.java:20)\n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the array list of those.\n    // Separate groups\
    \ are balanced (each open brace is properly closed) and not nested within each\
    \ other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"\
    ( ) (( )) (( )( ))\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int open = 0;\n        int close = 0;\n        for (int i = 0; i < paren_string.length();\
    \ i++) {\n            if (paren_string.charAt(i) == '(') {\n                open++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                close++;\n\
    \            }\n            if (open == close) {\n                end = i;\n \
    \               result.add(paren_string.substring(start, end + 1));\n        \
    \        start = end + 1;\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6n_18ueo.java:36)\n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the array list of those.\n    // Separate groups\
    \ are balanced (each open brace is properly closed) and not nested within each\
    \ other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"\
    ( ) (( )) (( )( ))\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                if (count\
    \ == 0) {\n                    start = i;\n                }\n               \
    \ count++;\n            } else if (paren_string.charAt(i) == ')') {\n        \
    \        count--;\n                if (count == 0) {\n                    end\
    \ = i;\n                    result.add(paren_string.substring(start, end + 1));\n\
    \                }\n            }\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkrj0003n.java:40)\n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the array list of those.\n    // Separate groups\
    \ are balanced (each open brace is properly closed) and not nested within each\
    \ other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"\
    ( ) (( )) (( )( ))\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                count--;\n\
    \            }\n            if (count == 0) {\n                end = i;\n    \
    \            result.add(paren_string.substring(start, end + 1));\n           \
    \     start = end + 1;\n            }\n        }\n        return result;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfz3yjplm.java:35)\n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the array list of those.\n    // Separate groups\
    \ are balanced (each open brace is properly closed) and not nested within each\
    \ other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"\
    ( ) (( )) (( )( ))\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        StringBuilder sb = new StringBuilder();\n\
    \        int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            char c = paren_string.charAt(i);\n            if (c == '(') {\n\
    \                count++;\n            } else if (c == ')') {\n              \
    \  count--;\n            }\n            if (count == 0 && sb.length() > 0) {\n\
    \                result.add(sb.toString());\n                sb = new StringBuilder();\n\
    \            } else if (c != ' ') {\n                sb.append(c);\n         \
    \   }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"(()())\", (String)\"((()))\", (String)\"\
    ()\", (String)\"((())()())\")))));\n    assert(separateParenGroups((\"() (())\
    \ ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"()\"\
    , (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvbyeuke8.java:36)\n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the array list of those.\n    // Separate groups\
    \ are balanced (each open brace is properly closed) and not nested within each\
    \ other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"\
    ( ) (( )) (( )( ))\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                if (count\
    \ == 0) {\n                    start = i;\n                }\n               \
    \ count++;\n            } else if (paren_string.charAt(i) == ')') {\n        \
    \        count--;\n                if (count == 0) {\n                    end\
    \ = i;\n                    result.add(paren_string.substring(start, end + 1));\n\
    \                }\n            }\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkrj0003n.java:40)\n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the array list of those.\n    // Separate groups\
    \ are balanced (each open brace is properly closed) and not nested within each\
    \ other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"\
    ( ) (( )) (( )( ))\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                count--;\n\
    \            }\n            if (count == 0) {\n                end = i;\n    \
    \            result.add(paren_string.substring(start, end + 1));\n           \
    \     start = end + 1;\n            }\n        }\n        return result;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfz3yjplm.java:35)\n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the array list of those.\n    // Separate groups\
    \ are balanced (each open brace is properly closed) and not nested within each\
    \ other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"\
    ( ) (( )) (( )( ))\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int open = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                open++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                open--;\n\
    \            }\n            if (open == 0) {\n                end = i;\n     \
    \           result.add(paren_string.substring(start, end + 1));\n            \
    \    start = end + 1;\n            }\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmbml2hvw.java:35)\n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the array list of those.\n    // Separate groups\
    \ are balanced (each open brace is properly closed) and not nested within each\
    \ other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"\
    ( ) (( )) (( )( ))\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        // TODO: Implement this\
    \ function\n        return new ArrayList<String>();\n    }\n    public static\
    \ void main(String[] args) {\n    assert(separateParenGroups((\"(()()) ((()))\
    \ () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()())\"\
    , (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvma0sbjm.java:20)\n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the array list of those.\n    // Separate groups\
    \ are balanced (each open brace is properly closed) and not nested within each\
    \ other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"\
    ( ) (( )) (( )( ))\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                count--;\n\
    \            }\n            if (count == 0) {\n                end = i;\n    \
    \            result.add(paren_string.substring(start, end + 1));\n           \
    \     start = end + 1;\n            }\n        }\n        return result;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfz3yjplm.java:35)\n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the array list of those.\n    // Separate groups\
    \ are balanced (each open brace is properly closed) and not nested within each\
    \ other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"\
    ( ) (( )) (( )( ))\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                count--;\n\
    \            }\n            if (count == 0) {\n                end = i;\n    \
    \            result.add(paren_string.substring(start, end + 1));\n           \
    \     start = end + 1;\n            }\n        }\n        return result;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfz3yjplm.java:35)\n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the array list of those.\n    // Separate groups\
    \ are balanced (each open brace is properly closed) and not nested within each\
    \ other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"\
    ( ) (( )) (( )( ))\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> ret =\
    \ new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n   \
    \     for (int i = 0; i < paren_string.length(); i++) {\n            if (paren_string.charAt(i)\
    \ == '(') {\n                start = i;\n            }\n            if (paren_string.charAt(i)\
    \ == ')') {\n                end = i;\n                ret.add(paren_string.substring(start,\
    \ end + 1));\n            }\n        }\n        return ret;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(separateParenGroups((\"(()())\
    \ ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpp4ym75pa.java:31)\n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the array list of those.\n    // Separate groups\
    \ are balanced (each open brace is properly closed) and not nested within each\
    \ other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"\
    ( ) (( )) (( )( ))\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int open = 0;\n        int close = 0;\n        for (int i = 0; i < paren_string.length();\
    \ i++) {\n            if (paren_string.charAt(i) == '(') {\n                open++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                close++;\n\
    \            }\n            if (open == close) {\n                end = i;\n \
    \               result.add(paren_string.substring(start, end + 1));\n        \
    \        start = end + 1;\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6n_18ueo.java:36)\n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the array list of those.\n    // Separate groups\
    \ are balanced (each open brace is properly closed) and not nested within each\
    \ other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"\
    ( ) (( )) (( )( ))\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int open = 0;\n        int close = 0;\n        for (int i = 0; i < paren_string.length();\
    \ i++) {\n            if (paren_string.charAt(i) == '(') {\n                open++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                close++;\n\
    \            }\n            if (open == close) {\n                end = i;\n \
    \               result.add(paren_string.substring(start, end + 1));\n        \
    \        start = end + 1;\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6n_18ueo.java:36)\n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the array list of those.\n    // Separate groups\
    \ are balanced (each open brace is properly closed) and not nested within each\
    \ other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"\
    ( ) (( )) (( )( ))\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                count--;\n\
    \            }\n            if (count == 0) {\n                end = i;\n    \
    \            result.add(paren_string.substring(start, end + 1));\n           \
    \     start = end + 1;\n            }\n        }\n        return result;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfz3yjplm.java:35)\n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the array list of those.\n    // Separate groups\
    \ are balanced (each open brace is properly closed) and not nested within each\
    \ other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"\
    ( ) (( )) (( )( ))\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int open = 0;\n        int close = 0;\n        for (int i = 0; i < paren_string.length();\
    \ i++) {\n            if (paren_string.charAt(i) == '(') {\n                open++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                close++;\n\
    \            }\n            if (open == close) {\n                end = i;\n \
    \               result.add(paren_string.substring(start, end + 1));\n        \
    \        start = end + 1;\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6n_18ueo.java:36)\n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the array list of those.\n    // Separate groups\
    \ are balanced (each open brace is properly closed) and not nested within each\
    \ other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"\
    ( ) (( )) (( )( ))\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        // TODO: implement this\
    \ function\n        return new ArrayList<String>();\n    }\n    public static\
    \ void main(String[] args) {\n    assert(separateParenGroups((\"(()()) ((()))\
    \ () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()())\"\
    , (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbychx_bb.java:20)\n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the array list of those.\n    // Separate groups\
    \ are balanced (each open brace is properly closed) and not nested within each\
    \ other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"\
    ( ) (( )) (( )( ))\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                count--;\n\
    \            }\n            if (count == 0) {\n                end = i;\n    \
    \            result.add(paren_string.substring(start, end + 1));\n           \
    \     start = end + 1;\n            }\n        }\n        return result;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfz3yjplm.java:35)\n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the array list of those.\n    // Separate groups\
    \ are balanced (each open brace is properly closed) and not nested within each\
    \ other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"\
    ( ) (( )) (( )( ))\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> paren_groups\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int open = 0;\n        int close = 0;\n        for (int i = 0; i < paren_string.length();\
    \ i++) {\n            if (paren_string.charAt(i) == '(') {\n                open++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                close++;\n\
    \            }\n            if (open == close) {\n                end = i;\n \
    \               paren_groups.add(paren_string.substring(start, end + 1));\n  \
    \              start = end + 1;\n            }\n        }\n        return paren_groups;\n\
    \    }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5mbzmfxj.java:36)\n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the array list of those.\n    // Separate groups\
    \ are balanced (each open brace is properly closed) and not nested within each\
    \ other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"\
    ( ) (( )) (( )( ))\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                count--;\n\
    \            }\n            if (count == 0) {\n                end = i;\n    \
    \            result.add(paren_string.substring(start, end + 1));\n           \
    \     start = end + 1;\n            }\n        }\n        return result;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfz3yjplm.java:35)\n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the array list of those.\n    // Separate groups\
    \ are balanced (each open brace is properly closed) and not nested within each\
    \ other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"\
    ( ) (( )) (( )( ))\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                count--;\n\
    \            }\n            if (count == 0) {\n                end = i;\n    \
    \            result.add(paren_string.substring(start, end + 1));\n           \
    \     start = end + 1;\n            }\n        }\n        return result;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfz3yjplm.java:35)\n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the array list of those.\n    // Separate groups\
    \ are balanced (each open brace is properly closed) and not nested within each\
    \ other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"\
    ( ) (( )) (( )( ))\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                count--;\n\
    \            }\n            if (count == 0) {\n                end = i;\n    \
    \            result.add(paren_string.substring(start, end + 1));\n           \
    \     start = end + 1;\n            }\n        }\n        return result;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfz3yjplm.java:35)\n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the array list of those.\n    // Separate groups\
    \ are balanced (each open brace is properly closed) and not nested within each\
    \ other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"\
    ( ) (( )) (( )( ))\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int open_parens = 0;\n        int start_index\
    \ = 0;\n        for (int i = 0; i < paren_string.length(); i++) {\n          \
    \  if (paren_string.charAt(i) == '(') {\n                open_parens++;\n    \
    \        } else if (paren_string.charAt(i) == ')') {\n                open_parens--;\n\
    \            }\n            if (open_parens == 0) {\n                result.add(paren_string.substring(start_index,\
    \ i + 1));\n                start_index = i + 1;\n            }\n        }\n \
    \       return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"(()())\", (String)\"((()))\", (String)\"\
    ()\", (String)\"((())()())\")))));\n    assert(separateParenGroups((\"() (())\
    \ ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"()\"\
    , (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcdif7soc.java:33)\n"
  stdout: ''
  timestamp: 1659795075
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the array list of those.\n    // Separate groups\
    \ are balanced (each open brace is properly closed) and not nested within each\
    \ other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"\
    ( ) (( )) (( )( ))\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                count--;\n\
    \            }\n            if (count == 0) {\n                end = i;\n    \
    \            result.add(paren_string.substring(start, end + 1));\n           \
    \     start = end + 1;\n            }\n        }\n        return result;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfz3yjplm.java:35)\n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the array list of those.\n    // Separate groups\
    \ are balanced (each open brace is properly closed) and not nested within each\
    \ other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"\
    ( ) (( )) (( )( ))\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> groups\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                count--;\n\
    \            }\n            if (count == 0) {\n                end = i;\n    \
    \            groups.add(paren_string.substring(start, end + 1));\n           \
    \     start = end + 1;\n            }\n        }\n        return groups;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfvpkv2s1.java:35)\n"
  stdout: ''
  timestamp: 1659795075
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the array list of those.\n    // Separate groups\
    \ are balanced (each open brace is properly closed) and not nested within each\
    \ other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"\
    ( ) (( )) (( )( ))\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                count--;\n\
    \            }\n            if (count == 0) {\n                end = i;\n    \
    \            result.add(paren_string.substring(start, end + 1));\n           \
    \     start = end + 1;\n            }\n        }\n        return result;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfz3yjplm.java:35)\n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the array list of those.\n    // Separate groups\
    \ are balanced (each open brace is properly closed) and not nested within each\
    \ other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"\
    ( ) (( )) (( )( ))\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        // TODO: Implement this\
    \ function\n        return null;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"(()())\", (String)\"((()))\", (String)\"\
    ()\", (String)\"((())()())\")))));\n    assert(separateParenGroups((\"() (())\
    \ ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"()\"\
    , (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.separateParenGroups(String)\"\
    \ is null\n\tat Problem.main(tmp5_2rp314.java:20)\n"
  stdout: ''
  timestamp: 1659795075
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the array list of those.\n    // Separate groups\
    \ are balanced (each open brace is properly closed) and not nested within each\
    \ other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"\
    ( ) (( )) (( )( ))\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                count--;\n\
    \            }\n            if (count == 0) {\n                result.add(paren_string.substring(start,\
    \ i + 1));\n                start = i + 1;\n            }\n        }\n       \
    \ return result;\n    }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3ap6c72o.java:34)\n"
  stdout: ''
  timestamp: 1659795075
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the array list of those.\n    // Separate groups\
    \ are balanced (each open brace is properly closed) and not nested within each\
    \ other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"\
    ( ) (( )) (( )( ))\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                if (count\
    \ == 0) {\n                    start = i;\n                }\n               \
    \ count++;\n            } else if (paren_string.charAt(i) == ')') {\n        \
    \        count--;\n                if (count == 0) {\n                    end\
    \ = i;\n                    result.add(paren_string.substring(start, end + 1));\n\
    \                }\n            }\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkrj0003n.java:40)\n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the array list of those.\n    // Separate groups\
    \ are balanced (each open brace is properly closed) and not nested within each\
    \ other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"\
    ( ) (( )) (( )( ))\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int open = 0;\n        int close = 0;\n        for (int i = 0; i < paren_string.length();\
    \ i++) {\n            if (paren_string.charAt(i) == '(') {\n                open++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                close++;\n\
    \            }\n            if (open == close) {\n                end = i;\n \
    \               result.add(paren_string.substring(start, end + 1));\n        \
    \        start = end + 1;\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6n_18ueo.java:36)\n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the array list of those.\n    // Separate groups\
    \ are balanced (each open brace is properly closed) and not nested within each\
    \ other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"\
    ( ) (( )) (( )( ))\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                if (count\
    \ == 0) {\n                    start = i;\n                }\n               \
    \ count++;\n            } else if (paren_string.charAt(i) == ')') {\n        \
    \        count--;\n                if (count == 0) {\n                    end\
    \ = i;\n                    result.add(paren_string.substring(start, end + 1));\n\
    \                }\n            }\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkrj0003n.java:40)\n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the array list of those.\n    // Separate groups\
    \ are balanced (each open brace is properly closed) and not nested within each\
    \ other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"\
    ( ) (( )) (( )( ))\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                count--;\n\
    \            }\n            if (count == 0) {\n                end = i;\n    \
    \            result.add(paren_string.substring(start, end + 1));\n           \
    \     start = end + 1;\n            }\n        }\n        return result;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfz3yjplm.java:35)\n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the array list of those.\n    // Separate groups\
    \ are balanced (each open brace is properly closed) and not nested within each\
    \ other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"\
    ( ) (( )) (( )( ))\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                if (count\
    \ == 0) {\n                    start = i;\n                }\n               \
    \ count++;\n            } else if (paren_string.charAt(i) == ')') {\n        \
    \        count--;\n                if (count == 0) {\n                    end\
    \ = i;\n                    result.add(paren_string.substring(start, end + 1));\n\
    \                }\n            }\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkrj0003n.java:40)\n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the array list of those.\n    // Separate groups\
    \ are balanced (each open brace is properly closed) and not nested within each\
    \ other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"\
    ( ) (( )) (( )( ))\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       for (int i = 0; i < paren_string.length(); i++) {\n            if (paren_string.charAt(i)\
    \ == '(') {\n                if (start == 0) {\n                    start = i;\n\
    \                }\n                end++;\n            } else if (paren_string.charAt(i)\
    \ == ')') {\n                end--;\n                if (end == 0) {\n       \
    \             result.add(paren_string.substring(start, i + 1));\n            \
    \        start = 0;\n                }\n            }\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzgx64ekw.java:36)\n"
  stdout: ''
  timestamp: 1659795075
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the array list of those.\n    // Separate groups\
    \ are balanced (each open brace is properly closed) and not nested within each\
    \ other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"\
    ( ) (( )) (( )( ))\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                count--;\n\
    \            }\n            if (count == 0) {\n                end = i;\n    \
    \            result.add(paren_string.substring(start, end + 1));\n           \
    \     start = end + 1;\n            }\n        }\n        return result;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfz3yjplm.java:35)\n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the array list of those.\n    // Separate groups\
    \ are balanced (each open brace is properly closed) and not nested within each\
    \ other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"\
    ( ) (( )) (( )( ))\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int open = 0;\n        int close = 0;\n\
    \        int start = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                open++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                close++;\n\
    \            }\n            if (open == close) {\n                result.add(paren_string.substring(start,\
    \ i + 1));\n                start = i + 1;\n            }\n        }\n       \
    \ return result;\n    }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9_vt21g3.java:34)\n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the array list of those.\n    // Separate groups\
    \ are balanced (each open brace is properly closed) and not nested within each\
    \ other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"\
    ( ) (( )) (( )( ))\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                count--;\n\
    \            }\n            if (count == 0) {\n                end = i;\n    \
    \            result.add(paren_string.substring(start, end + 1));\n           \
    \     start = end + 1;\n            }\n        }\n        return result;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfz3yjplm.java:35)\n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the array list of those.\n    // Separate groups\
    \ are balanced (each open brace is properly closed) and not nested within each\
    \ other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"\
    ( ) (( )) (( )( ))\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int open = 0;\n        int close = 0;\n        for (int i = 0; i < paren_string.length();\
    \ i++) {\n            if (paren_string.charAt(i) == '(') {\n                open++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                close++;\n\
    \            }\n            if (open == close) {\n                end = i;\n \
    \               result.add(paren_string.substring(start, end + 1));\n        \
    \        start = end + 1;\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6n_18ueo.java:36)\n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the array list of those.\n    // Separate groups\
    \ are balanced (each open brace is properly closed) and not nested within each\
    \ other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"\
    ( ) (( )) (( )( ))\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        StringBuilder sb = new StringBuilder();\n\
    \        int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            char c = paren_string.charAt(i);\n            if (c == '(') {\n\
    \                count++;\n            } else if (c == ')') {\n              \
    \  count--;\n            }\n            if (count == 0) {\n                if\
    \ (sb.length() > 0) {\n                    result.add(sb.toString());\n      \
    \              sb = new StringBuilder();\n                }\n            } else\
    \ {\n                sb.append(c);\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1e34_l2z.java:38)\n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the array list of those.\n    // Separate groups\
    \ are balanced (each open brace is properly closed) and not nested within each\
    \ other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"\
    ( ) (( )) (( )( ))\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                if (count\
    \ == 0) {\n                    start = i;\n                }\n               \
    \ count++;\n            } else if (paren_string.charAt(i) == ')') {\n        \
    \        count--;\n                if (count == 0) {\n                    end\
    \ = i;\n                    result.add(paren_string.substring(start, end + 1));\n\
    \                }\n            }\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkrj0003n.java:40)\n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the array list of those.\n    // Separate groups\
    \ are balanced (each open brace is properly closed) and not nested within each\
    \ other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"\
    ( ) (( )) (( )( ))\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                count--;\n\
    \            }\n            if (count == 0) {\n                end = i;\n    \
    \            result.add(paren_string.substring(start, end + 1));\n           \
    \     start = end + 1;\n            }\n        }\n        return result;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfz3yjplm.java:35)\n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the array list of those.\n    // Separate groups\
    \ are balanced (each open brace is properly closed) and not nested within each\
    \ other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"\
    ( ) (( )) (( )( ))\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                count--;\n\
    \            }\n            if (count == 0) {\n                end = i;\n    \
    \            result.add(paren_string.substring(start, end + 1));\n           \
    \     start = end + 1;\n            }\n        }\n        return result;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfz3yjplm.java:35)\n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the array list of those.\n    // Separate groups\
    \ are balanced (each open brace is properly closed) and not nested within each\
    \ other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"\
    ( ) (( )) (( )( ))\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                if (count\
    \ == 0) {\n                    start = i;\n                }\n               \
    \ count++;\n            } else if (paren_string.charAt(i) == ')') {\n        \
    \        count--;\n                if (count == 0) {\n                    end\
    \ = i;\n                    result.add(paren_string.substring(start, end + 1));\n\
    \                }\n            }\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkrj0003n.java:40)\n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the array list of those.\n    // Separate groups\
    \ are balanced (each open brace is properly closed) and not nested within each\
    \ other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"\
    ( ) (( )) (( )( ))\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                count--;\n\
    \            }\n            if (count == 0) {\n                end = i;\n    \
    \            result.add(paren_string.substring(start, end + 1));\n           \
    \     start = end + 1;\n            }\n        }\n        return result;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfz3yjplm.java:35)\n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the array list of those.\n    // Separate groups\
    \ are balanced (each open brace is properly closed) and not nested within each\
    \ other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"\
    ( ) (( )) (( )( ))\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> ret =\
    \ new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n   \
    \     int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                if (count\
    \ == 0) {\n                    start = i;\n                }\n               \
    \ count++;\n            } else if (paren_string.charAt(i) == ')') {\n        \
    \        count--;\n                if (count == 0) {\n                    end\
    \ = i;\n                    ret.add(paren_string.substring(start, end + 1));\n\
    \                }\n            }\n        }\n        return ret;\n    }\n   \
    \ public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo44yf2cl.java:40)\n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the array list of those.\n    // Separate groups\
    \ are balanced (each open brace is properly closed) and not nested within each\
    \ other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"\
    ( ) (( )) (( )( ))\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int open = 0;\n        int close = 0;\n        for (int i = 0; i < paren_string.length();\
    \ i++) {\n            if (paren_string.charAt(i) == '(') {\n                open++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                close++;\n\
    \            }\n            if (open == close) {\n                end = i;\n \
    \               result.add(paren_string.substring(start, end + 1));\n        \
    \        start = end + 1;\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6n_18ueo.java:36)\n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the array list of those.\n    // Separate groups\
    \ are balanced (each open brace is properly closed) and not nested within each\
    \ other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"\
    ( ) (( )) (( )( ))\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        StringBuilder sb = new StringBuilder();\n\
    \        int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                count--;\n\
    \            }\n            sb.append(paren_string.charAt(i));\n            if\
    \ (count == 0) {\n                result.add(sb.toString());\n               \
    \ sb = new StringBuilder();\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6zzd1prz.java:34)\n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the array list of those.\n    // Separate groups\
    \ are balanced (each open brace is properly closed) and not nested within each\
    \ other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"\
    ( ) (( )) (( )( ))\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                count--;\n\
    \            }\n            if (count == 0) {\n                end = i;\n    \
    \            result.add(paren_string.substring(start, end + 1));\n           \
    \     start = end + 1;\n            }\n        }\n        return result;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfz3yjplm.java:35)\n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the array list of those.\n    // Separate groups\
    \ are balanced (each open brace is properly closed) and not nested within each\
    \ other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"\
    ( ) (( )) (( )( ))\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> paren_groups\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int open_parens = 0;\n        int close_parens = 0;\n        for (int\
    \ i = 0; i < paren_string.length(); i++) {\n            if (paren_string.charAt(i)\
    \ == '(') {\n                open_parens++;\n            } else if (paren_string.charAt(i)\
    \ == ')') {\n                close_parens++;\n            }\n            if (open_parens\
    \ == close_parens) {\n                end = i;\n                paren_groups.add(paren_string.substring(start,\
    \ end + 1));\n                start = end + 1;\n                open_parens =\
    \ 0;\n                close_parens = 0;\n            }\n        }\n        return\
    \ paren_groups;\n    }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpica8di8c.java:38)\n"
  stdout: ''
  timestamp: 1659795075
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the array list of those.\n    // Separate groups\
    \ are balanced (each open brace is properly closed) and not nested within each\
    \ other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"\
    ( ) (( )) (( )( ))\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> groups\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                if (count\
    \ == 0) {\n                    start = i;\n                }\n               \
    \ count++;\n            } else if (paren_string.charAt(i) == ')') {\n        \
    \        count--;\n                if (count == 0) {\n                    end\
    \ = i;\n                    groups.add(paren_string.substring(start, end + 1));\n\
    \                }\n            }\n        }\n        return groups;\n    }\n\
    \    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0gf147ko.java:40)\n"
  stdout: ''
  timestamp: 1659795075
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the array list of those.\n    // Separate groups\
    \ are balanced (each open brace is properly closed) and not nested within each\
    \ other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"\
    ( ) (( )) (( )( ))\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int open = 0;\n        int start = 0;\n\
    \        for (int i = 0; i < paren_string.length(); i++) {\n            if (paren_string.charAt(i)\
    \ == '(') {\n                open++;\n            } else if (paren_string.charAt(i)\
    \ == ')') {\n                open--;\n            }\n            if (open == 0)\
    \ {\n                result.add(paren_string.substring(start, i + 1));\n     \
    \           start = i + 1;\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfvagpzuc.java:33)\n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the array list of those.\n    // Separate groups\
    \ are balanced (each open brace is properly closed) and not nested within each\
    \ other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"\
    ( ) (( )) (( )( ))\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                count--;\n\
    \            }\n            if (count == 0) {\n                end = i;\n    \
    \            result.add(paren_string.substring(start, end + 1));\n           \
    \     start = end + 1;\n            }\n        }\n        return result;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfz3yjplm.java:35)\n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the array list of those.\n    // Separate groups\
    \ are balanced (each open brace is properly closed) and not nested within each\
    \ other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"\
    ( ) (( )) (( )( ))\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                count--;\n\
    \            }\n            if (count == 0) {\n                end = i;\n    \
    \            result.add(paren_string.substring(start, end + 1));\n           \
    \     start = end + 1;\n            }\n        }\n        return result;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfz3yjplm.java:35)\n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the array list of those.\n    // Separate groups\
    \ are balanced (each open brace is properly closed) and not nested within each\
    \ other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"\
    ( ) (( )) (( )( ))\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> paren_groups\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int open_parens = 0;\n        int close_parens = 0;\n        for (int\
    \ i = 0; i < paren_string.length(); i++) {\n            if (paren_string.charAt(i)\
    \ == '(') {\n                open_parens++;\n            } else if (paren_string.charAt(i)\
    \ == ')') {\n                close_parens++;\n            }\n            if (open_parens\
    \ == close_parens) {\n                end = i + 1;\n                paren_groups.add(paren_string.substring(start,\
    \ end));\n                start = end;\n                open_parens = 0;\n   \
    \             close_parens = 0;\n            }\n        }\n        return paren_groups;\n\
    \    }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzrbzntqk.java:38)\n"
  stdout: ''
  timestamp: 1659795075
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the array list of those.\n    // Separate groups\
    \ are balanced (each open brace is properly closed) and not nested within each\
    \ other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"\
    ( ) (( )) (( )( ))\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                count--;\n\
    \            }\n            if (count == 0) {\n                end = i;\n    \
    \            result.add(paren_string.substring(start, end + 1));\n           \
    \     start = end + 1;\n            }\n        }\n        return result;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfz3yjplm.java:35)\n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the array list of those.\n    // Separate groups\
    \ are balanced (each open brace is properly closed) and not nested within each\
    \ other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"\
    ( ) (( )) (( )( ))\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                if (count\
    \ == 0) {\n                    start = i;\n                }\n               \
    \ count++;\n            } else if (paren_string.charAt(i) == ')') {\n        \
    \        count--;\n                if (count == 0) {\n                    end\
    \ = i;\n                    result.add(paren_string.substring(start, end + 1));\n\
    \                }\n            }\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkrj0003n.java:40)\n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the array list of those.\n    // Separate groups\
    \ are balanced (each open brace is properly closed) and not nested within each\
    \ other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"\
    ( ) (( )) (( )( ))\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                if (count\
    \ == 0) {\n                    start = i;\n                }\n               \
    \ count++;\n            } else if (paren_string.charAt(i) == ')') {\n        \
    \        count--;\n                if (count == 0) {\n                    end\
    \ = i;\n                    result.add(paren_string.substring(start, end + 1));\n\
    \                }\n            }\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkrj0003n.java:40)\n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the array list of those.\n    // Separate groups\
    \ are balanced (each open brace is properly closed) and not nested within each\
    \ other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"\
    ( ) (( )) (( )( ))\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                count--;\n\
    \            }\n            if (count == 0) {\n                end = i;\n    \
    \            result.add(paren_string.substring(start, end + 1));\n           \
    \     start = end + 1;\n            }\n        }\n        return result;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfz3yjplm.java:35)\n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the array list of those.\n    // Separate groups\
    \ are balanced (each open brace is properly closed) and not nested within each\
    \ other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"\
    ( ) (( )) (( )( ))\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int open = 0;\n        int close = 0;\n\
    \        int start = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                open++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                close++;\n\
    \            }\n            if (open == close) {\n                result.add(paren_string.substring(start,\
    \ i + 1));\n                start = i + 1;\n            }\n        }\n       \
    \ return result;\n    }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9_vt21g3.java:34)\n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the array list of those.\n    // Separate groups\
    \ are balanced (each open brace is properly closed) and not nested within each\
    \ other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"\
    ( ) (( )) (( )( ))\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int open = 0;\n        int close = 0;\n\
    \        int start = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                open++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                close++;\n\
    \            }\n            if (open == close) {\n                result.add(paren_string.substring(start,\
    \ i + 1));\n                start = i + 1;\n            }\n        }\n       \
    \ return result;\n    }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9_vt21g3.java:34)\n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the array list of those.\n    // Separate groups\
    \ are balanced (each open brace is properly closed) and not nested within each\
    \ other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"\
    ( ) (( )) (( )( ))\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int open = 0;\n        int close = 0;\n        for (int i = 0; i < paren_string.length();\
    \ i++) {\n            if (paren_string.charAt(i) == '(') {\n                open++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                close++;\n\
    \            }\n            if (open == close) {\n                end = i;\n \
    \               result.add(paren_string.substring(start, end + 1));\n        \
    \        start = end + 1;\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6n_18ueo.java:36)\n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the array list of those.\n    // Separate groups\
    \ are balanced (each open brace is properly closed) and not nested within each\
    \ other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"\
    ( ) (( )) (( )( ))\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                count--;\n\
    \            }\n            if (count == 0) {\n                end = i;\n    \
    \            result.add(paren_string.substring(start, end + 1));\n           \
    \     start = end + 1;\n            }\n        }\n        return result;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfz3yjplm.java:35)\n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the array list of those.\n    // Separate groups\
    \ are balanced (each open brace is properly closed) and not nested within each\
    \ other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"\
    ( ) (( )) (( )( ))\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int open = 0;\n        int close = 0;\n        for (int i = 0; i < paren_string.length();\
    \ i++) {\n            if (paren_string.charAt(i) == '(') {\n                open++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                close++;\n\
    \            }\n            if (open == close) {\n                end = i;\n \
    \               result.add(paren_string.substring(start, end + 1));\n        \
    \        start = end + 1;\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6n_18ueo.java:36)\n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the array list of those.\n    // Separate groups\
    \ are balanced (each open brace is properly closed) and not nested within each\
    \ other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"\
    ( ) (( )) (( )( ))\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> groups\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int open = 0;\n        int close = 0;\n        for (int i = 0; i < paren_string.length();\
    \ i++) {\n            if (paren_string.charAt(i) == '(') {\n                open++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                close++;\n\
    \            }\n            if (open == close) {\n                groups.add(paren_string.substring(start,\
    \ i + 1));\n                start = i + 1;\n            }\n        }\n       \
    \ return groups;\n    }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2yilyc7u.java:35)\n"
  stdout: ''
  timestamp: 1659795075
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the array list of those.\n    // Separate groups\
    \ are balanced (each open brace is properly closed) and not nested within each\
    \ other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"\
    ( ) (( )) (( )( ))\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int open = 0;\n        int start = 0;\n\
    \        for (int i = 0; i < paren_string.length(); i++) {\n            if (paren_string.charAt(i)\
    \ == '(') {\n                open++;\n            } else if (paren_string.charAt(i)\
    \ == ')') {\n                open--;\n            }\n            if (open == 0)\
    \ {\n                result.add(paren_string.substring(start, i + 1));\n     \
    \           start = i + 1;\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfvagpzuc.java:33)\n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the array list of those.\n    // Separate groups\
    \ are balanced (each open brace is properly closed) and not nested within each\
    \ other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"\
    ( ) (( )) (( )( ))\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                if (count\
    \ == 0) {\n                    start = i;\n                }\n               \
    \ count++;\n            } else if (paren_string.charAt(i) == ')') {\n        \
    \        count--;\n                if (count == 0) {\n                    end\
    \ = i;\n                    result.add(paren_string.substring(start, end + 1));\n\
    \                }\n            }\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkrj0003n.java:40)\n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the array list of those.\n    // Separate groups\
    \ are balanced (each open brace is properly closed) and not nested within each\
    \ other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"\
    ( ) (( )) (( )( ))\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                count--;\n\
    \            }\n            if (count == 0) {\n                end = i;\n    \
    \            result.add(paren_string.substring(start, end + 1));\n           \
    \     start = end + 1;\n            }\n        }\n        return result;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfz3yjplm.java:35)\n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the array list of those.\n    // Separate groups\
    \ are balanced (each open brace is properly closed) and not nested within each\
    \ other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"\
    ( ) (( )) (( )( ))\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                count--;\n\
    \            }\n            if (count == 0) {\n                end = i;\n    \
    \            result.add(paren_string.substring(start, end + 1));\n           \
    \     start = end + 1;\n            }\n        }\n        return result;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfz3yjplm.java:35)\n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the array list of those.\n    // Separate groups\
    \ are balanced (each open brace is properly closed) and not nested within each\
    \ other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"\
    ( ) (( )) (( )( ))\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                count--;\n\
    \            }\n            if (count == 0) {\n                end = i;\n    \
    \            result.add(paren_string.substring(start, end + 1));\n           \
    \     start = end + 1;\n            }\n        }\n        return result;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfz3yjplm.java:35)\n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the array list of those.\n    // Separate groups\
    \ are balanced (each open brace is properly closed) and not nested within each\
    \ other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"\
    ( ) (( )) (( )( ))\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                if (count\
    \ == 0) {\n                    start = i;\n                }\n               \
    \ count++;\n            } else if (paren_string.charAt(i) == ')') {\n        \
    \        count--;\n                if (count == 0) {\n                    end\
    \ = i;\n                    result.add(paren_string.substring(start, end + 1));\n\
    \                }\n            }\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkrj0003n.java:40)\n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the array list of those.\n    // Separate groups\
    \ are balanced (each open brace is properly closed) and not nested within each\
    \ other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"\
    ( ) (( )) (( )( ))\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int open = 0;\n        int close = 0;\n        for (int i = 0; i < paren_string.length();\
    \ i++) {\n            if (paren_string.charAt(i) == '(') {\n                open++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                close++;\n\
    \            }\n            if (open == close) {\n                end = i;\n \
    \               result.add(paren_string.substring(start, end + 1));\n        \
    \        start = end + 1;\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6n_18ueo.java:36)\n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the array list of those.\n    // Separate groups\
    \ are balanced (each open brace is properly closed) and not nested within each\
    \ other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"\
    ( ) (( )) (( )( ))\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                count--;\n\
    \            }\n            if (count == 0) {\n                end = i;\n    \
    \            result.add(paren_string.substring(start, end + 1));\n           \
    \     start = end + 1;\n            }\n        }\n        return result;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfz3yjplm.java:35)\n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the array list of those.\n    // Separate groups\
    \ are balanced (each open brace is properly closed) and not nested within each\
    \ other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"\
    ( ) (( )) (( )( ))\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> paren_groups\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                count--;\n\
    \            }\n            if (count == 0) {\n                end = i;\n    \
    \            paren_groups.add(paren_string.substring(start, end + 1));\n     \
    \           start = end + 1;\n            }\n        }\n        return paren_groups;\n\
    \    }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpge27hm1r.java:35)\n"
  stdout: ''
  timestamp: 1659795075
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the array list of those.\n    // Separate groups\
    \ are balanced (each open brace is properly closed) and not nested within each\
    \ other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"\
    ( ) (( )) (( )( ))\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                count--;\n\
    \            }\n            if (count == 0) {\n                end = i;\n    \
    \            result.add(paren_string.substring(start, end + 1));\n           \
    \     start = end + 1;\n            }\n        }\n        return result;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfz3yjplm.java:35)\n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the array list of those.\n    // Separate groups\
    \ are balanced (each open brace is properly closed) and not nested within each\
    \ other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"\
    ( ) (( )) (( )( ))\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                count--;\n\
    \            }\n            if (count == 0) {\n                end = i;\n    \
    \            result.add(paren_string.substring(start, end + 1));\n           \
    \     start = end + 1;\n            }\n        }\n        return result;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfz3yjplm.java:35)\n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the array list of those.\n    // Separate groups\
    \ are balanced (each open brace is properly closed) and not nested within each\
    \ other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"\
    ( ) (( )) (( )( ))\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                if (count\
    \ == 0) {\n                    start = i;\n                }\n               \
    \ count++;\n            } else if (paren_string.charAt(i) == ')') {\n        \
    \        count--;\n                if (count == 0) {\n                    end\
    \ = i;\n                    result.add(paren_string.substring(start, end + 1));\n\
    \                }\n            }\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkrj0003n.java:40)\n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the array list of those.\n    // Separate groups\
    \ are balanced (each open brace is properly closed) and not nested within each\
    \ other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"\
    ( ) (( )) (( )( ))\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                count--;\n\
    \            }\n            if (count == 0) {\n                end = i;\n    \
    \            result.add(paren_string.substring(start, end + 1));\n           \
    \     start = end + 1;\n            }\n        }\n        return result;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfz3yjplm.java:35)\n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the array list of those.\n    // Separate groups\
    \ are balanced (each open brace is properly closed) and not nested within each\
    \ other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"\
    ( ) (( )) (( )( ))\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                count--;\n\
    \            }\n            if (count == 0) {\n                end = i;\n    \
    \            result.add(paren_string.substring(start, end + 1));\n           \
    \     start = end + 1;\n            }\n        }\n        return result;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfz3yjplm.java:35)\n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the array list of those.\n    // Separate groups\
    \ are balanced (each open brace is properly closed) and not nested within each\
    \ other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"\
    ( ) (( )) (( )( ))\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                count--;\n\
    \            }\n            if (count == 0) {\n                end = i;\n    \
    \            result.add(paren_string.substring(start, end + 1));\n           \
    \     start = end + 1;\n            }\n        }\n        return result;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfz3yjplm.java:35)\n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the array list of those.\n    // Separate groups\
    \ are balanced (each open brace is properly closed) and not nested within each\
    \ other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"\
    ( ) (( )) (( )( ))\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                count--;\n\
    \            }\n            if (count == 0) {\n                end = i;\n    \
    \            result.add(paren_string.substring(start, end + 1));\n           \
    \     start = end + 1;\n            }\n        }\n        return result;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfz3yjplm.java:35)\n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the array list of those.\n    // Separate groups\
    \ are balanced (each open brace is properly closed) and not nested within each\
    \ other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"\
    ( ) (( )) (( )( ))\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                if (count\
    \ == 0) {\n                    start = i;\n                }\n               \
    \ count++;\n            } else if (paren_string.charAt(i) == ')') {\n        \
    \        count--;\n                if (count == 0) {\n                    end\
    \ = i;\n                    result.add(paren_string.substring(start, end + 1));\n\
    \                }\n            }\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkrj0003n.java:40)\n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the array list of those.\n    // Separate groups\
    \ are balanced (each open brace is properly closed) and not nested within each\
    \ other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"\
    ( ) (( )) (( )( ))\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                count--;\n\
    \            }\n            if (count == 0) {\n                end = i;\n    \
    \            result.add(paren_string.substring(start, end + 1));\n           \
    \     start = end + 1;\n            }\n        }\n        return result;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfz3yjplm.java:35)\n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the array list of those.\n    // Separate groups\
    \ are balanced (each open brace is properly closed) and not nested within each\
    \ other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"\
    ( ) (( )) (( )( ))\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> ret =\
    \ new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n   \
    \     int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                count--;\n\
    \            }\n            if (count == 0) {\n                end = i;\n    \
    \            ret.add(paren_string.substring(start, end + 1));\n              \
    \  start = end + 1;\n            }\n        }\n        return ret;\n    }\n  \
    \  public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpx330d9lu.java:35)\n"
  stdout: ''
  timestamp: 1659795075
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the array list of those.\n    // Separate groups\
    \ are balanced (each open brace is properly closed) and not nested within each\
    \ other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"\
    ( ) (( )) (( )( ))\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        StringBuilder sb = new StringBuilder();\n\
    \        int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            char c = paren_string.charAt(i);\n            if (c == '(') {\n\
    \                count++;\n            } else if (c == ')') {\n              \
    \  count--;\n            }\n            if (count == 0) {\n                result.add(sb.toString());\n\
    \                sb = new StringBuilder();\n            } else {\n           \
    \     sb.append(c);\n            }\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5cp0o0ag.java:36)\n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the array list of those.\n    // Separate groups\
    \ are balanced (each open brace is properly closed) and not nested within each\
    \ other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"\
    ( ) (( )) (( )( ))\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                count--;\n\
    \            }\n            if (count == 0) {\n                end = i;\n    \
    \            result.add(paren_string.substring(start, end + 1));\n           \
    \     start = end + 1;\n            }\n        }\n        return result;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfz3yjplm.java:35)\n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the array list of those.\n    // Separate groups\
    \ are balanced (each open brace is properly closed) and not nested within each\
    \ other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"\
    ( ) (( )) (( )( ))\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int open = 0;\n        int close = 0;\n        for (int i = 0; i < paren_string.length();\
    \ i++) {\n            if (paren_string.charAt(i) == '(') {\n                open++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                close++;\n\
    \            }\n            if (open == close) {\n                end = i;\n \
    \               result.add(paren_string.substring(start, end + 1));\n        \
    \        start = end + 1;\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6n_18ueo.java:36)\n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the array list of those.\n    // Separate groups\
    \ are balanced (each open brace is properly closed) and not nested within each\
    \ other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"\
    ( ) (( )) (( )( ))\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int open = 0;\n        int close = 0;\n\
    \        int start = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                open++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                close++;\n\
    \            }\n            if (open == close) {\n                result.add(paren_string.substring(start,\
    \ i + 1));\n                start = i + 1;\n            }\n        }\n       \
    \ return result;\n    }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9_vt21g3.java:34)\n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the array list of those.\n    // Separate groups\
    \ are balanced (each open brace is properly closed) and not nested within each\
    \ other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"\
    ( ) (( )) (( )( ))\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                count--;\n\
    \            }\n            if (count == 0) {\n                end = i;\n    \
    \            result.add(paren_string.substring(start, end + 1));\n           \
    \     start = end + 1;\n            }\n        }\n        return result;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfz3yjplm.java:35)\n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the array list of those.\n    // Separate groups\
    \ are balanced (each open brace is properly closed) and not nested within each\
    \ other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"\
    ( ) (( )) (( )( ))\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                count--;\n\
    \            }\n            if (count == 0) {\n                end = i;\n    \
    \            result.add(paren_string.substring(start, end + 1));\n           \
    \     start = end + 1;\n            }\n        }\n        return result;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfz3yjplm.java:35)\n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the array list of those.\n    // Separate groups\
    \ are balanced (each open brace is properly closed) and not nested within each\
    \ other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"\
    ( ) (( )) (( )( ))\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                if (count\
    \ == 0) {\n                    start = i;\n                }\n               \
    \ count++;\n            } else if (paren_string.charAt(i) == ')') {\n        \
    \        count--;\n                if (count == 0) {\n                    end\
    \ = i;\n                    result.add(paren_string.substring(start, end + 1));\n\
    \                }\n            }\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkrj0003n.java:40)\n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the array list of those.\n    // Separate groups\
    \ are balanced (each open brace is properly closed) and not nested within each\
    \ other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"\
    ( ) (( )) (( )( ))\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                count--;\n\
    \            }\n            if (count == 0) {\n                end = i;\n    \
    \            result.add(paren_string.substring(start, end + 1));\n           \
    \     start = end + 1;\n            }\n        }\n        return result;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfz3yjplm.java:35)\n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the array list of those.\n    // Separate groups\
    \ are balanced (each open brace is properly closed) and not nested within each\
    \ other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"\
    ( ) (( )) (( )( ))\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                if (count\
    \ == 0) {\n                    start = i;\n                }\n               \
    \ count++;\n            } else if (paren_string.charAt(i) == ')') {\n        \
    \        count--;\n                if (count == 0) {\n                    end\
    \ = i;\n                    result.add(paren_string.substring(start, end + 1));\n\
    \                }\n            }\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkrj0003n.java:40)\n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the array list of those.\n    // Separate groups\
    \ are balanced (each open brace is properly closed) and not nested within each\
    \ other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"\
    ( ) (( )) (( )( ))\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                count--;\n\
    \            }\n            if (count == 0) {\n                end = i;\n    \
    \            result.add(paren_string.substring(start, end + 1));\n           \
    \     start = end + 1;\n            }\n        }\n        return result;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfz3yjplm.java:35)\n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the array list of those.\n    // Separate groups\
    \ are balanced (each open brace is properly closed) and not nested within each\
    \ other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"\
    ( ) (( )) (( )( ))\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                count--;\n\
    \            }\n            if (count == 0) {\n                result.add(paren_string.substring(start,\
    \ i + 1));\n                start = i + 1;\n            }\n        }\n       \
    \ return result;\n    }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3ap6c72o.java:34)\n"
  stdout: ''
  timestamp: 1659795075
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the array list of those.\n    // Separate groups\
    \ are balanced (each open brace is properly closed) and not nested within each\
    \ other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"\
    ( ) (( )) (( )( ))\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int open = 0;\n        int close = 0;\n        for (int i = 0; i < paren_string.length();\
    \ i++) {\n            if (paren_string.charAt(i) == '(') {\n                open++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                close++;\n\
    \            }\n            if (open == close) {\n                end = i;\n \
    \               result.add(paren_string.substring(start, end + 1));\n        \
    \        start = end + 1;\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6n_18ueo.java:36)\n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the array list of those.\n    // Separate groups\
    \ are balanced (each open brace is properly closed) and not nested within each\
    \ other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"\
    ( ) (( )) (( )( ))\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        StringBuilder sb = new StringBuilder();\n\
    \        int open = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            char c = paren_string.charAt(i);\n            if (c == '(') {\n\
    \                open++;\n                sb.append(c);\n            } else if\
    \ (c == ')') {\n                open--;\n                sb.append(c);\n     \
    \       }\n            if (open == 0) {\n                result.add(sb.toString());\n\
    \                sb = new StringBuilder();\n            }\n        }\n       \
    \ return result;\n    }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppn89dhc4.java:36)\n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the array list of those.\n    // Separate groups\
    \ are balanced (each open brace is properly closed) and not nested within each\
    \ other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"\
    ( ) (( )) (( )( ))\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                count--;\n\
    \            }\n            if (count == 0) {\n                end = i;\n    \
    \            result.add(paren_string.substring(start, end + 1));\n           \
    \     start = end + 1;\n            }\n        }\n        return result;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfz3yjplm.java:35)\n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the array list of those.\n    // Separate groups\
    \ are balanced (each open brace is properly closed) and not nested within each\
    \ other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"\
    ( ) (( )) (( )( ))\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                count--;\n\
    \            }\n            if (count == 0) {\n                end = i;\n    \
    \            result.add(paren_string.substring(start, end + 1));\n           \
    \     start = end + 1;\n            }\n        }\n        return result;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfz3yjplm.java:35)\n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the array list of those.\n    // Separate groups\
    \ are balanced (each open brace is properly closed) and not nested within each\
    \ other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"\
    ( ) (( )) (( )( ))\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> groups\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       for (int i = 0; i < paren_string.length(); i++) {\n            if (paren_string.charAt(i)\
    \ == '(') {\n                start = i;\n            }\n            if (paren_string.charAt(i)\
    \ == ')') {\n                end = i;\n                groups.add(paren_string.substring(start,\
    \ end + 1));\n            }\n        }\n        return groups;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(separateParenGroups((\"(()())\
    \ ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprnocu70r.java:31)\n"
  stdout: ''
  timestamp: 1659795075
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the array list of those.\n    // Separate groups\
    \ are balanced (each open brace is properly closed) and not nested within each\
    \ other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"\
    ( ) (( )) (( )( ))\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                count--;\n\
    \            }\n            if (count == 0) {\n                end = i;\n    \
    \            result.add(paren_string.substring(start, end + 1));\n           \
    \     start = end + 1;\n            }\n        }\n        return result;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfz3yjplm.java:35)\n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the array list of those.\n    // Separate groups\
    \ are balanced (each open brace is properly closed) and not nested within each\
    \ other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"\
    ( ) (( )) (( )( ))\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        // TODO: Implement this\
    \ function\n        return null;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"(()())\", (String)\"((()))\", (String)\"\
    ()\", (String)\"((())()())\")))));\n    assert(separateParenGroups((\"() (())\
    \ ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"()\"\
    , (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.separateParenGroups(String)\"\
    \ is null\n\tat Problem.main(tmp5_2rp314.java:20)\n"
  stdout: ''
  timestamp: 1659795075
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the array list of those.\n    // Separate groups\
    \ are balanced (each open brace is properly closed) and not nested within each\
    \ other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"\
    ( ) (( )) (( )( ))\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                if (count\
    \ == 0) {\n                    start = i;\n                }\n               \
    \ count++;\n            } else if (paren_string.charAt(i) == ')') {\n        \
    \        count--;\n                if (count == 0) {\n                    end\
    \ = i;\n                    result.add(paren_string.substring(start, end + 1));\n\
    \                }\n            }\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkrj0003n.java:40)\n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the array list of those.\n    // Separate groups\
    \ are balanced (each open brace is properly closed) and not nested within each\
    \ other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"\
    ( ) (( )) (( )( ))\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                if (count\
    \ == 0) {\n                    start = i;\n                }\n               \
    \ count++;\n            } else if (paren_string.charAt(i) == ')') {\n        \
    \        count--;\n                if (count == 0) {\n                    end\
    \ = i;\n                    result.add(paren_string.substring(start, end + 1));\n\
    \                }\n            }\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkrj0003n.java:40)\n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the array list of those.\n    // Separate groups\
    \ are balanced (each open brace is properly closed) and not nested within each\
    \ other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"\
    ( ) (( )) (( )( ))\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                count--;\n\
    \            }\n            if (count == 0) {\n                end = i;\n    \
    \            result.add(paren_string.substring(start, end + 1));\n           \
    \     start = end + 1;\n            }\n        }\n        return result;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfz3yjplm.java:35)\n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the array list of those.\n    // Separate groups\
    \ are balanced (each open brace is properly closed) and not nested within each\
    \ other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"\
    ( ) (( )) (( )( ))\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> ret =\
    \ new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n   \
    \     int open = 0;\n        int close = 0;\n        for (int i = 0; i < paren_string.length();\
    \ i++) {\n            if (paren_string.charAt(i) == '(') {\n                open++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                close++;\n\
    \            }\n            if (open == close) {\n                ret.add(paren_string.substring(start,\
    \ i + 1));\n                start = i + 1;\n            }\n        }\n       \
    \ return ret;\n    }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpn4gavww8.java:35)\n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the array list of those.\n    // Separate groups\
    \ are balanced (each open brace is properly closed) and not nested within each\
    \ other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"\
    ( ) (( )) (( )( ))\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> paren_groups\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int open_parens = 0;\n        int close_parens = 0;\n        for (int\
    \ i = 0; i < paren_string.length(); i++) {\n            if (paren_string.charAt(i)\
    \ == '(') {\n                open_parens++;\n            } else if (paren_string.charAt(i)\
    \ == ')') {\n                close_parens++;\n            }\n            if (open_parens\
    \ == close_parens) {\n                end = i;\n                paren_groups.add(paren_string.substring(start,\
    \ end + 1));\n                start = end + 1;\n                open_parens =\
    \ 0;\n                close_parens = 0;\n            }\n        }\n        return\
    \ paren_groups;\n    }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpica8di8c.java:38)\n"
  stdout: ''
  timestamp: 1659795075
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the array list of those.\n    // Separate groups\
    \ are balanced (each open brace is properly closed) and not nested within each\
    \ other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"\
    ( ) (( )) (( )( ))\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int i = 0;\n        while (i < paren_string.length())\
    \ {\n            int j = i;\n            int count = 0;\n            while (j\
    \ < paren_string.length()) {\n                if (paren_string.charAt(j) == '(')\
    \ {\n                    count++;\n                } else if (paren_string.charAt(j)\
    \ == ')') {\n                    count--;\n                }\n               \
    \ if (count == 0) {\n                    break;\n                }\n         \
    \       j++;\n            }\n            result.add(paren_string.substring(i,\
    \ j + 1));\n            i = j + 1;\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_10gp0e_.java:38)\n"
  stdout: ''
  timestamp: 1659795075
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the array list of those.\n    // Separate groups\
    \ are balanced (each open brace is properly closed) and not nested within each\
    \ other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"\
    ( ) (( )) (( )( ))\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                count--;\n\
    \            }\n            if (count == 0) {\n                end = i;\n    \
    \            result.add(paren_string.substring(start, end + 1));\n           \
    \     start = end + 1;\n            }\n        }\n        return result;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfz3yjplm.java:35)\n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the array list of those.\n    // Separate groups\
    \ are balanced (each open brace is properly closed) and not nested within each\
    \ other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"\
    ( ) (( )) (( )( ))\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                if (count\
    \ == 0) {\n                    start = i;\n                }\n               \
    \ count++;\n            } else if (paren_string.charAt(i) == ')') {\n        \
    \        count--;\n                if (count == 0) {\n                    end\
    \ = i;\n                    result.add(paren_string.substring(start, end + 1));\n\
    \                }\n            }\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkrj0003n.java:40)\n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the array list of those.\n    // Separate groups\
    \ are balanced (each open brace is properly closed) and not nested within each\
    \ other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"\
    ( ) (( )) (( )( ))\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                count--;\n\
    \            }\n            if (count == 0) {\n                end = i;\n    \
    \            result.add(paren_string.substring(start, end + 1));\n           \
    \     start = end + 1;\n            }\n        }\n        return result;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfz3yjplm.java:35)\n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the array list of those.\n    // Separate groups\
    \ are balanced (each open brace is properly closed) and not nested within each\
    \ other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"\
    ( ) (( )) (( )( ))\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> groups\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                if (count\
    \ == 0) {\n                    start = i;\n                }\n               \
    \ count++;\n            } else if (paren_string.charAt(i) == ')') {\n        \
    \        count--;\n                if (count == 0) {\n                    end\
    \ = i;\n                    groups.add(paren_string.substring(start, end + 1));\n\
    \                }\n            }\n        }\n        return groups;\n    }\n\
    \    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0gf147ko.java:40)\n"
  stdout: ''
  timestamp: 1659795075
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the array list of those.\n    // Separate groups\
    \ are balanced (each open brace is properly closed) and not nested within each\
    \ other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"\
    ( ) (( )) (( )( ))\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int open = 0;\n        int close = 0;\n\
    \        int start = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                open++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                close++;\n\
    \            }\n            if (open == close) {\n                result.add(paren_string.substring(start,\
    \ i + 1));\n                start = i + 1;\n            }\n        }\n       \
    \ return result;\n    }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9_vt21g3.java:34)\n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the array list of those.\n    // Separate groups\
    \ are balanced (each open brace is properly closed) and not nested within each\
    \ other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"\
    ( ) (( )) (( )( ))\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                count--;\n\
    \            }\n            if (count == 0) {\n                end = i;\n    \
    \            result.add(paren_string.substring(start, end + 1));\n           \
    \     start = end + 1;\n            }\n        }\n        return result;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfz3yjplm.java:35)\n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the array list of those.\n    // Separate groups\
    \ are balanced (each open brace is properly closed) and not nested within each\
    \ other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"\
    ( ) (( )) (( )( ))\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                count--;\n\
    \            }\n            if (count == 0) {\n                end = i;\n    \
    \            result.add(paren_string.substring(start, end + 1));\n           \
    \     start = end + 1;\n            }\n        }\n        return result;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfz3yjplm.java:35)\n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the array list of those.\n    // Separate groups\
    \ are balanced (each open brace is properly closed) and not nested within each\
    \ other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"\
    ( ) (( )) (( )( ))\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int open = 0;\n        int start = 0;\n\
    \        for (int i = 0; i < paren_string.length(); i++) {\n            if (paren_string.charAt(i)\
    \ == '(') {\n                open++;\n            } else if (paren_string.charAt(i)\
    \ == ')') {\n                open--;\n            }\n            if (open == 0)\
    \ {\n                result.add(paren_string.substring(start, i + 1));\n     \
    \           start = i + 1;\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfvagpzuc.java:33)\n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the array list of those.\n    // Separate groups\
    \ are balanced (each open brace is properly closed) and not nested within each\
    \ other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"\
    ( ) (( )) (( )( ))\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                if (count\
    \ == 0) {\n                    start = i;\n                }\n               \
    \ count++;\n            } else if (paren_string.charAt(i) == ')') {\n        \
    \        count--;\n                if (count == 0) {\n                    end\
    \ = i;\n                    result.add(paren_string.substring(start, end + 1));\n\
    \                }\n            }\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkrj0003n.java:40)\n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the array list of those.\n    // Separate groups\
    \ are balanced (each open brace is properly closed) and not nested within each\
    \ other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"\
    ( ) (( )) (( )( ))\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> ret =\
    \ new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n   \
    \     int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                if (count\
    \ == 0) {\n                    start = i;\n                }\n               \
    \ count++;\n            } else if (paren_string.charAt(i) == ')') {\n        \
    \        count--;\n                if (count == 0) {\n                    end\
    \ = i;\n                    ret.add(paren_string.substring(start, end + 1));\n\
    \                }\n            }\n        }\n        return ret;\n    }\n   \
    \ public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo44yf2cl.java:40)\n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the array list of those.\n    // Separate groups\
    \ are balanced (each open brace is properly closed) and not nested within each\
    \ other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"\
    ( ) (( )) (( )( ))\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                count--;\n\
    \            }\n            if (count == 0) {\n                end = i;\n    \
    \            result.add(paren_string.substring(start, end + 1));\n           \
    \     start = end + 1;\n            }\n        }\n        return result;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfz3yjplm.java:35)\n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the array list of those.\n    // Separate groups\
    \ are balanced (each open brace is properly closed) and not nested within each\
    \ other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"\
    ( ) (( )) (( )( ))\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int open = 0;\n        int close = 0;\n\
    \        int start = 0;\n        int end = 0;\n        for (int i = 0; i < paren_string.length();\
    \ i++) {\n            if (paren_string.charAt(i) == '(') {\n                open++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                close++;\n\
    \            }\n            if (open == close) {\n                end = i;\n \
    \               result.add(paren_string.substring(start, end + 1));\n        \
    \        start = end + 1;\n                open = 0;\n                close =\
    \ 0;\n            }\n        }\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(separateParenGroups((\"(()()) ((()))\
    \ () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()())\"\
    , (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2um43p83.java:38)\n"
  stdout: ''
  timestamp: 1659795075
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the array list of those.\n    // Separate groups\
    \ are balanced (each open brace is properly closed) and not nested within each\
    \ other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"\
    ( ) (( )) (( )( ))\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int open = 0;\n        int start = 0;\n\
    \        for (int i = 0; i < paren_string.length(); i++) {\n            if (paren_string.charAt(i)\
    \ == '(') {\n                open++;\n            } else if (paren_string.charAt(i)\
    \ == ')') {\n                open--;\n            }\n            if (open == 0)\
    \ {\n                result.add(paren_string.substring(start, i + 1));\n     \
    \           start = i + 1;\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfvagpzuc.java:33)\n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the array list of those.\n    // Separate groups\
    \ are balanced (each open brace is properly closed) and not nested within each\
    \ other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"\
    ( ) (( )) (( )( ))\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> ret =\
    \ new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n   \
    \     for (int i = 0; i < paren_string.length(); i++) {\n            if (paren_string.charAt(i)\
    \ == '(') {\n                start = i;\n            }\n            if (paren_string.charAt(i)\
    \ == ')') {\n                end = i;\n                ret.add(paren_string.substring(start,\
    \ end + 1));\n            }\n        }\n        return ret;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(separateParenGroups((\"(()())\
    \ ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpp4ym75pa.java:31)\n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the array list of those.\n    // Separate groups\
    \ are balanced (each open brace is properly closed) and not nested within each\
    \ other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"\
    ( ) (( )) (( )( ))\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int open = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                open++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                open--;\n\
    \            }\n            if (open == 0) {\n                end = i;\n     \
    \           result.add(paren_string.substring(start, end + 1));\n            \
    \    start = end + 1;\n            }\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmbml2hvw.java:35)\n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the array list of those.\n    // Separate groups\
    \ are balanced (each open brace is properly closed) and not nested within each\
    \ other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"\
    ( ) (( )) (( )( ))\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                count--;\n\
    \            }\n            if (count == 0) {\n                end = i;\n    \
    \            result.add(paren_string.substring(start, end + 1));\n           \
    \     start = end + 1;\n            }\n        }\n        return result;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfz3yjplm.java:35)\n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the array list of those.\n    // Separate groups\
    \ are balanced (each open brace is properly closed) and not nested within each\
    \ other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"\
    ( ) (( )) (( )( ))\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        StringBuilder sb = new StringBuilder();\n\
    \        int open = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            char c = paren_string.charAt(i);\n            if (c == '(') {\n\
    \                open++;\n                sb.append(c);\n            } else if\
    \ (c == ')') {\n                open--;\n                sb.append(c);\n     \
    \       }\n            if (open == 0) {\n                result.add(sb.toString());\n\
    \                sb = new StringBuilder();\n            }\n        }\n       \
    \ return result;\n    }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppn89dhc4.java:36)\n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the array list of those.\n    // Separate groups\
    \ are balanced (each open brace is properly closed) and not nested within each\
    \ other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"\
    ( ) (( )) (( )( ))\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                count--;\n\
    \            }\n            if (count == 0) {\n                end = i;\n    \
    \            result.add(paren_string.substring(start, end + 1));\n           \
    \     start = end + 1;\n            }\n        }\n        return result;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfz3yjplm.java:35)\n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the array list of those.\n    // Separate groups\
    \ are balanced (each open brace is properly closed) and not nested within each\
    \ other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"\
    ( ) (( )) (( )( ))\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                count--;\n\
    \            }\n            if (count == 0) {\n                end = i;\n    \
    \            result.add(paren_string.substring(start, end + 1));\n           \
    \     start = end + 1;\n            }\n        }\n        return result;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfz3yjplm.java:35)\n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the array list of those.\n    // Separate groups\
    \ are balanced (each open brace is properly closed) and not nested within each\
    \ other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"\
    ( ) (( )) (( )( ))\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                if (count\
    \ == 0) {\n                    start = i;\n                }\n               \
    \ count++;\n            } else if (paren_string.charAt(i) == ')') {\n        \
    \        count--;\n                if (count == 0) {\n                    end\
    \ = i;\n                    result.add(paren_string.substring(start, end + 1));\n\
    \                }\n            }\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkrj0003n.java:40)\n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the array list of those.\n    // Separate groups\
    \ are balanced (each open brace is properly closed) and not nested within each\
    \ other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"\
    ( ) (( )) (( )( ))\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                count--;\n\
    \            }\n            if (count == 0) {\n                result.add(paren_string.substring(start,\
    \ i + 1));\n                start = i + 1;\n            }\n        }\n       \
    \ return result;\n    }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3ap6c72o.java:34)\n"
  stdout: ''
  timestamp: 1659795075
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the array list of those.\n    // Separate groups\
    \ are balanced (each open brace is properly closed) and not nested within each\
    \ other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"\
    ( ) (( )) (( )( ))\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                count--;\n\
    \            }\n            if (count == 0) {\n                end = i;\n    \
    \            result.add(paren_string.substring(start, end + 1));\n           \
    \     start = end + 1;\n            }\n        }\n        return result;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfz3yjplm.java:35)\n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the array list of those.\n    // Separate groups\
    \ are balanced (each open brace is properly closed) and not nested within each\
    \ other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"\
    ( ) (( )) (( )( ))\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                if (count\
    \ == 0) {\n                    start = i;\n                }\n               \
    \ count++;\n            } else if (paren_string.charAt(i) == ')') {\n        \
    \        count--;\n                if (count == 0) {\n                    end\
    \ = i;\n                    result.add(paren_string.substring(start, end + 1));\n\
    \                }\n            }\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkrj0003n.java:40)\n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the array list of those.\n    // Separate groups\
    \ are balanced (each open brace is properly closed) and not nested within each\
    \ other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"\
    ( ) (( )) (( )( ))\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int open = 0;\n        int close = 0;\n        for (int i = 0; i < paren_string.length();\
    \ i++) {\n            if (paren_string.charAt(i) == '(') {\n                open++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                close++;\n\
    \            }\n            if (open == close) {\n                end = i;\n \
    \               result.add(paren_string.substring(start, end + 1));\n        \
    \        start = end + 1;\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6n_18ueo.java:36)\n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the array list of those.\n    // Separate groups\
    \ are balanced (each open brace is properly closed) and not nested within each\
    \ other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"\
    ( ) (( )) (( )( ))\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                if (count\
    \ == 0) {\n                    start = i;\n                }\n               \
    \ count++;\n            } else if (paren_string.charAt(i) == ')') {\n        \
    \        count--;\n                if (count == 0) {\n                    end\
    \ = i;\n                    result.add(paren_string.substring(start, end + 1));\n\
    \                }\n            }\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkrj0003n.java:40)\n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the array list of those.\n    // Separate groups\
    \ are balanced (each open brace is properly closed) and not nested within each\
    \ other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"\
    ( ) (( )) (( )( ))\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int open = 0;\n        int close = 0;\n        for (int i = 0; i < paren_string.length();\
    \ i++) {\n            if (paren_string.charAt(i) == '(') {\n                open++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                close++;\n\
    \            }\n            if (open == close) {\n                end = i;\n \
    \               result.add(paren_string.substring(start, end + 1));\n        \
    \        start = end + 1;\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6n_18ueo.java:36)\n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the array list of those.\n    // Separate groups\
    \ are balanced (each open brace is properly closed) and not nested within each\
    \ other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"\
    ( ) (( )) (( )( ))\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                if (count\
    \ == 0) {\n                    start = i;\n                }\n               \
    \ count++;\n            } else if (paren_string.charAt(i) == ')') {\n        \
    \        count--;\n                if (count == 0) {\n                    end\
    \ = i;\n                    result.add(paren_string.substring(start, end + 1));\n\
    \                }\n            }\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkrj0003n.java:40)\n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the array list of those.\n    // Separate groups\
    \ are balanced (each open brace is properly closed) and not nested within each\
    \ other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"\
    ( ) (( )) (( )( ))\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                if (count\
    \ == 0) {\n                    start = i;\n                }\n               \
    \ count++;\n            } else if (paren_string.charAt(i) == ')') {\n        \
    \        count--;\n                if (count == 0) {\n                    end\
    \ = i;\n                    result.add(paren_string.substring(start, end + 1));\n\
    \                }\n            }\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkrj0003n.java:40)\n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the array list of those.\n    // Separate groups\
    \ are balanced (each open brace is properly closed) and not nested within each\
    \ other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"\
    ( ) (( )) (( )( ))\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                if (count\
    \ == 0) {\n                    start = i;\n                }\n               \
    \ count++;\n            } else if (paren_string.charAt(i) == ')') {\n        \
    \        count--;\n                if (count == 0) {\n                    end\
    \ = i;\n                    result.add(paren_string.substring(start, end + 1));\n\
    \                }\n            }\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkrj0003n.java:40)\n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the array list of those.\n    // Separate groups\
    \ are balanced (each open brace is properly closed) and not nested within each\
    \ other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"\
    ( ) (( )) (( )( ))\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int open = 0;\n        int close = 0;\n\
    \        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i <\
    \ paren_string.length(); i++) {\n            if (paren_string.charAt(i) == '(')\
    \ {\n                open++;\n                sb.append('(');\n            } else\
    \ if (paren_string.charAt(i) == ')') {\n                close++;\n           \
    \     sb.append(')');\n            }\n            if (open == close) {\n     \
    \           result.add(sb.toString());\n                sb = new StringBuilder();\n\
    \                open = 0;\n                close = 0;\n            }\n      \
    \  }\n        return result;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"(()())\", (String)\"((()))\", (String)\"\
    ()\", (String)\"((())()())\")))));\n    assert(separateParenGroups((\"() (())\
    \ ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"()\"\
    , (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp__75kuf_.java:38)\n"
  stdout: ''
  timestamp: 1659795075
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the array list of those.\n    // Separate groups\
    \ are balanced (each open brace is properly closed) and not nested within each\
    \ other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"\
    ( ) (( )) (( )( ))\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                count--;\n\
    \            }\n            if (count == 0) {\n                end = i;\n    \
    \            result.add(paren_string.substring(start, end + 1));\n           \
    \     start = end + 1;\n            }\n        }\n        return result;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfz3yjplm.java:35)\n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the array list of those.\n    // Separate groups\
    \ are balanced (each open brace is properly closed) and not nested within each\
    \ other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"\
    ( ) (( )) (( )( ))\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int open = 0;\n        int close = 0;\n        for (int i = 0; i < paren_string.length();\
    \ i++) {\n            if (paren_string.charAt(i) == '(') {\n                open++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                close++;\n\
    \            }\n            if (open == close) {\n                end = i;\n \
    \               result.add(paren_string.substring(start, end + 1));\n        \
    \        start = end + 1;\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6n_18ueo.java:36)\n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the array list of those.\n    // Separate groups\
    \ are balanced (each open brace is properly closed) and not nested within each\
    \ other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"\
    ( ) (( )) (( )( ))\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                count--;\n\
    \            }\n            if (count == 0) {\n                result.add(paren_string.substring(start,\
    \ i + 1));\n                start = i + 1;\n            }\n        }\n       \
    \ return result;\n    }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3ap6c72o.java:34)\n"
  stdout: ''
  timestamp: 1659795075
