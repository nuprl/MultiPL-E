language: java
name: HumanEval_49_modp
results:
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        long res = 1;\n        while (n > 0) {\n   \
    \         if ((n & 1) == 1) {\n                res = (res * 2) % p;\n        \
    \    }\n            n >>= 1;\n        }\n        return res;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(modp((3l), (5l)) == (3l));\n \
    \   assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) == (1l));\n\
    \    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l)) == (1l));\n\
    \    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplclmgb1l.java:31)\n"
  stdout: ''
  timestamp: 1659800151
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n == 0) {\n            return 1;\n     \
    \   }\n        if (n % 2 == 0) {\n            long t = modp(n / 2, p);\n     \
    \       return (t * t) % p;\n        } else {\n            return (modp(n - 1,\
    \ p) * n) % p;\n        }\n    }\n    public static void main(String[] args) {\n\
    \    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n\
    \    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n\
    \    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n\
    \    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpx3c_4x8r.java:33)\n"
  stdout: ''
  timestamp: 1659800151
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n == 0) {\n            return 1;\n     \
    \   }\n        long res = modp(n / 2, p);\n        res = (res * res) % p;\n  \
    \      if (n % 2 == 1) {\n            res = (res * 2) % p;\n        }\n      \
    \  return res;\n    }\n    public static void main(String[] args) {\n    assert(modp((3l),\
    \ (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800151
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n == 0) {\n            return 1;\n     \
    \   }\n        if (n == 1) {\n            return n;\n        }\n        long half\
    \ = modp(n / 2, p);\n        long half_sq = (half * half) % p;\n        if (n\
    \ % 2 == 0) {\n            return half_sq;\n        } else {\n            return\
    \ (half_sq * n) % p;\n        }\n    }\n    public static void main(String[] args)\
    \ {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) ==\
    \ (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpagolayka.java:37)\n"
  stdout: ''
  timestamp: 1659800151
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n == 0) {\n            return 1;\n     \
    \   }\n        if (n % 2 == 0) {\n            long x = modp(n / 2, p);\n     \
    \       return (x * x) % p;\n        } else {\n            return (modp(n - 1,\
    \ p) * n) % p;\n        }\n    }\n    public static void main(String[] args) {\n\
    \    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n\
    \    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n\
    \    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n\
    \    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnjyrzm0w.java:33)\n"
  stdout: ''
  timestamp: 1659800151
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n == 0) {\n            return 1;\n     \
    \   }\n        if (n % 2 == 0) {\n            return modp(n / 2, p) * modp(n /\
    \ 2, p) % p;\n        } else {\n            return modp(n / 2, p) * modp(n / 2,\
    \ p) * n % p;\n        }\n    }\n    public static void main(String[] args) {\n\
    \    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n\
    \    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n\
    \    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n\
    \    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_urov2b_.java:32)\n"
  stdout: ''
  timestamp: 1659800151
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n == 0) {\n            return 1;\n     \
    \   }\n        if (n % 2 == 0) {\n            long x = modp(n / 2, p);\n     \
    \       return (x * x) % p;\n        } else {\n            return (n * modp(n\
    \ - 1, p)) % p;\n        }\n    }\n    public static void main(String[] args)\
    \ {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) ==\
    \ (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo_17hrjg.java:33)\n"
  stdout: ''
  timestamp: 1659800151
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n == 0) {\n            return 1;\n     \
    \   }\n        if (n % 2 == 0) {\n            return modp(n / 2, p) * modp(n /\
    \ 2, p) % p;\n        } else {\n            return modp(n / 2, p) * modp(n / 2,\
    \ p) * n % p;\n        }\n    }\n    public static void main(String[] args) {\n\
    \    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n\
    \    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n\
    \    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n\
    \    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_urov2b_.java:32)\n"
  stdout: ''
  timestamp: 1659800151
- exit_code: -1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        long res = 1;\n        while (n > 0) {\n   \
    \         if ((n & 1) != 0) {\n                res = (res * n) % p;\n        \
    \    }\n            n = n >> 1;\n            n = (n * n) % p;\n        }\n   \
    \     return res;\n    }\n    public static void main(String[] args) {\n    assert(modp((3l),\
    \ (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659800156
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n == 0) {\n            return 1;\n     \
    \   }\n        if (n % 2 == 0) {\n            long t = modp(n / 2, p);\n     \
    \       return (t * t) % p;\n        } else {\n            return (modp(n - 1,\
    \ p) * n) % p;\n        }\n    }\n    public static void main(String[] args) {\n\
    \    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n\
    \    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n\
    \    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n\
    \    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpx3c_4x8r.java:33)\n"
  stdout: ''
  timestamp: 1659800151
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        long res = 1;\n        long b = 2;\n       \
    \ while (n > 0) {\n            if ((n & 1) == 1) {\n                res = (res\
    \ * b) % p;\n            }\n            b = (b * b) % p;\n            n >>= 1;\n\
    \        }\n        return res;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) ==\
    \ (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800151
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n == 0) {\n            return 1;\n     \
    \   }\n        if (n % 2 == 0) {\n            long t = modp(n / 2, p);\n     \
    \       return (t * t) % p;\n        } else {\n            return (modp(n - 1,\
    \ p) * n) % p;\n        }\n    }\n    public static void main(String[] args) {\n\
    \    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n\
    \    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n\
    \    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n\
    \    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpx3c_4x8r.java:33)\n"
  stdout: ''
  timestamp: 1659800151
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        long result = 1;\n        while (n > 0) {\n\
    \            if ((n & 1) == 1) {\n                result = (result * 2) % p;\n\
    \            }\n            n >>= 1;\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(modp((3l), (5l)) ==\
    \ (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l))\
    \ == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l))\
    \ == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l))\
    \ == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdkkxf261.java:31)\n"
  stdout: ''
  timestamp: 1659800151
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        long res = 1;\n        for (int i = 0; i < n;\
    \ i++) {\n            res = (res * 2) % p;\n        }\n        return res;\n \
    \   }\n    public static void main(String[] args) {\n    assert(modp((3l), (5l))\
    \ == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800151
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n == 0) {\n            return 1;\n     \
    \   }\n        if (n % 2 == 0) {\n            long x = modp(n / 2, p);\n     \
    \       return (x * x) % p;\n        } else {\n            return (n * modp(n\
    \ - 1, p)) % p;\n        }\n    }\n    public static void main(String[] args)\
    \ {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) ==\
    \ (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo_17hrjg.java:33)\n"
  stdout: ''
  timestamp: 1659800151
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        long result = 1;\n        long base = n % p;\n\
    \        long exponent = n;\n        while (exponent > 0) {\n            if ((exponent\
    \ & 1) == 1) {\n                result = (result * base) % p;\n            }\n\
    \            exponent >>= 1;\n            base = (base * base) % p;\n        }\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n\
    \    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n\
    \    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n\
    \    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmph0row4t8.java:34)\n"
  stdout: ''
  timestamp: 1659800151
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n == 0) {\n            return 1;\n     \
    \   }\n        if (n % 2 == 0) {\n            long x = modp(n / 2, p);\n     \
    \       return (x * x) % p;\n        } else {\n            return (modp(n - 1,\
    \ p) * n) % p;\n        }\n    }\n    public static void main(String[] args) {\n\
    \    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n\
    \    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n\
    \    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n\
    \    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnjyrzm0w.java:33)\n"
  stdout: ''
  timestamp: 1659800151
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        long result = 1;\n        long base = n % p;\n\
    \        long exponent = n;\n        while (exponent > 0) {\n            if ((exponent\
    \ & 1) == 1) {\n                result = (result * base) % p;\n            }\n\
    \            exponent >>= 1;\n            base = (base * base) % p;\n        }\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n\
    \    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n\
    \    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n\
    \    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmph0row4t8.java:34)\n"
  stdout: ''
  timestamp: 1659800151
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n == 0) {\n            return 1;\n     \
    \   }\n        if (n % 2 == 0) {\n            long k = modp(n / 2, p);\n     \
    \       return (k * k) % p;\n        } else {\n            return (modp(n - 1,\
    \ p) * n) % p;\n        }\n    }\n    public static void main(String[] args) {\n\
    \    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n\
    \    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n\
    \    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n\
    \    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0dpwoyt8.java:33)\n"
  stdout: ''
  timestamp: 1659800151
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n == 0) {\n            return 1;\n     \
    \   }\n        if (n == 1) {\n            return n;\n        }\n        long x\
    \ = modp(n / 2, p);\n        if (n % 2 == 0) {\n            return (x * x) % p;\n\
    \        } else {\n            return (((x * x) % p) * n) % p;\n        }\n  \
    \  }\n    public static void main(String[] args) {\n    assert(modp((3l), (5l))\
    \ == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvzbbsi29.java:36)\n"
  stdout: ''
  timestamp: 1659800151
- exit_code: -1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n == 0) return 1;\n        if (n == 1) return\
    \ n;\n        long res = 1;\n        while (n > 0) {\n            if ((n & 1)\
    \ == 1) {\n                res = (res * n) % p;\n            }\n            n\
    \ = n >> 1;\n            n = (n * n) % p;\n        }\n        return res;\n  \
    \  }\n    public static void main(String[] args) {\n    assert(modp((3l), (5l))\
    \ == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659800156
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n == 0) {\n            return 1;\n     \
    \   }\n        if (n == 1) {\n            return n;\n        }\n        long half\
    \ = modp(n / 2, p);\n        long half_sq = (half * half) % p;\n        if (n\
    \ % 2 == 0) {\n            return half_sq;\n        } else {\n            return\
    \ (half_sq * n) % p;\n        }\n    }\n    public static void main(String[] args)\
    \ {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) ==\
    \ (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpagolayka.java:37)\n"
  stdout: ''
  timestamp: 1659800151
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        long r = 1;\n        while (n > 0) {\n     \
    \       if ((n & 1) == 1) {\n                r = (r * 2) % p;\n            }\n\
    \            n = n >> 1;\n        }\n        return r;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l),\
    \ (101l)) == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l),\
    \ (11l)) == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwmoksddk.java:31)\n"
  stdout: ''
  timestamp: 1659800151
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        long res = 1;\n        while (n > 0) {\n   \
    \         if ((n & 1) == 1) {\n                res = (res * 2) % p;\n        \
    \    }\n            n >>= 1;\n        }\n        return res;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(modp((3l), (5l)) == (3l));\n \
    \   assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) == (1l));\n\
    \    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l)) == (1l));\n\
    \    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplclmgb1l.java:31)\n"
  stdout: ''
  timestamp: 1659800151
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n == 0) {\n            return 1;\n     \
    \   }\n        if (n == 1) {\n            return n;\n        }\n        long half\
    \ = modp(n / 2, p);\n        if (n % 2 == 0) {\n            return (half * half)\
    \ % p;\n        } else {\n            return (half * half * n) % p;\n        }\n\
    \    }\n    public static void main(String[] args) {\n    assert(modp((3l), (5l))\
    \ == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpibi5b6_k.java:36)\n"
  stdout: ''
  timestamp: 1659800151
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n == 0) {\n            return 1;\n     \
    \   }\n        if (n % 2 == 0) {\n            long t = modp(n / 2, p);\n     \
    \       return (t * t) % p;\n        } else {\n            return (modp(n - 1,\
    \ p) * n) % p;\n        }\n    }\n    public static void main(String[] args) {\n\
    \    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n\
    \    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n\
    \    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n\
    \    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpx3c_4x8r.java:33)\n"
  stdout: ''
  timestamp: 1659800151
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n == 0) {\n            return 1;\n     \
    \   }\n        if (n % 2 == 0) {\n            long x = modp(n / 2, p);\n     \
    \       return (x * x) % p;\n        } else {\n            return (n * modp(n\
    \ - 1, p)) % p;\n        }\n    }\n    public static void main(String[] args)\
    \ {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) ==\
    \ (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo_17hrjg.java:33)\n"
  stdout: ''
  timestamp: 1659800151
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n == 0) {\n            return 1;\n     \
    \   }\n        if (n % 2 == 0) {\n            return modp(n / 2, p) * modp(n /\
    \ 2, p) % p;\n        } else {\n            return modp(n / 2, p) * modp(n / 2,\
    \ p) * n % p;\n        }\n    }\n    public static void main(String[] args) {\n\
    \    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n\
    \    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n\
    \    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n\
    \    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_urov2b_.java:32)\n"
  stdout: ''
  timestamp: 1659800151
- exit_code: -1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        long res = 1;\n        while (n > 0) {\n   \
    \         if ((n & 1) == 1) {\n                res = (res * n) % p;\n        \
    \    }\n            n = n >> 1;\n            n = (n * n) % p;\n        }\n   \
    \     return res;\n    }\n    public static void main(String[] args) {\n    assert(modp((3l),\
    \ (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659800155
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n == 0) {\n            return 1;\n     \
    \   }\n        if (n % 2 == 0) {\n            return modp(n / 2, p) * modp(n /\
    \ 2, p) % p;\n        } else {\n            return modp(n / 2, p) * modp(n / 2,\
    \ p) * n % p;\n        }\n    }\n    public static void main(String[] args) {\n\
    \    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n\
    \    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n\
    \    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n\
    \    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_urov2b_.java:32)\n"
  stdout: ''
  timestamp: 1659800151
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        long result = 1;\n        long base = n % p;\n\
    \        while (n > 0) {\n            if (n % 2 == 1) {\n                result\
    \ = (result * base) % p;\n            }\n            n = n / 2;\n            base\
    \ = (base * base) % p;\n        }\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l),\
    \ (101l)) == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l),\
    \ (11l)) == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpm9uwb0a1.java:33)\n"
  stdout: ''
  timestamp: 1659800151
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        long result = 1;\n        long base = n % p;\n\
    \        long exponent = n;\n        while (exponent > 0) {\n            if ((exponent\
    \ & 1) == 1) {\n                result = (result * base) % p;\n            }\n\
    \            exponent >>= 1;\n            base = (base * base) % p;\n        }\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n\
    \    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n\
    \    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n\
    \    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmph0row4t8.java:34)\n"
  stdout: ''
  timestamp: 1659800151
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n == 0) {\n            return 1;\n     \
    \   }\n        if (n % 2 == 0) {\n            long x = modp(n / 2, p);\n     \
    \       return (x * x) % p;\n        } else {\n            return (n * modp(n\
    \ - 1, p)) % p;\n        }\n    }\n    public static void main(String[] args)\
    \ {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) ==\
    \ (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo_17hrjg.java:33)\n"
  stdout: ''
  timestamp: 1659800151
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n == 0) {\n            return 1;\n     \
    \   }\n        if (n % 2 == 0) {\n            long x = modp(n / 2, p);\n     \
    \       return (x * x) % p;\n        } else {\n            return (n * modp(n\
    \ - 1, p)) % p;\n        }\n    }\n    public static void main(String[] args)\
    \ {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) ==\
    \ (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo_17hrjg.java:33)\n"
  stdout: ''
  timestamp: 1659800151
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n == 0) {\n            return 1;\n     \
    \   }\n        if (n % 2 == 0) {\n            long x = modp(n / 2, p);\n     \
    \       return (x * x) % p;\n        } else {\n            return (n * modp(n\
    \ - 1, p)) % p;\n        }\n    }\n    public static void main(String[] args)\
    \ {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) ==\
    \ (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo_17hrjg.java:33)\n"
  stdout: ''
  timestamp: 1659800151
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n == 0) {\n            return 1;\n     \
    \   }\n        if (n % 2 == 0) {\n            long t = modp(n / 2, p);\n     \
    \       return (t * t) % p;\n        } else {\n            return (modp(n - 1,\
    \ p) * n) % p;\n        }\n    }\n    public static void main(String[] args) {\n\
    \    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n\
    \    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n\
    \    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n\
    \    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpx3c_4x8r.java:33)\n"
  stdout: ''
  timestamp: 1659800151
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n == 0) {\n            return 1;\n     \
    \   }\n        if (n % 2 == 0) {\n            return modp(n / 2, p) * modp(n /\
    \ 2, p) % p;\n        } else {\n            return modp(n / 2, p) * modp(n / 2,\
    \ p) * n % p;\n        }\n    }\n    public static void main(String[] args) {\n\
    \    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n\
    \    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n\
    \    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n\
    \    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_urov2b_.java:32)\n"
  stdout: ''
  timestamp: 1659800151
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n == 0) {\n            return 1;\n     \
    \   }\n        if (n % 2 == 0) {\n            long x = modp(n / 2, p);\n     \
    \       return (x * x) % p;\n        } else {\n            return (modp(n - 1,\
    \ p) * n) % p;\n        }\n    }\n    public static void main(String[] args) {\n\
    \    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n\
    \    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n\
    \    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n\
    \    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnjyrzm0w.java:33)\n"
  stdout: ''
  timestamp: 1659800151
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n == 0) {\n            return 1;\n     \
    \   }\n        if (n % 2 == 0) {\n            return modp(n / 2, p) * modp(n /\
    \ 2, p) % p;\n        } else {\n            return modp(n / 2, p) * modp(n / 2,\
    \ p) * n % p;\n        }\n    }\n    public static void main(String[] args) {\n\
    \    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n\
    \    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n\
    \    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n\
    \    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_urov2b_.java:32)\n"
  stdout: ''
  timestamp: 1659800151
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n == 0) {\n            return 1;\n     \
    \   }\n        if (n % 2 == 0) {\n            long x = modp(n / 2, p);\n     \
    \       return (x * x) % p;\n        } else {\n            return (n * modp(n\
    \ - 1, p)) % p;\n        }\n    }\n    public static void main(String[] args)\
    \ {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) ==\
    \ (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo_17hrjg.java:33)\n"
  stdout: ''
  timestamp: 1659800151
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        long res = 1;\n        long b = n;\n       \
    \ while (p > 0) {\n            if ((p & 1) == 1) {\n                res = (res\
    \ * b) % MOD;\n            }\n            b = (b * b) % MOD;\n            p >>=\
    \ 1;\n        }\n        return res;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l))\
    \ == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdl9ik85c.java:25: error: cannot find symbol\n                res\
    \ = (res * b) % MOD;\n                                  ^\n  symbol:   variable\
    \ MOD\n  location: class Problem\n/tmp/tmpdl9ik85c.java:27: error: cannot find\
    \ symbol\n            b = (b * b) % MOD;\n                          ^\n  symbol:\
    \   variable MOD\n  location: class Problem\n2 errors\n"
  stdout: ''
  timestamp: 1659800151
- exit_code: -1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        long res = 1;\n        while (n > 0) {\n   \
    \         if ((n & 1) == 1) {\n                res = (res * n) % p;\n        \
    \    }\n            n = n >> 1;\n            n = (n * n) % p;\n        }\n   \
    \     return res;\n    }\n    public static void main(String[] args) {\n    assert(modp((3l),\
    \ (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659800155
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n == 0) {\n            return 1;\n     \
    \   }\n        if (n % 2 == 0) {\n            long t = modp(n / 2, p);\n     \
    \       return (t * t) % p;\n        } else {\n            return (modp(n - 1,\
    \ p) * n) % p;\n        }\n    }\n    public static void main(String[] args) {\n\
    \    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n\
    \    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n\
    \    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n\
    \    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpx3c_4x8r.java:33)\n"
  stdout: ''
  timestamp: 1659800151
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        long result = 1;\n        long base = n % p;\n\
    \        long exponent = n;\n        while (exponent > 0) {\n            if ((exponent\
    \ & 1) == 1) {\n                result = (result * base) % p;\n            }\n\
    \            exponent >>= 1;\n            base = (base * base) % p;\n        }\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n\
    \    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n\
    \    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n\
    \    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmph0row4t8.java:34)\n"
  stdout: ''
  timestamp: 1659800151
- exit_code: -1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        long res = 1;\n        while (n > 0) {\n   \
    \         if ((n & 1) == 1) {\n                res = (res * n) % p;\n        \
    \    }\n            n = n >> 1;\n            n = (n * n) % p;\n        }\n   \
    \     return res;\n    }\n    public static void main(String[] args) {\n    assert(modp((3l),\
    \ (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659800155
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n == 0) {\n            return 1;\n     \
    \   }\n        if (n % 2 == 0) {\n            long temp = modp(n / 2, p);\n  \
    \          return (temp * temp) % p;\n        } else {\n            return (modp(n\
    \ - 1, p) * n) % p;\n        }\n    }\n    public static void main(String[] args)\
    \ {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) ==\
    \ (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpoxw0sdwx.java:33)\n"
  stdout: ''
  timestamp: 1659800151
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n == 0) {\n            return 1;\n     \
    \   }\n        if (n % 2 == 0) {\n            long x = modp(n / 2, p);\n     \
    \       return (x * x) % p;\n        } else {\n            return (modp(n - 1,\
    \ p) * n) % p;\n        }\n    }\n    public static void main(String[] args) {\n\
    \    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n\
    \    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n\
    \    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n\
    \    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnjyrzm0w.java:33)\n"
  stdout: ''
  timestamp: 1659800151
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n == 0) {\n            return 1;\n     \
    \   }\n        if (n % 2 == 0) {\n            long x = modp(n / 2, p);\n     \
    \       return (x * x) % p;\n        } else {\n            return (n * modp(n\
    \ - 1, p)) % p;\n        }\n    }\n    public static void main(String[] args)\
    \ {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) ==\
    \ (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo_17hrjg.java:33)\n"
  stdout: ''
  timestamp: 1659800151
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n == 0) {\n            return 1;\n     \
    \   }\n        if (n % 2 == 0) {\n            long m = modp(n / 2, p);\n     \
    \       return (m * m) % p;\n        } else {\n            return (modp(n - 1,\
    \ p) * n) % p;\n        }\n    }\n    public static void main(String[] args) {\n\
    \    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n\
    \    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n\
    \    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n\
    \    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptzio6jtg.java:33)\n"
  stdout: ''
  timestamp: 1659800151
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        long result = 1;\n        long base = n % p;\n\
    \        long exponent = n;\n        while (exponent > 0) {\n            if ((exponent\
    \ & 1) == 1) {\n                result = (result * base) % p;\n            }\n\
    \            exponent >>= 1;\n            base = (base * base) % p;\n        }\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n\
    \    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n\
    \    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n\
    \    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmph0row4t8.java:34)\n"
  stdout: ''
  timestamp: 1659800151
- exit_code: -1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        long res = 1;\n        while (n > 0) {\n   \
    \         if ((n & 1) == 1) {\n                res = (res * n) % p;\n        \
    \    }\n            n = n >> 1;\n            n = (n * n) % p;\n        }\n   \
    \     return res;\n    }\n    public static void main(String[] args) {\n    assert(modp((3l),\
    \ (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659800155
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n == 0) {\n            return 1;\n     \
    \   }\n        long res = modp(n / 2, p);\n        res = (res * res) % p;\n  \
    \      if (n % 2 == 1) {\n            res = (res * 2) % p;\n        }\n      \
    \  return res;\n    }\n    public static void main(String[] args) {\n    assert(modp((3l),\
    \ (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800151
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n == 0) {\n            return 1;\n     \
    \   }\n        if (n % 2 == 0) {\n            long x = modp(n / 2, p);\n     \
    \       return (x * x) % p;\n        } else {\n            return (n * modp(n\
    \ - 1, p)) % p;\n        }\n    }\n    public static void main(String[] args)\
    \ {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) ==\
    \ (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo_17hrjg.java:33)\n"
  stdout: ''
  timestamp: 1659800151
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n == 0) {\n            return 1;\n     \
    \   }\n        long half = modp(n / 2, p);\n        if (n % 2 == 0) {\n      \
    \      return (half * half) % p;\n        } else {\n            return (half *\
    \ half * 2) % p;\n        }\n    }\n    public static void main(String[] args)\
    \ {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) ==\
    \ (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800151
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n == 0) {\n            return 1;\n     \
    \   }\n        if (n % 2 == 0) {\n            return modp(n / 2, p) * modp(n /\
    \ 2, p) % p;\n        } else {\n            return modp(n / 2, p) * modp(n / 2,\
    \ p) * n % p;\n        }\n    }\n    public static void main(String[] args) {\n\
    \    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n\
    \    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n\
    \    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n\
    \    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_urov2b_.java:32)\n"
  stdout: ''
  timestamp: 1659800151
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        long result = 1;\n        long base = n % p;\n\
    \        long exponent = n;\n        while (exponent > 0) {\n            if ((exponent\
    \ & 1) == 1) {\n                result = (result * base) % p;\n            }\n\
    \            exponent >>= 1;\n            base = (base * base) % p;\n        }\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n\
    \    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n\
    \    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n\
    \    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmph0row4t8.java:34)\n"
  stdout: ''
  timestamp: 1659800151
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n == 0) {\n            return 1;\n     \
    \   }\n        if (n % 2 == 0) {\n            long half = modp(n / 2, p);\n  \
    \          return (half * half) % p;\n        } else {\n            return (modp(n\
    \ - 1, p) * n) % p;\n        }\n    }\n    public static void main(String[] args)\
    \ {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) ==\
    \ (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpym_wpck_.java:33)\n"
  stdout: ''
  timestamp: 1659800152
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        long result = 1;\n        long base = n % p;\n\
    \        long exponent = n;\n        while (exponent > 0) {\n            if ((exponent\
    \ & 1) == 1) {\n                result = (result * base) % p;\n            }\n\
    \            exponent >>= 1;\n            base = (base * base) % p;\n        }\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n\
    \    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n\
    \    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n\
    \    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmph0row4t8.java:34)\n"
  stdout: ''
  timestamp: 1659800151
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n == 0) {\n            return 1;\n     \
    \   }\n        if (n % 2 == 0) {\n            long t = modp(n / 2, p);\n     \
    \       return (t * t) % p;\n        } else {\n            return (modp(n - 1,\
    \ p) * n) % p;\n        }\n    }\n    public static void main(String[] args) {\n\
    \    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n\
    \    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n\
    \    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n\
    \    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpx3c_4x8r.java:33)\n"
  stdout: ''
  timestamp: 1659800151
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n == 0) {\n            return 1;\n     \
    \   }\n        if (n == 1) {\n            return n;\n        }\n        long half\
    \ = modp(n / 2, p);\n        long result = (half * half) % p;\n        if (n %\
    \ 2 == 1) {\n            result = (result * n) % p;\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(modp((3l),\
    \ (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbjo9ds30.java:36)\n"
  stdout: ''
  timestamp: 1659800152
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n == 0) {\n            return 1;\n     \
    \   }\n        if (n % 2 == 0) {\n            long y = modp(n / 2, p);\n     \
    \       return (y * y) % p;\n        } else {\n            return (n * modp(n\
    \ - 1, p)) % p;\n        }\n    }\n    public static void main(String[] args)\
    \ {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) ==\
    \ (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_lgny21n.java:33)\n"
  stdout: ''
  timestamp: 1659800152
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n == 0) {\n            return 1;\n     \
    \   }\n        if (n % 2 == 0) {\n            long x = modp(n / 2, p);\n     \
    \       return (x * x) % p;\n        } else {\n            return (modp(n - 1,\
    \ p) * n) % p;\n        }\n    }\n    public static void main(String[] args) {\n\
    \    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n\
    \    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n\
    \    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n\
    \    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnjyrzm0w.java:33)\n"
  stdout: ''
  timestamp: 1659800151
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n == 0) {\n            return 1;\n     \
    \   }\n        if (n % 2 == 0) {\n            long t = modp(n / 2, p);\n     \
    \       return (t * t) % p;\n        } else {\n            return (modp(n - 1,\
    \ p) * n) % p;\n        }\n    }\n    public static void main(String[] args) {\n\
    \    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n\
    \    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n\
    \    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n\
    \    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpx3c_4x8r.java:33)\n"
  stdout: ''
  timestamp: 1659800151
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n == 0) {\n            return 1;\n     \
    \   }\n        if (n == 1) {\n            return n;\n        }\n        if (n\
    \ % 2 == 0) {\n            long t = modp(n / 2, p);\n            return (t * t)\
    \ % p;\n        } else {\n            return (n * modp(n - 1, p)) % p;\n     \
    \   }\n    }\n    public static void main(String[] args) {\n    assert(modp((3l),\
    \ (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_3jdrfs0.java:36)\n"
  stdout: ''
  timestamp: 1659800152
- exit_code: -1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n == 0) return 1;\n        if (n == 1) return\
    \ n;\n        long res = 1;\n        while (n > 0) {\n            if ((n & 1)\
    \ == 1) {\n                res = (res * n) % p;\n            }\n            n\
    \ = n >> 1;\n            n = (n * n) % p;\n        }\n        return res;\n  \
    \  }\n    public static void main(String[] args) {\n    assert(modp((3l), (5l))\
    \ == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659800156
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n == 0) {\n            return 1;\n     \
    \   }\n        if (n % 2 == 0) {\n            long t = modp(n / 2, p);\n     \
    \       return (t * t) % p;\n        } else {\n            return (modp(n - 1,\
    \ p) * n) % p;\n        }\n    }\n    public static void main(String[] args) {\n\
    \    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n\
    \    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n\
    \    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n\
    \    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpx3c_4x8r.java:33)\n"
  stdout: ''
  timestamp: 1659800151
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n == 0) {\n            return 1;\n     \
    \   }\n        if (n == 1) {\n            return n;\n        }\n        long res\
    \ = 1;\n        long cur = n;\n        while (p > 0) {\n            if ((p & 1)\
    \ == 1) {\n                res = (res * cur) % MOD;\n            }\n         \
    \   cur = (cur * cur) % MOD;\n            p >>= 1;\n        }\n        return\
    \ res;\n    }\n    public static void main(String[] args) {\n    assert(modp((3l),\
    \ (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpq4123cvj.java:31: error: cannot find symbol\n                res\
    \ = (res * cur) % MOD;\n                                    ^\n  symbol:   variable\
    \ MOD\n  location: class Problem\n/tmp/tmpq4123cvj.java:33: error: cannot find\
    \ symbol\n            cur = (cur * cur) % MOD;\n                             \
    \   ^\n  symbol:   variable MOD\n  location: class Problem\n2 errors\n"
  stdout: ''
  timestamp: 1659800152
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n == 0) {\n            return 1;\n     \
    \   }\n        if (n == 1) {\n            return n;\n        }\n        long half\
    \ = modp(n / 2, p);\n        long result = (half * half) % p;\n        if (n %\
    \ 2 == 1) {\n            result = (result * 2) % p;\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(modp((3l),\
    \ (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2hdjyhhp.java:35)\n"
  stdout: ''
  timestamp: 1659800152
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n == 0) {\n            return 1;\n     \
    \   }\n        long res = modp(n / 2, p);\n        res = (res * res) % p;\n  \
    \      if (n % 2 == 1) {\n            res = (res * 2) % p;\n        }\n      \
    \  return res;\n    }\n    public static void main(String[] args) {\n    assert(modp((3l),\
    \ (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800151
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n == 0) {\n            return 1;\n     \
    \   }\n        if (n % 2 == 0) {\n            long x = modp(n / 2, p);\n     \
    \       return (x * x) % p;\n        } else {\n            return (modp(n - 1,\
    \ p) * n) % p;\n        }\n    }\n    public static void main(String[] args) {\n\
    \    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n\
    \    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n\
    \    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n\
    \    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnjyrzm0w.java:33)\n"
  stdout: ''
  timestamp: 1659800151
- exit_code: -1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        long res = 1;\n        while (n > 0) {\n   \
    \         if ((n & 1) == 1) {\n                res = (res * n) % p;\n        \
    \    }\n            n = n >> 1;\n            n = (n * n) % p;\n        }\n   \
    \     return res;\n    }\n    public static void main(String[] args) {\n    assert(modp((3l),\
    \ (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659800155
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n == 0) {\n            return 1;\n     \
    \   }\n        else if (n % 2 == 0) {\n            long x = modp(n / 2, p);\n\
    \            return (x * x) % p;\n        }\n        else {\n            return\
    \ (n * modp(n - 1, p)) % p;\n        }\n    }\n    public static void main(String[]\
    \ args) {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l))\
    \ == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzhu_90mr.java:34)\n"
  stdout: ''
  timestamp: 1659800152
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        long res = 1;\n        long b = 2;\n       \
    \ while (n > 0) {\n            if ((n & 1) == 1) {\n                res = (res\
    \ * b) % p;\n            }\n            b = (b * b) % p;\n            n >>= 1;\n\
    \        }\n        return res;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) ==\
    \ (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800151
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n == 0) return 1;\n        if (n % 2 ==\
    \ 0) {\n            long x = modp(n / 2, p);\n            return (x * x) % p;\n\
    \        } else {\n            return (n * modp(n - 1, p)) % p;\n        }\n \
    \   }\n    public static void main(String[] args) {\n    assert(modp((3l), (5l))\
    \ == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpg8trpkd2.java:31)\n"
  stdout: ''
  timestamp: 1659800152
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n == 0) {\n            return 1;\n     \
    \   }\n        if (n % 2 == 0) {\n            return modp(n / 2, p) * modp(n /\
    \ 2, p) % p;\n        } else {\n            return modp(n / 2, p) * modp(n / 2,\
    \ p) * n % p;\n        }\n    }\n    public static void main(String[] args) {\n\
    \    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n\
    \    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n\
    \    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n\
    \    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_urov2b_.java:32)\n"
  stdout: ''
  timestamp: 1659800151
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n == 0) {\n            return 1;\n     \
    \   }\n        if (n % 2 == 0) {\n            long t = modp(n / 2, p);\n     \
    \       return (t * t) % p;\n        } else {\n            return (modp(n - 1,\
    \ p) * n) % p;\n        }\n    }\n    public static void main(String[] args) {\n\
    \    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n\
    \    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n\
    \    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n\
    \    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpx3c_4x8r.java:33)\n"
  stdout: ''
  timestamp: 1659800151
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n == 0) {\n            return 1;\n     \
    \   }\n        if (n % 2 == 0) {\n            long x = modp(n / 2, p);\n     \
    \       return (x * x) % p;\n        } else {\n            return (modp(n - 1,\
    \ p) * n) % p;\n        }\n    }\n    public static void main(String[] args) {\n\
    \    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n\
    \    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n\
    \    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n\
    \    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnjyrzm0w.java:33)\n"
  stdout: ''
  timestamp: 1659800151
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n == 0) {\n            return 1;\n     \
    \   }\n        if (n == 1) {\n            return n;\n        }\n        long half\
    \ = modp(n / 2, p);\n        long half_sq = (half * half) % p;\n        if (n\
    \ % 2 == 0) {\n            return half_sq;\n        } else {\n            return\
    \ (half_sq * n) % p;\n        }\n    }\n    public static void main(String[] args)\
    \ {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) ==\
    \ (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpagolayka.java:37)\n"
  stdout: ''
  timestamp: 1659800151
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        long r = 1;\n        long b = 2;\n        while\
    \ (n > 0) {\n            if ((n & 1) == 1) {\n                r = (r * b) % p;\n\
    \            }\n            n = n >> 1;\n            b = (b * b) % p;\n      \
    \  }\n        return r;\n    }\n    public static void main(String[] args) {\n\
    \    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n\
    \    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n\
    \    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n\
    \    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800152
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n == 0) {\n            return 1;\n     \
    \   }\n        if (n % 2 == 0) {\n            long x = modp(n / 2, p);\n     \
    \       return (x * x) % p;\n        } else {\n            return (modp(n - 1,\
    \ p) * n) % p;\n        }\n    }\n    public static void main(String[] args) {\n\
    \    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n\
    \    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n\
    \    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n\
    \    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnjyrzm0w.java:33)\n"
  stdout: ''
  timestamp: 1659800151
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        long result = 1;\n        long base = n % p;\n\
    \        long exponent = n;\n        while (exponent > 0) {\n            if ((exponent\
    \ & 1) == 1) {\n                result = (result * base) % p;\n            }\n\
    \            exponent >>= 1;\n            base = (base * base) % p;\n        }\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n\
    \    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n\
    \    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n\
    \    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmph0row4t8.java:34)\n"
  stdout: ''
  timestamp: 1659800151
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n == 0) {\n            return 1;\n     \
    \   }\n        if (n == 1) {\n            return n;\n        }\n        if (n\
    \ % 2 == 0) {\n            long x = modp(n / 2, p);\n            return (x * x)\
    \ % p;\n        } else {\n            return (n * modp(n - 1, p)) % p;\n     \
    \   }\n    }\n    public static void main(String[] args) {\n    assert(modp((3l),\
    \ (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpduolmet1.java:36)\n"
  stdout: ''
  timestamp: 1659800152
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        long res = 1;\n        long b = 2;\n       \
    \ while (n > 0) {\n            if ((n & 1) == 1) {\n                res = (res\
    \ * b) % p;\n            }\n            b = (b * b) % p;\n            n >>= 1;\n\
    \        }\n        return res;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) ==\
    \ (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800151
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n == 0) {\n            return 1;\n     \
    \   }\n        if (n % 2 == 0) {\n            long half = modp(n / 2, p);\n  \
    \          return (half * half) % p;\n        } else {\n            return (modp(n\
    \ - 1, p) * n) % p;\n        }\n    }\n    public static void main(String[] args)\
    \ {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) ==\
    \ (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpym_wpck_.java:33)\n"
  stdout: ''
  timestamp: 1659800152
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        long result = 1;\n        long base = n % p;\n\
    \        long exponent = n;\n        while (exponent > 0) {\n            if ((exponent\
    \ & 1) == 1) {\n                result = (result * base) % p;\n            }\n\
    \            exponent >>= 1;\n            base = (base * base) % p;\n        }\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n\
    \    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n\
    \    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n\
    \    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmph0row4t8.java:34)\n"
  stdout: ''
  timestamp: 1659800151
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n == 0) {\n            return 1;\n     \
    \   }\n        else if (n % 2 == 0) {\n            long x = modp(n / 2, p);\n\
    \            return (x * x) % p;\n        }\n        else {\n            return\
    \ (n * modp(n - 1, p)) % p;\n        }\n    }\n    public static void main(String[]\
    \ args) {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l))\
    \ == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzhu_90mr.java:34)\n"
  stdout: ''
  timestamp: 1659800152
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n == 0) {\n            return 1;\n     \
    \   }\n        if (n % 2 == 0) {\n            long t = modp(n / 2, p);\n     \
    \       return (t * t) % p;\n        } else {\n            return (modp(n - 1,\
    \ p) * n) % p;\n        }\n    }\n    public static void main(String[] args) {\n\
    \    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n\
    \    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n\
    \    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n\
    \    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpx3c_4x8r.java:33)\n"
  stdout: ''
  timestamp: 1659800151
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n == 0) {\n            return 1;\n     \
    \   }\n        long ans = modp(n / 2, p);\n        ans = (ans * ans) % p;\n  \
    \      if (n % 2 == 1) {\n            ans = (ans * 2) % p;\n        }\n      \
    \  return ans;\n    }\n    public static void main(String[] args) {\n    assert(modp((3l),\
    \ (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800152
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        long res = 1;\n        while (n > 0) {\n   \
    \         if ((n & 1) == 1) {\n                res = (res * 2) % p;\n        \
    \    }\n            n >>= 1;\n        }\n        return res;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(modp((3l), (5l)) == (3l));\n \
    \   assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) == (1l));\n\
    \    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l)) == (1l));\n\
    \    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplclmgb1l.java:31)\n"
  stdout: ''
  timestamp: 1659800151
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n == 0) {\n            return 1;\n     \
    \   }\n        if (n % 2 == 0) {\n            long t = modp(n / 2, p);\n     \
    \       return (t * t) % p;\n        } else {\n            return (modp(n - 1,\
    \ p) * n) % p;\n        }\n    }\n    public static void main(String[] args) {\n\
    \    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n\
    \    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n\
    \    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n\
    \    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpx3c_4x8r.java:33)\n"
  stdout: ''
  timestamp: 1659800151
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n == 0) {\n            return 1;\n     \
    \   }\n        if (n % 2 == 0) {\n            long t = modp(n / 2, p);\n     \
    \       return (t * t) % p;\n        } else {\n            return (modp(n - 1,\
    \ p) * n) % p;\n        }\n    }\n    public static void main(String[] args) {\n\
    \    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n\
    \    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n\
    \    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n\
    \    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpx3c_4x8r.java:33)\n"
  stdout: ''
  timestamp: 1659800151
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n == 0) {\n            return 1;\n     \
    \   }\n        if (n % 2 == 0) {\n            return modp(n / 2, p) * modp(n /\
    \ 2, p) % p;\n        } else {\n            return modp(n / 2, p) * modp(n / 2,\
    \ p) * n % p;\n        }\n    }\n    public static void main(String[] args) {\n\
    \    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n\
    \    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n\
    \    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n\
    \    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_urov2b_.java:32)\n"
  stdout: ''
  timestamp: 1659800151
- exit_code: -1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        long res = 1;\n        while (n > 0) {\n   \
    \         if ((n & 1) == 1) {\n                res = (res * n) % p;\n        \
    \    }\n            n = n >> 1;\n            n = (n * n) % p;\n        }\n   \
    \     return res;\n    }\n    public static void main(String[] args) {\n    assert(modp((3l),\
    \ (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659800155
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n == 0) {\n            return 1;\n     \
    \   }\n        if (n % 2 == 0) {\n            long t = modp(n / 2, p);\n     \
    \       return (t * t) % p;\n        } else {\n            return (modp(n - 1,\
    \ p) * n) % p;\n        }\n    }\n    public static void main(String[] args) {\n\
    \    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n\
    \    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n\
    \    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n\
    \    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpx3c_4x8r.java:33)\n"
  stdout: ''
  timestamp: 1659800151
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n == 0) {\n            return 1;\n     \
    \   }\n        if (n == 1) {\n            return n;\n        }\n        long half\
    \ = modp(n / 2, p);\n        if (n % 2 == 0) {\n            return (half * half)\
    \ % p;\n        } else {\n            return (half * half * n) % p;\n        }\n\
    \    }\n    public static void main(String[] args) {\n    assert(modp((3l), (5l))\
    \ == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpibi5b6_k.java:36)\n"
  stdout: ''
  timestamp: 1659800151
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        long result = 1;\n        long base = n % p;\n\
    \        long exponent = n;\n        while (exponent > 0) {\n            if ((exponent\
    \ & 1) == 1) {\n                result = (result * base) % p;\n            }\n\
    \            exponent >>= 1;\n            base = (base * base) % p;\n        }\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n\
    \    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n\
    \    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n\
    \    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmph0row4t8.java:34)\n"
  stdout: ''
  timestamp: 1659800151
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        long res = 1;\n        long a = 2;\n       \
    \ while (n > 0) {\n            if ((n & 1) == 1) {\n                res = (res\
    \ * a) % p;\n            }\n            a = (a * a) % p;\n            n >>= 1;\n\
    \        }\n        return res;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) ==\
    \ (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800152
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n == 0) {\n            return 1;\n     \
    \   }\n        if (n % 2 == 0) {\n            long x = modp(n / 2, p);\n     \
    \       return (x * x) % p;\n        } else {\n            return (n * modp(n\
    \ - 1, p)) % p;\n        }\n    }\n    public static void main(String[] args)\
    \ {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) ==\
    \ (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo_17hrjg.java:33)\n"
  stdout: ''
  timestamp: 1659800151
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        long res = 1;\n        for (long i = 0; i <\
    \ n; i++) {\n            res = (res * 2) % p;\n        }\n        return res;\n\
    \    }\n    public static void main(String[] args) {\n    assert(modp((3l), (5l))\
    \ == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800152
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n == 0) {\n            return 1;\n     \
    \   }\n        if (n % 2 == 0) {\n            long x = modp(n / 2, p);\n     \
    \       return (x * x) % p;\n        } else {\n            return (n * modp(n\
    \ - 1, p)) % p;\n        }\n    }\n    public static void main(String[] args)\
    \ {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) ==\
    \ (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo_17hrjg.java:33)\n"
  stdout: ''
  timestamp: 1659800151
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        long res = 1;\n        while (n > 0) {\n   \
    \         if ((n & 1) == 1) {\n                res = (res * 2) % p;\n        \
    \    }\n            n >>= 1;\n        }\n        return res;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(modp((3l), (5l)) == (3l));\n \
    \   assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) == (1l));\n\
    \    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l)) == (1l));\n\
    \    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplclmgb1l.java:31)\n"
  stdout: ''
  timestamp: 1659800151
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n == 0) {\n            return 1;\n     \
    \   }\n        if (n % 2 == 0) {\n            return modp(n / 2, p) * modp(n /\
    \ 2, p) % p;\n        } else {\n            return modp(n / 2, p) * modp(n / 2,\
    \ p) * n % p;\n        }\n    }\n    public static void main(String[] args) {\n\
    \    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n\
    \    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n\
    \    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n\
    \    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_urov2b_.java:32)\n"
  stdout: ''
  timestamp: 1659800151
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n == 0) {\n            return 1;\n     \
    \   }\n        if (n % 2 == 0) {\n            long t = modp(n / 2, p);\n     \
    \       return (t * t) % p;\n        } else {\n            return (n * modp(n\
    \ - 1, p)) % p;\n        }\n    }\n    public static void main(String[] args)\
    \ {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) ==\
    \ (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpq55er4kj.java:33)\n"
  stdout: ''
  timestamp: 1659800152
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n == 0) {\n            return 1;\n     \
    \   }\n        if (n % 2 == 0) {\n            long x = modp(n / 2, p);\n     \
    \       return (x * x) % p;\n        } else {\n            return (modp(n - 1,\
    \ p) * n) % p;\n        }\n    }\n    public static void main(String[] args) {\n\
    \    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n\
    \    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n\
    \    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n\
    \    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnjyrzm0w.java:33)\n"
  stdout: ''
  timestamp: 1659800151
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n == 0) return 1;\n        if (n % 2 ==\
    \ 0) {\n            long t = modp(n / 2, p);\n            return (t * t) % p;\n\
    \        } else {\n            return (modp(n - 1, p) * n) % p;\n        }\n \
    \   }\n    public static void main(String[] args) {\n    assert(modp((3l), (5l))\
    \ == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvscc_gwc.java:31)\n"
  stdout: ''
  timestamp: 1659800152
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n == 0) {\n            return 1;\n     \
    \   }\n        if (n % 2 == 0) {\n            long x = modp(n / 2, p);\n     \
    \       return (x * x) % p;\n        } else {\n            return (n * modp(n\
    \ - 1, p)) % p;\n        }\n    }\n    public static void main(String[] args)\
    \ {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) ==\
    \ (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo_17hrjg.java:33)\n"
  stdout: ''
  timestamp: 1659800151
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n == 0) {\n            return 1;\n     \
    \   }\n        if (n % 2 == 0) {\n            long half = modp(n / 2, p);\n  \
    \          return (half * half) % p;\n        } else {\n            return (modp(n\
    \ - 1, p) * n) % p;\n        }\n    }\n    public static void main(String[] args)\
    \ {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) ==\
    \ (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpym_wpck_.java:33)\n"
  stdout: ''
  timestamp: 1659800152
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        long res = 1;\n        long b = 2;\n       \
    \ while (n > 0) {\n            if ((n & 1) == 1) {\n                res = (res\
    \ * b) % p;\n            }\n            b = (b * b) % p;\n            n >>= 1;\n\
    \        }\n        return res;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) ==\
    \ (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800151
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        long res = 1;\n        while (n > 0) {\n   \
    \         if ((n & 1) == 1) {\n                res = (res * 2) % p;\n        \
    \    }\n            n >>= 1;\n        }\n        return res;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(modp((3l), (5l)) == (3l));\n \
    \   assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) == (1l));\n\
    \    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l)) == (1l));\n\
    \    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplclmgb1l.java:31)\n"
  stdout: ''
  timestamp: 1659800151
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n == 0) {\n            return 1;\n     \
    \   }\n        if (n % 2 == 0) {\n            long t = modp(n / 2, p);\n     \
    \       return (t * t) % p;\n        } else {\n            return (modp(n - 1,\
    \ p) * n) % p;\n        }\n    }\n    public static void main(String[] args) {\n\
    \    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n\
    \    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n\
    \    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n\
    \    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpx3c_4x8r.java:33)\n"
  stdout: ''
  timestamp: 1659800151
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n == 0) {\n            return 1;\n     \
    \   }\n        if (n % 2 == 0) {\n            long x = modp(n / 2, p);\n     \
    \       return (x * x) % p;\n        } else {\n            return (n * modp(n\
    \ - 1, p)) % p;\n        }\n    }\n    public static void main(String[] args)\
    \ {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) ==\
    \ (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo_17hrjg.java:33)\n"
  stdout: ''
  timestamp: 1659800151
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n == 0) {\n            return 1;\n     \
    \   }\n        if (n % 2 == 0) {\n            long x = modp(n / 2, p);\n     \
    \       return (x * x) % p;\n        } else {\n            return (modp(n - 1,\
    \ p) * n) % p;\n        }\n    }\n    public static void main(String[] args) {\n\
    \    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n\
    \    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n\
    \    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n\
    \    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnjyrzm0w.java:33)\n"
  stdout: ''
  timestamp: 1659800151
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        long result = 1;\n        while (n > 0) {\n\
    \            if ((n & 1) == 1) {\n                result = (result * n) % p;\n\
    \            }\n            n = n >> 1;\n        }\n        return result;\n \
    \   }\n    public static void main(String[] args) {\n    assert(modp((3l), (5l))\
    \ == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpz9bx6rxj.java:32)\n"
  stdout: ''
  timestamp: 1659800152
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        long res = 1;\n        while (n > 0) {\n   \
    \         if ((n & 1) == 1) {\n                res = (res * 2) % p;\n        \
    \    }\n            n >>= 1;\n        }\n        return res;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(modp((3l), (5l)) == (3l));\n \
    \   assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) == (1l));\n\
    \    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l)) == (1l));\n\
    \    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplclmgb1l.java:31)\n"
  stdout: ''
  timestamp: 1659800151
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        long res = 1;\n        long b = 2;\n       \
    \ while (n > 0) {\n            if ((n & 1) == 1) {\n                res = (res\
    \ * b) % p;\n            }\n            b = (b * b) % p;\n            n >>= 1;\n\
    \        }\n        return res;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) ==\
    \ (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800151
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n == 0) {\n            return 1;\n     \
    \   }\n        if (n == 1) {\n            return n;\n        }\n        long half\
    \ = modp(n / 2, p);\n        long result = (half * half) % p;\n        if (n %\
    \ 2 == 1) {\n            result = (result * 2) % p;\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(modp((3l),\
    \ (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2hdjyhhp.java:35)\n"
  stdout: ''
  timestamp: 1659800152
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n == 0) {\n            return 1;\n     \
    \   }\n        if (n % 2 == 0) {\n            long x = modp(n / 2, p);\n     \
    \       return (x * x) % p;\n        } else {\n            return (modp(n - 1,\
    \ p) * n) % p;\n        }\n    }\n    public static void main(String[] args) {\n\
    \    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n\
    \    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n\
    \    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n\
    \    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnjyrzm0w.java:33)\n"
  stdout: ''
  timestamp: 1659800151
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n == 0) {\n            return 1;\n     \
    \   }\n        if (n % 2 == 0) {\n            long x = modp(n / 2, p);\n     \
    \       return (x * x) % p;\n        } else {\n            return (n * modp(n\
    \ - 1, p)) % p;\n        }\n    }\n    public static void main(String[] args)\
    \ {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) ==\
    \ (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo_17hrjg.java:33)\n"
  stdout: ''
  timestamp: 1659800151
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n == 0) {\n            return 1;\n     \
    \   }\n        if (n % 2 == 0) {\n            long x = modp(n / 2, p);\n     \
    \       return (x * x) % p;\n        } else {\n            return (modp(n - 1,\
    \ p) * n) % p;\n        }\n    }\n    public static void main(String[] args) {\n\
    \    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n\
    \    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n\
    \    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n\
    \    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnjyrzm0w.java:33)\n"
  stdout: ''
  timestamp: 1659800151
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        long res = 1;\n        long b = 2;\n       \
    \ while (n > 0) {\n            if ((n & 1) == 1) {\n                res = (res\
    \ * b) % p;\n            }\n            b = (b * b) % p;\n            n >>= 1;\n\
    \        }\n        return res;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) ==\
    \ (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800151
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n == 0) {\n            return 1;\n     \
    \   }\n        if (n == 1) {\n            return n;\n        }\n        if (n\
    \ % 2 == 0) {\n            return modp(n / 2, p) * modp(n / 2, p) % p;\n     \
    \   } else {\n            return modp(n / 2, p) * modp(n / 2, p) * n % p;\n  \
    \      }\n    }\n    public static void main(String[] args) {\n    assert(modp((3l),\
    \ (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpovu6vvrp.java:35)\n"
  stdout: ''
  timestamp: 1659800152
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n == 0) return 1;\n        if (n == 1) return\
    \ n;\n        long x = modp(n / 2, p);\n        x = (x * x) % p;\n        if (n\
    \ % 2 == 1) x = (x * n) % p;\n        return x;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l),\
    \ (101l)) == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l),\
    \ (11l)) == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsfrxwguj.java:30)\n"
  stdout: ''
  timestamp: 1659800152
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        long res = 1;\n        while (n > 0) {\n   \
    \         if ((n & 1) == 1) {\n                res = (res * 2) % p;\n        \
    \    }\n            n >>= 1;\n        }\n        return res;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(modp((3l), (5l)) == (3l));\n \
    \   assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) == (1l));\n\
    \    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l)) == (1l));\n\
    \    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplclmgb1l.java:31)\n"
  stdout: ''
  timestamp: 1659800151
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n == 0) {\n            return 1;\n     \
    \   }\n        if (n % 2 == 0) {\n            long x = modp(n / 2, p);\n     \
    \       return (x * x) % p;\n        } else {\n            return (modp(n - 1,\
    \ p) * n) % p;\n        }\n    }\n    public static void main(String[] args) {\n\
    \    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n\
    \    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n\
    \    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n\
    \    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnjyrzm0w.java:33)\n"
  stdout: ''
  timestamp: 1659800151
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n == 0) {\n            return 1;\n     \
    \   }\n        if (n % 2 == 0) {\n            long t = modp(n / 2, p);\n     \
    \       return (t * t) % p;\n        } else {\n            return (modp(n - 1,\
    \ p) * n) % p;\n        }\n    }\n    public static void main(String[] args) {\n\
    \    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n\
    \    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n\
    \    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n\
    \    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpx3c_4x8r.java:33)\n"
  stdout: ''
  timestamp: 1659800151
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n == 0) return 1;\n        if (n == 1) return\
    \ n;\n        long half = modp(n / 2, p);\n        long result = half * half %\
    \ p;\n        if (n % 2 == 1) result = result * n % p;\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(modp((3l), (5l))\
    \ == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp14q2jjr1.java:30)\n"
  stdout: ''
  timestamp: 1659800152
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n == 0) return 1;\n        if (n == 1) return\
    \ n;\n        if (n % 2 == 0) {\n            long x = modp(n / 2, p);\n      \
    \      return (x * x) % p;\n        } else {\n            return (n * modp(n -\
    \ 1, p)) % p;\n        }\n    }\n    public static void main(String[] args) {\n\
    \    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n\
    \    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n\
    \    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n\
    \    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplzpaqs9k.java:32)\n"
  stdout: ''
  timestamp: 1659800152
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n == 0) {\n            return 1;\n     \
    \   }\n        long res = modp(n / 2, p);\n        res = (res * res) % p;\n  \
    \      if (n % 2 == 1) {\n            res = (res * 2) % p;\n        }\n      \
    \  return res;\n    }\n    public static void main(String[] args) {\n    assert(modp((3l),\
    \ (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800151
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n == 0) {\n            return 1;\n     \
    \   }\n        if (n % 2 == 0) {\n            long x = modp(n / 2, p);\n     \
    \       return (x * x) % p;\n        } else {\n            return (modp(n - 1,\
    \ p) * n) % p;\n        }\n    }\n    public static void main(String[] args) {\n\
    \    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n\
    \    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n\
    \    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n\
    \    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnjyrzm0w.java:33)\n"
  stdout: ''
  timestamp: 1659800151
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n == 0) {\n            return 1;\n     \
    \   }\n        if (n % 2 == 0) {\n            long t = modp(n / 2, p);\n     \
    \       return (t * t) % p;\n        } else {\n            return (n * modp(n\
    \ - 1, p)) % p;\n        }\n    }\n    public static void main(String[] args)\
    \ {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) ==\
    \ (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpq55er4kj.java:33)\n"
  stdout: ''
  timestamp: 1659800152
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n == 0) {\n            return 1;\n     \
    \   }\n        if (n == 1) {\n            return n;\n        }\n        long half\
    \ = modp(n / 2, p);\n        long half2 = (half * half) % p;\n        if (n %\
    \ 2 == 0) {\n            return half2;\n        } else {\n            return (half2\
    \ * n) % p;\n        }\n    }\n    public static void main(String[] args) {\n\
    \    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n\
    \    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n\
    \    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n\
    \    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprirjiaw5.java:37)\n"
  stdout: ''
  timestamp: 1659800152
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        long result = 1;\n        long base = n % p;\n\
    \        long exponent = n;\n        while (exponent > 0) {\n            if ((exponent\
    \ & 1) == 1) {\n                result = (result * base) % p;\n            }\n\
    \            exponent >>= 1;\n            base = (base * base) % p;\n        }\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n\
    \    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n\
    \    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n\
    \    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmph0row4t8.java:34)\n"
  stdout: ''
  timestamp: 1659800151
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n == 0) {\n            return 1;\n     \
    \   }\n        if (n % 2 == 0) {\n            long x = modp(n / 2, p);\n     \
    \       return (x * x) % p;\n        } else {\n            return (modp(n - 1,\
    \ p) * n) % p;\n        }\n    }\n    public static void main(String[] args) {\n\
    \    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n\
    \    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n\
    \    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n\
    \    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnjyrzm0w.java:33)\n"
  stdout: ''
  timestamp: 1659800151
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n == 0) {\n            return 1;\n     \
    \   }\n        if (n % 2 == 0) {\n            return modp(n / 2, p) * modp(n /\
    \ 2, p) % p;\n        } else {\n            return modp(n / 2, p) * modp(n / 2,\
    \ p) * n % p;\n        }\n    }\n    public static void main(String[] args) {\n\
    \    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n\
    \    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n\
    \    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n\
    \    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_urov2b_.java:32)\n"
  stdout: ''
  timestamp: 1659800151
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        long ret = 1;\n        long b = n;\n       \
    \ while (p > 0) {\n            if ((p & 1) == 1) {\n                ret = (ret\
    \ * b) % MOD;\n            }\n            b = (b * b) % MOD;\n            p >>=\
    \ 1;\n        }\n        return ret;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l))\
    \ == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpa_rn7yhd.java:25: error: cannot find symbol\n                ret\
    \ = (ret * b) % MOD;\n                                  ^\n  symbol:   variable\
    \ MOD\n  location: class Problem\n/tmp/tmpa_rn7yhd.java:27: error: cannot find\
    \ symbol\n            b = (b * b) % MOD;\n                          ^\n  symbol:\
    \   variable MOD\n  location: class Problem\n2 errors\n"
  stdout: ''
  timestamp: 1659800152
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n == 0) {\n            return 1;\n     \
    \   }\n        if (n % 2 == 0) {\n            return modp(n / 2, p) * modp(n /\
    \ 2, p) % p;\n        } else {\n            return modp(n / 2, p) * modp(n / 2,\
    \ p) * n % p;\n        }\n    }\n    public static void main(String[] args) {\n\
    \    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n\
    \    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n\
    \    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n\
    \    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_urov2b_.java:32)\n"
  stdout: ''
  timestamp: 1659800151
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n == 0) return 1;\n        if (n == 1) return\
    \ n;\n        long x = modp(n / 2, p);\n        x = (x * x) % p;\n        if (n\
    \ % 2 == 1) x = (x * 2) % p;\n        return x;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l),\
    \ (101l)) == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l),\
    \ (11l)) == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpt37a8zyc.java:29)\n"
  stdout: ''
  timestamp: 1659800152
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n == 0) {\n            return 1;\n     \
    \   }\n        if (n % 2 == 0) {\n            long x = modp(n / 2, p);\n     \
    \       return (x * x) % p;\n        } else {\n            return (n * modp(n\
    \ - 1, p)) % p;\n        }\n    }\n    public static void main(String[] args)\
    \ {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) ==\
    \ (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo_17hrjg.java:33)\n"
  stdout: ''
  timestamp: 1659800151
- exit_code: -1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n == 0) return 1;\n        if (n == 1) return\
    \ n;\n        long res = 1;\n        while (n > 0) {\n            if ((n & 1)\
    \ == 1) {\n                res = (res * n) % p;\n            }\n            n\
    \ = n >> 1;\n            n = (n * n) % p;\n        }\n        return res;\n  \
    \  }\n    public static void main(String[] args) {\n    assert(modp((3l), (5l))\
    \ == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659800156
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n == 0) {\n            return 1;\n     \
    \   }\n        if (n % 2 == 0) {\n            long x = modp(n / 2, p);\n     \
    \       return (x * x) % p;\n        } else {\n            return (modp(n - 1,\
    \ p) * n) % p;\n        }\n    }\n    public static void main(String[] args) {\n\
    \    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n\
    \    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n\
    \    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n\
    \    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnjyrzm0w.java:33)\n"
  stdout: ''
  timestamp: 1659800151
- exit_code: -1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        long res = 1;\n        while (n > 0) {\n   \
    \         if ((n & 1) != 0) {\n                res = (res * n) % p;\n        \
    \    }\n            n = n >> 1;\n            n = (n * n) % p;\n        }\n   \
    \     return res;\n    }\n    public static void main(String[] args) {\n    assert(modp((3l),\
    \ (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659800156
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        long result = 1;\n        while (n > 0) {\n\
    \            if ((n & 1) == 1) {\n                result = (result * n) % p;\n\
    \            }\n            n = n >> 1;\n        }\n        return result;\n \
    \   }\n    public static void main(String[] args) {\n    assert(modp((3l), (5l))\
    \ == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpz9bx6rxj.java:32)\n"
  stdout: ''
  timestamp: 1659800152
- exit_code: -1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n == 0) {\n            return 1;\n     \
    \   }\n        if (n == 1) {\n            return n;\n        }\n        long res\
    \ = 1;\n        while (n > 0) {\n            if ((n & 1) == 1) {\n           \
    \     res = (res * n) % p;\n            }\n            n = n >> 1;\n         \
    \   n = (n * n) % p;\n        }\n        return res;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l),\
    \ (101l)) == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l),\
    \ (11l)) == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659800158
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n == 0) {\n            return 1;\n     \
    \   }\n        if (n % 2 == 0) {\n            long x = modp(n / 2, p);\n     \
    \       return (x * x) % p;\n        } else {\n            return (n * modp(n\
    \ - 1, p)) % p;\n        }\n    }\n    public static void main(String[] args)\
    \ {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) ==\
    \ (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo_17hrjg.java:33)\n"
  stdout: ''
  timestamp: 1659800151
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        long result = 1;\n        long base = n % p;\n\
    \        long exponent = n;\n        while (exponent > 0) {\n            if ((exponent\
    \ & 1) == 1) {\n                result = (result * base) % p;\n            }\n\
    \            exponent >>= 1;\n            base = (base * base) % p;\n        }\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n\
    \    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n\
    \    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n\
    \    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmph0row4t8.java:34)\n"
  stdout: ''
  timestamp: 1659800151
- exit_code: -1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        long res = 1;\n        while (n > 0) {\n   \
    \         if ((n & 1) == 1) {\n                res = (res * n) % p;\n        \
    \    }\n            n = n >> 1;\n            n = (n * n) % p;\n        }\n   \
    \     return res;\n    }\n    public static void main(String[] args) {\n    assert(modp((3l),\
    \ (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659800155
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n == 0) {\n            return 1;\n     \
    \   }\n        if (n % 2 == 0) {\n            long t = modp(n / 2, p);\n     \
    \       return (t * t) % p;\n        } else {\n            return (modp(n - 1,\
    \ p) * n) % p;\n        }\n    }\n    public static void main(String[] args) {\n\
    \    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n\
    \    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n\
    \    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n\
    \    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpx3c_4x8r.java:33)\n"
  stdout: ''
  timestamp: 1659800151
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n == 0) {\n            return 1;\n     \
    \   }\n        if (n % 2 == 0) {\n            long x = modp(n / 2, p);\n     \
    \       return (x * x) % p;\n        } else {\n            return (modp(n - 1,\
    \ p) * n) % p;\n        }\n    }\n    public static void main(String[] args) {\n\
    \    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n\
    \    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n\
    \    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n\
    \    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnjyrzm0w.java:33)\n"
  stdout: ''
  timestamp: 1659800151
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        long res = 1;\n        long base = n;\n    \
    \    while (p > 0) {\n            if ((p & 1) == 1) {\n                res = (res\
    \ * base) % MOD;\n            }\n            base = (base * base) % MOD;\n   \
    \         p >>= 1;\n        }\n        return res;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l),\
    \ (101l)) == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l),\
    \ (11l)) == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpypbbix33.java:25: error: cannot find symbol\n                res\
    \ = (res * base) % MOD;\n                                     ^\n  symbol:   variable\
    \ MOD\n  location: class Problem\n/tmp/tmpypbbix33.java:27: error: cannot find\
    \ symbol\n            base = (base * base) % MOD;\n                          \
    \         ^\n  symbol:   variable MOD\n  location: class Problem\n2 errors\n"
  stdout: ''
  timestamp: 1659800152
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n == 0) {\n            return 1;\n     \
    \   }\n        if (n % 2 == 0) {\n            return modp(n / 2, p) * modp(n /\
    \ 2, p) % p;\n        } else {\n            return modp(n / 2, p) * modp(n / 2,\
    \ p) * n % p;\n        }\n    }\n    public static void main(String[] args) {\n\
    \    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n\
    \    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n\
    \    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n\
    \    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_urov2b_.java:32)\n"
  stdout: ''
  timestamp: 1659800151
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n == 0) {\n            return 1;\n     \
    \   }\n        if (n % 2 == 0) {\n            long x = modp(n / 2, p);\n     \
    \       return (x * x) % p;\n        } else {\n            return (n * modp(n\
    \ - 1, p)) % p;\n        }\n    }\n    public static void main(String[] args)\
    \ {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) ==\
    \ (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo_17hrjg.java:33)\n"
  stdout: ''
  timestamp: 1659800151
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n == 0) {\n            return 1;\n     \
    \   }\n        if (n == 1) {\n            return n;\n        }\n        if (n\
    \ % 2 == 0) {\n            long x = modp(n / 2, p);\n            return (x * x)\
    \ % p;\n        } else {\n            return (n * modp(n - 1, p)) % p;\n     \
    \   }\n    }\n    public static void main(String[] args) {\n    assert(modp((3l),\
    \ (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpduolmet1.java:36)\n"
  stdout: ''
  timestamp: 1659800152
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n == 0) {\n            return 1;\n     \
    \   }\n        long result = 1;\n        long x = 2;\n        long power = n;\n\
    \        while (power > 0) {\n            if (power % 2 == 1) {\n            \
    \    result = (result * x) % p;\n            }\n            x = (x * x) % p;\n\
    \            power = power / 2;\n        }\n        return result;\n    }\n  \
    \  public static void main(String[] args) {\n    assert(modp((3l), (5l)) == (3l));\n\
    \    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) ==\
    \ (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l))\
    \ == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l))\
    \ == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800153
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n == 0) {\n            return 1;\n     \
    \   }\n        if (n % 2 == 0) {\n            long t = modp(n / 2, p);\n     \
    \       return (t * t) % p;\n        } else {\n            return (modp(n - 1,\
    \ p) * n) % p;\n        }\n    }\n    public static void main(String[] args) {\n\
    \    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n\
    \    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n\
    \    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n\
    \    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpx3c_4x8r.java:33)\n"
  stdout: ''
  timestamp: 1659800151
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n == 0) {\n            return 1;\n     \
    \   }\n        if (n % 2 == 0) {\n            return modp(n / 2, p) * modp(n /\
    \ 2, p) % p;\n        } else {\n            return modp(n / 2, p) * modp(n / 2,\
    \ p) * n % p;\n        }\n    }\n    public static void main(String[] args) {\n\
    \    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n\
    \    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n\
    \    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n\
    \    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_urov2b_.java:32)\n"
  stdout: ''
  timestamp: 1659800151
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n == 0) {\n            return 1;\n     \
    \   }\n        if (n % 2 == 0) {\n            long t = modp(n / 2, p);\n     \
    \       return (t * t) % p;\n        } else {\n            return (n * modp(n\
    \ - 1, p)) % p;\n        }\n    }\n    public static void main(String[] args)\
    \ {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) ==\
    \ (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpq55er4kj.java:33)\n"
  stdout: ''
  timestamp: 1659800152
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        long res = 1;\n        long b = n;\n       \
    \ while (p > 0) {\n            if ((p & 1) == 1) {\n                res = (res\
    \ * b) % MOD;\n            }\n            b = (b * b) % MOD;\n            p >>=\
    \ 1;\n        }\n        return res;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l))\
    \ == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdl9ik85c.java:25: error: cannot find symbol\n                res\
    \ = (res * b) % MOD;\n                                  ^\n  symbol:   variable\
    \ MOD\n  location: class Problem\n/tmp/tmpdl9ik85c.java:27: error: cannot find\
    \ symbol\n            b = (b * b) % MOD;\n                          ^\n  symbol:\
    \   variable MOD\n  location: class Problem\n2 errors\n"
  stdout: ''
  timestamp: 1659800151
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        long res = 1;\n        long a = 2;\n       \
    \ while (n > 0) {\n            if ((n & 1) == 1) {\n                res = (res\
    \ * a) % p;\n            }\n            a = (a * a) % p;\n            n >>= 1;\n\
    \        }\n        return res;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) ==\
    \ (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800152
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n == 0) {\n            return 1;\n     \
    \   }\n        if (n % 2 == 0) {\n            long x = modp(n / 2, p);\n     \
    \       return (x * x) % p;\n        } else {\n            return (n * modp(n\
    \ - 1, p)) % p;\n        }\n    }\n    public static void main(String[] args)\
    \ {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) ==\
    \ (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo_17hrjg.java:33)\n"
  stdout: ''
  timestamp: 1659800151
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n == 0) {\n            return 1;\n     \
    \   }\n        if (n % 2 == 0) {\n            long t = modp(n / 2, p);\n     \
    \       return (t * t) % p;\n        } else {\n            return (modp(n - 1,\
    \ p) * n) % p;\n        }\n    }\n    public static void main(String[] args) {\n\
    \    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n\
    \    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n\
    \    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n\
    \    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpx3c_4x8r.java:33)\n"
  stdout: ''
  timestamp: 1659800151
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        long res = 1;\n        long x = n % p;\n   \
    \     while (n > 0) {\n            if ((n & 1) == 1) {\n                res =\
    \ (res * x) % p;\n            }\n            x = (x * x) % p;\n            n >>=\
    \ 1;\n        }\n        return res;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l))\
    \ == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfn35z7xy.java:33)\n"
  stdout: ''
  timestamp: 1659800153
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n == 0) {\n            return 1;\n     \
    \   }\n        long ans = 1;\n        long base = n;\n        while (p > 0) {\n\
    \            if ((p & 1) == 1) {\n                ans = (ans * base) % MOD;\n\
    \            }\n            base = (base * base) % MOD;\n            p >>= 1;\n\
    \        }\n        return ans;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) ==\
    \ (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4ghd6tze.java:28: error: cannot find symbol\n                ans\
    \ = (ans * base) % MOD;\n                                     ^\n  symbol:   variable\
    \ MOD\n  location: class Problem\n/tmp/tmp4ghd6tze.java:30: error: cannot find\
    \ symbol\n            base = (base * base) % MOD;\n                          \
    \         ^\n  symbol:   variable MOD\n  location: class Problem\n2 errors\n"
  stdout: ''
  timestamp: 1659800153
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n == 0) {\n            return 1;\n     \
    \   }\n        if (n == 1) {\n            return n;\n        }\n        long half\
    \ = modp(n / 2, p);\n        if (n % 2 == 0) {\n            return (half * half)\
    \ % p;\n        } else {\n            return (half * half * n) % p;\n        }\n\
    \    }\n    public static void main(String[] args) {\n    assert(modp((3l), (5l))\
    \ == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpibi5b6_k.java:36)\n"
  stdout: ''
  timestamp: 1659800151
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n == 0) {\n            return 1;\n     \
    \   }\n        long res = modp(n / 2, p);\n        res = (res * res) % p;\n  \
    \      if (n % 2 == 1) {\n            res = (res * 2) % p;\n        }\n      \
    \  return res;\n    }\n    public static void main(String[] args) {\n    assert(modp((3l),\
    \ (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800151
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n == 0) {\n            return 1;\n     \
    \   }\n        if (n % 2 == 0) {\n            long t = modp(n / 2, p);\n     \
    \       return (t * t) % p;\n        } else {\n            return (modp(n - 1,\
    \ p) * n) % p;\n        }\n    }\n    public static void main(String[] args) {\n\
    \    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n\
    \    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n\
    \    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n\
    \    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpx3c_4x8r.java:33)\n"
  stdout: ''
  timestamp: 1659800151
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n == 0) {\n            return 1;\n     \
    \   }\n        if (n % 2 == 0) {\n            long t = modp(n / 2, p);\n     \
    \       return (t * t) % p;\n        } else {\n            return (modp(n - 1,\
    \ p) * n) % p;\n        }\n    }\n    public static void main(String[] args) {\n\
    \    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n\
    \    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n\
    \    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n\
    \    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpx3c_4x8r.java:33)\n"
  stdout: ''
  timestamp: 1659800151
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n == 0) {\n            return 1;\n     \
    \   }\n        if (n % 2 == 0) {\n            long t = modp(n / 2, p);\n     \
    \       return (t * t) % p;\n        } else {\n            return (n * modp(n\
    \ - 1, p)) % p;\n        }\n    }\n    public static void main(String[] args)\
    \ {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) ==\
    \ (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpq55er4kj.java:33)\n"
  stdout: ''
  timestamp: 1659800152
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        long r = 1;\n        long b = 2;\n        while\
    \ (n > 0) {\n            if ((n & 1) == 1) {\n                r = (r * b) % p;\n\
    \            }\n            n >>= 1;\n            b = (b * b) % p;\n        }\n\
    \        return r;\n    }\n    public static void main(String[] args) {\n    assert(modp((3l),\
    \ (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800153
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n == 0) {\n            return 1;\n     \
    \   }\n        if (n % 2 == 0) {\n            return modp(n / 2, p) * modp(n /\
    \ 2, p) % p;\n        } else {\n            return modp(n / 2, p) * modp(n / 2,\
    \ p) * n % p;\n        }\n    }\n    public static void main(String[] args) {\n\
    \    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n\
    \    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n\
    \    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n\
    \    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_urov2b_.java:32)\n"
  stdout: ''
  timestamp: 1659800151
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n == 0) {\n            return 1;\n     \
    \   }\n        if (n % 2 == 0) {\n            return modp(n / 2, p) * modp(n /\
    \ 2, p) % p;\n        } else {\n            return modp(n / 2, p) * modp(n / 2,\
    \ p) * n % p;\n        }\n    }\n    public static void main(String[] args) {\n\
    \    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n\
    \    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n\
    \    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n\
    \    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_urov2b_.java:32)\n"
  stdout: ''
  timestamp: 1659800151
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n == 0) {\n            return 1;\n     \
    \   }\n        if (n % 2 == 0) {\n            long x = modp(n / 2, p);\n     \
    \       return (x * x) % p;\n        } else {\n            return (modp(n - 1,\
    \ p) * n) % p;\n        }\n    }\n    public static void main(String[] args) {\n\
    \    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n\
    \    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n\
    \    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n\
    \    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnjyrzm0w.java:33)\n"
  stdout: ''
  timestamp: 1659800151
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n == 0) {\n            return 1;\n     \
    \   }\n        if (n % 2 == 0) {\n            long x = modp(n / 2, p);\n     \
    \       return (x * x) % p;\n        } else {\n            return (modp(n - 1,\
    \ p) * n) % p;\n        }\n    }\n    public static void main(String[] args) {\n\
    \    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n\
    \    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n\
    \    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n\
    \    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnjyrzm0w.java:33)\n"
  stdout: ''
  timestamp: 1659800151
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n == 0) {\n            return 1;\n     \
    \   }\n        if (n % 2 == 0) {\n            long m = modp(n / 2, p);\n     \
    \       return (m * m) % p;\n        } else {\n            return (n * modp(n\
    \ - 1, p)) % p;\n        }\n    }\n    public static void main(String[] args)\
    \ {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) ==\
    \ (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvvkccuhg.java:33)\n"
  stdout: ''
  timestamp: 1659800153
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n == 0) {\n            return 1;\n     \
    \   }\n        if (n % 2 == 0) {\n            long t = modp(n / 2, p);\n     \
    \       return (t * t) % p;\n        } else {\n            return (modp(n - 1,\
    \ p) * n) % p;\n        }\n    }\n    public static void main(String[] args) {\n\
    \    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n\
    \    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n\
    \    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n\
    \    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpx3c_4x8r.java:33)\n"
  stdout: ''
  timestamp: 1659800151
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n == 0) {\n            return 1;\n     \
    \   }\n        if (n == 1) {\n            return n;\n        }\n        if (n\
    \ % 2 == 0) {\n            long x = modp(n / 2, p);\n            return (x * x)\
    \ % p;\n        } else {\n            return (n * modp(n - 1, p)) % p;\n     \
    \   }\n    }\n    public static void main(String[] args) {\n    assert(modp((3l),\
    \ (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpduolmet1.java:36)\n"
  stdout: ''
  timestamp: 1659800152
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n == 0) {\n            return 1;\n     \
    \   }\n        if (n % 2 == 0) {\n            long x = modp(n / 2, p);\n     \
    \       return (x * x) % p;\n        } else {\n            return (modp(n - 1,\
    \ p) * n) % p;\n        }\n    }\n    public static void main(String[] args) {\n\
    \    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n\
    \    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n\
    \    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n\
    \    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnjyrzm0w.java:33)\n"
  stdout: ''
  timestamp: 1659800151
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        long res = 1;\n        long b = 2;\n       \
    \ while (n > 0) {\n            if ((n & 1) == 1) {\n                res = (res\
    \ * b) % p;\n            }\n            b = (b * b) % p;\n            n >>= 1;\n\
    \        }\n        return res;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) ==\
    \ (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800151
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        long res = 1;\n        long b = 2;\n       \
    \ while (n > 0) {\n            if ((n & 1) == 1) {\n                res = (res\
    \ * b) % p;\n            }\n            b = (b * b) % p;\n            n >>= 1;\n\
    \        }\n        return res;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) ==\
    \ (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800151
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n == 0) {\n            return 1;\n     \
    \   }\n        if (n % 2 == 0) {\n            long tmp = modp(n / 2, p);\n   \
    \         return (tmp * tmp) % p;\n        } else {\n            return (modp(n\
    \ - 1, p) * n) % p;\n        }\n    }\n    public static void main(String[] args)\
    \ {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) ==\
    \ (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp859aemap.java:33)\n"
  stdout: ''
  timestamp: 1659800153
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n == 0) {\n            return 1;\n     \
    \   }\n        if (n == 1) {\n            return n;\n        }\n        long half\
    \ = modp(n / 2, p);\n        long result = (half * half) % p;\n        if (n %\
    \ 2 == 1) {\n            result = (result * 2) % p;\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(modp((3l),\
    \ (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2hdjyhhp.java:35)\n"
  stdout: ''
  timestamp: 1659800152
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n == 0) {\n            return 1;\n     \
    \   }\n        if (n % 2 == 0) {\n            long x = modp(n / 2, p);\n     \
    \       return (x * x) % p;\n        } else {\n            return (modp(n - 1,\
    \ p) * n) % p;\n        }\n    }\n    public static void main(String[] args) {\n\
    \    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n\
    \    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n\
    \    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n\
    \    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnjyrzm0w.java:33)\n"
  stdout: ''
  timestamp: 1659800151
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n < 0) {\n            return modp(n + p,\
    \ p);\n        }\n        if (n == 0) {\n            return 1;\n        }\n  \
    \      if (n == 1) {\n            return n;\n        }\n        if (n % 2 == 0)\
    \ {\n            return modp(n / 2, p) * modp(n / 2, p) % p;\n        }\n    \
    \    return modp(n / 2, p) * modp(n / 2, p) * 2 % p;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l),\
    \ (101l)) == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l),\
    \ (11l)) == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2pbe1q84.java:36)\n"
  stdout: ''
  timestamp: 1659800153
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n == 0) {\n            return 1;\n     \
    \   }\n        if (n % 2 == 0) {\n            long x = modp(n / 2, p);\n     \
    \       return (x * x) % p;\n        } else {\n            return (n * modp(n\
    \ - 1, p)) % p;\n        }\n    }\n    public static void main(String[] args)\
    \ {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) ==\
    \ (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo_17hrjg.java:33)\n"
  stdout: ''
  timestamp: 1659800151
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        long res = 1;\n        long base = n;\n    \
    \    while (p > 0) {\n            if ((p & 1) == 1) {\n                res = (res\
    \ * base) % MOD;\n            }\n            base = (base * base) % MOD;\n   \
    \         p >>= 1;\n        }\n        return res;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l),\
    \ (101l)) == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l),\
    \ (11l)) == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpypbbix33.java:25: error: cannot find symbol\n                res\
    \ = (res * base) % MOD;\n                                     ^\n  symbol:   variable\
    \ MOD\n  location: class Problem\n/tmp/tmpypbbix33.java:27: error: cannot find\
    \ symbol\n            base = (base * base) % MOD;\n                          \
    \         ^\n  symbol:   variable MOD\n  location: class Problem\n2 errors\n"
  stdout: ''
  timestamp: 1659800152
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n == 0) {\n            return 1;\n     \
    \   }\n        if (n % 2 == 0) {\n            long x = modp(n / 2, p);\n     \
    \       return (x * x) % p;\n        } else {\n            return (modp(n - 1,\
    \ p) * n) % p;\n        }\n    }\n    public static void main(String[] args) {\n\
    \    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n\
    \    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n\
    \    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n\
    \    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnjyrzm0w.java:33)\n"
  stdout: ''
  timestamp: 1659800151
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n == 0) {\n            return 1;\n     \
    \   }\n        if (n % 2 == 0) {\n            long x = modp(n / 2, p);\n     \
    \       return (x * x) % p;\n        } else {\n            return (modp(n - 1,\
    \ p) * n) % p;\n        }\n    }\n    public static void main(String[] args) {\n\
    \    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n\
    \    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n\
    \    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n\
    \    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnjyrzm0w.java:33)\n"
  stdout: ''
  timestamp: 1659800151
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n == 0) {\n            return 1;\n     \
    \   }\n        if (n % 2 == 0) {\n            long t = modp(n / 2, p);\n     \
    \       return (t * t) % p;\n        } else {\n            return (modp(n - 1,\
    \ p) * n) % p;\n        }\n    }\n    public static void main(String[] args) {\n\
    \    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n\
    \    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n\
    \    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n\
    \    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpx3c_4x8r.java:33)\n"
  stdout: ''
  timestamp: 1659800151
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        long result = 1;\n        long base = n % p;\n\
    \        long exponent = n;\n        while (exponent > 0) {\n            if ((exponent\
    \ & 1) == 1) {\n                result = (result * base) % p;\n            }\n\
    \            exponent >>= 1;\n            base = (base * base) % p;\n        }\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n\
    \    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n\
    \    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n\
    \    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmph0row4t8.java:34)\n"
  stdout: ''
  timestamp: 1659800151
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n == 0) {\n            return 1;\n     \
    \   }\n        if (n % 2 == 0) {\n            long t = modp(n / 2, p);\n     \
    \       return (t * t) % p;\n        } else {\n            return (n * modp(n\
    \ - 1, p)) % p;\n        }\n    }\n    public static void main(String[] args)\
    \ {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) ==\
    \ (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpq55er4kj.java:33)\n"
  stdout: ''
  timestamp: 1659800152
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n == 0) {\n            return 1;\n     \
    \   }\n        if (n % 2 == 0) {\n            long x = modp(n / 2, p);\n     \
    \       return (x * x) % p;\n        } else {\n            return (modp(n - 1,\
    \ p) * n) % p;\n        }\n    }\n    public static void main(String[] args) {\n\
    \    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n\
    \    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n\
    \    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n\
    \    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnjyrzm0w.java:33)\n"
  stdout: ''
  timestamp: 1659800151
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n == 0) {\n            return 1;\n     \
    \   }\n        if (n % 2 == 0) {\n            return modp(n / 2, p) * modp(n /\
    \ 2, p) % p;\n        } else {\n            return modp(n / 2, p) * modp(n / 2,\
    \ p) * n % p;\n        }\n    }\n    public static void main(String[] args) {\n\
    \    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n\
    \    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n\
    \    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n\
    \    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_urov2b_.java:32)\n"
  stdout: ''
  timestamp: 1659800151
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n == 0) {\n            return 1;\n     \
    \   }\n        if (n % 2 == 0) {\n            long x = modp(n / 2, p);\n     \
    \       return (x * x) % p;\n        } else {\n            return (n * modp(n\
    \ - 1, p)) % p;\n        }\n    }\n    public static void main(String[] args)\
    \ {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) ==\
    \ (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo_17hrjg.java:33)\n"
  stdout: ''
  timestamp: 1659800151
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n == 0) {\n            return 1;\n     \
    \   }\n        long x = modp(n / 2, p);\n        x = (x * x) % p;\n        if\
    \ (n % 2 == 1) {\n            x = (x * 2) % p;\n        }\n        return x;\n\
    \    }\n    public static void main(String[] args) {\n    assert(modp((3l), (5l))\
    \ == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800153
- exit_code: -1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n == 0) return 1;\n        if (n == 1) return\
    \ n;\n        long res = 1;\n        while (n > 0) {\n            if ((n & 1)\
    \ == 1) {\n                res = (res * n) % p;\n            }\n            n\
    \ = n >> 1;\n            n = (n * n) % p;\n        }\n        return res;\n  \
    \  }\n    public static void main(String[] args) {\n    assert(modp((3l), (5l))\
    \ == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659800156
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n == 0) {\n            return 1;\n     \
    \   }\n        if (n % 2 == 0) {\n            long x = modp(n / 2, p);\n     \
    \       return (x * x) % p;\n        } else {\n            return (n * modp(n\
    \ - 1, p)) % p;\n        }\n    }\n    public static void main(String[] args)\
    \ {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) ==\
    \ (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo_17hrjg.java:33)\n"
  stdout: ''
  timestamp: 1659800151
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        long res = 1;\n        while (n > 0) {\n   \
    \         if ((n & 1) == 1) {\n                res = (res * 2) % p;\n        \
    \    }\n            n >>= 1;\n        }\n        return res;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(modp((3l), (5l)) == (3l));\n \
    \   assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) == (1l));\n\
    \    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l)) == (1l));\n\
    \    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplclmgb1l.java:31)\n"
  stdout: ''
  timestamp: 1659800151
- exit_code: -1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        long res = 1;\n        while (n > 0) {\n   \
    \         if ((n & 1) == 1) {\n                res = (res * n) % p;\n        \
    \    }\n            n = n >> 1;\n            n = (n * n) % p;\n        }\n   \
    \     return res;\n    }\n    public static void main(String[] args) {\n    assert(modp((3l),\
    \ (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659800155
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n == 0) {\n            return 1;\n     \
    \   }\n        if (n % 2 == 0) {\n            long t = modp(n / 2, p);\n     \
    \       return (t * t) % p;\n        } else {\n            return (modp(n - 1,\
    \ p) * n) % p;\n        }\n    }\n    public static void main(String[] args) {\n\
    \    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n\
    \    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n\
    \    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n\
    \    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpx3c_4x8r.java:33)\n"
  stdout: ''
  timestamp: 1659800151
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n == 0) {\n            return 1;\n     \
    \   }\n        if (n == 1) {\n            return n;\n        }\n        long half\
    \ = modp(n / 2, p);\n        long half2 = (half * half) % p;\n        if (n %\
    \ 2 == 0) {\n            return half2;\n        } else {\n            return (half2\
    \ * n) % p;\n        }\n    }\n    public static void main(String[] args) {\n\
    \    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n\
    \    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n\
    \    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n\
    \    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprirjiaw5.java:37)\n"
  stdout: ''
  timestamp: 1659800152
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n == 0) {\n            return 1;\n     \
    \   }\n        if (n % 2 == 0) {\n            long x = modp(n / 2, p);\n     \
    \       return (x * x) % p;\n        } else {\n            return (modp(n - 1,\
    \ p) * n) % p;\n        }\n    }\n    public static void main(String[] args) {\n\
    \    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n\
    \    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n\
    \    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n\
    \    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnjyrzm0w.java:33)\n"
  stdout: ''
  timestamp: 1659800151
