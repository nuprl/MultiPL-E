language: java
name: HumanEval_117_select_words
results:
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<String>();\n        String[]\
    \ words = s.split(\" \");\n        for (String word : words) {\n            if\
    \ (countConsonants(word) == n) {\n                result.add(word);\n        \
    \    }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpns2elfd9.java:29: error: cannot find symbol\n            if (countConsonants(word)\
    \ == n) {\n                ^\n  symbol:   method countConsonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659805042
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<String>();\n        String[]\
    \ words = s.split(\" \");\n        for (String word : words) {\n            if\
    \ (countConsonants(word) == n) {\n                result.add(word);\n        \
    \    }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpns2elfd9.java:29: error: cannot find symbol\n            if (countConsonants(word)\
    \ == n) {\n                ^\n  symbol:   method countConsonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659805042
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<String>();\n        String[]\
    \ words = s.split(\" \");\n        for (String word : words) {\n            if\
    \ (countConsonants(word) == n) {\n                result.add(word);\n        \
    \    }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpns2elfd9.java:29: error: cannot find symbol\n            if (countConsonants(word)\
    \ == n) {\n                ^\n  symbol:   method countConsonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659805042
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> words = new ArrayList<String>();\n        for (String\
    \ word : s.split(\" \")) {\n            if (countConsonants(word) == n) {\n  \
    \              words.add(word);\n            }\n        }\n        return words;\n\
    \    }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpipc9x8q0.java:28: error: cannot find symbol\n            if (countConsonants(word)\
    \ == n) {\n                ^\n  symbol:   method countConsonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659805042
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<String>();\n        String[]\
    \ words = s.split(\" \");\n        for (String word : words) {\n            if\
    \ (countConsonants(word) == n) {\n                result.add(word);\n        \
    \    }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpns2elfd9.java:29: error: cannot find symbol\n            if (countConsonants(word)\
    \ == n) {\n                ^\n  symbol:   method countConsonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659805042
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<String>();\n        String[]\
    \ words = s.split(\" \");\n        for (String word : words) {\n            if\
    \ (countConsonants(word) == n) {\n                result.add(word);\n        \
    \    }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpns2elfd9.java:29: error: cannot find symbol\n            if (countConsonants(word)\
    \ == n) {\n                ^\n  symbol:   method countConsonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659805042
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<String>();\n        String[]\
    \ words = s.split(\" \");\n        for (String word : words) {\n            if\
    \ (consonants(word) == n) {\n                result.add(word);\n            }\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprx2r7mtz.java:29: error: cannot find symbol\n            if (consonants(word)\
    \ == n) {\n                ^\n  symbol:   method consonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659805042
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<String>();\n        String[]\
    \ words = s.split(\" \");\n        for (String word : words) {\n            if\
    \ (countConsonants(word) == n) {\n                result.add(word);\n        \
    \    }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpns2elfd9.java:29: error: cannot find symbol\n            if (countConsonants(word)\
    \ == n) {\n                ^\n  symbol:   method countConsonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659805042
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<String>();\n        String[]\
    \ words = s.split(\" \");\n        for (String word : words) {\n            if\
    \ (countConsonants(word) == n) {\n                result.add(word);\n        \
    \    }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpns2elfd9.java:29: error: cannot find symbol\n            if (countConsonants(word)\
    \ == n) {\n                ^\n  symbol:   method countConsonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659805042
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<String>();\n        String[]\
    \ words = s.split(\" \");\n        for (String word : words) {\n            if\
    \ (countConsonants(word) == n) {\n                result.add(word);\n        \
    \    }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpns2elfd9.java:29: error: cannot find symbol\n            if (countConsonants(word)\
    \ == n) {\n                ^\n  symbol:   method countConsonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659805042
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<String>();\n        String[]\
    \ words = s.split(\" \");\n        for (String word : words) {\n            if\
    \ (countConsonants(word) == n) {\n                result.add(word);\n        \
    \    }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpns2elfd9.java:29: error: cannot find symbol\n            if (countConsonants(word)\
    \ == n) {\n                ^\n  symbol:   method countConsonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659805042
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<String>();\n        String[]\
    \ words = s.split(\" \");\n        for (String word : words) {\n            if\
    \ (countConsonants(word) == n) {\n                result.add(word);\n        \
    \    }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpns2elfd9.java:29: error: cannot find symbol\n            if (countConsonants(word)\
    \ == n) {\n                ^\n  symbol:   method countConsonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659805042
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<String>();\n        String[]\
    \ words = s.split(\" \");\n        for (String word : words) {\n            if\
    \ (countConsonants(word) == n) {\n                result.add(word);\n        \
    \    }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpns2elfd9.java:29: error: cannot find symbol\n            if (countConsonants(word)\
    \ == n) {\n                ^\n  symbol:   method countConsonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659805042
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<String>();\n        String[]\
    \ words = s.split(\" \");\n        for (String word : words) {\n            if\
    \ (countConsonants(word) == n) {\n                result.add(word);\n        \
    \    }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpns2elfd9.java:29: error: cannot find symbol\n            if (countConsonants(word)\
    \ == n) {\n                ^\n  symbol:   method countConsonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659805042
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<String>();\n        String[]\
    \ words = s.split(\" \");\n        for (String word : words) {\n            if\
    \ (countConsonants(word) == n) {\n                result.add(word);\n        \
    \    }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpns2elfd9.java:29: error: cannot find symbol\n            if (countConsonants(word)\
    \ == n) {\n                ^\n  symbol:   method countConsonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659805042
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<String>();\n        String[]\
    \ words = s.split(\" \");\n        for (String word : words) {\n            if\
    \ (countConsonants(word) == n) {\n                result.add(word);\n        \
    \    }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpns2elfd9.java:29: error: cannot find symbol\n            if (countConsonants(word)\
    \ == n) {\n                ^\n  symbol:   method countConsonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659805042
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> res = new ArrayList<String>();\n        String[]\
    \ words = s.split(\" \");\n        for (String word : words) {\n            if\
    \ (countConsonants(word) == n) {\n                res.add(word);\n           \
    \ }\n        }\n        return res;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpv2rwzdzb.java:29: error: cannot find symbol\n            if (countConsonants(word)\
    \ == n) {\n                ^\n  symbol:   method countConsonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659805042
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<String>();\n        String[]\
    \ words = s.split(\" \");\n        for (String word : words) {\n            if\
    \ (countConsonants(word) == n) {\n                result.add(word);\n        \
    \    }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpns2elfd9.java:29: error: cannot find symbol\n            if (countConsonants(word)\
    \ == n) {\n                ^\n  symbol:   method countConsonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659805042
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<String>();\n        String[]\
    \ words = s.split(\" \");\n        for (String word : words) {\n            if\
    \ (countConsonants(word) == n) {\n                result.add(word);\n        \
    \    }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpns2elfd9.java:29: error: cannot find symbol\n            if (countConsonants(word)\
    \ == n) {\n                ^\n  symbol:   method countConsonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659805042
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<String>();\n        String[]\
    \ words = s.split(\" \");\n        for (String word : words) {\n            if\
    \ (word.length() == n) {\n                result.add(word);\n            }\n \
    \       }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppnlpkc7y.java:36)\n"
  stdout: ''
  timestamp: 1659805042
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<String>();\n        String[]\
    \ words = s.split(\" \");\n        for (String word : words) {\n            if\
    \ (word.length() == n) {\n                result.add(word);\n            }\n \
    \       }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppnlpkc7y.java:36)\n"
  stdout: ''
  timestamp: 1659805042
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<String>();\n        String[]\
    \ words = s.split(\" \");\n        for (String word : words) {\n            if\
    \ (word.length() > 0 && countConsonants(word) == n) {\n                result.add(word);\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"),\
    \ (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdzur_4p1.java:29: error: cannot find symbol\n            if (word.length()\
    \ > 0 && countConsonants(word) == n) {\n                                     ^\n\
    \  symbol:   method countConsonants(String)\n  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659805042
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<String>();\n        String[]\
    \ words = s.split(\" \");\n        for (String word : words) {\n            if\
    \ (word.length() == n) {\n                result.add(word);\n            }\n \
    \       }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppnlpkc7y.java:36)\n"
  stdout: ''
  timestamp: 1659805042
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<String>();\n        String[]\
    \ words = s.split(\" \");\n        for (String word : words) {\n            if\
    \ (countConsonants(word) == n) {\n                result.add(word);\n        \
    \    }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpns2elfd9.java:29: error: cannot find symbol\n            if (countConsonants(word)\
    \ == n) {\n                ^\n  symbol:   method countConsonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659805042
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<String>();\n        String[]\
    \ words = s.split(\" \");\n        for (String word : words) {\n            if\
    \ (countConsonants(word) == n) {\n                result.add(word);\n        \
    \    }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpns2elfd9.java:29: error: cannot find symbol\n            if (countConsonants(word)\
    \ == n) {\n                ^\n  symbol:   method countConsonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659805042
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<String>();\n        String[]\
    \ words = s.split(\" \");\n        for (String word : words) {\n            if\
    \ (countConsonants(word) == n) {\n                result.add(word);\n        \
    \    }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpns2elfd9.java:29: error: cannot find symbol\n            if (countConsonants(word)\
    \ == n) {\n                ^\n  symbol:   method countConsonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659805042
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<String>();\n        String[]\
    \ words = s.split(\" \");\n        for (String word : words) {\n            if\
    \ (countConsonants(word) == n) {\n                result.add(word);\n        \
    \    }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpns2elfd9.java:29: error: cannot find symbol\n            if (countConsonants(word)\
    \ == n) {\n                ^\n  symbol:   method countConsonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659805042
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> words = new ArrayList<String>();\n        String[]\
    \ words_array = s.split(\" \");\n        for (String word : words_array) {\n \
    \           if (countConsonants(word) == n) {\n                words.add(word);\n\
    \            }\n        }\n        return words;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"),\
    \ (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqhz0f94k.java:29: error: cannot find symbol\n            if (countConsonants(word)\
    \ == n) {\n                ^\n  symbol:   method countConsonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659805042
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> words = new ArrayList<String>();\n        String[]\
    \ words_arr = s.split(\" \");\n        for (String word : words_arr) {\n     \
    \       if (countConsonants(word) == n) {\n                words.add(word);\n\
    \            }\n        }\n        return words;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"),\
    \ (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyzhr21wx.java:29: error: cannot find symbol\n            if (countConsonants(word)\
    \ == n) {\n                ^\n  symbol:   method countConsonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659805042
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> words = new ArrayList<String>();\n        String[]\
    \ words_array = s.split(\" \");\n        for (String word : words_array) {\n \
    \           if (countConsonants(word) == n) {\n                words.add(word);\n\
    \            }\n        }\n        return words;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"),\
    \ (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqhz0f94k.java:29: error: cannot find symbol\n            if (countConsonants(word)\
    \ == n) {\n                ^\n  symbol:   method countConsonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659805042
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<String>();\n        String[]\
    \ words = s.split(\" \");\n        for (String word : words) {\n            if\
    \ (countConsonants(word) == n) {\n                result.add(word);\n        \
    \    }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpns2elfd9.java:29: error: cannot find symbol\n            if (countConsonants(word)\
    \ == n) {\n                ^\n  symbol:   method countConsonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659805042
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        return new ArrayList<String>();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpq420lxns.java:29)\n"
  stdout: ''
  timestamp: 1659805042
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<String>();\n        String[]\
    \ words = s.split(\" \");\n        for (String word : words) {\n            if\
    \ (countConsonants(word) == n) {\n                result.add(word);\n        \
    \    }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpns2elfd9.java:29: error: cannot find symbol\n            if (countConsonants(word)\
    \ == n) {\n                ^\n  symbol:   method countConsonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659805042
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<String>();\n        String[]\
    \ words = s.split(\" \");\n        for (String word : words) {\n            long\
    \ count = 0;\n            for (char c : word.toCharArray()) {\n              \
    \  if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u') {\n         \
    \           count++;\n                }\n            }\n            if (count\
    \ == n) {\n                result.add(word);\n            }\n        }\n     \
    \   return result;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxv0cerbe.java:46)\n"
  stdout: ''
  timestamp: 1659805042
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<String>();\n        String[]\
    \ words = s.split(\" \");\n        for (String word : words) {\n            if\
    \ (countConsonants(word) == n) {\n                result.add(word);\n        \
    \    }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpns2elfd9.java:29: error: cannot find symbol\n            if (countConsonants(word)\
    \ == n) {\n                ^\n  symbol:   method countConsonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659805042
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<String>();\n        String[]\
    \ words = s.split(\" \");\n        for (String word : words) {\n            if\
    \ (countConsonants(word) == n) {\n                result.add(word);\n        \
    \    }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpns2elfd9.java:29: error: cannot find symbol\n            if (countConsonants(word)\
    \ == n) {\n                ^\n  symbol:   method countConsonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659805042
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> words = new ArrayList<String>();\n        String[]\
    \ split = s.split(\" \");\n        for (String word : split) {\n            if\
    \ (word.length() > 0) {\n                if (countConsonants(word) == n) {\n \
    \                   words.add(word);\n                }\n            }\n     \
    \   }\n        return words;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmps6dui_qb.java:30: error: cannot find symbol\n                if\
    \ (countConsonants(word) == n) {\n                    ^\n  symbol:   method countConsonants(String)\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659805042
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<String>();\n        String[]\
    \ words = s.split(\" \");\n        for (String word : words) {\n            if\
    \ (countConsonants(word) == n) {\n                result.add(word);\n        \
    \    }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpns2elfd9.java:29: error: cannot find symbol\n            if (countConsonants(word)\
    \ == n) {\n                ^\n  symbol:   method countConsonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659805042
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<String>();\n        String[]\
    \ words = s.split(\" \");\n        for (String word : words) {\n            if\
    \ (countConsonants(word) == n) {\n                result.add(word);\n        \
    \    }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpns2elfd9.java:29: error: cannot find symbol\n            if (countConsonants(word)\
    \ == n) {\n                ^\n  symbol:   method countConsonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659805042
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<String>();\n        String[]\
    \ words = s.split(\" \");\n        for (String word : words) {\n            if\
    \ (countConsonants(word) == n) {\n                result.add(word);\n        \
    \    }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpns2elfd9.java:29: error: cannot find symbol\n            if (countConsonants(word)\
    \ == n) {\n                ^\n  symbol:   method countConsonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659805042
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> words = new ArrayList<String>();\n        String[]\
    \ wordsArray = s.split(\" \");\n        for (String word : wordsArray) {\n   \
    \         if (countConsonants(word) == n) {\n                words.add(word);\n\
    \            }\n        }\n        return words;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"),\
    \ (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdg52jauu.java:29: error: cannot find symbol\n            if (countConsonants(word)\
    \ == n) {\n                ^\n  symbol:   method countConsonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659805042
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<String>();\n        String[]\
    \ words = s.split(\" \");\n        for (String word : words) {\n            if\
    \ (countConsonants(word) == n) {\n                result.add(word);\n        \
    \    }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpns2elfd9.java:29: error: cannot find symbol\n            if (countConsonants(word)\
    \ == n) {\n                ^\n  symbol:   method countConsonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659805042
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> words = new ArrayList<String>();\n        String[]\
    \ wordsArray = s.split(\" \");\n        for (String word : wordsArray) {\n   \
    \         if (countConsonants(word) == n) {\n                words.add(word);\n\
    \            }\n        }\n        return words;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"),\
    \ (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdg52jauu.java:29: error: cannot find symbol\n            if (countConsonants(word)\
    \ == n) {\n                ^\n  symbol:   method countConsonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659805042
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        // Write your code here\n        // To print results to the standard\
    \ output you can use System.out.println()\n        // Example: System.out.println(\"\
    Hello world!\");\n        ArrayList<String> result = new ArrayList<String>();\n\
    \        String[] words = s.split(\" \");\n        for (String word : words) {\n\
    \            if (countConsonants(word) == n) {\n                result.add(word);\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"),\
    \ (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxsllot6e.java:32: error: cannot find symbol\n            if (countConsonants(word)\
    \ == n) {\n                ^\n  symbol:   method countConsonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659805042
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<String>();\n        String[]\
    \ words = s.split(\" \");\n        for (String word : words) {\n            if\
    \ (countConsonants(word) == n) {\n                result.add(word);\n        \
    \    }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpns2elfd9.java:29: error: cannot find symbol\n            if (countConsonants(word)\
    \ == n) {\n                ^\n  symbol:   method countConsonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659805042
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<String>();\n        String[]\
    \ words = s.split(\" \");\n        for (String word : words) {\n            if\
    \ (countConsonants(word) == n) {\n                result.add(word);\n        \
    \    }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpns2elfd9.java:29: error: cannot find symbol\n            if (countConsonants(word)\
    \ == n) {\n                ^\n  symbol:   method countConsonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659805042
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<String>();\n        String[]\
    \ words = s.split(\" \");\n        for (String word : words) {\n            if\
    \ (countConsonants(word) == n) {\n                result.add(word);\n        \
    \    }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpns2elfd9.java:29: error: cannot find symbol\n            if (countConsonants(word)\
    \ == n) {\n                ^\n  symbol:   method countConsonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659805042
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> words = new ArrayList<String>();\n        String[]\
    \ split = s.split(\" \");\n        for (String word : split) {\n            if\
    \ (word.length() == n) {\n                words.add(word);\n            }\n  \
    \      }\n        return words;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6hc05n_t.java:36)\n"
  stdout: ''
  timestamp: 1659805042
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<String>();\n        String[]\
    \ words = s.split(\" \");\n        for (String word : words) {\n            if\
    \ (countConsonants(word) == n) {\n                result.add(word);\n        \
    \    }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpns2elfd9.java:29: error: cannot find symbol\n            if (countConsonants(word)\
    \ == n) {\n                ^\n  symbol:   method countConsonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659805042
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> words = new ArrayList<String>();\n        String[]\
    \ wordsInString = s.split(\" \");\n        for (String word : wordsInString) {\n\
    \            if (countConsonants(word) == n) {\n                words.add(word);\n\
    \            }\n        }\n        return words;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"),\
    \ (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6304dsqo.java:29: error: cannot find symbol\n            if (countConsonants(word)\
    \ == n) {\n                ^\n  symbol:   method countConsonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659805042
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<String>();\n        String[]\
    \ words = s.split(\" \");\n        for (String word : words) {\n            if\
    \ (countConsonants(word) == n) {\n                result.add(word);\n        \
    \    }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpns2elfd9.java:29: error: cannot find symbol\n            if (countConsonants(word)\
    \ == n) {\n                ^\n  symbol:   method countConsonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659805042
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<String>();\n        String[]\
    \ words = s.split(\" \");\n        for (String word : words) {\n            if\
    \ (countConsonants(word) == n) {\n                result.add(word);\n        \
    \    }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpns2elfd9.java:29: error: cannot find symbol\n            if (countConsonants(word)\
    \ == n) {\n                ^\n  symbol:   method countConsonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659805042
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<String>();\n        String[]\
    \ words = s.split(\" \");\n        for (String word : words) {\n            if\
    \ (countConsonants(word) == n) {\n                result.add(word);\n        \
    \    }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpns2elfd9.java:29: error: cannot find symbol\n            if (countConsonants(word)\
    \ == n) {\n                ^\n  symbol:   method countConsonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659805042
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<String>();\n        String[]\
    \ words = s.split(\" \");\n        for (String word : words) {\n            if\
    \ (countConsonants(word) == n) {\n                result.add(word);\n        \
    \    }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpns2elfd9.java:29: error: cannot find symbol\n            if (countConsonants(word)\
    \ == n) {\n                ^\n  symbol:   method countConsonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659805042
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<String>();\n        String[]\
    \ words = s.split(\" \");\n        for (String word : words) {\n            if\
    \ (countConsonants(word) == n) {\n                result.add(word);\n        \
    \    }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpns2elfd9.java:29: error: cannot find symbol\n            if (countConsonants(word)\
    \ == n) {\n                ^\n  symbol:   method countConsonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659805042
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> words = new ArrayList<String>();\n        String[]\
    \ array = s.split(\" \");\n        for (String word : array) {\n            if\
    \ (countConsonants(word) == n) {\n                words.add(word);\n         \
    \   }\n        }\n        return words;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvq4fg3_h.java:29: error: cannot find symbol\n            if (countConsonants(word)\
    \ == n) {\n                ^\n  symbol:   method countConsonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659805042
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> words = new ArrayList<String>();\n        String[]\
    \ wordsInString = s.split(\" \");\n        for (String word : wordsInString) {\n\
    \            if (countConsonants(word) == n) {\n                words.add(word);\n\
    \            }\n        }\n        return words;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"),\
    \ (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6304dsqo.java:29: error: cannot find symbol\n            if (countConsonants(word)\
    \ == n) {\n                ^\n  symbol:   method countConsonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659805042
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> words = new ArrayList<String>();\n        String[]\
    \ words_array = s.split(\" \");\n        for (String word : words_array) {\n \
    \           if (countConsonants(word) == n) {\n                words.add(word);\n\
    \            }\n        }\n        return words;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"),\
    \ (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqhz0f94k.java:29: error: cannot find symbol\n            if (countConsonants(word)\
    \ == n) {\n                ^\n  symbol:   method countConsonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659805042
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<String>();\n        String[]\
    \ words = s.split(\" \");\n        for (String word : words) {\n            if\
    \ (countConsonants(word) == n) {\n                result.add(word);\n        \
    \    }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpns2elfd9.java:29: error: cannot find symbol\n            if (countConsonants(word)\
    \ == n) {\n                ^\n  symbol:   method countConsonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659805042
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<String>();\n        String[]\
    \ words = s.split(\" \");\n        for (String word : words) {\n            if\
    \ (countConsonants(word) == n) {\n                result.add(word);\n        \
    \    }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpns2elfd9.java:29: error: cannot find symbol\n            if (countConsonants(word)\
    \ == n) {\n                ^\n  symbol:   method countConsonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659805042
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<String>();\n        String[]\
    \ words = s.split(\" \");\n        for (String word : words) {\n            if\
    \ (countConsonants(word) == n) {\n                result.add(word);\n        \
    \    }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpns2elfd9.java:29: error: cannot find symbol\n            if (countConsonants(word)\
    \ == n) {\n                ^\n  symbol:   method countConsonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659805042
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        // Your code here\n        return null;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"\
    ), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.selectWords(String,\
    \ long)\" is null\n\tat Problem.main(tmpwor9xg02.java:30)\n"
  stdout: ''
  timestamp: 1659805042
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> words = new ArrayList<String>();\n        String[]\
    \ words_array = s.split(\" \");\n        for (String word : words_array) {\n \
    \           if (countConsonants(word) == n) {\n                words.add(word);\n\
    \            }\n        }\n        return words;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"),\
    \ (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqhz0f94k.java:29: error: cannot find symbol\n            if (countConsonants(word)\
    \ == n) {\n                ^\n  symbol:   method countConsonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659805042
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> words = new ArrayList<String>();\n        String[]\
    \ words_array = s.split(\" \");\n        for (String word : words_array) {\n \
    \           if (consonants(word) == n) {\n                words.add(word);\n \
    \           }\n        }\n        return words;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"),\
    \ (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxzv7xvlx.java:29: error: cannot find symbol\n            if (consonants(word)\
    \ == n) {\n                ^\n  symbol:   method consonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659805042
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> words = new ArrayList<String>();\n        String[]\
    \ wordsArr = s.split(\" \");\n        for (String word : wordsArr) {\n       \
    \     if (countConsonants(word) == n) {\n                words.add(word);\n  \
    \          }\n        }\n        return words;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"),\
    \ (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdx1f66dl.java:29: error: cannot find symbol\n            if (countConsonants(word)\
    \ == n) {\n                ^\n  symbol:   method countConsonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659805042
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<String>();\n        String[]\
    \ words = s.split(\" \");\n        for (String word : words) {\n            if\
    \ (countConsonants(word) == n) {\n                result.add(word);\n        \
    \    }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpns2elfd9.java:29: error: cannot find symbol\n            if (countConsonants(word)\
    \ == n) {\n                ^\n  symbol:   method countConsonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659805042
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> words = new ArrayList<String>();\n        String[]\
    \ words_array = s.split(\" \");\n        for (String word : words_array) {\n \
    \           if (countConsonants(word) == n) {\n                words.add(word);\n\
    \            }\n        }\n        return words;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"),\
    \ (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqhz0f94k.java:29: error: cannot find symbol\n            if (countConsonants(word)\
    \ == n) {\n                ^\n  symbol:   method countConsonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659805042
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<String>();\n        String[]\
    \ words = s.split(\" \");\n        for (String word : words) {\n            if\
    \ (countConsonants(word) == n) {\n                result.add(word);\n        \
    \    }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpns2elfd9.java:29: error: cannot find symbol\n            if (countConsonants(word)\
    \ == n) {\n                ^\n  symbol:   method countConsonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659805042
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        // your code goes here\n        return null;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"\
    ), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.selectWords(String,\
    \ long)\" is null\n\tat Problem.main(tmp30_a3b0n.java:30)\n"
  stdout: ''
  timestamp: 1659805042
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> words = new ArrayList<String>();\n        String[]\
    \ split = s.split(\" \");\n        for (String word : split) {\n            if\
    \ (countConsonants(word) == n) {\n                words.add(word);\n         \
    \   }\n        }\n        return words;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmrlun9q3.java:29: error: cannot find symbol\n            if (countConsonants(word)\
    \ == n) {\n                ^\n  symbol:   method countConsonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659805042
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        // Write your code here\n        // To print results to the standard\
    \ output you can use System.out.println()\n        // Example: System.out.println(\"\
    Hello world!\");\n        ArrayList<String> result = new ArrayList<String>();\n\
    \        String[] words = s.split(\" \");\n        for (String word : words) {\n\
    \            if (word.length() > 0) {\n                int count = 0;\n      \
    \          for (int i = 0; i < word.length(); i++) {\n                    if (isConsonant(word.charAt(i)))\
    \ {\n                        count++;\n                    }\n               \
    \ }\n                if (count == n) {\n                    result.add(word);\n\
    \                }\n            }\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnke4yb4s.java:35: error: cannot find symbol\n                 \
    \   if (isConsonant(word.charAt(i))) {\n                        ^\n  symbol: \
    \  method isConsonant(char)\n  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659805042
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<String>();\n        String[]\
    \ words = s.split(\" \");\n        for (String word : words) {\n            if\
    \ (countConsonants(word) == n) {\n                result.add(word);\n        \
    \    }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpns2elfd9.java:29: error: cannot find symbol\n            if (countConsonants(word)\
    \ == n) {\n                ^\n  symbol:   method countConsonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659805042
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<String>();\n        String[]\
    \ words = s.split(\" \");\n        for (String word : words) {\n            if\
    \ (countConsonants(word) == n) {\n                result.add(word);\n        \
    \    }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpns2elfd9.java:29: error: cannot find symbol\n            if (countConsonants(word)\
    \ == n) {\n                ^\n  symbol:   method countConsonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659805042
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<String>();\n        String[]\
    \ words = s.split(\" \");\n        for (String word : words) {\n            if\
    \ (consonants(word) == n) {\n                result.add(word);\n            }\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprx2r7mtz.java:29: error: cannot find symbol\n            if (consonants(word)\
    \ == n) {\n                ^\n  symbol:   method consonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659805042
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> words = new ArrayList<String>();\n        String[]\
    \ words_array = s.split(\" \");\n        for (String word : words_array) {\n \
    \           if (countConsonants(word) == n) {\n                words.add(word);\n\
    \            }\n        }\n        return words;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"),\
    \ (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqhz0f94k.java:29: error: cannot find symbol\n            if (countConsonants(word)\
    \ == n) {\n                ^\n  symbol:   method countConsonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659805042
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<String>();\n        String[]\
    \ words = s.split(\" \");\n        for (String word : words) {\n            if\
    \ (countConsonants(word) == n) {\n                result.add(word);\n        \
    \    }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpns2elfd9.java:29: error: cannot find symbol\n            if (countConsonants(word)\
    \ == n) {\n                ^\n  symbol:   method countConsonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659805042
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<String>();\n        String[]\
    \ words = s.split(\" \");\n        for (String word : words) {\n            if\
    \ (word.length() == n) {\n                result.add(word);\n            }\n \
    \       }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppnlpkc7y.java:36)\n"
  stdout: ''
  timestamp: 1659805042
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> words = new ArrayList<String>();\n        String[]\
    \ wordsArr = s.split(\" \");\n        for (String word : wordsArr) {\n       \
    \     if (countConsonants(word) == n) {\n                words.add(word);\n  \
    \          }\n        }\n        return words;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"),\
    \ (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdx1f66dl.java:29: error: cannot find symbol\n            if (countConsonants(word)\
    \ == n) {\n                ^\n  symbol:   method countConsonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659805042
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<String>();\n        String[]\
    \ words = s.split(\" \");\n        for (String word : words) {\n            if\
    \ (countConsonants(word) == n) {\n                result.add(word);\n        \
    \    }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpns2elfd9.java:29: error: cannot find symbol\n            if (countConsonants(word)\
    \ == n) {\n                ^\n  symbol:   method countConsonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659805042
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<String>();\n        String[]\
    \ words = s.split(\" \");\n        for (String word : words) {\n            if\
    \ (countConsonants(word) == n) {\n                result.add(word);\n        \
    \    }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpns2elfd9.java:29: error: cannot find symbol\n            if (countConsonants(word)\
    \ == n) {\n                ^\n  symbol:   method countConsonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659805042
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<String>();\n        String[]\
    \ words = s.split(\" \");\n        for (String word : words) {\n            if\
    \ (countConsonants(word) == n) {\n                result.add(word);\n        \
    \    }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpns2elfd9.java:29: error: cannot find symbol\n            if (countConsonants(word)\
    \ == n) {\n                ^\n  symbol:   method countConsonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659805042
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> words = new ArrayList<String>();\n        for (String\
    \ word : s.split(\" \")) {\n            if (countConsonants(word) == n) {\n  \
    \              words.add(word);\n            }\n        }\n        return words;\n\
    \    }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpipc9x8q0.java:28: error: cannot find symbol\n            if (countConsonants(word)\
    \ == n) {\n                ^\n  symbol:   method countConsonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659805042
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<String>();\n        String[]\
    \ words = s.split(\" \");\n        for (String word : words) {\n            if\
    \ (countConsonants(word) == n) {\n                result.add(word);\n        \
    \    }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpns2elfd9.java:29: error: cannot find symbol\n            if (countConsonants(word)\
    \ == n) {\n                ^\n  symbol:   method countConsonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659805042
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> words = new ArrayList<String>();\n        String[]\
    \ wordsArray = s.split(\" \");\n        for (String word : wordsArray) {\n   \
    \         if (word.length() - word.replaceAll(\"[aeiouAEIOU]\", \"\").length()\
    \ == n) {\n                words.add(word);\n            }\n        }\n      \
    \  return words;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpj0yq0op_.java:36)\n"
  stdout: ''
  timestamp: 1659805042
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        return new ArrayList<String>();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpq420lxns.java:29)\n"
  stdout: ''
  timestamp: 1659805042
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> words = new ArrayList<String>();\n        String[]\
    \ words_array = s.split(\" \");\n        for (String word : words_array) {\n \
    \           if (countConsonants(word) == n) {\n                words.add(word);\n\
    \            }\n        }\n        return words;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"),\
    \ (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqhz0f94k.java:29: error: cannot find symbol\n            if (countConsonants(word)\
    \ == n) {\n                ^\n  symbol:   method countConsonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659805042
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<String>();\n        String[]\
    \ words = s.split(\" \");\n        for (String word : words) {\n            long\
    \ consonants = 0;\n            for (int i = 0; i < word.length(); i++) {\n   \
    \             char c = word.charAt(i);\n                if (c != 'a' && c != 'e'\
    \ && c != 'i' && c != 'o' && c != 'u') {\n                    consonants++;\n\
    \                }\n            }\n            if (consonants == n) {\n      \
    \          result.add(word);\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6gio6jqd.java:47)\n"
  stdout: ''
  timestamp: 1659805043
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> words = new ArrayList<String>();\n        String[]\
    \ wordsArray = s.split(\" \");\n        for (String word : wordsArray) {\n   \
    \         if (countConsonants(word) == n) {\n                words.add(word);\n\
    \            }\n        }\n        return words;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"),\
    \ (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdg52jauu.java:29: error: cannot find symbol\n            if (countConsonants(word)\
    \ == n) {\n                ^\n  symbol:   method countConsonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659805042
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<String>();\n        String[]\
    \ words = s.split(\" \");\n        for (String word : words) {\n            if\
    \ (countConsonants(word) == n) {\n                result.add(word);\n        \
    \    }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpns2elfd9.java:29: error: cannot find symbol\n            if (countConsonants(word)\
    \ == n) {\n                ^\n  symbol:   method countConsonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659805042
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<String>();\n        String[]\
    \ words = s.split(\" \");\n        for (String word : words) {\n            if\
    \ (countConsonants(word) == n) {\n                result.add(word);\n        \
    \    }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpns2elfd9.java:29: error: cannot find symbol\n            if (countConsonants(word)\
    \ == n) {\n                ^\n  symbol:   method countConsonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659805042
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<String>();\n        String[]\
    \ words = s.split(\" \");\n        for (String word : words) {\n            int\
    \ count = 0;\n            for (int i = 0; i < word.length(); i++) {\n        \
    \        if (word.charAt(i) != 'a' && word.charAt(i) != 'e' && word.charAt(i)\
    \ != 'i' && word.charAt(i) != 'o' && word.charAt(i) != 'u') {\n              \
    \      count++;\n                }\n            }\n            if (count == n)\
    \ {\n                result.add(word);\n            }\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpudcodb4v.java:46)\n"
  stdout: ''
  timestamp: 1659805043
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<String>();\n        String[]\
    \ words = s.split(\"\\\\s+\");\n        for (String word : words) {\n        \
    \    if (word.length() == n) {\n                result.add(word);\n          \
    \  }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp87meigvm.java:36)\n"
  stdout: ''
  timestamp: 1659805043
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> words = new ArrayList<String>();\n        String[]\
    \ wordsArray = s.split(\" \");\n        for (String word : wordsArray) {\n   \
    \         if (countConsonants(word) == n) {\n                words.add(word);\n\
    \            }\n        }\n        return words;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"),\
    \ (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdg52jauu.java:29: error: cannot find symbol\n            if (countConsonants(word)\
    \ == n) {\n                ^\n  symbol:   method countConsonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659805042
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> words = new ArrayList<String>();\n        String[]\
    \ words_array = s.split(\" \");\n        for (String word : words_array) {\n \
    \           if (countConsonants(word) == n) {\n                words.add(word);\n\
    \            }\n        }\n        return words;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"),\
    \ (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqhz0f94k.java:29: error: cannot find symbol\n            if (countConsonants(word)\
    \ == n) {\n                ^\n  symbol:   method countConsonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659805042
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> words = new ArrayList<String>();\n        String[]\
    \ wordsArr = s.split(\" \");\n        for (String word : wordsArr) {\n       \
    \     if (countConsonants(word) == n) {\n                words.add(word);\n  \
    \          }\n        }\n        return words;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"),\
    \ (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdx1f66dl.java:29: error: cannot find symbol\n            if (countConsonants(word)\
    \ == n) {\n                ^\n  symbol:   method countConsonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659805042
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<String>();\n        String[]\
    \ words = s.split(\" \");\n        for (String word : words) {\n            if\
    \ (isConsonant(word, n)) {\n                result.add(word);\n            }\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpeb8ggoz0.java:29: error: cannot find symbol\n            if (isConsonant(word,\
    \ n)) {\n                ^\n  symbol:   method isConsonant(String,long)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659805043
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<String>();\n        String[]\
    \ words = s.split(\" \");\n        for (String word : words) {\n            if\
    \ (word.length() == n) {\n                result.add(word);\n            }\n \
    \       }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppnlpkc7y.java:36)\n"
  stdout: ''
  timestamp: 1659805042
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<String>();\n        String[]\
    \ words = s.split(\" \");\n        for (String word : words) {\n            if\
    \ (countConsonants(word) == n) {\n                result.add(word);\n        \
    \    }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpns2elfd9.java:29: error: cannot find symbol\n            if (countConsonants(word)\
    \ == n) {\n                ^\n  symbol:   method countConsonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659805042
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> words = new ArrayList<String>();\n        String[]\
    \ words_array = s.split(\" \");\n        for (String word : words_array) {\n \
    \           if (countConsonants(word) == n) {\n                words.add(word);\n\
    \            }\n        }\n        return words;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"),\
    \ (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqhz0f94k.java:29: error: cannot find symbol\n            if (countConsonants(word)\
    \ == n) {\n                ^\n  symbol:   method countConsonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659805042
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> words = new ArrayList<String>();\n        String[]\
    \ words_arr = s.split(\" \");\n        for (String word : words_arr) {\n     \
    \       if (countConsonants(word) == n) {\n                words.add(word);\n\
    \            }\n        }\n        return words;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"),\
    \ (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyzhr21wx.java:29: error: cannot find symbol\n            if (countConsonants(word)\
    \ == n) {\n                ^\n  symbol:   method countConsonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659805042
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> words = new ArrayList<String>();\n        String[]\
    \ words_array = s.split(\" \");\n        for (String word : words_array) {\n \
    \           if (word.length() == n) {\n                words.add(word);\n    \
    \        }\n        }\n        return words;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfovjwb0x.java:36)\n"
  stdout: ''
  timestamp: 1659805043
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<String>();\n        String[]\
    \ words = s.split(\" \");\n        for (String word : words) {\n            if\
    \ (countConsonants(word) == n) {\n                result.add(word);\n        \
    \    }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpns2elfd9.java:29: error: cannot find symbol\n            if (countConsonants(word)\
    \ == n) {\n                ^\n  symbol:   method countConsonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659805042
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> words = new ArrayList<String>();\n        String[]\
    \ words_array = s.split(\" \");\n        for (String word : words_array) {\n \
    \           if (word.length() == n) {\n                words.add(word);\n    \
    \        }\n        }\n        return words;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfovjwb0x.java:36)\n"
  stdout: ''
  timestamp: 1659805043
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<String>();\n        String[]\
    \ words = s.split(\" \");\n        for (String word : words) {\n            int\
    \ count = 0;\n            for (int i = 0; i < word.length(); i++) {\n        \
    \        if (isConsonant(word.charAt(i))) {\n                    count++;\n  \
    \              }\n            }\n            if (count == n) {\n             \
    \   result.add(word);\n            }\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpu5s_11w8.java:31: error: cannot find symbol\n                if\
    \ (isConsonant(word.charAt(i))) {\n                    ^\n  symbol:   method isConsonant(char)\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659805043
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> words = new ArrayList<String>();\n        String[]\
    \ words_arr = s.split(\" \");\n        for (String word : words_arr) {\n     \
    \       if (countConsonants(word) == n) {\n                words.add(word);\n\
    \            }\n        }\n        return words;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"),\
    \ (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyzhr21wx.java:29: error: cannot find symbol\n            if (countConsonants(word)\
    \ == n) {\n                ^\n  symbol:   method countConsonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659805042
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> words = new ArrayList<String>();\n        String[]\
    \ words_ = s.split(\" \");\n        for (String word : words_) {\n           \
    \ if (countConsonants(word) == n) {\n                words.add(word);\n      \
    \      }\n        }\n        return words;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmk19paps.java:29: error: cannot find symbol\n            if (countConsonants(word)\
    \ == n) {\n                ^\n  symbol:   method countConsonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659805043
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> words = new ArrayList<String>();\n        String[]\
    \ wordsArray = s.split(\" \");\n        for (String word : wordsArray) {\n   \
    \         if (countConsonants(word) == n) {\n                words.add(word);\n\
    \            }\n        }\n        return words;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"),\
    \ (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdg52jauu.java:29: error: cannot find symbol\n            if (countConsonants(word)\
    \ == n) {\n                ^\n  symbol:   method countConsonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659805042
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> words = new ArrayList<String>();\n        String[]\
    \ words_array = s.split(\" \");\n        for (String word : words_array) {\n \
    \           if (countConsonants(word) == n) {\n                words.add(word);\n\
    \            }\n        }\n        return words;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"),\
    \ (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqhz0f94k.java:29: error: cannot find symbol\n            if (countConsonants(word)\
    \ == n) {\n                ^\n  symbol:   method countConsonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659805042
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> words = new ArrayList<String>();\n        String[]\
    \ split = s.split(\" \");\n        for (String word : split) {\n            if\
    \ (countConsonants(word) == n) {\n                words.add(word);\n         \
    \   }\n        }\n        return words;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmrlun9q3.java:29: error: cannot find symbol\n            if (countConsonants(word)\
    \ == n) {\n                ^\n  symbol:   method countConsonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659805042
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        return null;\n    }\n    public static void main(String[] args) {\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.selectWords(String,\
    \ long)\" is null\n\tat Problem.main(tmpir9keh4d.java:29)\n"
  stdout: ''
  timestamp: 1659805043
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> words = new ArrayList<String>();\n        String[]\
    \ words_array = s.split(\" \");\n        for (String word : words_array) {\n \
    \           if (countConsonants(word) == n) {\n                words.add(word);\n\
    \            }\n        }\n        return words;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"),\
    \ (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqhz0f94k.java:29: error: cannot find symbol\n            if (countConsonants(word)\
    \ == n) {\n                ^\n  symbol:   method countConsonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659805042
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<String>();\n        String[]\
    \ words = s.split(\" \");\n        for (String word : words) {\n            if\
    \ (countConsonants(word) == n) {\n                result.add(word);\n        \
    \    }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpns2elfd9.java:29: error: cannot find symbol\n            if (countConsonants(word)\
    \ == n) {\n                ^\n  symbol:   method countConsonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659805042
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<String>();\n        String[]\
    \ words = s.split(\" \");\n        for (String word : words) {\n            if\
    \ (countConsonants(word) == n) {\n                result.add(word);\n        \
    \    }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpns2elfd9.java:29: error: cannot find symbol\n            if (countConsonants(word)\
    \ == n) {\n                ^\n  symbol:   method countConsonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659805042
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<String>();\n        String[]\
    \ words = s.split(\" \");\n        for (String word : words) {\n            if\
    \ (countConsonants(word) == n) {\n                result.add(word);\n        \
    \    }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpns2elfd9.java:29: error: cannot find symbol\n            if (countConsonants(word)\
    \ == n) {\n                ^\n  symbol:   method countConsonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659805042
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<String>();\n        String[]\
    \ words = s.split(\" \");\n        for (String word : words) {\n            if\
    \ (word.length() == n) {\n                result.add(word);\n            }\n \
    \       }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppnlpkc7y.java:36)\n"
  stdout: ''
  timestamp: 1659805042
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<String>();\n        String[]\
    \ words = s.split(\" \");\n        for (String word : words) {\n            if\
    \ (countConsonants(word) == n) {\n                result.add(word);\n        \
    \    }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpns2elfd9.java:29: error: cannot find symbol\n            if (countConsonants(word)\
    \ == n) {\n                ^\n  symbol:   method countConsonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659805042
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<String>();\n        String[]\
    \ words = s.split(\" \");\n        for (String word : words) {\n            if\
    \ (countConsonants(word) == n) {\n                result.add(word);\n        \
    \    }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpns2elfd9.java:29: error: cannot find symbol\n            if (countConsonants(word)\
    \ == n) {\n                ^\n  symbol:   method countConsonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659805042
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> words = new ArrayList<String>();\n        String[]\
    \ words_array = s.split(\" \");\n        for (String word : words_array) {\n \
    \           if (consonants(word) == n) {\n                words.add(word);\n \
    \           }\n        }\n        return words;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"),\
    \ (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxzv7xvlx.java:29: error: cannot find symbol\n            if (consonants(word)\
    \ == n) {\n                ^\n  symbol:   method consonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659805042
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> words = new ArrayList<String>();\n        String[]\
    \ words_ = s.split(\" \");\n        for (String word : words_) {\n           \
    \ if (countConsonants(word) == n) {\n                words.add(word);\n      \
    \      }\n        }\n        return words;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmk19paps.java:29: error: cannot find symbol\n            if (countConsonants(word)\
    \ == n) {\n                ^\n  symbol:   method countConsonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659805043
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        // Write your code here\n        // To print results to the standard\
    \ output you can use System.out.println()\n        // Example: System.out.println(\"\
    Hello world!\");\n        ArrayList<String> result = new ArrayList<String>();\n\
    \        String[] words = s.split(\" \");\n        for (String word : words) {\n\
    \            if (consonants(word) == n) {\n                result.add(word);\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"),\
    \ (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvs31xze7.java:32: error: cannot find symbol\n            if (consonants(word)\
    \ == n) {\n                ^\n  symbol:   method consonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659805043
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<String>();\n        String[]\
    \ words = s.split(\" \");\n        for (String word : words) {\n            if\
    \ (countConsonants(word) == n) {\n                result.add(word);\n        \
    \    }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpns2elfd9.java:29: error: cannot find symbol\n            if (countConsonants(word)\
    \ == n) {\n                ^\n  symbol:   method countConsonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659805042
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> words = new ArrayList<String>();\n        String[]\
    \ parts = s.split(\" \");\n        for (String word : parts) {\n            if\
    \ (countConsonants(word) == n) {\n                words.add(word);\n         \
    \   }\n        }\n        return words;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgdzl3mrg.java:29: error: cannot find symbol\n            if (countConsonants(word)\
    \ == n) {\n                ^\n  symbol:   method countConsonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659805043
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        // Write your code here\n        // To print results to the standard\
    \ output you can use System.out.println()\n        // Example: System.out.println(\"\
    Hello world!\");\n        ArrayList<String> result = new ArrayList<String>();\n\
    \        String[] words = s.split(\" \");\n        for (String word : words) {\n\
    \            if (countConsonants(word) == n) {\n                result.add(word);\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"),\
    \ (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxsllot6e.java:32: error: cannot find symbol\n            if (countConsonants(word)\
    \ == n) {\n                ^\n  symbol:   method countConsonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659805042
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        return new ArrayList<String>();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpq420lxns.java:29)\n"
  stdout: ''
  timestamp: 1659805042
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<String>();\n        String[]\
    \ words = s.split(\" \");\n        for (String word : words) {\n            if\
    \ (countConsonants(word) == n) {\n                result.add(word);\n        \
    \    }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpns2elfd9.java:29: error: cannot find symbol\n            if (countConsonants(word)\
    \ == n) {\n                ^\n  symbol:   method countConsonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659805042
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> words = new ArrayList<String>();\n        String[]\
    \ split = s.split(\" \");\n        for (String word : split) {\n            if\
    \ (countConsonants(word) == n) {\n                words.add(word);\n         \
    \   }\n        }\n        return words;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmrlun9q3.java:29: error: cannot find symbol\n            if (countConsonants(word)\
    \ == n) {\n                ^\n  symbol:   method countConsonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659805042
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> words = new ArrayList<String>();\n        String[]\
    \ split = s.split(\" \");\n        for (String word : split) {\n            if\
    \ (consonants(word) == n) {\n                words.add(word);\n            }\n\
    \        }\n        return words;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpw_22nx_2.java:29: error: cannot find symbol\n            if (consonants(word)\
    \ == n) {\n                ^\n  symbol:   method consonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659805043
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<String>();\n        String[]\
    \ words = s.split(\" \");\n        for (String word : words) {\n            if\
    \ (countConsonants(word) == n) {\n                result.add(word);\n        \
    \    }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpns2elfd9.java:29: error: cannot find symbol\n            if (countConsonants(word)\
    \ == n) {\n                ^\n  symbol:   method countConsonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659805042
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> words = new ArrayList<String>();\n        String[]\
    \ split = s.split(\" \");\n        for (String word : split) {\n            if\
    \ (countConsonants(word) == n) {\n                words.add(word);\n         \
    \   }\n        }\n        return words;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmrlun9q3.java:29: error: cannot find symbol\n            if (countConsonants(word)\
    \ == n) {\n                ^\n  symbol:   method countConsonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659805042
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<String>();\n        String[]\
    \ words = s.split(\" \");\n        for (String word : words) {\n            if\
    \ (word.length() == n) {\n                result.add(word);\n            }\n \
    \       }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppnlpkc7y.java:36)\n"
  stdout: ''
  timestamp: 1659805042
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<String>();\n        String[]\
    \ words = s.split(\" \");\n        for (String word : words) {\n            if\
    \ (countConsonants(word) == n) {\n                result.add(word);\n        \
    \    }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpns2elfd9.java:29: error: cannot find symbol\n            if (countConsonants(word)\
    \ == n) {\n                ^\n  symbol:   method countConsonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659805042
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> words = new ArrayList<String>();\n        String[]\
    \ words_arr = s.split(\" \");\n        for (String word : words_arr) {\n     \
    \       if (countConsonants(word) == n) {\n                words.add(word);\n\
    \            }\n        }\n        return words;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"),\
    \ (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyzhr21wx.java:29: error: cannot find symbol\n            if (countConsonants(word)\
    \ == n) {\n                ^\n  symbol:   method countConsonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659805042
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<String>();\n        String[]\
    \ words = s.split(\" \");\n        for (String word : words) {\n            if\
    \ (countConsonants(word) == n) {\n                result.add(word);\n        \
    \    }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpns2elfd9.java:29: error: cannot find symbol\n            if (countConsonants(word)\
    \ == n) {\n                ^\n  symbol:   method countConsonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659805042
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> words = new ArrayList<String>();\n        String[]\
    \ wordsArr = s.split(\" \");\n        for (String word : wordsArr) {\n       \
    \     if (word.length() == n) {\n                words.add(word);\n          \
    \  }\n        }\n        return words;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfyhm3_rb.java:36)\n"
  stdout: ''
  timestamp: 1659805043
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> words = new ArrayList<String>();\n        for (String\
    \ word : s.split(\" \")) {\n            if (countConsonants(word) == n) {\n  \
    \              words.add(word);\n            }\n        }\n        return words;\n\
    \    }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpipc9x8q0.java:28: error: cannot find symbol\n            if (countConsonants(word)\
    \ == n) {\n                ^\n  symbol:   method countConsonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659805042
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        return null;\n    }\n    public static void main(String[] args) {\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.selectWords(String,\
    \ long)\" is null\n\tat Problem.main(tmpir9keh4d.java:29)\n"
  stdout: ''
  timestamp: 1659805043
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<String>();\n        String[]\
    \ words = s.split(\" \");\n        for (String word : words) {\n            if\
    \ (countConsonants(word) == n) {\n                result.add(word);\n        \
    \    }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpns2elfd9.java:29: error: cannot find symbol\n            if (countConsonants(word)\
    \ == n) {\n                ^\n  symbol:   method countConsonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659805042
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<String>();\n        String[]\
    \ words = s.split(\" \");\n        for (String word : words) {\n            if\
    \ (countConsonants(word) == n) {\n                result.add(word);\n        \
    \    }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpns2elfd9.java:29: error: cannot find symbol\n            if (countConsonants(word)\
    \ == n) {\n                ^\n  symbol:   method countConsonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659805042
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<String>();\n        String[]\
    \ words = s.split(\" \");\n        for (String word : words) {\n            if\
    \ (countConsonants(word) == n) {\n                result.add(word);\n        \
    \    }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpns2elfd9.java:29: error: cannot find symbol\n            if (countConsonants(word)\
    \ == n) {\n                ^\n  symbol:   method countConsonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659805042
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<String>();\n        String[]\
    \ words = s.split(\" \");\n        for (String word : words) {\n            if\
    \ (countConsonants(word) == n) {\n                result.add(word);\n        \
    \    }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpns2elfd9.java:29: error: cannot find symbol\n            if (countConsonants(word)\
    \ == n) {\n                ^\n  symbol:   method countConsonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659805042
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        return new ArrayList<String>();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpq420lxns.java:29)\n"
  stdout: ''
  timestamp: 1659805042
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> words = new ArrayList<String>();\n        String[]\
    \ split = s.split(\" \");\n        for (String word : split) {\n            if\
    \ (countConsonants(word) == n) {\n                words.add(word);\n         \
    \   }\n        }\n        return words;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmrlun9q3.java:29: error: cannot find symbol\n            if (countConsonants(word)\
    \ == n) {\n                ^\n  symbol:   method countConsonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659805042
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<String>();\n        String[]\
    \ words = s.split(\" \");\n        for (String word : words) {\n            if\
    \ (word.length() == n) {\n                result.add(word);\n            }\n \
    \       }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppnlpkc7y.java:36)\n"
  stdout: ''
  timestamp: 1659805042
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<String>();\n        String[]\
    \ words = s.split(\" \");\n        for (String word : words) {\n            if\
    \ (countConsonants(word) == n) {\n                result.add(word);\n        \
    \    }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpns2elfd9.java:29: error: cannot find symbol\n            if (countConsonants(word)\
    \ == n) {\n                ^\n  symbol:   method countConsonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659805042
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        // Write your code here\n        // To print results to the standard\
    \ output you can use System.out.println()\n        // Example: System.out.println(\"\
    Hello world!\");\n        ArrayList<String> result = new ArrayList<String>();\n\
    \        String[] words = s.split(\" \");\n        for (String word : words) {\n\
    \            if (countConsonants(word) == n) {\n                result.add(word);\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"),\
    \ (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxsllot6e.java:32: error: cannot find symbol\n            if (countConsonants(word)\
    \ == n) {\n                ^\n  symbol:   method countConsonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659805042
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> words = new ArrayList<String>();\n        String[]\
    \ words_split = s.split(\" \");\n        for (String word : words_split) {\n \
    \           if (countConsonants(word) == n) {\n                words.add(word);\n\
    \            }\n        }\n        return words;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"),\
    \ (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpt1hnsdgr.java:29: error: cannot find symbol\n            if (countConsonants(word)\
    \ == n) {\n                ^\n  symbol:   method countConsonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659805043
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> words = new ArrayList<String>();\n        String[]\
    \ wordsArray = s.split(\" \");\n        for (String word : wordsArray) {\n   \
    \         if (countConsonants(word) == n) {\n                words.add(word);\n\
    \            }\n        }\n        return words;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"),\
    \ (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdg52jauu.java:29: error: cannot find symbol\n            if (countConsonants(word)\
    \ == n) {\n                ^\n  symbol:   method countConsonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659805042
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> words = new ArrayList<String>();\n        String[]\
    \ words_array = s.split(\" \");\n        for (String word : words_array) {\n \
    \           if (countConsonants(word) == n) {\n                words.add(word);\n\
    \            }\n        }\n        return words;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"),\
    \ (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqhz0f94k.java:29: error: cannot find symbol\n            if (countConsonants(word)\
    \ == n) {\n                ^\n  symbol:   method countConsonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659805042
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> words = new ArrayList<String>();\n        String[]\
    \ wordsArray = s.split(\" \");\n        for (String word : wordsArray) {\n   \
    \         if (countConsonants(word) == n) {\n                words.add(word);\n\
    \            }\n        }\n        return words;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"),\
    \ (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdg52jauu.java:29: error: cannot find symbol\n            if (countConsonants(word)\
    \ == n) {\n                ^\n  symbol:   method countConsonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659805042
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<String>();\n        String[]\
    \ words = s.split(\" \");\n        for (String word : words) {\n            if\
    \ (countConsonants(word) == n) {\n                result.add(word);\n        \
    \    }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpns2elfd9.java:29: error: cannot find symbol\n            if (countConsonants(word)\
    \ == n) {\n                ^\n  symbol:   method countConsonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659805042
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> words = new ArrayList<String>();\n        String[]\
    \ arr = s.split(\" \");\n        for (String word : arr) {\n            if (consonants(word)\
    \ == n) {\n                words.add(word);\n            }\n        }\n      \
    \  return words;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprvno2hzh.java:29: error: cannot find symbol\n            if (consonants(word)\
    \ == n) {\n                ^\n  symbol:   method consonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659805043
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<String>();\n        String[]\
    \ words = s.split(\" \");\n        for (String word : words) {\n            if\
    \ (countConsonants(word) == n) {\n                result.add(word);\n        \
    \    }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpns2elfd9.java:29: error: cannot find symbol\n            if (countConsonants(word)\
    \ == n) {\n                ^\n  symbol:   method countConsonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659805042
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> words = new ArrayList<String>();\n        String[]\
    \ wordsInString = s.split(\" \");\n        for (String word : wordsInString) {\n\
    \            if (countConsonants(word) == n) {\n                words.add(word);\n\
    \            }\n        }\n        return words;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"),\
    \ (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6304dsqo.java:29: error: cannot find symbol\n            if (countConsonants(word)\
    \ == n) {\n                ^\n  symbol:   method countConsonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659805042
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        // Write your code here\n        // To print results to the standard\
    \ output you can use System.out.println()\n        // Example: System.out.println(\"\
    Hello world!\");\n        ArrayList<String> words = new ArrayList<String>();\n\
    \        String[] words_array = s.split(\" \");\n        for (String word : words_array)\
    \ {\n            if (countConsonants(word) == n) {\n                words.add(word);\n\
    \            }\n        }\n        return words;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"),\
    \ (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp07jmx1gv.java:32: error: cannot find symbol\n            if (countConsonants(word)\
    \ == n) {\n                ^\n  symbol:   method countConsonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659805043
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<String>();\n        String[]\
    \ words = s.split(\" \");\n        for (String word : words) {\n            if\
    \ (countConsonants(word) == n) {\n                result.add(word);\n        \
    \    }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpns2elfd9.java:29: error: cannot find symbol\n            if (countConsonants(word)\
    \ == n) {\n                ^\n  symbol:   method countConsonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659805042
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<String>();\n        String[]\
    \ words = s.split(\" \");\n        for (String word : words) {\n            if\
    \ (countConsonants(word) == n) {\n                result.add(word);\n        \
    \    }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpns2elfd9.java:29: error: cannot find symbol\n            if (countConsonants(word)\
    \ == n) {\n                ^\n  symbol:   method countConsonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659805042
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<String>();\n        String[]\
    \ words = s.split(\" \");\n        for (String word : words) {\n            if\
    \ (countConsonants(word) == n) {\n                result.add(word);\n        \
    \    }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpns2elfd9.java:29: error: cannot find symbol\n            if (countConsonants(word)\
    \ == n) {\n                ^\n  symbol:   method countConsonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659805042
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<String>();\n        String[]\
    \ words = s.split(\" \");\n        for (String word : words) {\n            if\
    \ (countConsonants(word) == n) {\n                result.add(word);\n        \
    \    }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpns2elfd9.java:29: error: cannot find symbol\n            if (countConsonants(word)\
    \ == n) {\n                ^\n  symbol:   method countConsonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659805042
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> words = new ArrayList<String>();\n        String[]\
    \ wordsArray = s.split(\" \");\n        for (String word : wordsArray) {\n   \
    \         if (countConsonants(word) == n) {\n                words.add(word);\n\
    \            }\n        }\n        return words;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"),\
    \ (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdg52jauu.java:29: error: cannot find symbol\n            if (countConsonants(word)\
    \ == n) {\n                ^\n  symbol:   method countConsonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659805042
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> words = new ArrayList<String>();\n        String[]\
    \ split = s.split(\" \");\n        for (String word : split) {\n            if\
    \ (countConsonants(word) == n) {\n                words.add(word);\n         \
    \   }\n        }\n        return words;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmrlun9q3.java:29: error: cannot find symbol\n            if (countConsonants(word)\
    \ == n) {\n                ^\n  symbol:   method countConsonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659805042
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<String>();\n        String[]\
    \ words = s.split(\" \");\n        for (String word : words) {\n            long\
    \ count = 0;\n            for (int i = 0; i < word.length(); i++) {\n        \
    \        char c = word.charAt(i);\n                if (c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u') {\n                    count++;\n        \
    \        }\n            }\n            if (count == n) {\n                result.add(word);\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"),\
    \ (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpp3k22kpb.java:43)\n"
  stdout: ''
  timestamp: 1659805043
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<String>();\n        String[]\
    \ words = s.split(\" \");\n        for (String word : words) {\n            if\
    \ (countConsonants(word) == n) {\n                result.add(word);\n        \
    \    }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpns2elfd9.java:29: error: cannot find symbol\n            if (countConsonants(word)\
    \ == n) {\n                ^\n  symbol:   method countConsonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659805042
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<String>();\n        String[]\
    \ words = s.split(\" \");\n        for (String word : words) {\n            if\
    \ (countConsonants(word) == n) {\n                result.add(word);\n        \
    \    }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpns2elfd9.java:29: error: cannot find symbol\n            if (countConsonants(word)\
    \ == n) {\n                ^\n  symbol:   method countConsonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659805042
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> words = new ArrayList<String>();\n        String[]\
    \ wordsInString = s.split(\" \");\n        for (String word : wordsInString) {\n\
    \            if (countConsonants(word) == n) {\n                words.add(word);\n\
    \            }\n        }\n        return words;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"),\
    \ (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6304dsqo.java:29: error: cannot find symbol\n            if (countConsonants(word)\
    \ == n) {\n                ^\n  symbol:   method countConsonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659805042
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<String>();\n        String[]\
    \ words = s.split(\" \");\n        for (String word : words) {\n            if\
    \ (countConsonants(word) == n) {\n                result.add(word);\n        \
    \    }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpns2elfd9.java:29: error: cannot find symbol\n            if (countConsonants(word)\
    \ == n) {\n                ^\n  symbol:   method countConsonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659805042
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<String>();\n        String[]\
    \ words = s.split(\" \");\n        for (String word : words) {\n            if\
    \ (countConsonants(word) == n) {\n                result.add(word);\n        \
    \    }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpns2elfd9.java:29: error: cannot find symbol\n            if (countConsonants(word)\
    \ == n) {\n                ^\n  symbol:   method countConsonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659805042
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<String>();\n        String[]\
    \ words = s.split(\" \");\n        for (String word : words) {\n            if\
    \ (countConsonants(word) == n) {\n                result.add(word);\n        \
    \    }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpns2elfd9.java:29: error: cannot find symbol\n            if (countConsonants(word)\
    \ == n) {\n                ^\n  symbol:   method countConsonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659805042
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<String>();\n        String[]\
    \ words = s.split(\" \");\n        for (String word : words) {\n            if\
    \ (countConsonants(word) == n) {\n                result.add(word);\n        \
    \    }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpns2elfd9.java:29: error: cannot find symbol\n            if (countConsonants(word)\
    \ == n) {\n                ^\n  symbol:   method countConsonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659805042
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        // Write your code here\n        // To print results to the standard\
    \ output you can use System.out.println()\n        // Example: System.out.println(\"\
    Hello world!\");\n        return null;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.selectWords(String,\
    \ long)\" is null\n\tat Problem.main(tmpjobkc7_x.java:32)\n"
  stdout: ''
  timestamp: 1659805043
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<String>();\n        String[]\
    \ words = s.split(\" \");\n        for (String word : words) {\n            if\
    \ (countConsonants(word) == n) {\n                result.add(word);\n        \
    \    }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpns2elfd9.java:29: error: cannot find symbol\n            if (countConsonants(word)\
    \ == n) {\n                ^\n  symbol:   method countConsonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659805042
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<String>();\n        String[]\
    \ words = s.split(\" \");\n        for (String word : words) {\n            if\
    \ (countConsonants(word) == n) {\n                result.add(word);\n        \
    \    }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpns2elfd9.java:29: error: cannot find symbol\n            if (countConsonants(word)\
    \ == n) {\n                ^\n  symbol:   method countConsonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659805042
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<String>();\n        String[]\
    \ words = s.split(\" \");\n        for (String word : words) {\n            if\
    \ (countConsonants(word) == n) {\n                result.add(word);\n        \
    \    }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpns2elfd9.java:29: error: cannot find symbol\n            if (countConsonants(word)\
    \ == n) {\n                ^\n  symbol:   method countConsonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659805042
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<String>();\n        String[]\
    \ words = s.split(\" \");\n        for (String word : words) {\n            if\
    \ (countConsonants(word) == n) {\n                result.add(word);\n        \
    \    }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpns2elfd9.java:29: error: cannot find symbol\n            if (countConsonants(word)\
    \ == n) {\n                ^\n  symbol:   method countConsonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659805042
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<String>();\n        String[]\
    \ words = s.split(\" \");\n        for (String word : words) {\n            if\
    \ (countConsonants(word) == n) {\n                result.add(word);\n        \
    \    }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpns2elfd9.java:29: error: cannot find symbol\n            if (countConsonants(word)\
    \ == n) {\n                ^\n  symbol:   method countConsonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659805042
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> words = new ArrayList<String>();\n        String[]\
    \ words_arr = s.split(\" \");\n        for (String word : words_arr) {\n     \
    \       if (countConsonants(word) == n) {\n                words.add(word);\n\
    \            }\n        }\n        return words;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"),\
    \ (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyzhr21wx.java:29: error: cannot find symbol\n            if (countConsonants(word)\
    \ == n) {\n                ^\n  symbol:   method countConsonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659805042
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<String>();\n        String[]\
    \ words = s.split(\" \");\n        for (String word : words) {\n            if\
    \ (word.length() == n) {\n                result.add(word);\n            }\n \
    \       }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppnlpkc7y.java:36)\n"
  stdout: ''
  timestamp: 1659805042
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<String>();\n        String[]\
    \ words = s.split(\" \");\n        for (String word : words) {\n            if\
    \ (countConsonants(word) == n) {\n                result.add(word);\n        \
    \    }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpns2elfd9.java:29: error: cannot find symbol\n            if (countConsonants(word)\
    \ == n) {\n                ^\n  symbol:   method countConsonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659805042
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<String>();\n        for\
    \ (String word : s.split(\" \")) {\n            if (countConsonants(word) == n)\
    \ {\n                result.add(word);\n            }\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprchzquus.java:28: error: cannot find symbol\n            if (countConsonants(word)\
    \ == n) {\n                ^\n  symbol:   method countConsonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659805043
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<String>();\n        String[]\
    \ words = s.split(\" \");\n        for (String word : words) {\n            if\
    \ (countConsonants(word) == n) {\n                result.add(word);\n        \
    \    }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpns2elfd9.java:29: error: cannot find symbol\n            if (countConsonants(word)\
    \ == n) {\n                ^\n  symbol:   method countConsonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659805042
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<String>();\n        String[]\
    \ words = s.split(\" \");\n        for (String word : words) {\n            if\
    \ (countConsonants(word) == n) {\n                result.add(word);\n        \
    \    }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpns2elfd9.java:29: error: cannot find symbol\n            if (countConsonants(word)\
    \ == n) {\n                ^\n  symbol:   method countConsonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659805042
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> words = new ArrayList<String>();\n        String[]\
    \ words_array = s.split(\" \");\n        for (String word : words_array) {\n \
    \           if (countConsonants(word) == n) {\n                words.add(word);\n\
    \            }\n        }\n        return words;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"),\
    \ (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqhz0f94k.java:29: error: cannot find symbol\n            if (countConsonants(word)\
    \ == n) {\n                ^\n  symbol:   method countConsonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659805042
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<String>();\n        String[]\
    \ words = s.split(\" \");\n        for (String word : words) {\n            if\
    \ (word.length() == n) {\n                result.add(word);\n            }\n \
    \       }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppnlpkc7y.java:36)\n"
  stdout: ''
  timestamp: 1659805042
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<String>();\n        for\
    \ (String word : s.split(\" \")) {\n            if (countConsonants(word) == n)\
    \ {\n                result.add(word);\n            }\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprchzquus.java:28: error: cannot find symbol\n            if (countConsonants(word)\
    \ == n) {\n                ^\n  symbol:   method countConsonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659805043
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> words = new ArrayList<String>();\n        String[]\
    \ wordsInString = s.split(\" \");\n        for (String word : wordsInString) {\n\
    \            if (countConsonants(word) == n) {\n                words.add(word);\n\
    \            }\n        }\n        return words;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"),\
    \ (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6304dsqo.java:29: error: cannot find symbol\n            if (countConsonants(word)\
    \ == n) {\n                ^\n  symbol:   method countConsonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659805042
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<String>();\n        String[]\
    \ words = s.split(\" \");\n        for (String word : words) {\n            if\
    \ (countConsonants(word) == n) {\n                result.add(word);\n        \
    \    }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpns2elfd9.java:29: error: cannot find symbol\n            if (countConsonants(word)\
    \ == n) {\n                ^\n  symbol:   method countConsonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659805042
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<String>();\n        String[]\
    \ words = s.split(\" \");\n        for (String word : words) {\n            if\
    \ (countConsonants(word) == n) {\n                result.add(word);\n        \
    \    }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpns2elfd9.java:29: error: cannot find symbol\n            if (countConsonants(word)\
    \ == n) {\n                ^\n  symbol:   method countConsonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659805042
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> words = new ArrayList<String>();\n        String[]\
    \ words_split = s.split(\" \");\n        for (String word : words_split) {\n \
    \           if (countConsonants(word) == n) {\n                words.add(word);\n\
    \            }\n        }\n        return words;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"),\
    \ (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpt1hnsdgr.java:29: error: cannot find symbol\n            if (countConsonants(word)\
    \ == n) {\n                ^\n  symbol:   method countConsonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659805043
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<String>();\n        String[]\
    \ words = s.split(\" \");\n        for (String word : words) {\n            if\
    \ (word.length() == n) {\n                result.add(word);\n            }\n \
    \       }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppnlpkc7y.java:36)\n"
  stdout: ''
  timestamp: 1659805042
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<String>();\n        String[]\
    \ words = s.split(\" \");\n        for (String word : words) {\n            if\
    \ (countConsonants(word) == n) {\n                result.add(word);\n        \
    \    }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpns2elfd9.java:29: error: cannot find symbol\n            if (countConsonants(word)\
    \ == n) {\n                ^\n  symbol:   method countConsonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659805042
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        // Implement your solution here\n        return null;\n    }\n  \
    \  public static void main(String[] args) {\n    assert(selectWords((\"Mary had\
    \ a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.selectWords(String,\
    \ long)\" is null\n\tat Problem.main(tmpbmts7wzq.java:30)\n"
  stdout: ''
  timestamp: 1659805043
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<String>();\n        String[]\
    \ words = s.split(\" \");\n        for (String word : words) {\n            if\
    \ (countConsonants(word) == n) {\n                result.add(word);\n        \
    \    }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpns2elfd9.java:29: error: cannot find symbol\n            if (countConsonants(word)\
    \ == n) {\n                ^\n  symbol:   method countConsonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659805042
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> words = new ArrayList<String>();\n        String[]\
    \ words_array = s.split(\" \");\n        for (String word : words_array) {\n \
    \           if (countConsonants(word) == n) {\n                words.add(word);\n\
    \            }\n        }\n        return words;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"),\
    \ (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqhz0f94k.java:29: error: cannot find symbol\n            if (countConsonants(word)\
    \ == n) {\n                ^\n  symbol:   method countConsonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659805042
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> words = new ArrayList<String>();\n        String[]\
    \ words_array = s.split(\" \");\n        for (String word : words_array) {\n \
    \           if (countConsonants(word) == n) {\n                words.add(word);\n\
    \            }\n        }\n        return words;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"),\
    \ (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqhz0f94k.java:29: error: cannot find symbol\n            if (countConsonants(word)\
    \ == n) {\n                ^\n  symbol:   method countConsonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659805042
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        // Implement your solution here\n        return new ArrayList<String>();\n\
    \    }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpv59jl9fb.java:30)\n"
  stdout: ''
  timestamp: 1659805044
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> res = new ArrayList<String>();\n        String[]\
    \ words = s.split(\" \");\n        for (String word : words) {\n            if\
    \ (countConsonants(word) == n) {\n                res.add(word);\n           \
    \ }\n        }\n        return res;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpv2rwzdzb.java:29: error: cannot find symbol\n            if (countConsonants(word)\
    \ == n) {\n                ^\n  symbol:   method countConsonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659805042
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<String>();\n        String[]\
    \ words = s.split(\" \");\n        for (String word : words) {\n            if\
    \ (word.length() == n) {\n                result.add(word);\n            }\n \
    \       }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppnlpkc7y.java:36)\n"
  stdout: ''
  timestamp: 1659805042
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        return new ArrayList<String>();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpq420lxns.java:29)\n"
  stdout: ''
  timestamp: 1659805042
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<String>();\n        String[]\
    \ words = s.split(\" \");\n        for (String word : words) {\n            if\
    \ (countConsonants(word) == n) {\n                result.add(word);\n        \
    \    }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpns2elfd9.java:29: error: cannot find symbol\n            if (countConsonants(word)\
    \ == n) {\n                ^\n  symbol:   method countConsonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659805042
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<String>();\n        String[]\
    \ words = s.split(\" \");\n        for (String word : words) {\n            if\
    \ (countConsonants(word) == n) {\n                result.add(word);\n        \
    \    }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpns2elfd9.java:29: error: cannot find symbol\n            if (countConsonants(word)\
    \ == n) {\n                ^\n  symbol:   method countConsonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659805042
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> words = new ArrayList<String>();\n        String[]\
    \ wordsInString = s.split(\" \");\n        for (String word : wordsInString) {\n\
    \            if (countConsonants(word) == n) {\n                words.add(word);\n\
    \            }\n        }\n        return words;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"),\
    \ (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6304dsqo.java:29: error: cannot find symbol\n            if (countConsonants(word)\
    \ == n) {\n                ^\n  symbol:   method countConsonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659805042
