name: HumanEval_151_double_the_difference
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // Given an array array list of numbers, return the sum of\
  \ squares of the numbers\n    // in the array list that are odd. Ignore numbers\
  \ that are negative or not integers.\n    // >>> doubleTheDifference((new ArrayList<Float>(Arrays.asList((long)1l,\
  \ (long)3l, (long)2l, (long)0l))))\n    // (10l)\n    // >>> doubleTheDifference((new\
  \ ArrayList<Float>(Arrays.asList((long)-1l, (long)-2l, (long)0l))))\n    // (0l)\n\
  \    // >>> doubleTheDifference((new ArrayList<Float>(Arrays.asList((long)9l, (long)-2l))))\n\
  \    // (81l)\n    // >>> doubleTheDifference((new ArrayList<Float>(Arrays.asList((long)0l))))\n\
  \    // (0l)\n    // If the input array list is empty, return 0.\n    public static\
  \ long doubleTheDifference(ArrayList<Float> lst) {\n"
tests: "    }\n    public static void main(String[] args) {\n    assert(doubleTheDifference((new\
  \ ArrayList<Float>(Arrays.asList()))) == (0l));\n    assert(doubleTheDifference((new\
  \ ArrayList<Float>(Arrays.asList((float)5.0f, (float)4.0f)))) == (25l));\n    assert(doubleTheDifference((new\
  \ ArrayList<Float>(Arrays.asList((float)0.1f, (float)0.2f, (float)0.3f)))) == (0l));\n\
  \    assert(doubleTheDifference((new ArrayList<Float>(Arrays.asList((float)-10.0f,\
  \ (float)-20.0f, (float)-30.0f)))) == (0l));\n    assert(doubleTheDifference((new\
  \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)-2.0f, (float)8.0f)))) ==\
  \ (0l));\n    assert(doubleTheDifference((new ArrayList<Float>(Arrays.asList((float)0.2f,\
  \ (float)3.0f, (float)5.0f)))) == (34l));\n    assert(doubleTheDifference((new ArrayList<Float>(Arrays.asList((float)-9.0f,\
  \ (float)-7.0f, (float)-5.0f, (float)-3.0f, (float)-1.0f, (float)1.0f, (float)3.0f,\
  \ (float)5.0f, (float)7.0f, (float)9.0f)))) == (165l));\n    }\n\n}\n"
completions: ['        return 0l;', '        return 0;', '        return 0l;', '        return
    0;', '        return 0;', '        return 0;', '        return 0l;', '        return
    0;', '        return lst.stream().filter(x -> x % 2 == 1).map(x -> x * x).reduce(0l,
    (x, y) -> x + y);', '        return 0;', '        return 0;', '        return
    0l;', '        return 0;', '        return 0;', '        return 0l;', '        return
    0;', '        return 0l;', "        long sum = 0;\n        for (Float i : lst)\
    \ {\n            if (i > 0 && i % 2 == 1) {\n                sum += i * i;\n \
    \           }\n        }\n        return sum;", '        return 0l;', '        return
    0l;', '        return 0l;', '        return 0l;', "        long sum = 0;\n   \
    \     for (Float i : lst) {\n            if (i % 2 == 1) {\n                sum\
    \ += i * i;\n            }\n        }\n        return sum;", '        return 0l;',
  '        return 0;', '        return 0;', "        long sum = 0;\n        for (Float\
    \ f : lst) {\n            if (f % 2 == 1) {\n                sum += f * f;\n \
    \           }\n        }\n        return sum;", '        return 0l;', '        return
    0;', '        return 0;', '        return 0;', '        return 0;', '        return
    (long)0l;', '        return 0l;', '        return 0;', '        return 0;', '        return
    0;', '        return 0;', '        return 0l;', '        return 0;', "       \
    \ long sum = 0;\n        for (Float f : lst) {\n            if (f % 2 == 1) {\n\
    \                sum += f * f;\n            }\n        }\n        return sum;",
  '        return 0l;', "        long sum = 0;\n        for (Float i : lst) {\n  \
    \          if (i % 2 == 1) {\n                sum += i * i;\n            }\n \
    \       }\n        return sum;", '        return 0;', '        return 0;', '        return
    0;', '        return 0l;', '        return 0l;', '        return 0l;', '        return
    0l;', '        return 0;', '        return 0;', '        return 0;', '        return
    0;', '        return lst.stream().filter(x -> x % 2 == 1).map(x -> x * x).reduce(0l,
    (x, y) -> x + y);', '        return 0;', '        return 0;', '        return
    0;', '        return 0;', '        return 0;', '        return 0;', '        return
    0l;', '        return 0;', '        return 0;', '        return 0;', '        return
    0l;', '        return 0;', '        return 0;', '        return 0l;', '        return
    0;', '        return 0;', '        return 0l;', '        return 0;', '        return
    0l;', '        return 0;', '        return 0l;', '        return 0;', '        return
    0;', '        return 0l;', '        return 0l;', '        return 0;', '        return
    0;', '        return 0;', "        long sum = 0;\n        for (Float f : lst)\
    \ {\n            if (f > 0 && f % 2 == 1) {\n                sum += f * f;\n \
    \           }\n        }\n        return sum;", '        return 0l;', '        return
    0;', '        return 0l;', '        return 0;', '        return 0;', '        return
    0;', '        return 0;', '        return 0;', '        return 0;', '        return
    0;', "        long sum = 0;\n        for (Float i : lst) {\n            if (i\
    \ % 2 == 1) {\n                sum += i * i;\n            }\n        }\n     \
    \   return sum;", '        return 0l;', '        return 0;', '        return 0;',
  '        return 0;', "        long sum = 0;\n        for (Float f : lst) {\n   \
    \         if (f > 0 && f % 2 == 1) {\n                sum += f * f;\n        \
    \    }\n        }\n        return sum;", '        return 0;', '        return
    0;', '        return 0;', "        long sum = 0;\n        for (Float i : lst)\
    \ {\n            if (i > 0 && i % 2 == 1) {\n                sum += i * i;\n \
    \           }\n        }\n        return sum;", "        long sum = 0;\n     \
    \   for (Float f : lst) {\n            if (f % 2 != 0 && f > 0) {\n          \
    \      sum += Math.pow(f, 2);\n            }\n        }\n        return sum;",
  '        return 0;', '        return 0;', '        return 0;', '        return 0;',
  "        long sum = 0;\n        for (Float f : lst) {\n            if (f % 2 ==\
    \ 1) {\n                sum += f * f;\n            }\n        }\n        return\
    \ sum;", "        long sum = 0;\n        for (Float i : lst) {\n            if\
    \ (i % 2 == 1) {\n                sum += i * i;\n            }\n        }\n  \
    \      return sum;", '        return 0l;', '        return 0l;', '        return
    0l;', '        return 0l;', '        return 0l;', "        long sum = 0;\n   \
    \     for (Float f : lst) {\n            if (f % 2 == 1) {\n                sum\
    \ += f * f;\n            }\n        }\n        return sum;", '        return 0l;',
  '        return 0;', '        return 0l;', '        return 0;', '        return
    0l;', '        return 0l;', '        return 0l;', '        return 0;', '        return
    0;', '        return 0;', '        return 0;', '        return 0l;', '        return
    0l;', '        return 0;', '        return 0l;', '        return 0;', '        return
    0l;', "        long sum = 0;\n        for (Float f : lst) {\n            if (f\
    \ % 2 == 1) {\n                sum += f * f;\n            }\n        }\n     \
    \   return sum;", '        return 0;', '        return 0;', "        long sum\
    \ = 0;\n        for (Float i : lst) {\n            if (i % 2 == 1) {\n       \
    \         sum += i * i;\n            }\n        }\n        return sum;", '        return
    0l;', '        return 0l;', '        return 0;', '        return 0;', '        return
    0;', "        long sum = 0;\n        for (Float num : lst) {\n            if (num\
    \ % 2 == 1 && num >= 0) {\n                sum += num * num;\n            }\n\
    \        }\n        return sum;", '        return 0;', '        return 0l;', " \
    \       long sum = 0;\n        for (Float num : lst) {\n            if (num %\
    \ 2 == 1) {\n                sum += num * num;\n            }\n        }\n   \
    \     return sum;", '        return 0;', '        return 0l;', '        return
    0;', '        return 0;', '        return 0;', '        return 0;', '        return
    0l;', '        return 0;', "        long sum = 0;\n        for (int i = 0; i <\
    \ lst.size(); i++) {\n            float f = lst.get(i);\n            if (f > 0\
    \ && f == Math.floor(f)) {\n                if (f % 2 == 1) {\n              \
    \      sum += f * f;\n                }\n            }\n        }\n        return\
    \ sum;", '        return 0l;', '        return 0;', '        return 0;', '        return
    (long)0l;', '        return 0l;', '        return 0;', '        return 0l;', '        return
    0l;', '        return 0;', '        return 0;', '        return 0l;', "      \
    \  long sum = 0;\n        for (Float f : lst) {\n            if (f % 2 == 1) {\n\
    \                sum += f * f;\n            }\n        }\n        return sum;",
  '        return 0;', "        long sum = 0;\n        for (int i = 0; i < lst.size();\
    \ i++) {\n            if (lst.get(i) % 2 == 1) {\n                sum += Math.pow(lst.get(i),\
    \ 2);\n            }\n        }\n        return sum;", '        return 0;', '        return
    0;', '        return 0;', '        return 0l;', '        return 0l;', "      \
    \  long sum = 0;\n        for (Float x : lst) {\n            if (x % 2 == 1) {\n\
    \                sum += x * x;\n            }\n        }\n        return sum;",
  '        return 0l;', '        return lst.stream().filter(x -> x % 2 == 1).map(x
    -> x * x).reduce(0l, (x, y) -> x + y);', '        return 0;', '        return
    0;', '        return (long)0l;', '        return 0;', '        return 0;', '        return
    0;', '        return 0;', '        return 0l;', '        return 0;', '        return
    0;', '        return 0;', '        return 0l;', '        return 0l;', "      \
    \  long sum = 0;\n        for (Float n : lst) {\n            if (n % 2 == 1 &&\
    \ n > 0) {\n                sum += Math.pow(n, 2);\n            }\n        }\n\
    \        return sum;", '        return 0l;', '        return 0l;', '        return
    0;', '        return 0;', '        return 0;', '        return 0;', '        return
    0;', '        return (long)0l;']
stop_tokens:
- "\n    }\n"
