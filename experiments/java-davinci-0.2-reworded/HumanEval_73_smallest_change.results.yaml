language: java
name: HumanEval_73_smallest_change
results:
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list arr of integers, find the minimum\
    \ number of elements that\n    // need to be changed to make the array array list\
    \ palindromic. A palindromic array array list is an array array list that\n  \
    \  // is read the same backwards and forwards. In one change, you can change one\
    \ element to any other element.\n    // For example:\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l))))\n    // (4l)\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l,\
    \ (long)2l, (long)2l))))\n    // (1l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long\
    \ smallestChange(ArrayList<Long> arr) {\n        return 0;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)5l, (long)4l, (long)7l, (long)9l, (long)6l)))) ==\
    \ (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppzn2jvt3.java:23)\n"
  stdout: ''
  timestamp: 1659804436
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list arr of integers, find the minimum\
    \ number of elements that\n    // need to be changed to make the array array list\
    \ palindromic. A palindromic array array list is an array array list that\n  \
    \  // is read the same backwards and forwards. In one change, you can change one\
    \ element to any other element.\n    // For example:\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l))))\n    // (4l)\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l,\
    \ (long)2l, (long)2l))))\n    // (1l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long\
    \ smallestChange(ArrayList<Long> arr) {\n        // Your code here\n        return\
    \ 0l;\n    }\n    public static void main(String[] args) {\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l)))) == (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpl0to2h30.java:24)\n"
  stdout: ''
  timestamp: 1659804436
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list arr of integers, find the minimum\
    \ number of elements that\n    // need to be changed to make the array array list\
    \ palindromic. A palindromic array array list is an array array list that\n  \
    \  // is read the same backwards and forwards. In one change, you can change one\
    \ element to any other element.\n    // For example:\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l))))\n    // (4l)\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l,\
    \ (long)2l, (long)2l))))\n    // (1l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long\
    \ smallestChange(ArrayList<Long> arr) {\n        // Write your code here\n   \
    \     return 0l;\n    }\n    public static void main(String[] args) {\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l)))) == (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprh71kgy0.java:24)\n"
  stdout: ''
  timestamp: 1659804436
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list arr of integers, find the minimum\
    \ number of elements that\n    // need to be changed to make the array array list\
    \ palindromic. A palindromic array array list is an array array list that\n  \
    \  // is read the same backwards and forwards. In one change, you can change one\
    \ element to any other element.\n    // For example:\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l))))\n    // (4l)\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l,\
    \ (long)2l, (long)2l))))\n    // (1l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long\
    \ smallestChange(ArrayList<Long> arr) {\n        // Your code here\n        return\
    \ 0l;\n    }\n    public static void main(String[] args) {\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l)))) == (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpl0to2h30.java:24)\n"
  stdout: ''
  timestamp: 1659804436
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list arr of integers, find the minimum\
    \ number of elements that\n    // need to be changed to make the array array list\
    \ palindromic. A palindromic array array list is an array array list that\n  \
    \  // is read the same backwards and forwards. In one change, you can change one\
    \ element to any other element.\n    // For example:\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l))))\n    // (4l)\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l,\
    \ (long)2l, (long)2l))))\n    // (1l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long\
    \ smallestChange(ArrayList<Long> arr) {\n        // >>> YOUR CODE HERE <<<\n \
    \       return 0l;\n    }\n    public static void main(String[] args) {\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l)))) == (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgimoqw8h.java:24)\n"
  stdout: ''
  timestamp: 1659804436
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list arr of integers, find the minimum\
    \ number of elements that\n    // need to be changed to make the array array list\
    \ palindromic. A palindromic array array list is an array array list that\n  \
    \  // is read the same backwards and forwards. In one change, you can change one\
    \ element to any other element.\n    // For example:\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l))))\n    // (4l)\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l,\
    \ (long)2l, (long)2l))))\n    // (1l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long\
    \ smallestChange(ArrayList<Long> arr) {\n        long count = 0;\n        int\
    \ i = 0;\n        int j = arr.size() - 1;\n        while (i < j) {\n         \
    \   if (arr.get(i) != arr.get(j)) {\n                count++;\n            }\n\
    \            i++;\n            j--;\n        }\n        return count;\n    }\n\
    \    public static void main(String[] args) {\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l)))) == (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659804436
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list arr of integers, find the minimum\
    \ number of elements that\n    // need to be changed to make the array array list\
    \ palindromic. A palindromic array array list is an array array list that\n  \
    \  // is read the same backwards and forwards. In one change, you can change one\
    \ element to any other element.\n    // For example:\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l))))\n    // (4l)\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l,\
    \ (long)2l, (long)2l))))\n    // (1l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long\
    \ smallestChange(ArrayList<Long> arr) {\n        long count = 0;\n        for\
    \ (int i = 0; i < arr.size() / 2; i++) {\n            if (!arr.get(i).equals(arr.get(arr.size()\
    \ - 1 - i))) {\n                count++;\n            }\n        }\n        return\
    \ count;\n    }\n    public static void main(String[] args) {\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l)))) == (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659804436
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list arr of integers, find the minimum\
    \ number of elements that\n    // need to be changed to make the array array list\
    \ palindromic. A palindromic array array list is an array array list that\n  \
    \  // is read the same backwards and forwards. In one change, you can change one\
    \ element to any other element.\n    // For example:\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l))))\n    // (4l)\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l,\
    \ (long)2l, (long)2l))))\n    // (1l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long\
    \ smallestChange(ArrayList<Long> arr) {\n        // Your code here\n        return\
    \ 0;\n    }\n    public static void main(String[] args) {\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l)))) == (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1s69wje7.java:24)\n"
  stdout: ''
  timestamp: 1659804436
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list arr of integers, find the minimum\
    \ number of elements that\n    // need to be changed to make the array array list\
    \ palindromic. A palindromic array array list is an array array list that\n  \
    \  // is read the same backwards and forwards. In one change, you can change one\
    \ element to any other element.\n    // For example:\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l))))\n    // (4l)\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l,\
    \ (long)2l, (long)2l))))\n    // (1l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long\
    \ smallestChange(ArrayList<Long> arr) {\n        // Your code goes here.\n   \
    \     return 0l;\n    }\n    public static void main(String[] args) {\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l)))) == (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppp_pvme3.java:24)\n"
  stdout: ''
  timestamp: 1659804436
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list arr of integers, find the minimum\
    \ number of elements that\n    // need to be changed to make the array array list\
    \ palindromic. A palindromic array array list is an array array list that\n  \
    \  // is read the same backwards and forwards. In one change, you can change one\
    \ element to any other element.\n    // For example:\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l))))\n    // (4l)\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l,\
    \ (long)2l, (long)2l))))\n    // (1l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long\
    \ smallestChange(ArrayList<Long> arr) {\n        // Your code goes here\n    \
    \    return 0l;\n    }\n    public static void main(String[] args) {\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l)))) == (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptsct83mc.java:24)\n"
  stdout: ''
  timestamp: 1659804436
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list arr of integers, find the minimum\
    \ number of elements that\n    // need to be changed to make the array array list\
    \ palindromic. A palindromic array array list is an array array list that\n  \
    \  // is read the same backwards and forwards. In one change, you can change one\
    \ element to any other element.\n    // For example:\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l))))\n    // (4l)\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l,\
    \ (long)2l, (long)2l))))\n    // (1l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long\
    \ smallestChange(ArrayList<Long> arr) {\n        // Your code goes here\n    \
    \    return 0l;\n    }\n    public static void main(String[] args) {\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l)))) == (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptsct83mc.java:24)\n"
  stdout: ''
  timestamp: 1659804436
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list arr of integers, find the minimum\
    \ number of elements that\n    // need to be changed to make the array array list\
    \ palindromic. A palindromic array array list is an array array list that\n  \
    \  // is read the same backwards and forwards. In one change, you can change one\
    \ element to any other element.\n    // For example:\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l))))\n    // (4l)\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l,\
    \ (long)2l, (long)2l))))\n    // (1l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long\
    \ smallestChange(ArrayList<Long> arr) {\n        // Your code here\n        return\
    \ -1;\n    }\n    public static void main(String[] args) {\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l)))) == (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2eyqdw3v.java:24)\n"
  stdout: ''
  timestamp: 1659804436
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list arr of integers, find the minimum\
    \ number of elements that\n    // need to be changed to make the array array list\
    \ palindromic. A palindromic array array list is an array array list that\n  \
    \  // is read the same backwards and forwards. In one change, you can change one\
    \ element to any other element.\n    // For example:\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l))))\n    // (4l)\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l,\
    \ (long)2l, (long)2l))))\n    // (1l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long\
    \ smallestChange(ArrayList<Long> arr) {\n        // Your code here\n        return\
    \ 0l;\n    }\n    public static void main(String[] args) {\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l)))) == (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpl0to2h30.java:24)\n"
  stdout: ''
  timestamp: 1659804436
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list arr of integers, find the minimum\
    \ number of elements that\n    // need to be changed to make the array array list\
    \ palindromic. A palindromic array array list is an array array list that\n  \
    \  // is read the same backwards and forwards. In one change, you can change one\
    \ element to any other element.\n    // For example:\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l))))\n    // (4l)\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l,\
    \ (long)2l, (long)2l))))\n    // (1l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long\
    \ smallestChange(ArrayList<Long> arr) {\n        // Your code goes here\n    \
    \    return 0l;\n    }\n    public static void main(String[] args) {\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l)))) == (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptsct83mc.java:24)\n"
  stdout: ''
  timestamp: 1659804436
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list arr of integers, find the minimum\
    \ number of elements that\n    // need to be changed to make the array array list\
    \ palindromic. A palindromic array array list is an array array list that\n  \
    \  // is read the same backwards and forwards. In one change, you can change one\
    \ element to any other element.\n    // For example:\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l))))\n    // (4l)\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l,\
    \ (long)2l, (long)2l))))\n    // (1l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long\
    \ smallestChange(ArrayList<Long> arr) {\n        long result = 0;\n        int\
    \ i = 0;\n        int j = arr.size() - 1;\n        while (i < j) {\n         \
    \   if (arr.get(i) != arr.get(j)) {\n                result++;\n            }\n\
    \            i++;\n            j--;\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l)))) == (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659804436
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list arr of integers, find the minimum\
    \ number of elements that\n    // need to be changed to make the array array list\
    \ palindromic. A palindromic array array list is an array array list that\n  \
    \  // is read the same backwards and forwards. In one change, you can change one\
    \ element to any other element.\n    // For example:\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l))))\n    // (4l)\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l,\
    \ (long)2l, (long)2l))))\n    // (1l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long\
    \ smallestChange(ArrayList<Long> arr) {\n        long ans = 0;\n        for (int\
    \ i = 0; i < arr.size() / 2; i++) {\n            if (!arr.get(i).equals(arr.get(arr.size()\
    \ - 1 - i))) {\n                ans++;\n            }\n        }\n        return\
    \ ans;\n    }\n    public static void main(String[] args) {\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l)))) == (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659804436
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list arr of integers, find the minimum\
    \ number of elements that\n    // need to be changed to make the array array list\
    \ palindromic. A palindromic array array list is an array array list that\n  \
    \  // is read the same backwards and forwards. In one change, you can change one\
    \ element to any other element.\n    // For example:\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l))))\n    // (4l)\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l,\
    \ (long)2l, (long)2l))))\n    // (1l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long\
    \ smallestChange(ArrayList<Long> arr) {\n        // Your code here\n        return\
    \ 0;\n    }\n    public static void main(String[] args) {\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l)))) == (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1s69wje7.java:24)\n"
  stdout: ''
  timestamp: 1659804436
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list arr of integers, find the minimum\
    \ number of elements that\n    // need to be changed to make the array array list\
    \ palindromic. A palindromic array array list is an array array list that\n  \
    \  // is read the same backwards and forwards. In one change, you can change one\
    \ element to any other element.\n    // For example:\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l))))\n    // (4l)\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l,\
    \ (long)2l, (long)2l))))\n    // (1l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long\
    \ smallestChange(ArrayList<Long> arr) {\n        // Your code goes here.\n   \
    \     return 0;\n    }\n    public static void main(String[] args) {\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l)))) == (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpm4i1h_8n.java:24)\n"
  stdout: ''
  timestamp: 1659804436
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list arr of integers, find the minimum\
    \ number of elements that\n    // need to be changed to make the array array list\
    \ palindromic. A palindromic array array list is an array array list that\n  \
    \  // is read the same backwards and forwards. In one change, you can change one\
    \ element to any other element.\n    // For example:\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l))))\n    // (4l)\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l,\
    \ (long)2l, (long)2l))))\n    // (1l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long\
    \ smallestChange(ArrayList<Long> arr) {\n        // Your code here\n        return\
    \ 0l;\n    }\n    public static void main(String[] args) {\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l)))) == (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpl0to2h30.java:24)\n"
  stdout: ''
  timestamp: 1659804436
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list arr of integers, find the minimum\
    \ number of elements that\n    // need to be changed to make the array array list\
    \ palindromic. A palindromic array array list is an array array list that\n  \
    \  // is read the same backwards and forwards. In one change, you can change one\
    \ element to any other element.\n    // For example:\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l))))\n    // (4l)\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l,\
    \ (long)2l, (long)2l))))\n    // (1l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long\
    \ smallestChange(ArrayList<Long> arr) {\n        // Your code goes here.\n   \
    \     return 0l;\n    }\n    public static void main(String[] args) {\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l)))) == (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppp_pvme3.java:24)\n"
  stdout: ''
  timestamp: 1659804436
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list arr of integers, find the minimum\
    \ number of elements that\n    // need to be changed to make the array array list\
    \ palindromic. A palindromic array array list is an array array list that\n  \
    \  // is read the same backwards and forwards. In one change, you can change one\
    \ element to any other element.\n    // For example:\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l))))\n    // (4l)\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l,\
    \ (long)2l, (long)2l))))\n    // (1l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long\
    \ smallestChange(ArrayList<Long> arr) {\n        long ret = 0;\n        int n\
    \ = arr.size();\n        int i = 0;\n        int j = n - 1;\n        while (i\
    \ < j) {\n            if (arr.get(i) != arr.get(j)) {\n                ret++;\n\
    \            }\n            i++;\n            j--;\n        }\n        return\
    \ ret;\n    }\n    public static void main(String[] args) {\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l)))) == (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659804436
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list arr of integers, find the minimum\
    \ number of elements that\n    // need to be changed to make the array array list\
    \ palindromic. A palindromic array array list is an array array list that\n  \
    \  // is read the same backwards and forwards. In one change, you can change one\
    \ element to any other element.\n    // For example:\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l))))\n    // (4l)\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l,\
    \ (long)2l, (long)2l))))\n    // (1l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long\
    \ smallestChange(ArrayList<Long> arr) {\n        long result = 0;\n        int\
    \ i = 0;\n        int j = arr.size() - 1;\n        while (i < j) {\n         \
    \   if (arr.get(i) != arr.get(j)) {\n                result++;\n            }\n\
    \            i++;\n            j--;\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l)))) == (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659804436
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list arr of integers, find the minimum\
    \ number of elements that\n    // need to be changed to make the array array list\
    \ palindromic. A palindromic array array list is an array array list that\n  \
    \  // is read the same backwards and forwards. In one change, you can change one\
    \ element to any other element.\n    // For example:\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l))))\n    // (4l)\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l,\
    \ (long)2l, (long)2l))))\n    // (1l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long\
    \ smallestChange(ArrayList<Long> arr) {\n        // Your code goes here.\n   \
    \     return 0l;\n    }\n    public static void main(String[] args) {\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l)))) == (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppp_pvme3.java:24)\n"
  stdout: ''
  timestamp: 1659804436
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list arr of integers, find the minimum\
    \ number of elements that\n    // need to be changed to make the array array list\
    \ palindromic. A palindromic array array list is an array array list that\n  \
    \  // is read the same backwards and forwards. In one change, you can change one\
    \ element to any other element.\n    // For example:\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l))))\n    // (4l)\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l,\
    \ (long)2l, (long)2l))))\n    // (1l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long\
    \ smallestChange(ArrayList<Long> arr) {\n        // Your code here\n        return\
    \ 0l;\n    }\n    public static void main(String[] args) {\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l)))) == (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpl0to2h30.java:24)\n"
  stdout: ''
  timestamp: 1659804436
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list arr of integers, find the minimum\
    \ number of elements that\n    // need to be changed to make the array array list\
    \ palindromic. A palindromic array array list is an array array list that\n  \
    \  // is read the same backwards and forwards. In one change, you can change one\
    \ element to any other element.\n    // For example:\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l))))\n    // (4l)\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l,\
    \ (long)2l, (long)2l))))\n    // (1l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long\
    \ smallestChange(ArrayList<Long> arr) {\n        // Write your code here\n   \
    \     return 0l;\n    }\n    public static void main(String[] args) {\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l)))) == (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprh71kgy0.java:24)\n"
  stdout: ''
  timestamp: 1659804436
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list arr of integers, find the minimum\
    \ number of elements that\n    // need to be changed to make the array array list\
    \ palindromic. A palindromic array array list is an array array list that\n  \
    \  // is read the same backwards and forwards. In one change, you can change one\
    \ element to any other element.\n    // For example:\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l))))\n    // (4l)\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l,\
    \ (long)2l, (long)2l))))\n    // (1l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long\
    \ smallestChange(ArrayList<Long> arr) {\n        return 0;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)5l, (long)4l, (long)7l, (long)9l, (long)6l)))) ==\
    \ (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppzn2jvt3.java:23)\n"
  stdout: ''
  timestamp: 1659804436
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list arr of integers, find the minimum\
    \ number of elements that\n    // need to be changed to make the array array list\
    \ palindromic. A palindromic array array list is an array array list that\n  \
    \  // is read the same backwards and forwards. In one change, you can change one\
    \ element to any other element.\n    // For example:\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l))))\n    // (4l)\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l,\
    \ (long)2l, (long)2l))))\n    // (1l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long\
    \ smallestChange(ArrayList<Long> arr) {\n        long result = 0;\n        int\
    \ i = 0;\n        int j = arr.size() - 1;\n        while (i < j) {\n         \
    \   if (arr.get(i) != arr.get(j)) {\n                result++;\n            }\n\
    \            i++;\n            j--;\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l)))) == (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659804436
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list arr of integers, find the minimum\
    \ number of elements that\n    // need to be changed to make the array array list\
    \ palindromic. A palindromic array array list is an array array list that\n  \
    \  // is read the same backwards and forwards. In one change, you can change one\
    \ element to any other element.\n    // For example:\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l))))\n    // (4l)\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l,\
    \ (long)2l, (long)2l))))\n    // (1l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long\
    \ smallestChange(ArrayList<Long> arr) {\n        // Your code goes here.\n   \
    \     return 0l;\n    }\n    public static void main(String[] args) {\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l)))) == (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppp_pvme3.java:24)\n"
  stdout: ''
  timestamp: 1659804436
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list arr of integers, find the minimum\
    \ number of elements that\n    // need to be changed to make the array array list\
    \ palindromic. A palindromic array array list is an array array list that\n  \
    \  // is read the same backwards and forwards. In one change, you can change one\
    \ element to any other element.\n    // For example:\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l))))\n    // (4l)\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l,\
    \ (long)2l, (long)2l))))\n    // (1l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long\
    \ smallestChange(ArrayList<Long> arr) {\n        // Your code here\n        return\
    \ 0l;\n    }\n    public static void main(String[] args) {\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l)))) == (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpl0to2h30.java:24)\n"
  stdout: ''
  timestamp: 1659804436
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list arr of integers, find the minimum\
    \ number of elements that\n    // need to be changed to make the array array list\
    \ palindromic. A palindromic array array list is an array array list that\n  \
    \  // is read the same backwards and forwards. In one change, you can change one\
    \ element to any other element.\n    // For example:\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l))))\n    // (4l)\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l,\
    \ (long)2l, (long)2l))))\n    // (1l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long\
    \ smallestChange(ArrayList<Long> arr) {\n        // Your code goes here\n    \
    \    return 0l;\n    }\n    public static void main(String[] args) {\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l)))) == (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptsct83mc.java:24)\n"
  stdout: ''
  timestamp: 1659804436
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list arr of integers, find the minimum\
    \ number of elements that\n    // need to be changed to make the array array list\
    \ palindromic. A palindromic array array list is an array array list that\n  \
    \  // is read the same backwards and forwards. In one change, you can change one\
    \ element to any other element.\n    // For example:\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l))))\n    // (4l)\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l,\
    \ (long)2l, (long)2l))))\n    // (1l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long\
    \ smallestChange(ArrayList<Long> arr) {\n        // Your code goes here.\n   \
    \     return 0l;\n    }\n    public static void main(String[] args) {\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l)))) == (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppp_pvme3.java:24)\n"
  stdout: ''
  timestamp: 1659804436
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list arr of integers, find the minimum\
    \ number of elements that\n    // need to be changed to make the array array list\
    \ palindromic. A palindromic array array list is an array array list that\n  \
    \  // is read the same backwards and forwards. In one change, you can change one\
    \ element to any other element.\n    // For example:\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l))))\n    // (4l)\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l,\
    \ (long)2l, (long)2l))))\n    // (1l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long\
    \ smallestChange(ArrayList<Long> arr) {\n        return 0l;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)5l, (long)4l, (long)7l, (long)9l, (long)6l)))) ==\
    \ (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwt_6dueb.java:23)\n"
  stdout: ''
  timestamp: 1659804436
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list arr of integers, find the minimum\
    \ number of elements that\n    // need to be changed to make the array array list\
    \ palindromic. A palindromic array array list is an array array list that\n  \
    \  // is read the same backwards and forwards. In one change, you can change one\
    \ element to any other element.\n    // For example:\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l))))\n    // (4l)\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l,\
    \ (long)2l, (long)2l))))\n    // (1l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long\
    \ smallestChange(ArrayList<Long> arr) {\n        return 0l;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)5l, (long)4l, (long)7l, (long)9l, (long)6l)))) ==\
    \ (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwt_6dueb.java:23)\n"
  stdout: ''
  timestamp: 1659804436
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list arr of integers, find the minimum\
    \ number of elements that\n    // need to be changed to make the array array list\
    \ palindromic. A palindromic array array list is an array array list that\n  \
    \  // is read the same backwards and forwards. In one change, you can change one\
    \ element to any other element.\n    // For example:\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l))))\n    // (4l)\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l,\
    \ (long)2l, (long)2l))))\n    // (1l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long\
    \ smallestChange(ArrayList<Long> arr) {\n        // Your code here\n        return\
    \ 0l;\n    }\n    public static void main(String[] args) {\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l)))) == (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpl0to2h30.java:24)\n"
  stdout: ''
  timestamp: 1659804436
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list arr of integers, find the minimum\
    \ number of elements that\n    // need to be changed to make the array array list\
    \ palindromic. A palindromic array array list is an array array list that\n  \
    \  // is read the same backwards and forwards. In one change, you can change one\
    \ element to any other element.\n    // For example:\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l))))\n    // (4l)\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l,\
    \ (long)2l, (long)2l))))\n    // (1l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long\
    \ smallestChange(ArrayList<Long> arr) {\n        // Your code here\n        return\
    \ 0l;\n    }\n    public static void main(String[] args) {\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l)))) == (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpl0to2h30.java:24)\n"
  stdout: ''
  timestamp: 1659804436
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list arr of integers, find the minimum\
    \ number of elements that\n    // need to be changed to make the array array list\
    \ palindromic. A palindromic array array list is an array array list that\n  \
    \  // is read the same backwards and forwards. In one change, you can change one\
    \ element to any other element.\n    // For example:\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l))))\n    // (4l)\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l,\
    \ (long)2l, (long)2l))))\n    // (1l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long\
    \ smallestChange(ArrayList<Long> arr) {\n        // Your code here\n        return\
    \ 0;\n    }\n    public static void main(String[] args) {\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l)))) == (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1s69wje7.java:24)\n"
  stdout: ''
  timestamp: 1659804436
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list arr of integers, find the minimum\
    \ number of elements that\n    // need to be changed to make the array array list\
    \ palindromic. A palindromic array array list is an array array list that\n  \
    \  // is read the same backwards and forwards. In one change, you can change one\
    \ element to any other element.\n    // For example:\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l))))\n    // (4l)\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l,\
    \ (long)2l, (long)2l))))\n    // (1l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long\
    \ smallestChange(ArrayList<Long> arr) {\n        long ans = 0;\n        for (int\
    \ i = 0; i < arr.size() / 2; i++) {\n            ans += Math.abs(arr.get(i) -\
    \ arr.get(arr.size() - 1 - i));\n        }\n        return ans;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)5l, (long)4l, (long)7l, (long)9l, (long)6l)))) ==\
    \ (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsd7r2aap.java:27)\n"
  stdout: ''
  timestamp: 1659804436
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list arr of integers, find the minimum\
    \ number of elements that\n    // need to be changed to make the array array list\
    \ palindromic. A palindromic array array list is an array array list that\n  \
    \  // is read the same backwards and forwards. In one change, you can change one\
    \ element to any other element.\n    // For example:\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l))))\n    // (4l)\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l,\
    \ (long)2l, (long)2l))))\n    // (1l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long\
    \ smallestChange(ArrayList<Long> arr) {\n        // Your code goes here.\n   \
    \     return 0l;\n    }\n    public static void main(String[] args) {\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l)))) == (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppp_pvme3.java:24)\n"
  stdout: ''
  timestamp: 1659804436
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list arr of integers, find the minimum\
    \ number of elements that\n    // need to be changed to make the array array list\
    \ palindromic. A palindromic array array list is an array array list that\n  \
    \  // is read the same backwards and forwards. In one change, you can change one\
    \ element to any other element.\n    // For example:\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l))))\n    // (4l)\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l,\
    \ (long)2l, (long)2l))))\n    // (1l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long\
    \ smallestChange(ArrayList<Long> arr) {\n        long result = 0;\n        int\
    \ i = 0;\n        int j = arr.size() - 1;\n        while (i < j) {\n         \
    \   if (arr.get(i) != arr.get(j)) {\n                result++;\n            }\n\
    \            i++;\n            j--;\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l)))) == (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659804436
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list arr of integers, find the minimum\
    \ number of elements that\n    // need to be changed to make the array array list\
    \ palindromic. A palindromic array array list is an array array list that\n  \
    \  // is read the same backwards and forwards. In one change, you can change one\
    \ element to any other element.\n    // For example:\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l))))\n    // (4l)\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l,\
    \ (long)2l, (long)2l))))\n    // (1l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long\
    \ smallestChange(ArrayList<Long> arr) {\n        // Write your code here\n   \
    \     // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        return 0;\n\
    \    }\n    public static void main(String[] args) {\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l)))) == (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqwly_hfw.java:26)\n"
  stdout: ''
  timestamp: 1659804436
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list arr of integers, find the minimum\
    \ number of elements that\n    // need to be changed to make the array array list\
    \ palindromic. A palindromic array array list is an array array list that\n  \
    \  // is read the same backwards and forwards. In one change, you can change one\
    \ element to any other element.\n    // For example:\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l))))\n    // (4l)\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l,\
    \ (long)2l, (long)2l))))\n    // (1l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long\
    \ smallestChange(ArrayList<Long> arr) {\n        long count = 0;\n        for\
    \ (int i = 0; i < arr.size() / 2; i++) {\n            if (!arr.get(i).equals(arr.get(arr.size()\
    \ - 1 - i))) {\n                count++;\n            }\n        }\n        return\
    \ count;\n    }\n    public static void main(String[] args) {\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l)))) == (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659804436
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list arr of integers, find the minimum\
    \ number of elements that\n    // need to be changed to make the array array list\
    \ palindromic. A palindromic array array list is an array array list that\n  \
    \  // is read the same backwards and forwards. In one change, you can change one\
    \ element to any other element.\n    // For example:\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l))))\n    // (4l)\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l,\
    \ (long)2l, (long)2l))))\n    // (1l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long\
    \ smallestChange(ArrayList<Long> arr) {\n        return 0l;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)5l, (long)4l, (long)7l, (long)9l, (long)6l)))) ==\
    \ (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwt_6dueb.java:23)\n"
  stdout: ''
  timestamp: 1659804436
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list arr of integers, find the minimum\
    \ number of elements that\n    // need to be changed to make the array array list\
    \ palindromic. A palindromic array array list is an array array list that\n  \
    \  // is read the same backwards and forwards. In one change, you can change one\
    \ element to any other element.\n    // For example:\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l))))\n    // (4l)\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l,\
    \ (long)2l, (long)2l))))\n    // (1l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long\
    \ smallestChange(ArrayList<Long> arr) {\n        // Your code goes here\n    \
    \    return 0l;\n    }\n    public static void main(String[] args) {\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l)))) == (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptsct83mc.java:24)\n"
  stdout: ''
  timestamp: 1659804436
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list arr of integers, find the minimum\
    \ number of elements that\n    // need to be changed to make the array array list\
    \ palindromic. A palindromic array array list is an array array list that\n  \
    \  // is read the same backwards and forwards. In one change, you can change one\
    \ element to any other element.\n    // For example:\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l))))\n    // (4l)\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l,\
    \ (long)2l, (long)2l))))\n    // (1l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long\
    \ smallestChange(ArrayList<Long> arr) {\n        // Your code goes here\n    \
    \    return 0l;\n    }\n    public static void main(String[] args) {\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l)))) == (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptsct83mc.java:24)\n"
  stdout: ''
  timestamp: 1659804436
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list arr of integers, find the minimum\
    \ number of elements that\n    // need to be changed to make the array array list\
    \ palindromic. A palindromic array array list is an array array list that\n  \
    \  // is read the same backwards and forwards. In one change, you can change one\
    \ element to any other element.\n    // For example:\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l))))\n    // (4l)\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l,\
    \ (long)2l, (long)2l))))\n    // (1l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long\
    \ smallestChange(ArrayList<Long> arr) {\n        // Your code goes here\n    \
    \    return (long)0l;\n    }\n    public static void main(String[] args) {\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)5l, (long)4l, (long)7l, (long)9l, (long)6l)))) == (4l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpi16ut0no.java:24)\n"
  stdout: ''
  timestamp: 1659804436
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list arr of integers, find the minimum\
    \ number of elements that\n    // need to be changed to make the array array list\
    \ palindromic. A palindromic array array list is an array array list that\n  \
    \  // is read the same backwards and forwards. In one change, you can change one\
    \ element to any other element.\n    // For example:\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l))))\n    // (4l)\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l,\
    \ (long)2l, (long)2l))))\n    // (1l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long\
    \ smallestChange(ArrayList<Long> arr) {\n        // Your code here\n        return\
    \ (long)0l;\n    }\n    public static void main(String[] args) {\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l)))) == (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqxt39w80.java:24)\n"
  stdout: ''
  timestamp: 1659804436
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list arr of integers, find the minimum\
    \ number of elements that\n    // need to be changed to make the array array list\
    \ palindromic. A palindromic array array list is an array array list that\n  \
    \  // is read the same backwards and forwards. In one change, you can change one\
    \ element to any other element.\n    // For example:\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l))))\n    // (4l)\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l,\
    \ (long)2l, (long)2l))))\n    // (1l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long\
    \ smallestChange(ArrayList<Long> arr) {\n        long result = 0;\n        int\
    \ i = 0;\n        int j = arr.size() - 1;\n        while (i < j) {\n         \
    \   if (arr.get(i) != arr.get(j)) {\n                result += 1;\n          \
    \  }\n            i += 1;\n            j -= 1;\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l)))) == (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659804436
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list arr of integers, find the minimum\
    \ number of elements that\n    // need to be changed to make the array array list\
    \ palindromic. A palindromic array array list is an array array list that\n  \
    \  // is read the same backwards and forwards. In one change, you can change one\
    \ element to any other element.\n    // For example:\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l))))\n    // (4l)\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l,\
    \ (long)2l, (long)2l))))\n    // (1l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long\
    \ smallestChange(ArrayList<Long> arr) {\n        long ret = 0;\n        int i\
    \ = 0;\n        int j = arr.size() - 1;\n        while (i < j) {\n           \
    \ if (arr.get(i) != arr.get(j)) {\n                ret++;\n            }\n   \
    \         i++;\n            j--;\n        }\n        return ret;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)5l, (long)4l, (long)7l, (long)9l, (long)6l)))) ==\
    \ (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659804436
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list arr of integers, find the minimum\
    \ number of elements that\n    // need to be changed to make the array array list\
    \ palindromic. A palindromic array array list is an array array list that\n  \
    \  // is read the same backwards and forwards. In one change, you can change one\
    \ element to any other element.\n    // For example:\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l))))\n    // (4l)\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l,\
    \ (long)2l, (long)2l))))\n    // (1l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long\
    \ smallestChange(ArrayList<Long> arr) {\n        // Your code here\n        return\
    \ 0l;\n    }\n    public static void main(String[] args) {\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l)))) == (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpl0to2h30.java:24)\n"
  stdout: ''
  timestamp: 1659804436
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list arr of integers, find the minimum\
    \ number of elements that\n    // need to be changed to make the array array list\
    \ palindromic. A palindromic array array list is an array array list that\n  \
    \  // is read the same backwards and forwards. In one change, you can change one\
    \ element to any other element.\n    // For example:\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l))))\n    // (4l)\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l,\
    \ (long)2l, (long)2l))))\n    // (1l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long\
    \ smallestChange(ArrayList<Long> arr) {\n        // Your code goes here.\n   \
    \     return 0l;\n    }\n    public static void main(String[] args) {\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l)))) == (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppp_pvme3.java:24)\n"
  stdout: ''
  timestamp: 1659804436
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list arr of integers, find the minimum\
    \ number of elements that\n    // need to be changed to make the array array list\
    \ palindromic. A palindromic array array list is an array array list that\n  \
    \  // is read the same backwards and forwards. In one change, you can change one\
    \ element to any other element.\n    // For example:\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l))))\n    // (4l)\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l,\
    \ (long)2l, (long)2l))))\n    // (1l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long\
    \ smallestChange(ArrayList<Long> arr) {\n        // Write your code here\n   \
    \     // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        int n = arr.size();\n\
    \        long[][] dp = new long[n][n];\n        for (int i = 0; i < n; i++) {\n\
    \            for (int j = 0; j < n; j++) {\n                dp[i][j] = Long.MAX_VALUE;\n\
    \            }\n        }\n        for (int i = 0; i < n; i++) {\n           \
    \ dp[i][i] = 0;\n        }\n        for (int i = 0; i < n - 1; i++) {\n      \
    \      dp[i][i + 1] = arr.get(i) == arr.get(i + 1) ? 0 : 1;\n        }\n     \
    \   for (int i = 2; i < n; i++) {\n            for (int j = 0; j < n - i; j++)\
    \ {\n                if (arr.get(j) == arr.get(j + i)) {\n                   \
    \ dp[j][j + i] = dp[j + 1][j + i - 1];\n                } else {\n           \
    \         dp[j][j + i] = 1 + Math.min(dp[j + 1][j + i], dp[j][j + i - 1]);\n \
    \               }\n            }\n        }\n        return dp[0][n - 1];\n  \
    \  }\n    public static void main(String[] args) {\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l)))) == (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7fztkrsl.java:48)\n"
  stdout: ''
  timestamp: 1659804436
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list arr of integers, find the minimum\
    \ number of elements that\n    // need to be changed to make the array array list\
    \ palindromic. A palindromic array array list is an array array list that\n  \
    \  // is read the same backwards and forwards. In one change, you can change one\
    \ element to any other element.\n    // For example:\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l))))\n    // (4l)\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l,\
    \ (long)2l, (long)2l))))\n    // (1l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long\
    \ smallestChange(ArrayList<Long> arr) {\n        // Your code here\n        return\
    \ 0l;\n    }\n    public static void main(String[] args) {\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l)))) == (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpl0to2h30.java:24)\n"
  stdout: ''
  timestamp: 1659804436
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list arr of integers, find the minimum\
    \ number of elements that\n    // need to be changed to make the array array list\
    \ palindromic. A palindromic array array list is an array array list that\n  \
    \  // is read the same backwards and forwards. In one change, you can change one\
    \ element to any other element.\n    // For example:\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l))))\n    // (4l)\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l,\
    \ (long)2l, (long)2l))))\n    // (1l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long\
    \ smallestChange(ArrayList<Long> arr) {\n        long ans = 0;\n        for (int\
    \ i = 0; i < arr.size() / 2; i++) {\n            if (!arr.get(i).equals(arr.get(arr.size()\
    \ - 1 - i))) {\n                ans++;\n            }\n        }\n        return\
    \ ans;\n    }\n    public static void main(String[] args) {\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l)))) == (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659804436
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list arr of integers, find the minimum\
    \ number of elements that\n    // need to be changed to make the array array list\
    \ palindromic. A palindromic array array list is an array array list that\n  \
    \  // is read the same backwards and forwards. In one change, you can change one\
    \ element to any other element.\n    // For example:\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l))))\n    // (4l)\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l,\
    \ (long)2l, (long)2l))))\n    // (1l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long\
    \ smallestChange(ArrayList<Long> arr) {\n        return 0l;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)5l, (long)4l, (long)7l, (long)9l, (long)6l)))) ==\
    \ (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwt_6dueb.java:23)\n"
  stdout: ''
  timestamp: 1659804436
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list arr of integers, find the minimum\
    \ number of elements that\n    // need to be changed to make the array array list\
    \ palindromic. A palindromic array array list is an array array list that\n  \
    \  // is read the same backwards and forwards. In one change, you can change one\
    \ element to any other element.\n    // For example:\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l))))\n    // (4l)\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l,\
    \ (long)2l, (long)2l))))\n    // (1l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long\
    \ smallestChange(ArrayList<Long> arr) {\n        long result = 0;\n        int\
    \ i = 0;\n        int j = arr.size() - 1;\n        while (i < j) {\n         \
    \   if (arr.get(i) != arr.get(j)) {\n                result++;\n            }\n\
    \            i++;\n            j--;\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l)))) == (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659804436
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list arr of integers, find the minimum\
    \ number of elements that\n    // need to be changed to make the array array list\
    \ palindromic. A palindromic array array list is an array array list that\n  \
    \  // is read the same backwards and forwards. In one change, you can change one\
    \ element to any other element.\n    // For example:\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l))))\n    // (4l)\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l,\
    \ (long)2l, (long)2l))))\n    // (1l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long\
    \ smallestChange(ArrayList<Long> arr) {\n        // Your code here\n        return\
    \ 0l;\n    }\n    public static void main(String[] args) {\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l)))) == (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpl0to2h30.java:24)\n"
  stdout: ''
  timestamp: 1659804436
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list arr of integers, find the minimum\
    \ number of elements that\n    // need to be changed to make the array array list\
    \ palindromic. A palindromic array array list is an array array list that\n  \
    \  // is read the same backwards and forwards. In one change, you can change one\
    \ element to any other element.\n    // For example:\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l))))\n    // (4l)\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l,\
    \ (long)2l, (long)2l))))\n    // (1l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long\
    \ smallestChange(ArrayList<Long> arr) {\n        // Write your code here\n   \
    \     // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        return 0l;\n\
    \    }\n    public static void main(String[] args) {\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l)))) == (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpq36isohs.java:26)\n"
  stdout: ''
  timestamp: 1659804436
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list arr of integers, find the minimum\
    \ number of elements that\n    // need to be changed to make the array array list\
    \ palindromic. A palindromic array array list is an array array list that\n  \
    \  // is read the same backwards and forwards. In one change, you can change one\
    \ element to any other element.\n    // For example:\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l))))\n    // (4l)\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l,\
    \ (long)2l, (long)2l))))\n    // (1l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long\
    \ smallestChange(ArrayList<Long> arr) {\n        return 0l;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)5l, (long)4l, (long)7l, (long)9l, (long)6l)))) ==\
    \ (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwt_6dueb.java:23)\n"
  stdout: ''
  timestamp: 1659804436
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list arr of integers, find the minimum\
    \ number of elements that\n    // need to be changed to make the array array list\
    \ palindromic. A palindromic array array list is an array array list that\n  \
    \  // is read the same backwards and forwards. In one change, you can change one\
    \ element to any other element.\n    // For example:\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l))))\n    // (4l)\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l,\
    \ (long)2l, (long)2l))))\n    // (1l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long\
    \ smallestChange(ArrayList<Long> arr) {\n        // >>> YOUR CODE HERE <<<\n \
    \       return 0l;\n    }\n    public static void main(String[] args) {\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l)))) == (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgimoqw8h.java:24)\n"
  stdout: ''
  timestamp: 1659804436
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list arr of integers, find the minimum\
    \ number of elements that\n    // need to be changed to make the array array list\
    \ palindromic. A palindromic array array list is an array array list that\n  \
    \  // is read the same backwards and forwards. In one change, you can change one\
    \ element to any other element.\n    // For example:\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l))))\n    // (4l)\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l,\
    \ (long)2l, (long)2l))))\n    // (1l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long\
    \ smallestChange(ArrayList<Long> arr) {\n        // Your code here\n        return\
    \ 0l;\n    }\n    public static void main(String[] args) {\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l)))) == (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpl0to2h30.java:24)\n"
  stdout: ''
  timestamp: 1659804436
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list arr of integers, find the minimum\
    \ number of elements that\n    // need to be changed to make the array array list\
    \ palindromic. A palindromic array array list is an array array list that\n  \
    \  // is read the same backwards and forwards. In one change, you can change one\
    \ element to any other element.\n    // For example:\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l))))\n    // (4l)\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l,\
    \ (long)2l, (long)2l))))\n    // (1l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long\
    \ smallestChange(ArrayList<Long> arr) {\n        // Your code goes here\n    \
    \    return 0;\n    }\n    public static void main(String[] args) {\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l)))) == (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpimpvguyi.java:24)\n"
  stdout: ''
  timestamp: 1659804438
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list arr of integers, find the minimum\
    \ number of elements that\n    // need to be changed to make the array array list\
    \ palindromic. A palindromic array array list is an array array list that\n  \
    \  // is read the same backwards and forwards. In one change, you can change one\
    \ element to any other element.\n    // For example:\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l))))\n    // (4l)\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l,\
    \ (long)2l, (long)2l))))\n    // (1l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long\
    \ smallestChange(ArrayList<Long> arr) {\n        // Your code here\n        return\
    \ 0l;\n    }\n    public static void main(String[] args) {\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l)))) == (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpl0to2h30.java:24)\n"
  stdout: ''
  timestamp: 1659804436
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list arr of integers, find the minimum\
    \ number of elements that\n    // need to be changed to make the array array list\
    \ palindromic. A palindromic array array list is an array array list that\n  \
    \  // is read the same backwards and forwards. In one change, you can change one\
    \ element to any other element.\n    // For example:\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l))))\n    // (4l)\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l,\
    \ (long)2l, (long)2l))))\n    // (1l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long\
    \ smallestChange(ArrayList<Long> arr) {\n        // Your code here\n        return\
    \ (long)0l;\n    }\n    public static void main(String[] args) {\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l)))) == (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqxt39w80.java:24)\n"
  stdout: ''
  timestamp: 1659804436
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list arr of integers, find the minimum\
    \ number of elements that\n    // need to be changed to make the array array list\
    \ palindromic. A palindromic array array list is an array array list that\n  \
    \  // is read the same backwards and forwards. In one change, you can change one\
    \ element to any other element.\n    // For example:\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l))))\n    // (4l)\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l,\
    \ (long)2l, (long)2l))))\n    // (1l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long\
    \ smallestChange(ArrayList<Long> arr) {\n        return 0l;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)5l, (long)4l, (long)7l, (long)9l, (long)6l)))) ==\
    \ (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwt_6dueb.java:23)\n"
  stdout: ''
  timestamp: 1659804436
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list arr of integers, find the minimum\
    \ number of elements that\n    // need to be changed to make the array array list\
    \ palindromic. A palindromic array array list is an array array list that\n  \
    \  // is read the same backwards and forwards. In one change, you can change one\
    \ element to any other element.\n    // For example:\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l))))\n    // (4l)\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l,\
    \ (long)2l, (long)2l))))\n    // (1l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long\
    \ smallestChange(ArrayList<Long> arr) {\n        // Your code here\n        return\
    \ 0l;\n    }\n    public static void main(String[] args) {\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l)))) == (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpl0to2h30.java:24)\n"
  stdout: ''
  timestamp: 1659804436
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list arr of integers, find the minimum\
    \ number of elements that\n    // need to be changed to make the array array list\
    \ palindromic. A palindromic array array list is an array array list that\n  \
    \  // is read the same backwards and forwards. In one change, you can change one\
    \ element to any other element.\n    // For example:\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l))))\n    // (4l)\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l,\
    \ (long)2l, (long)2l))))\n    // (1l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long\
    \ smallestChange(ArrayList<Long> arr) {\n        // Your code here\n        return\
    \ 0l;\n    }\n    public static void main(String[] args) {\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l)))) == (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpl0to2h30.java:24)\n"
  stdout: ''
  timestamp: 1659804436
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list arr of integers, find the minimum\
    \ number of elements that\n    // need to be changed to make the array array list\
    \ palindromic. A palindromic array array list is an array array list that\n  \
    \  // is read the same backwards and forwards. In one change, you can change one\
    \ element to any other element.\n    // For example:\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l))))\n    // (4l)\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l,\
    \ (long)2l, (long)2l))))\n    // (1l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long\
    \ smallestChange(ArrayList<Long> arr) {\n        return 0l;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)5l, (long)4l, (long)7l, (long)9l, (long)6l)))) ==\
    \ (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwt_6dueb.java:23)\n"
  stdout: ''
  timestamp: 1659804436
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list arr of integers, find the minimum\
    \ number of elements that\n    // need to be changed to make the array array list\
    \ palindromic. A palindromic array array list is an array array list that\n  \
    \  // is read the same backwards and forwards. In one change, you can change one\
    \ element to any other element.\n    // For example:\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l))))\n    // (4l)\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l,\
    \ (long)2l, (long)2l))))\n    // (1l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long\
    \ smallestChange(ArrayList<Long> arr) {\n        // Your code goes here.\n   \
    \     return 0l;\n    }\n    public static void main(String[] args) {\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l)))) == (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppp_pvme3.java:24)\n"
  stdout: ''
  timestamp: 1659804436
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list arr of integers, find the minimum\
    \ number of elements that\n    // need to be changed to make the array array list\
    \ palindromic. A palindromic array array list is an array array list that\n  \
    \  // is read the same backwards and forwards. In one change, you can change one\
    \ element to any other element.\n    // For example:\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l))))\n    // (4l)\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l,\
    \ (long)2l, (long)2l))))\n    // (1l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long\
    \ smallestChange(ArrayList<Long> arr) {\n        // Write your code here\n   \
    \     // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        long result\
    \ = 0;\n        int i = 0;\n        int j = arr.size() - 1;\n        while (i\
    \ < j) {\n            if (arr.get(i) != arr.get(j)) {\n                result++;\n\
    \            }\n            i++;\n            j--;\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l)))) == (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659804438
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list arr of integers, find the minimum\
    \ number of elements that\n    // need to be changed to make the array array list\
    \ palindromic. A palindromic array array list is an array array list that\n  \
    \  // is read the same backwards and forwards. In one change, you can change one\
    \ element to any other element.\n    // For example:\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l))))\n    // (4l)\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l,\
    \ (long)2l, (long)2l))))\n    // (1l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long\
    \ smallestChange(ArrayList<Long> arr) {\n        // Write your code here.\n  \
    \      return 0l;\n    }\n    public static void main(String[] args) {\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l)))) == (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9g_pnlp5.java:24)\n"
  stdout: ''
  timestamp: 1659804438
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list arr of integers, find the minimum\
    \ number of elements that\n    // need to be changed to make the array array list\
    \ palindromic. A palindromic array array list is an array array list that\n  \
    \  // is read the same backwards and forwards. In one change, you can change one\
    \ element to any other element.\n    // For example:\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l))))\n    // (4l)\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l,\
    \ (long)2l, (long)2l))))\n    // (1l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long\
    \ smallestChange(ArrayList<Long> arr) {\n        long ret = 0;\n        for (int\
    \ i = 0; i < arr.size() / 2; i++) {\n            if (!arr.get(i).equals(arr.get(arr.size()\
    \ - 1 - i))) {\n                ret++;\n            }\n        }\n        return\
    \ ret;\n    }\n    public static void main(String[] args) {\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l)))) == (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659804438
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list arr of integers, find the minimum\
    \ number of elements that\n    // need to be changed to make the array array list\
    \ palindromic. A palindromic array array list is an array array list that\n  \
    \  // is read the same backwards and forwards. In one change, you can change one\
    \ element to any other element.\n    // For example:\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l))))\n    // (4l)\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l,\
    \ (long)2l, (long)2l))))\n    // (1l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long\
    \ smallestChange(ArrayList<Long> arr) {\n        // Your code goes here.\n   \
    \     return 0l;\n    }\n    public static void main(String[] args) {\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l)))) == (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppp_pvme3.java:24)\n"
  stdout: ''
  timestamp: 1659804436
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list arr of integers, find the minimum\
    \ number of elements that\n    // need to be changed to make the array array list\
    \ palindromic. A palindromic array array list is an array array list that\n  \
    \  // is read the same backwards and forwards. In one change, you can change one\
    \ element to any other element.\n    // For example:\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l))))\n    // (4l)\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l,\
    \ (long)2l, (long)2l))))\n    // (1l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long\
    \ smallestChange(ArrayList<Long> arr) {\n        return 0l;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)5l, (long)4l, (long)7l, (long)9l, (long)6l)))) ==\
    \ (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwt_6dueb.java:23)\n"
  stdout: ''
  timestamp: 1659804436
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list arr of integers, find the minimum\
    \ number of elements that\n    // need to be changed to make the array array list\
    \ palindromic. A palindromic array array list is an array array list that\n  \
    \  // is read the same backwards and forwards. In one change, you can change one\
    \ element to any other element.\n    // For example:\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l))))\n    // (4l)\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l,\
    \ (long)2l, (long)2l))))\n    // (1l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long\
    \ smallestChange(ArrayList<Long> arr) {\n        // Your code here\n        return\
    \ 0;\n    }\n    public static void main(String[] args) {\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l)))) == (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1s69wje7.java:24)\n"
  stdout: ''
  timestamp: 1659804436
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list arr of integers, find the minimum\
    \ number of elements that\n    // need to be changed to make the array array list\
    \ palindromic. A palindromic array array list is an array array list that\n  \
    \  // is read the same backwards and forwards. In one change, you can change one\
    \ element to any other element.\n    // For example:\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l))))\n    // (4l)\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l,\
    \ (long)2l, (long)2l))))\n    // (1l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long\
    \ smallestChange(ArrayList<Long> arr) {\n        // Your code goes here.\n   \
    \     return 0l;\n    }\n    public static void main(String[] args) {\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l)))) == (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppp_pvme3.java:24)\n"
  stdout: ''
  timestamp: 1659804436
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list arr of integers, find the minimum\
    \ number of elements that\n    // need to be changed to make the array array list\
    \ palindromic. A palindromic array array list is an array array list that\n  \
    \  // is read the same backwards and forwards. In one change, you can change one\
    \ element to any other element.\n    // For example:\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l))))\n    // (4l)\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l,\
    \ (long)2l, (long)2l))))\n    // (1l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long\
    \ smallestChange(ArrayList<Long> arr) {\n        // Your code goes here.\n   \
    \     // You can add helper functions if you want.\n        // You can edit the\
    \ function signature if you want.\n        // You can use any data structure you\
    \ want.\n        // You can return any type you want.\n        // You can write\
    \ to STDOUT for debugging purposes, e.g.\n        // System.out.println(\"This\
    \ is a debug message\");\n        // Please refer to the note at the top of the\
    \ problem for constraints.\n        return 0;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)5l, (long)4l, (long)7l, (long)9l, (long)6l)))) ==\
    \ (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1wlv4ivs.java:31)\n"
  stdout: ''
  timestamp: 1659804438
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list arr of integers, find the minimum\
    \ number of elements that\n    // need to be changed to make the array array list\
    \ palindromic. A palindromic array array list is an array array list that\n  \
    \  // is read the same backwards and forwards. In one change, you can change one\
    \ element to any other element.\n    // For example:\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l))))\n    // (4l)\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l,\
    \ (long)2l, (long)2l))))\n    // (1l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long\
    \ smallestChange(ArrayList<Long> arr) {\n        // Your code goes here.\n   \
    \     // You can add helper functions if you want.\n        // You can return\
    \ any type you want.\n        // You can import any library you want.\n      \
    \  // You can use any IDE you want.\n        // You can use any operating system\
    \ you want.\n        // You can use any compiler you want.\n        // You can\
    \ use any algorithm you want.\n        // You can use any data structure you want.\n\
    \        // You can use any variable names you want.\n        // You can use any\
    \ function names you want.\n        // You can use any class names you want.\n\
    \        // You can use any method names you want.\n        // You can use any\
    \ variable types you want.\n        // You can use any function types you want.\n\
    \        // You can use any class types you want.\n        // You can use any\
    \ method types you want.\n        // You can use any return types you want.\n\
    \        // You can use any parameter types you want.\n        // You can use\
    \ any parameter names you want.\n        // You can use any access modifiers you\
    \ want.\n        // You can use any access levels you want.\n        // You can\
    \ use any access specifiers you want.\n        // You can use any inheritance\
    \ modifiers you want.\n        // You can use any inheritance levels you want.\n\
    \        // You can use any inheritance specifiers you want.\n        // You can\
    \ use any modifiers you want.\n        // You can use any annotations you want.\n\
    \        // You can use any comments you want.\n        // You can use any whitespace\
    \ you want.\n        // You can use any line breaks you want.\n        // You\
    \ can use any indentation you want.\n        // You can use any curly braces you\
    \ want.\n        // You can use any parentheses you want.\n        // You can\
    \ use any brackets you want.\n        // You can use any semicolons you want.\n\
    \        // You can use any colons you want.\n        // You can use any periods\
    \ you want.\n        // You can use any commas you want.\n        // You can use\
    \ any apostrophes you want.\n        // You can use any quotation marks you want.\n\
    \        // You can use any tildes you want.\n        // You can use any exclamation\
    \ points you want.\n        // You can\n    }\n    public static void main(String[]\
    \ args) {\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)5l, (long)4l, (long)7l, (long)9l, (long)6l)))) ==\
    \ (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpc7rlogfq.java:64: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659804438
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list arr of integers, find the minimum\
    \ number of elements that\n    // need to be changed to make the array array list\
    \ palindromic. A palindromic array array list is an array array list that\n  \
    \  // is read the same backwards and forwards. In one change, you can change one\
    \ element to any other element.\n    // For example:\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l))))\n    // (4l)\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l,\
    \ (long)2l, (long)2l))))\n    // (1l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long\
    \ smallestChange(ArrayList<Long> arr) {\n        return 0l;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)5l, (long)4l, (long)7l, (long)9l, (long)6l)))) ==\
    \ (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwt_6dueb.java:23)\n"
  stdout: ''
  timestamp: 1659804436
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list arr of integers, find the minimum\
    \ number of elements that\n    // need to be changed to make the array array list\
    \ palindromic. A palindromic array array list is an array array list that\n  \
    \  // is read the same backwards and forwards. In one change, you can change one\
    \ element to any other element.\n    // For example:\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l))))\n    // (4l)\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l,\
    \ (long)2l, (long)2l))))\n    // (1l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long\
    \ smallestChange(ArrayList<Long> arr) {\n        // Write your code here\n   \
    \     // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        return 0l;\n\
    \    }\n    public static void main(String[] args) {\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l)))) == (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpq36isohs.java:26)\n"
  stdout: ''
  timestamp: 1659804436
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list arr of integers, find the minimum\
    \ number of elements that\n    // need to be changed to make the array array list\
    \ palindromic. A palindromic array array list is an array array list that\n  \
    \  // is read the same backwards and forwards. In one change, you can change one\
    \ element to any other element.\n    // For example:\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l))))\n    // (4l)\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l,\
    \ (long)2l, (long)2l))))\n    // (1l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long\
    \ smallestChange(ArrayList<Long> arr) {\n        // Your code goes here\n    \
    \    return 0l;\n    }\n    public static void main(String[] args) {\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l)))) == (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptsct83mc.java:24)\n"
  stdout: ''
  timestamp: 1659804436
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list arr of integers, find the minimum\
    \ number of elements that\n    // need to be changed to make the array array list\
    \ palindromic. A palindromic array array list is an array array list that\n  \
    \  // is read the same backwards and forwards. In one change, you can change one\
    \ element to any other element.\n    // For example:\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l))))\n    // (4l)\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l,\
    \ (long)2l, (long)2l))))\n    // (1l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long\
    \ smallestChange(ArrayList<Long> arr) {\n        long count = 0;\n        for\
    \ (int i = 0; i < arr.size() / 2; i++) {\n            if (!arr.get(i).equals(arr.get(arr.size()\
    \ - 1 - i))) {\n                count++;\n            }\n        }\n        return\
    \ count;\n    }\n    public static void main(String[] args) {\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l)))) == (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659804436
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list arr of integers, find the minimum\
    \ number of elements that\n    // need to be changed to make the array array list\
    \ palindromic. A palindromic array array list is an array array list that\n  \
    \  // is read the same backwards and forwards. In one change, you can change one\
    \ element to any other element.\n    // For example:\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l))))\n    // (4l)\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l,\
    \ (long)2l, (long)2l))))\n    // (1l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long\
    \ smallestChange(ArrayList<Long> arr) {\n        // Your code here\n        return\
    \ 0l;\n    }\n    public static void main(String[] args) {\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l)))) == (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpl0to2h30.java:24)\n"
  stdout: ''
  timestamp: 1659804436
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list arr of integers, find the minimum\
    \ number of elements that\n    // need to be changed to make the array array list\
    \ palindromic. A palindromic array array list is an array array list that\n  \
    \  // is read the same backwards and forwards. In one change, you can change one\
    \ element to any other element.\n    // For example:\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l))))\n    // (4l)\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l,\
    \ (long)2l, (long)2l))))\n    // (1l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long\
    \ smallestChange(ArrayList<Long> arr) {\n        // Your code here\n        return\
    \ 0l;\n    }\n    public static void main(String[] args) {\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l)))) == (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpl0to2h30.java:24)\n"
  stdout: ''
  timestamp: 1659804436
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list arr of integers, find the minimum\
    \ number of elements that\n    // need to be changed to make the array array list\
    \ palindromic. A palindromic array array list is an array array list that\n  \
    \  // is read the same backwards and forwards. In one change, you can change one\
    \ element to any other element.\n    // For example:\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l))))\n    // (4l)\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l,\
    \ (long)2l, (long)2l))))\n    // (1l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long\
    \ smallestChange(ArrayList<Long> arr) {\n        // Your code here\n        return\
    \ 0l;\n    }\n    public static void main(String[] args) {\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l)))) == (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpl0to2h30.java:24)\n"
  stdout: ''
  timestamp: 1659804436
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list arr of integers, find the minimum\
    \ number of elements that\n    // need to be changed to make the array array list\
    \ palindromic. A palindromic array array list is an array array list that\n  \
    \  // is read the same backwards and forwards. In one change, you can change one\
    \ element to any other element.\n    // For example:\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l))))\n    // (4l)\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l,\
    \ (long)2l, (long)2l))))\n    // (1l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long\
    \ smallestChange(ArrayList<Long> arr) {\n        // Your code goes here.\n   \
    \     return 0l;\n    }\n    public static void main(String[] args) {\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l)))) == (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppp_pvme3.java:24)\n"
  stdout: ''
  timestamp: 1659804436
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list arr of integers, find the minimum\
    \ number of elements that\n    // need to be changed to make the array array list\
    \ palindromic. A palindromic array array list is an array array list that\n  \
    \  // is read the same backwards and forwards. In one change, you can change one\
    \ element to any other element.\n    // For example:\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l))))\n    // (4l)\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l,\
    \ (long)2l, (long)2l))))\n    // (1l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long\
    \ smallestChange(ArrayList<Long> arr) {\n        // Your code goes here\n    \
    \    return 0l;\n    }\n    public static void main(String[] args) {\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l)))) == (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptsct83mc.java:24)\n"
  stdout: ''
  timestamp: 1659804436
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list arr of integers, find the minimum\
    \ number of elements that\n    // need to be changed to make the array array list\
    \ palindromic. A palindromic array array list is an array array list that\n  \
    \  // is read the same backwards and forwards. In one change, you can change one\
    \ element to any other element.\n    // For example:\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l))))\n    // (4l)\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l,\
    \ (long)2l, (long)2l))))\n    // (1l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long\
    \ smallestChange(ArrayList<Long> arr) {\n        // Your code here\n        return\
    \ 0l;\n    }\n    public static void main(String[] args) {\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l)))) == (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpl0to2h30.java:24)\n"
  stdout: ''
  timestamp: 1659804436
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list arr of integers, find the minimum\
    \ number of elements that\n    // need to be changed to make the array array list\
    \ palindromic. A palindromic array array list is an array array list that\n  \
    \  // is read the same backwards and forwards. In one change, you can change one\
    \ element to any other element.\n    // For example:\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l))))\n    // (4l)\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l,\
    \ (long)2l, (long)2l))))\n    // (1l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long\
    \ smallestChange(ArrayList<Long> arr) {\n        // >>> YOUR CODE HERE <<<\n \
    \       return 0l;\n    }\n    public static void main(String[] args) {\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l)))) == (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgimoqw8h.java:24)\n"
  stdout: ''
  timestamp: 1659804436
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list arr of integers, find the minimum\
    \ number of elements that\n    // need to be changed to make the array array list\
    \ palindromic. A palindromic array array list is an array array list that\n  \
    \  // is read the same backwards and forwards. In one change, you can change one\
    \ element to any other element.\n    // For example:\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l))))\n    // (4l)\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l,\
    \ (long)2l, (long)2l))))\n    // (1l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long\
    \ smallestChange(ArrayList<Long> arr) {\n        // Your code goes here\n    \
    \    return 0l;\n    }\n    public static void main(String[] args) {\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l)))) == (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptsct83mc.java:24)\n"
  stdout: ''
  timestamp: 1659804436
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list arr of integers, find the minimum\
    \ number of elements that\n    // need to be changed to make the array array list\
    \ palindromic. A palindromic array array list is an array array list that\n  \
    \  // is read the same backwards and forwards. In one change, you can change one\
    \ element to any other element.\n    // For example:\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l))))\n    // (4l)\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l,\
    \ (long)2l, (long)2l))))\n    // (1l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long\
    \ smallestChange(ArrayList<Long> arr) {\n        long ret = 0;\n        for (int\
    \ i = 0; i < arr.size() / 2; i++) {\n            if (!arr.get(i).equals(arr.get(arr.size()\
    \ - 1 - i))) {\n                ret++;\n            }\n        }\n        return\
    \ ret;\n    }\n    public static void main(String[] args) {\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l)))) == (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659804438
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list arr of integers, find the minimum\
    \ number of elements that\n    // need to be changed to make the array array list\
    \ palindromic. A palindromic array array list is an array array list that\n  \
    \  // is read the same backwards and forwards. In one change, you can change one\
    \ element to any other element.\n    // For example:\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l))))\n    // (4l)\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l,\
    \ (long)2l, (long)2l))))\n    // (1l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long\
    \ smallestChange(ArrayList<Long> arr) {\n        return 0;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)5l, (long)4l, (long)7l, (long)9l, (long)6l)))) ==\
    \ (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppzn2jvt3.java:23)\n"
  stdout: ''
  timestamp: 1659804436
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list arr of integers, find the minimum\
    \ number of elements that\n    // need to be changed to make the array array list\
    \ palindromic. A palindromic array array list is an array array list that\n  \
    \  // is read the same backwards and forwards. In one change, you can change one\
    \ element to any other element.\n    // For example:\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l))))\n    // (4l)\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l,\
    \ (long)2l, (long)2l))))\n    // (1l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long\
    \ smallestChange(ArrayList<Long> arr) {\n        // Your code here\n        return\
    \ 0l;\n    }\n    public static void main(String[] args) {\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l)))) == (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpl0to2h30.java:24)\n"
  stdout: ''
  timestamp: 1659804436
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list arr of integers, find the minimum\
    \ number of elements that\n    // need to be changed to make the array array list\
    \ palindromic. A palindromic array array list is an array array list that\n  \
    \  // is read the same backwards and forwards. In one change, you can change one\
    \ element to any other element.\n    // For example:\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l))))\n    // (4l)\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l,\
    \ (long)2l, (long)2l))))\n    // (1l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long\
    \ smallestChange(ArrayList<Long> arr) {\n        long count = 0;\n        for\
    \ (int i = 0; i < arr.size() / 2; i++) {\n            if (!arr.get(i).equals(arr.get(arr.size()\
    \ - 1 - i))) {\n                count++;\n            }\n        }\n        return\
    \ count;\n    }\n    public static void main(String[] args) {\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l)))) == (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659804436
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list arr of integers, find the minimum\
    \ number of elements that\n    // need to be changed to make the array array list\
    \ palindromic. A palindromic array array list is an array array list that\n  \
    \  // is read the same backwards and forwards. In one change, you can change one\
    \ element to any other element.\n    // For example:\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l))))\n    // (4l)\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l,\
    \ (long)2l, (long)2l))))\n    // (1l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long\
    \ smallestChange(ArrayList<Long> arr) {\n        // >>> YOUR CODE HERE <<<\n \
    \       return 0l;\n    }\n    public static void main(String[] args) {\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l)))) == (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgimoqw8h.java:24)\n"
  stdout: ''
  timestamp: 1659804436
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list arr of integers, find the minimum\
    \ number of elements that\n    // need to be changed to make the array array list\
    \ palindromic. A palindromic array array list is an array array list that\n  \
    \  // is read the same backwards and forwards. In one change, you can change one\
    \ element to any other element.\n    // For example:\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l))))\n    // (4l)\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l,\
    \ (long)2l, (long)2l))))\n    // (1l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long\
    \ smallestChange(ArrayList<Long> arr) {\n        // >>> YOUR CODE HERE <<<\n \
    \       return 0l;\n    }\n    public static void main(String[] args) {\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l)))) == (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgimoqw8h.java:24)\n"
  stdout: ''
  timestamp: 1659804436
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list arr of integers, find the minimum\
    \ number of elements that\n    // need to be changed to make the array array list\
    \ palindromic. A palindromic array array list is an array array list that\n  \
    \  // is read the same backwards and forwards. In one change, you can change one\
    \ element to any other element.\n    // For example:\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l))))\n    // (4l)\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l,\
    \ (long)2l, (long)2l))))\n    // (1l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long\
    \ smallestChange(ArrayList<Long> arr) {\n        // Your code here\n        return\
    \ 0l;\n    }\n    public static void main(String[] args) {\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l)))) == (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpl0to2h30.java:24)\n"
  stdout: ''
  timestamp: 1659804436
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list arr of integers, find the minimum\
    \ number of elements that\n    // need to be changed to make the array array list\
    \ palindromic. A palindromic array array list is an array array list that\n  \
    \  // is read the same backwards and forwards. In one change, you can change one\
    \ element to any other element.\n    // For example:\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l))))\n    // (4l)\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l,\
    \ (long)2l, (long)2l))))\n    // (1l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long\
    \ smallestChange(ArrayList<Long> arr) {\n        // >>> YOUR CODE HERE <<<\n \
    \       return 0l;\n    }\n    public static void main(String[] args) {\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l)))) == (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgimoqw8h.java:24)\n"
  stdout: ''
  timestamp: 1659804436
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list arr of integers, find the minimum\
    \ number of elements that\n    // need to be changed to make the array array list\
    \ palindromic. A palindromic array array list is an array array list that\n  \
    \  // is read the same backwards and forwards. In one change, you can change one\
    \ element to any other element.\n    // For example:\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l))))\n    // (4l)\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l,\
    \ (long)2l, (long)2l))))\n    // (1l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long\
    \ smallestChange(ArrayList<Long> arr) {\n        // Your code here\n        return\
    \ 0l;\n    }\n    public static void main(String[] args) {\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l)))) == (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpl0to2h30.java:24)\n"
  stdout: ''
  timestamp: 1659804436
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list arr of integers, find the minimum\
    \ number of elements that\n    // need to be changed to make the array array list\
    \ palindromic. A palindromic array array list is an array array list that\n  \
    \  // is read the same backwards and forwards. In one change, you can change one\
    \ element to any other element.\n    // For example:\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l))))\n    // (4l)\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l,\
    \ (long)2l, (long)2l))))\n    // (1l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long\
    \ smallestChange(ArrayList<Long> arr) {\n        // Write your code here\n   \
    \     // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        long result\
    \ = 0;\n        int i = 0;\n        int j = arr.size() - 1;\n        while (i\
    \ < j) {\n            if (arr.get(i) != arr.get(j)) {\n                result++;\n\
    \            }\n            i++;\n            j--;\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l)))) == (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659804438
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list arr of integers, find the minimum\
    \ number of elements that\n    // need to be changed to make the array array list\
    \ palindromic. A palindromic array array list is an array array list that\n  \
    \  // is read the same backwards and forwards. In one change, you can change one\
    \ element to any other element.\n    // For example:\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l))))\n    // (4l)\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l,\
    \ (long)2l, (long)2l))))\n    // (1l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long\
    \ smallestChange(ArrayList<Long> arr) {\n        // Your code here\n        return\
    \ 0l;\n    }\n    public static void main(String[] args) {\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l)))) == (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpl0to2h30.java:24)\n"
  stdout: ''
  timestamp: 1659804436
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list arr of integers, find the minimum\
    \ number of elements that\n    // need to be changed to make the array array list\
    \ palindromic. A palindromic array array list is an array array list that\n  \
    \  // is read the same backwards and forwards. In one change, you can change one\
    \ element to any other element.\n    // For example:\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l))))\n    // (4l)\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l,\
    \ (long)2l, (long)2l))))\n    // (1l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long\
    \ smallestChange(ArrayList<Long> arr) {\n        return 0l;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)5l, (long)4l, (long)7l, (long)9l, (long)6l)))) ==\
    \ (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwt_6dueb.java:23)\n"
  stdout: ''
  timestamp: 1659804436
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list arr of integers, find the minimum\
    \ number of elements that\n    // need to be changed to make the array array list\
    \ palindromic. A palindromic array array list is an array array list that\n  \
    \  // is read the same backwards and forwards. In one change, you can change one\
    \ element to any other element.\n    // For example:\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l))))\n    // (4l)\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l,\
    \ (long)2l, (long)2l))))\n    // (1l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long\
    \ smallestChange(ArrayList<Long> arr) {\n        // Write your code here\n   \
    \     // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        long result\
    \ = 0;\n        int size = arr.size();\n        int half = size / 2;\n       \
    \ for (int i = 0; i < half; i++) {\n            if (arr.get(i) != arr.get(size\
    \ - 1 - i)) {\n                result++;\n            }\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l)))) == (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659804438
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list arr of integers, find the minimum\
    \ number of elements that\n    // need to be changed to make the array array list\
    \ palindromic. A palindromic array array list is an array array list that\n  \
    \  // is read the same backwards and forwards. In one change, you can change one\
    \ element to any other element.\n    // For example:\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l))))\n    // (4l)\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l,\
    \ (long)2l, (long)2l))))\n    // (1l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long\
    \ smallestChange(ArrayList<Long> arr) {\n        // Write your code here\n   \
    \     // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        return 0l;\n\
    \    }\n    public static void main(String[] args) {\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l)))) == (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpq36isohs.java:26)\n"
  stdout: ''
  timestamp: 1659804436
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list arr of integers, find the minimum\
    \ number of elements that\n    // need to be changed to make the array array list\
    \ palindromic. A palindromic array array list is an array array list that\n  \
    \  // is read the same backwards and forwards. In one change, you can change one\
    \ element to any other element.\n    // For example:\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l))))\n    // (4l)\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l,\
    \ (long)2l, (long)2l))))\n    // (1l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long\
    \ smallestChange(ArrayList<Long> arr) {\n        return 0l;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)5l, (long)4l, (long)7l, (long)9l, (long)6l)))) ==\
    \ (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwt_6dueb.java:23)\n"
  stdout: ''
  timestamp: 1659804436
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list arr of integers, find the minimum\
    \ number of elements that\n    // need to be changed to make the array array list\
    \ palindromic. A palindromic array array list is an array array list that\n  \
    \  // is read the same backwards and forwards. In one change, you can change one\
    \ element to any other element.\n    // For example:\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l))))\n    // (4l)\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l,\
    \ (long)2l, (long)2l))))\n    // (1l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long\
    \ smallestChange(ArrayList<Long> arr) {\n        // Your code goes here.\n   \
    \     return (long)0l;\n    }\n    public static void main(String[] args) {\n\
    \    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)5l, (long)4l, (long)7l, (long)9l, (long)6l)))) == (4l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzxlsxhrg.java:24)\n"
  stdout: ''
  timestamp: 1659804438
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list arr of integers, find the minimum\
    \ number of elements that\n    // need to be changed to make the array array list\
    \ palindromic. A palindromic array array list is an array array list that\n  \
    \  // is read the same backwards and forwards. In one change, you can change one\
    \ element to any other element.\n    // For example:\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l))))\n    // (4l)\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l,\
    \ (long)2l, (long)2l))))\n    // (1l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long\
    \ smallestChange(ArrayList<Long> arr) {\n        // Your code goes here.\n   \
    \     return 0l;\n    }\n    public static void main(String[] args) {\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l)))) == (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppp_pvme3.java:24)\n"
  stdout: ''
  timestamp: 1659804436
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list arr of integers, find the minimum\
    \ number of elements that\n    // need to be changed to make the array array list\
    \ palindromic. A palindromic array array list is an array array list that\n  \
    \  // is read the same backwards and forwards. In one change, you can change one\
    \ element to any other element.\n    // For example:\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l))))\n    // (4l)\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l,\
    \ (long)2l, (long)2l))))\n    // (1l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long\
    \ smallestChange(ArrayList<Long> arr) {\n        // Your code here\n        return\
    \ 0l;\n    }\n    public static void main(String[] args) {\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l)))) == (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpl0to2h30.java:24)\n"
  stdout: ''
  timestamp: 1659804436
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list arr of integers, find the minimum\
    \ number of elements that\n    // need to be changed to make the array array list\
    \ palindromic. A palindromic array array list is an array array list that\n  \
    \  // is read the same backwards and forwards. In one change, you can change one\
    \ element to any other element.\n    // For example:\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l))))\n    // (4l)\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l,\
    \ (long)2l, (long)2l))))\n    // (1l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long\
    \ smallestChange(ArrayList<Long> arr) {\n        // Your code here\n        return\
    \ 0l;\n    }\n    public static void main(String[] args) {\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l)))) == (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpl0to2h30.java:24)\n"
  stdout: ''
  timestamp: 1659804436
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list arr of integers, find the minimum\
    \ number of elements that\n    // need to be changed to make the array array list\
    \ palindromic. A palindromic array array list is an array array list that\n  \
    \  // is read the same backwards and forwards. In one change, you can change one\
    \ element to any other element.\n    // For example:\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l))))\n    // (4l)\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l,\
    \ (long)2l, (long)2l))))\n    // (1l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long\
    \ smallestChange(ArrayList<Long> arr) {\n        // Write your code here\n   \
    \     return 0l;\n    }\n    public static void main(String[] args) {\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l)))) == (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprh71kgy0.java:24)\n"
  stdout: ''
  timestamp: 1659804436
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list arr of integers, find the minimum\
    \ number of elements that\n    // need to be changed to make the array array list\
    \ palindromic. A palindromic array array list is an array array list that\n  \
    \  // is read the same backwards and forwards. In one change, you can change one\
    \ element to any other element.\n    // For example:\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l))))\n    // (4l)\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l,\
    \ (long)2l, (long)2l))))\n    // (1l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long\
    \ smallestChange(ArrayList<Long> arr) {\n        // Your code here\n        return\
    \ 0l;\n    }\n    public static void main(String[] args) {\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l)))) == (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpl0to2h30.java:24)\n"
  stdout: ''
  timestamp: 1659804436
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list arr of integers, find the minimum\
    \ number of elements that\n    // need to be changed to make the array array list\
    \ palindromic. A palindromic array array list is an array array list that\n  \
    \  // is read the same backwards and forwards. In one change, you can change one\
    \ element to any other element.\n    // For example:\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l))))\n    // (4l)\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l,\
    \ (long)2l, (long)2l))))\n    // (1l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long\
    \ smallestChange(ArrayList<Long> arr) {\n        long result = 0;\n        //\
    \ Your code goes here.\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)5l, (long)4l, (long)7l, (long)9l, (long)6l)))) ==\
    \ (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcn4wq8ey.java:25)\n"
  stdout: ''
  timestamp: 1659804438
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list arr of integers, find the minimum\
    \ number of elements that\n    // need to be changed to make the array array list\
    \ palindromic. A palindromic array array list is an array array list that\n  \
    \  // is read the same backwards and forwards. In one change, you can change one\
    \ element to any other element.\n    // For example:\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l))))\n    // (4l)\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l,\
    \ (long)2l, (long)2l))))\n    // (1l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long\
    \ smallestChange(ArrayList<Long> arr) {\n        // Your code here.\n        return\
    \ 0l;\n    }\n    public static void main(String[] args) {\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l)))) == (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpul0pl_c_.java:24)\n"
  stdout: ''
  timestamp: 1659804438
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list arr of integers, find the minimum\
    \ number of elements that\n    // need to be changed to make the array array list\
    \ palindromic. A palindromic array array list is an array array list that\n  \
    \  // is read the same backwards and forwards. In one change, you can change one\
    \ element to any other element.\n    // For example:\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l))))\n    // (4l)\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l,\
    \ (long)2l, (long)2l))))\n    // (1l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long\
    \ smallestChange(ArrayList<Long> arr) {\n        // Your code here\n        return\
    \ 0;\n    }\n    public static void main(String[] args) {\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l)))) == (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1s69wje7.java:24)\n"
  stdout: ''
  timestamp: 1659804436
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list arr of integers, find the minimum\
    \ number of elements that\n    // need to be changed to make the array array list\
    \ palindromic. A palindromic array array list is an array array list that\n  \
    \  // is read the same backwards and forwards. In one change, you can change one\
    \ element to any other element.\n    // For example:\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l))))\n    // (4l)\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l,\
    \ (long)2l, (long)2l))))\n    // (1l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long\
    \ smallestChange(ArrayList<Long> arr) {\n        // Your code here\n        return\
    \ 0l;\n    }\n    public static void main(String[] args) {\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l)))) == (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpl0to2h30.java:24)\n"
  stdout: ''
  timestamp: 1659804436
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list arr of integers, find the minimum\
    \ number of elements that\n    // need to be changed to make the array array list\
    \ palindromic. A palindromic array array list is an array array list that\n  \
    \  // is read the same backwards and forwards. In one change, you can change one\
    \ element to any other element.\n    // For example:\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l))))\n    // (4l)\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l,\
    \ (long)2l, (long)2l))))\n    // (1l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long\
    \ smallestChange(ArrayList<Long> arr) {\n        long result = 0;\n        //\
    \ Write your code here\n        // To print results to the standard output you\
    \ can use System.out.println()\n        // Example: System.out.println(\"Hello\
    \ world!\");\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)5l, (long)4l, (long)7l, (long)9l, (long)6l)))) ==\
    \ (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9h60_j0c.java:27)\n"
  stdout: ''
  timestamp: 1659804438
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list arr of integers, find the minimum\
    \ number of elements that\n    // need to be changed to make the array array list\
    \ palindromic. A palindromic array array list is an array array list that\n  \
    \  // is read the same backwards and forwards. In one change, you can change one\
    \ element to any other element.\n    // For example:\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l))))\n    // (4l)\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l,\
    \ (long)2l, (long)2l))))\n    // (1l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long\
    \ smallestChange(ArrayList<Long> arr) {\n        // Your code here\n        return\
    \ 0l;\n    }\n    public static void main(String[] args) {\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l)))) == (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpl0to2h30.java:24)\n"
  stdout: ''
  timestamp: 1659804436
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list arr of integers, find the minimum\
    \ number of elements that\n    // need to be changed to make the array array list\
    \ palindromic. A palindromic array array list is an array array list that\n  \
    \  // is read the same backwards and forwards. In one change, you can change one\
    \ element to any other element.\n    // For example:\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l))))\n    // (4l)\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l,\
    \ (long)2l, (long)2l))))\n    // (1l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long\
    \ smallestChange(ArrayList<Long> arr) {\n        // Write your code here\n   \
    \     // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        int n = arr.size();\n\
    \        int[][] dp = new int[n][n];\n        for (int i = 0; i < n; i++) {\n\
    \            for (int j = 0; j < n; j++) {\n                dp[i][j] = -1;\n \
    \           }\n        }\n        return helper(arr, 0, n - 1, dp);\n    }\n \
    \   public static void main(String[] args) {\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)5l, (long)4l, (long)7l, (long)9l, (long)6l)))) ==\
    \ (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3n7ppph4.java:30: error: cannot find symbol\n        return helper(arr,\
    \ 0, n - 1, dp);\n               ^\n  symbol:   method helper(ArrayList<Long>,int,int,int[][])\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659804438
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list arr of integers, find the minimum\
    \ number of elements that\n    // need to be changed to make the array array list\
    \ palindromic. A palindromic array array list is an array array list that\n  \
    \  // is read the same backwards and forwards. In one change, you can change one\
    \ element to any other element.\n    // For example:\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l))))\n    // (4l)\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l,\
    \ (long)2l, (long)2l))))\n    // (1l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long\
    \ smallestChange(ArrayList<Long> arr) {\n        // Write your code here\n   \
    \     // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        long result\
    \ = 0;\n        int n = arr.size();\n        int i = 0;\n        int j = n - 1;\n\
    \        while (i < j) {\n            if (arr.get(i) != arr.get(j)) {\n      \
    \          result++;\n            }\n            i++;\n            j--;\n    \
    \    }\n        return result;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)5l, (long)4l, (long)7l, (long)9l, (long)6l)))) == (4l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659804438
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list arr of integers, find the minimum\
    \ number of elements that\n    // need to be changed to make the array array list\
    \ palindromic. A palindromic array array list is an array array list that\n  \
    \  // is read the same backwards and forwards. In one change, you can change one\
    \ element to any other element.\n    // For example:\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l))))\n    // (4l)\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l,\
    \ (long)2l, (long)2l))))\n    // (1l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long\
    \ smallestChange(ArrayList<Long> arr) {\n        // Write your code here.\n  \
    \      return 0l;\n    }\n    public static void main(String[] args) {\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l)))) == (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9g_pnlp5.java:24)\n"
  stdout: ''
  timestamp: 1659804438
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list arr of integers, find the minimum\
    \ number of elements that\n    // need to be changed to make the array array list\
    \ palindromic. A palindromic array array list is an array array list that\n  \
    \  // is read the same backwards and forwards. In one change, you can change one\
    \ element to any other element.\n    // For example:\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l))))\n    // (4l)\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l,\
    \ (long)2l, (long)2l))))\n    // (1l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long\
    \ smallestChange(ArrayList<Long> arr) {\n        // Write your code here\n   \
    \     return 0l;\n    }\n    public static void main(String[] args) {\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l)))) == (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprh71kgy0.java:24)\n"
  stdout: ''
  timestamp: 1659804436
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list arr of integers, find the minimum\
    \ number of elements that\n    // need to be changed to make the array array list\
    \ palindromic. A palindromic array array list is an array array list that\n  \
    \  // is read the same backwards and forwards. In one change, you can change one\
    \ element to any other element.\n    // For example:\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l))))\n    // (4l)\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l,\
    \ (long)2l, (long)2l))))\n    // (1l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long\
    \ smallestChange(ArrayList<Long> arr) {\n        // Your code here\n        return\
    \ 0l;\n    }\n    public static void main(String[] args) {\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l)))) == (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpl0to2h30.java:24)\n"
  stdout: ''
  timestamp: 1659804436
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list arr of integers, find the minimum\
    \ number of elements that\n    // need to be changed to make the array array list\
    \ palindromic. A palindromic array array list is an array array list that\n  \
    \  // is read the same backwards and forwards. In one change, you can change one\
    \ element to any other element.\n    // For example:\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l))))\n    // (4l)\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l,\
    \ (long)2l, (long)2l))))\n    // (1l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long\
    \ smallestChange(ArrayList<Long> arr) {\n        // Your code here\n        return\
    \ 0l;\n    }\n    public static void main(String[] args) {\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l)))) == (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpl0to2h30.java:24)\n"
  stdout: ''
  timestamp: 1659804436
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list arr of integers, find the minimum\
    \ number of elements that\n    // need to be changed to make the array array list\
    \ palindromic. A palindromic array array list is an array array list that\n  \
    \  // is read the same backwards and forwards. In one change, you can change one\
    \ element to any other element.\n    // For example:\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l))))\n    // (4l)\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l,\
    \ (long)2l, (long)2l))))\n    // (1l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long\
    \ smallestChange(ArrayList<Long> arr) {\n        return 0l;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)5l, (long)4l, (long)7l, (long)9l, (long)6l)))) ==\
    \ (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwt_6dueb.java:23)\n"
  stdout: ''
  timestamp: 1659804436
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list arr of integers, find the minimum\
    \ number of elements that\n    // need to be changed to make the array array list\
    \ palindromic. A palindromic array array list is an array array list that\n  \
    \  // is read the same backwards and forwards. In one change, you can change one\
    \ element to any other element.\n    // For example:\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l))))\n    // (4l)\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l,\
    \ (long)2l, (long)2l))))\n    // (1l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long\
    \ smallestChange(ArrayList<Long> arr) {\n        // >>> YOUR CODE HERE <<<\n \
    \       return 0l;\n    }\n    public static void main(String[] args) {\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l)))) == (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgimoqw8h.java:24)\n"
  stdout: ''
  timestamp: 1659804436
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list arr of integers, find the minimum\
    \ number of elements that\n    // need to be changed to make the array array list\
    \ palindromic. A palindromic array array list is an array array list that\n  \
    \  // is read the same backwards and forwards. In one change, you can change one\
    \ element to any other element.\n    // For example:\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l))))\n    // (4l)\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l,\
    \ (long)2l, (long)2l))))\n    // (1l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long\
    \ smallestChange(ArrayList<Long> arr) {\n        // Your code goes here\n    \
    \    return 0l;\n    }\n    public static void main(String[] args) {\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l)))) == (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptsct83mc.java:24)\n"
  stdout: ''
  timestamp: 1659804436
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list arr of integers, find the minimum\
    \ number of elements that\n    // need to be changed to make the array array list\
    \ palindromic. A palindromic array array list is an array array list that\n  \
    \  // is read the same backwards and forwards. In one change, you can change one\
    \ element to any other element.\n    // For example:\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l))))\n    // (4l)\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l,\
    \ (long)2l, (long)2l))))\n    // (1l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long\
    \ smallestChange(ArrayList<Long> arr) {\n        // Write your code here\n   \
    \     // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        return 0;\n\
    \    }\n    public static void main(String[] args) {\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l)))) == (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqwly_hfw.java:26)\n"
  stdout: ''
  timestamp: 1659804436
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list arr of integers, find the minimum\
    \ number of elements that\n    // need to be changed to make the array array list\
    \ palindromic. A palindromic array array list is an array array list that\n  \
    \  // is read the same backwards and forwards. In one change, you can change one\
    \ element to any other element.\n    // For example:\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l))))\n    // (4l)\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l,\
    \ (long)2l, (long)2l))))\n    // (1l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long\
    \ smallestChange(ArrayList<Long> arr) {\n        long ans = 0;\n        for (int\
    \ i = 0; i < arr.size() / 2; i++) {\n            if (!arr.get(i).equals(arr.get(arr.size()\
    \ - 1 - i))) {\n                ans++;\n            }\n        }\n        return\
    \ ans;\n    }\n    public static void main(String[] args) {\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l)))) == (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659804436
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list arr of integers, find the minimum\
    \ number of elements that\n    // need to be changed to make the array array list\
    \ palindromic. A palindromic array array list is an array array list that\n  \
    \  // is read the same backwards and forwards. In one change, you can change one\
    \ element to any other element.\n    // For example:\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l))))\n    // (4l)\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l,\
    \ (long)2l, (long)2l))))\n    // (1l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long\
    \ smallestChange(ArrayList<Long> arr) {\n        // Your code goes here\n    \
    \    return 0l;\n    }\n    public static void main(String[] args) {\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l)))) == (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptsct83mc.java:24)\n"
  stdout: ''
  timestamp: 1659804436
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list arr of integers, find the minimum\
    \ number of elements that\n    // need to be changed to make the array array list\
    \ palindromic. A palindromic array array list is an array array list that\n  \
    \  // is read the same backwards and forwards. In one change, you can change one\
    \ element to any other element.\n    // For example:\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l))))\n    // (4l)\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l,\
    \ (long)2l, (long)2l))))\n    // (1l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long\
    \ smallestChange(ArrayList<Long> arr) {\n        // Your code goes here.\n   \
    \     return (long)0l;\n    }\n    public static void main(String[] args) {\n\
    \    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)5l, (long)4l, (long)7l, (long)9l, (long)6l)))) == (4l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzxlsxhrg.java:24)\n"
  stdout: ''
  timestamp: 1659804438
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list arr of integers, find the minimum\
    \ number of elements that\n    // need to be changed to make the array array list\
    \ palindromic. A palindromic array array list is an array array list that\n  \
    \  // is read the same backwards and forwards. In one change, you can change one\
    \ element to any other element.\n    // For example:\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l))))\n    // (4l)\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l,\
    \ (long)2l, (long)2l))))\n    // (1l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long\
    \ smallestChange(ArrayList<Long> arr) {\n        // Your code goes here.\n   \
    \     // You may use the following function to check if a list is a palindrome:\n\
    \        // >>> isPalindrome((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)2l, (long)1l))))\n        // (true)\n        // >>> isPalindrome((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l))))\n        // (false)\n        return 0l;\n \
    \   }\n    public static void main(String[] args) {\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l)))) == (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjk68ldsc.java:29)\n"
  stdout: ''
  timestamp: 1659804438
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list arr of integers, find the minimum\
    \ number of elements that\n    // need to be changed to make the array array list\
    \ palindromic. A palindromic array array list is an array array list that\n  \
    \  // is read the same backwards and forwards. In one change, you can change one\
    \ element to any other element.\n    // For example:\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l))))\n    // (4l)\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l,\
    \ (long)2l, (long)2l))))\n    // (1l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long\
    \ smallestChange(ArrayList<Long> arr) {\n        long count = 0;\n        int\
    \ i = 0;\n        int j = arr.size() - 1;\n        while (i < j) {\n         \
    \   if (arr.get(i) != arr.get(j)) {\n                count++;\n            }\n\
    \            i++;\n            j--;\n        }\n        return count;\n    }\n\
    \    public static void main(String[] args) {\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l)))) == (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659804436
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list arr of integers, find the minimum\
    \ number of elements that\n    // need to be changed to make the array array list\
    \ palindromic. A palindromic array array list is an array array list that\n  \
    \  // is read the same backwards and forwards. In one change, you can change one\
    \ element to any other element.\n    // For example:\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l))))\n    // (4l)\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l,\
    \ (long)2l, (long)2l))))\n    // (1l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long\
    \ smallestChange(ArrayList<Long> arr) {\n        // Your code here\n        return\
    \ 0l;\n    }\n    public static void main(String[] args) {\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l)))) == (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpl0to2h30.java:24)\n"
  stdout: ''
  timestamp: 1659804436
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list arr of integers, find the minimum\
    \ number of elements that\n    // need to be changed to make the array array list\
    \ palindromic. A palindromic array array list is an array array list that\n  \
    \  // is read the same backwards and forwards. In one change, you can change one\
    \ element to any other element.\n    // For example:\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l))))\n    // (4l)\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l,\
    \ (long)2l, (long)2l))))\n    // (1l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long\
    \ smallestChange(ArrayList<Long> arr) {\n        // Your code here\n        return\
    \ 0;\n    }\n    public static void main(String[] args) {\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l)))) == (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1s69wje7.java:24)\n"
  stdout: ''
  timestamp: 1659804436
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list arr of integers, find the minimum\
    \ number of elements that\n    // need to be changed to make the array array list\
    \ palindromic. A palindromic array array list is an array array list that\n  \
    \  // is read the same backwards and forwards. In one change, you can change one\
    \ element to any other element.\n    // For example:\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l))))\n    // (4l)\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l,\
    \ (long)2l, (long)2l))))\n    // (1l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long\
    \ smallestChange(ArrayList<Long> arr) {\n        // Your code here\n        return\
    \ 0l;\n    }\n    public static void main(String[] args) {\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l)))) == (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpl0to2h30.java:24)\n"
  stdout: ''
  timestamp: 1659804436
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list arr of integers, find the minimum\
    \ number of elements that\n    // need to be changed to make the array array list\
    \ palindromic. A palindromic array array list is an array array list that\n  \
    \  // is read the same backwards and forwards. In one change, you can change one\
    \ element to any other element.\n    // For example:\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l))))\n    // (4l)\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l,\
    \ (long)2l, (long)2l))))\n    // (1l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long\
    \ smallestChange(ArrayList<Long> arr) {\n        return 0l;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)5l, (long)4l, (long)7l, (long)9l, (long)6l)))) ==\
    \ (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwt_6dueb.java:23)\n"
  stdout: ''
  timestamp: 1659804436
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list arr of integers, find the minimum\
    \ number of elements that\n    // need to be changed to make the array array list\
    \ palindromic. A palindromic array array list is an array array list that\n  \
    \  // is read the same backwards and forwards. In one change, you can change one\
    \ element to any other element.\n    // For example:\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l))))\n    // (4l)\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l,\
    \ (long)2l, (long)2l))))\n    // (1l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long\
    \ smallestChange(ArrayList<Long> arr) {\n        long ans = 0;\n        for (int\
    \ i = 0; i < arr.size() / 2; i++) {\n            if (!arr.get(i).equals(arr.get(arr.size()\
    \ - 1 - i))) {\n                ans++;\n            }\n        }\n        return\
    \ ans;\n    }\n    public static void main(String[] args) {\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l)))) == (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659804436
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list arr of integers, find the minimum\
    \ number of elements that\n    // need to be changed to make the array array list\
    \ palindromic. A palindromic array array list is an array array list that\n  \
    \  // is read the same backwards and forwards. In one change, you can change one\
    \ element to any other element.\n    // For example:\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l))))\n    // (4l)\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l,\
    \ (long)2l, (long)2l))))\n    // (1l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long\
    \ smallestChange(ArrayList<Long> arr) {\n        // Your code here\n        long\
    \ count = 0;\n        for (int i = 0; i < arr.size() / 2; i++) {\n           \
    \ if (arr.get(i) != arr.get(arr.size() - 1 - i)) {\n                count++;\n\
    \            }\n        }\n        return count;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)5l, (long)4l, (long)7l, (long)9l, (long)6l)))) ==\
    \ (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659804438
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list arr of integers, find the minimum\
    \ number of elements that\n    // need to be changed to make the array array list\
    \ palindromic. A palindromic array array list is an array array list that\n  \
    \  // is read the same backwards and forwards. In one change, you can change one\
    \ element to any other element.\n    // For example:\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l))))\n    // (4l)\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l,\
    \ (long)2l, (long)2l))))\n    // (1l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long\
    \ smallestChange(ArrayList<Long> arr) {\n        return 0;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)5l, (long)4l, (long)7l, (long)9l, (long)6l)))) ==\
    \ (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppzn2jvt3.java:23)\n"
  stdout: ''
  timestamp: 1659804436
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list arr of integers, find the minimum\
    \ number of elements that\n    // need to be changed to make the array array list\
    \ palindromic. A palindromic array array list is an array array list that\n  \
    \  // is read the same backwards and forwards. In one change, you can change one\
    \ element to any other element.\n    // For example:\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l))))\n    // (4l)\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l,\
    \ (long)2l, (long)2l))))\n    // (1l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long\
    \ smallestChange(ArrayList<Long> arr) {\n        // Your code here\n        return\
    \ 0l;\n    }\n    public static void main(String[] args) {\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l)))) == (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpl0to2h30.java:24)\n"
  stdout: ''
  timestamp: 1659804436
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list arr of integers, find the minimum\
    \ number of elements that\n    // need to be changed to make the array array list\
    \ palindromic. A palindromic array array list is an array array list that\n  \
    \  // is read the same backwards and forwards. In one change, you can change one\
    \ element to any other element.\n    // For example:\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l))))\n    // (4l)\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l,\
    \ (long)2l, (long)2l))))\n    // (1l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long\
    \ smallestChange(ArrayList<Long> arr) {\n        long count = 0;\n        for\
    \ (int i = 0; i < arr.size() / 2; i++) {\n            if (!arr.get(i).equals(arr.get(arr.size()\
    \ - 1 - i))) {\n                count++;\n            }\n        }\n        return\
    \ count;\n    }\n    public static void main(String[] args) {\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l)))) == (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659804436
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list arr of integers, find the minimum\
    \ number of elements that\n    // need to be changed to make the array array list\
    \ palindromic. A palindromic array array list is an array array list that\n  \
    \  // is read the same backwards and forwards. In one change, you can change one\
    \ element to any other element.\n    // For example:\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l))))\n    // (4l)\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l,\
    \ (long)2l, (long)2l))))\n    // (1l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long\
    \ smallestChange(ArrayList<Long> arr) {\n        long ans = 0;\n        for (int\
    \ i = 0; i < arr.size() / 2; i++) {\n            if (!arr.get(i).equals(arr.get(arr.size()\
    \ - 1 - i))) {\n                ans++;\n            }\n        }\n        return\
    \ ans;\n    }\n    public static void main(String[] args) {\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l)))) == (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659804436
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list arr of integers, find the minimum\
    \ number of elements that\n    // need to be changed to make the array array list\
    \ palindromic. A palindromic array array list is an array array list that\n  \
    \  // is read the same backwards and forwards. In one change, you can change one\
    \ element to any other element.\n    // For example:\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l))))\n    // (4l)\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l,\
    \ (long)2l, (long)2l))))\n    // (1l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long\
    \ smallestChange(ArrayList<Long> arr) {\n        long count = 0;\n        int\
    \ i = 0;\n        int j = arr.size() - 1;\n        while (i < j) {\n         \
    \   if (arr.get(i) != arr.get(j)) {\n                count++;\n            }\n\
    \            i++;\n            j--;\n        }\n        return count;\n    }\n\
    \    public static void main(String[] args) {\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l)))) == (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659804436
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list arr of integers, find the minimum\
    \ number of elements that\n    // need to be changed to make the array array list\
    \ palindromic. A palindromic array array list is an array array list that\n  \
    \  // is read the same backwards and forwards. In one change, you can change one\
    \ element to any other element.\n    // For example:\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l))))\n    // (4l)\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l,\
    \ (long)2l, (long)2l))))\n    // (1l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long\
    \ smallestChange(ArrayList<Long> arr) {\n        // >>> YOUR CODE HERE <<<\n \
    \       return (long)0l;\n    }\n    public static void main(String[] args) {\n\
    \    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)5l, (long)4l, (long)7l, (long)9l, (long)6l)))) == (4l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbk__9z7i.java:24)\n"
  stdout: ''
  timestamp: 1659804438
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list arr of integers, find the minimum\
    \ number of elements that\n    // need to be changed to make the array array list\
    \ palindromic. A palindromic array array list is an array array list that\n  \
    \  // is read the same backwards and forwards. In one change, you can change one\
    \ element to any other element.\n    // For example:\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l))))\n    // (4l)\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l,\
    \ (long)2l, (long)2l))))\n    // (1l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long\
    \ smallestChange(ArrayList<Long> arr) {\n        // Your code goes here.\n   \
    \     return 0l;\n    }\n    public static void main(String[] args) {\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l)))) == (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppp_pvme3.java:24)\n"
  stdout: ''
  timestamp: 1659804436
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list arr of integers, find the minimum\
    \ number of elements that\n    // need to be changed to make the array array list\
    \ palindromic. A palindromic array array list is an array array list that\n  \
    \  // is read the same backwards and forwards. In one change, you can change one\
    \ element to any other element.\n    // For example:\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l))))\n    // (4l)\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l,\
    \ (long)2l, (long)2l))))\n    // (1l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long\
    \ smallestChange(ArrayList<Long> arr) {\n        // Write your code here\n   \
    \     // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        long result\
    \ = 0;\n        int i = 0;\n        int j = arr.size() - 1;\n        while (i\
    \ < j) {\n            if (arr.get(i) != arr.get(j)) {\n                result++;\n\
    \            }\n            i++;\n            j--;\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l)))) == (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659804438
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list arr of integers, find the minimum\
    \ number of elements that\n    // need to be changed to make the array array list\
    \ palindromic. A palindromic array array list is an array array list that\n  \
    \  // is read the same backwards and forwards. In one change, you can change one\
    \ element to any other element.\n    // For example:\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l))))\n    // (4l)\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l,\
    \ (long)2l, (long)2l))))\n    // (1l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long\
    \ smallestChange(ArrayList<Long> arr) {\n        // Write your code here\n   \
    \     // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        int n = arr.size();\n\
    \        int[][] dp = new int[n][n];\n        for (int i = 0; i < n; i++) {\n\
    \            dp[i][i] = 0;\n        }\n        for (int len = 2; len <= n; len++)\
    \ {\n            for (int i = 0; i < n - len + 1; i++) {\n                int\
    \ j = i + len - 1;\n                if (arr.get(i) == arr.get(j)) {\n        \
    \            dp[i][j] = dp[i + 1][j - 1];\n                } else {\n        \
    \            dp[i][j] = 1 + Math.min(dp[i + 1][j], dp[i][j - 1]);\n          \
    \      }\n            }\n        }\n        return dp[0][n - 1];\n    }\n    public\
    \ static void main(String[] args) {\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)5l, (long)4l, (long)7l, (long)9l, (long)6l)))) ==\
    \ (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxf7ppds3.java:41)\n"
  stdout: ''
  timestamp: 1659804438
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list arr of integers, find the minimum\
    \ number of elements that\n    // need to be changed to make the array array list\
    \ palindromic. A palindromic array array list is an array array list that\n  \
    \  // is read the same backwards and forwards. In one change, you can change one\
    \ element to any other element.\n    // For example:\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l))))\n    // (4l)\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l,\
    \ (long)2l, (long)2l))))\n    // (1l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long\
    \ smallestChange(ArrayList<Long> arr) {\n        // Write your code here.\n  \
    \      return 0;\n    }\n    public static void main(String[] args) {\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l)))) == (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4i7k2mey.java:24)\n"
  stdout: ''
  timestamp: 1659804438
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list arr of integers, find the minimum\
    \ number of elements that\n    // need to be changed to make the array array list\
    \ palindromic. A palindromic array array list is an array array list that\n  \
    \  // is read the same backwards and forwards. In one change, you can change one\
    \ element to any other element.\n    // For example:\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l))))\n    // (4l)\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l,\
    \ (long)2l, (long)2l))))\n    // (1l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long\
    \ smallestChange(ArrayList<Long> arr) {\n        // Your code goes here.\n   \
    \     return 0l;\n    }\n    public static void main(String[] args) {\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l)))) == (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppp_pvme3.java:24)\n"
  stdout: ''
  timestamp: 1659804436
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list arr of integers, find the minimum\
    \ number of elements that\n    // need to be changed to make the array array list\
    \ palindromic. A palindromic array array list is an array array list that\n  \
    \  // is read the same backwards and forwards. In one change, you can change one\
    \ element to any other element.\n    // For example:\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l))))\n    // (4l)\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l,\
    \ (long)2l, (long)2l))))\n    // (1l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long\
    \ smallestChange(ArrayList<Long> arr) {\n        // Your code here\n        return\
    \ 0l;\n    }\n    public static void main(String[] args) {\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l)))) == (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpl0to2h30.java:24)\n"
  stdout: ''
  timestamp: 1659804436
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list arr of integers, find the minimum\
    \ number of elements that\n    // need to be changed to make the array array list\
    \ palindromic. A palindromic array array list is an array array list that\n  \
    \  // is read the same backwards and forwards. In one change, you can change one\
    \ element to any other element.\n    // For example:\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l))))\n    // (4l)\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l,\
    \ (long)2l, (long)2l))))\n    // (1l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long\
    \ smallestChange(ArrayList<Long> arr) {\n        // Your code goes here\n    \
    \    return 0l;\n    }\n    public static void main(String[] args) {\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l)))) == (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptsct83mc.java:24)\n"
  stdout: ''
  timestamp: 1659804436
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list arr of integers, find the minimum\
    \ number of elements that\n    // need to be changed to make the array array list\
    \ palindromic. A palindromic array array list is an array array list that\n  \
    \  // is read the same backwards and forwards. In one change, you can change one\
    \ element to any other element.\n    // For example:\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l))))\n    // (4l)\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l,\
    \ (long)2l, (long)2l))))\n    // (1l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long\
    \ smallestChange(ArrayList<Long> arr) {\n        // Your code here\n        return\
    \ 0l;\n    }\n    public static void main(String[] args) {\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l)))) == (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpl0to2h30.java:24)\n"
  stdout: ''
  timestamp: 1659804436
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list arr of integers, find the minimum\
    \ number of elements that\n    // need to be changed to make the array array list\
    \ palindromic. A palindromic array array list is an array array list that\n  \
    \  // is read the same backwards and forwards. In one change, you can change one\
    \ element to any other element.\n    // For example:\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l))))\n    // (4l)\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l,\
    \ (long)2l, (long)2l))))\n    // (1l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long\
    \ smallestChange(ArrayList<Long> arr) {\n        // Write your code here.\n  \
    \      return 0l;\n    }\n    public static void main(String[] args) {\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l)))) == (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9g_pnlp5.java:24)\n"
  stdout: ''
  timestamp: 1659804438
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list arr of integers, find the minimum\
    \ number of elements that\n    // need to be changed to make the array array list\
    \ palindromic. A palindromic array array list is an array array list that\n  \
    \  // is read the same backwards and forwards. In one change, you can change one\
    \ element to any other element.\n    // For example:\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l))))\n    // (4l)\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l,\
    \ (long)2l, (long)2l))))\n    // (1l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long\
    \ smallestChange(ArrayList<Long> arr) {\n        // Write your code here\n   \
    \     // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        long result\
    \ = 0;\n        for (int i = 0; i < arr.size() / 2; i++) {\n            if (arr.get(i)\
    \ != arr.get(arr.size() - 1 - i)) {\n                result++;\n            }\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)5l, (long)4l, (long)7l, (long)9l, (long)6l)))) ==\
    \ (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659804438
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list arr of integers, find the minimum\
    \ number of elements that\n    // need to be changed to make the array array list\
    \ palindromic. A palindromic array array list is an array array list that\n  \
    \  // is read the same backwards and forwards. In one change, you can change one\
    \ element to any other element.\n    // For example:\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l))))\n    // (4l)\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l,\
    \ (long)2l, (long)2l))))\n    // (1l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long\
    \ smallestChange(ArrayList<Long> arr) {\n        // Your code here\n        return\
    \ 0l;\n    }\n    public static void main(String[] args) {\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l)))) == (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpl0to2h30.java:24)\n"
  stdout: ''
  timestamp: 1659804436
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list arr of integers, find the minimum\
    \ number of elements that\n    // need to be changed to make the array array list\
    \ palindromic. A palindromic array array list is an array array list that\n  \
    \  // is read the same backwards and forwards. In one change, you can change one\
    \ element to any other element.\n    // For example:\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l))))\n    // (4l)\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l,\
    \ (long)2l, (long)2l))))\n    // (1l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long\
    \ smallestChange(ArrayList<Long> arr) {\n        // Write your code here\n   \
    \     return 0;\n    }\n    public static void main(String[] args) {\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l)))) == (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpicctle5s.java:24)\n"
  stdout: ''
  timestamp: 1659804438
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list arr of integers, find the minimum\
    \ number of elements that\n    // need to be changed to make the array array list\
    \ palindromic. A palindromic array array list is an array array list that\n  \
    \  // is read the same backwards and forwards. In one change, you can change one\
    \ element to any other element.\n    // For example:\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l))))\n    // (4l)\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l,\
    \ (long)2l, (long)2l))))\n    // (1l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long\
    \ smallestChange(ArrayList<Long> arr) {\n        return 0;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)5l, (long)4l, (long)7l, (long)9l, (long)6l)))) ==\
    \ (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppzn2jvt3.java:23)\n"
  stdout: ''
  timestamp: 1659804436
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list arr of integers, find the minimum\
    \ number of elements that\n    // need to be changed to make the array array list\
    \ palindromic. A palindromic array array list is an array array list that\n  \
    \  // is read the same backwards and forwards. In one change, you can change one\
    \ element to any other element.\n    // For example:\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l))))\n    // (4l)\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l,\
    \ (long)2l, (long)2l))))\n    // (1l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long\
    \ smallestChange(ArrayList<Long> arr) {\n        // Your code here\n        return\
    \ 0l;\n    }\n    public static void main(String[] args) {\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l)))) == (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpl0to2h30.java:24)\n"
  stdout: ''
  timestamp: 1659804436
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list arr of integers, find the minimum\
    \ number of elements that\n    // need to be changed to make the array array list\
    \ palindromic. A palindromic array array list is an array array list that\n  \
    \  // is read the same backwards and forwards. In one change, you can change one\
    \ element to any other element.\n    // For example:\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l))))\n    // (4l)\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l,\
    \ (long)2l, (long)2l))))\n    // (1l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long\
    \ smallestChange(ArrayList<Long> arr) {\n        long ans = 0;\n        int i\
    \ = 0;\n        int j = arr.size() - 1;\n        while (i < j) {\n           \
    \ if (arr.get(i) != arr.get(j)) {\n                ans++;\n            }\n   \
    \         i++;\n            j--;\n        }\n        return ans;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)5l, (long)4l, (long)7l, (long)9l, (long)6l)))) ==\
    \ (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659804438
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list arr of integers, find the minimum\
    \ number of elements that\n    // need to be changed to make the array array list\
    \ palindromic. A palindromic array array list is an array array list that\n  \
    \  // is read the same backwards and forwards. In one change, you can change one\
    \ element to any other element.\n    // For example:\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l))))\n    // (4l)\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l,\
    \ (long)2l, (long)2l))))\n    // (1l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long\
    \ smallestChange(ArrayList<Long> arr) {\n        // Your code here\n        return\
    \ 0l;\n    }\n    public static void main(String[] args) {\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l)))) == (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpl0to2h30.java:24)\n"
  stdout: ''
  timestamp: 1659804436
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list arr of integers, find the minimum\
    \ number of elements that\n    // need to be changed to make the array array list\
    \ palindromic. A palindromic array array list is an array array list that\n  \
    \  // is read the same backwards and forwards. In one change, you can change one\
    \ element to any other element.\n    // For example:\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l))))\n    // (4l)\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l,\
    \ (long)2l, (long)2l))))\n    // (1l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long\
    \ smallestChange(ArrayList<Long> arr) {\n        // Your code here\n        return\
    \ 0l;\n    }\n    public static void main(String[] args) {\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l)))) == (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpl0to2h30.java:24)\n"
  stdout: ''
  timestamp: 1659804436
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list arr of integers, find the minimum\
    \ number of elements that\n    // need to be changed to make the array array list\
    \ palindromic. A palindromic array array list is an array array list that\n  \
    \  // is read the same backwards and forwards. In one change, you can change one\
    \ element to any other element.\n    // For example:\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l))))\n    // (4l)\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l,\
    \ (long)2l, (long)2l))))\n    // (1l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long\
    \ smallestChange(ArrayList<Long> arr) {\n        // Write your code here\n   \
    \     // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        int n = arr.size();\n\
    \        int[][] dp = new int[n][n];\n        for (int i = 0; i < n; i++) {\n\
    \            dp[i][i] = 0;\n        }\n        for (int len = 2; len <= n; len++)\
    \ {\n            for (int i = 0; i < n - len + 1; i++) {\n                int\
    \ j = i + len - 1;\n                if (arr.get(i) == arr.get(j)) {\n        \
    \            dp[i][j] = dp[i + 1][j - 1];\n                } else {\n        \
    \            dp[i][j] = Math.min(dp[i + 1][j], dp[i][j - 1]) + 1;\n          \
    \      }\n            }\n        }\n        return dp[0][n - 1];\n    }\n    public\
    \ static void main(String[] args) {\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)5l, (long)4l, (long)7l, (long)9l, (long)6l)))) ==\
    \ (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvqtyos67.java:41)\n"
  stdout: ''
  timestamp: 1659804438
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list arr of integers, find the minimum\
    \ number of elements that\n    // need to be changed to make the array array list\
    \ palindromic. A palindromic array array list is an array array list that\n  \
    \  // is read the same backwards and forwards. In one change, you can change one\
    \ element to any other element.\n    // For example:\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l))))\n    // (4l)\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l,\
    \ (long)2l, (long)2l))))\n    // (1l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long\
    \ smallestChange(ArrayList<Long> arr) {\n        // Your code goes here.\n   \
    \     return 0l;\n    }\n    public static void main(String[] args) {\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l)))) == (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppp_pvme3.java:24)\n"
  stdout: ''
  timestamp: 1659804436
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list arr of integers, find the minimum\
    \ number of elements that\n    // need to be changed to make the array array list\
    \ palindromic. A palindromic array array list is an array array list that\n  \
    \  // is read the same backwards and forwards. In one change, you can change one\
    \ element to any other element.\n    // For example:\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l))))\n    // (4l)\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l,\
    \ (long)2l, (long)2l))))\n    // (1l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long\
    \ smallestChange(ArrayList<Long> arr) {\n        // Your code goes here\n    \
    \    return 0l;\n    }\n    public static void main(String[] args) {\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l)))) == (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptsct83mc.java:24)\n"
  stdout: ''
  timestamp: 1659804436
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list arr of integers, find the minimum\
    \ number of elements that\n    // need to be changed to make the array array list\
    \ palindromic. A palindromic array array list is an array array list that\n  \
    \  // is read the same backwards and forwards. In one change, you can change one\
    \ element to any other element.\n    // For example:\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l))))\n    // (4l)\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l,\
    \ (long)2l, (long)2l))))\n    // (1l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long\
    \ smallestChange(ArrayList<Long> arr) {\n        // Your code here\n        return\
    \ 0l;\n    }\n    public static void main(String[] args) {\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l)))) == (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpl0to2h30.java:24)\n"
  stdout: ''
  timestamp: 1659804436
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list arr of integers, find the minimum\
    \ number of elements that\n    // need to be changed to make the array array list\
    \ palindromic. A palindromic array array list is an array array list that\n  \
    \  // is read the same backwards and forwards. In one change, you can change one\
    \ element to any other element.\n    // For example:\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l))))\n    // (4l)\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l,\
    \ (long)2l, (long)2l))))\n    // (1l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long\
    \ smallestChange(ArrayList<Long> arr) {\n        int n = arr.size();\n       \
    \ int[][] dp = new int[n][n];\n        for (int i = 0; i < n; i++) {\n       \
    \     dp[i][i] = 0;\n        }\n        for (int i = 0; i < n - 1; i++) {\n  \
    \          dp[i][i + 1] = arr.get(i).equals(arr.get(i + 1)) ? 0 : 1;\n       \
    \ }\n        for (int i = 2; i < n; i++) {\n            for (int j = 0; j < n\
    \ - i; j++) {\n                if (arr.get(j).equals(arr.get(j + i))) {\n    \
    \                dp[j][j + i] = dp[j + 1][j + i - 1];\n                } else\
    \ {\n                    dp[j][j + i] = Math.min(dp[j + 1][j + i], dp[j][j + i\
    \ - 1]) + 1;\n                }\n            }\n        }\n        return dp[0][n\
    \ - 1];\n    }\n    public static void main(String[] args) {\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l)))) == (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxpn_jp55.java:40)\n"
  stdout: ''
  timestamp: 1659804438
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list arr of integers, find the minimum\
    \ number of elements that\n    // need to be changed to make the array array list\
    \ palindromic. A palindromic array array list is an array array list that\n  \
    \  // is read the same backwards and forwards. In one change, you can change one\
    \ element to any other element.\n    // For example:\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l))))\n    // (4l)\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l,\
    \ (long)2l, (long)2l))))\n    // (1l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long\
    \ smallestChange(ArrayList<Long> arr) {\n        // Your code here\n        return\
    \ 0;\n    }\n    public static void main(String[] args) {\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l)))) == (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1s69wje7.java:24)\n"
  stdout: ''
  timestamp: 1659804436
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list arr of integers, find the minimum\
    \ number of elements that\n    // need to be changed to make the array array list\
    \ palindromic. A palindromic array array list is an array array list that\n  \
    \  // is read the same backwards and forwards. In one change, you can change one\
    \ element to any other element.\n    // For example:\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l))))\n    // (4l)\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l,\
    \ (long)2l, (long)2l))))\n    // (1l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long\
    \ smallestChange(ArrayList<Long> arr) {\n        // Your code here\n        return\
    \ 0l;\n    }\n    public static void main(String[] args) {\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l)))) == (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpl0to2h30.java:24)\n"
  stdout: ''
  timestamp: 1659804436
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list arr of integers, find the minimum\
    \ number of elements that\n    // need to be changed to make the array array list\
    \ palindromic. A palindromic array array list is an array array list that\n  \
    \  // is read the same backwards and forwards. In one change, you can change one\
    \ element to any other element.\n    // For example:\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l))))\n    // (4l)\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l,\
    \ (long)2l, (long)2l))))\n    // (1l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long\
    \ smallestChange(ArrayList<Long> arr) {\n        // Your code here\n        return\
    \ 0l;\n    }\n    public static void main(String[] args) {\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l)))) == (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpl0to2h30.java:24)\n"
  stdout: ''
  timestamp: 1659804436
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list arr of integers, find the minimum\
    \ number of elements that\n    // need to be changed to make the array array list\
    \ palindromic. A palindromic array array list is an array array list that\n  \
    \  // is read the same backwards and forwards. In one change, you can change one\
    \ element to any other element.\n    // For example:\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l))))\n    // (4l)\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l,\
    \ (long)2l, (long)2l))))\n    // (1l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long\
    \ smallestChange(ArrayList<Long> arr) {\n        // Your code goes here\n    \
    \    return 0;\n    }\n    public static void main(String[] args) {\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l)))) == (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpimpvguyi.java:24)\n"
  stdout: ''
  timestamp: 1659804438
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list arr of integers, find the minimum\
    \ number of elements that\n    // need to be changed to make the array array list\
    \ palindromic. A palindromic array array list is an array array list that\n  \
    \  // is read the same backwards and forwards. In one change, you can change one\
    \ element to any other element.\n    // For example:\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l))))\n    // (4l)\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l,\
    \ (long)2l, (long)2l))))\n    // (1l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long\
    \ smallestChange(ArrayList<Long> arr) {\n        long ret = 0;\n        for (int\
    \ i = 0; i < arr.size() / 2; i++) {\n            if (!arr.get(i).equals(arr.get(arr.size()\
    \ - 1 - i))) {\n                ret++;\n            }\n        }\n        return\
    \ ret;\n    }\n    public static void main(String[] args) {\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l)))) == (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659804438
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list arr of integers, find the minimum\
    \ number of elements that\n    // need to be changed to make the array array list\
    \ palindromic. A palindromic array array list is an array array list that\n  \
    \  // is read the same backwards and forwards. In one change, you can change one\
    \ element to any other element.\n    // For example:\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l))))\n    // (4l)\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l,\
    \ (long)2l, (long)2l))))\n    // (1l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long\
    \ smallestChange(ArrayList<Long> arr) {\n        return 0l;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)5l, (long)4l, (long)7l, (long)9l, (long)6l)))) ==\
    \ (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwt_6dueb.java:23)\n"
  stdout: ''
  timestamp: 1659804436
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list arr of integers, find the minimum\
    \ number of elements that\n    // need to be changed to make the array array list\
    \ palindromic. A palindromic array array list is an array array list that\n  \
    \  // is read the same backwards and forwards. In one change, you can change one\
    \ element to any other element.\n    // For example:\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l))))\n    // (4l)\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l,\
    \ (long)2l, (long)2l))))\n    // (1l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long\
    \ smallestChange(ArrayList<Long> arr) {\n        // >>> YOUR CODE HERE <<<\n \
    \       return 0l;\n    }\n    public static void main(String[] args) {\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l)))) == (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgimoqw8h.java:24)\n"
  stdout: ''
  timestamp: 1659804436
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list arr of integers, find the minimum\
    \ number of elements that\n    // need to be changed to make the array array list\
    \ palindromic. A palindromic array array list is an array array list that\n  \
    \  // is read the same backwards and forwards. In one change, you can change one\
    \ element to any other element.\n    // For example:\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l))))\n    // (4l)\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l,\
    \ (long)2l, (long)2l))))\n    // (1l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long\
    \ smallestChange(ArrayList<Long> arr) {\n        // Your code here\n        return\
    \ 0l;\n    }\n    public static void main(String[] args) {\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l)))) == (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpl0to2h30.java:24)\n"
  stdout: ''
  timestamp: 1659804436
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list arr of integers, find the minimum\
    \ number of elements that\n    // need to be changed to make the array array list\
    \ palindromic. A palindromic array array list is an array array list that\n  \
    \  // is read the same backwards and forwards. In one change, you can change one\
    \ element to any other element.\n    // For example:\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l))))\n    // (4l)\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l,\
    \ (long)2l, (long)2l))))\n    // (1l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long\
    \ smallestChange(ArrayList<Long> arr) {\n        // Your code here\n        return\
    \ 0l;\n    }\n    public static void main(String[] args) {\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l)))) == (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpl0to2h30.java:24)\n"
  stdout: ''
  timestamp: 1659804436
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list arr of integers, find the minimum\
    \ number of elements that\n    // need to be changed to make the array array list\
    \ palindromic. A palindromic array array list is an array array list that\n  \
    \  // is read the same backwards and forwards. In one change, you can change one\
    \ element to any other element.\n    // For example:\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l))))\n    // (4l)\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l,\
    \ (long)2l, (long)2l))))\n    // (1l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long\
    \ smallestChange(ArrayList<Long> arr) {\n        long n = arr.size();\n      \
    \  long[][] dp = new long[n][n];\n        for (long i = 0; i < n; i++) {\n   \
    \         dp[i][i] = 0;\n        }\n        for (long l = 2; l <= n; l++) {\n\
    \            for (long i = 0; i < n - l + 1; i++) {\n                long j =\
    \ i + l - 1;\n                if (arr.get((int)i) == arr.get((int)j)) {\n    \
    \                dp[(int)i][(int)j] = dp[(int)i + 1][(int)j - 1];\n          \
    \      } else {\n                    dp[(int)i][(int)j] = 1 + Math.min(dp[(int)i][(int)j\
    \ - 1], dp[(int)i + 1][(int)j]);\n                }\n            }\n        }\n\
    \        return dp[0][(int)n - 1];\n    }\n    public static void main(String[]\
    \ args) {\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)5l, (long)4l, (long)7l, (long)9l, (long)6l)))) ==\
    \ (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxc6eoper.java:21: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long[][] dp = new long[n][n];\n                  \
    \             ^\n/tmp/tmpxc6eoper.java:21: error: incompatible types: possible\
    \ lossy conversion from long to int\n        long[][] dp = new long[n][n];\n \
    \                                 ^\n/tmp/tmpxc6eoper.java:23: error: incompatible\
    \ types: possible lossy conversion from long to int\n            dp[i][i] = 0;\n\
    \               ^\n/tmp/tmpxc6eoper.java:23: error: incompatible types: possible\
    \ lossy conversion from long to int\n            dp[i][i] = 0;\n             \
    \     ^\n4 errors\n"
  stdout: ''
  timestamp: 1659804438
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list arr of integers, find the minimum\
    \ number of elements that\n    // need to be changed to make the array array list\
    \ palindromic. A palindromic array array list is an array array list that\n  \
    \  // is read the same backwards and forwards. In one change, you can change one\
    \ element to any other element.\n    // For example:\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l))))\n    // (4l)\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l,\
    \ (long)2l, (long)2l))))\n    // (1l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long\
    \ smallestChange(ArrayList<Long> arr) {\n        // Your code goes here.\n   \
    \     return 0l;\n    }\n    public static void main(String[] args) {\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l)))) == (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppp_pvme3.java:24)\n"
  stdout: ''
  timestamp: 1659804436
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list arr of integers, find the minimum\
    \ number of elements that\n    // need to be changed to make the array array list\
    \ palindromic. A palindromic array array list is an array array list that\n  \
    \  // is read the same backwards and forwards. In one change, you can change one\
    \ element to any other element.\n    // For example:\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l))))\n    // (4l)\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l,\
    \ (long)2l, (long)2l))))\n    // (1l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long\
    \ smallestChange(ArrayList<Long> arr) {\n        long n = arr.size();\n      \
    \  long[][] dp = new long[n][n];\n        for (long i = 0; i < n; i++) {\n   \
    \         for (long j = 0; j < n; j++) {\n                dp[(int)i][(int)j] =\
    \ Long.MAX_VALUE;\n            }\n        }\n        for (long i = 0; i < n; i++)\
    \ {\n            dp[(int)i][(int)i] = 0;\n        }\n        for (long i = 0;\
    \ i < n - 1; i++) {\n            if (arr.get((int)i) == arr.get((int)(i + 1)))\
    \ {\n                dp[(int)i][(int)(i + 1)] = 0;\n            } else {\n   \
    \             dp[(int)i][(int)(i + 1)] = 1;\n            }\n        }\n      \
    \  for (long i = 2; i < n; i++) {\n            for (long j = 0; j < n - i; j++)\
    \ {\n                if (arr.get((int)j) == arr.get((int)(j + i))) {\n       \
    \             dp[(int)j][(int)(j + i)] = dp[(int)(j + 1)][(int)(j + i - 1)];\n\
    \                } else {\n                    dp[(int)j][(int)(j + i)] = Math.min(dp[(int)(j\
    \ + 1)][(int)(j + i)], dp[(int)j][(int)(j + i - 1)]) + 1;\n                }\n\
    \            }\n        }\n        return dp[0][(int)(n - 1)];\n    }\n    public\
    \ static void main(String[] args) {\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)5l, (long)4l, (long)7l, (long)9l, (long)6l)))) ==\
    \ (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_1obh5ai.java:21: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long[][] dp = new long[n][n];\n                  \
    \             ^\n/tmp/tmp_1obh5ai.java:21: error: incompatible types: possible\
    \ lossy conversion from long to int\n        long[][] dp = new long[n][n];\n \
    \                                 ^\n2 errors\n"
  stdout: ''
  timestamp: 1659804438
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list arr of integers, find the minimum\
    \ number of elements that\n    // need to be changed to make the array array list\
    \ palindromic. A palindromic array array list is an array array list that\n  \
    \  // is read the same backwards and forwards. In one change, you can change one\
    \ element to any other element.\n    // For example:\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l))))\n    // (4l)\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l,\
    \ (long)2l, (long)2l))))\n    // (1l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long\
    \ smallestChange(ArrayList<Long> arr) {\n        // Your code goes here\n    \
    \    return 0;\n    }\n    public static void main(String[] args) {\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l)))) == (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpimpvguyi.java:24)\n"
  stdout: ''
  timestamp: 1659804438
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list arr of integers, find the minimum\
    \ number of elements that\n    // need to be changed to make the array array list\
    \ palindromic. A palindromic array array list is an array array list that\n  \
    \  // is read the same backwards and forwards. In one change, you can change one\
    \ element to any other element.\n    // For example:\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l))))\n    // (4l)\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l,\
    \ (long)2l, (long)2l))))\n    // (1l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long\
    \ smallestChange(ArrayList<Long> arr) {\n        long ret = 0;\n        int i\
    \ = 0;\n        int j = arr.size() - 1;\n        while (i < j) {\n           \
    \ if (arr.get(i) != arr.get(j)) {\n                ret++;\n            }\n   \
    \         i++;\n            j--;\n        }\n        return ret;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)5l, (long)4l, (long)7l, (long)9l, (long)6l)))) ==\
    \ (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659804436
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list arr of integers, find the minimum\
    \ number of elements that\n    // need to be changed to make the array array list\
    \ palindromic. A palindromic array array list is an array array list that\n  \
    \  // is read the same backwards and forwards. In one change, you can change one\
    \ element to any other element.\n    // For example:\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l))))\n    // (4l)\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l,\
    \ (long)2l, (long)2l))))\n    // (1l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long\
    \ smallestChange(ArrayList<Long> arr) {\n        // Your code goes here.\n   \
    \     return 0l;\n    }\n    public static void main(String[] args) {\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l)))) == (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppp_pvme3.java:24)\n"
  stdout: ''
  timestamp: 1659804436
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list arr of integers, find the minimum\
    \ number of elements that\n    // need to be changed to make the array array list\
    \ palindromic. A palindromic array array list is an array array list that\n  \
    \  // is read the same backwards and forwards. In one change, you can change one\
    \ element to any other element.\n    // For example:\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l))))\n    // (4l)\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l,\
    \ (long)2l, (long)2l))))\n    // (1l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long\
    \ smallestChange(ArrayList<Long> arr) {\n        // Your code here\n        return\
    \ 0l;\n    }\n    public static void main(String[] args) {\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l)))) == (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpl0to2h30.java:24)\n"
  stdout: ''
  timestamp: 1659804436
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list arr of integers, find the minimum\
    \ number of elements that\n    // need to be changed to make the array array list\
    \ palindromic. A palindromic array array list is an array array list that\n  \
    \  // is read the same backwards and forwards. In one change, you can change one\
    \ element to any other element.\n    // For example:\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l))))\n    // (4l)\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l,\
    \ (long)2l, (long)2l))))\n    // (1l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long\
    \ smallestChange(ArrayList<Long> arr) {\n        // Write your code here\n   \
    \     // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        long n = arr.size();\n\
    \        long[][] dp = new long[(int)n][(int)n];\n        for (long i = 0; i <\
    \ n; i++) {\n            for (long j = 0; j < n; j++) {\n                dp[(int)i][(int)j]\
    \ = Long.MAX_VALUE;\n            }\n        }\n        for (long i = 0; i < n;\
    \ i++) {\n            dp[(int)i][(int)i] = 0;\n        }\n        for (long i\
    \ = 0; i < n - 1; i++) {\n            if (arr.get((int)i) == arr.get((int)(i +\
    \ 1))) {\n                dp[(int)i][(int)(i + 1)] = 0;\n            } else {\n\
    \                dp[(int)i][(int)(i + 1)] = 1;\n            }\n        }\n   \
    \     for (long l = 3; l <= n; l++) {\n            for (long i = 0; i < n - l\
    \ + 1; i++) {\n                long j = i + l - 1;\n                if (arr.get((int)i)\
    \ == arr.get((int)j)) {\n                    dp[(int)i][(int)j] = dp[(int)(i +\
    \ 1)][(int)(j - 1)];\n                } else {\n                    dp[(int)i][(int)j]\
    \ = Math.min(dp[(int)(i + 1)][(int)j], dp[(int)i][(int)(j - 1)]) + 1;\n      \
    \          }\n            }\n        }\n        return dp[0][(int)(n - 1)];\n\
    \    }\n    public static void main(String[] args) {\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l)))) == (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5cuq6vps.java:53)\n"
  stdout: ''
  timestamp: 1659804438
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list arr of integers, find the minimum\
    \ number of elements that\n    // need to be changed to make the array array list\
    \ palindromic. A palindromic array array list is an array array list that\n  \
    \  // is read the same backwards and forwards. In one change, you can change one\
    \ element to any other element.\n    // For example:\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l))))\n    // (4l)\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l,\
    \ (long)2l, (long)2l))))\n    // (1l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long\
    \ smallestChange(ArrayList<Long> arr) {\n        // Your code here\n        return\
    \ 0l;\n    }\n    public static void main(String[] args) {\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l)))) == (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpl0to2h30.java:24)\n"
  stdout: ''
  timestamp: 1659804436
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list arr of integers, find the minimum\
    \ number of elements that\n    // need to be changed to make the array array list\
    \ palindromic. A palindromic array array list is an array array list that\n  \
    \  // is read the same backwards and forwards. In one change, you can change one\
    \ element to any other element.\n    // For example:\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l))))\n    // (4l)\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l,\
    \ (long)2l, (long)2l))))\n    // (1l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long\
    \ smallestChange(ArrayList<Long> arr) {\n        // Your code here\n        return\
    \ 0l;\n    }\n    public static void main(String[] args) {\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l)))) == (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpl0to2h30.java:24)\n"
  stdout: ''
  timestamp: 1659804436
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list arr of integers, find the minimum\
    \ number of elements that\n    // need to be changed to make the array array list\
    \ palindromic. A palindromic array array list is an array array list that\n  \
    \  // is read the same backwards and forwards. In one change, you can change one\
    \ element to any other element.\n    // For example:\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l))))\n    // (4l)\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l,\
    \ (long)2l, (long)2l))))\n    // (1l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long\
    \ smallestChange(ArrayList<Long> arr) {\n        // Your code here\n        return\
    \ 0l;\n    }\n    public static void main(String[] args) {\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l)))) == (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpl0to2h30.java:24)\n"
  stdout: ''
  timestamp: 1659804436
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list arr of integers, find the minimum\
    \ number of elements that\n    // need to be changed to make the array array list\
    \ palindromic. A palindromic array array list is an array array list that\n  \
    \  // is read the same backwards and forwards. In one change, you can change one\
    \ element to any other element.\n    // For example:\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l))))\n    // (4l)\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l,\
    \ (long)2l, (long)2l))))\n    // (1l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long\
    \ smallestChange(ArrayList<Long> arr) {\n        return 0l;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)5l, (long)4l, (long)7l, (long)9l, (long)6l)))) ==\
    \ (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwt_6dueb.java:23)\n"
  stdout: ''
  timestamp: 1659804436
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list arr of integers, find the minimum\
    \ number of elements that\n    // need to be changed to make the array array list\
    \ palindromic. A palindromic array array list is an array array list that\n  \
    \  // is read the same backwards and forwards. In one change, you can change one\
    \ element to any other element.\n    // For example:\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l))))\n    // (4l)\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l,\
    \ (long)2l, (long)2l))))\n    // (1l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long\
    \ smallestChange(ArrayList<Long> arr) {\n        // Write your code here\n   \
    \     // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        int n = arr.size();\n\
    \        int[][] dp = new int[n][n];\n        for (int i = 0; i < n; i++) {\n\
    \            for (int j = 0; j < n; j++) {\n                dp[i][j] = -1;\n \
    \           }\n        }\n        return helper(arr, 0, n - 1, dp);\n    }\n \
    \   public static void main(String[] args) {\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)5l, (long)4l, (long)7l, (long)9l, (long)6l)))) ==\
    \ (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3n7ppph4.java:30: error: cannot find symbol\n        return helper(arr,\
    \ 0, n - 1, dp);\n               ^\n  symbol:   method helper(ArrayList<Long>,int,int,int[][])\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659804438
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list arr of integers, find the minimum\
    \ number of elements that\n    // need to be changed to make the array array list\
    \ palindromic. A palindromic array array list is an array array list that\n  \
    \  // is read the same backwards and forwards. In one change, you can change one\
    \ element to any other element.\n    // For example:\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l))))\n    // (4l)\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l,\
    \ (long)2l, (long)2l))))\n    // (1l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long\
    \ smallestChange(ArrayList<Long> arr) {\n        // Your code here\n        return\
    \ 0l;\n    }\n    public static void main(String[] args) {\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l)))) == (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpl0to2h30.java:24)\n"
  stdout: ''
  timestamp: 1659804436
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list arr of integers, find the minimum\
    \ number of elements that\n    // need to be changed to make the array array list\
    \ palindromic. A palindromic array array list is an array array list that\n  \
    \  // is read the same backwards and forwards. In one change, you can change one\
    \ element to any other element.\n    // For example:\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l))))\n    // (4l)\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l,\
    \ (long)2l, (long)2l))))\n    // (1l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long\
    \ smallestChange(ArrayList<Long> arr) {\n        return 0l;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)5l, (long)4l, (long)7l, (long)9l, (long)6l)))) ==\
    \ (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwt_6dueb.java:23)\n"
  stdout: ''
  timestamp: 1659804436
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list arr of integers, find the minimum\
    \ number of elements that\n    // need to be changed to make the array array list\
    \ palindromic. A palindromic array array list is an array array list that\n  \
    \  // is read the same backwards and forwards. In one change, you can change one\
    \ element to any other element.\n    // For example:\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l))))\n    // (4l)\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l,\
    \ (long)2l, (long)2l))))\n    // (1l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long\
    \ smallestChange(ArrayList<Long> arr) {\n        // Your code here\n        return\
    \ 0l;\n    }\n    public static void main(String[] args) {\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l)))) == (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpl0to2h30.java:24)\n"
  stdout: ''
  timestamp: 1659804436
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list arr of integers, find the minimum\
    \ number of elements that\n    // need to be changed to make the array array list\
    \ palindromic. A palindromic array array list is an array array list that\n  \
    \  // is read the same backwards and forwards. In one change, you can change one\
    \ element to any other element.\n    // For example:\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l))))\n    // (4l)\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l,\
    \ (long)2l, (long)2l))))\n    // (1l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long\
    \ smallestChange(ArrayList<Long> arr) {\n        // Your code goes here\n    \
    \    return 0;\n    }\n    public static void main(String[] args) {\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l)))) == (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpimpvguyi.java:24)\n"
  stdout: ''
  timestamp: 1659804438
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list arr of integers, find the minimum\
    \ number of elements that\n    // need to be changed to make the array array list\
    \ palindromic. A palindromic array array list is an array array list that\n  \
    \  // is read the same backwards and forwards. In one change, you can change one\
    \ element to any other element.\n    // For example:\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l))))\n    // (4l)\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l,\
    \ (long)2l, (long)2l))))\n    // (1l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long\
    \ smallestChange(ArrayList<Long> arr) {\n        // Your code goes here.\n   \
    \     return 0l;\n    }\n    public static void main(String[] args) {\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l)))) == (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppp_pvme3.java:24)\n"
  stdout: ''
  timestamp: 1659804436
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list arr of integers, find the minimum\
    \ number of elements that\n    // need to be changed to make the array array list\
    \ palindromic. A palindromic array array list is an array array list that\n  \
    \  // is read the same backwards and forwards. In one change, you can change one\
    \ element to any other element.\n    // For example:\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l))))\n    // (4l)\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l,\
    \ (long)2l, (long)2l))))\n    // (1l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long\
    \ smallestChange(ArrayList<Long> arr) {\n        // Write your code here\n   \
    \     // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        return 0;\n\
    \    }\n    public static void main(String[] args) {\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l)))) == (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqwly_hfw.java:26)\n"
  stdout: ''
  timestamp: 1659804436
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list arr of integers, find the minimum\
    \ number of elements that\n    // need to be changed to make the array array list\
    \ palindromic. A palindromic array array list is an array array list that\n  \
    \  // is read the same backwards and forwards. In one change, you can change one\
    \ element to any other element.\n    // For example:\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l))))\n    // (4l)\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l,\
    \ (long)2l, (long)2l))))\n    // (1l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long\
    \ smallestChange(ArrayList<Long> arr) {\n        // Your code here\n        return\
    \ 0l;\n    }\n    public static void main(String[] args) {\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l)))) == (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpl0to2h30.java:24)\n"
  stdout: ''
  timestamp: 1659804436
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list arr of integers, find the minimum\
    \ number of elements that\n    // need to be changed to make the array array list\
    \ palindromic. A palindromic array array list is an array array list that\n  \
    \  // is read the same backwards and forwards. In one change, you can change one\
    \ element to any other element.\n    // For example:\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l))))\n    // (4l)\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l,\
    \ (long)2l, (long)2l))))\n    // (1l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long\
    \ smallestChange(ArrayList<Long> arr) {\n        // Write your code here\n   \
    \     // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        int n = arr.size();\n\
    \        long[][] dp = new long[n][n];\n        for (int i = 0; i < n; i++) {\n\
    \            for (int j = 0; j < n; j++) {\n                dp[i][j] = Long.MAX_VALUE;\n\
    \            }\n        }\n        for (int i = 0; i < n; i++) {\n           \
    \ dp[i][i] = 0;\n        }\n        for (int i = 0; i < n - 1; i++) {\n      \
    \      dp[i][i + 1] = arr.get(i) == arr.get(i + 1) ? 0 : 1;\n        }\n     \
    \   for (int i = 2; i < n; i++) {\n            for (int j = 0; j < n - i; j++)\
    \ {\n                if (arr.get(j) == arr.get(j + i)) {\n                   \
    \ dp[j][j + i] = dp[j + 1][j + i - 1];\n                } else {\n           \
    \         dp[j][j + i] = Math.min(dp[j + 1][j + i], dp[j][j + i - 1]) + 1;\n \
    \               }\n            }\n        }\n        return dp[0][n - 1];\n  \
    \  }\n    public static void main(String[] args) {\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l)))) == (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkpyhoqyj.java:48)\n"
  stdout: ''
  timestamp: 1659804439
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list arr of integers, find the minimum\
    \ number of elements that\n    // need to be changed to make the array array list\
    \ palindromic. A palindromic array array list is an array array list that\n  \
    \  // is read the same backwards and forwards. In one change, you can change one\
    \ element to any other element.\n    // For example:\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l))))\n    // (4l)\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l,\
    \ (long)2l, (long)2l))))\n    // (1l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long\
    \ smallestChange(ArrayList<Long> arr) {\n        // Your code goes here.\n   \
    \     return (long)0l;\n    }\n    public static void main(String[] args) {\n\
    \    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)5l, (long)4l, (long)7l, (long)9l, (long)6l)))) == (4l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzxlsxhrg.java:24)\n"
  stdout: ''
  timestamp: 1659804438
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list arr of integers, find the minimum\
    \ number of elements that\n    // need to be changed to make the array array list\
    \ palindromic. A palindromic array array list is an array array list that\n  \
    \  // is read the same backwards and forwards. In one change, you can change one\
    \ element to any other element.\n    // For example:\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l))))\n    // (4l)\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l,\
    \ (long)2l, (long)2l))))\n    // (1l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long\
    \ smallestChange(ArrayList<Long> arr) {\n        return 0;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)5l, (long)4l, (long)7l, (long)9l, (long)6l)))) ==\
    \ (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppzn2jvt3.java:23)\n"
  stdout: ''
  timestamp: 1659804436
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list arr of integers, find the minimum\
    \ number of elements that\n    // need to be changed to make the array array list\
    \ palindromic. A palindromic array array list is an array array list that\n  \
    \  // is read the same backwards and forwards. In one change, you can change one\
    \ element to any other element.\n    // For example:\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l))))\n    // (4l)\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l,\
    \ (long)2l, (long)2l))))\n    // (1l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long\
    \ smallestChange(ArrayList<Long> arr) {\n        return 0l;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)5l, (long)4l, (long)7l, (long)9l, (long)6l)))) ==\
    \ (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwt_6dueb.java:23)\n"
  stdout: ''
  timestamp: 1659804436
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list arr of integers, find the minimum\
    \ number of elements that\n    // need to be changed to make the array array list\
    \ palindromic. A palindromic array array list is an array array list that\n  \
    \  // is read the same backwards and forwards. In one change, you can change one\
    \ element to any other element.\n    // For example:\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l))))\n    // (4l)\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l,\
    \ (long)2l, (long)2l))))\n    // (1l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long\
    \ smallestChange(ArrayList<Long> arr) {\n        // Your code goes here\n    \
    \    return 0l;\n    }\n    public static void main(String[] args) {\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l)))) == (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptsct83mc.java:24)\n"
  stdout: ''
  timestamp: 1659804436
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list arr of integers, find the minimum\
    \ number of elements that\n    // need to be changed to make the array array list\
    \ palindromic. A palindromic array array list is an array array list that\n  \
    \  // is read the same backwards and forwards. In one change, you can change one\
    \ element to any other element.\n    // For example:\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l))))\n    // (4l)\n    // >>> smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l,\
    \ (long)2l, (long)2l))))\n    // (1l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long\
    \ smallestChange(ArrayList<Long> arr) {\n        // Your code here\n        return\
    \ 0l;\n    }\n    public static void main(String[] args) {\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l)))) == (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpl0to2h30.java:24)\n"
  stdout: ''
  timestamp: 1659804436
