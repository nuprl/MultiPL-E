name: HumanEval_68_pluck
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // \"Given an array array list representing a branch of a tree\
  \ that has non-negative integer nodes\n    // your task is to pluck one of the nodes\
  \ and return it.\n    // The plucked node should be the node with the smallest even\
  \ value.\n    // If multiple nodes with the same smallest even value are found return\
  \ the node that has smallest index.\n    // The plucked node should be returned\
  \ in an array array list, [ smalest_value, its index ],\n    // If there are no\
  \ even values or the given array array list is empty, return [].\n    // Example\
  \ 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n\
  \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation:\
  \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n\
  \    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l))))\n\
  \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation:\
  \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n\
  \    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
  \    // Example 4:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
  \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
  \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n\
  \    // so we will choose the first zero, which has the smallest index.\n    //\
  \ Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
  \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n"
tests: "    }\n    public static void main(String[] args) {\n    assert(pluck((new\
  \ ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
  \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
  \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
  \    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
  \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
  \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
  \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
  \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
  \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
  \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
  \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
  \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
  \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
  \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
  \    }\n\n}\n"
completions: ["        ArrayList<Long> result = new ArrayList<Long>();\n        if\
    \ (arr.size() == 0) {\n            return result;\n        }\n        Long min\
    \ = Long.MAX_VALUE;\n        int minIndex = -1;\n        for (int i = 0; i < arr.size();\
    \ i++) {\n            Long val = arr.get(i);\n            if (val % 2 == 0 &&\
    \ val < min) {\n                min = val;\n                minIndex = i;\n  \
    \          }\n        }\n        if (minIndex == -1) {\n            return result;\n\
    \        }\n        result.add(min);\n        result.add((long)minIndex);\n  \
    \      return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (arr.size() == 0) {\n            return result;\n        }\n     \
    \   long min = Long.MAX_VALUE;\n        int minIndex = -1;\n        for (int i\
    \ = 0; i < arr.size(); i++) {\n            long value = arr.get(i);\n        \
    \    if (value % 2 == 0 && value < min) {\n                min = value;\n    \
    \            minIndex = i;\n            }\n        }\n        if (minIndex ==\
    \ -1) {\n            return result;\n        }\n        result.add(min);\n   \
    \     result.add((long)minIndex);\n        return result;", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        long min = Long.MAX_VALUE;\n        int\
    \ minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n           \
    \ long val = arr.get(i);\n            if (val % 2 == 0 && val < min) {\n     \
    \           min = val;\n                minIndex = i;\n            }\n       \
    \ }\n        if (minIndex == -1) {\n            return result;\n        }\n  \
    \      result.add(min);\n        result.add((long)minIndex);\n        return result;",
  "        // your code here\n        return null;", "        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        if (arr.size() == 0) {\n            return\
    \ result;\n        }\n        long min = Long.MAX_VALUE;\n        int minIndex\
    \ = -1;\n        for (int i = 0; i < arr.size(); i++) {\n            long value\
    \ = arr.get(i);\n            if (value % 2 == 0 && value < min) {\n          \
    \      min = value;\n                minIndex = i;\n            }\n        }\n\
    \        if (minIndex != -1) {\n            result.add(min);\n            result.add((long)minIndex);\n\
    \        }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (arr.size() == 0) {\n            return result;\n        }\n     \
    \   long min = Long.MAX_VALUE;\n        int minIndex = -1;\n        for (int i\
    \ = 0; i < arr.size(); i++) {\n            long val = arr.get(i);\n          \
    \  if (val % 2 == 0 && val < min) {\n                min = val;\n            \
    \    minIndex = i;\n            }\n        }\n        if (minIndex == -1) {\n\
    \            return result;\n        }\n        result.add(min);\n        result.add((long)minIndex);\n\
    \        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (arr.size() == 0) {\n            return result;\n        }\n     \
    \   long min = Long.MAX_VALUE;\n        int minIndex = -1;\n        for (int i\
    \ = 0; i < arr.size(); i++) {\n            long val = arr.get(i);\n          \
    \  if (val % 2 == 0 && val < min) {\n                min = val;\n            \
    \    minIndex = i;\n            }\n        }\n        if (minIndex == -1) {\n\
    \            return result;\n        }\n        result.add(min);\n        result.add((long)minIndex);\n\
    \        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (arr.size() == 0) {\n            return result;\n        }\n     \
    \   long minEven = Long.MAX_VALUE;\n        int minEvenIndex = -1;\n        for\
    \ (int i = 0; i < arr.size(); i++) {\n            long val = arr.get(i);\n   \
    \         if (val % 2 == 0 && val < minEven) {\n                minEven = val;\n\
    \                minEvenIndex = i;\n            }\n        }\n        if (minEvenIndex\
    \ == -1) {\n            return result;\n        }\n        result.add(minEven);\n\
    \        result.add((long)minEvenIndex);\n        return result;", "        //\
    \ your code here\n        return null;", '        return arr.stream().filter(x
    -> x % 2 == 0).min(Comparator.comparing(x -> x)).map(x -> new ArrayList<Long>(Arrays.asList(x,
    (long)arr.indexOf(x)))).orElse(new ArrayList<Long>());', "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long min = Long.MAX_VALUE;\n      \
    \  int index = -1;\n        for (int i = 0; i < arr.size(); i++) {\n         \
    \   long val = arr.get(i);\n            if (val % 2 == 0 && val < min) {\n   \
    \             min = val;\n                index = i;\n            }\n        }\n\
    \        if (index != -1) {\n            result.add(min);\n            result.add((long)index);\n\
    \        }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (arr.size() == 0) return result;\n        long smallest = Long.MAX_VALUE;\n\
    \        int index = 0;\n        for (int i = 0; i < arr.size(); i++) {\n    \
    \        long val = arr.get(i);\n            if (val % 2 == 0 && val < smallest)\
    \ {\n                smallest = val;\n                index = i;\n           \
    \ }\n        }\n        if (smallest == Long.MAX_VALUE) return result;\n     \
    \   result.add(smallest);\n        result.add((long)index);\n        return result;",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        long min = Long.MAX_VALUE;\n\
    \        int minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n\
    \            long v = arr.get(i);\n            if (v % 2 == 0 && v < min) {\n\
    \                min = v;\n                minIndex = i;\n            }\n    \
    \    }\n        if (minIndex != -1) {\n            result.add(min);\n        \
    \    result.add((long)minIndex);\n        }\n        return result;", "      \
    \  ArrayList<Long> result = new ArrayList<Long>();\n        long min = Long.MAX_VALUE;\n\
    \        int minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n\
    \            long val = arr.get(i);\n            if (val % 2 == 0 && val < min)\
    \ {\n                min = val;\n                minIndex = i;\n            }\n\
    \        }\n        if (minIndex != -1) {\n            result.add(min);\n    \
    \        result.add((long)minIndex);\n        }\n        return result;", "  \
    \      ArrayList<Long> result = new ArrayList<Long>();\n        if (arr.size()\
    \ == 0) {\n            return result;\n        }\n        long min = Long.MAX_VALUE;\n\
    \        int minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n\
    \            long value = arr.get(i);\n            if (value % 2 == 0 && value\
    \ < min) {\n                min = value;\n                minIndex = i;\n    \
    \        }\n        }\n        if (minIndex == -1) {\n            return result;\n\
    \        }\n        result.add(min);\n        result.add((long)minIndex);\n  \
    \      return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (arr.size() == 0) {\n            return result;\n        }\n     \
    \   long min = Long.MAX_VALUE;\n        int index = -1;\n        for (int i =\
    \ 0; i < arr.size(); i++) {\n            long val = arr.get(i);\n            if\
    \ (val % 2 == 0 && val < min) {\n                min = val;\n                index\
    \ = i;\n            }\n        }\n        if (index == -1) {\n            return\
    \ result;\n        }\n        result.add(min);\n        result.add((long)index);\n\
    \        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (arr.size() == 0) {\n            return result;\n        }\n     \
    \   long min = Long.MAX_VALUE;\n        int min_index = -1;\n        for (int\
    \ i = 0; i < arr.size(); i++) {\n            if (arr.get(i) % 2 == 0 && arr.get(i)\
    \ < min) {\n                min = arr.get(i);\n                min_index = i;\n\
    \            }\n        }\n        if (min_index == -1) {\n            return\
    \ result;\n        }\n        result.add(min);\n        result.add((long)min_index);\n\
    \        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (arr.size() == 0) {\n            return result;\n        }\n     \
    \   long min = Long.MAX_VALUE;\n        int min_index = -1;\n        for (int\
    \ i = 0; i < arr.size(); i++) {\n            long val = arr.get(i);\n        \
    \    if (val % 2 == 0 && val < min) {\n                min = val;\n          \
    \      min_index = i;\n            }\n        }\n        if (min_index == -1)\
    \ {\n            return result;\n        }\n        result.add(min);\n       \
    \ result.add((long)min_index);\n        return result;", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long min = Long.MAX_VALUE;\n      \
    \  int index = -1;\n        for (int i = 0; i < arr.size(); i++) {\n         \
    \   long value = arr.get(i);\n            if (value % 2 == 0 && value < min) {\n\
    \                min = value;\n                index = i;\n            }\n   \
    \     }\n        if (index >= 0) {\n            result.add(min);\n           \
    \ result.add((long)index);\n        }\n        return result;", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long min = Long.MAX_VALUE;\n      \
    \  int index = -1;\n        for (int i = 0; i < arr.size(); i++) {\n         \
    \   long val = arr.get(i);\n            if (val % 2 == 0 && val < min) {\n   \
    \             min = val;\n                index = i;\n            }\n        }\n\
    \        if (index != -1) {\n            result.add(min);\n            result.add((long)index);\n\
    \        }\n        return result;"]
stop_tokens:
- "\n    }\n"
