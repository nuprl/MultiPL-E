language: java
name: HumanEval_122_add_elements
results:
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a non-empty array array list of integers arr and\
    \ an integer k, return\n    // the sum of the elements with at most two digits\
    \ from the first k elements of arr.\n    // Example:\n    // >>> addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\n    // (24l)\n \
    \   // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n\
    \    public static long addElements(ArrayList<Long> arr, long k) {\n        return\
    \ arr.stream().limit(k).filter(x -> x < 100).mapToLong(Long::longValue).sum();\n\
    \    }\n    public static void main(String[] args) {\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)-2l, (long)-3l, (long)41l, (long)57l,\
    \ (long)76l, (long)87l, (long)88l, (long)99l))), (3l)) == (-4l));\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)121l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l))), (2l)) == (0l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)21l, (long)3l, (long)90l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (125l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (24l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l))),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794229
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a non-empty array array list of integers arr and\
    \ an integer k, return\n    // the sum of the elements with at most two digits\
    \ from the first k elements of arr.\n    // Example:\n    // >>> addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\n    // (24l)\n \
    \   // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n\
    \    public static long addElements(ArrayList<Long> arr, long k) {\n        long\
    \ sum = 0;\n        for (int i = 0; i < k; i++) {\n            if (arr.get(i)\
    \ < 100) {\n                sum += arr.get(i);\n            }\n        }\n   \
    \     return sum;\n    }\n    public static void main(String[] args) {\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)-2l, (long)-3l, (long)41l, (long)57l,\
    \ (long)76l, (long)87l, (long)88l, (long)99l))), (3l)) == (-4l));\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)121l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l))), (2l)) == (0l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)21l, (long)3l, (long)90l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (125l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (24l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l))),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794229
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a non-empty array array list of integers arr and\
    \ an integer k, return\n    // the sum of the elements with at most two digits\
    \ from the first k elements of arr.\n    // Example:\n    // >>> addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\n    // (24l)\n \
    \   // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n\
    \    public static long addElements(ArrayList<Long> arr, long k) {\n        long\
    \ sum = 0;\n        for (int i = 0; i < k; i++) {\n            long num = arr.get(i);\n\
    \            if (num < 100) {\n                sum += num;\n            }\n  \
    \      }\n        return sum;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l, (long)-2l,\
    \ (long)-3l, (long)41l, (long)57l, (long)76l, (long)87l, (long)88l, (long)99l))),\
    \ (3l)) == (-4l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)121l, (long)3l, (long)4000l, (long)5l, (long)6l))), (2l)) == (0l));\n\
    \    assert(addElements((new ArrayList<Long>(Arrays.asList((long)11l, (long)21l,\
    \ (long)3l, (long)90l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\
    \ == (125l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (24l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l))),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794229
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a non-empty array array list of integers arr and\
    \ an integer k, return\n    // the sum of the elements with at most two digits\
    \ from the first k elements of arr.\n    // Example:\n    // >>> addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\n    // (24l)\n \
    \   // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n\
    \    public static long addElements(ArrayList<Long> arr, long k) {\n        return\
    \ arr.stream().limit(k).filter(x -> x < 100).mapToLong(x -> x).sum();\n    }\n\
    \    public static void main(String[] args) {\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-2l, (long)-3l, (long)41l, (long)57l, (long)76l, (long)87l, (long)88l,\
    \ (long)99l))), (3l)) == (-4l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)121l, (long)3l, (long)4000l, (long)5l, (long)6l))), (2l)) == (0l));\n\
    \    assert(addElements((new ArrayList<Long>(Arrays.asList((long)11l, (long)21l,\
    \ (long)3l, (long)90l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\
    \ == (125l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (24l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l))),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794229
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a non-empty array array list of integers arr and\
    \ an integer k, return\n    // the sum of the elements with at most two digits\
    \ from the first k elements of arr.\n    // Example:\n    // >>> addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\n    // (24l)\n \
    \   // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n\
    \    public static long addElements(ArrayList<Long> arr, long k) {\n        return\
    \ arr.stream().limit(k).filter(x -> x < 100).mapToLong(x -> x).sum();\n    }\n\
    \    public static void main(String[] args) {\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-2l, (long)-3l, (long)41l, (long)57l, (long)76l, (long)87l, (long)88l,\
    \ (long)99l))), (3l)) == (-4l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)121l, (long)3l, (long)4000l, (long)5l, (long)6l))), (2l)) == (0l));\n\
    \    assert(addElements((new ArrayList<Long>(Arrays.asList((long)11l, (long)21l,\
    \ (long)3l, (long)90l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\
    \ == (125l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (24l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l))),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794229
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a non-empty array array list of integers arr and\
    \ an integer k, return\n    // the sum of the elements with at most two digits\
    \ from the first k elements of arr.\n    // Example:\n    // >>> addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\n    // (24l)\n \
    \   // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n\
    \    public static long addElements(ArrayList<Long> arr, long k) {\n        long\
    \ sum = 0;\n        for (int i = 0; i < k; i++) {\n            long num = arr.get(i);\n\
    \            if (num < 100) {\n                sum += num;\n            }\n  \
    \      }\n        return sum;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l, (long)-2l,\
    \ (long)-3l, (long)41l, (long)57l, (long)76l, (long)87l, (long)88l, (long)99l))),\
    \ (3l)) == (-4l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)121l, (long)3l, (long)4000l, (long)5l, (long)6l))), (2l)) == (0l));\n\
    \    assert(addElements((new ArrayList<Long>(Arrays.asList((long)11l, (long)21l,\
    \ (long)3l, (long)90l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\
    \ == (125l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (24l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l))),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794229
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a non-empty array array list of integers arr and\
    \ an integer k, return\n    // the sum of the elements with at most two digits\
    \ from the first k elements of arr.\n    // Example:\n    // >>> addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\n    // (24l)\n \
    \   // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n\
    \    public static long addElements(ArrayList<Long> arr, long k) {\n        return\
    \ arr.stream().limit(k).filter(x -> x < 100).mapToLong(x -> x).sum();\n    }\n\
    \    public static void main(String[] args) {\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-2l, (long)-3l, (long)41l, (long)57l, (long)76l, (long)87l, (long)88l,\
    \ (long)99l))), (3l)) == (-4l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)121l, (long)3l, (long)4000l, (long)5l, (long)6l))), (2l)) == (0l));\n\
    \    assert(addElements((new ArrayList<Long>(Arrays.asList((long)11l, (long)21l,\
    \ (long)3l, (long)90l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\
    \ == (125l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (24l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l))),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794229
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a non-empty array array list of integers arr and\
    \ an integer k, return\n    // the sum of the elements with at most two digits\
    \ from the first k elements of arr.\n    // Example:\n    // >>> addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\n    // (24l)\n \
    \   // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n\
    \    public static long addElements(ArrayList<Long> arr, long k) {\n        return\
    \ arr.stream().limit(k).filter(x -> x < 100).mapToLong(x -> x).sum();\n    }\n\
    \    public static void main(String[] args) {\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-2l, (long)-3l, (long)41l, (long)57l, (long)76l, (long)87l, (long)88l,\
    \ (long)99l))), (3l)) == (-4l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)121l, (long)3l, (long)4000l, (long)5l, (long)6l))), (2l)) == (0l));\n\
    \    assert(addElements((new ArrayList<Long>(Arrays.asList((long)11l, (long)21l,\
    \ (long)3l, (long)90l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\
    \ == (125l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (24l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l))),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794229
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a non-empty array array list of integers arr and\
    \ an integer k, return\n    // the sum of the elements with at most two digits\
    \ from the first k elements of arr.\n    // Example:\n    // >>> addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\n    // (24l)\n \
    \   // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n\
    \    public static long addElements(ArrayList<Long> arr, long k) {\n        long\
    \ sum = 0;\n        for (int i = 0; i < k; i++) {\n            if (arr.get(i)\
    \ < 100) {\n                sum += arr.get(i);\n            }\n        }\n   \
    \     return sum;\n    }\n    public static void main(String[] args) {\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)-2l, (long)-3l, (long)41l, (long)57l,\
    \ (long)76l, (long)87l, (long)88l, (long)99l))), (3l)) == (-4l));\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)121l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l))), (2l)) == (0l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)21l, (long)3l, (long)90l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (125l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (24l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l))),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794229
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a non-empty array array list of integers arr and\
    \ an integer k, return\n    // the sum of the elements with at most two digits\
    \ from the first k elements of arr.\n    // Example:\n    // >>> addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\n    // (24l)\n \
    \   // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n\
    \    public static long addElements(ArrayList<Long> arr, long k) {\n        long\
    \ sum = 0;\n        for (int i = 0; i < k; i++) {\n            long num = arr.get(i);\n\
    \            if (num < 100) {\n                sum += num;\n            }\n  \
    \      }\n        return sum;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l, (long)-2l,\
    \ (long)-3l, (long)41l, (long)57l, (long)76l, (long)87l, (long)88l, (long)99l))),\
    \ (3l)) == (-4l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)121l, (long)3l, (long)4000l, (long)5l, (long)6l))), (2l)) == (0l));\n\
    \    assert(addElements((new ArrayList<Long>(Arrays.asList((long)11l, (long)21l,\
    \ (long)3l, (long)90l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\
    \ == (125l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (24l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l))),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794229
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a non-empty array array list of integers arr and\
    \ an integer k, return\n    // the sum of the elements with at most two digits\
    \ from the first k elements of arr.\n    // Example:\n    // >>> addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\n    // (24l)\n \
    \   // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n\
    \    public static long addElements(ArrayList<Long> arr, long k) {\n        long\
    \ sum = 0;\n        for (int i = 0; i < k; i++) {\n            if (arr.get(i)\
    \ < 100) {\n                sum += arr.get(i);\n            }\n        }\n   \
    \     return sum;\n    }\n    public static void main(String[] args) {\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)-2l, (long)-3l, (long)41l, (long)57l,\
    \ (long)76l, (long)87l, (long)88l, (long)99l))), (3l)) == (-4l));\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)121l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l))), (2l)) == (0l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)21l, (long)3l, (long)90l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (125l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (24l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l))),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794229
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a non-empty array array list of integers arr and\
    \ an integer k, return\n    // the sum of the elements with at most two digits\
    \ from the first k elements of arr.\n    // Example:\n    // >>> addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\n    // (24l)\n \
    \   // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n\
    \    public static long addElements(ArrayList<Long> arr, long k) {\n        return\
    \ arr.stream().filter(x -> x < 100).limit(k).mapToLong(x -> x).sum();\n    }\n\
    \    public static void main(String[] args) {\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-2l, (long)-3l, (long)41l, (long)57l, (long)76l, (long)87l, (long)88l,\
    \ (long)99l))), (3l)) == (-4l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)121l, (long)3l, (long)4000l, (long)5l, (long)6l))), (2l)) == (0l));\n\
    \    assert(addElements((new ArrayList<Long>(Arrays.asList((long)11l, (long)21l,\
    \ (long)3l, (long)90l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\
    \ == (125l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (24l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l))),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpb03goepm.java:22)\n"
  stdout: ''
  timestamp: 1659794229
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a non-empty array array list of integers arr and\
    \ an integer k, return\n    // the sum of the elements with at most two digits\
    \ from the first k elements of arr.\n    // Example:\n    // >>> addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\n    // (24l)\n \
    \   // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n\
    \    public static long addElements(ArrayList<Long> arr, long k) {\n        return\
    \ arr.stream().limit(k).filter(x -> x < 100).mapToLong(x -> x).sum();\n    }\n\
    \    public static void main(String[] args) {\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-2l, (long)-3l, (long)41l, (long)57l, (long)76l, (long)87l, (long)88l,\
    \ (long)99l))), (3l)) == (-4l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)121l, (long)3l, (long)4000l, (long)5l, (long)6l))), (2l)) == (0l));\n\
    \    assert(addElements((new ArrayList<Long>(Arrays.asList((long)11l, (long)21l,\
    \ (long)3l, (long)90l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\
    \ == (125l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (24l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l))),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794229
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a non-empty array array list of integers arr and\
    \ an integer k, return\n    // the sum of the elements with at most two digits\
    \ from the first k elements of arr.\n    // Example:\n    // >>> addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\n    // (24l)\n \
    \   // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n\
    \    public static long addElements(ArrayList<Long> arr, long k) {\n        return\
    \ arr.stream().filter(x -> x < 100).limit(k).mapToLong(x -> x).sum();\n    }\n\
    \    public static void main(String[] args) {\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-2l, (long)-3l, (long)41l, (long)57l, (long)76l, (long)87l, (long)88l,\
    \ (long)99l))), (3l)) == (-4l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)121l, (long)3l, (long)4000l, (long)5l, (long)6l))), (2l)) == (0l));\n\
    \    assert(addElements((new ArrayList<Long>(Arrays.asList((long)11l, (long)21l,\
    \ (long)3l, (long)90l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\
    \ == (125l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (24l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l))),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpb03goepm.java:22)\n"
  stdout: ''
  timestamp: 1659794229
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a non-empty array array list of integers arr and\
    \ an integer k, return\n    // the sum of the elements with at most two digits\
    \ from the first k elements of arr.\n    // Example:\n    // >>> addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\n    // (24l)\n \
    \   // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n\
    \    public static long addElements(ArrayList<Long> arr, long k) {\n        long\
    \ sum = 0;\n        for (int i = 0; i < k; i++) {\n            if (arr.get(i)\
    \ < 100) {\n                sum += arr.get(i);\n            }\n        }\n   \
    \     return sum;\n    }\n    public static void main(String[] args) {\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)-2l, (long)-3l, (long)41l, (long)57l,\
    \ (long)76l, (long)87l, (long)88l, (long)99l))), (3l)) == (-4l));\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)121l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l))), (2l)) == (0l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)21l, (long)3l, (long)90l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (125l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (24l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l))),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794229
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a non-empty array array list of integers arr and\
    \ an integer k, return\n    // the sum of the elements with at most two digits\
    \ from the first k elements of arr.\n    // Example:\n    // >>> addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\n    // (24l)\n \
    \   // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n\
    \    public static long addElements(ArrayList<Long> arr, long k) {\n        return\
    \ arr.stream().limit(k).filter(x -> x < 100).mapToLong(x -> x).sum();\n    }\n\
    \    public static void main(String[] args) {\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-2l, (long)-3l, (long)41l, (long)57l, (long)76l, (long)87l, (long)88l,\
    \ (long)99l))), (3l)) == (-4l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)121l, (long)3l, (long)4000l, (long)5l, (long)6l))), (2l)) == (0l));\n\
    \    assert(addElements((new ArrayList<Long>(Arrays.asList((long)11l, (long)21l,\
    \ (long)3l, (long)90l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\
    \ == (125l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (24l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l))),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794229
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a non-empty array array list of integers arr and\
    \ an integer k, return\n    // the sum of the elements with at most two digits\
    \ from the first k elements of arr.\n    // Example:\n    // >>> addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\n    // (24l)\n \
    \   // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n\
    \    public static long addElements(ArrayList<Long> arr, long k) {\n        long\
    \ sum = 0;\n        for (int i = 0; i < k; i++) {\n            if (arr.get(i)\
    \ < 100) {\n                sum += arr.get(i);\n            }\n        }\n   \
    \     return sum;\n    }\n    public static void main(String[] args) {\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)-2l, (long)-3l, (long)41l, (long)57l,\
    \ (long)76l, (long)87l, (long)88l, (long)99l))), (3l)) == (-4l));\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)121l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l))), (2l)) == (0l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)21l, (long)3l, (long)90l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (125l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (24l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l))),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794229
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a non-empty array array list of integers arr and\
    \ an integer k, return\n    // the sum of the elements with at most two digits\
    \ from the first k elements of arr.\n    // Example:\n    // >>> addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\n    // (24l)\n \
    \   // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n\
    \    public static long addElements(ArrayList<Long> arr, long k) {\n        long\
    \ sum = 0;\n        for (int i = 0; i < k; i++) {\n            if (arr.get(i)\
    \ < 100) {\n                sum += arr.get(i);\n            }\n        }\n   \
    \     return sum;\n    }\n    public static void main(String[] args) {\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)-2l, (long)-3l, (long)41l, (long)57l,\
    \ (long)76l, (long)87l, (long)88l, (long)99l))), (3l)) == (-4l));\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)121l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l))), (2l)) == (0l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)21l, (long)3l, (long)90l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (125l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (24l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l))),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794229
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a non-empty array array list of integers arr and\
    \ an integer k, return\n    // the sum of the elements with at most two digits\
    \ from the first k elements of arr.\n    // Example:\n    // >>> addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\n    // (24l)\n \
    \   // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n\
    \    public static long addElements(ArrayList<Long> arr, long k) {\n        return\
    \ arr.stream().filter(x -> x < 100).limit(k).mapToLong(x -> x).sum();\n    }\n\
    \    public static void main(String[] args) {\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-2l, (long)-3l, (long)41l, (long)57l, (long)76l, (long)87l, (long)88l,\
    \ (long)99l))), (3l)) == (-4l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)121l, (long)3l, (long)4000l, (long)5l, (long)6l))), (2l)) == (0l));\n\
    \    assert(addElements((new ArrayList<Long>(Arrays.asList((long)11l, (long)21l,\
    \ (long)3l, (long)90l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\
    \ == (125l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (24l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l))),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpb03goepm.java:22)\n"
  stdout: ''
  timestamp: 1659794229
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a non-empty array array list of integers arr and\
    \ an integer k, return\n    // the sum of the elements with at most two digits\
    \ from the first k elements of arr.\n    // Example:\n    // >>> addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\n    // (24l)\n \
    \   // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n\
    \    public static long addElements(ArrayList<Long> arr, long k) {\n        return\
    \ arr.stream().filter(x -> x < 100).limit(k).mapToLong(x -> x).sum();\n    }\n\
    \    public static void main(String[] args) {\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-2l, (long)-3l, (long)41l, (long)57l, (long)76l, (long)87l, (long)88l,\
    \ (long)99l))), (3l)) == (-4l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)121l, (long)3l, (long)4000l, (long)5l, (long)6l))), (2l)) == (0l));\n\
    \    assert(addElements((new ArrayList<Long>(Arrays.asList((long)11l, (long)21l,\
    \ (long)3l, (long)90l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\
    \ == (125l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (24l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l))),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpb03goepm.java:22)\n"
  stdout: ''
  timestamp: 1659794229
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a non-empty array array list of integers arr and\
    \ an integer k, return\n    // the sum of the elements with at most two digits\
    \ from the first k elements of arr.\n    // Example:\n    // >>> addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\n    // (24l)\n \
    \   // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n\
    \    public static long addElements(ArrayList<Long> arr, long k) {\n        long\
    \ sum = 0;\n        for (int i = 0; i < k; i++) {\n            long num = arr.get(i);\n\
    \            if (num < 100) {\n                sum += num;\n            }\n  \
    \      }\n        return sum;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l, (long)-2l,\
    \ (long)-3l, (long)41l, (long)57l, (long)76l, (long)87l, (long)88l, (long)99l))),\
    \ (3l)) == (-4l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)121l, (long)3l, (long)4000l, (long)5l, (long)6l))), (2l)) == (0l));\n\
    \    assert(addElements((new ArrayList<Long>(Arrays.asList((long)11l, (long)21l,\
    \ (long)3l, (long)90l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\
    \ == (125l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (24l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l))),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794229
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a non-empty array array list of integers arr and\
    \ an integer k, return\n    // the sum of the elements with at most two digits\
    \ from the first k elements of arr.\n    // Example:\n    // >>> addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\n    // (24l)\n \
    \   // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n\
    \    public static long addElements(ArrayList<Long> arr, long k) {\n        return\
    \ arr.stream().limit(k).filter(x -> x < 100).mapToLong(x -> x).sum();\n    }\n\
    \    public static void main(String[] args) {\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-2l, (long)-3l, (long)41l, (long)57l, (long)76l, (long)87l, (long)88l,\
    \ (long)99l))), (3l)) == (-4l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)121l, (long)3l, (long)4000l, (long)5l, (long)6l))), (2l)) == (0l));\n\
    \    assert(addElements((new ArrayList<Long>(Arrays.asList((long)11l, (long)21l,\
    \ (long)3l, (long)90l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\
    \ == (125l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (24l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l))),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794229
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a non-empty array array list of integers arr and\
    \ an integer k, return\n    // the sum of the elements with at most two digits\
    \ from the first k elements of arr.\n    // Example:\n    // >>> addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\n    // (24l)\n \
    \   // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n\
    \    public static long addElements(ArrayList<Long> arr, long k) {\n        long\
    \ sum = 0;\n        for (int i = 0; i < k; i++) {\n            if (arr.get(i)\
    \ < 100) {\n                sum += arr.get(i);\n            }\n        }\n   \
    \     return sum;\n    }\n    public static void main(String[] args) {\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)-2l, (long)-3l, (long)41l, (long)57l,\
    \ (long)76l, (long)87l, (long)88l, (long)99l))), (3l)) == (-4l));\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)121l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l))), (2l)) == (0l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)21l, (long)3l, (long)90l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (125l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (24l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l))),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794229
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a non-empty array array list of integers arr and\
    \ an integer k, return\n    // the sum of the elements with at most two digits\
    \ from the first k elements of arr.\n    // Example:\n    // >>> addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\n    // (24l)\n \
    \   // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n\
    \    public static long addElements(ArrayList<Long> arr, long k) {\n        long\
    \ sum = 0;\n        for (int i = 0; i < k; i++) {\n            if (arr.get(i)\
    \ < 100) {\n                sum += arr.get(i);\n            }\n        }\n   \
    \     return sum;\n    }\n    public static void main(String[] args) {\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)-2l, (long)-3l, (long)41l, (long)57l,\
    \ (long)76l, (long)87l, (long)88l, (long)99l))), (3l)) == (-4l));\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)121l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l))), (2l)) == (0l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)21l, (long)3l, (long)90l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (125l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (24l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l))),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794229
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a non-empty array array list of integers arr and\
    \ an integer k, return\n    // the sum of the elements with at most two digits\
    \ from the first k elements of arr.\n    // Example:\n    // >>> addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\n    // (24l)\n \
    \   // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n\
    \    public static long addElements(ArrayList<Long> arr, long k) {\n        return\
    \ arr.stream().limit(k).filter(x -> x < 100).reduce(0l, (x, y) -> x + y);\n  \
    \  }\n    public static void main(String[] args) {\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)-2l, (long)-3l, (long)41l, (long)57l,\
    \ (long)76l, (long)87l, (long)88l, (long)99l))), (3l)) == (-4l));\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)121l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l))), (2l)) == (0l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)21l, (long)3l, (long)90l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (125l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (24l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l))),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794229
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a non-empty array array list of integers arr and\
    \ an integer k, return\n    // the sum of the elements with at most two digits\
    \ from the first k elements of arr.\n    // Example:\n    // >>> addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\n    // (24l)\n \
    \   // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n\
    \    public static long addElements(ArrayList<Long> arr, long k) {\n        long\
    \ sum = 0;\n        for (int i = 0; i < k; i++) {\n            if (arr.get(i)\
    \ < 100) {\n                sum += arr.get(i);\n            }\n        }\n   \
    \     return sum;\n    }\n    public static void main(String[] args) {\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)-2l, (long)-3l, (long)41l, (long)57l,\
    \ (long)76l, (long)87l, (long)88l, (long)99l))), (3l)) == (-4l));\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)121l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l))), (2l)) == (0l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)21l, (long)3l, (long)90l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (125l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (24l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l))),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794229
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a non-empty array array list of integers arr and\
    \ an integer k, return\n    // the sum of the elements with at most two digits\
    \ from the first k elements of arr.\n    // Example:\n    // >>> addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\n    // (24l)\n \
    \   // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n\
    \    public static long addElements(ArrayList<Long> arr, long k) {\n        long\
    \ sum = 0;\n        for (int i = 0; i < k; i++) {\n            if (arr.get(i)\
    \ < 100) {\n                sum += arr.get(i);\n            }\n        }\n   \
    \     return sum;\n    }\n    public static void main(String[] args) {\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)-2l, (long)-3l, (long)41l, (long)57l,\
    \ (long)76l, (long)87l, (long)88l, (long)99l))), (3l)) == (-4l));\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)121l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l))), (2l)) == (0l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)21l, (long)3l, (long)90l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (125l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (24l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l))),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794229
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a non-empty array array list of integers arr and\
    \ an integer k, return\n    // the sum of the elements with at most two digits\
    \ from the first k elements of arr.\n    // Example:\n    // >>> addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\n    // (24l)\n \
    \   // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n\
    \    public static long addElements(ArrayList<Long> arr, long k) {\n        return\
    \ arr.stream().limit(k).filter(x -> x < 100).mapToLong(x -> x).sum();\n    }\n\
    \    public static void main(String[] args) {\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-2l, (long)-3l, (long)41l, (long)57l, (long)76l, (long)87l, (long)88l,\
    \ (long)99l))), (3l)) == (-4l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)121l, (long)3l, (long)4000l, (long)5l, (long)6l))), (2l)) == (0l));\n\
    \    assert(addElements((new ArrayList<Long>(Arrays.asList((long)11l, (long)21l,\
    \ (long)3l, (long)90l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\
    \ == (125l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (24l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l))),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794229
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a non-empty array array list of integers arr and\
    \ an integer k, return\n    // the sum of the elements with at most two digits\
    \ from the first k elements of arr.\n    // Example:\n    // >>> addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\n    // (24l)\n \
    \   // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n\
    \    public static long addElements(ArrayList<Long> arr, long k) {\n        return\
    \ arr.stream().filter(x -> x < 100).limit(k).reduce(0l, (x, y) -> x + y);\n  \
    \  }\n    public static void main(String[] args) {\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)-2l, (long)-3l, (long)41l, (long)57l,\
    \ (long)76l, (long)87l, (long)88l, (long)99l))), (3l)) == (-4l));\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)121l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l))), (2l)) == (0l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)21l, (long)3l, (long)90l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (125l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (24l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l))),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmscg8302.java:22)\n"
  stdout: ''
  timestamp: 1659794229
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a non-empty array array list of integers arr and\
    \ an integer k, return\n    // the sum of the elements with at most two digits\
    \ from the first k elements of arr.\n    // Example:\n    // >>> addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\n    // (24l)\n \
    \   // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n\
    \    public static long addElements(ArrayList<Long> arr, long k) {\n        return\
    \ arr.stream().limit(k).filter(x -> x < 100).reduce(0l, (x, y) -> x + y);\n  \
    \  }\n    public static void main(String[] args) {\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)-2l, (long)-3l, (long)41l, (long)57l,\
    \ (long)76l, (long)87l, (long)88l, (long)99l))), (3l)) == (-4l));\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)121l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l))), (2l)) == (0l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)21l, (long)3l, (long)90l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (125l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (24l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l))),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794229
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a non-empty array array list of integers arr and\
    \ an integer k, return\n    // the sum of the elements with at most two digits\
    \ from the first k elements of arr.\n    // Example:\n    // >>> addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\n    // (24l)\n \
    \   // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n\
    \    public static long addElements(ArrayList<Long> arr, long k) {\n        return\
    \ arr.stream().limit(k).filter(x -> x < 100).mapToLong(x -> x).sum();\n    }\n\
    \    public static void main(String[] args) {\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-2l, (long)-3l, (long)41l, (long)57l, (long)76l, (long)87l, (long)88l,\
    \ (long)99l))), (3l)) == (-4l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)121l, (long)3l, (long)4000l, (long)5l, (long)6l))), (2l)) == (0l));\n\
    \    assert(addElements((new ArrayList<Long>(Arrays.asList((long)11l, (long)21l,\
    \ (long)3l, (long)90l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\
    \ == (125l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (24l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l))),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794229
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a non-empty array array list of integers arr and\
    \ an integer k, return\n    // the sum of the elements with at most two digits\
    \ from the first k elements of arr.\n    // Example:\n    // >>> addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\n    // (24l)\n \
    \   // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n\
    \    public static long addElements(ArrayList<Long> arr, long k) {\n        long\
    \ sum = 0;\n        for (int i = 0; i < k; i++) {\n            if (arr.get(i)\
    \ < 100) {\n                sum += arr.get(i);\n            }\n        }\n   \
    \     return sum;\n    }\n    public static void main(String[] args) {\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)-2l, (long)-3l, (long)41l, (long)57l,\
    \ (long)76l, (long)87l, (long)88l, (long)99l))), (3l)) == (-4l));\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)121l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l))), (2l)) == (0l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)21l, (long)3l, (long)90l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (125l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (24l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l))),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794229
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a non-empty array array list of integers arr and\
    \ an integer k, return\n    // the sum of the elements with at most two digits\
    \ from the first k elements of arr.\n    // Example:\n    // >>> addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\n    // (24l)\n \
    \   // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n\
    \    public static long addElements(ArrayList<Long> arr, long k) {\n        long\
    \ sum = 0l;\n        for (int i = 0; i < k; i++) {\n            long num = arr.get(i);\n\
    \            if (num < 100) {\n                sum += num;\n            }\n  \
    \      }\n        return sum;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l, (long)-2l,\
    \ (long)-3l, (long)41l, (long)57l, (long)76l, (long)87l, (long)88l, (long)99l))),\
    \ (3l)) == (-4l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)121l, (long)3l, (long)4000l, (long)5l, (long)6l))), (2l)) == (0l));\n\
    \    assert(addElements((new ArrayList<Long>(Arrays.asList((long)11l, (long)21l,\
    \ (long)3l, (long)90l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\
    \ == (125l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (24l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l))),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794229
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a non-empty array array list of integers arr and\
    \ an integer k, return\n    // the sum of the elements with at most two digits\
    \ from the first k elements of arr.\n    // Example:\n    // >>> addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\n    // (24l)\n \
    \   // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n\
    \    public static long addElements(ArrayList<Long> arr, long k) {\n        return\
    \ arr.stream().limit(k).filter(x -> x < 100).reduce(0l, (x, y) -> x + y);\n  \
    \  }\n    public static void main(String[] args) {\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)-2l, (long)-3l, (long)41l, (long)57l,\
    \ (long)76l, (long)87l, (long)88l, (long)99l))), (3l)) == (-4l));\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)121l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l))), (2l)) == (0l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)21l, (long)3l, (long)90l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (125l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (24l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l))),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794229
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a non-empty array array list of integers arr and\
    \ an integer k, return\n    // the sum of the elements with at most two digits\
    \ from the first k elements of arr.\n    // Example:\n    // >>> addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\n    // (24l)\n \
    \   // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n\
    \    public static long addElements(ArrayList<Long> arr, long k) {\n        long\
    \ sum = 0;\n        for (int i = 0; i < k; i++) {\n            long num = arr.get(i);\n\
    \            if (num < 100) {\n                sum += num;\n            }\n  \
    \      }\n        return sum;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l, (long)-2l,\
    \ (long)-3l, (long)41l, (long)57l, (long)76l, (long)87l, (long)88l, (long)99l))),\
    \ (3l)) == (-4l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)121l, (long)3l, (long)4000l, (long)5l, (long)6l))), (2l)) == (0l));\n\
    \    assert(addElements((new ArrayList<Long>(Arrays.asList((long)11l, (long)21l,\
    \ (long)3l, (long)90l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\
    \ == (125l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (24l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l))),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794229
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a non-empty array array list of integers arr and\
    \ an integer k, return\n    // the sum of the elements with at most two digits\
    \ from the first k elements of arr.\n    // Example:\n    // >>> addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\n    // (24l)\n \
    \   // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n\
    \    public static long addElements(ArrayList<Long> arr, long k) {\n        return\
    \ arr.stream().limit(k).filter(x -> x < 100).mapToLong(x -> x).sum();\n    }\n\
    \    public static void main(String[] args) {\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-2l, (long)-3l, (long)41l, (long)57l, (long)76l, (long)87l, (long)88l,\
    \ (long)99l))), (3l)) == (-4l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)121l, (long)3l, (long)4000l, (long)5l, (long)6l))), (2l)) == (0l));\n\
    \    assert(addElements((new ArrayList<Long>(Arrays.asList((long)11l, (long)21l,\
    \ (long)3l, (long)90l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\
    \ == (125l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (24l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l))),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794229
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a non-empty array array list of integers arr and\
    \ an integer k, return\n    // the sum of the elements with at most two digits\
    \ from the first k elements of arr.\n    // Example:\n    // >>> addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\n    // (24l)\n \
    \   // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n\
    \    public static long addElements(ArrayList<Long> arr, long k) {\n        return\
    \ arr.stream().limit(k).filter(x -> x < 100).reduce(0l, (x, y) -> x + y);\n  \
    \  }\n    public static void main(String[] args) {\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)-2l, (long)-3l, (long)41l, (long)57l,\
    \ (long)76l, (long)87l, (long)88l, (long)99l))), (3l)) == (-4l));\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)121l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l))), (2l)) == (0l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)21l, (long)3l, (long)90l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (125l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (24l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l))),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794229
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a non-empty array array list of integers arr and\
    \ an integer k, return\n    // the sum of the elements with at most two digits\
    \ from the first k elements of arr.\n    // Example:\n    // >>> addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\n    // (24l)\n \
    \   // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n\
    \    public static long addElements(ArrayList<Long> arr, long k) {\n        long\
    \ result = 0;\n        for (int i = 0; i < k; i++) {\n            long num = arr.get(i);\n\
    \            if (num < 100) {\n                result += num;\n            }\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-2l, (long)-3l, (long)41l, (long)57l, (long)76l, (long)87l, (long)88l,\
    \ (long)99l))), (3l)) == (-4l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)121l, (long)3l, (long)4000l, (long)5l, (long)6l))), (2l)) == (0l));\n\
    \    assert(addElements((new ArrayList<Long>(Arrays.asList((long)11l, (long)21l,\
    \ (long)3l, (long)90l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\
    \ == (125l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (24l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l))),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794229
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a non-empty array array list of integers arr and\
    \ an integer k, return\n    // the sum of the elements with at most two digits\
    \ from the first k elements of arr.\n    // Example:\n    // >>> addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\n    // (24l)\n \
    \   // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n\
    \    public static long addElements(ArrayList<Long> arr, long k) {\n        long\
    \ sum = 0;\n        for (int i = 0; i < k; i++) {\n            if (arr.get(i)\
    \ < 100) {\n                sum += arr.get(i);\n            }\n        }\n   \
    \     return sum;\n    }\n    public static void main(String[] args) {\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)-2l, (long)-3l, (long)41l, (long)57l,\
    \ (long)76l, (long)87l, (long)88l, (long)99l))), (3l)) == (-4l));\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)121l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l))), (2l)) == (0l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)21l, (long)3l, (long)90l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (125l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (24l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l))),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794229
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a non-empty array array list of integers arr and\
    \ an integer k, return\n    // the sum of the elements with at most two digits\
    \ from the first k elements of arr.\n    // Example:\n    // >>> addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\n    // (24l)\n \
    \   // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n\
    \    public static long addElements(ArrayList<Long> arr, long k) {\n        long\
    \ sum = 0;\n        for (int i = 0; i < k; i++) {\n            if (arr.get(i)\
    \ < 100) {\n                sum += arr.get(i);\n            }\n        }\n   \
    \     return sum;\n    }\n    public static void main(String[] args) {\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)-2l, (long)-3l, (long)41l, (long)57l,\
    \ (long)76l, (long)87l, (long)88l, (long)99l))), (3l)) == (-4l));\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)121l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l))), (2l)) == (0l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)21l, (long)3l, (long)90l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (125l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (24l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l))),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794229
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a non-empty array array list of integers arr and\
    \ an integer k, return\n    // the sum of the elements with at most two digits\
    \ from the first k elements of arr.\n    // Example:\n    // >>> addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\n    // (24l)\n \
    \   // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n\
    \    public static long addElements(ArrayList<Long> arr, long k) {\n        long\
    \ sum = 0;\n        for (int i = 0; i < k; i++) {\n            if (arr.get(i)\
    \ < 100) {\n                sum += arr.get(i);\n            }\n        }\n   \
    \     return sum;\n    }\n    public static void main(String[] args) {\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)-2l, (long)-3l, (long)41l, (long)57l,\
    \ (long)76l, (long)87l, (long)88l, (long)99l))), (3l)) == (-4l));\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)121l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l))), (2l)) == (0l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)21l, (long)3l, (long)90l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (125l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (24l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l))),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794229
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a non-empty array array list of integers arr and\
    \ an integer k, return\n    // the sum of the elements with at most two digits\
    \ from the first k elements of arr.\n    // Example:\n    // >>> addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\n    // (24l)\n \
    \   // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n\
    \    public static long addElements(ArrayList<Long> arr, long k) {\n        long\
    \ sum = 0;\n        for (int i = 0; i < k; i++) {\n            if (arr.get(i)\
    \ < 100) {\n                sum += arr.get(i);\n            }\n        }\n   \
    \     return sum;\n    }\n    public static void main(String[] args) {\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)-2l, (long)-3l, (long)41l, (long)57l,\
    \ (long)76l, (long)87l, (long)88l, (long)99l))), (3l)) == (-4l));\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)121l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l))), (2l)) == (0l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)21l, (long)3l, (long)90l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (125l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (24l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l))),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794229
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a non-empty array array list of integers arr and\
    \ an integer k, return\n    // the sum of the elements with at most two digits\
    \ from the first k elements of arr.\n    // Example:\n    // >>> addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\n    // (24l)\n \
    \   // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n\
    \    public static long addElements(ArrayList<Long> arr, long k) {\n        long\
    \ sum = 0;\n        for (int i = 0; i < k; i++) {\n            if (arr.get(i)\
    \ < 100) {\n                sum += arr.get(i);\n            }\n        }\n   \
    \     return sum;\n    }\n    public static void main(String[] args) {\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)-2l, (long)-3l, (long)41l, (long)57l,\
    \ (long)76l, (long)87l, (long)88l, (long)99l))), (3l)) == (-4l));\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)121l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l))), (2l)) == (0l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)21l, (long)3l, (long)90l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (125l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (24l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l))),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794229
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a non-empty array array list of integers arr and\
    \ an integer k, return\n    // the sum of the elements with at most two digits\
    \ from the first k elements of arr.\n    // Example:\n    // >>> addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\n    // (24l)\n \
    \   // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n\
    \    public static long addElements(ArrayList<Long> arr, long k) {\n        return\
    \ arr.stream().limit(k).filter(x -> x < 100).reduce(0l, (a, b) -> a + b);\n  \
    \  }\n    public static void main(String[] args) {\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)-2l, (long)-3l, (long)41l, (long)57l,\
    \ (long)76l, (long)87l, (long)88l, (long)99l))), (3l)) == (-4l));\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)121l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l))), (2l)) == (0l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)21l, (long)3l, (long)90l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (125l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (24l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l))),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794229
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a non-empty array array list of integers arr and\
    \ an integer k, return\n    // the sum of the elements with at most two digits\
    \ from the first k elements of arr.\n    // Example:\n    // >>> addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\n    // (24l)\n \
    \   // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n\
    \    public static long addElements(ArrayList<Long> arr, long k) {\n        return\
    \ arr.stream().limit(k).filter(x -> x < 100).mapToLong(x -> x).sum();\n    }\n\
    \    public static void main(String[] args) {\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-2l, (long)-3l, (long)41l, (long)57l, (long)76l, (long)87l, (long)88l,\
    \ (long)99l))), (3l)) == (-4l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)121l, (long)3l, (long)4000l, (long)5l, (long)6l))), (2l)) == (0l));\n\
    \    assert(addElements((new ArrayList<Long>(Arrays.asList((long)11l, (long)21l,\
    \ (long)3l, (long)90l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\
    \ == (125l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (24l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l))),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794229
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a non-empty array array list of integers arr and\
    \ an integer k, return\n    // the sum of the elements with at most two digits\
    \ from the first k elements of arr.\n    // Example:\n    // >>> addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\n    // (24l)\n \
    \   // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n\
    \    public static long addElements(ArrayList<Long> arr, long k) {\n        long\
    \ sum = 0;\n        for (int i = 0; i < k; i++) {\n            long num = arr.get(i);\n\
    \            if (num < 100) {\n                sum += num;\n            }\n  \
    \      }\n        return sum;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l, (long)-2l,\
    \ (long)-3l, (long)41l, (long)57l, (long)76l, (long)87l, (long)88l, (long)99l))),\
    \ (3l)) == (-4l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)121l, (long)3l, (long)4000l, (long)5l, (long)6l))), (2l)) == (0l));\n\
    \    assert(addElements((new ArrayList<Long>(Arrays.asList((long)11l, (long)21l,\
    \ (long)3l, (long)90l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\
    \ == (125l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (24l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l))),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794229
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a non-empty array array list of integers arr and\
    \ an integer k, return\n    // the sum of the elements with at most two digits\
    \ from the first k elements of arr.\n    // Example:\n    // >>> addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\n    // (24l)\n \
    \   // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n\
    \    public static long addElements(ArrayList<Long> arr, long k) {\n        return\
    \ 0;\n    }\n    public static void main(String[] args) {\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)-2l, (long)-3l, (long)41l, (long)57l,\
    \ (long)76l, (long)87l, (long)88l, (long)99l))), (3l)) == (-4l));\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)121l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l))), (2l)) == (0l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)21l, (long)3l, (long)90l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (125l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (24l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l))),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_7iwjals.java:21)\n"
  stdout: ''
  timestamp: 1659794229
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a non-empty array array list of integers arr and\
    \ an integer k, return\n    // the sum of the elements with at most two digits\
    \ from the first k elements of arr.\n    // Example:\n    // >>> addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\n    // (24l)\n \
    \   // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n\
    \    public static long addElements(ArrayList<Long> arr, long k) {\n        long\
    \ sum = 0;\n        for (int i = 0; i < k; i++) {\n            long num = arr.get(i);\n\
    \            if (num < 100) {\n                sum += num;\n            }\n  \
    \      }\n        return sum;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l, (long)-2l,\
    \ (long)-3l, (long)41l, (long)57l, (long)76l, (long)87l, (long)88l, (long)99l))),\
    \ (3l)) == (-4l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)121l, (long)3l, (long)4000l, (long)5l, (long)6l))), (2l)) == (0l));\n\
    \    assert(addElements((new ArrayList<Long>(Arrays.asList((long)11l, (long)21l,\
    \ (long)3l, (long)90l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\
    \ == (125l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (24l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l))),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794229
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a non-empty array array list of integers arr and\
    \ an integer k, return\n    // the sum of the elements with at most two digits\
    \ from the first k elements of arr.\n    // Example:\n    // >>> addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\n    // (24l)\n \
    \   // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n\
    \    public static long addElements(ArrayList<Long> arr, long k) {\n        return\
    \ arr.stream().limit(k).filter(x -> x < 100).reduce(0l, (x, y) -> x + y);\n  \
    \  }\n    public static void main(String[] args) {\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)-2l, (long)-3l, (long)41l, (long)57l,\
    \ (long)76l, (long)87l, (long)88l, (long)99l))), (3l)) == (-4l));\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)121l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l))), (2l)) == (0l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)21l, (long)3l, (long)90l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (125l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (24l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l))),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794229
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a non-empty array array list of integers arr and\
    \ an integer k, return\n    // the sum of the elements with at most two digits\
    \ from the first k elements of arr.\n    // Example:\n    // >>> addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\n    // (24l)\n \
    \   // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n\
    \    public static long addElements(ArrayList<Long> arr, long k) {\n        long\
    \ sum = 0;\n        for (int i = 0; i < k; i++) {\n            if (arr.get(i)\
    \ < 100) {\n                sum += arr.get(i);\n            }\n        }\n   \
    \     return sum;\n    }\n    public static void main(String[] args) {\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)-2l, (long)-3l, (long)41l, (long)57l,\
    \ (long)76l, (long)87l, (long)88l, (long)99l))), (3l)) == (-4l));\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)121l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l))), (2l)) == (0l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)21l, (long)3l, (long)90l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (125l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (24l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l))),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794229
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a non-empty array array list of integers arr and\
    \ an integer k, return\n    // the sum of the elements with at most two digits\
    \ from the first k elements of arr.\n    // Example:\n    // >>> addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\n    // (24l)\n \
    \   // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n\
    \    public static long addElements(ArrayList<Long> arr, long k) {\n        return\
    \ arr.stream().limit(k).filter(x -> x < 100).mapToLong(x -> x).sum();\n    }\n\
    \    public static void main(String[] args) {\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-2l, (long)-3l, (long)41l, (long)57l, (long)76l, (long)87l, (long)88l,\
    \ (long)99l))), (3l)) == (-4l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)121l, (long)3l, (long)4000l, (long)5l, (long)6l))), (2l)) == (0l));\n\
    \    assert(addElements((new ArrayList<Long>(Arrays.asList((long)11l, (long)21l,\
    \ (long)3l, (long)90l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\
    \ == (125l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (24l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l))),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794229
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a non-empty array array list of integers arr and\
    \ an integer k, return\n    // the sum of the elements with at most two digits\
    \ from the first k elements of arr.\n    // Example:\n    // >>> addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\n    // (24l)\n \
    \   // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n\
    \    public static long addElements(ArrayList<Long> arr, long k) {\n        return\
    \ arr.stream().limit(k).filter(x -> x < 100).reduce(0l, (x, y) -> x + y);\n  \
    \  }\n    public static void main(String[] args) {\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)-2l, (long)-3l, (long)41l, (long)57l,\
    \ (long)76l, (long)87l, (long)88l, (long)99l))), (3l)) == (-4l));\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)121l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l))), (2l)) == (0l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)21l, (long)3l, (long)90l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (125l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (24l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l))),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794229
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a non-empty array array list of integers arr and\
    \ an integer k, return\n    // the sum of the elements with at most two digits\
    \ from the first k elements of arr.\n    // Example:\n    // >>> addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\n    // (24l)\n \
    \   // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n\
    \    public static long addElements(ArrayList<Long> arr, long k) {\n        return\
    \ arr.stream().limit(k).filter(x -> x < 100).reduce(0l, (x, y) -> x + y);\n  \
    \  }\n    public static void main(String[] args) {\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)-2l, (long)-3l, (long)41l, (long)57l,\
    \ (long)76l, (long)87l, (long)88l, (long)99l))), (3l)) == (-4l));\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)121l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l))), (2l)) == (0l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)21l, (long)3l, (long)90l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (125l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (24l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l))),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794229
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a non-empty array array list of integers arr and\
    \ an integer k, return\n    // the sum of the elements with at most two digits\
    \ from the first k elements of arr.\n    // Example:\n    // >>> addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\n    // (24l)\n \
    \   // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n\
    \    public static long addElements(ArrayList<Long> arr, long k) {\n        //\
    \ Your code here\n        return 0;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-2l, (long)-3l, (long)41l, (long)57l, (long)76l, (long)87l, (long)88l,\
    \ (long)99l))), (3l)) == (-4l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)121l, (long)3l, (long)4000l, (long)5l, (long)6l))), (2l)) == (0l));\n\
    \    assert(addElements((new ArrayList<Long>(Arrays.asList((long)11l, (long)21l,\
    \ (long)3l, (long)90l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\
    \ == (125l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (24l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l))),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphp3hm0ls.java:22)\n"
  stdout: ''
  timestamp: 1659794229
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a non-empty array array list of integers arr and\
    \ an integer k, return\n    // the sum of the elements with at most two digits\
    \ from the first k elements of arr.\n    // Example:\n    // >>> addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\n    // (24l)\n \
    \   // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n\
    \    public static long addElements(ArrayList<Long> arr, long k) {\n        return\
    \ arr.stream().limit(k).filter(x -> x < 100).mapToLong(x -> x).sum();\n    }\n\
    \    public static void main(String[] args) {\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-2l, (long)-3l, (long)41l, (long)57l, (long)76l, (long)87l, (long)88l,\
    \ (long)99l))), (3l)) == (-4l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)121l, (long)3l, (long)4000l, (long)5l, (long)6l))), (2l)) == (0l));\n\
    \    assert(addElements((new ArrayList<Long>(Arrays.asList((long)11l, (long)21l,\
    \ (long)3l, (long)90l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\
    \ == (125l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (24l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l))),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794229
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a non-empty array array list of integers arr and\
    \ an integer k, return\n    // the sum of the elements with at most two digits\
    \ from the first k elements of arr.\n    // Example:\n    // >>> addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\n    // (24l)\n \
    \   // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n\
    \    public static long addElements(ArrayList<Long> arr, long k) {\n        long\
    \ sum = 0;\n        for (int i = 0; i < k; i++) {\n            if (arr.get(i)\
    \ < 100) {\n                sum += arr.get(i);\n            }\n        }\n   \
    \     return sum;\n    }\n    public static void main(String[] args) {\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)-2l, (long)-3l, (long)41l, (long)57l,\
    \ (long)76l, (long)87l, (long)88l, (long)99l))), (3l)) == (-4l));\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)121l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l))), (2l)) == (0l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)21l, (long)3l, (long)90l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (125l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (24l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l))),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794229
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a non-empty array array list of integers arr and\
    \ an integer k, return\n    // the sum of the elements with at most two digits\
    \ from the first k elements of arr.\n    // Example:\n    // >>> addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\n    // (24l)\n \
    \   // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n\
    \    public static long addElements(ArrayList<Long> arr, long k) {\n        long\
    \ sum = 0;\n        for (int i = 0; i < k; i++) {\n            if (arr.get(i)\
    \ < 100) {\n                sum += arr.get(i);\n            }\n        }\n   \
    \     return sum;\n    }\n    public static void main(String[] args) {\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)-2l, (long)-3l, (long)41l, (long)57l,\
    \ (long)76l, (long)87l, (long)88l, (long)99l))), (3l)) == (-4l));\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)121l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l))), (2l)) == (0l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)21l, (long)3l, (long)90l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (125l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (24l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l))),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794229
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a non-empty array array list of integers arr and\
    \ an integer k, return\n    // the sum of the elements with at most two digits\
    \ from the first k elements of arr.\n    // Example:\n    // >>> addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\n    // (24l)\n \
    \   // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n\
    \    public static long addElements(ArrayList<Long> arr, long k) {\n        long\
    \ sum = 0;\n        for (int i = 0; i < k; i++) {\n            if (arr.get(i)\
    \ < 100) {\n                sum += arr.get(i);\n            }\n        }\n   \
    \     return sum;\n    }\n    public static void main(String[] args) {\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)-2l, (long)-3l, (long)41l, (long)57l,\
    \ (long)76l, (long)87l, (long)88l, (long)99l))), (3l)) == (-4l));\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)121l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l))), (2l)) == (0l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)21l, (long)3l, (long)90l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (125l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (24l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l))),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794229
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a non-empty array array list of integers arr and\
    \ an integer k, return\n    // the sum of the elements with at most two digits\
    \ from the first k elements of arr.\n    // Example:\n    // >>> addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\n    // (24l)\n \
    \   // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n\
    \    public static long addElements(ArrayList<Long> arr, long k) {\n        long\
    \ sum = 0;\n        for (int i = 0; i < k; i++) {\n            long num = arr.get(i);\n\
    \            if (num < 100) {\n                sum += num;\n            }\n  \
    \      }\n        return sum;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l, (long)-2l,\
    \ (long)-3l, (long)41l, (long)57l, (long)76l, (long)87l, (long)88l, (long)99l))),\
    \ (3l)) == (-4l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)121l, (long)3l, (long)4000l, (long)5l, (long)6l))), (2l)) == (0l));\n\
    \    assert(addElements((new ArrayList<Long>(Arrays.asList((long)11l, (long)21l,\
    \ (long)3l, (long)90l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\
    \ == (125l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (24l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l))),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794229
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a non-empty array array list of integers arr and\
    \ an integer k, return\n    // the sum of the elements with at most two digits\
    \ from the first k elements of arr.\n    // Example:\n    // >>> addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\n    // (24l)\n \
    \   // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n\
    \    public static long addElements(ArrayList<Long> arr, long k) {\n        long\
    \ sum = 0;\n        for (int i = 0; i < k; i++) {\n            long num = arr.get(i);\n\
    \            if (num < 100) {\n                sum += num;\n            }\n  \
    \      }\n        return sum;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l, (long)-2l,\
    \ (long)-3l, (long)41l, (long)57l, (long)76l, (long)87l, (long)88l, (long)99l))),\
    \ (3l)) == (-4l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)121l, (long)3l, (long)4000l, (long)5l, (long)6l))), (2l)) == (0l));\n\
    \    assert(addElements((new ArrayList<Long>(Arrays.asList((long)11l, (long)21l,\
    \ (long)3l, (long)90l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\
    \ == (125l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (24l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l))),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794229
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a non-empty array array list of integers arr and\
    \ an integer k, return\n    // the sum of the elements with at most two digits\
    \ from the first k elements of arr.\n    // Example:\n    // >>> addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\n    // (24l)\n \
    \   // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n\
    \    public static long addElements(ArrayList<Long> arr, long k) {\n        long\
    \ sum = 0;\n        for (int i = 0; i < k; i++) {\n            long num = arr.get(i);\n\
    \            if (num < 100) {\n                sum += num;\n            }\n  \
    \      }\n        return sum;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l, (long)-2l,\
    \ (long)-3l, (long)41l, (long)57l, (long)76l, (long)87l, (long)88l, (long)99l))),\
    \ (3l)) == (-4l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)121l, (long)3l, (long)4000l, (long)5l, (long)6l))), (2l)) == (0l));\n\
    \    assert(addElements((new ArrayList<Long>(Arrays.asList((long)11l, (long)21l,\
    \ (long)3l, (long)90l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\
    \ == (125l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (24l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l))),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794229
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a non-empty array array list of integers arr and\
    \ an integer k, return\n    // the sum of the elements with at most two digits\
    \ from the first k elements of arr.\n    // Example:\n    // >>> addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\n    // (24l)\n \
    \   // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n\
    \    public static long addElements(ArrayList<Long> arr, long k) {\n        long\
    \ sum = 0;\n        for (int i = 0; i < k; i++) {\n            if (arr.get(i)\
    \ < 100) {\n                sum += arr.get(i);\n            }\n        }\n   \
    \     return sum;\n    }\n    public static void main(String[] args) {\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)-2l, (long)-3l, (long)41l, (long)57l,\
    \ (long)76l, (long)87l, (long)88l, (long)99l))), (3l)) == (-4l));\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)121l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l))), (2l)) == (0l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)21l, (long)3l, (long)90l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (125l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (24l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l))),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794229
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a non-empty array array list of integers arr and\
    \ an integer k, return\n    // the sum of the elements with at most two digits\
    \ from the first k elements of arr.\n    // Example:\n    // >>> addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\n    // (24l)\n \
    \   // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n\
    \    public static long addElements(ArrayList<Long> arr, long k) {\n        long\
    \ sum = 0;\n        for (int i = 0; i < k; i++) {\n            if (arr.get(i)\
    \ < 100) {\n                sum += arr.get(i);\n            }\n        }\n   \
    \     return sum;\n    }\n    public static void main(String[] args) {\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)-2l, (long)-3l, (long)41l, (long)57l,\
    \ (long)76l, (long)87l, (long)88l, (long)99l))), (3l)) == (-4l));\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)121l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l))), (2l)) == (0l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)21l, (long)3l, (long)90l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (125l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (24l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l))),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794229
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a non-empty array array list of integers arr and\
    \ an integer k, return\n    // the sum of the elements with at most two digits\
    \ from the first k elements of arr.\n    // Example:\n    // >>> addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\n    // (24l)\n \
    \   // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n\
    \    public static long addElements(ArrayList<Long> arr, long k) {\n        long\
    \ sum = 0;\n        for (int i = 0; i < k; i++) {\n            long num = arr.get(i);\n\
    \            if (num < 100) {\n                sum += num;\n            }\n  \
    \      }\n        return sum;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l, (long)-2l,\
    \ (long)-3l, (long)41l, (long)57l, (long)76l, (long)87l, (long)88l, (long)99l))),\
    \ (3l)) == (-4l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)121l, (long)3l, (long)4000l, (long)5l, (long)6l))), (2l)) == (0l));\n\
    \    assert(addElements((new ArrayList<Long>(Arrays.asList((long)11l, (long)21l,\
    \ (long)3l, (long)90l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\
    \ == (125l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (24l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l))),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794229
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a non-empty array array list of integers arr and\
    \ an integer k, return\n    // the sum of the elements with at most two digits\
    \ from the first k elements of arr.\n    // Example:\n    // >>> addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\n    // (24l)\n \
    \   // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n\
    \    public static long addElements(ArrayList<Long> arr, long k) {\n        long\
    \ sum = 0;\n        for (int i = 0; i < k; i++) {\n            if (arr.get(i)\
    \ < 100) {\n                sum += arr.get(i);\n            }\n        }\n   \
    \     return sum;\n    }\n    public static void main(String[] args) {\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)-2l, (long)-3l, (long)41l, (long)57l,\
    \ (long)76l, (long)87l, (long)88l, (long)99l))), (3l)) == (-4l));\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)121l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l))), (2l)) == (0l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)21l, (long)3l, (long)90l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (125l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (24l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l))),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794229
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a non-empty array array list of integers arr and\
    \ an integer k, return\n    // the sum of the elements with at most two digits\
    \ from the first k elements of arr.\n    // Example:\n    // >>> addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\n    // (24l)\n \
    \   // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n\
    \    public static long addElements(ArrayList<Long> arr, long k) {\n        long\
    \ sum = 0;\n        for (int i = 0; i < k; i++) {\n            if (arr.get(i)\
    \ < 100) {\n                sum += arr.get(i);\n            }\n        }\n   \
    \     return sum;\n    }\n    public static void main(String[] args) {\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)-2l, (long)-3l, (long)41l, (long)57l,\
    \ (long)76l, (long)87l, (long)88l, (long)99l))), (3l)) == (-4l));\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)121l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l))), (2l)) == (0l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)21l, (long)3l, (long)90l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (125l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (24l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l))),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794229
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a non-empty array array list of integers arr and\
    \ an integer k, return\n    // the sum of the elements with at most two digits\
    \ from the first k elements of arr.\n    // Example:\n    // >>> addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\n    // (24l)\n \
    \   // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n\
    \    public static long addElements(ArrayList<Long> arr, long k) {\n        return\
    \ arr.stream().limit(k).filter(x -> x < 100).mapToLong(x -> x).sum();\n    }\n\
    \    public static void main(String[] args) {\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-2l, (long)-3l, (long)41l, (long)57l, (long)76l, (long)87l, (long)88l,\
    \ (long)99l))), (3l)) == (-4l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)121l, (long)3l, (long)4000l, (long)5l, (long)6l))), (2l)) == (0l));\n\
    \    assert(addElements((new ArrayList<Long>(Arrays.asList((long)11l, (long)21l,\
    \ (long)3l, (long)90l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\
    \ == (125l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (24l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l))),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794229
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a non-empty array array list of integers arr and\
    \ an integer k, return\n    // the sum of the elements with at most two digits\
    \ from the first k elements of arr.\n    // Example:\n    // >>> addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\n    // (24l)\n \
    \   // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n\
    \    public static long addElements(ArrayList<Long> arr, long k) {\n        long\
    \ sum = 0;\n        for (int i = 0; i < k; i++) {\n            if (arr.get(i)\
    \ < 100) {\n                sum += arr.get(i);\n            }\n        }\n   \
    \     return sum;\n    }\n    public static void main(String[] args) {\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)-2l, (long)-3l, (long)41l, (long)57l,\
    \ (long)76l, (long)87l, (long)88l, (long)99l))), (3l)) == (-4l));\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)121l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l))), (2l)) == (0l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)21l, (long)3l, (long)90l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (125l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (24l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l))),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794229
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a non-empty array array list of integers arr and\
    \ an integer k, return\n    // the sum of the elements with at most two digits\
    \ from the first k elements of arr.\n    // Example:\n    // >>> addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\n    // (24l)\n \
    \   // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n\
    \    public static long addElements(ArrayList<Long> arr, long k) {\n        return\
    \ arr.stream().limit(k).filter(x -> x < 100).reduce(0l, (x, y) -> x + y);\n  \
    \  }\n    public static void main(String[] args) {\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)-2l, (long)-3l, (long)41l, (long)57l,\
    \ (long)76l, (long)87l, (long)88l, (long)99l))), (3l)) == (-4l));\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)121l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l))), (2l)) == (0l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)21l, (long)3l, (long)90l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (125l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (24l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l))),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794229
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a non-empty array array list of integers arr and\
    \ an integer k, return\n    // the sum of the elements with at most two digits\
    \ from the first k elements of arr.\n    // Example:\n    // >>> addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\n    // (24l)\n \
    \   // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n\
    \    public static long addElements(ArrayList<Long> arr, long k) {\n        long\
    \ sum = 0;\n        for (int i = 0; i < k; i++) {\n            if (arr.get(i)\
    \ < 100) {\n                sum += arr.get(i);\n            }\n        }\n   \
    \     return sum;\n    }\n    public static void main(String[] args) {\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)-2l, (long)-3l, (long)41l, (long)57l,\
    \ (long)76l, (long)87l, (long)88l, (long)99l))), (3l)) == (-4l));\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)121l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l))), (2l)) == (0l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)21l, (long)3l, (long)90l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (125l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (24l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l))),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794229
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a non-empty array array list of integers arr and\
    \ an integer k, return\n    // the sum of the elements with at most two digits\
    \ from the first k elements of arr.\n    // Example:\n    // >>> addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\n    // (24l)\n \
    \   // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n\
    \    public static long addElements(ArrayList<Long> arr, long k) {\n        long\
    \ sum = 0;\n        for (int i = 0; i < k; i++) {\n            long num = arr.get(i);\n\
    \            if (num < 100) {\n                sum += num;\n            }\n  \
    \      }\n        return sum;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l, (long)-2l,\
    \ (long)-3l, (long)41l, (long)57l, (long)76l, (long)87l, (long)88l, (long)99l))),\
    \ (3l)) == (-4l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)121l, (long)3l, (long)4000l, (long)5l, (long)6l))), (2l)) == (0l));\n\
    \    assert(addElements((new ArrayList<Long>(Arrays.asList((long)11l, (long)21l,\
    \ (long)3l, (long)90l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\
    \ == (125l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (24l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l))),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794229
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a non-empty array array list of integers arr and\
    \ an integer k, return\n    // the sum of the elements with at most two digits\
    \ from the first k elements of arr.\n    // Example:\n    // >>> addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\n    // (24l)\n \
    \   // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n\
    \    public static long addElements(ArrayList<Long> arr, long k) {\n        return\
    \ arr.stream().limit(k).filter(x -> x < 100).reduce(0l, (x, y) -> x + y);\n  \
    \  }\n    public static void main(String[] args) {\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)-2l, (long)-3l, (long)41l, (long)57l,\
    \ (long)76l, (long)87l, (long)88l, (long)99l))), (3l)) == (-4l));\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)121l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l))), (2l)) == (0l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)21l, (long)3l, (long)90l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (125l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (24l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l))),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794229
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a non-empty array array list of integers arr and\
    \ an integer k, return\n    // the sum of the elements with at most two digits\
    \ from the first k elements of arr.\n    // Example:\n    // >>> addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\n    // (24l)\n \
    \   // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n\
    \    public static long addElements(ArrayList<Long> arr, long k) {\n        return\
    \ arr.stream().limit(k).filter(x -> x < 100).mapToLong(x -> x).sum();\n    }\n\
    \    public static void main(String[] args) {\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-2l, (long)-3l, (long)41l, (long)57l, (long)76l, (long)87l, (long)88l,\
    \ (long)99l))), (3l)) == (-4l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)121l, (long)3l, (long)4000l, (long)5l, (long)6l))), (2l)) == (0l));\n\
    \    assert(addElements((new ArrayList<Long>(Arrays.asList((long)11l, (long)21l,\
    \ (long)3l, (long)90l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\
    \ == (125l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (24l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l))),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794229
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a non-empty array array list of integers arr and\
    \ an integer k, return\n    // the sum of the elements with at most two digits\
    \ from the first k elements of arr.\n    // Example:\n    // >>> addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\n    // (24l)\n \
    \   // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n\
    \    public static long addElements(ArrayList<Long> arr, long k) {\n        long\
    \ sum = 0;\n        for (int i = 0; i < k; i++) {\n            if (arr.get(i)\
    \ < 100) {\n                sum += arr.get(i);\n            }\n        }\n   \
    \     return sum;\n    }\n    public static void main(String[] args) {\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)-2l, (long)-3l, (long)41l, (long)57l,\
    \ (long)76l, (long)87l, (long)88l, (long)99l))), (3l)) == (-4l));\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)121l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l))), (2l)) == (0l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)21l, (long)3l, (long)90l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (125l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (24l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l))),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794229
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a non-empty array array list of integers arr and\
    \ an integer k, return\n    // the sum of the elements with at most two digits\
    \ from the first k elements of arr.\n    // Example:\n    // >>> addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\n    // (24l)\n \
    \   // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n\
    \    public static long addElements(ArrayList<Long> arr, long k) {\n        //\
    \ Write your code here\n        return 0;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-2l, (long)-3l, (long)41l, (long)57l, (long)76l, (long)87l, (long)88l,\
    \ (long)99l))), (3l)) == (-4l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)121l, (long)3l, (long)4000l, (long)5l, (long)6l))), (2l)) == (0l));\n\
    \    assert(addElements((new ArrayList<Long>(Arrays.asList((long)11l, (long)21l,\
    \ (long)3l, (long)90l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\
    \ == (125l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (24l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l))),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpe3z1epxe.java:22)\n"
  stdout: ''
  timestamp: 1659794229
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a non-empty array array list of integers arr and\
    \ an integer k, return\n    // the sum of the elements with at most two digits\
    \ from the first k elements of arr.\n    // Example:\n    // >>> addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\n    // (24l)\n \
    \   // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n\
    \    public static long addElements(ArrayList<Long> arr, long k) {\n        long\
    \ sum = 0;\n        for (int i = 0; i < k; i++) {\n            long num = arr.get(i);\n\
    \            if (num < 100) {\n                sum += num;\n            }\n  \
    \      }\n        return sum;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l, (long)-2l,\
    \ (long)-3l, (long)41l, (long)57l, (long)76l, (long)87l, (long)88l, (long)99l))),\
    \ (3l)) == (-4l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)121l, (long)3l, (long)4000l, (long)5l, (long)6l))), (2l)) == (0l));\n\
    \    assert(addElements((new ArrayList<Long>(Arrays.asList((long)11l, (long)21l,\
    \ (long)3l, (long)90l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\
    \ == (125l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (24l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l))),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794229
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a non-empty array array list of integers arr and\
    \ an integer k, return\n    // the sum of the elements with at most two digits\
    \ from the first k elements of arr.\n    // Example:\n    // >>> addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\n    // (24l)\n \
    \   // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n\
    \    public static long addElements(ArrayList<Long> arr, long k) {\n        long\
    \ sum = 0;\n        for (int i = 0; i < k; i++) {\n            if (arr.get(i)\
    \ < 100) {\n                sum += arr.get(i);\n            }\n        }\n   \
    \     return sum;\n    }\n    public static void main(String[] args) {\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)-2l, (long)-3l, (long)41l, (long)57l,\
    \ (long)76l, (long)87l, (long)88l, (long)99l))), (3l)) == (-4l));\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)121l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l))), (2l)) == (0l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)21l, (long)3l, (long)90l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (125l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (24l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l))),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794229
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a non-empty array array list of integers arr and\
    \ an integer k, return\n    // the sum of the elements with at most two digits\
    \ from the first k elements of arr.\n    // Example:\n    // >>> addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\n    // (24l)\n \
    \   // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n\
    \    public static long addElements(ArrayList<Long> arr, long k) {\n        return\
    \ arr.stream().filter(x -> x < 100).limit(k).reduce(0l, (x, y) -> x + y);\n  \
    \  }\n    public static void main(String[] args) {\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)-2l, (long)-3l, (long)41l, (long)57l,\
    \ (long)76l, (long)87l, (long)88l, (long)99l))), (3l)) == (-4l));\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)121l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l))), (2l)) == (0l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)21l, (long)3l, (long)90l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (125l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (24l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l))),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmscg8302.java:22)\n"
  stdout: ''
  timestamp: 1659794229
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a non-empty array array list of integers arr and\
    \ an integer k, return\n    // the sum of the elements with at most two digits\
    \ from the first k elements of arr.\n    // Example:\n    // >>> addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\n    // (24l)\n \
    \   // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n\
    \    public static long addElements(ArrayList<Long> arr, long k) {\n        return\
    \ arr.stream().limit(k).filter(i -> i < 100).mapToLong(i -> i).sum();\n    }\n\
    \    public static void main(String[] args) {\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-2l, (long)-3l, (long)41l, (long)57l, (long)76l, (long)87l, (long)88l,\
    \ (long)99l))), (3l)) == (-4l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)121l, (long)3l, (long)4000l, (long)5l, (long)6l))), (2l)) == (0l));\n\
    \    assert(addElements((new ArrayList<Long>(Arrays.asList((long)11l, (long)21l,\
    \ (long)3l, (long)90l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\
    \ == (125l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (24l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l))),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794229
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a non-empty array array list of integers arr and\
    \ an integer k, return\n    // the sum of the elements with at most two digits\
    \ from the first k elements of arr.\n    // Example:\n    // >>> addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\n    // (24l)\n \
    \   // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n\
    \    public static long addElements(ArrayList<Long> arr, long k) {\n        long\
    \ sum = 0;\n        for (int i = 0; i < k; i++) {\n            if (arr.get(i)\
    \ < 100) {\n                sum += arr.get(i);\n            }\n        }\n   \
    \     return sum;\n    }\n    public static void main(String[] args) {\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)-2l, (long)-3l, (long)41l, (long)57l,\
    \ (long)76l, (long)87l, (long)88l, (long)99l))), (3l)) == (-4l));\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)121l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l))), (2l)) == (0l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)21l, (long)3l, (long)90l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (125l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (24l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l))),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794229
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a non-empty array array list of integers arr and\
    \ an integer k, return\n    // the sum of the elements with at most two digits\
    \ from the first k elements of arr.\n    // Example:\n    // >>> addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\n    // (24l)\n \
    \   // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n\
    \    public static long addElements(ArrayList<Long> arr, long k) {\n        long\
    \ sum = 0;\n        for (int i = 0; i < k; i++) {\n            if (arr.get(i)\
    \ < 100) {\n                sum += arr.get(i);\n            }\n        }\n   \
    \     return sum;\n    }\n    public static void main(String[] args) {\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)-2l, (long)-3l, (long)41l, (long)57l,\
    \ (long)76l, (long)87l, (long)88l, (long)99l))), (3l)) == (-4l));\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)121l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l))), (2l)) == (0l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)21l, (long)3l, (long)90l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (125l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (24l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l))),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794229
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a non-empty array array list of integers arr and\
    \ an integer k, return\n    // the sum of the elements with at most two digits\
    \ from the first k elements of arr.\n    // Example:\n    // >>> addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\n    // (24l)\n \
    \   // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n\
    \    public static long addElements(ArrayList<Long> arr, long k) {\n        long\
    \ sum = 0;\n        for (int i = 0; i < k; i++) {\n            if (arr.get(i)\
    \ < 100) {\n                sum += arr.get(i);\n            }\n        }\n   \
    \     return sum;\n    }\n    public static void main(String[] args) {\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)-2l, (long)-3l, (long)41l, (long)57l,\
    \ (long)76l, (long)87l, (long)88l, (long)99l))), (3l)) == (-4l));\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)121l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l))), (2l)) == (0l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)21l, (long)3l, (long)90l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (125l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (24l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l))),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794229
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a non-empty array array list of integers arr and\
    \ an integer k, return\n    // the sum of the elements with at most two digits\
    \ from the first k elements of arr.\n    // Example:\n    // >>> addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\n    // (24l)\n \
    \   // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n\
    \    public static long addElements(ArrayList<Long> arr, long k) {\n        long\
    \ sum = 0;\n        for (int i = 0; i < k; i++) {\n            long n = arr.get(i);\n\
    \            if (n < 100) {\n                sum += n;\n            }\n      \
    \  }\n        return sum;\n    }\n    public static void main(String[] args) {\n\
    \    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l, (long)-2l,\
    \ (long)-3l, (long)41l, (long)57l, (long)76l, (long)87l, (long)88l, (long)99l))),\
    \ (3l)) == (-4l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)121l, (long)3l, (long)4000l, (long)5l, (long)6l))), (2l)) == (0l));\n\
    \    assert(addElements((new ArrayList<Long>(Arrays.asList((long)11l, (long)21l,\
    \ (long)3l, (long)90l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\
    \ == (125l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (24l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l))),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794229
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a non-empty array array list of integers arr and\
    \ an integer k, return\n    // the sum of the elements with at most two digits\
    \ from the first k elements of arr.\n    // Example:\n    // >>> addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\n    // (24l)\n \
    \   // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n\
    \    public static long addElements(ArrayList<Long> arr, long k) {\n        return\
    \ arr.stream().limit(k).filter(x -> x < 100).reduce(0l, (x, y) -> x + y);\n  \
    \  }\n    public static void main(String[] args) {\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)-2l, (long)-3l, (long)41l, (long)57l,\
    \ (long)76l, (long)87l, (long)88l, (long)99l))), (3l)) == (-4l));\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)121l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l))), (2l)) == (0l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)21l, (long)3l, (long)90l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (125l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (24l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l))),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794229
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a non-empty array array list of integers arr and\
    \ an integer k, return\n    // the sum of the elements with at most two digits\
    \ from the first k elements of arr.\n    // Example:\n    // >>> addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\n    // (24l)\n \
    \   // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n\
    \    public static long addElements(ArrayList<Long> arr, long k) {\n        long\
    \ sum = 0;\n        for (int i = 0; i < k; i++) {\n            if (arr.get(i)\
    \ < 100) {\n                sum += arr.get(i);\n            }\n        }\n   \
    \     return sum;\n    }\n    public static void main(String[] args) {\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)-2l, (long)-3l, (long)41l, (long)57l,\
    \ (long)76l, (long)87l, (long)88l, (long)99l))), (3l)) == (-4l));\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)121l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l))), (2l)) == (0l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)21l, (long)3l, (long)90l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (125l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (24l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l))),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794229
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a non-empty array array list of integers arr and\
    \ an integer k, return\n    // the sum of the elements with at most two digits\
    \ from the first k elements of arr.\n    // Example:\n    // >>> addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\n    // (24l)\n \
    \   // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n\
    \    public static long addElements(ArrayList<Long> arr, long k) {\n        long\
    \ sum = 0;\n        for (int i = 0; i < k; i++) {\n            if (arr.get(i)\
    \ < 100) {\n                sum += arr.get(i);\n            }\n        }\n   \
    \     return sum;\n    }\n    public static void main(String[] args) {\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)-2l, (long)-3l, (long)41l, (long)57l,\
    \ (long)76l, (long)87l, (long)88l, (long)99l))), (3l)) == (-4l));\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)121l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l))), (2l)) == (0l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)21l, (long)3l, (long)90l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (125l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (24l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l))),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794229
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a non-empty array array list of integers arr and\
    \ an integer k, return\n    // the sum of the elements with at most two digits\
    \ from the first k elements of arr.\n    // Example:\n    // >>> addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\n    // (24l)\n \
    \   // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n\
    \    public static long addElements(ArrayList<Long> arr, long k) {\n        long\
    \ sum = 0;\n        for (int i = 0; i < k; i++) {\n            if (arr.get(i)\
    \ < 100) {\n                sum += arr.get(i);\n            }\n        }\n   \
    \     return sum;\n    }\n    public static void main(String[] args) {\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)-2l, (long)-3l, (long)41l, (long)57l,\
    \ (long)76l, (long)87l, (long)88l, (long)99l))), (3l)) == (-4l));\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)121l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l))), (2l)) == (0l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)21l, (long)3l, (long)90l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (125l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (24l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l))),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794229
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a non-empty array array list of integers arr and\
    \ an integer k, return\n    // the sum of the elements with at most two digits\
    \ from the first k elements of arr.\n    // Example:\n    // >>> addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\n    // (24l)\n \
    \   // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n\
    \    public static long addElements(ArrayList<Long> arr, long k) {\n        //\
    \ >>> addElements((new ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l,\
    \ (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\n  \
    \      // (24l)\n        // >>> addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (5l))\n        // (30l)\n        // >>> addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (6l))\n        // (36l)\n        // >>> addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (7l))\n        // (42l)\n        // >>> addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (8l))\n        // (48l)\n        // >>> addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (9l))\n        // (54l)\n       \n    }\n    public static void main(String[]\
    \ args) {\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-2l, (long)-3l, (long)41l, (long)57l, (long)76l, (long)87l, (long)88l,\
    \ (long)99l))), (3l)) == (-4l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)121l, (long)3l, (long)4000l, (long)5l, (long)6l))), (2l)) == (0l));\n\
    \    assert(addElements((new ArrayList<Long>(Arrays.asList((long)11l, (long)21l,\
    \ (long)3l, (long)90l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\
    \ == (125l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (24l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l))),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwzmw4ads.java:31: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659794228
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a non-empty array array list of integers arr and\
    \ an integer k, return\n    // the sum of the elements with at most two digits\
    \ from the first k elements of arr.\n    // Example:\n    // >>> addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\n    // (24l)\n \
    \   // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n\
    \    public static long addElements(ArrayList<Long> arr, long k) {\n        return\
    \ arr.stream().limit(k).filter(x -> x < 100).reduce(0l, (a, b) -> a + b);\n  \
    \  }\n    public static void main(String[] args) {\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)-2l, (long)-3l, (long)41l, (long)57l,\
    \ (long)76l, (long)87l, (long)88l, (long)99l))), (3l)) == (-4l));\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)121l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l))), (2l)) == (0l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)21l, (long)3l, (long)90l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (125l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (24l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l))),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794229
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a non-empty array array list of integers arr and\
    \ an integer k, return\n    // the sum of the elements with at most two digits\
    \ from the first k elements of arr.\n    // Example:\n    // >>> addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\n    // (24l)\n \
    \   // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n\
    \    public static long addElements(ArrayList<Long> arr, long k) {\n        return\
    \ arr.stream().limit(k).filter(x -> x < 100).mapToLong(x -> x).sum();\n    }\n\
    \    public static void main(String[] args) {\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-2l, (long)-3l, (long)41l, (long)57l, (long)76l, (long)87l, (long)88l,\
    \ (long)99l))), (3l)) == (-4l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)121l, (long)3l, (long)4000l, (long)5l, (long)6l))), (2l)) == (0l));\n\
    \    assert(addElements((new ArrayList<Long>(Arrays.asList((long)11l, (long)21l,\
    \ (long)3l, (long)90l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\
    \ == (125l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (24l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l))),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794229
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a non-empty array array list of integers arr and\
    \ an integer k, return\n    // the sum of the elements with at most two digits\
    \ from the first k elements of arr.\n    // Example:\n    // >>> addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\n    // (24l)\n \
    \   // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n\
    \    public static long addElements(ArrayList<Long> arr, long k) {\n        long\
    \ sum = 0;\n        for (int i = 0; i < k; i++) {\n            if (arr.get(i)\
    \ < 100) {\n                sum += arr.get(i);\n            }\n        }\n   \
    \     return sum;\n    }\n    public static void main(String[] args) {\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)-2l, (long)-3l, (long)41l, (long)57l,\
    \ (long)76l, (long)87l, (long)88l, (long)99l))), (3l)) == (-4l));\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)121l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l))), (2l)) == (0l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)21l, (long)3l, (long)90l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (125l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (24l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l))),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794229
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a non-empty array array list of integers arr and\
    \ an integer k, return\n    // the sum of the elements with at most two digits\
    \ from the first k elements of arr.\n    // Example:\n    // >>> addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\n    // (24l)\n \
    \   // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n\
    \    public static long addElements(ArrayList<Long> arr, long k) {\n        long\
    \ sum = 0;\n        for (int i = 0; i < k; i++) {\n            if (arr.get(i)\
    \ < 100) {\n                sum += arr.get(i);\n            }\n        }\n   \
    \     return sum;\n    }\n    public static void main(String[] args) {\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)-2l, (long)-3l, (long)41l, (long)57l,\
    \ (long)76l, (long)87l, (long)88l, (long)99l))), (3l)) == (-4l));\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)121l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l))), (2l)) == (0l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)21l, (long)3l, (long)90l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (125l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (24l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l))),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794229
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a non-empty array array list of integers arr and\
    \ an integer k, return\n    // the sum of the elements with at most two digits\
    \ from the first k elements of arr.\n    // Example:\n    // >>> addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\n    // (24l)\n \
    \   // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n\
    \    public static long addElements(ArrayList<Long> arr, long k) {\n        long\
    \ sum = 0;\n        for (int i = 0; i < k; i++) {\n            long num = arr.get(i);\n\
    \            if (num < 100) {\n                sum += num;\n            }\n  \
    \      }\n        return sum;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l, (long)-2l,\
    \ (long)-3l, (long)41l, (long)57l, (long)76l, (long)87l, (long)88l, (long)99l))),\
    \ (3l)) == (-4l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)121l, (long)3l, (long)4000l, (long)5l, (long)6l))), (2l)) == (0l));\n\
    \    assert(addElements((new ArrayList<Long>(Arrays.asList((long)11l, (long)21l,\
    \ (long)3l, (long)90l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\
    \ == (125l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (24l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l))),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794229
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a non-empty array array list of integers arr and\
    \ an integer k, return\n    // the sum of the elements with at most two digits\
    \ from the first k elements of arr.\n    // Example:\n    // >>> addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\n    // (24l)\n \
    \   // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n\
    \    public static long addElements(ArrayList<Long> arr, long k) {\n        long\
    \ sum = 0;\n        for (int i = 0; i < k; i++) {\n            long num = arr.get(i);\n\
    \            if (num < 100) {\n                sum += num;\n            }\n  \
    \      }\n        return sum;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l, (long)-2l,\
    \ (long)-3l, (long)41l, (long)57l, (long)76l, (long)87l, (long)88l, (long)99l))),\
    \ (3l)) == (-4l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)121l, (long)3l, (long)4000l, (long)5l, (long)6l))), (2l)) == (0l));\n\
    \    assert(addElements((new ArrayList<Long>(Arrays.asList((long)11l, (long)21l,\
    \ (long)3l, (long)90l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\
    \ == (125l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (24l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l))),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794229
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a non-empty array array list of integers arr and\
    \ an integer k, return\n    // the sum of the elements with at most two digits\
    \ from the first k elements of arr.\n    // Example:\n    // >>> addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\n    // (24l)\n \
    \   // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n\
    \    public static long addElements(ArrayList<Long> arr, long k) {\n        long\
    \ sum = 0;\n        for (int i = 0; i < k; i++) {\n            if (arr.get(i)\
    \ < 100) {\n                sum += arr.get(i);\n            }\n        }\n   \
    \     return sum;\n    }\n    public static void main(String[] args) {\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)-2l, (long)-3l, (long)41l, (long)57l,\
    \ (long)76l, (long)87l, (long)88l, (long)99l))), (3l)) == (-4l));\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)121l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l))), (2l)) == (0l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)21l, (long)3l, (long)90l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (125l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (24l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l))),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794229
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a non-empty array array list of integers arr and\
    \ an integer k, return\n    // the sum of the elements with at most two digits\
    \ from the first k elements of arr.\n    // Example:\n    // >>> addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\n    // (24l)\n \
    \   // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n\
    \    public static long addElements(ArrayList<Long> arr, long k) {\n        return\
    \ arr.stream().limit(k).filter(x -> x < 100).reduce(0l, (x, y) -> x + y);\n  \
    \  }\n    public static void main(String[] args) {\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)-2l, (long)-3l, (long)41l, (long)57l,\
    \ (long)76l, (long)87l, (long)88l, (long)99l))), (3l)) == (-4l));\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)121l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l))), (2l)) == (0l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)21l, (long)3l, (long)90l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (125l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (24l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l))),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794229
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a non-empty array array list of integers arr and\
    \ an integer k, return\n    // the sum of the elements with at most two digits\
    \ from the first k elements of arr.\n    // Example:\n    // >>> addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\n    // (24l)\n \
    \   // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n\
    \    public static long addElements(ArrayList<Long> arr, long k) {\n        long\
    \ sum = 0;\n        for (int i = 0; i < k; i++) {\n            long num = arr.get(i);\n\
    \            if (num < 100) {\n                sum += num;\n            }\n  \
    \      }\n        return sum;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l, (long)-2l,\
    \ (long)-3l, (long)41l, (long)57l, (long)76l, (long)87l, (long)88l, (long)99l))),\
    \ (3l)) == (-4l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)121l, (long)3l, (long)4000l, (long)5l, (long)6l))), (2l)) == (0l));\n\
    \    assert(addElements((new ArrayList<Long>(Arrays.asList((long)11l, (long)21l,\
    \ (long)3l, (long)90l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\
    \ == (125l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (24l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l))),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794229
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a non-empty array array list of integers arr and\
    \ an integer k, return\n    // the sum of the elements with at most two digits\
    \ from the first k elements of arr.\n    // Example:\n    // >>> addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\n    // (24l)\n \
    \   // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n\
    \    public static long addElements(ArrayList<Long> arr, long k) {\n        long\
    \ sum = 0;\n        for (int i = 0; i < k; i++) {\n            if (arr.get(i)\
    \ < 100) {\n                sum += arr.get(i);\n            }\n        }\n   \
    \     return sum;\n    }\n    public static void main(String[] args) {\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)-2l, (long)-3l, (long)41l, (long)57l,\
    \ (long)76l, (long)87l, (long)88l, (long)99l))), (3l)) == (-4l));\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)121l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l))), (2l)) == (0l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)21l, (long)3l, (long)90l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (125l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (24l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l))),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794229
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a non-empty array array list of integers arr and\
    \ an integer k, return\n    // the sum of the elements with at most two digits\
    \ from the first k elements of arr.\n    // Example:\n    // >>> addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\n    // (24l)\n \
    \   // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n\
    \    public static long addElements(ArrayList<Long> arr, long k) {\n        return\
    \ arr.stream().limit(k).filter(x -> x < 100).mapToLong(x -> x).sum();\n    }\n\
    \    public static void main(String[] args) {\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-2l, (long)-3l, (long)41l, (long)57l, (long)76l, (long)87l, (long)88l,\
    \ (long)99l))), (3l)) == (-4l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)121l, (long)3l, (long)4000l, (long)5l, (long)6l))), (2l)) == (0l));\n\
    \    assert(addElements((new ArrayList<Long>(Arrays.asList((long)11l, (long)21l,\
    \ (long)3l, (long)90l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\
    \ == (125l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (24l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l))),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794229
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a non-empty array array list of integers arr and\
    \ an integer k, return\n    // the sum of the elements with at most two digits\
    \ from the first k elements of arr.\n    // Example:\n    // >>> addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\n    // (24l)\n \
    \   // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n\
    \    public static long addElements(ArrayList<Long> arr, long k) {\n        long\
    \ sum = 0;\n        for (int i = 0; i < k; i++) {\n            if (arr.get(i)\
    \ < 100) {\n                sum += arr.get(i);\n            }\n        }\n   \
    \     return sum;\n    }\n    public static void main(String[] args) {\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)-2l, (long)-3l, (long)41l, (long)57l,\
    \ (long)76l, (long)87l, (long)88l, (long)99l))), (3l)) == (-4l));\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)121l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l))), (2l)) == (0l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)21l, (long)3l, (long)90l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (125l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (24l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l))),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794229
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a non-empty array array list of integers arr and\
    \ an integer k, return\n    // the sum of the elements with at most two digits\
    \ from the first k elements of arr.\n    // Example:\n    // >>> addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\n    // (24l)\n \
    \   // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n\
    \    public static long addElements(ArrayList<Long> arr, long k) {\n        long\
    \ sum = 0;\n        for (int i = 0; i < k; i++) {\n            if (arr.get(i)\
    \ < 100) {\n                sum += arr.get(i);\n            }\n        }\n   \
    \     return sum;\n    }\n    public static void main(String[] args) {\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)-2l, (long)-3l, (long)41l, (long)57l,\
    \ (long)76l, (long)87l, (long)88l, (long)99l))), (3l)) == (-4l));\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)121l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l))), (2l)) == (0l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)21l, (long)3l, (long)90l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (125l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (24l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l))),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794229
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a non-empty array array list of integers arr and\
    \ an integer k, return\n    // the sum of the elements with at most two digits\
    \ from the first k elements of arr.\n    // Example:\n    // >>> addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\n    // (24l)\n \
    \   // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n\
    \    public static long addElements(ArrayList<Long> arr, long k) {\n        return\
    \ arr.stream().limit(k).filter(x -> x < 100).mapToLong(x -> x).sum();\n    }\n\
    \    public static void main(String[] args) {\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-2l, (long)-3l, (long)41l, (long)57l, (long)76l, (long)87l, (long)88l,\
    \ (long)99l))), (3l)) == (-4l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)121l, (long)3l, (long)4000l, (long)5l, (long)6l))), (2l)) == (0l));\n\
    \    assert(addElements((new ArrayList<Long>(Arrays.asList((long)11l, (long)21l,\
    \ (long)3l, (long)90l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\
    \ == (125l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (24l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l))),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794229
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a non-empty array array list of integers arr and\
    \ an integer k, return\n    // the sum of the elements with at most two digits\
    \ from the first k elements of arr.\n    // Example:\n    // >>> addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\n    // (24l)\n \
    \   // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n\
    \    public static long addElements(ArrayList<Long> arr, long k) {\n        long\
    \ sum = 0;\n        for (int i = 0; i < k; i++) {\n            if (arr.get(i)\
    \ < 100) {\n                sum += arr.get(i);\n            }\n        }\n   \
    \     return sum;\n    }\n    public static void main(String[] args) {\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)-2l, (long)-3l, (long)41l, (long)57l,\
    \ (long)76l, (long)87l, (long)88l, (long)99l))), (3l)) == (-4l));\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)121l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l))), (2l)) == (0l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)21l, (long)3l, (long)90l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (125l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (24l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l))),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794229
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a non-empty array array list of integers arr and\
    \ an integer k, return\n    // the sum of the elements with at most two digits\
    \ from the first k elements of arr.\n    // Example:\n    // >>> addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\n    // (24l)\n \
    \   // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n\
    \    public static long addElements(ArrayList<Long> arr, long k) {\n        return\
    \ arr.stream().filter(x -> x.toString().length() <= 2).limit(k).mapToLong(x ->\
    \ x).sum();\n    }\n    public static void main(String[] args) {\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)-2l, (long)-3l, (long)41l, (long)57l,\
    \ (long)76l, (long)87l, (long)88l, (long)99l))), (3l)) == (-4l));\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)121l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l))), (2l)) == (0l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)21l, (long)3l, (long)90l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (125l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (24l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l))),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmph3pakxln.java:22)\n"
  stdout: ''
  timestamp: 1659794229
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a non-empty array array list of integers arr and\
    \ an integer k, return\n    // the sum of the elements with at most two digits\
    \ from the first k elements of arr.\n    // Example:\n    // >>> addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\n    // (24l)\n \
    \   // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n\
    \    public static long addElements(ArrayList<Long> arr, long k) {\n        return\
    \ arr.stream().limit(k).filter(x -> x < 100).mapToLong(x -> x).sum();\n    }\n\
    \    public static void main(String[] args) {\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-2l, (long)-3l, (long)41l, (long)57l, (long)76l, (long)87l, (long)88l,\
    \ (long)99l))), (3l)) == (-4l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)121l, (long)3l, (long)4000l, (long)5l, (long)6l))), (2l)) == (0l));\n\
    \    assert(addElements((new ArrayList<Long>(Arrays.asList((long)11l, (long)21l,\
    \ (long)3l, (long)90l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\
    \ == (125l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (24l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l))),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794229
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a non-empty array array list of integers arr and\
    \ an integer k, return\n    // the sum of the elements with at most two digits\
    \ from the first k elements of arr.\n    // Example:\n    // >>> addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\n    // (24l)\n \
    \   // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n\
    \    public static long addElements(ArrayList<Long> arr, long k) {\n        long\
    \ sum = 0;\n        for (int i = 0; i < k; i++) {\n            if (arr.get(i)\
    \ < 100) {\n                sum += arr.get(i);\n            }\n        }\n   \
    \     return sum;\n    }\n    public static void main(String[] args) {\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)-2l, (long)-3l, (long)41l, (long)57l,\
    \ (long)76l, (long)87l, (long)88l, (long)99l))), (3l)) == (-4l));\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)121l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l))), (2l)) == (0l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)21l, (long)3l, (long)90l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (125l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (24l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l))),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794229
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a non-empty array array list of integers arr and\
    \ an integer k, return\n    // the sum of the elements with at most two digits\
    \ from the first k elements of arr.\n    // Example:\n    // >>> addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\n    // (24l)\n \
    \   // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n\
    \    public static long addElements(ArrayList<Long> arr, long k) {\n        return\
    \ arr.stream().limit(k).filter(x -> x < 100).reduce(0l, (x, y) -> x + y);\n  \
    \  }\n    public static void main(String[] args) {\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)-2l, (long)-3l, (long)41l, (long)57l,\
    \ (long)76l, (long)87l, (long)88l, (long)99l))), (3l)) == (-4l));\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)121l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l))), (2l)) == (0l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)21l, (long)3l, (long)90l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (125l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (24l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l))),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794229
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a non-empty array array list of integers arr and\
    \ an integer k, return\n    // the sum of the elements with at most two digits\
    \ from the first k elements of arr.\n    // Example:\n    // >>> addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\n    // (24l)\n \
    \   // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n\
    \    public static long addElements(ArrayList<Long> arr, long k) {\n        long\
    \ sum = 0;\n        for (int i = 0; i < k; i++) {\n            if (arr.get(i)\
    \ < 100) {\n                sum += arr.get(i);\n            }\n        }\n   \
    \     return sum;\n    }\n    public static void main(String[] args) {\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)-2l, (long)-3l, (long)41l, (long)57l,\
    \ (long)76l, (long)87l, (long)88l, (long)99l))), (3l)) == (-4l));\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)121l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l))), (2l)) == (0l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)21l, (long)3l, (long)90l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (125l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (24l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l))),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794229
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a non-empty array array list of integers arr and\
    \ an integer k, return\n    // the sum of the elements with at most two digits\
    \ from the first k elements of arr.\n    // Example:\n    // >>> addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\n    // (24l)\n \
    \   // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n\
    \    public static long addElements(ArrayList<Long> arr, long k) {\n        return\
    \ arr.stream().limit(k).filter(x -> x < 100).reduce(0l, (x, y) -> x + y);\n  \
    \  }\n    public static void main(String[] args) {\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)-2l, (long)-3l, (long)41l, (long)57l,\
    \ (long)76l, (long)87l, (long)88l, (long)99l))), (3l)) == (-4l));\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)121l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l))), (2l)) == (0l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)21l, (long)3l, (long)90l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (125l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (24l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l))),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794229
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a non-empty array array list of integers arr and\
    \ an integer k, return\n    // the sum of the elements with at most two digits\
    \ from the first k elements of arr.\n    // Example:\n    // >>> addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\n    // (24l)\n \
    \   // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n\
    \    public static long addElements(ArrayList<Long> arr, long k) {\n        long\
    \ sum = 0;\n        for (int i = 0; i < k; i++) {\n            if (arr.get(i)\
    \ < 100) {\n                sum += arr.get(i);\n            }\n        }\n   \
    \     return sum;\n    }\n    public static void main(String[] args) {\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)-2l, (long)-3l, (long)41l, (long)57l,\
    \ (long)76l, (long)87l, (long)88l, (long)99l))), (3l)) == (-4l));\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)121l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l))), (2l)) == (0l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)21l, (long)3l, (long)90l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (125l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (24l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l))),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794229
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a non-empty array array list of integers arr and\
    \ an integer k, return\n    // the sum of the elements with at most two digits\
    \ from the first k elements of arr.\n    // Example:\n    // >>> addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\n    // (24l)\n \
    \   // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n\
    \    public static long addElements(ArrayList<Long> arr, long k) {\n        return\
    \ arr.stream().limit(k).filter(x -> x < 100).mapToLong(x -> x).sum();\n    }\n\
    \    public static void main(String[] args) {\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-2l, (long)-3l, (long)41l, (long)57l, (long)76l, (long)87l, (long)88l,\
    \ (long)99l))), (3l)) == (-4l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)121l, (long)3l, (long)4000l, (long)5l, (long)6l))), (2l)) == (0l));\n\
    \    assert(addElements((new ArrayList<Long>(Arrays.asList((long)11l, (long)21l,\
    \ (long)3l, (long)90l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\
    \ == (125l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (24l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l))),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794229
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a non-empty array array list of integers arr and\
    \ an integer k, return\n    // the sum of the elements with at most two digits\
    \ from the first k elements of arr.\n    // Example:\n    // >>> addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\n    // (24l)\n \
    \   // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n\
    \    public static long addElements(ArrayList<Long> arr, long k) {\n        long\
    \ sum = 0;\n        for (int i = 0; i < k; i++) {\n            if (arr.get(i)\
    \ < 100) {\n                sum += arr.get(i);\n            }\n        }\n   \
    \     return sum;\n    }\n    public static void main(String[] args) {\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)-2l, (long)-3l, (long)41l, (long)57l,\
    \ (long)76l, (long)87l, (long)88l, (long)99l))), (3l)) == (-4l));\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)121l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l))), (2l)) == (0l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)21l, (long)3l, (long)90l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (125l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (24l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l))),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794229
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a non-empty array array list of integers arr and\
    \ an integer k, return\n    // the sum of the elements with at most two digits\
    \ from the first k elements of arr.\n    // Example:\n    // >>> addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\n    // (24l)\n \
    \   // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n\
    \    public static long addElements(ArrayList<Long> arr, long k) {\n        return\
    \ arr.stream().limit(k).filter(x -> x < 100).mapToLong(x -> x).sum();\n    }\n\
    \    public static void main(String[] args) {\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-2l, (long)-3l, (long)41l, (long)57l, (long)76l, (long)87l, (long)88l,\
    \ (long)99l))), (3l)) == (-4l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)121l, (long)3l, (long)4000l, (long)5l, (long)6l))), (2l)) == (0l));\n\
    \    assert(addElements((new ArrayList<Long>(Arrays.asList((long)11l, (long)21l,\
    \ (long)3l, (long)90l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\
    \ == (125l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (24l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l))),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794229
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a non-empty array array list of integers arr and\
    \ an integer k, return\n    // the sum of the elements with at most two digits\
    \ from the first k elements of arr.\n    // Example:\n    // >>> addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\n    // (24l)\n \
    \   // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n\
    \    public static long addElements(ArrayList<Long> arr, long k) {\n        long\
    \ sum = 0;\n        for (int i = 0; i < k; i++) {\n            long num = arr.get(i);\n\
    \            if (num < 100) {\n                sum += num;\n            }\n  \
    \      }\n        return sum;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l, (long)-2l,\
    \ (long)-3l, (long)41l, (long)57l, (long)76l, (long)87l, (long)88l, (long)99l))),\
    \ (3l)) == (-4l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)121l, (long)3l, (long)4000l, (long)5l, (long)6l))), (2l)) == (0l));\n\
    \    assert(addElements((new ArrayList<Long>(Arrays.asList((long)11l, (long)21l,\
    \ (long)3l, (long)90l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\
    \ == (125l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (24l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l))),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794229
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a non-empty array array list of integers arr and\
    \ an integer k, return\n    // the sum of the elements with at most two digits\
    \ from the first k elements of arr.\n    // Example:\n    // >>> addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\n    // (24l)\n \
    \   // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n\
    \    public static long addElements(ArrayList<Long> arr, long k) {\n        long\
    \ sum = 0;\n        for (int i = 0; i < k; i++) {\n            if (arr.get(i)\
    \ < 100) {\n                sum += arr.get(i);\n            }\n        }\n   \
    \     return sum;\n    }\n    public static void main(String[] args) {\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)-2l, (long)-3l, (long)41l, (long)57l,\
    \ (long)76l, (long)87l, (long)88l, (long)99l))), (3l)) == (-4l));\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)121l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l))), (2l)) == (0l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)21l, (long)3l, (long)90l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (125l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (24l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l))),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794229
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a non-empty array array list of integers arr and\
    \ an integer k, return\n    // the sum of the elements with at most two digits\
    \ from the first k elements of arr.\n    // Example:\n    // >>> addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\n    // (24l)\n \
    \   // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n\
    \    public static long addElements(ArrayList<Long> arr, long k) {\n        long\
    \ sum = 0;\n        for (int i = 0; i < k; i++) {\n            if (arr.get(i)\
    \ < 100) {\n                sum += arr.get(i);\n            }\n        }\n   \
    \     return sum;\n    }\n    public static void main(String[] args) {\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)-2l, (long)-3l, (long)41l, (long)57l,\
    \ (long)76l, (long)87l, (long)88l, (long)99l))), (3l)) == (-4l));\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)121l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l))), (2l)) == (0l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)21l, (long)3l, (long)90l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (125l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (24l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l))),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794229
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a non-empty array array list of integers arr and\
    \ an integer k, return\n    // the sum of the elements with at most two digits\
    \ from the first k elements of arr.\n    // Example:\n    // >>> addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\n    // (24l)\n \
    \   // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n\
    \    public static long addElements(ArrayList<Long> arr, long k) {\n        return\
    \ arr.stream().limit(k).filter(x -> x < 100).reduce(0l, (x, y) -> x + y);\n  \
    \  }\n    public static void main(String[] args) {\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)-2l, (long)-3l, (long)41l, (long)57l,\
    \ (long)76l, (long)87l, (long)88l, (long)99l))), (3l)) == (-4l));\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)121l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l))), (2l)) == (0l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)21l, (long)3l, (long)90l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (125l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (24l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l))),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794229
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a non-empty array array list of integers arr and\
    \ an integer k, return\n    // the sum of the elements with at most two digits\
    \ from the first k elements of arr.\n    // Example:\n    // >>> addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\n    // (24l)\n \
    \   // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n\
    \    public static long addElements(ArrayList<Long> arr, long k) {\n        long\
    \ sum = 0;\n        for (int i = 0; i < k; i++) {\n            if (arr.get(i)\
    \ < 100) {\n                sum += arr.get(i);\n            }\n        }\n   \
    \     return sum;\n    }\n    public static void main(String[] args) {\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)-2l, (long)-3l, (long)41l, (long)57l,\
    \ (long)76l, (long)87l, (long)88l, (long)99l))), (3l)) == (-4l));\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)121l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l))), (2l)) == (0l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)21l, (long)3l, (long)90l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (125l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (24l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l))),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794229
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a non-empty array array list of integers arr and\
    \ an integer k, return\n    // the sum of the elements with at most two digits\
    \ from the first k elements of arr.\n    // Example:\n    // >>> addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\n    // (24l)\n \
    \   // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n\
    \    public static long addElements(ArrayList<Long> arr, long k) {\n        //\
    \ Your code here.\n        long sum = 0;\n        for (int i = 0; i < k; i++)\
    \ {\n            if (arr.get(i) < 100) {\n                sum += arr.get(i);\n\
    \            }\n        }\n        return sum;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-2l, (long)-3l, (long)41l, (long)57l, (long)76l, (long)87l, (long)88l,\
    \ (long)99l))), (3l)) == (-4l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)121l, (long)3l, (long)4000l, (long)5l, (long)6l))), (2l)) == (0l));\n\
    \    assert(addElements((new ArrayList<Long>(Arrays.asList((long)11l, (long)21l,\
    \ (long)3l, (long)90l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\
    \ == (125l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (24l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l))),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794229
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a non-empty array array list of integers arr and\
    \ an integer k, return\n    // the sum of the elements with at most two digits\
    \ from the first k elements of arr.\n    // Example:\n    // >>> addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\n    // (24l)\n \
    \   // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n\
    \    public static long addElements(ArrayList<Long> arr, long k) {\n        long\
    \ sum = 0;\n        for (int i = 0; i < k; i++) {\n            if (arr.get(i)\
    \ < 100) {\n                sum += arr.get(i);\n            }\n        }\n   \
    \     return sum;\n    }\n    public static void main(String[] args) {\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)-2l, (long)-3l, (long)41l, (long)57l,\
    \ (long)76l, (long)87l, (long)88l, (long)99l))), (3l)) == (-4l));\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)121l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l))), (2l)) == (0l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)21l, (long)3l, (long)90l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (125l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (24l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l))),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794229
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a non-empty array array list of integers arr and\
    \ an integer k, return\n    // the sum of the elements with at most two digits\
    \ from the first k elements of arr.\n    // Example:\n    // >>> addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\n    // (24l)\n \
    \   // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n\
    \    public static long addElements(ArrayList<Long> arr, long k) {\n        return\
    \ arr.stream().limit(k).filter(x -> x < 100).mapToLong(x -> x).sum();\n    }\n\
    \    public static void main(String[] args) {\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-2l, (long)-3l, (long)41l, (long)57l, (long)76l, (long)87l, (long)88l,\
    \ (long)99l))), (3l)) == (-4l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)121l, (long)3l, (long)4000l, (long)5l, (long)6l))), (2l)) == (0l));\n\
    \    assert(addElements((new ArrayList<Long>(Arrays.asList((long)11l, (long)21l,\
    \ (long)3l, (long)90l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\
    \ == (125l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (24l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l))),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794229
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a non-empty array array list of integers arr and\
    \ an integer k, return\n    // the sum of the elements with at most two digits\
    \ from the first k elements of arr.\n    // Example:\n    // >>> addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\n    // (24l)\n \
    \   // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n\
    \    public static long addElements(ArrayList<Long> arr, long k) {\n        long\
    \ sum = 0;\n        for (int i = 0; i < k; i++) {\n            long num = arr.get(i);\n\
    \            if (num < 100) {\n                sum += num;\n            }\n  \
    \      }\n        return sum;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l, (long)-2l,\
    \ (long)-3l, (long)41l, (long)57l, (long)76l, (long)87l, (long)88l, (long)99l))),\
    \ (3l)) == (-4l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)121l, (long)3l, (long)4000l, (long)5l, (long)6l))), (2l)) == (0l));\n\
    \    assert(addElements((new ArrayList<Long>(Arrays.asList((long)11l, (long)21l,\
    \ (long)3l, (long)90l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\
    \ == (125l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (24l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l))),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794229
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a non-empty array array list of integers arr and\
    \ an integer k, return\n    // the sum of the elements with at most two digits\
    \ from the first k elements of arr.\n    // Example:\n    // >>> addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\n    // (24l)\n \
    \   // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n\
    \    public static long addElements(ArrayList<Long> arr, long k) {\n        long\
    \ sum = 0;\n        for (int i = 0; i < k; i++) {\n            if (arr.get(i)\
    \ < 100) {\n                sum += arr.get(i);\n            }\n        }\n   \
    \     return sum;\n    }\n    public static void main(String[] args) {\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)-2l, (long)-3l, (long)41l, (long)57l,\
    \ (long)76l, (long)87l, (long)88l, (long)99l))), (3l)) == (-4l));\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)121l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l))), (2l)) == (0l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)21l, (long)3l, (long)90l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (125l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (24l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l))),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794229
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a non-empty array array list of integers arr and\
    \ an integer k, return\n    // the sum of the elements with at most two digits\
    \ from the first k elements of arr.\n    // Example:\n    // >>> addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\n    // (24l)\n \
    \   // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n\
    \    public static long addElements(ArrayList<Long> arr, long k) {\n        long\
    \ sum = 0;\n        for (int i = 0; i < k; i++) {\n            if (arr.get(i)\
    \ < 100) {\n                sum += arr.get(i);\n            }\n        }\n   \
    \     return sum;\n    }\n    public static void main(String[] args) {\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)-2l, (long)-3l, (long)41l, (long)57l,\
    \ (long)76l, (long)87l, (long)88l, (long)99l))), (3l)) == (-4l));\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)121l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l))), (2l)) == (0l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)21l, (long)3l, (long)90l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (125l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (24l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l))),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794229
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a non-empty array array list of integers arr and\
    \ an integer k, return\n    // the sum of the elements with at most two digits\
    \ from the first k elements of arr.\n    // Example:\n    // >>> addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\n    // (24l)\n \
    \   // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n\
    \    public static long addElements(ArrayList<Long> arr, long k) {\n        return\
    \ arr.stream().limit(k).filter(x -> x < 100).mapToLong(x -> x).sum();\n    }\n\
    \    public static void main(String[] args) {\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-2l, (long)-3l, (long)41l, (long)57l, (long)76l, (long)87l, (long)88l,\
    \ (long)99l))), (3l)) == (-4l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)121l, (long)3l, (long)4000l, (long)5l, (long)6l))), (2l)) == (0l));\n\
    \    assert(addElements((new ArrayList<Long>(Arrays.asList((long)11l, (long)21l,\
    \ (long)3l, (long)90l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\
    \ == (125l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (24l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l))),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794229
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a non-empty array array list of integers arr and\
    \ an integer k, return\n    // the sum of the elements with at most two digits\
    \ from the first k elements of arr.\n    // Example:\n    // >>> addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\n    // (24l)\n \
    \   // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n\
    \    public static long addElements(ArrayList<Long> arr, long k) {\n        return\
    \ arr.stream().limit(k).filter(x -> x < 100).reduce(0l, (x, y) -> x + y);\n  \
    \  }\n    public static void main(String[] args) {\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)-2l, (long)-3l, (long)41l, (long)57l,\
    \ (long)76l, (long)87l, (long)88l, (long)99l))), (3l)) == (-4l));\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)121l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l))), (2l)) == (0l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)21l, (long)3l, (long)90l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (125l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (24l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l))),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794229
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a non-empty array array list of integers arr and\
    \ an integer k, return\n    // the sum of the elements with at most two digits\
    \ from the first k elements of arr.\n    // Example:\n    // >>> addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\n    // (24l)\n \
    \   // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n\
    \    public static long addElements(ArrayList<Long> arr, long k) {\n        long\
    \ sum = 0;\n        for (int i = 0; i < k; i++) {\n            if (arr.get(i)\
    \ < 100) {\n                sum += arr.get(i);\n            }\n        }\n   \
    \     return sum;\n    }\n    public static void main(String[] args) {\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)-2l, (long)-3l, (long)41l, (long)57l,\
    \ (long)76l, (long)87l, (long)88l, (long)99l))), (3l)) == (-4l));\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)121l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l))), (2l)) == (0l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)21l, (long)3l, (long)90l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (125l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (24l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l))),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794229
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a non-empty array array list of integers arr and\
    \ an integer k, return\n    // the sum of the elements with at most two digits\
    \ from the first k elements of arr.\n    // Example:\n    // >>> addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\n    // (24l)\n \
    \   // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n\
    \    public static long addElements(ArrayList<Long> arr, long k) {\n        //\
    \ Your code here\n        return 0;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-2l, (long)-3l, (long)41l, (long)57l, (long)76l, (long)87l, (long)88l,\
    \ (long)99l))), (3l)) == (-4l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)121l, (long)3l, (long)4000l, (long)5l, (long)6l))), (2l)) == (0l));\n\
    \    assert(addElements((new ArrayList<Long>(Arrays.asList((long)11l, (long)21l,\
    \ (long)3l, (long)90l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\
    \ == (125l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (24l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l))),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphp3hm0ls.java:22)\n"
  stdout: ''
  timestamp: 1659794229
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a non-empty array array list of integers arr and\
    \ an integer k, return\n    // the sum of the elements with at most two digits\
    \ from the first k elements of arr.\n    // Example:\n    // >>> addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\n    // (24l)\n \
    \   // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n\
    \    public static long addElements(ArrayList<Long> arr, long k) {\n        long\
    \ sum = 0;\n        for (int i = 0; i < k; i++) {\n            if (arr.get(i)\
    \ < 100) {\n                sum += arr.get(i);\n            }\n        }\n   \
    \     return sum;\n    }\n    public static void main(String[] args) {\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)-2l, (long)-3l, (long)41l, (long)57l,\
    \ (long)76l, (long)87l, (long)88l, (long)99l))), (3l)) == (-4l));\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)121l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l))), (2l)) == (0l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)21l, (long)3l, (long)90l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (125l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (24l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l))),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794229
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a non-empty array array list of integers arr and\
    \ an integer k, return\n    // the sum of the elements with at most two digits\
    \ from the first k elements of arr.\n    // Example:\n    // >>> addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\n    // (24l)\n \
    \   // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n\
    \    public static long addElements(ArrayList<Long> arr, long k) {\n        long\
    \ sum = 0;\n        for (int i = 0; i < k; i++) {\n            if (arr.get(i)\
    \ < 100) {\n                sum += arr.get(i);\n            }\n        }\n   \
    \     return sum;\n    }\n    public static void main(String[] args) {\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)-2l, (long)-3l, (long)41l, (long)57l,\
    \ (long)76l, (long)87l, (long)88l, (long)99l))), (3l)) == (-4l));\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)121l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l))), (2l)) == (0l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)21l, (long)3l, (long)90l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (125l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (24l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l))),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794229
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a non-empty array array list of integers arr and\
    \ an integer k, return\n    // the sum of the elements with at most two digits\
    \ from the first k elements of arr.\n    // Example:\n    // >>> addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\n    // (24l)\n \
    \   // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n\
    \    public static long addElements(ArrayList<Long> arr, long k) {\n        return\
    \ arr.stream().limit(k).filter(x -> x < 100).mapToLong(x -> x).sum();\n    }\n\
    \    public static void main(String[] args) {\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-2l, (long)-3l, (long)41l, (long)57l, (long)76l, (long)87l, (long)88l,\
    \ (long)99l))), (3l)) == (-4l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)121l, (long)3l, (long)4000l, (long)5l, (long)6l))), (2l)) == (0l));\n\
    \    assert(addElements((new ArrayList<Long>(Arrays.asList((long)11l, (long)21l,\
    \ (long)3l, (long)90l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\
    \ == (125l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (24l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l))),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794229
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a non-empty array array list of integers arr and\
    \ an integer k, return\n    // the sum of the elements with at most two digits\
    \ from the first k elements of arr.\n    // Example:\n    // >>> addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\n    // (24l)\n \
    \   // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n\
    \    public static long addElements(ArrayList<Long> arr, long k) {\n        long\
    \ sum = 0;\n        for (int i = 0; i < k; i++) {\n            long n = arr.get(i);\n\
    \            if (n < 100) {\n                sum += n;\n            }\n      \
    \  }\n        return sum;\n    }\n    public static void main(String[] args) {\n\
    \    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l, (long)-2l,\
    \ (long)-3l, (long)41l, (long)57l, (long)76l, (long)87l, (long)88l, (long)99l))),\
    \ (3l)) == (-4l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)121l, (long)3l, (long)4000l, (long)5l, (long)6l))), (2l)) == (0l));\n\
    \    assert(addElements((new ArrayList<Long>(Arrays.asList((long)11l, (long)21l,\
    \ (long)3l, (long)90l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\
    \ == (125l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (24l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l))),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794229
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a non-empty array array list of integers arr and\
    \ an integer k, return\n    // the sum of the elements with at most two digits\
    \ from the first k elements of arr.\n    // Example:\n    // >>> addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\n    // (24l)\n \
    \   // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n\
    \    public static long addElements(ArrayList<Long> arr, long k) {\n        //\
    \ Your code here\n        long sum = 0;\n        for (int i = 0; i < k; i++) {\n\
    \            if (arr.get(i) < 100) {\n                sum += arr.get(i);\n   \
    \         }\n        }\n        return sum;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-2l, (long)-3l, (long)41l, (long)57l, (long)76l, (long)87l, (long)88l,\
    \ (long)99l))), (3l)) == (-4l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)121l, (long)3l, (long)4000l, (long)5l, (long)6l))), (2l)) == (0l));\n\
    \    assert(addElements((new ArrayList<Long>(Arrays.asList((long)11l, (long)21l,\
    \ (long)3l, (long)90l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\
    \ == (125l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (24l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l))),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794229
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a non-empty array array list of integers arr and\
    \ an integer k, return\n    // the sum of the elements with at most two digits\
    \ from the first k elements of arr.\n    // Example:\n    // >>> addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\n    // (24l)\n \
    \   // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n\
    \    public static long addElements(ArrayList<Long> arr, long k) {\n        long\
    \ sum = 0;\n        for (int i = 0; i < k; i++) {\n            if (arr.get(i)\
    \ < 100) {\n                sum += arr.get(i);\n            }\n        }\n   \
    \     return sum;\n    }\n    public static void main(String[] args) {\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)-2l, (long)-3l, (long)41l, (long)57l,\
    \ (long)76l, (long)87l, (long)88l, (long)99l))), (3l)) == (-4l));\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)121l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l))), (2l)) == (0l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)21l, (long)3l, (long)90l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (125l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (24l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l))),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794229
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a non-empty array array list of integers arr and\
    \ an integer k, return\n    // the sum of the elements with at most two digits\
    \ from the first k elements of arr.\n    // Example:\n    // >>> addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\n    // (24l)\n \
    \   // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n\
    \    public static long addElements(ArrayList<Long> arr, long k) {\n        long\
    \ sum = 0;\n        for (int i = 0; i < k; i++) {\n            if (arr.get(i)\
    \ < 100) {\n                sum += arr.get(i);\n            }\n        }\n   \
    \     return sum;\n    }\n    public static void main(String[] args) {\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)-2l, (long)-3l, (long)41l, (long)57l,\
    \ (long)76l, (long)87l, (long)88l, (long)99l))), (3l)) == (-4l));\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)121l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l))), (2l)) == (0l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)21l, (long)3l, (long)90l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (125l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (24l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l))),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794229
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a non-empty array array list of integers arr and\
    \ an integer k, return\n    // the sum of the elements with at most two digits\
    \ from the first k elements of arr.\n    // Example:\n    // >>> addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\n    // (24l)\n \
    \   // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n\
    \    public static long addElements(ArrayList<Long> arr, long k) {\n        return\
    \ arr.stream().limit(k).filter(x -> x < 100).mapToLong(x -> x).sum();\n    }\n\
    \    public static void main(String[] args) {\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-2l, (long)-3l, (long)41l, (long)57l, (long)76l, (long)87l, (long)88l,\
    \ (long)99l))), (3l)) == (-4l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)121l, (long)3l, (long)4000l, (long)5l, (long)6l))), (2l)) == (0l));\n\
    \    assert(addElements((new ArrayList<Long>(Arrays.asList((long)11l, (long)21l,\
    \ (long)3l, (long)90l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\
    \ == (125l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (24l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l))),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794229
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a non-empty array array list of integers arr and\
    \ an integer k, return\n    // the sum of the elements with at most two digits\
    \ from the first k elements of arr.\n    // Example:\n    // >>> addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\n    // (24l)\n \
    \   // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n\
    \    public static long addElements(ArrayList<Long> arr, long k) {\n        return\
    \ arr.stream().filter(x -> x < 100).limit(k).reduce(0l, (x, y) -> x + y);\n  \
    \  }\n    public static void main(String[] args) {\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)-2l, (long)-3l, (long)41l, (long)57l,\
    \ (long)76l, (long)87l, (long)88l, (long)99l))), (3l)) == (-4l));\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)121l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l))), (2l)) == (0l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)21l, (long)3l, (long)90l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (125l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (24l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l))),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmscg8302.java:22)\n"
  stdout: ''
  timestamp: 1659794229
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a non-empty array array list of integers arr and\
    \ an integer k, return\n    // the sum of the elements with at most two digits\
    \ from the first k elements of arr.\n    // Example:\n    // >>> addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\n    // (24l)\n \
    \   // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n\
    \    public static long addElements(ArrayList<Long> arr, long k) {\n        long\
    \ sum = 0;\n        for (int i = 0; i < k; i++) {\n            if (arr.get(i)\
    \ < 100) {\n                sum += arr.get(i);\n            }\n        }\n   \
    \     return sum;\n    }\n    public static void main(String[] args) {\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)-2l, (long)-3l, (long)41l, (long)57l,\
    \ (long)76l, (long)87l, (long)88l, (long)99l))), (3l)) == (-4l));\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)121l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l))), (2l)) == (0l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)21l, (long)3l, (long)90l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (125l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (24l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l))),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794229
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a non-empty array array list of integers arr and\
    \ an integer k, return\n    // the sum of the elements with at most two digits\
    \ from the first k elements of arr.\n    // Example:\n    // >>> addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\n    // (24l)\n \
    \   // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n\
    \    public static long addElements(ArrayList<Long> arr, long k) {\n        long\
    \ sum = 0;\n        for (int i = 0; i < k; i++) {\n            if (arr.get(i)\
    \ < 100) {\n                sum += arr.get(i);\n            }\n        }\n   \
    \     return sum;\n    }\n    public static void main(String[] args) {\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)-2l, (long)-3l, (long)41l, (long)57l,\
    \ (long)76l, (long)87l, (long)88l, (long)99l))), (3l)) == (-4l));\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)121l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l))), (2l)) == (0l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)21l, (long)3l, (long)90l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (125l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (24l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l))),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794229
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a non-empty array array list of integers arr and\
    \ an integer k, return\n    // the sum of the elements with at most two digits\
    \ from the first k elements of arr.\n    // Example:\n    // >>> addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\n    // (24l)\n \
    \   // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n\
    \    public static long addElements(ArrayList<Long> arr, long k) {\n        return\
    \ arr.stream().limit(k).filter(x -> x < 100).reduce(0l, (x, y) -> x + y);\n  \
    \  }\n    public static void main(String[] args) {\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)-2l, (long)-3l, (long)41l, (long)57l,\
    \ (long)76l, (long)87l, (long)88l, (long)99l))), (3l)) == (-4l));\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)121l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l))), (2l)) == (0l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)21l, (long)3l, (long)90l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (125l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (24l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l))),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794229
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a non-empty array array list of integers arr and\
    \ an integer k, return\n    // the sum of the elements with at most two digits\
    \ from the first k elements of arr.\n    // Example:\n    // >>> addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\n    // (24l)\n \
    \   // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n\
    \    public static long addElements(ArrayList<Long> arr, long k) {\n        return\
    \ arr.stream().limit(k).filter(x -> x < 100).mapToLong(x -> x).sum();\n    }\n\
    \    public static void main(String[] args) {\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-2l, (long)-3l, (long)41l, (long)57l, (long)76l, (long)87l, (long)88l,\
    \ (long)99l))), (3l)) == (-4l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)121l, (long)3l, (long)4000l, (long)5l, (long)6l))), (2l)) == (0l));\n\
    \    assert(addElements((new ArrayList<Long>(Arrays.asList((long)11l, (long)21l,\
    \ (long)3l, (long)90l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\
    \ == (125l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (24l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l))),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794229
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a non-empty array array list of integers arr and\
    \ an integer k, return\n    // the sum of the elements with at most two digits\
    \ from the first k elements of arr.\n    // Example:\n    // >>> addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\n    // (24l)\n \
    \   // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n\
    \    public static long addElements(ArrayList<Long> arr, long k) {\n        long\
    \ sum = 0;\n        for (int i = 0; i < k; i++) {\n            long num = arr.get(i);\n\
    \            if (num < 100) {\n                sum += num;\n            }\n  \
    \      }\n        return sum;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l, (long)-2l,\
    \ (long)-3l, (long)41l, (long)57l, (long)76l, (long)87l, (long)88l, (long)99l))),\
    \ (3l)) == (-4l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)121l, (long)3l, (long)4000l, (long)5l, (long)6l))), (2l)) == (0l));\n\
    \    assert(addElements((new ArrayList<Long>(Arrays.asList((long)11l, (long)21l,\
    \ (long)3l, (long)90l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\
    \ == (125l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (24l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l))),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794229
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a non-empty array array list of integers arr and\
    \ an integer k, return\n    // the sum of the elements with at most two digits\
    \ from the first k elements of arr.\n    // Example:\n    // >>> addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\n    // (24l)\n \
    \   // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n\
    \    public static long addElements(ArrayList<Long> arr, long k) {\n        return\
    \ arr.stream().limit(k).filter(x -> x < 100).reduce(0l, (x, y) -> x + y);\n  \
    \  }\n    public static void main(String[] args) {\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)-2l, (long)-3l, (long)41l, (long)57l,\
    \ (long)76l, (long)87l, (long)88l, (long)99l))), (3l)) == (-4l));\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)121l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l))), (2l)) == (0l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)21l, (long)3l, (long)90l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (125l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (24l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l))),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794229
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a non-empty array array list of integers arr and\
    \ an integer k, return\n    // the sum of the elements with at most two digits\
    \ from the first k elements of arr.\n    // Example:\n    // >>> addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\n    // (24l)\n \
    \   // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n\
    \    public static long addElements(ArrayList<Long> arr, long k) {\n        return\
    \ arr.stream().limit(k).filter(x -> x < 100).reduce(0l, (x, y) -> x + y);\n  \
    \  }\n    public static void main(String[] args) {\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)-2l, (long)-3l, (long)41l, (long)57l,\
    \ (long)76l, (long)87l, (long)88l, (long)99l))), (3l)) == (-4l));\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)121l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l))), (2l)) == (0l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)21l, (long)3l, (long)90l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (125l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (24l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l))),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794229
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a non-empty array array list of integers arr and\
    \ an integer k, return\n    // the sum of the elements with at most two digits\
    \ from the first k elements of arr.\n    // Example:\n    // >>> addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\n    // (24l)\n \
    \   // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n\
    \    public static long addElements(ArrayList<Long> arr, long k) {\n        long\
    \ sum = 0;\n        for (int i = 0; i < k; i++) {\n            long num = arr.get(i);\n\
    \            if (num < 100) {\n                sum += num;\n            }\n  \
    \      }\n        return sum;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l, (long)-2l,\
    \ (long)-3l, (long)41l, (long)57l, (long)76l, (long)87l, (long)88l, (long)99l))),\
    \ (3l)) == (-4l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)121l, (long)3l, (long)4000l, (long)5l, (long)6l))), (2l)) == (0l));\n\
    \    assert(addElements((new ArrayList<Long>(Arrays.asList((long)11l, (long)21l,\
    \ (long)3l, (long)90l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\
    \ == (125l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (24l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l))),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794229
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a non-empty array array list of integers arr and\
    \ an integer k, return\n    // the sum of the elements with at most two digits\
    \ from the first k elements of arr.\n    // Example:\n    // >>> addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\n    // (24l)\n \
    \   // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n\
    \    public static long addElements(ArrayList<Long> arr, long k) {\n        return\
    \ arr.stream().limit(k).filter(x -> x < 100).reduce(0l, (x, y) -> x + y);\n  \
    \  }\n    public static void main(String[] args) {\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)-2l, (long)-3l, (long)41l, (long)57l,\
    \ (long)76l, (long)87l, (long)88l, (long)99l))), (3l)) == (-4l));\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)121l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l))), (2l)) == (0l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)21l, (long)3l, (long)90l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (125l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (24l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l))),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794229
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a non-empty array array list of integers arr and\
    \ an integer k, return\n    // the sum of the elements with at most two digits\
    \ from the first k elements of arr.\n    // Example:\n    // >>> addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\n    // (24l)\n \
    \   // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n\
    \    public static long addElements(ArrayList<Long> arr, long k) {\n        long\
    \ sum = 0;\n        for (int i = 0; i < k; i++) {\n            if (arr.get(i)\
    \ < 100) {\n                sum += arr.get(i);\n            }\n        }\n   \
    \     return sum;\n    }\n    public static void main(String[] args) {\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)-2l, (long)-3l, (long)41l, (long)57l,\
    \ (long)76l, (long)87l, (long)88l, (long)99l))), (3l)) == (-4l));\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)121l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l))), (2l)) == (0l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)21l, (long)3l, (long)90l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (125l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (24l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l))),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794229
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a non-empty array array list of integers arr and\
    \ an integer k, return\n    // the sum of the elements with at most two digits\
    \ from the first k elements of arr.\n    // Example:\n    // >>> addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\n    // (24l)\n \
    \   // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n\
    \    public static long addElements(ArrayList<Long> arr, long k) {\n        long\
    \ sum = 0;\n        for (int i = 0; i < k; i++) {\n            if (arr.get(i)\
    \ < 100) {\n                sum += arr.get(i);\n            }\n        }\n   \
    \     return sum;\n    }\n    public static void main(String[] args) {\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)-2l, (long)-3l, (long)41l, (long)57l,\
    \ (long)76l, (long)87l, (long)88l, (long)99l))), (3l)) == (-4l));\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)121l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l))), (2l)) == (0l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)21l, (long)3l, (long)90l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (125l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (24l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l))),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794229
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a non-empty array array list of integers arr and\
    \ an integer k, return\n    // the sum of the elements with at most two digits\
    \ from the first k elements of arr.\n    // Example:\n    // >>> addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\n    // (24l)\n \
    \   // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n\
    \    public static long addElements(ArrayList<Long> arr, long k) {\n        long\
    \ sum = 0;\n        for (int i = 0; i < k; i++) {\n            if (arr.get(i)\
    \ < 100) {\n                sum += arr.get(i);\n            }\n        }\n   \
    \     return sum;\n    }\n    public static void main(String[] args) {\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)-2l, (long)-3l, (long)41l, (long)57l,\
    \ (long)76l, (long)87l, (long)88l, (long)99l))), (3l)) == (-4l));\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)121l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l))), (2l)) == (0l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)21l, (long)3l, (long)90l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (125l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (24l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l))),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794229
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a non-empty array array list of integers arr and\
    \ an integer k, return\n    // the sum of the elements with at most two digits\
    \ from the first k elements of arr.\n    // Example:\n    // >>> addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\n    // (24l)\n \
    \   // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n\
    \    public static long addElements(ArrayList<Long> arr, long k) {\n        return\
    \ arr.stream().limit(k).filter(x -> x < 100).reduce(0l, (x, y) -> x + y);\n  \
    \  }\n    public static void main(String[] args) {\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)-2l, (long)-3l, (long)41l, (long)57l,\
    \ (long)76l, (long)87l, (long)88l, (long)99l))), (3l)) == (-4l));\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)121l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l))), (2l)) == (0l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)21l, (long)3l, (long)90l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (125l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (24l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l))),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794229
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a non-empty array array list of integers arr and\
    \ an integer k, return\n    // the sum of the elements with at most two digits\
    \ from the first k elements of arr.\n    // Example:\n    // >>> addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\n    // (24l)\n \
    \   // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n\
    \    public static long addElements(ArrayList<Long> arr, long k) {\n        long\
    \ sum = 0;\n        for (int i = 0; i < k; i++) {\n            if (arr.get(i)\
    \ < 100) {\n                sum += arr.get(i);\n            }\n        }\n   \
    \     return sum;\n    }\n    public static void main(String[] args) {\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)-2l, (long)-3l, (long)41l, (long)57l,\
    \ (long)76l, (long)87l, (long)88l, (long)99l))), (3l)) == (-4l));\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)121l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l))), (2l)) == (0l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)21l, (long)3l, (long)90l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (125l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (24l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l))),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794229
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a non-empty array array list of integers arr and\
    \ an integer k, return\n    // the sum of the elements with at most two digits\
    \ from the first k elements of arr.\n    // Example:\n    // >>> addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\n    // (24l)\n \
    \   // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n\
    \    public static long addElements(ArrayList<Long> arr, long k) {\n        long\
    \ sum = 0;\n        for (int i = 0; i < k; i++) {\n            long num = arr.get(i);\n\
    \            if (num < 100) {\n                sum += num;\n            }\n  \
    \      }\n        return sum;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l, (long)-2l,\
    \ (long)-3l, (long)41l, (long)57l, (long)76l, (long)87l, (long)88l, (long)99l))),\
    \ (3l)) == (-4l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)121l, (long)3l, (long)4000l, (long)5l, (long)6l))), (2l)) == (0l));\n\
    \    assert(addElements((new ArrayList<Long>(Arrays.asList((long)11l, (long)21l,\
    \ (long)3l, (long)90l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\
    \ == (125l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (24l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l))),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794229
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a non-empty array array list of integers arr and\
    \ an integer k, return\n    // the sum of the elements with at most two digits\
    \ from the first k elements of arr.\n    // Example:\n    // >>> addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\n    // (24l)\n \
    \   // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n\
    \    public static long addElements(ArrayList<Long> arr, long k) {\n        long\
    \ sum = 0;\n        for (int i = 0; i < k; i++) {\n            long num = arr.get(i);\n\
    \            if (num < 100) {\n                sum += num;\n            }\n  \
    \      }\n        return sum;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l, (long)-2l,\
    \ (long)-3l, (long)41l, (long)57l, (long)76l, (long)87l, (long)88l, (long)99l))),\
    \ (3l)) == (-4l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)121l, (long)3l, (long)4000l, (long)5l, (long)6l))), (2l)) == (0l));\n\
    \    assert(addElements((new ArrayList<Long>(Arrays.asList((long)11l, (long)21l,\
    \ (long)3l, (long)90l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\
    \ == (125l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (24l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l))),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794229
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a non-empty array array list of integers arr and\
    \ an integer k, return\n    // the sum of the elements with at most two digits\
    \ from the first k elements of arr.\n    // Example:\n    // >>> addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\n    // (24l)\n \
    \   // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n\
    \    public static long addElements(ArrayList<Long> arr, long k) {\n        long\
    \ sum = 0;\n        for (int i = 0; i < k; i++) {\n            if (arr.get(i)\
    \ < 100) {\n                sum += arr.get(i);\n            }\n        }\n   \
    \     return sum;\n    }\n    public static void main(String[] args) {\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)-2l, (long)-3l, (long)41l, (long)57l,\
    \ (long)76l, (long)87l, (long)88l, (long)99l))), (3l)) == (-4l));\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)121l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l))), (2l)) == (0l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)21l, (long)3l, (long)90l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (125l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (24l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l))),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794229
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a non-empty array array list of integers arr and\
    \ an integer k, return\n    // the sum of the elements with at most two digits\
    \ from the first k elements of arr.\n    // Example:\n    // >>> addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\n    // (24l)\n \
    \   // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n\
    \    public static long addElements(ArrayList<Long> arr, long k) {\n        long\
    \ sum = 0;\n        for (int i = 0; i < k; i++) {\n            long num = arr.get(i);\n\
    \            if (num < 100) {\n                sum += num;\n            }\n  \
    \      }\n        return sum;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l, (long)-2l,\
    \ (long)-3l, (long)41l, (long)57l, (long)76l, (long)87l, (long)88l, (long)99l))),\
    \ (3l)) == (-4l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)121l, (long)3l, (long)4000l, (long)5l, (long)6l))), (2l)) == (0l));\n\
    \    assert(addElements((new ArrayList<Long>(Arrays.asList((long)11l, (long)21l,\
    \ (long)3l, (long)90l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\
    \ == (125l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (24l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l))),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794229
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a non-empty array array list of integers arr and\
    \ an integer k, return\n    // the sum of the elements with at most two digits\
    \ from the first k elements of arr.\n    // Example:\n    // >>> addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\n    // (24l)\n \
    \   // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n\
    \    public static long addElements(ArrayList<Long> arr, long k) {\n        long\
    \ sum = 0;\n        for (int i = 0; i < k; i++) {\n            if (arr.get(i)\
    \ < 100) {\n                sum += arr.get(i);\n            }\n        }\n   \
    \     return sum;\n    }\n    public static void main(String[] args) {\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)-2l, (long)-3l, (long)41l, (long)57l,\
    \ (long)76l, (long)87l, (long)88l, (long)99l))), (3l)) == (-4l));\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)121l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l))), (2l)) == (0l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)21l, (long)3l, (long)90l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (125l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (24l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l))),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794229
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a non-empty array array list of integers arr and\
    \ an integer k, return\n    // the sum of the elements with at most two digits\
    \ from the first k elements of arr.\n    // Example:\n    // >>> addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\n    // (24l)\n \
    \   // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n\
    \    public static long addElements(ArrayList<Long> arr, long k) {\n        long\
    \ sum = 0;\n        for (int i = 0; i < k; i++) {\n            long num = arr.get(i);\n\
    \            if (num < 100) {\n                sum += num;\n            }\n  \
    \      }\n        return sum;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l, (long)-2l,\
    \ (long)-3l, (long)41l, (long)57l, (long)76l, (long)87l, (long)88l, (long)99l))),\
    \ (3l)) == (-4l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)121l, (long)3l, (long)4000l, (long)5l, (long)6l))), (2l)) == (0l));\n\
    \    assert(addElements((new ArrayList<Long>(Arrays.asList((long)11l, (long)21l,\
    \ (long)3l, (long)90l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\
    \ == (125l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (24l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l))),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794229
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a non-empty array array list of integers arr and\
    \ an integer k, return\n    // the sum of the elements with at most two digits\
    \ from the first k elements of arr.\n    // Example:\n    // >>> addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\n    // (24l)\n \
    \   // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n\
    \    public static long addElements(ArrayList<Long> arr, long k) {\n        return\
    \ arr.stream().limit(k).filter(x -> x < 100).reduce(0l, (x, y) -> x + y);\n  \
    \  }\n    public static void main(String[] args) {\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)-2l, (long)-3l, (long)41l, (long)57l,\
    \ (long)76l, (long)87l, (long)88l, (long)99l))), (3l)) == (-4l));\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)121l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l))), (2l)) == (0l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)21l, (long)3l, (long)90l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (125l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (24l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l))),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794229
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a non-empty array array list of integers arr and\
    \ an integer k, return\n    // the sum of the elements with at most two digits\
    \ from the first k elements of arr.\n    // Example:\n    // >>> addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\n    // (24l)\n \
    \   // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n\
    \    public static long addElements(ArrayList<Long> arr, long k) {\n        long\
    \ sum = 0;\n        for (int i = 0; i < k; i++) {\n            if (arr.get(i)\
    \ < 100) {\n                sum += arr.get(i);\n            }\n        }\n   \
    \     return sum;\n    }\n    public static void main(String[] args) {\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)-2l, (long)-3l, (long)41l, (long)57l,\
    \ (long)76l, (long)87l, (long)88l, (long)99l))), (3l)) == (-4l));\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)121l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l))), (2l)) == (0l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)21l, (long)3l, (long)90l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (125l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (24l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l))),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794229
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a non-empty array array list of integers arr and\
    \ an integer k, return\n    // the sum of the elements with at most two digits\
    \ from the first k elements of arr.\n    // Example:\n    // >>> addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\n    // (24l)\n \
    \   // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n\
    \    public static long addElements(ArrayList<Long> arr, long k) {\n        return\
    \ arr.stream().filter(x -> x < 100).limit(k).mapToLong(x -> x).sum();\n    }\n\
    \    public static void main(String[] args) {\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-2l, (long)-3l, (long)41l, (long)57l, (long)76l, (long)87l, (long)88l,\
    \ (long)99l))), (3l)) == (-4l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)121l, (long)3l, (long)4000l, (long)5l, (long)6l))), (2l)) == (0l));\n\
    \    assert(addElements((new ArrayList<Long>(Arrays.asList((long)11l, (long)21l,\
    \ (long)3l, (long)90l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\
    \ == (125l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (24l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l))),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpb03goepm.java:22)\n"
  stdout: ''
  timestamp: 1659794229
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a non-empty array array list of integers arr and\
    \ an integer k, return\n    // the sum of the elements with at most two digits\
    \ from the first k elements of arr.\n    // Example:\n    // >>> addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\n    // (24l)\n \
    \   // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n\
    \    public static long addElements(ArrayList<Long> arr, long k) {\n        long\
    \ sum = 0;\n        for (int i = 0; i < k; i++) {\n            if (arr.get(i)\
    \ < 100) {\n                sum += arr.get(i);\n            }\n        }\n   \
    \     return sum;\n    }\n    public static void main(String[] args) {\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)-2l, (long)-3l, (long)41l, (long)57l,\
    \ (long)76l, (long)87l, (long)88l, (long)99l))), (3l)) == (-4l));\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)121l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l))), (2l)) == (0l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)21l, (long)3l, (long)90l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (125l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (24l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l))),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794229
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a non-empty array array list of integers arr and\
    \ an integer k, return\n    // the sum of the elements with at most two digits\
    \ from the first k elements of arr.\n    // Example:\n    // >>> addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\n    // (24l)\n \
    \   // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n\
    \    public static long addElements(ArrayList<Long> arr, long k) {\n        long\
    \ sum = 0;\n        for (int i = 0; i < k; i++) {\n            if (arr.get(i)\
    \ < 100) {\n                sum += arr.get(i);\n            }\n        }\n   \
    \     return sum;\n    }\n    public static void main(String[] args) {\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)-2l, (long)-3l, (long)41l, (long)57l,\
    \ (long)76l, (long)87l, (long)88l, (long)99l))), (3l)) == (-4l));\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)121l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l))), (2l)) == (0l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)21l, (long)3l, (long)90l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (125l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (24l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l))),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794229
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a non-empty array array list of integers arr and\
    \ an integer k, return\n    // the sum of the elements with at most two digits\
    \ from the first k elements of arr.\n    // Example:\n    // >>> addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\n    // (24l)\n \
    \   // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n\
    \    public static long addElements(ArrayList<Long> arr, long k) {\n        long\
    \ sum = 0;\n        for (int i = 0; i < k; i++) {\n            if (arr.get(i)\
    \ < 100) {\n                sum += arr.get(i);\n            }\n        }\n   \
    \     return sum;\n    }\n    public static void main(String[] args) {\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)-2l, (long)-3l, (long)41l, (long)57l,\
    \ (long)76l, (long)87l, (long)88l, (long)99l))), (3l)) == (-4l));\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)121l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l))), (2l)) == (0l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)21l, (long)3l, (long)90l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (125l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (24l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l))),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794229
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a non-empty array array list of integers arr and\
    \ an integer k, return\n    // the sum of the elements with at most two digits\
    \ from the first k elements of arr.\n    // Example:\n    // >>> addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\n    // (24l)\n \
    \   // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n\
    \    public static long addElements(ArrayList<Long> arr, long k) {\n        long\
    \ sum = 0;\n        for (int i = 0; i < k; i++) {\n            long num = arr.get(i);\n\
    \            if (num < 100) {\n                sum += num;\n            }\n  \
    \      }\n        return sum;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l, (long)-2l,\
    \ (long)-3l, (long)41l, (long)57l, (long)76l, (long)87l, (long)88l, (long)99l))),\
    \ (3l)) == (-4l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)121l, (long)3l, (long)4000l, (long)5l, (long)6l))), (2l)) == (0l));\n\
    \    assert(addElements((new ArrayList<Long>(Arrays.asList((long)11l, (long)21l,\
    \ (long)3l, (long)90l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\
    \ == (125l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (24l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l))),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794229
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a non-empty array array list of integers arr and\
    \ an integer k, return\n    // the sum of the elements with at most two digits\
    \ from the first k elements of arr.\n    // Example:\n    // >>> addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\n    // (24l)\n \
    \   // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n\
    \    public static long addElements(ArrayList<Long> arr, long k) {\n        long\
    \ sum = 0;\n        for (int i = 0; i < k; i++) {\n            if (arr.get(i)\
    \ < 100) {\n                sum += arr.get(i);\n            }\n        }\n   \
    \     return sum;\n    }\n    public static void main(String[] args) {\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)-2l, (long)-3l, (long)41l, (long)57l,\
    \ (long)76l, (long)87l, (long)88l, (long)99l))), (3l)) == (-4l));\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)121l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l))), (2l)) == (0l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)21l, (long)3l, (long)90l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (125l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (24l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l))),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794229
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a non-empty array array list of integers arr and\
    \ an integer k, return\n    // the sum of the elements with at most two digits\
    \ from the first k elements of arr.\n    // Example:\n    // >>> addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\n    // (24l)\n \
    \   // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n\
    \    public static long addElements(ArrayList<Long> arr, long k) {\n        long\
    \ sum = 0;\n        for (int i = 0; i < k; i++) {\n            if (arr.get(i)\
    \ < 100) {\n                sum += arr.get(i);\n            }\n        }\n   \
    \     return sum;\n    }\n    public static void main(String[] args) {\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)-2l, (long)-3l, (long)41l, (long)57l,\
    \ (long)76l, (long)87l, (long)88l, (long)99l))), (3l)) == (-4l));\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)121l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l))), (2l)) == (0l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)21l, (long)3l, (long)90l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (125l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (24l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l))),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794229
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a non-empty array array list of integers arr and\
    \ an integer k, return\n    // the sum of the elements with at most two digits\
    \ from the first k elements of arr.\n    // Example:\n    // >>> addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\n    // (24l)\n \
    \   // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n\
    \    public static long addElements(ArrayList<Long> arr, long k) {\n        long\
    \ sum = 0;\n        for (int i = 0; i < k; i++) {\n            if (arr.get(i)\
    \ < 100) {\n                sum += arr.get(i);\n            }\n        }\n   \
    \     return sum;\n    }\n    public static void main(String[] args) {\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)-2l, (long)-3l, (long)41l, (long)57l,\
    \ (long)76l, (long)87l, (long)88l, (long)99l))), (3l)) == (-4l));\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)121l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l))), (2l)) == (0l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)21l, (long)3l, (long)90l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (125l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (24l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l))),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794229
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a non-empty array array list of integers arr and\
    \ an integer k, return\n    // the sum of the elements with at most two digits\
    \ from the first k elements of arr.\n    // Example:\n    // >>> addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\n    // (24l)\n \
    \   // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n\
    \    public static long addElements(ArrayList<Long> arr, long k) {\n        return\
    \ arr.stream().limit(k).filter(x -> x < 100).mapToLong(x -> x).sum();\n    }\n\
    \    public static void main(String[] args) {\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-2l, (long)-3l, (long)41l, (long)57l, (long)76l, (long)87l, (long)88l,\
    \ (long)99l))), (3l)) == (-4l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)121l, (long)3l, (long)4000l, (long)5l, (long)6l))), (2l)) == (0l));\n\
    \    assert(addElements((new ArrayList<Long>(Arrays.asList((long)11l, (long)21l,\
    \ (long)3l, (long)90l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\
    \ == (125l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (24l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l))),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794229
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a non-empty array array list of integers arr and\
    \ an integer k, return\n    // the sum of the elements with at most two digits\
    \ from the first k elements of arr.\n    // Example:\n    // >>> addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\n    // (24l)\n \
    \   // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n\
    \    public static long addElements(ArrayList<Long> arr, long k) {\n        long\
    \ sum = 0;\n        for (int i = 0; i < k; i++) {\n            long num = arr.get(i);\n\
    \            if (num < 100) {\n                sum += num;\n            }\n  \
    \      }\n        return sum;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l, (long)-2l,\
    \ (long)-3l, (long)41l, (long)57l, (long)76l, (long)87l, (long)88l, (long)99l))),\
    \ (3l)) == (-4l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)121l, (long)3l, (long)4000l, (long)5l, (long)6l))), (2l)) == (0l));\n\
    \    assert(addElements((new ArrayList<Long>(Arrays.asList((long)11l, (long)21l,\
    \ (long)3l, (long)90l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\
    \ == (125l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (24l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l))),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794229
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a non-empty array array list of integers arr and\
    \ an integer k, return\n    // the sum of the elements with at most two digits\
    \ from the first k elements of arr.\n    // Example:\n    // >>> addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\n    // (24l)\n \
    \   // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n\
    \    public static long addElements(ArrayList<Long> arr, long k) {\n        //\
    \ Your code here\n        return 0;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-2l, (long)-3l, (long)41l, (long)57l, (long)76l, (long)87l, (long)88l,\
    \ (long)99l))), (3l)) == (-4l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)121l, (long)3l, (long)4000l, (long)5l, (long)6l))), (2l)) == (0l));\n\
    \    assert(addElements((new ArrayList<Long>(Arrays.asList((long)11l, (long)21l,\
    \ (long)3l, (long)90l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\
    \ == (125l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (24l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l))),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphp3hm0ls.java:22)\n"
  stdout: ''
  timestamp: 1659794229
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a non-empty array array list of integers arr and\
    \ an integer k, return\n    // the sum of the elements with at most two digits\
    \ from the first k elements of arr.\n    // Example:\n    // >>> addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\n    // (24l)\n \
    \   // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n\
    \    public static long addElements(ArrayList<Long> arr, long k) {\n        long\
    \ sum = 0;\n        for (int i = 0; i < k; i++) {\n            if (arr.get(i)\
    \ < 100) {\n                sum += arr.get(i);\n            }\n        }\n   \
    \     return sum;\n    }\n    public static void main(String[] args) {\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)-2l, (long)-3l, (long)41l, (long)57l,\
    \ (long)76l, (long)87l, (long)88l, (long)99l))), (3l)) == (-4l));\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)121l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l))), (2l)) == (0l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)21l, (long)3l, (long)90l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (125l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (24l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l))),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794229
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a non-empty array array list of integers arr and\
    \ an integer k, return\n    // the sum of the elements with at most two digits\
    \ from the first k elements of arr.\n    // Example:\n    // >>> addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\n    // (24l)\n \
    \   // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n\
    \    public static long addElements(ArrayList<Long> arr, long k) {\n        return\
    \ arr.stream().limit(k).filter(x -> x < 100).mapToLong(x -> x).sum();\n    }\n\
    \    public static void main(String[] args) {\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-2l, (long)-3l, (long)41l, (long)57l, (long)76l, (long)87l, (long)88l,\
    \ (long)99l))), (3l)) == (-4l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)121l, (long)3l, (long)4000l, (long)5l, (long)6l))), (2l)) == (0l));\n\
    \    assert(addElements((new ArrayList<Long>(Arrays.asList((long)11l, (long)21l,\
    \ (long)3l, (long)90l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\
    \ == (125l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (24l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l))),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794229
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a non-empty array array list of integers arr and\
    \ an integer k, return\n    // the sum of the elements with at most two digits\
    \ from the first k elements of arr.\n    // Example:\n    // >>> addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\n    // (24l)\n \
    \   // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n\
    \    public static long addElements(ArrayList<Long> arr, long k) {\n        long\
    \ sum = 0;\n        for (int i = 0; i < k; i++) {\n            if (arr.get(i)\
    \ < 100) {\n                sum += arr.get(i);\n            }\n        }\n   \
    \     return sum;\n    }\n    public static void main(String[] args) {\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)-2l, (long)-3l, (long)41l, (long)57l,\
    \ (long)76l, (long)87l, (long)88l, (long)99l))), (3l)) == (-4l));\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)121l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l))), (2l)) == (0l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)21l, (long)3l, (long)90l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (125l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (24l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l))),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794229
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a non-empty array array list of integers arr and\
    \ an integer k, return\n    // the sum of the elements with at most two digits\
    \ from the first k elements of arr.\n    // Example:\n    // >>> addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\n    // (24l)\n \
    \   // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n\
    \    public static long addElements(ArrayList<Long> arr, long k) {\n        long\
    \ sum = 0;\n        for (int i = 0; i < k; i++) {\n            long num = arr.get(i);\n\
    \            if (num < 100) {\n                sum += num;\n            }\n  \
    \      }\n        return sum;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l, (long)-2l,\
    \ (long)-3l, (long)41l, (long)57l, (long)76l, (long)87l, (long)88l, (long)99l))),\
    \ (3l)) == (-4l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)121l, (long)3l, (long)4000l, (long)5l, (long)6l))), (2l)) == (0l));\n\
    \    assert(addElements((new ArrayList<Long>(Arrays.asList((long)11l, (long)21l,\
    \ (long)3l, (long)90l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\
    \ == (125l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (24l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l))),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794229
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a non-empty array array list of integers arr and\
    \ an integer k, return\n    // the sum of the elements with at most two digits\
    \ from the first k elements of arr.\n    // Example:\n    // >>> addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\n    // (24l)\n \
    \   // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n\
    \    public static long addElements(ArrayList<Long> arr, long k) {\n        long\
    \ sum = 0;\n        for (int i = 0; i < k; i++) {\n            if (arr.get(i)\
    \ < 100) {\n                sum += arr.get(i);\n            }\n        }\n   \
    \     return sum;\n    }\n    public static void main(String[] args) {\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)-2l, (long)-3l, (long)41l, (long)57l,\
    \ (long)76l, (long)87l, (long)88l, (long)99l))), (3l)) == (-4l));\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)121l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l))), (2l)) == (0l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)21l, (long)3l, (long)90l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (125l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (24l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l))),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794229
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a non-empty array array list of integers arr and\
    \ an integer k, return\n    // the sum of the elements with at most two digits\
    \ from the first k elements of arr.\n    // Example:\n    // >>> addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\n    // (24l)\n \
    \   // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n\
    \    public static long addElements(ArrayList<Long> arr, long k) {\n        long\
    \ sum = 0;\n        for (int i = 0; i < k; i++) {\n            if (arr.get(i)\
    \ < 100) {\n                sum += arr.get(i);\n            }\n        }\n   \
    \     return sum;\n    }\n    public static void main(String[] args) {\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)-2l, (long)-3l, (long)41l, (long)57l,\
    \ (long)76l, (long)87l, (long)88l, (long)99l))), (3l)) == (-4l));\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)121l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l))), (2l)) == (0l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)21l, (long)3l, (long)90l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (125l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (24l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l))),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794229
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a non-empty array array list of integers arr and\
    \ an integer k, return\n    // the sum of the elements with at most two digits\
    \ from the first k elements of arr.\n    // Example:\n    // >>> addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\n    // (24l)\n \
    \   // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n\
    \    public static long addElements(ArrayList<Long> arr, long k) {\n        long\
    \ sum = 0;\n        for (int i = 0; i < k; i++) {\n            if (arr.get(i)\
    \ < 100) {\n                sum += arr.get(i);\n            }\n        }\n   \
    \     return sum;\n    }\n    public static void main(String[] args) {\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)-2l, (long)-3l, (long)41l, (long)57l,\
    \ (long)76l, (long)87l, (long)88l, (long)99l))), (3l)) == (-4l));\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)121l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l))), (2l)) == (0l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)21l, (long)3l, (long)90l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (125l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (24l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l))),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794229
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a non-empty array array list of integers arr and\
    \ an integer k, return\n    // the sum of the elements with at most two digits\
    \ from the first k elements of arr.\n    // Example:\n    // >>> addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\n    // (24l)\n \
    \   // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n\
    \    public static long addElements(ArrayList<Long> arr, long k) {\n        return\
    \ arr.stream().limit(k).filter(x -> x < 100).reduce(0l, (x, y) -> x + y);\n  \
    \  }\n    public static void main(String[] args) {\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)-2l, (long)-3l, (long)41l, (long)57l,\
    \ (long)76l, (long)87l, (long)88l, (long)99l))), (3l)) == (-4l));\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)121l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l))), (2l)) == (0l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)21l, (long)3l, (long)90l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (125l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (24l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l))),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794229
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a non-empty array array list of integers arr and\
    \ an integer k, return\n    // the sum of the elements with at most two digits\
    \ from the first k elements of arr.\n    // Example:\n    // >>> addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\n    // (24l)\n \
    \   // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n\
    \    public static long addElements(ArrayList<Long> arr, long k) {\n        //\
    \ Write your code here\n        return 0;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-2l, (long)-3l, (long)41l, (long)57l, (long)76l, (long)87l, (long)88l,\
    \ (long)99l))), (3l)) == (-4l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)121l, (long)3l, (long)4000l, (long)5l, (long)6l))), (2l)) == (0l));\n\
    \    assert(addElements((new ArrayList<Long>(Arrays.asList((long)11l, (long)21l,\
    \ (long)3l, (long)90l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\
    \ == (125l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (24l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l))),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpe3z1epxe.java:22)\n"
  stdout: ''
  timestamp: 1659794229
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a non-empty array array list of integers arr and\
    \ an integer k, return\n    // the sum of the elements with at most two digits\
    \ from the first k elements of arr.\n    // Example:\n    // >>> addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\n    // (24l)\n \
    \   // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n\
    \    public static long addElements(ArrayList<Long> arr, long k) {\n        long\
    \ sum = 0;\n        for (int i = 0; i < k; i++) {\n            if (arr.get(i)\
    \ < 100) {\n                sum += arr.get(i);\n            }\n        }\n   \
    \     return sum;\n    }\n    public static void main(String[] args) {\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)-2l, (long)-3l, (long)41l, (long)57l,\
    \ (long)76l, (long)87l, (long)88l, (long)99l))), (3l)) == (-4l));\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)121l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l))), (2l)) == (0l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)21l, (long)3l, (long)90l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (125l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (24l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l))),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794229
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a non-empty array array list of integers arr and\
    \ an integer k, return\n    // the sum of the elements with at most two digits\
    \ from the first k elements of arr.\n    // Example:\n    // >>> addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\n    // (24l)\n \
    \   // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n\
    \    public static long addElements(ArrayList<Long> arr, long k) {\n        long\
    \ sum = 0;\n        for (int i = 0; i < k; i++) {\n            if (arr.get(i)\
    \ < 100) {\n                sum += arr.get(i);\n            }\n        }\n   \
    \     return sum;\n    }\n    public static void main(String[] args) {\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)-2l, (long)-3l, (long)41l, (long)57l,\
    \ (long)76l, (long)87l, (long)88l, (long)99l))), (3l)) == (-4l));\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)121l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l))), (2l)) == (0l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)21l, (long)3l, (long)90l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (125l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (24l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l))),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794229
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a non-empty array array list of integers arr and\
    \ an integer k, return\n    // the sum of the elements with at most two digits\
    \ from the first k elements of arr.\n    // Example:\n    // >>> addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\n    // (24l)\n \
    \   // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n\
    \    public static long addElements(ArrayList<Long> arr, long k) {\n        return\
    \ arr.stream().limit(k).filter(x -> x < 100).mapToLong(x -> x).sum();\n    }\n\
    \    public static void main(String[] args) {\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-2l, (long)-3l, (long)41l, (long)57l, (long)76l, (long)87l, (long)88l,\
    \ (long)99l))), (3l)) == (-4l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)121l, (long)3l, (long)4000l, (long)5l, (long)6l))), (2l)) == (0l));\n\
    \    assert(addElements((new ArrayList<Long>(Arrays.asList((long)11l, (long)21l,\
    \ (long)3l, (long)90l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\
    \ == (125l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (24l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l))),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794229
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a non-empty array array list of integers arr and\
    \ an integer k, return\n    // the sum of the elements with at most two digits\
    \ from the first k elements of arr.\n    // Example:\n    // >>> addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\n    // (24l)\n \
    \   // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n\
    \    public static long addElements(ArrayList<Long> arr, long k) {\n        long\
    \ result = 0;\n        for (int i = 0; i < k; i++) {\n            long n = arr.get(i);\n\
    \            if (n < 100) {\n                result += n;\n            }\n   \
    \     }\n        return result;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l, (long)-2l,\
    \ (long)-3l, (long)41l, (long)57l, (long)76l, (long)87l, (long)88l, (long)99l))),\
    \ (3l)) == (-4l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)121l, (long)3l, (long)4000l, (long)5l, (long)6l))), (2l)) == (0l));\n\
    \    assert(addElements((new ArrayList<Long>(Arrays.asList((long)11l, (long)21l,\
    \ (long)3l, (long)90l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\
    \ == (125l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (24l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l))),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794229
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a non-empty array array list of integers arr and\
    \ an integer k, return\n    // the sum of the elements with at most two digits\
    \ from the first k elements of arr.\n    // Example:\n    // >>> addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\n    // (24l)\n \
    \   // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n\
    \    public static long addElements(ArrayList<Long> arr, long k) {\n        return\
    \ arr.stream().limit(k).filter(x -> x < 100).reduce(0l, (x, y) -> x + y);\n  \
    \  }\n    public static void main(String[] args) {\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)-2l, (long)-3l, (long)41l, (long)57l,\
    \ (long)76l, (long)87l, (long)88l, (long)99l))), (3l)) == (-4l));\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)121l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l))), (2l)) == (0l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)21l, (long)3l, (long)90l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (125l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (24l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l))),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794229
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a non-empty array array list of integers arr and\
    \ an integer k, return\n    // the sum of the elements with at most two digits\
    \ from the first k elements of arr.\n    // Example:\n    // >>> addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\n    // (24l)\n \
    \   // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n\
    \    public static long addElements(ArrayList<Long> arr, long k) {\n        long\
    \ sum = 0;\n        for (int i = 0; i < k; i++) {\n            if (arr.get(i)\
    \ < 100) {\n                sum += arr.get(i);\n            }\n        }\n   \
    \     return sum;\n    }\n    public static void main(String[] args) {\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)-2l, (long)-3l, (long)41l, (long)57l,\
    \ (long)76l, (long)87l, (long)88l, (long)99l))), (3l)) == (-4l));\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)121l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l))), (2l)) == (0l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)21l, (long)3l, (long)90l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (125l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (24l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l))),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794229
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a non-empty array array list of integers arr and\
    \ an integer k, return\n    // the sum of the elements with at most two digits\
    \ from the first k elements of arr.\n    // Example:\n    // >>> addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\n    // (24l)\n \
    \   // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n\
    \    public static long addElements(ArrayList<Long> arr, long k) {\n        return\
    \ arr.stream().filter(x -> x < 100).limit(k).reduce(0l, (x, y) -> x + y);\n  \
    \  }\n    public static void main(String[] args) {\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)-2l, (long)-3l, (long)41l, (long)57l,\
    \ (long)76l, (long)87l, (long)88l, (long)99l))), (3l)) == (-4l));\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)121l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l))), (2l)) == (0l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)21l, (long)3l, (long)90l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (125l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (24l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l))),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmscg8302.java:22)\n"
  stdout: ''
  timestamp: 1659794229
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a non-empty array array list of integers arr and\
    \ an integer k, return\n    // the sum of the elements with at most two digits\
    \ from the first k elements of arr.\n    // Example:\n    // >>> addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\n    // (24l)\n \
    \   // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n\
    \    public static long addElements(ArrayList<Long> arr, long k) {\n        long\
    \ sum = 0;\n        for (int i = 0; i < k; i++) {\n            if (arr.get(i)\
    \ > 99) {\n                sum += arr.get(i) % 100;\n            } else {\n  \
    \              sum += arr.get(i);\n            }\n        }\n        return sum;\n\
    \    }\n    public static void main(String[] args) {\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)-2l, (long)-3l, (long)41l, (long)57l,\
    \ (long)76l, (long)87l, (long)88l, (long)99l))), (3l)) == (-4l));\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)121l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l))), (2l)) == (0l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)21l, (long)3l, (long)90l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (125l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (24l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l))),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpr4aop483.java:30)\n"
  stdout: ''
  timestamp: 1659794229
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a non-empty array array list of integers arr and\
    \ an integer k, return\n    // the sum of the elements with at most two digits\
    \ from the first k elements of arr.\n    // Example:\n    // >>> addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\n    // (24l)\n \
    \   // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n\
    \    public static long addElements(ArrayList<Long> arr, long k) {\n        long\
    \ sum = 0;\n        for (int i = 0; i < k; i++) {\n            if (arr.get(i)\
    \ < 100) {\n                sum += arr.get(i);\n            }\n        }\n   \
    \     return sum;\n    }\n    public static void main(String[] args) {\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)-2l, (long)-3l, (long)41l, (long)57l,\
    \ (long)76l, (long)87l, (long)88l, (long)99l))), (3l)) == (-4l));\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)121l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l))), (2l)) == (0l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)21l, (long)3l, (long)90l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (125l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (24l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l))),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794229
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a non-empty array array list of integers arr and\
    \ an integer k, return\n    // the sum of the elements with at most two digits\
    \ from the first k elements of arr.\n    // Example:\n    // >>> addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\n    // (24l)\n \
    \   // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n\
    \    public static long addElements(ArrayList<Long> arr, long k) {\n        return\
    \ arr.stream().filter(x -> x < 100).limit(k).mapToLong(x -> x).sum();\n    }\n\
    \    public static void main(String[] args) {\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-2l, (long)-3l, (long)41l, (long)57l, (long)76l, (long)87l, (long)88l,\
    \ (long)99l))), (3l)) == (-4l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)121l, (long)3l, (long)4000l, (long)5l, (long)6l))), (2l)) == (0l));\n\
    \    assert(addElements((new ArrayList<Long>(Arrays.asList((long)11l, (long)21l,\
    \ (long)3l, (long)90l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\
    \ == (125l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (24l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l))),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpb03goepm.java:22)\n"
  stdout: ''
  timestamp: 1659794229
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a non-empty array array list of integers arr and\
    \ an integer k, return\n    // the sum of the elements with at most two digits\
    \ from the first k elements of arr.\n    // Example:\n    // >>> addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\n    // (24l)\n \
    \   // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n\
    \    public static long addElements(ArrayList<Long> arr, long k) {\n        long\
    \ sum = 0;\n        for (int i = 0; i < k; i++) {\n            long num = arr.get(i);\n\
    \            if (num < 100) {\n                sum += num;\n            }\n  \
    \      }\n        return sum;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l, (long)-2l,\
    \ (long)-3l, (long)41l, (long)57l, (long)76l, (long)87l, (long)88l, (long)99l))),\
    \ (3l)) == (-4l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)121l, (long)3l, (long)4000l, (long)5l, (long)6l))), (2l)) == (0l));\n\
    \    assert(addElements((new ArrayList<Long>(Arrays.asList((long)11l, (long)21l,\
    \ (long)3l, (long)90l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\
    \ == (125l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (24l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l))),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794229
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a non-empty array array list of integers arr and\
    \ an integer k, return\n    // the sum of the elements with at most two digits\
    \ from the first k elements of arr.\n    // Example:\n    // >>> addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\n    // (24l)\n \
    \   // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n\
    \    public static long addElements(ArrayList<Long> arr, long k) {\n        return\
    \ arr.stream().limit(k).filter(x -> x < 100).reduce(0l, (x, y) -> x + y);\n  \
    \  }\n    public static void main(String[] args) {\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)-2l, (long)-3l, (long)41l, (long)57l,\
    \ (long)76l, (long)87l, (long)88l, (long)99l))), (3l)) == (-4l));\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)121l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l))), (2l)) == (0l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)21l, (long)3l, (long)90l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (125l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (24l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l))),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794229
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a non-empty array array list of integers arr and\
    \ an integer k, return\n    // the sum of the elements with at most two digits\
    \ from the first k elements of arr.\n    // Example:\n    // >>> addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\n    // (24l)\n \
    \   // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n\
    \    public static long addElements(ArrayList<Long> arr, long k) {\n        return\
    \ arr.stream().limit(k).filter(x -> x < 100).reduce(0l, (x, y) -> x + y);\n  \
    \  }\n    public static void main(String[] args) {\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)-2l, (long)-3l, (long)41l, (long)57l,\
    \ (long)76l, (long)87l, (long)88l, (long)99l))), (3l)) == (-4l));\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)121l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l))), (2l)) == (0l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)21l, (long)3l, (long)90l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (125l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (24l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l))),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794229
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a non-empty array array list of integers arr and\
    \ an integer k, return\n    // the sum of the elements with at most two digits\
    \ from the first k elements of arr.\n    // Example:\n    // >>> addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\n    // (24l)\n \
    \   // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n\
    \    public static long addElements(ArrayList<Long> arr, long k) {\n        return\
    \ arr.stream().limit(k).filter(x -> x < 100).mapToLong(x -> x).sum();\n    }\n\
    \    public static void main(String[] args) {\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-2l, (long)-3l, (long)41l, (long)57l, (long)76l, (long)87l, (long)88l,\
    \ (long)99l))), (3l)) == (-4l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)121l, (long)3l, (long)4000l, (long)5l, (long)6l))), (2l)) == (0l));\n\
    \    assert(addElements((new ArrayList<Long>(Arrays.asList((long)11l, (long)21l,\
    \ (long)3l, (long)90l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\
    \ == (125l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (24l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l))),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794229
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a non-empty array array list of integers arr and\
    \ an integer k, return\n    // the sum of the elements with at most two digits\
    \ from the first k elements of arr.\n    // Example:\n    // >>> addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\n    // (24l)\n \
    \   // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n\
    \    public static long addElements(ArrayList<Long> arr, long k) {\n        return\
    \ arr.stream().limit(k).filter(x -> x < 100).reduce(0l, (x, y) -> x + y);\n  \
    \  }\n    public static void main(String[] args) {\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)-2l, (long)-3l, (long)41l, (long)57l,\
    \ (long)76l, (long)87l, (long)88l, (long)99l))), (3l)) == (-4l));\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)121l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l))), (2l)) == (0l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)21l, (long)3l, (long)90l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (125l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (24l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l))),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794229
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a non-empty array array list of integers arr and\
    \ an integer k, return\n    // the sum of the elements with at most two digits\
    \ from the first k elements of arr.\n    // Example:\n    // >>> addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\n    // (24l)\n \
    \   // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n\
    \    public static long addElements(ArrayList<Long> arr, long k) {\n        return\
    \ arr.stream().limit(k).filter(x -> x < 100).mapToLong(x -> x).sum();\n    }\n\
    \    public static void main(String[] args) {\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-2l, (long)-3l, (long)41l, (long)57l, (long)76l, (long)87l, (long)88l,\
    \ (long)99l))), (3l)) == (-4l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)121l, (long)3l, (long)4000l, (long)5l, (long)6l))), (2l)) == (0l));\n\
    \    assert(addElements((new ArrayList<Long>(Arrays.asList((long)11l, (long)21l,\
    \ (long)3l, (long)90l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\
    \ == (125l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (24l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l))),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794229
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a non-empty array array list of integers arr and\
    \ an integer k, return\n    // the sum of the elements with at most two digits\
    \ from the first k elements of arr.\n    // Example:\n    // >>> addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\n    // (24l)\n \
    \   // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n\
    \    public static long addElements(ArrayList<Long> arr, long k) {\n        long\
    \ sum = 0;\n        for (int i = 0; i < k; i++) {\n            long num = arr.get(i);\n\
    \            if (num < 100) {\n                sum += num;\n            }\n  \
    \      }\n        return sum;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l, (long)-2l,\
    \ (long)-3l, (long)41l, (long)57l, (long)76l, (long)87l, (long)88l, (long)99l))),\
    \ (3l)) == (-4l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)121l, (long)3l, (long)4000l, (long)5l, (long)6l))), (2l)) == (0l));\n\
    \    assert(addElements((new ArrayList<Long>(Arrays.asList((long)11l, (long)21l,\
    \ (long)3l, (long)90l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\
    \ == (125l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (24l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l))),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794229
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a non-empty array array list of integers arr and\
    \ an integer k, return\n    // the sum of the elements with at most two digits\
    \ from the first k elements of arr.\n    // Example:\n    // >>> addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\n    // (24l)\n \
    \   // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n\
    \    public static long addElements(ArrayList<Long> arr, long k) {\n        return\
    \ arr.stream().limit(k).filter(x -> x < 100).reduce(0l, (x, y) -> x + y);\n  \
    \  }\n    public static void main(String[] args) {\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)-2l, (long)-3l, (long)41l, (long)57l,\
    \ (long)76l, (long)87l, (long)88l, (long)99l))), (3l)) == (-4l));\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)121l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l))), (2l)) == (0l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)21l, (long)3l, (long)90l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (125l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (24l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l))),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794229
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a non-empty array array list of integers arr and\
    \ an integer k, return\n    // the sum of the elements with at most two digits\
    \ from the first k elements of arr.\n    // Example:\n    // >>> addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\n    // (24l)\n \
    \   // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n\
    \    public static long addElements(ArrayList<Long> arr, long k) {\n        return\
    \ arr.stream().filter(x -> x < 100).limit(k).mapToLong(x -> x).sum();\n    }\n\
    \    public static void main(String[] args) {\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-2l, (long)-3l, (long)41l, (long)57l, (long)76l, (long)87l, (long)88l,\
    \ (long)99l))), (3l)) == (-4l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)121l, (long)3l, (long)4000l, (long)5l, (long)6l))), (2l)) == (0l));\n\
    \    assert(addElements((new ArrayList<Long>(Arrays.asList((long)11l, (long)21l,\
    \ (long)3l, (long)90l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\
    \ == (125l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (24l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l))),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpb03goepm.java:22)\n"
  stdout: ''
  timestamp: 1659794229
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a non-empty array array list of integers arr and\
    \ an integer k, return\n    // the sum of the elements with at most two digits\
    \ from the first k elements of arr.\n    // Example:\n    // >>> addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\n    // (24l)\n \
    \   // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n\
    \    public static long addElements(ArrayList<Long> arr, long k) {\n        return\
    \ arr.stream().limit(k).filter(x -> x < 100).mapToLong(x -> x).sum();\n    }\n\
    \    public static void main(String[] args) {\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-2l, (long)-3l, (long)41l, (long)57l, (long)76l, (long)87l, (long)88l,\
    \ (long)99l))), (3l)) == (-4l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)121l, (long)3l, (long)4000l, (long)5l, (long)6l))), (2l)) == (0l));\n\
    \    assert(addElements((new ArrayList<Long>(Arrays.asList((long)11l, (long)21l,\
    \ (long)3l, (long)90l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\
    \ == (125l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (24l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l))),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794229
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a non-empty array array list of integers arr and\
    \ an integer k, return\n    // the sum of the elements with at most two digits\
    \ from the first k elements of arr.\n    // Example:\n    // >>> addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\n    // (24l)\n \
    \   // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n\
    \    public static long addElements(ArrayList<Long> arr, long k) {\n        long\
    \ sum = 0;\n        for (int i = 0; i < k; i++) {\n            if (arr.get(i)\
    \ < 100) {\n                sum += arr.get(i);\n            }\n        }\n   \
    \     return sum;\n    }\n    public static void main(String[] args) {\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)-2l, (long)-3l, (long)41l, (long)57l,\
    \ (long)76l, (long)87l, (long)88l, (long)99l))), (3l)) == (-4l));\n    assert(addElements((new\
    \ ArrayList<Long>(Arrays.asList((long)111l, (long)121l, (long)3l, (long)4000l,\
    \ (long)5l, (long)6l))), (2l)) == (0l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)11l,\
    \ (long)21l, (long)3l, (long)90l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (125l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l,\
    \ (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))),\
    \ (4l)) == (24l));\n    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l))),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794229
