name: HumanEval_35_max_element
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // Return maximum element in the array list.\n    // >>> maxElement((new\
  \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l))))\n    // (3l)\n\
  \    // >>> maxElement((new ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)-5l,\
  \ (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l, (long)1l, (long)-10l))))\n\
  \    // (123l)\n    public static long maxElement(ArrayList<Long> l) {\n"
tests: "    }\n    public static void main(String[] args) {\n    assert(maxElement((new\
  \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (3l));\n   \
  \ assert(maxElement((new ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)-5l,\
  \ (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)124l, (long)1l, (long)-10l))))\
  \ == (124l));\n    }\n\n}\n"
completions: ["        long max = Long.MIN_VALUE;\n        for (long i : l) {\n  \
    \          if (i > max) {\n                max = i;\n            }\n        }\n\
    \        return max;", "        long max = Long.MIN_VALUE;\n        for (long\
    \ i : l) {\n            if (i > max) {\n                max = i;\n           \
    \ }\n        }\n        return max;", "        long max = Long.MIN_VALUE;\n  \
    \      for (long i : l) {\n            if (i > max) {\n                max = i;\n\
    \            }\n        }\n        return max;", '        return l.stream().max(Comparator.naturalOrder()).get();',
  '        return l.stream().max(Comparator.naturalOrder()).get();', "        long\
    \ max = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n            if\
    \ (l.get(i) > max) {\n                max = l.get(i);\n            }\n       \
    \ }\n        return max;", "        long max = Long.MIN_VALUE;\n        for (long\
    \ i : l) {\n            if (i > max) {\n                max = i;\n           \
    \ }\n        }\n        return max;", "        long max = Long.MIN_VALUE;\n  \
    \      for (long i : l) {\n            if (i > max) {\n                max = i;\n\
    \            }\n        }\n        return max;", "        long max = Long.MIN_VALUE;\n\
    \        for (long i : l) {\n            if (i > max) {\n                max =\
    \ i;\n            }\n        }\n        return max;", '        return l.stream().max(Comparator.naturalOrder()).get();',
  "        long max = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n  \
    \          if (l.get(i) > max) {\n                max = l.get(i);\n          \
    \  }\n        }\n        return max;", "        long max = l.get(0);\n       \
    \ for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) > max) {\n  \
    \              max = l.get(i);\n            }\n        }\n        return max;",
  "        long max = l.get(0);\n        for (long i : l) {\n            if (i > max)\
    \ {\n                max = i;\n            }\n        }\n        return max;",
  '        return Collections.max(l);', "        long max = Long.MIN_VALUE;\n    \
    \    for (long i : l) {\n            if (i > max) {\n                max = i;\n\
    \            }\n        }\n        return max;", '        return l.stream().max(Long::compare).get();',
  "        long max = Long.MIN_VALUE;\n        for (long i : l) {\n            if\
    \ (i > max) {\n                max = i;\n            }\n        }\n        return\
    \ max;", "        long max = l.get(0);\n        for (long i : l) {\n         \
    \   if (i > max) {\n                max = i;\n            }\n        }\n     \
    \   return max;", "        long max = l.get(0);\n        for (int i = 1; i < l.size();\
    \ i++) {\n            if (l.get(i) > max) {\n                max = l.get(i);\n\
    \            }\n        }\n        return max;", '        return l.stream().max(Long::compare).get();',
  '        return l.stream().max(Long::compare).get();', '        return l.stream().max(Long::compare).get();',
  "        long max = Long.MIN_VALUE;\n        for (long i : l) {\n            if\
    \ (i > max) {\n                max = i;\n            }\n        }\n        return\
    \ max;", '        return l.stream().max(Comparator.naturalOrder()).get();', '        return
    l.stream().max(Long::compare).get();', '        return l.stream().max(Long::compare).get();',
  '        return l.stream().max(Comparator.naturalOrder()).get();', "        long\
    \ max = Long.MIN_VALUE;\n        for (long i : l) {\n            if (i > max)\
    \ {\n                max = i;\n            }\n        }\n        return max;",
  '        return l.stream().max(Comparator.naturalOrder()).get();', "        long\
    \ max = Long.MIN_VALUE;\n        for (long i : l) {\n            if (i > max)\
    \ {\n                max = i;\n            }\n        }\n        return max;",
  "        long max = Long.MIN_VALUE;\n        for (long i : l) {\n            if\
    \ (i > max) {\n                max = i;\n            }\n        }\n        return\
    \ max;", "        long max = Long.MIN_VALUE;\n        for (long i : l) {\n   \
    \         if (i > max) {\n                max = i;\n            }\n        }\n\
    \        return max;", "        long max = 0;\n        for (long i : l) {\n  \
    \          if (i > max) {\n                max = i;\n            }\n        }\n\
    \        return max;", "        long max = Long.MIN_VALUE;\n        for (long\
    \ i : l) {\n            if (i > max) {\n                max = i;\n           \
    \ }\n        }\n        return max;", '        return l.stream().max(Comparator.naturalOrder()).get();',
  '        return l.stream().max(Comparator.naturalOrder()).get();', "        long\
    \ max = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n            if\
    \ (l.get(i) > max) {\n                max = l.get(i);\n            }\n       \
    \ }\n        return max;", '        return l.stream().max(Comparator.naturalOrder()).get();',
  "        long max = Long.MIN_VALUE;\n        for (long i : l) {\n            if\
    \ (i > max) {\n                max = i;\n            }\n        }\n        return\
    \ max;", '        return l.stream().max(Comparator.naturalOrder()).get();', " \
    \       long max = Long.MIN_VALUE;\n        for (long e : l) {\n            if\
    \ (e > max) {\n                max = e;\n            }\n        }\n        return\
    \ max;", "        long max = Long.MIN_VALUE;\n        for (long i : l) {\n   \
    \         if (i > max) {\n                max = i;\n            }\n        }\n\
    \        return max;", "        long max = l.get(0);\n        for (int i = 1;\
    \ i < l.size(); i++) {\n            if (l.get(i) > max) {\n                max\
    \ = l.get(i);\n            }\n        }\n        return max;", "        long max\
    \ = Long.MIN_VALUE;\n        for (long i : l) {\n            if (i > max) {\n\
    \                max = i;\n            }\n        }\n        return max;", '        return
    l.stream().max(Long::compare).get();', '        return l.stream().max(Comparator.naturalOrder()).get();',
  '        return l.stream().max(Long::compare).get();', "        long max = Long.MIN_VALUE;\n\
    \        for (long i : l) {\n            if (i > max) {\n                max =\
    \ i;\n            }\n        }\n        return max;", "        long max = l.get(0);\n\
    \        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) > max)\
    \ {\n                max = l.get(i);\n            }\n        }\n        return\
    \ max;", '        return l.stream().max(Comparator.naturalOrder()).get();', " \
    \       long max = Long.MIN_VALUE;\n        for (long i : l) {\n            if\
    \ (i > max) {\n                max = i;\n            }\n        }\n        return\
    \ max;", '        return l.stream().max(Comparator.naturalOrder()).get();', " \
    \       long max = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n \
    \           if (l.get(i) > max) {\n                max = l.get(i);\n         \
    \   }\n        }\n        return max;", '        return l.stream().max(Comparator.naturalOrder()).get();',
  '        return Collections.max(l);', "        long max = Long.MIN_VALUE;\n    \
    \    for (long x : l) {\n            if (x > max) {\n                max = x;\n\
    \            }\n        }\n        return max;", "        long max = l.get(0);\n\
    \        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) > max)\
    \ {\n                max = l.get(i);\n            }\n        }\n        return\
    \ max;", "        long max = l.get(0);\n        for (long i : l) {\n         \
    \   if (i > max) {\n                max = i;\n            }\n        }\n     \
    \   return max;", "        long max = l.get(0);\n        for (int i = 1; i < l.size();\
    \ i++) {\n            if (l.get(i) > max) {\n                max = l.get(i);\n\
    \            }\n        }\n        return max;", "        long max = Long.MIN_VALUE;\n\
    \        for (long i : l) {\n            if (i > max) {\n                max =\
    \ i;\n            }\n        }\n        return max;", "        long max = Long.MIN_VALUE;\n\
    \        for (long i : l) {\n            if (i > max) {\n                max =\
    \ i;\n            }\n        }\n        return max;", "        long max = l.get(0);\n\
    \        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) > max)\
    \ {\n                max = l.get(i);\n            }\n        }\n        return\
    \ max;", "        long max = Long.MIN_VALUE;\n        for (long i : l) {\n   \
    \         if (i > max) {\n                max = i;\n            }\n        }\n\
    \        return max;", '        return l.stream().max(Comparator.naturalOrder()).get();',
  '        return l.stream().max(Comparator.naturalOrder()).get();', "        long\
    \ max = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n            if\
    \ (l.get(i) > max) {\n                max = l.get(i);\n            }\n       \
    \ }\n        return max;", "        long max = Long.MIN_VALUE;\n        for (long\
    \ i : l) {\n            if (i > max) {\n                max = i;\n           \
    \ }\n        }\n        return max;", '        return l.stream().max(Comparator.naturalOrder()).get();',
  "        long max = Long.MIN_VALUE;\n        for (long i : l) {\n            if\
    \ (i > max) {\n                max = i;\n            }\n        }\n        return\
    \ max;", "        long max = Long.MIN_VALUE;\n        for (long x : l) {\n   \
    \         if (x > max) {\n                max = x;\n            }\n        }\n\
    \        return max;", '        return l.stream().max(Comparator.naturalOrder()).get();',
  '        return l.stream().max(Long::compare).get();', "        long max = Long.MIN_VALUE;\n\
    \        for (long i : l) {\n            if (i > max) {\n                max =\
    \ i;\n            }\n        }\n        return max;", '        return l.stream().max(Long::compare).get();',
  "        long max = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n  \
    \          if (l.get(i) > max) {\n                max = l.get(i);\n          \
    \  }\n        }\n        return max;", '        return l.stream().max(Long::compare).get();',
  "        long max = l.get(0);\n        for (long i : l) {\n            if (i > max)\
    \ {\n                max = i;\n            }\n        }\n        return max;",
  '        return l.stream().max(Comparator.naturalOrder()).get();', '        return
    l.stream().max(Comparator.naturalOrder()).get();', '        return l.stream().max(Long::compare).get();',
  "        long max = Long.MIN_VALUE;\n        for (long i : l) {\n            if\
    \ (i > max) {\n                max = i;\n            }\n        }\n        return\
    \ max;", "        long max = Long.MIN_VALUE;\n        for (long x : l) {\n   \
    \         if (x > max) {\n                max = x;\n            }\n        }\n\
    \        return max;", '        return l.stream().max(Comparator.naturalOrder()).get();',
  '        return l.stream().max(Long::compare).get();', "        long max = l.get(0);\n\
    \        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) > max)\
    \ {\n                max = l.get(i);\n            }\n        }\n        return\
    \ max;", "        long max = Long.MIN_VALUE;\n        for (long i : l) {\n   \
    \         if (i > max) {\n                max = i;\n            }\n        }\n\
    \        return max;", "        long max = Long.MIN_VALUE;\n        for (long\
    \ i : l) {\n            if (i > max) {\n                max = i;\n           \
    \ }\n        }\n        return max;", '        return l.stream().max(Comparator.naturalOrder()).get();',
  "        long max = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n  \
    \          if (l.get(i) > max) {\n                max = l.get(i);\n          \
    \  }\n        }\n        return max;", "        long max = Long.MIN_VALUE;\n \
    \       for (long i : l) {\n            if (i > max) {\n                max =\
    \ i;\n            }\n        }\n        return max;", '        return l.stream().max(Comparator.naturalOrder()).get();',
  "        long max = Long.MIN_VALUE;\n        for (long i : l) {\n            if\
    \ (i > max) {\n                max = i;\n            }\n        }\n        return\
    \ max;", "        long max = Long.MIN_VALUE;\n        for (long i : l) {\n   \
    \         if (i > max) {\n                max = i;\n            }\n        }\n\
    \        return max;", "        long max = l.get(0);\n        for (int i = 1;\
    \ i < l.size(); i++) {\n            if (l.get(i) > max) {\n                max\
    \ = l.get(i);\n            }\n        }\n        return max;", "        long max\
    \ = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i)\
    \ > max) {\n                max = l.get(i);\n            }\n        }\n      \
    \  return max;", "        long max = Long.MIN_VALUE;\n        for (long i : l)\
    \ {\n            if (i > max) {\n                max = i;\n            }\n   \
    \     }\n        return max;", "        long max = Long.MIN_VALUE;\n        for\
    \ (long x : l) {\n            if (x > max) {\n                max = x;\n     \
    \       }\n        }\n        return max;", '        return l.stream().max(Comparator.naturalOrder()).get();',
  '        return l.stream().max(Long::compare).get();', "        long max = Long.MIN_VALUE;\n\
    \        for (long i : l) {\n            if (i > max) {\n                max =\
    \ i;\n            }\n        }\n        return max;", "        long max = l.get(0);\n\
    \        for (long i : l) {\n            if (i > max) {\n                max =\
    \ i;\n            }\n        }\n        return max;", "        long max = Long.MIN_VALUE;\n\
    \        for (long i : l) {\n            if (i > max) {\n                max =\
    \ i;\n            }\n        }\n        return max;", "        long max = Long.MIN_VALUE;\n\
    \        for (long i : l) {\n            if (i > max) {\n                max =\
    \ i;\n            }\n        }\n        return max;", "        long max = Long.MIN_VALUE;\n\
    \        for (long x : l) {\n            if (x > max) {\n                max =\
    \ x;\n            }\n        }\n        return max;", "        long max = Long.MIN_VALUE;\n\
    \        for (long x : l) {\n            if (x > max) {\n                max =\
    \ x;\n            }\n        }\n        return max;", "        long max = Long.MIN_VALUE;\n\
    \        for (long i : l) {\n            if (i > max) {\n                max =\
    \ i;\n            }\n        }\n        return max;", "        long max = l.get(0);\n\
    \        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) > max)\
    \ {\n                max = l.get(i);\n            }\n        }\n        return\
    \ max;", "        long max = Long.MIN_VALUE;\n        for (long i : l) {\n   \
    \         if (i > max) {\n                max = i;\n            }\n        }\n\
    \        return max;", "        long max = Long.MIN_VALUE;\n        for (long\
    \ i : l) {\n            if (i > max) {\n                max = i;\n           \
    \ }\n        }\n        return max;", "        long max = Long.MIN_VALUE;\n  \
    \      for (long i : l) {\n            if (i > max) {\n                max = i;\n\
    \            }\n        }\n        return max;", '        return l.stream().max(Comparator.naturalOrder()).get();',
  '        return l.stream().max(Long::compare).get();', "        long max = l.get(0);\n\
    \        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) > max)\
    \ {\n                max = l.get(i);\n            }\n        }\n        return\
    \ max;", "        long max = Long.MIN_VALUE;\n        for (long i : l) {\n   \
    \         if (i > max) {\n                max = i;\n            }\n        }\n\
    \        return max;", "        long max = Long.MIN_VALUE;\n        for (long\
    \ i : l) {\n            if (i > max) {\n                max = i;\n           \
    \ }\n        }\n        return max;", '        return l.stream().max(Long::compare).get();',
  "        long max = Long.MIN_VALUE;\n        for (long i : l) {\n            if\
    \ (i > max) {\n                max = i;\n            }\n        }\n        return\
    \ max;", "        long max = Long.MIN_VALUE;\n        for (long i : l) {\n   \
    \         if (i > max) {\n                max = i;\n            }\n        }\n\
    \        return max;", "        long max = Long.MIN_VALUE;\n        for (long\
    \ i : l) {\n            if (i > max) {\n                max = i;\n           \
    \ }\n        }\n        return max;", "        long max = Long.MIN_VALUE;\n  \
    \      for (long i : l) {\n            if (i > max) {\n                max = i;\n\
    \            }\n        }\n        return max;", "        long max = Long.MIN_VALUE;\n\
    \        for (long x : l) {\n            if (x > max) {\n                max =\
    \ x;\n            }\n        }\n        return max;", "        long max = Long.MIN_VALUE;\n\
    \        for (long i : l) {\n            if (i > max) {\n                max =\
    \ i;\n            }\n        }\n        return max;", '        return l.stream().max(Long::compare).get();',
  "        long max = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n  \
    \          if (l.get(i) > max) {\n                max = l.get(i);\n          \
    \  }\n        }\n        return max;", '        return l.stream().max(Long::compare).get();',
  "        long max = Long.MIN_VALUE;\n        for (long i : l) {\n            if\
    \ (i > max) {\n                max = i;\n            }\n        }\n        return\
    \ max;", "        long max = l.get(0);\n        for (int i = 1; i < l.size();\
    \ i++) {\n            if (l.get(i) > max) {\n                max = l.get(i);\n\
    \            }\n        }\n        return max;", "        long max = Long.MIN_VALUE;\n\
    \        for (long i : l) {\n            if (i > max) {\n                max =\
    \ i;\n            }\n        }\n        return max;", "        long max = l.get(0);\n\
    \        for (long i : l) {\n            if (i > max) {\n                max =\
    \ i;\n            }\n        }\n        return max;", "        long max = Long.MIN_VALUE;\n\
    \        for (long i : l) {\n            if (i > max) {\n                max =\
    \ i;\n            }\n        }\n        return max;", "        long max = Long.MIN_VALUE;\n\
    \        for (long i : l) {\n            if (i > max) {\n                max =\
    \ i;\n            }\n        }\n        return max;", '        return l.stream().max(Comparator.naturalOrder()).get();',
  "        long max = Long.MIN_VALUE;\n        for (long i : l) {\n            if\
    \ (i > max) {\n                max = i;\n            }\n        }\n        return\
    \ max;", '        return l.stream().reduce(Long.MIN_VALUE, Math::max);', "   \
    \     long max = Long.MIN_VALUE;\n        for (long i : l) {\n            if (i\
    \ > max) {\n                max = i;\n            }\n        }\n        return\
    \ max;", "        long max = Long.MIN_VALUE;\n        for (long i : l) {\n   \
    \         if (i > max) {\n                max = i;\n            }\n        }\n\
    \        return max;", "        long max = Long.MIN_VALUE;\n        for (long\
    \ i : l) {\n            if (i > max) {\n                max = i;\n           \
    \ }\n        }\n        return max;", '        return Collections.max(l);', " \
    \       long max = Long.MIN_VALUE;\n        for (long i : l) {\n            if\
    \ (i > max) {\n                max = i;\n            }\n        }\n        return\
    \ max;", "        long max = Long.MIN_VALUE;\n        for (long i : l) {\n   \
    \         if (i > max) {\n                max = i;\n            }\n        }\n\
    \        return max;", "        long max = l.get(0);\n        for (int i = 1;\
    \ i < l.size(); i++) {\n            if (l.get(i) > max) {\n                max\
    \ = l.get(i);\n            }\n        }\n        return max;", "        long max\
    \ = Long.MIN_VALUE;\n        for (long i : l) {\n            if (i > max) {\n\
    \                max = i;\n            }\n        }\n        return max;", " \
    \       long max = Long.MIN_VALUE;\n        for (long i : l) {\n            if\
    \ (i > max) {\n                max = i;\n            }\n        }\n        return\
    \ max;", "        long max = Long.MIN_VALUE;\n        for (long x : l) {\n   \
    \         if (x > max) {\n                max = x;\n            }\n        }\n\
    \        return max;", "        long max = Long.MIN_VALUE;\n        for (long\
    \ i : l) {\n            if (i > max) {\n                max = i;\n           \
    \ }\n        }\n        return max;", "        long max = l.get(0);\n        for\
    \ (long i : l) {\n            if (i > max) {\n                max = i;\n     \
    \       }\n        }\n        return max;", "        long max = l.get(0);\n  \
    \      for (long i : l) {\n            if (i > max) {\n                max = i;\n\
    \            }\n        }\n        return max;", "        long max = Long.MIN_VALUE;\n\
    \        for (long x : l) {\n            if (x > max) {\n                max =\
    \ x;\n            }\n        }\n        return max;", "        long max = Long.MIN_VALUE;\n\
    \        for (long i : l) {\n            if (i > max) {\n                max =\
    \ i;\n            }\n        }\n        return max;", "        long max = Long.MIN_VALUE;\n\
    \        for (long i : l) {\n            if (i > max) {\n                max =\
    \ i;\n            }\n        }\n        return max;", "        long max = Long.MIN_VALUE;\n\
    \        for (long i : l) {\n            if (i > max) {\n                max =\
    \ i;\n            }\n        }\n        return max;", "        long max = Long.MIN_VALUE;\n\
    \        for (long i : l) {\n            if (i > max) {\n                max =\
    \ i;\n            }\n        }\n        return max;", '        return l.stream().max(Long::compare).get();',
  "        long max = Long.MIN_VALUE;\n        for (long i : l) {\n            if\
    \ (i > max) {\n                max = i;\n            }\n        }\n        return\
    \ max;", "        long max = Long.MIN_VALUE;\n        for (long i : l) {\n   \
    \         if (i > max) {\n                max = i;\n            }\n        }\n\
    \        return max;", "        long max = l.get(0);\n        for (int i = 1;\
    \ i < l.size(); i++) {\n            if (l.get(i) > max) {\n                max\
    \ = l.get(i);\n            }\n        }\n        return max;", "        long max\
    \ = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i)\
    \ > max) {\n                max = l.get(i);\n            }\n        }\n      \
    \  return max;", "        long max = Long.MIN_VALUE;\n        for (long x : l)\
    \ {\n            if (x > max) {\n                max = x;\n            }\n   \
    \     }\n        return max;", "        long max = Long.MIN_VALUE;\n        for\
    \ (long i : l) {\n            if (i > max) {\n                max = i;\n     \
    \       }\n        }\n        return max;", '        return l.stream().max(Long::compare).get();',
  "        long max = Long.MIN_VALUE;\n        for (long i : l) {\n            if\
    \ (i > max) {\n                max = i;\n            }\n        }\n        return\
    \ max;", "        long max = Long.MIN_VALUE;\n        for (long x : l) {\n   \
    \         if (x > max) {\n                max = x;\n            }\n        }\n\
    \        return max;", "        long max = Long.MIN_VALUE;\n        for (long\
    \ i : l) {\n            if (i > max) {\n                max = i;\n           \
    \ }\n        }\n        return max;", '        return Collections.max(l);', " \
    \       long max = l.get(0);\n        for (long i : l) {\n            if (i >\
    \ max) {\n                max = i;\n            }\n        }\n        return max;",
  '        return l.stream().max(Comparator.naturalOrder()).get();', '        return
    l.stream().max(Long::compare).get();', "        long max = Long.MIN_VALUE;\n \
    \       for (long i : l) {\n            if (i > max) {\n                max =\
    \ i;\n            }\n        }\n        return max;", '        return l.stream().max(Long::compare).get();',
  "        long max = Long.MIN_VALUE;\n        for (long i : l) {\n            if\
    \ (i > max) {\n                max = i;\n            }\n        }\n        return\
    \ max;", "        long max = Long.MIN_VALUE;\n        for (long i : l) {\n   \
    \         if (i > max) {\n                max = i;\n            }\n        }\n\
    \        return max;", "        long max = Long.MIN_VALUE;\n        for (long\
    \ i : l) {\n            if (i > max) {\n                max = i;\n           \
    \ }\n        }\n        return max;", '        return l.stream().max(Comparator.naturalOrder()).get();',
  "        long max = Long.MIN_VALUE;\n        for (long i : l) {\n            if\
    \ (i > max) {\n                max = i;\n            }\n        }\n        return\
    \ max;", '        return Collections.max(l);', "        long max = Long.MIN_VALUE;\n\
    \        for (long i : l) {\n            if (i > max) {\n                max =\
    \ i;\n            }\n        }\n        return max;", "        long max = l.get(0);\n\
    \        for (int i = 1; i < l.size(); i++) {\n            long x = l.get(i);\n\
    \            if (x > max) {\n                max = x;\n            }\n       \
    \ }\n        return max;", "        long max = l.get(0);\n        for (int i =\
    \ 1; i < l.size(); i++) {\n            if (l.get(i) > max) {\n               \
    \ max = l.get(i);\n            }\n        }\n        return max;", '        return
    l.stream().max(Comparator.naturalOrder()).get();', "        long max = l.get(0);\n\
    \        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) > max)\
    \ {\n                max = l.get(i);\n            }\n        }\n        return\
    \ max;", "        long max = Long.MIN_VALUE;\n        for (long i : l) {\n   \
    \         if (i > max) {\n                max = i;\n            }\n        }\n\
    \        return max;", "        // Replace the following line with your solution.\n\
    \        long max = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n\
    \            if (l.get(i) > max) {\n                max = l.get(i);\n        \
    \    }\n        }\n        return max;", '        return l.stream().max(Comparator.naturalOrder()).get();',
  '        return l.stream().max(Long::compare).get();', "        long max = Long.MIN_VALUE;\n\
    \        for (long i : l) {\n            if (i > max) {\n                max =\
    \ i;\n            }\n        }\n        return max;", "        long max = Long.MIN_VALUE;\n\
    \        for (long i : l) {\n            if (i > max) {\n                max =\
    \ i;\n            }\n        }\n        return max;", '        return l.stream().max(Comparator.naturalOrder()).get();',
  "        long max = Long.MIN_VALUE;\n        for (long i : l) {\n            if\
    \ (i > max) {\n                max = i;\n            }\n        }\n        return\
    \ max;", "        long max = l.get(0);\n        for (int i = 1; i < l.size();\
    \ i++) {\n            if (l.get(i) > max) {\n                max = l.get(i);\n\
    \            }\n        }\n        return max;", '        return l.stream().max(Long::compare).get();',
  "        long max = Long.MIN_VALUE;\n        for (long i : l) {\n            if\
    \ (i > max) {\n                max = i;\n            }\n        }\n        return\
    \ max;", '        return l.stream().max(Comparator.naturalOrder()).get();', '        return
    l.stream().max(Long::compare).get();', '        return l.stream().max(Comparator.naturalOrder()).get();',
  "        long max = Long.MIN_VALUE;\n        for (long i : l) {\n            if\
    \ (i > max) {\n                max = i;\n            }\n        }\n        return\
    \ max;", "        long max = Long.MIN_VALUE;\n        for (long i : l) {\n   \
    \         if (i > max) {\n                max = i;\n            }\n        }\n\
    \        return max;", "        long max = Long.MIN_VALUE;\n        for (long\
    \ i : l) {\n            if (i > max) {\n                max = i;\n           \
    \ }\n        }\n        return max;", '        return l.stream().max(Long::compare).get();',
  "        long max = l.get(0);\n        for (long i : l) {\n            if (i > max)\
    \ {\n                max = i;\n            }\n        }\n        return max;",
  "        long max = Long.MIN_VALUE;\n        for (long i : l) {\n            if\
    \ (i > max) {\n                max = i;\n            }\n        }\n        return\
    \ max;"]
stop_tokens:
- "\n    }\n"
