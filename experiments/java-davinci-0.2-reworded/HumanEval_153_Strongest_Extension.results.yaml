language: java
name: HumanEval_153_Strongest_Extension
results:
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        // Your code goes here\n\
    \        return \"\";\n    }\n    public static void main(String[] args) {\n \
    \   assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcpmjr68q.java:30)\n"
  stdout: ''
  timestamp: 1659799186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        // Your code goes here\n\
    \        return \"\";\n    }\n    public static void main(String[] args) {\n \
    \   assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcpmjr68q.java:30)\n"
  stdout: ''
  timestamp: 1659799186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        // Your code here\n   \
    \     return \"\";\n    }\n    public static void main(String[] args) {\n    assert(StrongestExtension((\"\
    Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\"\
    , (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"\
    NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"\
    t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\"\
    , (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
    K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"\
    t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\"\
    , (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"\
    okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"\
    YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"\
    Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"\
    _.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"\
    671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp00pfl0_r.java:30)\n"
  stdout: ''
  timestamp: 1659799186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        // Your code goes here.\n\
    \        return \"\";\n    }\n    public static void main(String[] args) {\n \
    \   assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9vlp9pke.java:30)\n"
  stdout: ''
  timestamp: 1659799186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        // Your code goes here\n\
    \        return \"\";\n    }\n    public static void main(String[] args) {\n \
    \   assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcpmjr68q.java:30)\n"
  stdout: ''
  timestamp: 1659799186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        // Your code goes here\n\
    \        return null;\n    }\n    public static void main(String[] args) {\n \
    \   assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"String.equals(Object)\" because the return value of \"Problem.StrongestExtension(String,\
    \ java.util.ArrayList)\" is null\n\tat Problem.main(tmp664o4tdl.java:30)\n"
  stdout: ''
  timestamp: 1659799186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        // Your code goes here\n\
    \        return \"\";\n    }\n    public static void main(String[] args) {\n \
    \   assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcpmjr68q.java:30)\n"
  stdout: ''
  timestamp: 1659799186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        String strongest_extension\
    \ = \"\";\n        double strongest_extension_strength = 0;\n        for (String\
    \ extension : extensions) {\n            double strength = 0;\n            for\
    \ (int i = 0; i < extension.length(); i++) {\n                char c = extension.charAt(i);\n\
    \                if (Character.isUpperCase(c)) {\n                    strength\
    \ += 1;\n                } else {\n                    strength -= 1;\n      \
    \          }\n            }\n            if (strength > strongest_extension_strength)\
    \ {\n                strongest_extension_strength = strength;\n              \
    \  strongest_extension = extension;\n            }\n        }\n        return\
    \ class_name + \".\" + strongest_extension;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppasl2gyn.java:46)\n"
  stdout: ''
  timestamp: 1659799186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        int max = 0;\n        String\
    \ strongest = \"\";\n        for (String ext : extensions) {\n            int\
    \ cap = 0;\n            int sm = 0;\n            for (int i = 0; i < ext.length();\
    \ i++) {\n                if (Character.isUpperCase(ext.charAt(i))) {\n      \
    \              cap++;\n                } else {\n                    sm++;\n \
    \               }\n            }\n            if (cap - sm > max) {\n        \
    \        max = cap - sm;\n                strongest = ext;\n            }\n  \
    \      }\n        return class_name + \".\" + strongest;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(StrongestExtension((\"Watashi\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\", (String)\"\
    eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"\
    NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"\
    t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\"\
    , (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
    K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"\
    t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\"\
    , (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"\
    okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"\
    YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"\
    Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"\
    _.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"\
    671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_xauhvlp.java:46)\n"
  stdout: ''
  timestamp: 1659799186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        // Your code here\n   \
    \     return class_name;\n    }\n    public static void main(String[] args) {\n\
    \    assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpa_fzi9x9.java:30)\n"
  stdout: ''
  timestamp: 1659799186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        // Your code goes here\n\
    \        return \"\";\n    }\n    public static void main(String[] args) {\n \
    \   assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcpmjr68q.java:30)\n"
  stdout: ''
  timestamp: 1659799186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        String strongest_extension\
    \ = \"\";\n        double strongest_strength = 0;\n        for (String extension\
    \ : extensions) {\n            double strength = 0;\n            for (int i =\
    \ 0; i < extension.length(); i++) {\n                if (Character.isUpperCase(extension.charAt(i)))\
    \ {\n                    strength += 1;\n                } else {\n          \
    \          strength -= 1;\n                }\n            }\n            if (strength\
    \ > strongest_strength) {\n                strongest_strength = strength;\n  \
    \              strongest_extension = extension;\n            }\n        }\n  \
    \      return class_name + \".\" + strongest_extension;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(StrongestExtension((\"Watashi\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\", (String)\"\
    eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"\
    NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"\
    t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\"\
    , (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
    K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"\
    t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\"\
    , (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"\
    okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"\
    YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"\
    Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"\
    _.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"\
    671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpueqglizw.java:45)\n"
  stdout: ''
  timestamp: 1659799186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        // Your code goes here.\n\
    \        return \"\";\n    }\n    public static void main(String[] args) {\n \
    \   assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9vlp9pke.java:30)\n"
  stdout: ''
  timestamp: 1659799186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        // Your code here.\n  \
    \      return \"\";\n    }\n    public static void main(String[] args) {\n   \
    \ assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpu9nlc6ys.java:30)\n"
  stdout: ''
  timestamp: 1659799186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        // Your code goes here\n\
    \        return \"\";\n    }\n    public static void main(String[] args) {\n \
    \   assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcpmjr68q.java:30)\n"
  stdout: ''
  timestamp: 1659799186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        // Your code here\n   \
    \     return \"\";\n    }\n    public static void main(String[] args) {\n    assert(StrongestExtension((\"\
    Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\"\
    , (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"\
    NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"\
    t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\"\
    , (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
    K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"\
    t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\"\
    , (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"\
    okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"\
    YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"\
    Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"\
    _.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"\
    671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp00pfl0_r.java:30)\n"
  stdout: ''
  timestamp: 1659799186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        // Your code goes here\n\
    \        return \"\";\n    }\n    public static void main(String[] args) {\n \
    \   assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcpmjr68q.java:30)\n"
  stdout: ''
  timestamp: 1659799186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        String strongest_extension\
    \ = \"\";\n        double strongest_strength = 0;\n        for (String extension\
    \ : extensions) {\n            int CAP = 0;\n            int SM = 0;\n       \
    \     for (int i = 0; i < extension.length(); i++) {\n                if (Character.isUpperCase(extension.charAt(i)))\
    \ {\n                    CAP++;\n                } else {\n                  \
    \  SM++;\n                }\n            }\n            double strength = (double)\
    \ CAP - SM;\n            if (strength > strongest_strength) {\n              \
    \  strongest_strength = strength;\n                strongest_extension = extension;\n\
    \            }\n        }\n        return class_name + \".\" + strongest_extension;\n\
    \    }\n    public static void main(String[] args) {\n    assert(StrongestExtension((\"\
    Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\"\
    , (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"\
    NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"\
    t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\"\
    , (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
    K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"\
    t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\"\
    , (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"\
    okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"\
    YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"\
    Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"\
    _.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"\
    671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppuly_mcz.java:47)\n"
  stdout: ''
  timestamp: 1659799186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        // Your code goes here\n\
    \        return \"\";\n    }\n    public static void main(String[] args) {\n \
    \   assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcpmjr68q.java:30)\n"
  stdout: ''
  timestamp: 1659799186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        // Your code goes here.\n\
    \        return \"\";\n    }\n    public static void main(String[] args) {\n \
    \   assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9vlp9pke.java:30)\n"
  stdout: ''
  timestamp: 1659799186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        // Your code goes here\n\
    \        return \"\";\n    }\n    public static void main(String[] args) {\n \
    \   assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcpmjr68q.java:30)\n"
  stdout: ''
  timestamp: 1659799186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        return \"\";\n    }\n \
    \   public static void main(String[] args) {\n    assert(StrongestExtension((\"\
    Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\"\
    , (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"\
    NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"\
    t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\"\
    , (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
    K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"\
    t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\"\
    , (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"\
    okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"\
    YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"\
    Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"\
    _.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"\
    671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4t7e0894.java:29)\n"
  stdout: ''
  timestamp: 1659799186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        // Your code here\n   \
    \     return null;\n    }\n    public static void main(String[] args) {\n    assert(StrongestExtension((\"\
    Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\"\
    , (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"\
    NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"\
    t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\"\
    , (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
    K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"\
    t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\"\
    , (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"\
    okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"\
    YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"\
    Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"\
    _.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"\
    671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"String.equals(Object)\" because the return value of \"Problem.StrongestExtension(String,\
    \ java.util.ArrayList)\" is null\n\tat Problem.main(tmpmpwx763a.java:30)\n"
  stdout: ''
  timestamp: 1659799186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        // Your code goes here\n\
    \        return \"\";\n    }\n    public static void main(String[] args) {\n \
    \   assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcpmjr68q.java:30)\n"
  stdout: ''
  timestamp: 1659799186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        // Your code here\n   \
    \     return \"\";\n    }\n    public static void main(String[] args) {\n    assert(StrongestExtension((\"\
    Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\"\
    , (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"\
    NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"\
    t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\"\
    , (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
    K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"\
    t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\"\
    , (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"\
    okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"\
    YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"\
    Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"\
    _.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"\
    671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp00pfl0_r.java:30)\n"
  stdout: ''
  timestamp: 1659799186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        // Your code goes here\n\
    \        return \"\";\n    }\n    public static void main(String[] args) {\n \
    \   assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcpmjr68q.java:30)\n"
  stdout: ''
  timestamp: 1659799186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        // Your code here\n   \
    \     return \"\";\n    }\n    public static void main(String[] args) {\n    assert(StrongestExtension((\"\
    Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\"\
    , (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"\
    NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"\
    t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\"\
    , (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
    K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"\
    t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\"\
    , (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"\
    okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"\
    YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"\
    Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"\
    _.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"\
    671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp00pfl0_r.java:30)\n"
  stdout: ''
  timestamp: 1659799186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        // Your code goes here\n\
    \        return \"\";\n    }\n    public static void main(String[] args) {\n \
    \   assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcpmjr68q.java:30)\n"
  stdout: ''
  timestamp: 1659799186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        // Your code goes here.\n\
    \        return null;\n    }\n    public static void main(String[] args) {\n \
    \   assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"String.equals(Object)\" because the return value of \"Problem.StrongestExtension(String,\
    \ java.util.ArrayList)\" is null\n\tat Problem.main(tmpzr5tcemu.java:30)\n"
  stdout: ''
  timestamp: 1659799186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        // Your code goes here\n\
    \        return \"\";\n    }\n    public static void main(String[] args) {\n \
    \   assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcpmjr68q.java:30)\n"
  stdout: ''
  timestamp: 1659799186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        // Your code goes here\n\
    \        return \"\";\n    }\n    public static void main(String[] args) {\n \
    \   assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcpmjr68q.java:30)\n"
  stdout: ''
  timestamp: 1659799186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        // Your code goes here\n\
    \        return \"\";\n    }\n    public static void main(String[] args) {\n \
    \   assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcpmjr68q.java:30)\n"
  stdout: ''
  timestamp: 1659799186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        // Your code goes here\n\
    \        return \"\";\n    }\n    public static void main(String[] args) {\n \
    \   assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcpmjr68q.java:30)\n"
  stdout: ''
  timestamp: 1659799186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        // Your code here\n   \
    \     return \"\";\n    }\n    public static void main(String[] args) {\n    assert(StrongestExtension((\"\
    Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\"\
    , (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"\
    NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"\
    t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\"\
    , (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
    K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"\
    t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\"\
    , (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"\
    okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"\
    YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"\
    Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"\
    _.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"\
    671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp00pfl0_r.java:30)\n"
  stdout: ''
  timestamp: 1659799186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        // Your code here\n   \
    \     return null;\n    }\n    public static void main(String[] args) {\n    assert(StrongestExtension((\"\
    Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\"\
    , (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"\
    NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"\
    t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\"\
    , (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
    K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"\
    t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\"\
    , (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"\
    okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"\
    YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"\
    Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"\
    _.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"\
    671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"String.equals(Object)\" because the return value of \"Problem.StrongestExtension(String,\
    \ java.util.ArrayList)\" is null\n\tat Problem.main(tmpmpwx763a.java:30)\n"
  stdout: ''
  timestamp: 1659799186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        String strongest = \"\"\
    ;\n        double strength = -1;\n        for (String ext : extensions) {\n  \
    \          double cap = 0;\n            double sm = 0;\n            for (char\
    \ c : ext.toCharArray()) {\n                if (Character.isUpperCase(c)) {\n\
    \                    cap++;\n                } else {\n                    sm++;\n\
    \                }\n            }\n            double new_strength = cap - sm;\n\
    \            if (new_strength > strength) {\n                strength = new_strength;\n\
    \                strongest = ext;\n            }\n        }\n        return class_name\
    \ + \".\" + strongest;\n    }\n    public static void main(String[] args) {\n\
    \    assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpp4mpnipg.java:47)\n"
  stdout: ''
  timestamp: 1659799186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        // Your code goes here\n\
    \        return null;\n    }\n    public static void main(String[] args) {\n \
    \   assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"String.equals(Object)\" because the return value of \"Problem.StrongestExtension(String,\
    \ java.util.ArrayList)\" is null\n\tat Problem.main(tmp664o4tdl.java:30)\n"
  stdout: ''
  timestamp: 1659799186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        // Your code goes here\n\
    \        return null;\n    }\n    public static void main(String[] args) {\n \
    \   assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"String.equals(Object)\" because the return value of \"Problem.StrongestExtension(String,\
    \ java.util.ArrayList)\" is null\n\tat Problem.main(tmp664o4tdl.java:30)\n"
  stdout: ''
  timestamp: 1659799186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        // Your code goes here\n\
    \        return null;\n    }\n    public static void main(String[] args) {\n \
    \   assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"String.equals(Object)\" because the return value of \"Problem.StrongestExtension(String,\
    \ java.util.ArrayList)\" is null\n\tat Problem.main(tmp664o4tdl.java:30)\n"
  stdout: ''
  timestamp: 1659799186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        // Your code goes here\n\
    \        // Hint: You will need to use the java.lang.reflect package to load classes.\n\
    \        // Hint: You will need to use the java.util.stream package to sort the\
    \ extensions.\n        // Hint: You will need to use the java.util.Comparator\
    \ interface to compare the extensions.\n        // Hint: You will need to use\
    \ the java.util.function.Function interface to create a function to compare the\
    \ extensions.\n        // Hint: You will need to use the java.util.function.BiFunction\
    \ interface to create a function to compare the extensions.\n        // Hint:\
    \ You will need to use the java.util.function.BiFunction interface to create a\
    \ function to compare the extensions.\n        // Hint: You will need to use the\
    \ java.util.function.BiFunction interface to create a function to compare the\
    \ extensions.\n        // Hint: You will need to use the java.util.function.BiFunction\
    \ interface to create a function to compare the extensions.\n        // Hint:\
    \ You will need to use the java.util.function.BiFunction interface to create a\
    \ function to compare the extensions.\n        // Hint: You will need to use the\
    \ java.util.function.BiFunction interface to create a function to compare the\
    \ extensions.\n        // Hint: You will need to use the java.util.function.BiFunction\
    \ interface to create a function to compare the extensions.\n        // Hint:\
    \ You will need to use the java.util.function.BiFunction interface to create a\
    \ function to compare the extensions.\n        // Hint: You will need to use the\
    \ java.util.function.BiFunction interface to create a function to compare the\
    \ extensions.\n        // Hint: You will need to use the java.util.function.BiFunction\
    \ interface to create a function to compare the extensions.\n        // Hint:\
    \ You will need to use the java.util.function.BiFunction interface to create a\
    \ function to compare the extensions.\n        // Hint: You will need to use the\
    \ java.util.function.BiFunction interface to create a function to compare the\
    \ extensions.\n        // Hint: You will need to use the java.util.function.BiFunction\
    \ interface to create a function to compare the extensions.\n        // Hint:\
    \ You will need to use the java.util.function\n    }\n    public static void main(String[]\
    \ args) {\n    assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprhgxycqj.java:45: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659799186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        // Your code goes here\n\
    \        return \"\";\n    }\n    public static void main(String[] args) {\n \
    \   assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcpmjr68q.java:30)\n"
  stdout: ''
  timestamp: 1659799186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        // Your code goes here.\n\
    \        // You can add additional classes if you want.\n        // You can use\
    \ the main method to test your code.\n        // You can use the checker to test\
    \ your code.\n        // You can use the submit website to test your code.\n \
    \       // You can use the leaderboard to test your code.\n        return \"\"\
    ;\n    }\n    public static void main(String[] args) {\n    assert(StrongestExtension((\"\
    Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\"\
    , (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"\
    NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"\
    t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\"\
    , (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
    K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"\
    t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\"\
    , (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"\
    okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"\
    YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"\
    Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"\
    _.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"\
    671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0lrccq0h.java:35)\n"
  stdout: ''
  timestamp: 1659799186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        return class_name + \"\
    .\" + extensions.stream().max(Comparator.comparing(ext -> {\n            int cap\
    \ = ext.chars().filter(Character::isUpperCase).count();\n            int sm =\
    \ ext.chars().filter(Character::isLowerCase).count();\n            return cap\
    \ - sm;\n        })).get();\n    }\n    public static void main(String[] args)\
    \ {\n    assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpx5im6i50.java:27: error: incompatible types: possible lossy conversion\
    \ from long to int\n            int cap = ext.chars().filter(Character::isUpperCase).count();\n\
    \                                                                      ^\n/tmp/tmpx5im6i50.java:28:\
    \ error: incompatible types: possible lossy conversion from long to int\n    \
    \        int sm = ext.chars().filter(Character::isLowerCase).count();\n      \
    \                                                               ^\n2 errors\n"
  stdout: ''
  timestamp: 1659799186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        // Your code goes here\n\
    \        return null;\n    }\n    public static void main(String[] args) {\n \
    \   assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"String.equals(Object)\" because the return value of \"Problem.StrongestExtension(String,\
    \ java.util.ArrayList)\" is null\n\tat Problem.main(tmp664o4tdl.java:30)\n"
  stdout: ''
  timestamp: 1659799186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        // Your code goes here\n\
    \        return \"\";\n    }\n    public static void main(String[] args) {\n \
    \   assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcpmjr68q.java:30)\n"
  stdout: ''
  timestamp: 1659799186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        // Your code goes here\n\
    \        return \"\";\n    }\n    public static void main(String[] args) {\n \
    \   assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcpmjr68q.java:30)\n"
  stdout: ''
  timestamp: 1659799186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        // Your code goes here.\n\
    \        return null;\n    }\n    public static void main(String[] args) {\n \
    \   assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"String.equals(Object)\" because the return value of \"Problem.StrongestExtension(String,\
    \ java.util.ArrayList)\" is null\n\tat Problem.main(tmpzr5tcemu.java:30)\n"
  stdout: ''
  timestamp: 1659799186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        // Your code goes here.\n\
    \        return \"\";\n    }\n    public static void main(String[] args) {\n \
    \   assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9vlp9pke.java:30)\n"
  stdout: ''
  timestamp: 1659799186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        // Your code goes here\n\
    \        return \"\";\n    }\n    public static void main(String[] args) {\n \
    \   assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcpmjr68q.java:30)\n"
  stdout: ''
  timestamp: 1659799186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        // Your code goes here\n\
    \        return \"\";\n    }\n    public static void main(String[] args) {\n \
    \   assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcpmjr68q.java:30)\n"
  stdout: ''
  timestamp: 1659799186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        // Your code goes here\n\
    \        return \"\";\n    }\n    public static void main(String[] args) {\n \
    \   assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcpmjr68q.java:30)\n"
  stdout: ''
  timestamp: 1659799186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        // Your code goes here\n\
    \        return null;\n    }\n    public static void main(String[] args) {\n \
    \   assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"String.equals(Object)\" because the return value of \"Problem.StrongestExtension(String,\
    \ java.util.ArrayList)\" is null\n\tat Problem.main(tmp664o4tdl.java:30)\n"
  stdout: ''
  timestamp: 1659799186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        String strongest_extension\
    \ = \"\";\n        double strongest_strength = 0;\n        for (String extension\
    \ : extensions) {\n            double strength = 0;\n            for (char c :\
    \ extension.toCharArray()) {\n                if (Character.isUpperCase(c)) {\n\
    \                    strength += 1;\n                } else {\n              \
    \      strength -= 1;\n                }\n            }\n            if (strength\
    \ > strongest_strength) {\n                strongest_strength = strength;\n  \
    \              strongest_extension = extension;\n            }\n        }\n  \
    \      return class_name + \".\" + strongest_extension;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(StrongestExtension((\"Watashi\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\", (String)\"\
    eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"\
    NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"\
    t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\"\
    , (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
    K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"\
    t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\"\
    , (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"\
    okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"\
    YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"\
    Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"\
    _.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"\
    671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpk66f1p04.java:45)\n"
  stdout: ''
  timestamp: 1659799186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        // Your code goes here\n\
    \        return null;\n    }\n    public static void main(String[] args) {\n \
    \   assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"String.equals(Object)\" because the return value of \"Problem.StrongestExtension(String,\
    \ java.util.ArrayList)\" is null\n\tat Problem.main(tmp664o4tdl.java:30)\n"
  stdout: ''
  timestamp: 1659799186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        // Your code goes here\n\
    \        return \"\";\n    }\n    public static void main(String[] args) {\n \
    \   assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcpmjr68q.java:30)\n"
  stdout: ''
  timestamp: 1659799186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        // Your code goes here\n\
    \        return \"\";\n    }\n    public static void main(String[] args) {\n \
    \   assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcpmjr68q.java:30)\n"
  stdout: ''
  timestamp: 1659799186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        // Your code goes here.\n\
    \        return \"\";\n    }\n    public static void main(String[] args) {\n \
    \   assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9vlp9pke.java:30)\n"
  stdout: ''
  timestamp: 1659799186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        // Your code goes here\n\
    \        return \"\";\n    }\n    public static void main(String[] args) {\n \
    \   assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcpmjr68q.java:30)\n"
  stdout: ''
  timestamp: 1659799186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        // Your code goes here\n\
    \        return \"\";\n    }\n    public static void main(String[] args) {\n \
    \   assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcpmjr68q.java:30)\n"
  stdout: ''
  timestamp: 1659799186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        // Your code here\n   \
    \     return \"\";\n    }\n    public static void main(String[] args) {\n    assert(StrongestExtension((\"\
    Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\"\
    , (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"\
    NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"\
    t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\"\
    , (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
    K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"\
    t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\"\
    , (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"\
    okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"\
    YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"\
    Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"\
    _.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"\
    671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp00pfl0_r.java:30)\n"
  stdout: ''
  timestamp: 1659799186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        // Your code goes here\n\
    \        String strongest_extension = \"\";\n        double strongest_strength\
    \ = 0;\n        for (String extension : extensions) {\n            double strength\
    \ = 0;\n            for (int i = 0; i < extension.length(); i++) {\n         \
    \       if (Character.isUpperCase(extension.charAt(i))) {\n                  \
    \  strength += 1;\n                } else {\n                    strength -= 1;\n\
    \                }\n            }\n            if (strength > strongest_strength)\
    \ {\n                strongest_strength = strength;\n                strongest_extension\
    \ = extension;\n            }\n        }\n        return class_name + \".\" +\
    \ strongest_extension;\n    }\n    public static void main(String[] args) {\n\
    \    assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprqv_6vg8.java:46)\n"
  stdout: ''
  timestamp: 1659799186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        // Your code goes here.\n\
    \        return \"\";\n    }\n    public static void main(String[] args) {\n \
    \   assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9vlp9pke.java:30)\n"
  stdout: ''
  timestamp: 1659799186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        // Your code goes here\n\
    \        return \"\";\n    }\n    public static void main(String[] args) {\n \
    \   assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcpmjr68q.java:30)\n"
  stdout: ''
  timestamp: 1659799186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        // Your code goes here\n\
    \        return \"\";\n    }\n    public static void main(String[] args) {\n \
    \   assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcpmjr68q.java:30)\n"
  stdout: ''
  timestamp: 1659799186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        // Your code goes here.\n\
    \        return \"\";\n    }\n    public static void main(String[] args) {\n \
    \   assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9vlp9pke.java:30)\n"
  stdout: ''
  timestamp: 1659799186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        // Your code goes here\n\
    \        return \"\";\n    }\n    public static void main(String[] args) {\n \
    \   assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcpmjr68q.java:30)\n"
  stdout: ''
  timestamp: 1659799186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        // Your code goes here.\n\
    \        return \"\";\n    }\n    public static void main(String[] args) {\n \
    \   assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9vlp9pke.java:30)\n"
  stdout: ''
  timestamp: 1659799186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        int max_strength = Integer.MIN_VALUE;\n\
    \        String strongest_extension = \"\";\n        for (String extension : extensions)\
    \ {\n            int strength = 0;\n            for (int i = 0; i < extension.length();\
    \ i++) {\n                char c = extension.charAt(i);\n                if (Character.isUpperCase(c))\
    \ {\n                    strength++;\n                } else {\n             \
    \       strength--;\n                }\n            }\n            if (strength\
    \ > max_strength) {\n                max_strength = strength;\n              \
    \  strongest_extension = extension;\n            }\n        }\n        return\
    \ class_name + \".\" + strongest_extension;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppd5oi6d_.java:46)\n"
  stdout: ''
  timestamp: 1659799186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        // Write your code here\n\
    \        return \"\";\n    }\n    public static void main(String[] args) {\n \
    \   assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpchv_99sg.java:30)\n"
  stdout: ''
  timestamp: 1659799186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        // Your code goes here\n\
    \        return \"\";\n    }\n    public static void main(String[] args) {\n \
    \   assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcpmjr68q.java:30)\n"
  stdout: ''
  timestamp: 1659799186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        // Your code goes here\n\
    \        return \"\";\n    }\n    public static void main(String[] args) {\n \
    \   assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcpmjr68q.java:30)\n"
  stdout: ''
  timestamp: 1659799186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        // Your code goes here\n\
    \        return \"\";\n    }\n    public static void main(String[] args) {\n \
    \   assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcpmjr68q.java:30)\n"
  stdout: ''
  timestamp: 1659799186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        String strongest = \"\"\
    ;\n        double strength = 0;\n        for (String extension : extensions) {\n\
    \            double cap = extension.replaceAll(\"[^A-Z]\", \"\").length();\n \
    \           double sm = extension.replaceAll(\"[^a-z]\", \"\").length();\n   \
    \         double curr_strength = cap - sm;\n            if (curr_strength > strength)\
    \ {\n                strength = curr_strength;\n                strongest = extension;\n\
    \            }\n        }\n        return class_name + \".\" + strongest;\n  \
    \  }\n    public static void main(String[] args) {\n    assert(StrongestExtension((\"\
    Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\"\
    , (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"\
    NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"\
    t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\"\
    , (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
    K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"\
    t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\"\
    , (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"\
    okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"\
    YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"\
    Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"\
    _.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"\
    671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphkzccrue.java:42)\n"
  stdout: ''
  timestamp: 1659799186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        // Your code here\n   \
    \     return \"\";\n    }\n    public static void main(String[] args) {\n    assert(StrongestExtension((\"\
    Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\"\
    , (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"\
    NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"\
    t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\"\
    , (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
    K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"\
    t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\"\
    , (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"\
    okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"\
    YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"\
    Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"\
    _.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"\
    671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp00pfl0_r.java:30)\n"
  stdout: ''
  timestamp: 1659799186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        return \"\";\n    }\n \
    \   public static void main(String[] args) {\n    assert(StrongestExtension((\"\
    Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\"\
    , (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"\
    NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"\
    t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\"\
    , (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
    K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"\
    t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\"\
    , (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"\
    okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"\
    YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"\
    Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"\
    _.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"\
    671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4t7e0894.java:29)\n"
  stdout: ''
  timestamp: 1659799186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        int max_strength = 0;\n\
    \        String max_extension = \"\";\n        for (String extension : extensions)\
    \ {\n            int strength = 0;\n            for (char c : extension.toCharArray())\
    \ {\n                if (Character.isUpperCase(c)) {\n                    strength++;\n\
    \                } else {\n                    strength--;\n                }\n\
    \            }\n            if (strength > max_strength) {\n                max_strength\
    \ = strength;\n                max_extension = extension;\n            }\n   \
    \     }\n        return class_name + \".\" + max_extension;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(StrongestExtension((\"Watashi\"\
    ), (new ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\", (String)\"\
    eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"\
    NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"\
    t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\"\
    , (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
    K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"\
    t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\"\
    , (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"\
    okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"\
    YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"\
    Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"\
    _.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"\
    671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpa273omxq.java:45)\n"
  stdout: ''
  timestamp: 1659799186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        // Your code here\n   \
    \     return \"\";\n    }\n    public static void main(String[] args) {\n    assert(StrongestExtension((\"\
    Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\"\
    , (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"\
    NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"\
    t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\"\
    , (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
    K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"\
    t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\"\
    , (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"\
    okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"\
    YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"\
    Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"\
    _.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"\
    671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp00pfl0_r.java:30)\n"
  stdout: ''
  timestamp: 1659799186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        String strongest = \"\"\
    ;\n        double strength = 0;\n        for (String ext : extensions) {\n   \
    \         double ext_strength = 0;\n            for (int i = 0; i < ext.length();\
    \ i++) {\n                if (Character.isUpperCase(ext.charAt(i))) {\n      \
    \              ext_strength += 1;\n                } else {\n                \
    \    ext_strength -= 1;\n                }\n            }\n            if (ext_strength\
    \ > strength) {\n                strength = ext_strength;\n                strongest\
    \ = ext;\n            }\n        }\n        return class_name + \".\" + strongest;\n\
    \    }\n    public static void main(String[] args) {\n    assert(StrongestExtension((\"\
    Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\"\
    , (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"\
    NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"\
    t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\"\
    , (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
    K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"\
    t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\"\
    , (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"\
    okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"\
    YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"\
    Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"\
    _.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"\
    671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpchkzqkqq.java:45)\n"
  stdout: ''
  timestamp: 1659799187
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        // Your code goes here\n\
    \        return \"\";\n    }\n    public static void main(String[] args) {\n \
    \   assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcpmjr68q.java:30)\n"
  stdout: ''
  timestamp: 1659799186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        // Your code goes here\n\
    \        return null;\n    }\n    public static void main(String[] args) {\n \
    \   assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"String.equals(Object)\" because the return value of \"Problem.StrongestExtension(String,\
    \ java.util.ArrayList)\" is null\n\tat Problem.main(tmp664o4tdl.java:30)\n"
  stdout: ''
  timestamp: 1659799186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        // Your code goes here.\n\
    \        return \"\";\n    }\n    public static void main(String[] args) {\n \
    \   assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9vlp9pke.java:30)\n"
  stdout: ''
  timestamp: 1659799186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        String strongest_extension\
    \ = \"\";\n        double strongest_strength = 0;\n        for (String extension\
    \ : extensions) {\n            double strength = 0;\n            for (char c :\
    \ extension.toCharArray()) {\n                if (Character.isUpperCase(c)) {\n\
    \                    strength += 1;\n                } else {\n              \
    \      strength -= 1;\n                }\n            }\n            if (strength\
    \ > strongest_strength) {\n                strongest_strength = strength;\n  \
    \              strongest_extension = extension;\n            }\n        }\n  \
    \      return class_name + \".\" + strongest_extension;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(StrongestExtension((\"Watashi\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\", (String)\"\
    eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"\
    NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"\
    t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\"\
    , (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
    K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"\
    t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\"\
    , (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"\
    okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"\
    YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"\
    Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"\
    _.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"\
    671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpk66f1p04.java:45)\n"
  stdout: ''
  timestamp: 1659799186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        // Your code goes here\n\
    \        return \"\";\n    }\n    public static void main(String[] args) {\n \
    \   assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcpmjr68q.java:30)\n"
  stdout: ''
  timestamp: 1659799186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        // Your code goes here\n\
    \        return \"\";\n    }\n    public static void main(String[] args) {\n \
    \   assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcpmjr68q.java:30)\n"
  stdout: ''
  timestamp: 1659799186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        // Your code here\n   \
    \     return \"\";\n    }\n    public static void main(String[] args) {\n    assert(StrongestExtension((\"\
    Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\"\
    , (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"\
    NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"\
    t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\"\
    , (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
    K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"\
    t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\"\
    , (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"\
    okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"\
    YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"\
    Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"\
    _.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"\
    671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp00pfl0_r.java:30)\n"
  stdout: ''
  timestamp: 1659799186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        int max = -1;\n       \
    \ String strongest = \"\";\n        for (String ext : extensions) {\n        \
    \    int cap = 0;\n            int sm = 0;\n            for (int i = 0; i < ext.length();\
    \ i++) {\n                if (Character.isUpperCase(ext.charAt(i))) {\n      \
    \              cap++;\n                } else {\n                    sm++;\n \
    \               }\n            }\n            if (cap - sm > max) {\n        \
    \        max = cap - sm;\n                strongest = ext;\n            }\n  \
    \      }\n        return class_name + \".\" + strongest;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(StrongestExtension((\"Watashi\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\", (String)\"\
    eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"\
    NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"\
    t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\"\
    , (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
    K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"\
    t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\"\
    , (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"\
    okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"\
    YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"\
    Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"\
    _.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"\
    671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9tos9m69.java:46)\n"
  stdout: ''
  timestamp: 1659799187
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        // Your code goes here\n\
    \        return \"\";\n    }\n    public static void main(String[] args) {\n \
    \   assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcpmjr68q.java:30)\n"
  stdout: ''
  timestamp: 1659799186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        // Your code goes here\n\
    \        return \"\";\n    }\n    public static void main(String[] args) {\n \
    \   assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcpmjr68q.java:30)\n"
  stdout: ''
  timestamp: 1659799186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        // Your code goes here.\n\
    \        return \"\";\n    }\n    public static void main(String[] args) {\n \
    \   assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9vlp9pke.java:30)\n"
  stdout: ''
  timestamp: 1659799186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        int strength = 0;\n   \
    \     String strongest = \"\";\n        for (String extension : extensions) {\n\
    \            int cap = 0;\n            int sm = 0;\n            for (int i = 0;\
    \ i < extension.length(); i++) {\n                if (Character.isUpperCase(extension.charAt(i)))\
    \ {\n                    cap++;\n                } else {\n                  \
    \  sm++;\n                }\n            }\n            if (cap - sm > strength)\
    \ {\n                strength = cap - sm;\n                strongest = extension;\n\
    \            }\n        }\n        return class_name + \".\" + strongest;\n  \
    \  }\n    public static void main(String[] args) {\n    assert(StrongestExtension((\"\
    Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\"\
    , (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"\
    NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"\
    t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\"\
    , (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
    K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"\
    t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\"\
    , (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"\
    okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"\
    YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"\
    Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"\
    _.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"\
    671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptrkl15gs.java:46)\n"
  stdout: ''
  timestamp: 1659799187
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        // Your code here\n   \
    \     return \"\";\n    }\n    public static void main(String[] args) {\n    assert(StrongestExtension((\"\
    Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\"\
    , (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"\
    NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"\
    t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\"\
    , (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
    K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"\
    t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\"\
    , (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"\
    okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"\
    YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"\
    Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"\
    _.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"\
    671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp00pfl0_r.java:30)\n"
  stdout: ''
  timestamp: 1659799186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        // Your code goes here\n\
    \        return \"\";\n    }\n    public static void main(String[] args) {\n \
    \   assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcpmjr68q.java:30)\n"
  stdout: ''
  timestamp: 1659799186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        // Your code here\n   \
    \     return \"\";\n    }\n    public static void main(String[] args) {\n    assert(StrongestExtension((\"\
    Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\"\
    , (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"\
    NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"\
    t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\"\
    , (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
    K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"\
    t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\"\
    , (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"\
    okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"\
    YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"\
    Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"\
    _.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"\
    671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp00pfl0_r.java:30)\n"
  stdout: ''
  timestamp: 1659799186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        // Your code goes here\n\
    \        return \"\";\n    }\n    public static void main(String[] args) {\n \
    \   assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcpmjr68q.java:30)\n"
  stdout: ''
  timestamp: 1659799186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        // Write your code here\n\
    \        return \"\";\n    }\n    public static void main(String[] args) {\n \
    \   assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpchv_99sg.java:30)\n"
  stdout: ''
  timestamp: 1659799186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        // Your code goes here\n\
    \        return \"\";\n    }\n    public static void main(String[] args) {\n \
    \   assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcpmjr68q.java:30)\n"
  stdout: ''
  timestamp: 1659799186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        // Your code here\n   \
    \     return \"\";\n    }\n    public static void main(String[] args) {\n    assert(StrongestExtension((\"\
    Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\"\
    , (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"\
    NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"\
    t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\"\
    , (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
    K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"\
    t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\"\
    , (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"\
    okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"\
    YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"\
    Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"\
    _.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"\
    671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp00pfl0_r.java:30)\n"
  stdout: ''
  timestamp: 1659799186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        // Your code goes here\n\
    \        return \"\";\n    }\n    public static void main(String[] args) {\n \
    \   assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcpmjr68q.java:30)\n"
  stdout: ''
  timestamp: 1659799186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        // Your code goes here\n\
    \        return \"\";\n    }\n    public static void main(String[] args) {\n \
    \   assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcpmjr68q.java:30)\n"
  stdout: ''
  timestamp: 1659799186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        // Your code goes here.\n\
    \        return \"\";\n    }\n    public static void main(String[] args) {\n \
    \   assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9vlp9pke.java:30)\n"
  stdout: ''
  timestamp: 1659799186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        // Your code goes here.\n\
    \        return \"\";\n    }\n    public static void main(String[] args) {\n \
    \   assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9vlp9pke.java:30)\n"
  stdout: ''
  timestamp: 1659799186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        // Your code here\n   \
    \     return \"\";\n    }\n    public static void main(String[] args) {\n    assert(StrongestExtension((\"\
    Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\"\
    , (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"\
    NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"\
    t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\"\
    , (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
    K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"\
    t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\"\
    , (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"\
    okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"\
    YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"\
    Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"\
    _.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"\
    671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp00pfl0_r.java:30)\n"
  stdout: ''
  timestamp: 1659799186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        // Your code goes here.\n\
    \        return \"\";\n    }\n    public static void main(String[] args) {\n \
    \   assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9vlp9pke.java:30)\n"
  stdout: ''
  timestamp: 1659799186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        // Your code goes here\n\
    \        return \"\";\n    }\n    public static void main(String[] args) {\n \
    \   assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcpmjr68q.java:30)\n"
  stdout: ''
  timestamp: 1659799186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        String strongest_extension\
    \ = \"\";\n        double strongest_strength = 0;\n        for (String extension\
    \ : extensions) {\n            double strength = 0;\n            for (int i =\
    \ 0; i < extension.length(); i++) {\n                if (Character.isUpperCase(extension.charAt(i)))\
    \ {\n                    strength += 1;\n                } else {\n          \
    \          strength -= 1;\n                }\n            }\n            if (strength\
    \ > strongest_strength) {\n                strongest_strength = strength;\n  \
    \              strongest_extension = extension;\n            }\n        }\n  \
    \      return class_name + \".\" + strongest_extension;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(StrongestExtension((\"Watashi\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\", (String)\"\
    eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"\
    NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"\
    t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\"\
    , (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
    K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"\
    t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\"\
    , (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"\
    okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"\
    YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"\
    Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"\
    _.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"\
    671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpueqglizw.java:45)\n"
  stdout: ''
  timestamp: 1659799186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        String strongest = \"\"\
    ;\n        double strength = -1;\n        for (String extension : extensions)\
    \ {\n            double current_strength = 0;\n            for (int i = 0; i <\
    \ extension.length(); i++) {\n                if (Character.isUpperCase(extension.charAt(i)))\
    \ {\n                    current_strength += 1;\n                } else {\n  \
    \                  current_strength -= 1;\n                }\n            }\n\
    \            if (current_strength > strength) {\n                strength = current_strength;\n\
    \                strongest = extension;\n            }\n        }\n        return\
    \ class_name + \".\" + strongest;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1lh2dpsl.java:45)\n"
  stdout: ''
  timestamp: 1659799187
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        // Your code goes here\n\
    \        return \"\";\n    }\n    public static void main(String[] args) {\n \
    \   assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcpmjr68q.java:30)\n"
  stdout: ''
  timestamp: 1659799186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        // Your code here\n   \
    \     return \"\";\n    }\n    public static void main(String[] args) {\n    assert(StrongestExtension((\"\
    Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\"\
    , (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"\
    NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"\
    t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\"\
    , (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
    K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"\
    t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\"\
    , (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"\
    okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"\
    YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"\
    Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"\
    _.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"\
    671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp00pfl0_r.java:30)\n"
  stdout: ''
  timestamp: 1659799186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        // Your code goes here\n\
    \        return \"\";\n    }\n    public static void main(String[] args) {\n \
    \   assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcpmjr68q.java:30)\n"
  stdout: ''
  timestamp: 1659799186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        // Your code goes here\n\
    \        return \"\";\n    }\n    public static void main(String[] args) {\n \
    \   assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcpmjr68q.java:30)\n"
  stdout: ''
  timestamp: 1659799186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        // Your code here\n   \
    \     return \"\";\n    }\n    public static void main(String[] args) {\n    assert(StrongestExtension((\"\
    Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\"\
    , (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"\
    NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"\
    t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\"\
    , (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
    K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"\
    t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\"\
    , (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"\
    okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"\
    YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"\
    Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"\
    _.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"\
    671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp00pfl0_r.java:30)\n"
  stdout: ''
  timestamp: 1659799186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        // Your code goes here\n\
    \        return \"\";\n    }\n    public static void main(String[] args) {\n \
    \   assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcpmjr68q.java:30)\n"
  stdout: ''
  timestamp: 1659799186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        // Your code goes here\n\
    \        return \"\";\n    }\n    public static void main(String[] args) {\n \
    \   assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcpmjr68q.java:30)\n"
  stdout: ''
  timestamp: 1659799186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        // Your code goes here\n\
    \        return \"\";\n    }\n    public static void main(String[] args) {\n \
    \   assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcpmjr68q.java:30)\n"
  stdout: ''
  timestamp: 1659799186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n        // (\"my_class.AA\")\n        // >>> StrongestExtension((\"\
    Slices\"), (new ArrayList<String>(Arrays.asList((String)\"SErviNGSliCes\", (String)\"\
    Cheese\", (String)\"StuFfed\"))))\n        // (\"Slices.SErviNGSliCes\")\n   \
    \     // >>> StrongestExtension((\"Slices\"), (new ArrayList<String>(Arrays.asList((String)\"\
    SErviNGSliCes\", (String)\"Cheese\", (String)\"StuFfed\", (String)\"StuFfed\"\
    ))))\n        // (\"Slices.StuFfed\")\n        // >>> StrongestExtension((\"Slices\"\
    ), (new ArrayList<String>(Arrays.asList((String)\"SErviNGSliCes\", (String)\"\
    Cheese\", (String)\"StuFfed\", (String)\"StuFfed\", (String)\"StuFfed\"))))\n\
    \        // (\"Slices.StuFfed\")\n        // >>> StrongestExtension((\"Slices\"\
    ), (new ArrayList<String>(Arrays.asList((String)\"SErviNGSliCes\", (String)\"\
    Cheese\", (String)\"StuFfed\", (String)\"StuFfed\", (String)\"StuFfed\", (String)\"\
    StuFfed\"))))\n        // (\"Slices.StuFfed\")\n        // >>> StrongestExtension((\"\
    Slices\"), (new ArrayList<String>(Arrays.asList((String)\"SErviNGSliCes\", (String)\"\
    Cheese\", (String)\"StuFfed\", (String)\"StuFfed\", (String)\"StuFfed\", (String)\"\
    StuFfed\", (String)\"StuFfed\"))))\n        // (\"Slices.StuFfed\")\n        //\
    \ >>> StrongestExtension((\"Slices\"), (new ArrayList<String>(Arrays.asList((String)\"\
    SErviNGSliCes\", (String)\"Cheese\", (String\n    }\n    public static void main(String[]\
    \ args) {\n    assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpg5pnizai.java:39: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659799187
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        // Your code goes here\n\
    \        return \"\";\n    }\n    public static void main(String[] args) {\n \
    \   assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcpmjr68q.java:30)\n"
  stdout: ''
  timestamp: 1659799186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        // Your code goes here.\n\
    \        return \"\";\n    }\n    public static void main(String[] args) {\n \
    \   assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9vlp9pke.java:30)\n"
  stdout: ''
  timestamp: 1659799186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        // Your code goes here\n\
    \        return \"\";\n    }\n    public static void main(String[] args) {\n \
    \   assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcpmjr68q.java:30)\n"
  stdout: ''
  timestamp: 1659799186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        String strongest = \"\"\
    ;\n        double strength = 0;\n        for (String ext : extensions) {\n   \
    \         int cap = 0;\n            int sm = 0;\n            for (int i = 0; i\
    \ < ext.length(); i++) {\n                if (Character.isUpperCase(ext.charAt(i)))\
    \ {\n                    cap++;\n                } else {\n                  \
    \  sm++;\n                }\n            }\n            double new_strength =\
    \ (double)cap - (double)sm;\n            if (new_strength > strength) {\n    \
    \            strength = new_strength;\n                strongest = ext;\n    \
    \        }\n        }\n        return class_name + \".\" + strongest;\n    }\n\
    \    public static void main(String[] args) {\n    assert(StrongestExtension((\"\
    Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\"\
    , (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"\
    NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"\
    t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\"\
    , (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
    K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"\
    t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\"\
    , (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"\
    okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"\
    YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"\
    Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"\
    _.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"\
    671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp71aty_bi.java:47)\n"
  stdout: ''
  timestamp: 1659799187
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        // Your code goes here\n\
    \        return \"\";\n    }\n    public static void main(String[] args) {\n \
    \   assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcpmjr68q.java:30)\n"
  stdout: ''
  timestamp: 1659799186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        // Your code goes here\n\
    \        return \"\";\n    }\n    public static void main(String[] args) {\n \
    \   assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcpmjr68q.java:30)\n"
  stdout: ''
  timestamp: 1659799186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        // Your code goes here\n\
    \        return \"\";\n    }\n    public static void main(String[] args) {\n \
    \   assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcpmjr68q.java:30)\n"
  stdout: ''
  timestamp: 1659799186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        // Your code here\n   \
    \     return \"\";\n    }\n    public static void main(String[] args) {\n    assert(StrongestExtension((\"\
    Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\"\
    , (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"\
    NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"\
    t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\"\
    , (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
    K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"\
    t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\"\
    , (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"\
    okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"\
    YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"\
    Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"\
    _.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"\
    671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp00pfl0_r.java:30)\n"
  stdout: ''
  timestamp: 1659799186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        // Your code goes here\n\
    \        return \"\";\n    }\n    public static void main(String[] args) {\n \
    \   assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcpmjr68q.java:30)\n"
  stdout: ''
  timestamp: 1659799186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        // Your code goes here\n\
    \        return \"\";\n    }\n    public static void main(String[] args) {\n \
    \   assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcpmjr68q.java:30)\n"
  stdout: ''
  timestamp: 1659799186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        // Your code goes here\n\
    \        return null;\n    }\n    public static void main(String[] args) {\n \
    \   assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"String.equals(Object)\" because the return value of \"Problem.StrongestExtension(String,\
    \ java.util.ArrayList)\" is null\n\tat Problem.main(tmp664o4tdl.java:30)\n"
  stdout: ''
  timestamp: 1659799186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        // Your code goes here\n\
    \        return null;\n    }\n    public static void main(String[] args) {\n \
    \   assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"String.equals(Object)\" because the return value of \"Problem.StrongestExtension(String,\
    \ java.util.ArrayList)\" is null\n\tat Problem.main(tmp664o4tdl.java:30)\n"
  stdout: ''
  timestamp: 1659799186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        int max_strength = Integer.MIN_VALUE;\n\
    \        String strongest_extension = \"\";\n        for (String extension : extensions)\
    \ {\n            int strength = 0;\n            for (int i = 0; i < extension.length();\
    \ i++) {\n                if (Character.isUpperCase(extension.charAt(i))) {\n\
    \                    strength++;\n                } else {\n                 \
    \   strength--;\n                }\n            }\n            if (strength >\
    \ max_strength) {\n                max_strength = strength;\n                strongest_extension\
    \ = extension;\n            }\n        }\n        return class_name + \".\" +\
    \ strongest_extension;\n    }\n    public static void main(String[] args) {\n\
    \    assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5sylckc2.java:45)\n"
  stdout: ''
  timestamp: 1659799187
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        // Your code goes here\n\
    \        return \"\";\n    }\n    public static void main(String[] args) {\n \
    \   assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcpmjr68q.java:30)\n"
  stdout: ''
  timestamp: 1659799186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        // Your code here\n   \
    \     return \"\";\n    }\n    public static void main(String[] args) {\n    assert(StrongestExtension((\"\
    Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\"\
    , (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"\
    NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"\
    t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\"\
    , (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
    K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"\
    t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\"\
    , (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"\
    okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"\
    YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"\
    Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"\
    _.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"\
    671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp00pfl0_r.java:30)\n"
  stdout: ''
  timestamp: 1659799186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        String strongest_extension\
    \ = \"\";\n        double strongest_strength = 0;\n        for (String extension\
    \ : extensions) {\n            double strength = 0;\n            for (char c :\
    \ extension.toCharArray()) {\n                if (Character.isUpperCase(c)) {\n\
    \                    strength += 1;\n                } else {\n              \
    \      strength -= 1;\n                }\n            }\n            if (strength\
    \ > strongest_strength) {\n                strongest_strength = strength;\n  \
    \              strongest_extension = extension;\n            }\n        }\n  \
    \      return class_name + \".\" + strongest_extension;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(StrongestExtension((\"Watashi\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\", (String)\"\
    eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"\
    NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"\
    t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\"\
    , (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
    K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"\
    t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\"\
    , (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"\
    okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"\
    YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"\
    Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"\
    _.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"\
    671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpk66f1p04.java:45)\n"
  stdout: ''
  timestamp: 1659799186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        int max_strength = Integer.MIN_VALUE;\n\
    \        String strongest_extension = \"\";\n        for (String extension : extensions)\
    \ {\n            int strength = 0;\n            for (int i = 0; i < extension.length();\
    \ i++) {\n                char c = extension.charAt(i);\n                if (Character.isUpperCase(c))\
    \ {\n                    strength++;\n                } else {\n             \
    \       strength--;\n                }\n            }\n            if (strength\
    \ > max_strength) {\n                max_strength = strength;\n              \
    \  strongest_extension = extension;\n            }\n        }\n        return\
    \ class_name + \".\" + strongest_extension;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppd5oi6d_.java:46)\n"
  stdout: ''
  timestamp: 1659799186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        // Your code goes here\n\
    \        return \"\";\n    }\n    public static void main(String[] args) {\n \
    \   assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcpmjr68q.java:30)\n"
  stdout: ''
  timestamp: 1659799186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        // Your code goes here\n\
    \        return \"\";\n    }\n    public static void main(String[] args) {\n \
    \   assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcpmjr68q.java:30)\n"
  stdout: ''
  timestamp: 1659799186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        // Your code goes here\n\
    \        return \"\";\n    }\n    public static void main(String[] args) {\n \
    \   assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcpmjr68q.java:30)\n"
  stdout: ''
  timestamp: 1659799186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        // Your code goes here\n\
    \        return \"\";\n    }\n    public static void main(String[] args) {\n \
    \   assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcpmjr68q.java:30)\n"
  stdout: ''
  timestamp: 1659799186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        // Your code goes here\n\
    \        return \"\";\n    }\n    public static void main(String[] args) {\n \
    \   assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcpmjr68q.java:30)\n"
  stdout: ''
  timestamp: 1659799186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        // Your code here\n   \
    \     return \"\";\n    }\n    public static void main(String[] args) {\n    assert(StrongestExtension((\"\
    Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\"\
    , (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"\
    NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"\
    t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\"\
    , (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
    K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"\
    t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\"\
    , (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"\
    okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"\
    YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"\
    Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"\
    _.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"\
    671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp00pfl0_r.java:30)\n"
  stdout: ''
  timestamp: 1659799186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        // Your code goes here\n\
    \        return \"\";\n    }\n    public static void main(String[] args) {\n \
    \   assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcpmjr68q.java:30)\n"
  stdout: ''
  timestamp: 1659799186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        // Your code goes here\n\
    \        return null;\n    }\n    public static void main(String[] args) {\n \
    \   assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"String.equals(Object)\" because the return value of \"Problem.StrongestExtension(String,\
    \ java.util.ArrayList)\" is null\n\tat Problem.main(tmp664o4tdl.java:30)\n"
  stdout: ''
  timestamp: 1659799186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        // Your code goes here\n\
    \        return \"\";\n    }\n    public static void main(String[] args) {\n \
    \   assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcpmjr68q.java:30)\n"
  stdout: ''
  timestamp: 1659799186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        // Your code goes here\n\
    \        return \"\";\n    }\n    public static void main(String[] args) {\n \
    \   assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcpmjr68q.java:30)\n"
  stdout: ''
  timestamp: 1659799186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        // Your code goes here\n\
    \        return \"\";\n    }\n    public static void main(String[] args) {\n \
    \   assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcpmjr68q.java:30)\n"
  stdout: ''
  timestamp: 1659799186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        // Your code goes here.\n\
    \        return \"\";\n    }\n    public static void main(String[] args) {\n \
    \   assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9vlp9pke.java:30)\n"
  stdout: ''
  timestamp: 1659799186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        // Your code goes here\n\
    \        return \"\";\n    }\n    public static void main(String[] args) {\n \
    \   assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcpmjr68q.java:30)\n"
  stdout: ''
  timestamp: 1659799186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        // Your code goes here.\n\
    \        return null;\n    }\n    public static void main(String[] args) {\n \
    \   assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"String.equals(Object)\" because the return value of \"Problem.StrongestExtension(String,\
    \ java.util.ArrayList)\" is null\n\tat Problem.main(tmpzr5tcemu.java:30)\n"
  stdout: ''
  timestamp: 1659799186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        // Your code goes here\n\
    \        return \"\";\n    }\n    public static void main(String[] args) {\n \
    \   assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcpmjr68q.java:30)\n"
  stdout: ''
  timestamp: 1659799186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        // Your code goes here\n\
    \        return null;\n    }\n    public static void main(String[] args) {\n \
    \   assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"String.equals(Object)\" because the return value of \"Problem.StrongestExtension(String,\
    \ java.util.ArrayList)\" is null\n\tat Problem.main(tmp664o4tdl.java:30)\n"
  stdout: ''
  timestamp: 1659799186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        // Your code here\n   \
    \     return \"\";\n    }\n    public static void main(String[] args) {\n    assert(StrongestExtension((\"\
    Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\"\
    , (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"\
    NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"\
    t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\"\
    , (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
    K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"\
    t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\"\
    , (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"\
    okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"\
    YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"\
    Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"\
    _.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"\
    671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp00pfl0_r.java:30)\n"
  stdout: ''
  timestamp: 1659799186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        // Your code goes here\n\
    \        return \"\";\n    }\n    public static void main(String[] args) {\n \
    \   assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcpmjr68q.java:30)\n"
  stdout: ''
  timestamp: 1659799186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        // Your code goes here.\n\
    \        return null;\n    }\n    public static void main(String[] args) {\n \
    \   assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"String.equals(Object)\" because the return value of \"Problem.StrongestExtension(String,\
    \ java.util.ArrayList)\" is null\n\tat Problem.main(tmpzr5tcemu.java:30)\n"
  stdout: ''
  timestamp: 1659799186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        // Your code goes here\n\
    \        return \"\";\n    }\n    public static void main(String[] args) {\n \
    \   assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcpmjr68q.java:30)\n"
  stdout: ''
  timestamp: 1659799186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        // Your code goes here\n\
    \        return \"\";\n    }\n    public static void main(String[] args) {\n \
    \   assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcpmjr68q.java:30)\n"
  stdout: ''
  timestamp: 1659799186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        // Your code goes here\n\
    \        return \"\";\n    }\n    public static void main(String[] args) {\n \
    \   assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcpmjr68q.java:30)\n"
  stdout: ''
  timestamp: 1659799186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        // Your code here\n   \
    \     return \"\";\n    }\n    public static void main(String[] args) {\n    assert(StrongestExtension((\"\
    Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\"\
    , (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"\
    NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"\
    t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\"\
    , (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
    K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"\
    t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\"\
    , (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"\
    okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"\
    YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"\
    Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"\
    _.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"\
    671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp00pfl0_r.java:30)\n"
  stdout: ''
  timestamp: 1659799186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        // Your code goes here\n\
    \        return \"\";\n    }\n    public static void main(String[] args) {\n \
    \   assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcpmjr68q.java:30)\n"
  stdout: ''
  timestamp: 1659799186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        // Your code goes here\n\
    \        return \"\";\n    }\n    public static void main(String[] args) {\n \
    \   assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcpmjr68q.java:30)\n"
  stdout: ''
  timestamp: 1659799186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        // Your code goes here\n\
    \        return \"\";\n    }\n    public static void main(String[] args) {\n \
    \   assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcpmjr68q.java:30)\n"
  stdout: ''
  timestamp: 1659799186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        // Your code goes here\n\
    \        return \"\";\n    }\n    public static void main(String[] args) {\n \
    \   assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcpmjr68q.java:30)\n"
  stdout: ''
  timestamp: 1659799186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        // Your code here\n   \
    \     return \"\";\n    }\n    public static void main(String[] args) {\n    assert(StrongestExtension((\"\
    Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\"\
    , (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"\
    NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"\
    t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\"\
    , (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
    K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"\
    t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\"\
    , (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"\
    okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"\
    YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"\
    Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"\
    _.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"\
    671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp00pfl0_r.java:30)\n"
  stdout: ''
  timestamp: 1659799186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        // Your code here\n   \
    \     return \"\";\n    }\n    public static void main(String[] args) {\n    assert(StrongestExtension((\"\
    Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\"\
    , (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"\
    NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"\
    t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\"\
    , (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
    K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"\
    t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\"\
    , (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"\
    okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"\
    YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"\
    Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"\
    _.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"\
    671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp00pfl0_r.java:30)\n"
  stdout: ''
  timestamp: 1659799186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        // Your code goes here\n\
    \        return \"\";\n    }\n    public static void main(String[] args) {\n \
    \   assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcpmjr68q.java:30)\n"
  stdout: ''
  timestamp: 1659799186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        // Your code goes here\n\
    \        return \"\";\n    }\n    public static void main(String[] args) {\n \
    \   assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcpmjr68q.java:30)\n"
  stdout: ''
  timestamp: 1659799186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        // Your code goes here\n\
    \        return \"\";\n    }\n    public static void main(String[] args) {\n \
    \   assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcpmjr68q.java:30)\n"
  stdout: ''
  timestamp: 1659799186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        // Your code goes here\n\
    \        return \"\";\n    }\n    public static void main(String[] args) {\n \
    \   assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcpmjr68q.java:30)\n"
  stdout: ''
  timestamp: 1659799186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        // Your code goes here\n\
    \        return \"\";\n    }\n    public static void main(String[] args) {\n \
    \   assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcpmjr68q.java:30)\n"
  stdout: ''
  timestamp: 1659799186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        // Your code goes here.\n\
    \        return \"\";\n    }\n    public static void main(String[] args) {\n \
    \   assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9vlp9pke.java:30)\n"
  stdout: ''
  timestamp: 1659799186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        // Your code goes here.\n\
    \        return \"\";\n    }\n    public static void main(String[] args) {\n \
    \   assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9vlp9pke.java:30)\n"
  stdout: ''
  timestamp: 1659799186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        String strongest = \"\"\
    ;\n        double strength = 0;\n        for (String ext : extensions) {\n   \
    \         double curr_strength = 0;\n            for (int i = 0; i < ext.length();\
    \ i++) {\n                if (Character.isUpperCase(ext.charAt(i))) {\n      \
    \              curr_strength += 1;\n                } else {\n               \
    \     curr_strength -= 1;\n                }\n            }\n            if (curr_strength\
    \ > strength) {\n                strength = curr_strength;\n                strongest\
    \ = ext;\n            }\n        }\n        return class_name + \".\" + strongest;\n\
    \    }\n    public static void main(String[] args) {\n    assert(StrongestExtension((\"\
    Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\"\
    , (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"\
    NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"\
    t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\"\
    , (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
    K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"\
    t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\"\
    , (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"\
    okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"\
    YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"\
    Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"\
    _.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"\
    671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqh9am3tg.java:45)\n"
  stdout: ''
  timestamp: 1659799187
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        // Your code goes here.\n\
    \        return \"\";\n    }\n    public static void main(String[] args) {\n \
    \   assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9vlp9pke.java:30)\n"
  stdout: ''
  timestamp: 1659799186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        // Your code goes here\n\
    \        return \"\";\n    }\n    public static void main(String[] args) {\n \
    \   assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcpmjr68q.java:30)\n"
  stdout: ''
  timestamp: 1659799186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        // Your code here\n   \
    \     return \"\";\n    }\n    public static void main(String[] args) {\n    assert(StrongestExtension((\"\
    Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\"\
    , (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"\
    NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"\
    t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\"\
    , (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
    K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"\
    t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\"\
    , (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"\
    okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"\
    YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"\
    Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"\
    _.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"\
    671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp00pfl0_r.java:30)\n"
  stdout: ''
  timestamp: 1659799186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        String strongest = \"\"\
    ;\n        double strength = 0;\n        for (String ext : extensions) {\n   \
    \         int CAP = 0;\n            int SM = 0;\n            for (int i = 0; i\
    \ < ext.length(); i++) {\n                if (Character.isUpperCase(ext.charAt(i)))\
    \ {\n                    CAP++;\n                } else {\n                  \
    \  SM++;\n                }\n            }\n            double ext_strength =\
    \ (double)CAP - (double)SM;\n            if (ext_strength > strength) {\n    \
    \            strength = ext_strength;\n                strongest = ext;\n    \
    \        }\n        }\n        return class_name + \".\" + strongest;\n    }\n\
    \    public static void main(String[] args) {\n    assert(StrongestExtension((\"\
    Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\"\
    , (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"\
    NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"\
    t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\"\
    , (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
    K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"\
    t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\"\
    , (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"\
    okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"\
    YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"\
    Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"\
    _.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"\
    671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9vxy09t3.java:47)\n"
  stdout: ''
  timestamp: 1659799187
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        // Your code goes here\n\
    \        return \"\";\n    }\n    public static void main(String[] args) {\n \
    \   assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcpmjr68q.java:30)\n"
  stdout: ''
  timestamp: 1659799186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        // Your code here\n   \
    \     return \"\";\n    }\n    public static void main(String[] args) {\n    assert(StrongestExtension((\"\
    Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\"\
    , (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"\
    NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"\
    t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\"\
    , (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
    K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"\
    t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\"\
    , (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"\
    okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"\
    YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"\
    Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"\
    _.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"\
    671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp00pfl0_r.java:30)\n"
  stdout: ''
  timestamp: 1659799186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        // Your code goes here\n\
    \        return \"\";\n    }\n    public static void main(String[] args) {\n \
    \   assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcpmjr68q.java:30)\n"
  stdout: ''
  timestamp: 1659799186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        // Your code goes here\n\
    \        return \"\";\n    }\n    public static void main(String[] args) {\n \
    \   assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcpmjr68q.java:30)\n"
  stdout: ''
  timestamp: 1659799186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        // Your code goes here\n\
    \        return \"\";\n    }\n    public static void main(String[] args) {\n \
    \   assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcpmjr68q.java:30)\n"
  stdout: ''
  timestamp: 1659799186
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        return class_name + \"\
    .\" + extensions.stream().max(new Comparator<String>() {\n            @Override\n\
    \            public int compare(String s1, String s2) {\n                int s1_cap\
    \ = (int) s1.chars().filter(Character::isUpperCase).count();\n               \
    \ int s1_sm = (int) s1.chars().filter(Character::isLowerCase).count();\n     \
    \           int s2_cap = (int) s2.chars().filter(Character::isUpperCase).count();\n\
    \                int s2_sm = (int) s2.chars().filter(Character::isLowerCase).count();\n\
    \                if (s1_cap - s1_sm == s2_cap - s2_sm) {\n                   \
    \ return 0;\n                }\n                return (s1_cap - s1_sm) > (s2_cap\
    \ - s2_sm) ? 1 : -1;\n            }\n        }).get();\n    }\n    public static\
    \ void main(String[] args) {\n    assert(StrongestExtension((\"Watashi\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\", (String)\"\
    eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"\
    NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"\
    t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\"\
    , (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
    K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"\
    t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\"\
    , (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"\
    okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"\
    YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"\
    Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"\
    _.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"\
    671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799187
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        // Your code here\n   \
    \     return \"\";\n    }\n    public static void main(String[] args) {\n    assert(StrongestExtension((\"\
    Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\"\
    , (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"\
    NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"\
    t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\"\
    , (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
    K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"\
    t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\"\
    , (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"\
    okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"\
    YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"\
    Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"\
    _.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"\
    671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp00pfl0_r.java:30)\n"
  stdout: ''
  timestamp: 1659799186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        // Your code here\n   \
    \     return \"\";\n    }\n    public static void main(String[] args) {\n    assert(StrongestExtension((\"\
    Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\"\
    , (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"\
    NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"\
    t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\"\
    , (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
    K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"\
    t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\"\
    , (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"\
    okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"\
    YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"\
    Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"\
    _.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"\
    671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp00pfl0_r.java:30)\n"
  stdout: ''
  timestamp: 1659799186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        // Your code goes here\n\
    \        return \"\";\n    }\n    public static void main(String[] args) {\n \
    \   assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcpmjr68q.java:30)\n"
  stdout: ''
  timestamp: 1659799186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        // Your code goes here\n\
    \        return \"\";\n    }\n    public static void main(String[] args) {\n \
    \   assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcpmjr68q.java:30)\n"
  stdout: ''
  timestamp: 1659799186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        // Your code goes here\n\
    \        return \"\";\n    }\n    public static void main(String[] args) {\n \
    \   assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcpmjr68q.java:30)\n"
  stdout: ''
  timestamp: 1659799186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        // Your code goes here\n\
    \        return \"\";\n    }\n    public static void main(String[] args) {\n \
    \   assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcpmjr68q.java:30)\n"
  stdout: ''
  timestamp: 1659799186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        // Your code goes here\n\
    \        return \"\";\n    }\n    public static void main(String[] args) {\n \
    \   assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcpmjr68q.java:30)\n"
  stdout: ''
  timestamp: 1659799186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        // Your code goes here\n\
    \        return \"\";\n    }\n    public static void main(String[] args) {\n \
    \   assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcpmjr68q.java:30)\n"
  stdout: ''
  timestamp: 1659799186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        // Your code goes here\n\
    \        return \"\";\n    }\n    public static void main(String[] args) {\n \
    \   assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcpmjr68q.java:30)\n"
  stdout: ''
  timestamp: 1659799186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        // Your code goes here\n\
    \        return \"\";\n    }\n    public static void main(String[] args) {\n \
    \   assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcpmjr68q.java:30)\n"
  stdout: ''
  timestamp: 1659799186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        // Your code goes here\n\
    \        return \"\";\n    }\n    public static void main(String[] args) {\n \
    \   assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcpmjr68q.java:30)\n"
  stdout: ''
  timestamp: 1659799186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        // Your code goes here.\n\
    \        return null;\n    }\n    public static void main(String[] args) {\n \
    \   assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"String.equals(Object)\" because the return value of \"Problem.StrongestExtension(String,\
    \ java.util.ArrayList)\" is null\n\tat Problem.main(tmpzr5tcemu.java:30)\n"
  stdout: ''
  timestamp: 1659799186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        // Your code goes here\n\
    \        return \"\";\n    }\n    public static void main(String[] args) {\n \
    \   assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcpmjr68q.java:30)\n"
  stdout: ''
  timestamp: 1659799186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        // Your code goes here\n\
    \        return \"\";\n    }\n    public static void main(String[] args) {\n \
    \   assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcpmjr68q.java:30)\n"
  stdout: ''
  timestamp: 1659799186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        // Your code goes here\n\
    \        int max = 0;\n        String max_extension = \"\";\n        for (String\
    \ extension : extensions) {\n            int cap = 0;\n            int sm = 0;\n\
    \            for (int i = 0; i < extension.length(); i++) {\n                if\
    \ (Character.isUpperCase(extension.charAt(i))) {\n                    cap++;\n\
    \                } else {\n                    sm++;\n                }\n    \
    \        }\n            int strength = cap - sm;\n            if (strength > max)\
    \ {\n                max = strength;\n                max_extension = extension;\n\
    \            }\n        }\n        return class_name + \".\" + max_extension;\n\
    \    }\n    public static void main(String[] args) {\n    assert(StrongestExtension((\"\
    Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\"\
    , (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"\
    NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"\
    t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\"\
    , (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
    K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"\
    t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\"\
    , (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"\
    okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"\
    YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"\
    Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"\
    _.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"\
    671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyj11e__3.java:48)\n"
  stdout: ''
  timestamp: 1659799187
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        // Your code goes here\n\
    \        return \"\";\n    }\n    public static void main(String[] args) {\n \
    \   assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcpmjr68q.java:30)\n"
  stdout: ''
  timestamp: 1659799186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        // Your code here\n   \
    \     return \"\";\n    }\n    public static void main(String[] args) {\n    assert(StrongestExtension((\"\
    Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\"\
    , (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"\
    NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"\
    t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\"\
    , (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
    K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"\
    t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\"\
    , (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"\
    okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"\
    YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"\
    Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"\
    _.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"\
    671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp00pfl0_r.java:30)\n"
  stdout: ''
  timestamp: 1659799186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        // Your code here\n   \
    \     return \"\";\n    }\n    public static void main(String[] args) {\n    assert(StrongestExtension((\"\
    Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\"\
    , (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"\
    NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"\
    t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\"\
    , (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
    K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"\
    t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\"\
    , (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"\
    okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"\
    YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"\
    Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"\
    _.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"\
    671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp00pfl0_r.java:30)\n"
  stdout: ''
  timestamp: 1659799186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        // Your code here\n   \
    \     return \"\";\n    }\n    public static void main(String[] args) {\n    assert(StrongestExtension((\"\
    Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\"\
    , (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"\
    NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"\
    t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\"\
    , (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
    K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"\
    t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\"\
    , (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"\
    okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"\
    YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"\
    Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"\
    _.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"\
    671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp00pfl0_r.java:30)\n"
  stdout: ''
  timestamp: 1659799186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        // Your code goes here\n\
    \        return \"\";\n    }\n    public static void main(String[] args) {\n \
    \   assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcpmjr68q.java:30)\n"
  stdout: ''
  timestamp: 1659799186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        // Your code goes here.\n\
    \        return \"\";\n    }\n    public static void main(String[] args) {\n \
    \   assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9vlp9pke.java:30)\n"
  stdout: ''
  timestamp: 1659799186
