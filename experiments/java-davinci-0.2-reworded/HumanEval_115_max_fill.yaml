name: HumanEval_115_max_fill
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
  \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
  \    // Each well has a corresponding bucket that can be used to extract water from\
  \ it, \n    // and all buckets have the same capacity.\n    // Your task is to use\
  \ the buckets to empty the wells.\n    // Output the number of times you need to\
  \ lower the buckets.\n    // Example 1:\n    // >>> maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
  \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new\
  \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new\
  \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (1l))\n\
  \    // (6l)\n    // Example 2:\n    // >>> maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
  \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new\
  \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new\
  \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
  \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)1l, (long)1l))))), (2l))\n\
  \    // (5l)\n    // Example 3:\n    // >>> maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
  \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new\
  \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l))))), (5l))\n    //\
  \ (0l)\n    // Constraints:\n    // * all wells have the same length\n    // * 1\
  \ <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j]\
  \ -> 0 | 1\n    // * 1 <= capacity <= 10\n    public static long maxFill(ArrayList<ArrayList<Long>>\
  \ grid, long capacity) {\n"
tests: "    }\n    public static void main(String[] args) {\n    assert(maxFill((new\
  \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
  \ (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
  \ (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
  \ (long)1l, (long)1l, (long)1l))))), (1l)) == (6l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
  \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new\
  \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new\
  \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
  \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)1l, (long)1l))))), (2l))\
  \ == (5l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
  \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new\
  \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l))))), (5l)) == (0l));\n\
  \    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
  \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
  \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (2l))\
  \ == (4l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
  \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
  \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (9l))\
  \ == (2l));\n    }\n\n}\n"
completions: ["        // Your code here\n        return 0l;", "        // Your code\
    \ here\n        return 0;", "        // Your code here\n        return 0;", " \
    \       // your code here\n        return 0;", "        // your code here\n  \
    \      return 0;", "        // your code here\n        return 0l;", "        //\
    \ Your code here\n        return 0;", "        // Your code here\n        return\
    \ 0l;", "        long count = 0;\n        for (int i = 0; i < grid.size(); i++)\
    \ {\n            ArrayList<Long> row = grid.get(i);\n            for (int j =\
    \ 0; j < row.size(); j++) {\n                if (row.get(j) == 1) {\n        \
    \            count++;\n                }\n            }\n        }\n        return\
    \ count / capacity;", "        // your code goes here\n        return 0l;", " \
    \       // Fill in the code here\n        return 0l;", "        // Your code here\n\
    \        return (long)0l;", "        // your code here\n        return 0l;", " \
    \       // your code here\n        return 0l;", "        // Your code here\n \
    \       return 0l;", "        // your code here\n        return 0;", "       \
    \ // your code goes here\n        return 0l;", "        // your code here\n  \
    \      return 0l;", "        // your code here\n        return 0l;", "       \
    \ // your code here\n        return 0l;", "        // your code here\n       \
    \ return 0l;", "        // Your code here\n        return 0l;", "        // your\
    \ code here\n        return 0;", "        // Fill in the code here\n        return\
    \ 0;", "        // Your code goes here\n        return 0;", "        // your code\
    \ here\n        return 0;", "        // your code here\n        return 0l;", " \
    \       // Fill in the code here\n        return 0;", "        // Your code here\n\
    \        return 0l;", "        // Fill in your solution here\n        return 0;",
  "        // your code here\n        return 0l;", "        // your code here\n  \
    \      return 0l;", "        // your code here\n        return 0l;", "       \
    \ // your code here\n        return 0l;", "        // your code here\n       \
    \ return 0l;", "        // your code here\n        return 0l;", "        long\
    \ maxFill = 0;\n        for (int i = 0; i < grid.size(); i++) {\n            for\
    \ (int j = 0; j < grid.get(i).size(); j++) {\n                if (grid.get(i).get(j)\
    \ == 1) {\n                    maxFill += capacity;\n                }\n     \
    \       }\n        }\n        return maxFill;", "        // your code here\n \
    \       return 0l;", "        // your code here\n        return 0l;", "      \
    \  // your code here\n        return 0;", "        // Your code here\n       \
    \ return 0;", "        // Your code here\n        return 0l;", "        long maxFill\
    \ = 0;\n        for (int i = 0; i < grid.size(); i++) {\n            for (int\
    \ j = 0; j < grid.get(i).size(); j++) {\n                if (grid.get(i).get(j)\
    \ == 1) {\n                    maxFill += capacity;\n                }\n     \
    \       }\n        }\n        return maxFill;", "        // your code here\n \
    \       return 0l;", "        // your code here\n        return 0;", "       \
    \ // your code goes here\n        return 0l;", "        // your code here\n  \
    \      return 0l;", "        // your code here\n        return 0l;", "       \
    \ // your code here\n        return 0l;", "        // Your code here\n       \
    \ return 0l;", "        // your code here\n        return 0l;", "        long\
    \ maxFill = 0;\n        for (int i = 0; i < grid.size(); i++) {\n            for\
    \ (int j = 0; j < grid.get(i).size(); j++) {\n                if (grid.get(i).get(j)\
    \ == 1) {\n                    maxFill += capacity;\n                }\n     \
    \       }\n        }\n        return maxFill;", "        // Your code here\n \
    \       return 0l;", "        // your code here\n        return 0l;", '        return
    0;', "        // your code here\n        return 0l;", "        // Fill in the\
    \ code here.\n        return 0l;", "        // Your code here\n        return\
    \ 0;", '        return 0;', '        return 0;', "        long maxFill = 0;\n\
    \        for (int i = 0; i < grid.size(); i++) {\n            for (int j = 0;\
    \ j < grid.get(i).size(); j++) {\n                if (grid.get(i).get(j) == 1)\
    \ {\n                    maxFill += capacity;\n                }\n           \
    \ }\n        }\n        return maxFill;", "        // your code here\n       \
    \ return 0l;", "        // your code here\n        return 0l;", "        long\
    \ maxFill = 0;\n        for (ArrayList<Long> row : grid) {\n            long rowFill\
    \ = 0;\n            for (Long well : row) {\n                if (well == 1) {\n\
    \                    rowFill += capacity;\n                }\n            }\n\
    \            maxFill = Math.max(maxFill, rowFill);\n        }\n        return\
    \ maxFill;", "        // your code here\n        return 0l;", "        // your\
    \ code here\n        return 0l;", "        // your code here\n        return 0l;",
  "        // your code here\n        return 0l;", "        // your code here\n  \
    \      return 0l;", "        // your code here\n        return 0l;", "       \
    \ // your code here\n        return 0;", "        // Your code here\n        return\
    \ 0l;", "        // your code here\n        return 0l;", "        // your code\
    \ goes here\n        return 0l;", "        // Fill in your code here\n       \
    \ return 0l;", "        // Fill in the code here\n        return 0l;", "     \
    \   // your code here\n        return 0l;", "        // Your code here\n     \
    \   return 0l;", "        // Your code here\n        return 0;", "        // your\
    \ code here\n        return 0;", "        // Your code here\n        return 0l;",
  "        // Fill in your code here\n        return 0l;", "        // your code here\n\
    \        return 0l;", "        // your code here\n        return 0l;", "     \
    \   // your code here\n        return 0;", "        // Fill in the code here\n\
    \        return 0l;", "        // your code here\n        return 0l;", "     \
    \   // your code goes here\n        return 0l;", "        // your code here\n\
    \        return 0l;", "        // Your code here\n        return 0l;", "     \
    \   long maxFill = 0;\n        for (ArrayList<Long> row : grid) {\n          \
    \  long rowFill = 0;\n            for (Long well : row) {\n                if\
    \ (well == 1) {\n                    rowFill += 1;\n                }\n      \
    \      }\n            if (rowFill > maxFill) {\n                maxFill = rowFill;\n\
    \            }\n        }\n        return maxFill * capacity;", "        // Your\
    \ code here\n        return 0;", "        // your code here\n        return 0l;",
  "        // your code here\n        return 0l;", "        // your code here\n  \
    \      return 0l;", "        // your code here\n        return 0;", "        long\
    \ total = 0;\n        for (ArrayList<Long> row : grid) {\n            long rowTotal\
    \ = 0;\n            for (Long col : row) {\n                rowTotal += col;\n\
    \            }\n            total += rowTotal / capacity;\n            if (rowTotal\
    \ % capacity != 0) {\n                total += 1;\n            }\n        }\n\
    \        return total;", "        // your code here\n        return 0l;", "  \
    \      // your code here\n        return 0l;", "        long result = 0;\n   \
    \     for (int i = 0; i < grid.size(); i++) {\n            for (int j = 0; j <\
    \ grid.get(i).size(); j++) {\n                if (grid.get(i).get(j) == 1) {\n\
    \                    result += capacity;\n                }\n            }\n \
    \       }\n        return result;", "        // your code here\n        return\
    \ 0l;", "        // your code here\n        return 0l;", "        // your code\
    \ goes here\n        return 0l;", "        // your code here\n        return 0l;",
  "        // Your code here\n        return 0l;", "        // your code here\n  \
    \      return 0l;", "        // Your code here\n        return 0l;", "       \
    \ // your code here\n        return 0;", "        long maxFill = 0;\n        for\
    \ (ArrayList<Long> row : grid) {\n            long rowFill = 0;\n            for\
    \ (Long well : row) {\n                if (well == 1) {\n                    rowFill\
    \ += capacity;\n                }\n            }\n            maxFill = Math.max(maxFill,\
    \ rowFill);\n        }\n        return maxFill;", "        // Your code here\n\
    \        return 0;", "        long total = 0;\n        for (int i = 0; i < grid.size();\
    \ i++) {\n            for (int j = 0; j < grid.get(i).size(); j++) {\n       \
    \         if (grid.get(i).get(j) == 1) {\n                    total += capacity;\n\
    \                }\n            }\n        }\n        return total;", "      \
    \  // your code here\n        return 0;", "        // Your code here\n       \
    \ return 0l;", "        // your code here\n        return 0;", "        // your\
    \ code here\n        return 0l;", "        // your code here\n        return 0l;",
  "        long maxFill = 0;\n        for (int i = 0; i < grid.size(); i++) {\n  \
    \          ArrayList<Long> row = grid.get(i);\n            for (int j = 0; j <\
    \ row.size(); j++) {\n                long cell = row.get(j);\n              \
    \  if (cell == 1) {\n                    maxFill += capacity;\n              \
    \  }\n            }\n        }\n        return maxFill;", '        return 0;',
  "        // your code here\n        return 0l;", "        // Your code here\n  \
    \      return 0l;", "        // your code here\n        return 0;", "        //\
    \ Your code here\n        return 0;", "        // your code here\n        return\
    \ 0l;", "        // your code goes here\n        return 0l;", "        // Fill\
    \ in your code here\n        return 0l;", "        // your code here\n       \
    \ return 0l;", "        // your code here\n        return 0;", "        // your\
    \ code here\n        return 0;", "        // your code here\n        return 0;",
  "        long maxFill = 0;\n        for (int i = 0; i < grid.size(); i++) {\n  \
    \          for (int j = 0; j < grid.get(i).size(); j++) {\n                if\
    \ (grid.get(i).get(j) == 1) {\n                    maxFill += capacity;\n    \
    \            }\n            }\n        }\n        return maxFill;", "        //\
    \ your code here\n        return 0l;", "        // your code here\n        return\
    \ 0l;", "        // your code here\n        return 0l;", "        // your code\
    \ here\n        return 0l;", "        // Your code here\n        return 0l;",
  "        // your code here\n        return 0l;", "        // your code here\n  \
    \      return 0l;", "        long n = grid.size();\n        long m = grid.get(0).size();\n\
    \        long[][] dp = new long[(int)n][(int)m];\n        for (long i = 0; i <\
    \ n; i++) {\n            for (long j = 0; j < m; j++) {\n                if (grid.get((int)i).get((int)j)\
    \ == 1) {\n                    dp[(int)i][(int)j] = capacity;\n              \
    \  }\n            }\n        }\n        for (long i = 0; i < n; i++) {\n     \
    \       for (long j = 0; j < m; j++) {\n                if (i > 0) {\n       \
    \             dp[(int)i][(int)j] = Math.max(dp[(int)i][(int)j], dp[(int)(i - 1)][(int)j]);\n\
    \                }\n                if (j > 0) {\n                    dp[(int)i][(int)j]\
    \ = Math.max(dp[(int)i][(int)j], dp[(int)i][(int)(j - 1)]);\n                }\n\
    \            }\n        }\n        long ans = 0;\n        for (long i = n - 1;\
    \ i >= 0; i--) {\n            for (long j = m - 1; j >= 0; j--) {\n          \
    \      if (i < n - 1) {\n                    dp[(int)i][(int)j] = Math.min(dp[(int)i][(int)j],\
    \ dp[(int)(i + 1)][(int)j]);\n                }\n                if (j < m - 1)\
    \ {\n                    dp[(int)i][(int)j] = Math.min(dp[(int)i][(int)j], dp[(int)i][(int)(j\
    \ + 1)]);\n                }\n                ans += dp[(int)i][(int)j];\n   \
    \         }\n        }\n        return ans;", "        // your code here\n   \
    \     return 0;", "        // Your code here\n        return 0;", "        long\
    \ result = 0;\n        // your code goes here\n        return result;", "    \
    \    // Your code here\n        return 0l;", "        // your code here\n    \
    \    return 0l;", '        return 0;', "        // your code here\n        return\
    \ 0l;", "        // your code here\n        return 0l;", "        // Your code\
    \ here\n        return 0;", "        // Your code here\n        return 0l;", " \
    \       // Your code here\n        return 0l;", "        long max = 0;\n     \
    \   for (ArrayList<Long> row : grid) {\n            for (Long cell : row) {\n\
    \                max += cell;\n            }\n        }\n        long min = 0;\n\
    \        while (min < max) {\n            long mid = (min + max) / 2;\n      \
    \      if (canFill(grid, capacity, mid)) {\n                min = mid + 1;\n \
    \           } else {\n                max = mid;\n            }\n        }\n \
    \       return min - 1;", "        // Fill in the code here\n        return 0l;",
  "        // your code here\n        return 0l;", "        // fill the wells\n  \
    \      long count = 0;\n        for (int i = 0; i < grid.size(); i++) {\n    \
    \        for (int j = 0; j < grid.get(i).size(); j++) {\n                if (grid.get(i).get(j)\
    \ == 1) {\n                    count++;\n                    grid.get(i).set(j,\
    \ 0l);\n                }\n            }\n        }\n        // fill the buckets\n\
    \        long buckets = count / capacity;\n        if (count % capacity != 0)\
    \ {\n            buckets++;\n        }\n        return buckets;", "        //\
    \ your code here\n        return 0;", "        // your code goes here\n      \
    \  return 0l;", "        // Your code here\n        return 0l;", "        // your\
    \ code here\n        return 0l;", "        // your code here\n        return 0l;",
  "        // your code here\n        return 0l;", "        // your code here\n  \
    \      return 0l;", "        // your code here\n        return 0;", "        //\
    \ your code here\n        return 0l;", "        // your code here\n        return\
    \ 0;", "        // your code here\n        return 0l;", "        // your code\
    \ here\n        return 0;", "        // Your code here\n        return 0;", " \
    \       // your code here\n        long result = 0;\n        for (int i = 0; i\
    \ < grid.size(); i++) {\n            for (int j = 0; j < grid.get(i).size(); j++)\
    \ {\n                if (grid.get(i).get(j) == 1) {\n                    result\
    \ += capacity;\n                }\n            }\n        }\n        return result;",
  "        // Fill in your solution here\n        return 0l;", "        // Your code\
    \ here\n        return 0l;", "        // Fill in your solution here\n        return\
    \ 0l;", "        // your code here\n        return 0;", "        // Your code\
    \ here\n        return 0l;", "        long maxFill = 0;\n        for (int i =\
    \ 0; i < grid.size(); i++) {\n            for (int j = 0; j < grid.get(i).size();\
    \ j++) {\n                if (grid.get(i).get(j) == 1) {\n                   \
    \ maxFill += 1;\n                }\n            }\n        }\n        return maxFill\
    \ / capacity;", "        // your code here\n        return 0l;", "        // Your\
    \ code here\n        return (long)0l;", "        // Your code here\n        return\
    \ 0l;", "        // your code here\n        return 0l;", "        // Your code\
    \ here\n        return 0l;", '        return 0;', "        // your code here\n\
    \        return 0l;", "        // your code here\n        return 0l;", "     \
    \   // your code goes here\n        long maxFill = 0;\n        for (int i = 0;\
    \ i < grid.size(); i++) {\n            ArrayList<Long> row = grid.get(i);\n  \
    \          for (int j = 0; j < row.size(); j++) {\n                long cell =\
    \ row.get(j);\n                if (cell == 1) {\n                    maxFill +=\
    \ capacity;\n                }\n            }\n        }\n        return maxFill;",
  "        // your code here\n        return 0l;", "        // your code here\n  \
    \      return -1l;", "        // Your code here\n        return 0l;", "      \
    \  // fill in the code here\n        return 0l;", "        // your code here\n\
    \        return 0;", "        // your code here\n        return 0l;", "      \
    \  // your code here\n        return 0l;", "        // your code here\n      \
    \  return 0l;", "        // Your code here\n        return 0l;", "        // your\
    \ code here\n        return 0;", "        // your code goes here\n        return\
    \ 0l;", "        long count = 0;\n        for (int i = 0; i < grid.size(); i++)\
    \ {\n            for (int j = 0; j < grid.get(i).size(); j++) {\n            \
    \    if (grid.get(i).get(j) == 1) {\n                    count += capacity;\n\
    \                    int k = i - 1;\n                    while (k >= 0 && grid.get(k).get(j)\
    \ == 1) {\n                        grid.get(k).set(j, 0l);\n                 \
    \       k--;\n                    }\n                }\n            }\n      \
    \  }\n        return count;", "        // your code here\n        return 0;",
  "        // your code here\n        return 0;", "        // Fill in your code here\n\
    \        return 0l;", "        // your code here\n        return 0l;", "     \
    \   // Your code here\n        return 0l;", "        // your code here\n     \
    \   return 0l;"]
stop_tokens:
- "\n    }\n"
