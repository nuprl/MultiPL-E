name: HumanEval_40_triples_sum_to_zero
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // triples_sum_to_zero takes an array array list of integers\
  \ as an input.\n    // it returns true if there are three distinct elements in the\
  \ array list that\n    // sum to zero, and false otherwise.\n    // >>> triplesSumToZero((new\
  \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n   \
  \ // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
  \ (long)3l, (long)-2l, (long)1l))))\n    // (true)\n    // >>> triplesSumToZero((new\
  \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n   \
  \ // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
  \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n    // (true)\n    // >>>\
  \ triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    // (false)\n\
  \    public static boolean triplesSumToZero(ArrayList<Long> l) {\n"
tests: "    }\n    public static void main(String[] args) {\n    assert(triplesSumToZero((new\
  \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l)))) == (false));\n\
  \    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
  \ (long)5l, (long)-1l)))) == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
  \ (long)3l, (long)-2l, (long)1l)))) == (true));\n    assert(triplesSumToZero((new\
  \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l)))) == (false));\n\
  \    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
  \ (long)5l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
  \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l)))) == (true));\n    assert(triplesSumToZero((new\
  \ ArrayList<Long>(Arrays.asList((long)1l)))) == (false));\n    assert(triplesSumToZero((new\
  \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-100l)))) ==\
  \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)100l,\
  \ (long)3l, (long)5l, (long)-100l)))) == (false));\n    }\n\n}\n"
completions: ["        // your code here\n        return false;", "        // your\
    \ code here\n        return false;", "        if (l.size() < 3) {\n          \
    \  return false;\n        }\n        for (int i = 0; i < l.size(); i++) {\n  \
    \          for (int j = i + 1; j < l.size(); j++) {\n                for (int\
    \ k = j + 1; k < l.size(); k++) {\n                    if (l.get(i) + l.get(j)\
    \ + l.get(k) == 0) {\n                        return true;\n                 \
    \   }\n                }\n            }\n        }\n        return false;", " \
    \       // your code here\n        return false;", "        if (l.size() < 3)\
    \ {\n            return false;\n        }\n        for (int i = 0; i < l.size();\
    \ i++) {\n            for (int j = i + 1; j < l.size(); j++) {\n             \
    \   for (int k = j + 1; k < l.size(); k++) {\n                    if (l.get(i)\
    \ + l.get(j) + l.get(k) == 0) {\n                        return true;\n      \
    \              }\n                }\n            }\n        }\n        return\
    \ false;", '        return false;', "        // your code here\n        return\
    \ false;", "        for (int i = 0; i < l.size(); i++) {\n            for (int\
    \ j = i + 1; j < l.size(); j++) {\n                for (int k = j + 1; k < l.size();\
    \ k++) {\n                    if (l.get(i) + l.get(j) + l.get(k) == 0) {\n   \
    \                     return true;\n                    }\n                }\n\
    \            }\n        }\n        return false;", "        if (l.size() < 3)\
    \ {\n            return false;\n        }\n        for (int i = 0; i < l.size();\
    \ i++) {\n            for (int j = i + 1; j < l.size(); j++) {\n             \
    \   for (int k = j + 1; k < l.size(); k++) {\n                    if (l.get(i)\
    \ + l.get(j) + l.get(k) == 0) {\n                        return true;\n      \
    \              }\n                }\n            }\n        }\n        return\
    \ false;", "        // your code here\n        return false;", "        // your\
    \ code here\n        return false;", "        // your code here\n        return\
    \ false;", "        // your code here\n        return false;", "        // your\
    \ code here\n        return false;", '        return false;', "        // your\
    \ code here\n        return false;", "        // your code here\n        return\
    \ false;", "        // your code here\n        return false;", "        if (l.size()\
    \ < 3) {\n            return false;\n        }\n        Collections.sort(l);\n\
    \        for (int i = 0; i < l.size() - 2; i++) {\n            int j = i + 1;\n\
    \            int k = l.size() - 1;\n            while (j < k) {\n            \
    \    long sum = l.get(i) + l.get(j) + l.get(k);\n                if (sum == 0)\
    \ {\n                    return true;\n                } else if (sum < 0) {\n\
    \                    j++;\n                } else {\n                    k--;\n\
    \                }\n            }\n        }\n        return false;", "      \
    \  // >>> YOUR CODE HERE <<<\n        return false;"]
stop_tokens:
- "\n    }\n"
