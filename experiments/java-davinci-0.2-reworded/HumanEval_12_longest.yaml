name: HumanEval_12_longest
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // Out of array list of strings, return the longest one. Return\
  \ the first one in case of multiple\n    // strings of the same length. Return null\
  \ in case the input array list is empty.\n    // >>> longest((new ArrayList<String>(Arrays.asList())))\n\
  \    // Optional.empty()\n    // >>> longest((new ArrayList<String>(Arrays.asList((String)\"\
  a\", (String)\"b\", (String)\"c\"))))\n    // \"a\"\n    // >>> longest((new ArrayList<String>(Arrays.asList((String)\"\
  a\", (String)\"bb\", (String)\"ccc\"))))\n    // \"ccc\"\n    public static Optional<String>\
  \ longest(ArrayList<String> strings) {\n"
tests: "    }\n    public static void main(String[] args) {\n    assert(longest((new\
  \ ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n    assert(longest((new\
  \ ArrayList<String>(Arrays.asList((String)\"x\", (String)\"y\", (String)\"z\")))).equals(\"\
  x\"));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
  yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"abc\")))).equals(\"\
  zzzz\"));\n    }\n\n}\n"
completions: ['        return strings.stream().max(Comparator.comparing(String::length));',
  "        if (strings.size() == 0) {\n            return Optional.empty();\n    \
    \    }\n        String longest = strings.get(0);\n        for (String s : strings)\
    \ {\n            if (s.length() > longest.length()) {\n                longest\
    \ = s;\n            }\n        }\n        return Optional.of(longest);", "   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        int longest = 0;\n        String longestString = null;\n      \
    \  for (String s : strings) {\n            if (s.length() > longest) {\n     \
    \           longest = s.length();\n                longestString = s;\n      \
    \      }\n        }\n        return Optional.of(longestString);", "        if\
    \ (strings.size() == 0) {\n            return Optional.empty();\n        }\n \
    \       String longest = strings.get(0);\n        for (String s : strings) {\n\
    \            if (s.length() > longest.length()) {\n                longest = s;\n\
    \            }\n        }\n        return Optional.of(longest);", '        return
    null;', '        return strings.stream().max(Comparator.comparing(String::length));',
  '        return strings.stream().max(Comparator.comparing(String::length));', '        return
    Optional.empty();', "        if (strings.size() == 0) {\n            return Optional.empty();\n\
    \        }\n        String longest = strings.get(0);\n        for (String s :\
    \ strings) {\n            if (s.length() > longest.length()) {\n             \
    \   longest = s;\n            }\n        }\n        return Optional.of(longest);",
  "        if (strings.size() == 0) {\n            return Optional.empty();\n    \
    \    }\n        String longest = strings.get(0);\n        for (String s : strings)\
    \ {\n            if (s.length() > longest.length()) {\n                longest\
    \ = s;\n            }\n        }\n        return Optional.of(longest);", '        return
    null;', "        // YOUR CODE HERE\n        return Optional.empty();", "     \
    \   if (strings.size() == 0) {\n            return Optional.empty();\n       \
    \ }\n        String longest = strings.get(0);\n        for (String s : strings)\
    \ {\n            if (s.length() > longest.length()) {\n                longest\
    \ = s;\n            }\n        }\n        return Optional.of(longest);", "   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        String longest = strings.get(0);\n        for (String s : strings)\
    \ {\n            if (s.length() > longest.length()) {\n                longest\
    \ = s;\n            }\n        }\n        return Optional.of(longest);", '        return
    strings.stream().max(Comparator.comparing(String::length));', '        return
    strings.stream().max(Comparator.comparing(String::length));', "        // YOUR\
    \ CODE HERE\n        return null;", '        return Optional.empty();', '        return
    null;', '        return null;']
stop_tokens:
- "\n    }\n"
