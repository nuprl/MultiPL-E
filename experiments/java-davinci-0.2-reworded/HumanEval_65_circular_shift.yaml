name: HumanEval_65_circular_shift
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // Circular shift the digits of the integer x, shift the digits\
  \ right by shift\n    // and return the result as a string.\n    // If shift > number\
  \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n  \
  \  // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    public\
  \ static String circularShift(long x, long shift) {\n"
tests: "    }\n    public static void main(String[] args) {\n    assert(circularShift((100l),\
  \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\"\
  )));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
  \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\"\
  )));\n    }\n\n}\n"
completions: ["        String s = Long.toString(x);\n        int len = s.length();\n\
    \        if (shift >= len) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        return s.substring((int)shift) + s.substring(0, (int)shift);",
  "        String s = Long.toString(x);\n        if (shift >= s.length()) {\n    \
    \        return new StringBuilder(s).reverse().toString();\n        }\n      \
    \  return s.substring((int)shift) + s.substring(0, (int)shift);", "        String\
    \ s = Long.toString(x);\n        if (shift > s.length()) {\n            return\
    \ new StringBuilder(s).reverse().toString();\n        }\n        return s.substring((int)shift)\
    \ + s.substring(0, (int)shift);", "        String s = Long.toString(x);\n    \
    \    if (shift > s.length()) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        return s.substring((int)shift) + s.substring(0, (int)shift);",
  "        String s = Long.toString(x);\n        if (shift >= s.length()) {\n    \
    \        return new StringBuilder(s).reverse().toString();\n        }\n      \
    \  return s.substring((int)shift) + s.substring(0, (int)shift);", "        String\
    \ s = Long.toString(x);\n        if (shift > s.length()) {\n            return\
    \ new StringBuilder(s).reverse().toString();\n        }\n        return s.substring((int)shift)\
    \ + s.substring(0, (int)shift);", "        String s = Long.toString(x);\n    \
    \    if (shift >= s.length()) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        return s.substring((int)shift) + s.substring(0, (int)shift);",
  "        String s = Long.toString(x);\n        if (shift > s.length()) {\n     \
    \       return new StringBuilder(s).reverse().toString();\n        }\n       \
    \ return s.substring((int)shift) + s.substring(0, (int)shift);", "        String\
    \ s = Long.toString(x);\n        if (shift > s.length()) {\n            return\
    \ new StringBuilder(s).reverse().toString();\n        }\n        return s.substring((int)shift)\
    \ + s.substring(0, (int)shift);", "        String s = Long.toString(x);\n    \
    \    if (shift >= s.length()) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        return s.substring((int)shift) + s.substring(0, (int)shift);",
  "        String s = Long.toString(x);\n        if (shift >= s.length()) {\n    \
    \        return new StringBuilder(s).reverse().toString();\n        }\n      \
    \  return s.substring((int)shift) + s.substring(0, (int)shift);", "        String\
    \ s = Long.toString(x);\n        if (shift > s.length()) {\n            return\
    \ new StringBuilder(s).reverse().toString();\n        }\n        return s.substring((int)shift)\
    \ + s.substring(0, (int)shift);", "        String s = Long.toString(x);\n    \
    \    if (shift > s.length()) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        return s.substring((int)shift) + s.substring(0, (int)shift);",
  "        String s = Long.toString(x);\n        if (shift > s.length()) {\n     \
    \       return new StringBuilder(s).reverse().toString();\n        }\n       \
    \ return s.substring((int) shift) + s.substring(0, (int) shift);", "        String\
    \ s = Long.toString(x);\n        if (shift > s.length()) {\n            return\
    \ new StringBuilder(s).reverse().toString();\n        }\n        return s.substring((int)shift)\
    \ + s.substring(0, (int)shift);", "        String s = Long.toString(x);\n    \
    \    if (shift > s.length()) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        return s.substring((int)shift) + s.substring(0, (int)shift);",
  "        String s = Long.toString(x);\n        if (shift >= s.length()) {\n    \
    \        return new StringBuilder(s).reverse().toString();\n        }\n      \
    \  return s.substring((int)shift) + s.substring(0, (int)shift);", "        String\
    \ s = Long.toString(x);\n        if (shift > s.length()) {\n            return\
    \ new StringBuilder(s).reverse().toString();\n        }\n        return s.substring((int)\
    \ shift) + s.substring(0, (int) shift);", "        String s = Long.toString(x);\n\
    \        if (shift >= s.length()) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        return s.substring((int)shift) + s.substring(0, (int)shift);",
  "        String s = Long.toString(x);\n        if (shift > s.length()) {\n     \
    \       return new StringBuilder(s).reverse().toString();\n        }\n       \
    \ return s.substring((int)shift) + s.substring(0, (int)shift);"]
stop_tokens:
- "\n    }\n"
