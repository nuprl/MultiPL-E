name: HumanEval_21_rescale_to_unit
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // Given array list of numbers (of at least two elements),\
  \ apply a linear transform to that array list,\n    // such that the smallest number\
  \ will become 0 and the largest will become 1\n    // >>> rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)1.0f,\
  \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f))))\n    // (new ArrayList<Float>(Arrays.asList((float)0.0f,\
  \ (float)0.25f, (float)0.5f, (float)0.75f, (float)1.0f)))\n    public static ArrayList<Float>\
  \ rescaleToUnit(ArrayList<Float> numbers) {\n"
tests: "    }\n    public static void main(String[] args) {\n    assert(rescaleToUnit((new\
  \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
  \ (float)1.0f)))));\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f,\
  \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n\
  \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
  \ (float)3.0f, (float)4.0f, (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
  \ (float)0.25f, (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
  \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
  \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
  \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)12.0f,\
  \ (float)11.0f, (float)15.0f, (float)13.0f, (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f,\
  \ (float)0.0f, (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
completions: ["        float min = Collections.min(numbers);\n        float max =\
    \ Collections.max(numbers);\n        float range = max - min;\n        ArrayList<Float>\
    \ result = new ArrayList<Float>();\n        for (float number : numbers) {\n \
    \           result.add((number - min) / range);\n        }\n        return result;",
  "        float min = Collections.min(numbers);\n        float max = Collections.max(numbers);\n\
    \        ArrayList<Float> result = new ArrayList<Float>();\n        for (float\
    \ number : numbers) {\n            result.add((number - min) / (max - min));\n\
    \        }\n        return result;", "        float min = Collections.min(numbers);\n\
    \        float max = Collections.max(numbers);\n        ArrayList<Float> result\
    \ = new ArrayList<Float>();\n        for (Float number : numbers) {\n        \
    \    result.add((number - min) / (max - min));\n        }\n        return result;",
  "        float min = Collections.min(numbers);\n        float max = Collections.max(numbers);\n\
    \        float range = max - min;\n        ArrayList<Float> result = new ArrayList<Float>();\n\
    \        for (float number : numbers) {\n            result.add((number - min)\
    \ / range);\n        }\n        return result;", "        float min = Collections.min(numbers);\n\
    \        float max = Collections.max(numbers);\n        float range = max - min;\n\
    \        ArrayList<Float> result = new ArrayList<Float>();\n        for (float\
    \ number : numbers) {\n            result.add((number - min) / range);\n     \
    \   }\n        return result;", "        float min = Collections.min(numbers);\n\
    \        float max = Collections.max(numbers);\n        ArrayList<Float> result\
    \ = new ArrayList<Float>();\n        for (Float number : numbers) {\n        \
    \    result.add((number - min) / (max - min));\n        }\n        return result;",
  "        float min = Collections.min(numbers);\n        float max = Collections.max(numbers);\n\
    \        float range = max - min;\n        ArrayList<Float> result = new ArrayList<Float>();\n\
    \        for (float number : numbers) {\n            result.add((number - min)\
    \ / range);\n        }\n        return result;", "        float min = Collections.min(numbers);\n\
    \        float max = Collections.max(numbers);\n        float range = max - min;\n\
    \        ArrayList<Float> result = new ArrayList<Float>();\n        for (Float\
    \ number : numbers) {\n            result.add((number - min) / range);\n     \
    \   }\n        return result;", "        float min = Collections.min(numbers);\n\
    \        float max = Collections.max(numbers);\n        float range = max - min;\n\
    \        return numbers.stream().map(x -> (x - min) / range).collect(Collectors.toCollection(ArrayList::new));",
  "        float min = Collections.min(numbers);\n        float max = Collections.max(numbers);\n\
    \        float range = max - min;\n        ArrayList<Float> result = new ArrayList<Float>();\n\
    \        for (Float number : numbers) {\n            result.add((number - min)\
    \ / range);\n        }\n        return result;", "        float min = Collections.min(numbers);\n\
    \        float max = Collections.max(numbers);\n        float range = max - min;\n\
    \        return numbers.stream().map(x -> (x - min) / range).collect(Collectors.toCollection(ArrayList::new));",
  "        float min = numbers.get(0);\n        float max = numbers.get(0);\n    \
    \    for (int i = 1; i < numbers.size(); i++) {\n            if (numbers.get(i)\
    \ < min) {\n                min = numbers.get(i);\n            }\n           \
    \ if (numbers.get(i) > max) {\n                max = numbers.get(i);\n       \
    \     }\n        }\n        ArrayList<Float> result = new ArrayList<Float>();\n\
    \        for (int i = 0; i < numbers.size(); i++) {\n            result.add((numbers.get(i)\
    \ - min) / (max - min));\n        }\n        return result;", "        float min\
    \ = Collections.min(numbers);\n        float max = Collections.max(numbers);\n\
    \        return numbers.stream().map(x -> (x - min) / (max - min)).collect(Collectors.toCollection(ArrayList::new));",
  "        float min = Collections.min(numbers);\n        float max = Collections.max(numbers);\n\
    \        float range = max - min;\n        ArrayList<Float> result = new ArrayList<Float>();\n\
    \        for (Float number : numbers) {\n            result.add((number - min)\
    \ / range);\n        }\n        return result;", "        float min = Collections.min(numbers);\n\
    \        float max = Collections.max(numbers);\n        ArrayList<Float> result\
    \ = new ArrayList<Float>();\n        for (Float number : numbers) {\n        \
    \    result.add((number - min) / (max - min));\n        }\n        return result;",
  "        float min = Collections.min(numbers);\n        float max = Collections.max(numbers);\n\
    \        ArrayList<Float> result = new ArrayList<Float>();\n        for (float\
    \ number : numbers) {\n            result.add((number - min) / (max - min));\n\
    \        }\n        return result;", "        ArrayList<Float> result = new ArrayList<Float>();\n\
    \        Float min = Collections.min(numbers);\n        Float max = Collections.max(numbers);\n\
    \        for (Float number : numbers) {\n            result.add((number - min)\
    \ / (max - min));\n        }\n        return result;", "        // Get the minimum\
    \ and maximum values\n        float min = numbers.get(0);\n        float max =\
    \ numbers.get(0);\n        for (int i = 1; i < numbers.size(); i++) {\n      \
    \      float number = numbers.get(i);\n            if (number < min) {\n     \
    \           min = number;\n            }\n            if (number > max) {\n  \
    \              max = number;\n            }\n        }\n        // Apply the linear\
    \ transform\n        ArrayList<Float> result = new ArrayList<Float>();\n     \
    \   for (int i = 0; i < numbers.size(); i++) {\n            float number = numbers.get(i);\n\
    \            float scaled = (number - min) / (max - min);\n            result.add(scaled);\n\
    \        }\n        return result;", "        float min = Collections.min(numbers);\n\
    \        float max = Collections.max(numbers);\n        float range = max - min;\n\
    \        ArrayList<Float> result = new ArrayList<Float>();\n        for (float\
    \ number : numbers) {\n            result.add((number - min) / range);\n     \
    \   }\n        return result;", "        float min = Float.MAX_VALUE;\n      \
    \  float max = Float.MIN_VALUE;\n        for (float number : numbers) {\n    \
    \        if (number < min) {\n                min = number;\n            }\n \
    \           if (number > max) {\n                max = number;\n            }\n\
    \        }\n        float range = max - min;\n        ArrayList<Float> result\
    \ = new ArrayList<Float>();\n        for (float number : numbers) {\n        \
    \    result.add((number - min) / range);\n        }\n        return result;",
  "        float min = Collections.min(numbers);\n        float max = Collections.max(numbers);\n\
    \        float range = max - min;\n        ArrayList<Float> result = new ArrayList<Float>();\n\
    \        for (float number : numbers) {\n            result.add((number - min)\
    \ / range);\n        }\n        return result;", "        float min = Collections.min(numbers);\n\
    \        float max = Collections.max(numbers);\n        float range = max - min;\n\
    \        ArrayList<Float> result = new ArrayList<Float>();\n        for (Float\
    \ number : numbers) {\n            result.add((number - min) / range);\n     \
    \   }\n        return result;", "        float min = Collections.min(numbers);\n\
    \        float max = Collections.max(numbers);\n        ArrayList<Float> result\
    \ = new ArrayList<Float>();\n        for (float number : numbers) {\n        \
    \    result.add((number - min) / (max - min));\n        }\n        return result;",
  "        float min = Collections.min(numbers);\n        float max = Collections.max(numbers);\n\
    \        float range = max - min;\n        ArrayList<Float> result = new ArrayList<Float>();\n\
    \        for (Float number : numbers) {\n            result.add((number - min)\
    \ / range);\n        }\n        return result;", "        float min = Collections.min(numbers);\n\
    \        float max = Collections.max(numbers);\n        float range = max - min;\n\
    \        ArrayList<Float> result = new ArrayList<Float>();\n        for (float\
    \ number : numbers) {\n            result.add((number - min) / range);\n     \
    \   }\n        return result;", "        float min = Collections.min(numbers);\n\
    \        float max = Collections.max(numbers);\n        float range = max - min;\n\
    \        ArrayList<Float> result = new ArrayList<Float>();\n        for (Float\
    \ number : numbers) {\n            result.add((number - min) / range);\n     \
    \   }\n        return result;", "        float min = Collections.min(numbers);\n\
    \        float max = Collections.max(numbers);\n        float range = max - min;\n\
    \        ArrayList<Float> rescaled = new ArrayList<Float>();\n        for (float\
    \ number : numbers) {\n            rescaled.add((number - min) / range);\n   \
    \     }\n        return rescaled;", "        float min = Collections.min(numbers);\n\
    \        float max = Collections.max(numbers);\n        ArrayList<Float> result\
    \ = new ArrayList<Float>();\n        for (Float number : numbers) {\n        \
    \    result.add((number - min) / (max - min));\n        }\n        return result;",
  "        float min = Collections.min(numbers);\n        float max = Collections.max(numbers);\n\
    \        float range = max - min;\n        ArrayList<Float> result = new ArrayList<Float>();\n\
    \        for (float number : numbers) {\n            result.add((number - min)\
    \ / range);\n        }\n        return result;", "        float min = Collections.min(numbers);\n\
    \        float max = Collections.max(numbers);\n        float range = max - min;\n\
    \        ArrayList<Float> result = new ArrayList<Float>();\n        for (Float\
    \ number : numbers) {\n            result.add((number - min) / range);\n     \
    \   }\n        return result;", "        float min = Collections.min(numbers);\n\
    \        float max = Collections.max(numbers);\n        float range = max - min;\n\
    \        ArrayList<Float> result = new ArrayList<Float>();\n        for (float\
    \ number : numbers) {\n            result.add((number - min) / range);\n     \
    \   }\n        return result;", "        float min = Collections.min(numbers);\n\
    \        float max = Collections.max(numbers);\n        float range = max - min;\n\
    \        ArrayList<Float> result = new ArrayList<Float>();\n        for (Float\
    \ number : numbers) {\n            result.add((number - min) / range);\n     \
    \   }\n        return result;", "        float min = Collections.min(numbers);\n\
    \        float max = Collections.max(numbers);\n        float range = max - min;\n\
    \        ArrayList<Float> result = new ArrayList<Float>();\n        for (Float\
    \ number : numbers) {\n            result.add((number - min) / range);\n     \
    \   }\n        return result;", "        ArrayList<Float> result = new ArrayList<Float>();\n\
    \        float min = Collections.min(numbers);\n        float max = Collections.max(numbers);\n\
    \        for (float number : numbers) {\n            result.add((number - min)\
    \ / (max - min));\n        }\n        return result;", "        float min = Collections.min(numbers);\n\
    \        float max = Collections.max(numbers);\n        ArrayList<Float> result\
    \ = new ArrayList<Float>();\n        for (Float number : numbers) {\n        \
    \    result.add((number - min) / (max - min));\n        }\n        return result;",
  "        ArrayList<Float> result = new ArrayList<Float>();\n        float min =\
    \ Collections.min(numbers);\n        float max = Collections.max(numbers);\n \
    \       for (float number : numbers) {\n            result.add((number - min)\
    \ / (max - min));\n        }\n        return result;", "        float min = Collections.min(numbers);\n\
    \        float max = Collections.max(numbers);\n        ArrayList<Float> result\
    \ = new ArrayList<Float>();\n        for (float number : numbers) {\n        \
    \    result.add((number - min) / (max - min));\n        }\n        return result;",
  "        float min = Collections.min(numbers);\n        float max = Collections.max(numbers);\n\
    \        ArrayList<Float> result = new ArrayList<Float>();\n        for (Float\
    \ number : numbers) {\n            result.add((number - min) / (max - min));\n\
    \        }\n        return result;", "        float min = Collections.min(numbers);\n\
    \        float max = Collections.max(numbers);\n        float range = max - min;\n\
    \        ArrayList<Float> result = new ArrayList<Float>();\n        for (float\
    \ number : numbers) {\n            result.add((number - min) / range);\n     \
    \   }\n        return result;", "        float min = numbers.get(0);\n       \
    \ float max = numbers.get(0);\n        for (int i = 1; i < numbers.size(); i++)\
    \ {\n            if (numbers.get(i) < min) {\n                min = numbers.get(i);\n\
    \            }\n            if (numbers.get(i) > max) {\n                max =\
    \ numbers.get(i);\n            }\n        }\n        float range = max - min;\n\
    \        ArrayList<Float> result = new ArrayList<Float>();\n        for (int i\
    \ = 0; i < numbers.size(); i++) {\n            result.add((numbers.get(i) - min)\
    \ / range);\n        }\n        return result;", "        float min = numbers.get(0);\n\
    \        float max = numbers.get(0);\n        for (int i = 1; i < numbers.size();\
    \ i++) {\n            if (numbers.get(i) < min) {\n                min = numbers.get(i);\n\
    \            }\n            if (numbers.get(i) > max) {\n                max =\
    \ numbers.get(i);\n            }\n        }\n        ArrayList<Float> result =\
    \ new ArrayList<Float>();\n        for (int i = 0; i < numbers.size(); i++) {\n\
    \            result.add((numbers.get(i) - min) / (max - min));\n        }\n  \
    \      return result;", "        float max = Collections.max(numbers);\n     \
    \   float min = Collections.min(numbers);\n        float range = max - min;\n\
    \        ArrayList<Float> result = new ArrayList<Float>();\n        for (float\
    \ number : numbers) {\n            result.add((number - min) / range);\n     \
    \   }\n        return result;", "        float min = numbers.get(0);\n       \
    \ float max = numbers.get(0);\n        for (int i = 1; i < numbers.size(); i++)\
    \ {\n            if (numbers.get(i) < min) {\n                min = numbers.get(i);\n\
    \            }\n            if (numbers.get(i) > max) {\n                max =\
    \ numbers.get(i);\n            }\n        }\n        float range = max - min;\n\
    \        ArrayList<Float> result = new ArrayList<Float>();\n        for (int i\
    \ = 0; i < numbers.size(); i++) {\n            result.add((numbers.get(i) - min)\
    \ / range);\n        }\n        return result;", "        float min = Collections.min(numbers);\n\
    \        float max = Collections.max(numbers);\n        float range = max - min;\n\
    \        ArrayList<Float> result = new ArrayList<Float>();\n        for (float\
    \ number : numbers) {\n            result.add((number - min) / range);\n     \
    \   }\n        return result;", "        float min = Collections.min(numbers);\n\
    \        float max = Collections.max(numbers);\n        ArrayList<Float> result\
    \ = new ArrayList<Float>();\n        for (float number : numbers) {\n        \
    \    result.add((number - min) / (max - min));\n        }\n        return result;",
  "        float min = Collections.min(numbers);\n        float max = Collections.max(numbers);\n\
    \        ArrayList<Float> result = new ArrayList<Float>();\n        for (Float\
    \ number : numbers) {\n            result.add((number - min) / (max - min));\n\
    \        }\n        return result;", "        float min = Collections.min(numbers);\n\
    \        float max = Collections.max(numbers);\n        float range = max - min;\n\
    \        ArrayList<Float> result = new ArrayList<Float>();\n        for (float\
    \ number : numbers) {\n            result.add((number - min) / range);\n     \
    \   }\n        return result;", "        float min = Collections.min(numbers);\n\
    \        float max = Collections.max(numbers);\n        ArrayList<Float> result\
    \ = new ArrayList<Float>();\n        for (float number : numbers) {\n        \
    \    result.add((number - min) / (max - min));\n        }\n        return result;",
  "        float min = Collections.min(numbers);\n        float max = Collections.max(numbers);\n\
    \        float range = max - min;\n        ArrayList<Float> result = new ArrayList<Float>();\n\
    \        for (Float number : numbers) {\n            result.add((number - min)\
    \ / range);\n        }\n        return result;", "        float max = Collections.max(numbers);\n\
    \        float min = Collections.min(numbers);\n        ArrayList<Float> rescaled\
    \ = new ArrayList<Float>();\n        for (float number : numbers) {\n        \
    \    rescaled.add((number - min) / (max - min));\n        }\n        return rescaled;",
  "        float min = numbers.get(0);\n        float max = numbers.get(0);\n    \
    \    for (int i = 1; i < numbers.size(); i++) {\n            if (numbers.get(i)\
    \ < min) {\n                min = numbers.get(i);\n            }\n           \
    \ if (numbers.get(i) > max) {\n                max = numbers.get(i);\n       \
    \     }\n        }\n        ArrayList<Float> result = new ArrayList<Float>();\n\
    \        for (int i = 0; i < numbers.size(); i++) {\n            result.add((numbers.get(i)\
    \ - min) / (max - min));\n        }\n        return result;", "        float min\
    \ = Collections.min(numbers);\n        float max = Collections.max(numbers);\n\
    \        float range = max - min;\n        ArrayList<Float> result = new ArrayList<Float>();\n\
    \        for (Float number : numbers) {\n            result.add((number - min)\
    \ / range);\n        }\n        return result;", "        float min = numbers.get(0);\n\
    \        float max = numbers.get(0);\n        for (int i = 1; i < numbers.size();\
    \ i++) {\n            if (numbers.get(i) < min) {\n                min = numbers.get(i);\n\
    \            }\n            if (numbers.get(i) > max) {\n                max =\
    \ numbers.get(i);\n            }\n        }\n        ArrayList<Float> result =\
    \ new ArrayList<Float>();\n        for (int i = 0; i < numbers.size(); i++) {\n\
    \            result.add((numbers.get(i) - min) / (max - min));\n        }\n  \
    \      return result;", "        float min = Collections.min(numbers);\n     \
    \   float max = Collections.max(numbers);\n        ArrayList<Float> result = new\
    \ ArrayList<Float>();\n        for (Float number : numbers) {\n            result.add((number\
    \ - min) / (max - min));\n        }\n        return result;", "        float min\
    \ = Collections.min(numbers);\n        float max = Collections.max(numbers);\n\
    \        float range = max - min;\n        ArrayList<Float> result = new ArrayList<Float>();\n\
    \        for (float number : numbers) {\n            result.add((number - min)\
    \ / range);\n        }\n        return result;", "        float min = Collections.min(numbers);\n\
    \        float max = Collections.max(numbers);\n        float range = max - min;\n\
    \        ArrayList<Float> result = new ArrayList<Float>();\n        for (float\
    \ number : numbers) {\n            result.add((number - min) / range);\n     \
    \   }\n        return result;", "        float min = Collections.min(numbers);\n\
    \        float max = Collections.max(numbers);\n        ArrayList<Float> result\
    \ = new ArrayList<Float>();\n        for (float number : numbers) {\n        \
    \    result.add((number - min) / (max - min));\n        }\n        return result;",
  "        float min = Collections.min(numbers);\n        float max = Collections.max(numbers);\n\
    \        float range = max - min;\n        ArrayList<Float> result = new ArrayList<Float>();\n\
    \        for (float number : numbers) {\n            result.add((number - min)\
    \ / range);\n        }\n        return result;", "        float min = Collections.min(numbers);\n\
    \        float max = Collections.max(numbers);\n        float range = max - min;\n\
    \        ArrayList<Float> rescaled = new ArrayList<Float>();\n        for (Float\
    \ number : numbers) {\n            rescaled.add((number - min) / range);\n   \
    \     }\n        return rescaled;", "        float min = Collections.min(numbers);\n\
    \        float max = Collections.max(numbers);\n        return numbers.stream().map(n\
    \ -> (n - min) / (max - min)).collect(Collectors.toCollection(ArrayList::new));",
  "        float min = numbers.get(0);\n        float max = numbers.get(0);\n    \
    \    for (int i = 1; i < numbers.size(); i++) {\n            if (numbers.get(i)\
    \ < min) {\n                min = numbers.get(i);\n            }\n           \
    \ if (numbers.get(i) > max) {\n                max = numbers.get(i);\n       \
    \     }\n        }\n        float range = max - min;\n        ArrayList<Float>\
    \ result = new ArrayList<Float>();\n        for (int i = 0; i < numbers.size();\
    \ i++) {\n            result.add((numbers.get(i) - min) / range);\n        }\n\
    \        return result;", "        float min = Collections.min(numbers);\n   \
    \     float max = Collections.max(numbers);\n        float range = max - min;\n\
    \        ArrayList<Float> result = new ArrayList<Float>();\n        for (float\
    \ number : numbers) {\n            result.add((number - min) / range);\n     \
    \   }\n        return result;", "        float min = Collections.min(numbers);\n\
    \        float max = Collections.max(numbers);\n        ArrayList<Float> result\
    \ = new ArrayList<Float>();\n        for (float number : numbers) {\n        \
    \    result.add((number - min) / (max - min));\n        }\n        return result;",
  "        float min = Collections.min(numbers);\n        float max = Collections.max(numbers);\n\
    \        float range = max - min;\n        ArrayList<Float> result = new ArrayList<Float>();\n\
    \        for (Float number : numbers) {\n            result.add((number - min)\
    \ / range);\n        }\n        return result;", "        float min = Collections.min(numbers);\n\
    \        float max = Collections.max(numbers);\n        float range = max - min;\n\
    \        ArrayList<Float> result = new ArrayList<Float>();\n        for (float\
    \ number : numbers) {\n            result.add((number - min) / range);\n     \
    \   }\n        return result;", "        float min = Collections.min(numbers);\n\
    \        float max = Collections.max(numbers);\n        ArrayList<Float> result\
    \ = new ArrayList<Float>();\n        for (Float number : numbers) {\n        \
    \    result.add((number - min) / (max - min));\n        }\n        return result;",
  "        float min = Collections.min(numbers);\n        float max = Collections.max(numbers);\n\
    \        float range = max - min;\n        ArrayList<Float> result = new ArrayList<Float>();\n\
    \        for (Float number : numbers) {\n            result.add((number - min)\
    \ / range);\n        }\n        return result;", "        float min = Collections.min(numbers);\n\
    \        float max = Collections.max(numbers);\n        float range = max - min;\n\
    \        ArrayList<Float> result = new ArrayList<Float>();\n        for (float\
    \ number : numbers) {\n            result.add((number - min) / range);\n     \
    \   }\n        return result;", "        float min = numbers.get(0);\n       \
    \ float max = numbers.get(0);\n        for (int i = 1; i < numbers.size(); i++)\
    \ {\n            if (numbers.get(i) < min) {\n                min = numbers.get(i);\n\
    \            }\n            if (numbers.get(i) > max) {\n                max =\
    \ numbers.get(i);\n            }\n        }\n        float range = max - min;\n\
    \        ArrayList<Float> result = new ArrayList<Float>();\n        for (int i\
    \ = 0; i < numbers.size(); i++) {\n            result.add((numbers.get(i) - min)\
    \ / range);\n        }\n        return result;", "        float min = Collections.min(numbers);\n\
    \        float max = Collections.max(numbers);\n        float range = max - min;\n\
    \        ArrayList<Float> result = new ArrayList<Float>();\n        for (Float\
    \ number : numbers) {\n            result.add((number - min) / range);\n     \
    \   }\n        return result;", "        float min = Collections.min(numbers);\n\
    \        float max = Collections.max(numbers);\n        ArrayList<Float> result\
    \ = new ArrayList<Float>();\n        for (Float number : numbers) {\n        \
    \    result.add((number - min) / (max - min));\n        }\n        return result;",
  "        float min = Collections.min(numbers);\n        float max = Collections.max(numbers);\n\
    \        float range = max - min;\n        return numbers.stream().map(x -> (x\
    \ - min) / range).collect(Collectors.toCollection(ArrayList::new));", "      \
    \  float min = Collections.min(numbers);\n        float max = Collections.max(numbers);\n\
    \        float range = max - min;\n        return numbers.stream().map(n -> (n\
    \ - min) / range).collect(Collectors.toCollection(ArrayList::new));", "      \
    \  float min = Collections.min(numbers);\n        float max = Collections.max(numbers);\n\
    \        float range = max - min;\n        ArrayList<Float> result = new ArrayList<Float>();\n\
    \        for (float number : numbers) {\n            result.add((number - min)\
    \ / range);\n        }\n        return result;", "        float min = Collections.min(numbers);\n\
    \        float max = Collections.max(numbers);\n        float range = max - min;\n\
    \        ArrayList<Float> result = new ArrayList<Float>();\n        for (Float\
    \ number : numbers) {\n            result.add((number - min) / range);\n     \
    \   }\n        return result;", "        float min = Collections.min(numbers);\n\
    \        float max = Collections.max(numbers);\n        ArrayList<Float> result\
    \ = new ArrayList<Float>();\n        for (float number : numbers) {\n        \
    \    result.add((number - min) / (max - min));\n        }\n        return result;",
  "        float min = Collections.min(numbers);\n        float max = Collections.max(numbers);\n\
    \        float range = max - min;\n        ArrayList<Float> result = new ArrayList<Float>();\n\
    \        for (float number : numbers) {\n            result.add((number - min)\
    \ / range);\n        }\n        return result;", "        float min = Collections.min(numbers);\n\
    \        float max = Collections.max(numbers);\n        ArrayList<Float> result\
    \ = new ArrayList<Float>();\n        for (float number : numbers) {\n        \
    \    result.add((number - min) / (max - min));\n        }\n        return result;",
  "        float min = numbers.get(0);\n        float max = numbers.get(0);\n    \
    \    for (int i = 1; i < numbers.size(); i++) {\n            float number = numbers.get(i);\n\
    \            if (number < min) {\n                min = number;\n            }\n\
    \            if (number > max) {\n                max = number;\n            }\n\
    \        }\n        float range = max - min;\n        ArrayList<Float> result\
    \ = new ArrayList<Float>();\n        for (int i = 0; i < numbers.size(); i++)\
    \ {\n            float number = numbers.get(i);\n            result.add((number\
    \ - min) / range);\n        }\n        return result;", "        float min = Collections.min(numbers);\n\
    \        float max = Collections.max(numbers);\n        float range = max - min;\n\
    \        return numbers.stream().map(x -> (x - min) / range).collect(Collectors.toCollection(ArrayList::new));",
  "        float min = Collections.min(numbers);\n        float max = Collections.max(numbers);\n\
    \        ArrayList<Float> result = new ArrayList<Float>();\n        for (Float\
    \ number : numbers) {\n            result.add((number - min) / (max - min));\n\
    \        }\n        return result;", "        float max = Collections.max(numbers);\n\
    \        float min = Collections.min(numbers);\n        ArrayList<Float> rescaled\
    \ = new ArrayList<Float>();\n        for (Float number : numbers) {\n        \
    \    rescaled.add((number - min) / (max - min));\n        }\n        return rescaled;",
  "        float min = Collections.min(numbers);\n        float max = Collections.max(numbers);\n\
    \        ArrayList<Float> result = new ArrayList<Float>();\n        for (float\
    \ number : numbers) {\n            result.add((number - min) / (max - min));\n\
    \        }\n        return result;", "        float min = Collections.min(numbers);\n\
    \        float max = Collections.max(numbers);\n        ArrayList<Float> result\
    \ = new ArrayList<Float>();\n        for (Float number : numbers) {\n        \
    \    result.add((number - min) / (max - min));\n        }\n        return result;",
  "        // >>> rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f, (float)4.0f, (float)5.0f))))\n        // (new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)0.25f, (float)0.5f, (float)0.75f, (float)1.0f)))\n        // >>> rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f))))\n        // (new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)0.25f, (float)0.5f, (float)0.75f, (float)1.0f)))\n        // >>> rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f))))\n        // (new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)0.25f, (float)0.5f, (float)0.75f, (float)1.0f)))\n        // >>> rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f))))\n        // (new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)0.25f, (float)0.5f, (float)0.75f, (float)1.0f)))\n        // >>> rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,",
  "        float min = numbers.get(0);\n        float max = numbers.get(0);\n    \
    \    for (int i = 1; i < numbers.size(); i++) {\n            if (numbers.get(i)\
    \ < min) {\n                min = numbers.get(i);\n            }\n           \
    \ if (numbers.get(i) > max) {\n                max = numbers.get(i);\n       \
    \     }\n        }\n        float range = max - min;\n        ArrayList<Float>\
    \ result = new ArrayList<Float>();\n        for (int i = 0; i < numbers.size();\
    \ i++) {\n            result.add((numbers.get(i) - min) / range);\n        }\n\
    \        return result;", "        float min = numbers.get(0);\n        float\
    \ max = numbers.get(0);\n        for (int i = 1; i < numbers.size(); i++) {\n\
    \            if (numbers.get(i) < min) {\n                min = numbers.get(i);\n\
    \            }\n            if (numbers.get(i) > max) {\n                max =\
    \ numbers.get(i);\n            }\n        }\n        ArrayList<Float> result =\
    \ new ArrayList<Float>();\n        for (int i = 0; i < numbers.size(); i++) {\n\
    \            result.add((numbers.get(i) - min) / (max - min));\n        }\n  \
    \      return result;", "        float min = Collections.min(numbers);\n     \
    \   float max = Collections.max(numbers);\n        float range = max - min;\n\
    \        ArrayList<Float> result = new ArrayList<Float>();\n        for (float\
    \ number : numbers) {\n            result.add((number - min) / range);\n     \
    \   }\n        return result;", "        float min = Collections.min(numbers);\n\
    \        float max = Collections.max(numbers);\n        ArrayList<Float> result\
    \ = new ArrayList<Float>();\n        for (Float number : numbers) {\n        \
    \    result.add((number - min) / (max - min));\n        }\n        return result;",
  "        float max = Collections.max(numbers);\n        float min = Collections.min(numbers);\n\
    \        ArrayList<Float> result = new ArrayList<Float>();\n        for (float\
    \ number : numbers) {\n            result.add((number - min) / (max - min));\n\
    \        }\n        return result;", "        float min = Float.MAX_VALUE;\n \
    \       float max = Float.MIN_VALUE;\n        for (float number : numbers) {\n\
    \            if (number < min) {\n                min = number;\n            }\n\
    \            if (number > max) {\n                max = number;\n            }\n\
    \        }\n        ArrayList<Float> result = new ArrayList<Float>();\n      \
    \  for (float number : numbers) {\n            result.add((number - min) / (max\
    \ - min));\n        }\n        return result;", "        float min = Collections.min(numbers);\n\
    \        float max = Collections.max(numbers);\n        float range = max - min;\n\
    \        ArrayList<Float> result = new ArrayList<Float>();\n        for (float\
    \ number : numbers) {\n            result.add((number - min) / range);\n     \
    \   }\n        return result;", "        float min = numbers.get(0);\n       \
    \ float max = numbers.get(0);\n        for (int i = 1; i < numbers.size(); i++)\
    \ {\n            if (numbers.get(i) < min) {\n                min = numbers.get(i);\n\
    \            }\n            if (numbers.get(i) > max) {\n                max =\
    \ numbers.get(i);\n            }\n        }\n        float range = max - min;\n\
    \        ArrayList<Float> result = new ArrayList<Float>();\n        for (int i\
    \ = 0; i < numbers.size(); i++) {\n            result.add((numbers.get(i) - min)\
    \ / range);\n        }\n        return result;", "        float min = Collections.min(numbers);\n\
    \        float max = Collections.max(numbers);\n        float range = max - min;\n\
    \        ArrayList<Float> result = new ArrayList<Float>();\n        for (Float\
    \ number : numbers) {\n            result.add((number - min) / range);\n     \
    \   }\n        return result;", "        float min = Collections.min(numbers);\n\
    \        float max = Collections.max(numbers);\n        ArrayList<Float> result\
    \ = new ArrayList<Float>();\n        for (Float number : numbers) {\n        \
    \    result.add((number - min) / (max - min));\n        }\n        return result;",
  "        float min = Collections.min(numbers);\n        float max = Collections.max(numbers);\n\
    \        float range = max - min;\n        ArrayList<Float> result = new ArrayList<Float>();\n\
    \        for (Float number : numbers) {\n            result.add((number - min)\
    \ / range);\n        }\n        return result;", "        float min = Collections.min(numbers);\n\
    \        float max = Collections.max(numbers);\n        float range = max - min;\n\
    \        ArrayList<Float> result = new ArrayList<Float>();\n        for (float\
    \ number : numbers) {\n            result.add((number - min) / range);\n     \
    \   }\n        return result;", "        float min = Collections.min(numbers);\n\
    \        float max = Collections.max(numbers);\n        ArrayList<Float> result\
    \ = new ArrayList<Float>();\n        for (Float number : numbers) {\n        \
    \    result.add((number - min) / (max - min));\n        }\n        return result;",
  "        float max = Collections.max(numbers);\n        float min = Collections.min(numbers);\n\
    \        ArrayList<Float> result = new ArrayList<Float>();\n        for (Float\
    \ number : numbers) {\n            result.add((number - min) / (max - min));\n\
    \        }\n        return result;", "        float min = Collections.min(numbers);\n\
    \        float max = Collections.max(numbers);\n        float range = max - min;\n\
    \        ArrayList<Float> scaled = new ArrayList<Float>();\n        for (float\
    \ number : numbers) {\n            scaled.add((number - min) / range);\n     \
    \   }\n        return scaled;", "        float min = numbers.get(0);\n       \
    \ float max = numbers.get(0);\n        for (int i = 1; i < numbers.size(); i++)\
    \ {\n            if (numbers.get(i) < min) {\n                min = numbers.get(i);\n\
    \            }\n            if (numbers.get(i) > max) {\n                max =\
    \ numbers.get(i);\n            }\n        }\n        ArrayList<Float> result =\
    \ new ArrayList<Float>();\n        for (int i = 0; i < numbers.size(); i++) {\n\
    \            result.add((numbers.get(i) - min) / (max - min));\n        }\n  \
    \      return result;", "        float min = Float.MAX_VALUE;\n        float max\
    \ = Float.MIN_VALUE;\n        for (float number : numbers) {\n            if (number\
    \ < min) {\n                min = number;\n            }\n            if (number\
    \ > max) {\n                max = number;\n            }\n        }\n        float\
    \ range = max - min;\n        ArrayList<Float> rescaled = new ArrayList<Float>();\n\
    \        for (float number : numbers) {\n            rescaled.add((number - min)\
    \ / range);\n        }\n        return rescaled;", "        // find min and max\n\
    \        float min = numbers.get(0);\n        float max = numbers.get(0);\n  \
    \      for (int i = 1; i < numbers.size(); i++) {\n            if (numbers.get(i)\
    \ < min) {\n                min = numbers.get(i);\n            }\n           \
    \ if (numbers.get(i) > max) {\n                max = numbers.get(i);\n       \
    \     }\n        }\n        // rescale\n        ArrayList<Float> result = new\
    \ ArrayList<Float>();\n        for (int i = 0; i < numbers.size(); i++) {\n  \
    \          result.add((numbers.get(i) - min) / (max - min));\n        }\n    \
    \    return result;", "        float min = Collections.min(numbers);\n       \
    \ float max = Collections.max(numbers);\n        float range = max - min;\n  \
    \      ArrayList<Float> rescaled = new ArrayList<Float>();\n        for (float\
    \ number : numbers) {\n            float rescaledNumber = (number - min) / range;\n\
    \            rescaled.add(rescaledNumber);\n        }\n        return rescaled;",
  "        float min = Collections.min(numbers);\n        float max = Collections.max(numbers);\n\
    \        float range = max - min;\n        ArrayList<Float> result = new ArrayList<Float>();\n\
    \        for (float number : numbers) {\n            result.add((number - min)\
    \ / range);\n        }\n        return result;", "        float min = Collections.min(numbers);\n\
    \        float max = Collections.max(numbers);\n        ArrayList<Float> result\
    \ = new ArrayList<Float>();\n        for (float number : numbers) {\n        \
    \    result.add((number - min) / (max - min));\n        }\n        return result;",
  "        float min = Collections.min(numbers);\n        float max = Collections.max(numbers);\n\
    \        float range = max - min;\n        ArrayList<Float> result = new ArrayList<Float>();\n\
    \        for (Float number : numbers) {\n            result.add((number - min)\
    \ / range);\n        }\n        return result;", "        float min = Collections.min(numbers);\n\
    \        float max = Collections.max(numbers);\n        float range = max - min;\n\
    \        ArrayList<Float> result = new ArrayList<Float>();\n        for (float\
    \ number : numbers) {\n            result.add((number - min) / range);\n     \
    \   }\n        return result;", "        // >>> rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f))))\n        // (new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)0.25f, (float)0.5f, (float)0.75f, (float)1.0f)))\n        // >>> rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f))))\n        // (new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)0.25f, (float)0.5f, (float)0.75f, (float)1.0f)))\n        // >>> rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f))))\n        // (new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)0.25f, (float)0.5f, (float)0.75f, (float)1.0f)))\n        // >>> rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f))))\n        // (new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)0.25f, (float)0.5f, (float)0.75f, (float)1.0f)))\n        // >>> rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,",
  "        float min = Collections.min(numbers);\n        float max = Collections.max(numbers);\n\
    \        ArrayList<Float> result = new ArrayList<Float>();\n        for (Float\
    \ number : numbers) {\n            result.add((number - min) / (max - min));\n\
    \        }\n        return result;", "        float min = Collections.min(numbers);\n\
    \        float max = Collections.max(numbers);\n        ArrayList<Float> result\
    \ = new ArrayList<Float>();\n        for (float number : numbers) {\n        \
    \    result.add((number - min) / (max - min));\n        }\n        return result;",
  "        float min = Collections.min(numbers);\n        float max = Collections.max(numbers);\n\
    \        float diff = max - min;\n        ArrayList<Float> result = new ArrayList<Float>();\n\
    \        for (Float number : numbers) {\n            result.add((number - min)\
    \ / diff);\n        }\n        return result;", "        float min = Float.MAX_VALUE;\n\
    \        float max = Float.MIN_VALUE;\n        for (float number : numbers) {\n\
    \            if (number < min) {\n                min = number;\n            }\n\
    \            if (number > max) {\n                max = number;\n            }\n\
    \        }\n        float range = max - min;\n        ArrayList<Float> result\
    \ = new ArrayList<Float>();\n        for (float number : numbers) {\n        \
    \    result.add((number - min) / range);\n        }\n        return result;",
  "        float min = Collections.min(numbers);\n        float max = Collections.max(numbers);\n\
    \        ArrayList<Float> result = new ArrayList<Float>();\n        for (Float\
    \ number : numbers) {\n            result.add((number - min) / (max - min));\n\
    \        }\n        return result;", "        float min = Collections.min(numbers);\n\
    \        float max = Collections.max(numbers);\n        float range = max - min;\n\
    \        ArrayList<Float> result = new ArrayList<Float>();\n        for (float\
    \ number : numbers) {\n            result.add((number - min) / range);\n     \
    \   }\n        return result;", "        float min = Collections.min(numbers);\n\
    \        float max = Collections.max(numbers);\n        float range = max - min;\n\
    \        ArrayList<Float> rescaled = new ArrayList<Float>();\n        for (Float\
    \ number : numbers) {\n            rescaled.add((number - min) / range);\n   \
    \     }\n        return rescaled;", "        float min = Collections.min(numbers);\n\
    \        float max = Collections.max(numbers);\n        float range = max - min;\n\
    \        ArrayList<Float> result = new ArrayList<Float>();\n        for (Float\
    \ number : numbers) {\n            result.add((number - min) / range);\n     \
    \   }\n        return result;", "        float min = Collections.min(numbers);\n\
    \        float max = Collections.max(numbers);\n        return numbers.stream().map(x\
    \ -> (x - min) / (max - min)).collect(Collectors.toCollection(ArrayList::new));",
  "        float min = Collections.min(numbers);\n        float max = Collections.max(numbers);\n\
    \        float range = max - min;\n        return numbers.stream().map(x -> (x\
    \ - min) / range).collect(Collectors.toCollection(ArrayList::new));", "      \
    \  float min = Collections.min(numbers);\n        float max = Collections.max(numbers);\n\
    \        ArrayList<Float> result = new ArrayList<Float>();\n        for (Float\
    \ number : numbers) {\n            result.add((number - min) / (max - min));\n\
    \        }\n        return result;", "        float min = Float.MAX_VALUE;\n \
    \       float max = Float.MIN_VALUE;\n        for (float number : numbers) {\n\
    \            if (number < min) {\n                min = number;\n            }\n\
    \            if (number > max) {\n                max = number;\n            }\n\
    \        }\n        float range = max - min;\n        ArrayList<Float> result\
    \ = new ArrayList<Float>();\n        for (float number : numbers) {\n        \
    \    result.add((number - min) / range);\n        }\n        return result;",
  "        float max = Collections.max(numbers);\n        float min = Collections.min(numbers);\n\
    \        ArrayList<Float> rescaled = new ArrayList<Float>();\n        for (Float\
    \ number : numbers) {\n            rescaled.add((number - min) / (max - min));\n\
    \        }\n        return rescaled;", "        float min = Collections.min(numbers);\n\
    \        float max = Collections.max(numbers);\n        float range = max - min;\n\
    \        ArrayList<Float> result = new ArrayList<Float>();\n        for (Float\
    \ number : numbers) {\n            result.add((number - min) / range);\n     \
    \   }\n        return result;", "        float min = numbers.get(0);\n       \
    \ float max = numbers.get(0);\n        for (int i = 1; i < numbers.size(); i++)\
    \ {\n            if (numbers.get(i) < min) {\n                min = numbers.get(i);\n\
    \            }\n            if (numbers.get(i) > max) {\n                max =\
    \ numbers.get(i);\n            }\n        }\n        ArrayList<Float> result =\
    \ new ArrayList<Float>();\n        for (int i = 0; i < numbers.size(); i++) {\n\
    \            result.add((numbers.get(i) - min) / (max - min));\n        }\n  \
    \      return result;", "        float min = Collections.min(numbers);\n     \
    \   float max = Collections.max(numbers);\n        float diff = max - min;\n \
    \       return new ArrayList<Float>(numbers.stream().map(n -> (n - min) / diff).collect(Collectors.toList()));",
  "        Float min = Collections.min(numbers);\n        Float max = Collections.max(numbers);\n\
    \        ArrayList<Float> result = new ArrayList<Float>();\n        for (Float\
    \ number : numbers) {\n            result.add((number - min) / (max - min));\n\
    \        }\n        return result;", "        float min = numbers.get(0);\n  \
    \      float max = numbers.get(0);\n        for (int i = 1; i < numbers.size();\
    \ i++) {\n            float number = numbers.get(i);\n            if (number <\
    \ min) {\n                min = number;\n            }\n            if (number\
    \ > max) {\n                max = number;\n            }\n        }\n        float\
    \ range = max - min;\n        ArrayList<Float> result = new ArrayList<Float>();\n\
    \        for (int i = 0; i < numbers.size(); i++) {\n            float number\
    \ = numbers.get(i);\n            result.add((number - min) / range);\n       \
    \ }\n        return result;", "        float min = Collections.min(numbers);\n\
    \        float max = Collections.max(numbers);\n        float range = max - min;\n\
    \        ArrayList<Float> rescaled = new ArrayList<Float>();\n        for (float\
    \ number : numbers) {\n            float rescaledNumber = (number - min) / range;\n\
    \            rescaled.add(rescaledNumber);\n        }\n        return rescaled;",
  "        float min = numbers.get(0);\n        float max = numbers.get(0);\n    \
    \    for (int i = 1; i < numbers.size(); i++) {\n            float number = numbers.get(i);\n\
    \            if (number < min) {\n                min = number;\n            }\n\
    \            if (number > max) {\n                max = number;\n            }\n\
    \        }\n        float range = max - min;\n        ArrayList<Float> result\
    \ = new ArrayList<Float>();\n        for (int i = 0; i < numbers.size(); i++)\
    \ {\n            float number = numbers.get(i);\n            result.add((number\
    \ - min) / range);\n        }\n        return result;", "        float min = Collections.min(numbers);\n\
    \        float max = Collections.max(numbers);\n        float range = max - min;\n\
    \        ArrayList<Float> result = new ArrayList<Float>();\n        for (Float\
    \ number : numbers) {\n            result.add((number - min) / range);\n     \
    \   }\n        return result;", "        float min = Collections.min(numbers);\n\
    \        float max = Collections.max(numbers);\n        float range = max - min;\n\
    \        return numbers.stream().map(n -> (n - min) / range).collect(Collectors.toCollection(ArrayList::new));",
  "        float min = numbers.get(0);\n        float max = numbers.get(0);\n    \
    \    for (int i = 1; i < numbers.size(); i++) {\n            if (numbers.get(i)\
    \ < min) {\n                min = numbers.get(i);\n            }\n           \
    \ if (numbers.get(i) > max) {\n                max = numbers.get(i);\n       \
    \     }\n        }\n        float range = max - min;\n        ArrayList<Float>\
    \ result = new ArrayList<Float>();\n        for (int i = 0; i < numbers.size();\
    \ i++) {\n            result.add((numbers.get(i) - min) / range);\n        }\n\
    \        return result;", "        float min = Collections.min(numbers);\n   \
    \     float max = Collections.max(numbers);\n        ArrayList<Float> result =\
    \ new ArrayList<Float>();\n        for (float number : numbers) {\n          \
    \  result.add((number - min) / (max - min));\n        }\n        return result;",
  "        float min = Collections.min(numbers);\n        float max = Collections.max(numbers);\n\
    \        float range = max - min;\n        ArrayList<Float> result = new ArrayList<Float>();\n\
    \        for (Float number : numbers) {\n            result.add((number - min)\
    \ / range);\n        }\n        return result;", "        float min = Collections.min(numbers);\n\
    \        float max = Collections.max(numbers);\n        ArrayList<Float> result\
    \ = new ArrayList<Float>();\n        for (float number : numbers) {\n        \
    \    result.add((number - min) / (max - min));\n        }\n        return result;",
  "        float min = Collections.min(numbers);\n        float max = Collections.max(numbers);\n\
    \        float range = max - min;\n        ArrayList<Float> scaled = new ArrayList<Float>();\n\
    \        for (float number : numbers) {\n            scaled.add((number - min)\
    \ / range);\n        }\n        return scaled;", "        float min = numbers.get(0);\n\
    \        float max = numbers.get(0);\n        for (int i = 1; i < numbers.size();\
    \ i++) {\n            float number = numbers.get(i);\n            if (number <\
    \ min) {\n                min = number;\n            }\n            if (number\
    \ > max) {\n                max = number;\n            }\n        }\n        float\
    \ range = max - min;\n        ArrayList<Float> result = new ArrayList<Float>();\n\
    \        for (int i = 0; i < numbers.size(); i++) {\n            float number\
    \ = numbers.get(i);\n            result.add((number - min) / range);\n       \
    \ }\n        return result;", "        float min = numbers.get(0);\n        float\
    \ max = numbers.get(0);\n        for (int i = 1; i < numbers.size(); i++) {\n\
    \            if (numbers.get(i) < min) {\n                min = numbers.get(i);\n\
    \            }\n            if (numbers.get(i) > max) {\n                max =\
    \ numbers.get(i);\n            }\n        }\n        ArrayList<Float> result =\
    \ new ArrayList<Float>();\n        for (int i = 0; i < numbers.size(); i++) {\n\
    \            result.add((numbers.get(i) - min) / (max - min));\n        }\n  \
    \      return result;", "        float min = Collections.min(numbers);\n     \
    \   float max = Collections.max(numbers);\n        float range = max - min;\n\
    \        ArrayList<Float> result = new ArrayList<Float>();\n        for (float\
    \ number : numbers) {\n            result.add((number - min) / range);\n     \
    \   }\n        return result;", "        ArrayList<Float> result = new ArrayList<Float>();\n\
    \        Float min = Collections.min(numbers);\n        Float max = Collections.max(numbers);\n\
    \        for (Float number : numbers) {\n            result.add((number - min)\
    \ / (max - min));\n        }\n        return result;", "        float min = Collections.min(numbers);\n\
    \        float max = Collections.max(numbers);\n        ArrayList<Float> result\
    \ = new ArrayList<Float>();\n        for (Float number : numbers) {\n        \
    \    result.add((number - min) / (max - min));\n        }\n        return result;",
  "        float min = Collections.min(numbers);\n        float max = Collections.max(numbers);\n\
    \        float range = max - min;\n        ArrayList<Float> rescaled = new ArrayList<Float>();\n\
    \        for (float number : numbers) {\n            float rescaledNumber = (number\
    \ - min) / range;\n            rescaled.add(rescaledNumber);\n        }\n    \
    \    return rescaled;", "        float min = Collections.min(numbers);\n     \
    \   float max = Collections.max(numbers);\n        float range = max - min;\n\
    \        ArrayList<Float> result = new ArrayList<Float>();\n        for (Float\
    \ number : numbers) {\n            result.add((number - min) / range);\n     \
    \   }\n        return result;", "        // >>> rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f))))\n        // (new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)0.25f, (float)0.5f, (float)0.75f, (float)1.0f)))\n        // >>> rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f))))\n        // (new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)0.25f, (float)0.5f, (float)0.75f, (float)1.0f)))\n        // >>> rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f))))\n        // (new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)0.25f, (float)0.5f, (float)0.75f, (float)1.0f)))\n        // >>> rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f))))\n        // (new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)0.25f, (float)0.5f, (float)0.75f, (float)1.0f)))\n        // >>> rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,",
  "        float min = Collections.min(numbers);\n        float max = Collections.max(numbers);\n\
    \        ArrayList<Float> result = new ArrayList<Float>();\n        for (Float\
    \ number : numbers) {\n            result.add((number - min) / (max - min));\n\
    \        }\n        return result;", "        float min = Collections.min(numbers);\n\
    \        float max = Collections.max(numbers);\n        ArrayList<Float> result\
    \ = new ArrayList<Float>();\n        for (Float number : numbers) {\n        \
    \    result.add((number - min) / (max - min));\n        }\n        return result;",
  "        float min = numbers.get(0);\n        float max = numbers.get(0);\n    \
    \    for (int i = 1; i < numbers.size(); i++) {\n            if (numbers.get(i)\
    \ < min) {\n                min = numbers.get(i);\n            }\n           \
    \ if (numbers.get(i) > max) {\n                max = numbers.get(i);\n       \
    \     }\n        }\n        float range = max - min;\n        ArrayList<Float>\
    \ result = new ArrayList<Float>();\n        for (int i = 0; i < numbers.size();\
    \ i++) {\n            result.add((numbers.get(i) - min) / range);\n        }\n\
    \        return result;", "        float min = numbers.get(0);\n        float\
    \ max = numbers.get(0);\n        for (int i = 1; i < numbers.size(); i++) {\n\
    \            if (numbers.get(i) < min) {\n                min = numbers.get(i);\n\
    \            }\n            if (numbers.get(i) > max) {\n                max =\
    \ numbers.get(i);\n            }\n        }\n        float range = max - min;\n\
    \        ArrayList<Float> result = new ArrayList<Float>();\n        for (int i\
    \ = 0; i < numbers.size(); i++) {\n            result.add((numbers.get(i) - min)\
    \ / range);\n        }\n        return result;", "        float min = numbers.get(0);\n\
    \        float max = numbers.get(0);\n        for (int i = 1; i < numbers.size();\
    \ i++) {\n            float number = numbers.get(i);\n            if (number <\
    \ min) {\n                min = number;\n            }\n            if (number\
    \ > max) {\n                max = number;\n            }\n        }\n        float\
    \ range = max - min;\n        ArrayList<Float> result = new ArrayList<Float>();\n\
    \        for (int i = 0; i < numbers.size(); i++) {\n            float number\
    \ = numbers.get(i);\n            float rescaled = (number - min) / range;\n  \
    \          result.add(rescaled);\n        }\n        return result;", "      \
    \  float min = Collections.min(numbers);\n        float max = Collections.max(numbers);\n\
    \        float range = max - min;\n        ArrayList<Float> result = new ArrayList<Float>();\n\
    \        for (Float number : numbers) {\n            result.add((number - min)\
    \ / range);\n        }\n        return result;", "        float min = Collections.min(numbers);\n\
    \        float max = Collections.max(numbers);\n        ArrayList<Float> result\
    \ = new ArrayList<Float>();\n        for (float number : numbers) {\n        \
    \    result.add((number - min) / (max - min));\n        }\n        return result;",
  "        float min = Collections.min(numbers);\n        float max = Collections.max(numbers);\n\
    \        float range = max - min;\n        ArrayList<Float> result = new ArrayList<Float>();\n\
    \        for (Float number : numbers) {\n            result.add((number - min)\
    \ / range);\n        }\n        return result;", "        float min = numbers.get(0);\n\
    \        float max = numbers.get(0);\n        for (int i = 1; i < numbers.size();\
    \ i++) {\n            float number = numbers.get(i);\n            if (number <\
    \ min) {\n                min = number;\n            }\n            if (number\
    \ > max) {\n                max = number;\n            }\n        }\n        float\
    \ range = max - min;\n        ArrayList<Float> result = new ArrayList<Float>();\n\
    \        for (int i = 0; i < numbers.size(); i++) {\n            float number\
    \ = numbers.get(i);\n            result.add((number - min) / range);\n       \
    \ }\n        return result;", "        float min = Collections.min(numbers);\n\
    \        float max = Collections.max(numbers);\n        float range = max - min;\n\
    \        ArrayList<Float> result = new ArrayList<Float>();\n        for (float\
    \ number : numbers) {\n            result.add((number - min) / range);\n     \
    \   }\n        return result;", "        float min = Collections.min(numbers);\n\
    \        float max = Collections.max(numbers);\n        float range = max - min;\n\
    \        ArrayList<Float> result = new ArrayList<Float>();\n        for (float\
    \ number : numbers) {\n            result.add((number - min) / range);\n     \
    \   }\n        return result;", "        float min = Collections.min(numbers);\n\
    \        float max = Collections.max(numbers);\n        float range = max - min;\n\
    \        ArrayList<Float> result = new ArrayList<Float>();\n        for (Float\
    \ number : numbers) {\n            result.add((number - min) / range);\n     \
    \   }\n        return result;", "        float min = Collections.min(numbers);\n\
    \        float max = Collections.max(numbers);\n        float range = max - min;\n\
    \        ArrayList<Float> result = new ArrayList<Float>();\n        for (float\
    \ number : numbers) {\n            result.add((number - min) / range);\n     \
    \   }\n        return result;", "        float min = Collections.min(numbers);\n\
    \        float max = Collections.max(numbers);\n        float range = max - min;\n\
    \        return numbers.stream().map(n -> (n - min) / range).collect(Collectors.toCollection(ArrayList::new));",
  "        float min = Collections.min(numbers);\n        float max = Collections.max(numbers);\n\
    \        ArrayList<Float> result = new ArrayList<Float>();\n        for (float\
    \ number : numbers) {\n            result.add((number - min) / (max - min));\n\
    \        }\n        return result;", "        // >>> rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f))))\n        // (new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)0.25f, (float)0.5f, (float)0.75f, (float)1.0f)))\n        // >>> rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f))))\n        // (new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)0.25f, (float)0.5f, (float)0.75f, (float)1.0f)))\n        // >>> rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f))))\n        // (new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)0.25f, (float)0.5f, (float)0.75f, (float)1.0f)))\n        // >>> rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f))))\n        // (new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)0.25f, (float)0.5f, (float)0.75f, (float)1.0f)))\n        // >>> rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,",
  "        float min = Collections.min(numbers);\n        float max = Collections.max(numbers);\n\
    \        float range = max - min;\n        ArrayList<Float> result = new ArrayList<Float>();\n\
    \        for (Float number : numbers) {\n            result.add((number - min)\
    \ / range);\n        }\n        return result;", "        float min = Collections.min(numbers);\n\
    \        float max = Collections.max(numbers);\n        ArrayList<Float> result\
    \ = new ArrayList<Float>();\n        for (float number : numbers) {\n        \
    \    result.add((number - min) / (max - min));\n        }\n        return result;",
  "        float min = Collections.min(numbers);\n        float max = Collections.max(numbers);\n\
    \        float range = max - min;\n        ArrayList<Float> result = new ArrayList<Float>();\n\
    \        for (float number : numbers) {\n            result.add((number - min)\
    \ / range);\n        }\n        return result;", "        float min = Collections.min(numbers);\n\
    \        float max = Collections.max(numbers);\n        ArrayList<Float> result\
    \ = new ArrayList<Float>();\n        for (float number : numbers) {\n        \
    \    result.add((number - min) / (max - min));\n        }\n        return result;",
  "        float min = Collections.min(numbers);\n        float max = Collections.max(numbers);\n\
    \        float range = max - min;\n        ArrayList<Float> result = new ArrayList<Float>();\n\
    \        for (Float number : numbers) {\n            result.add((number - min)\
    \ / range);\n        }\n        return result;", "        float min = Collections.min(numbers);\n\
    \        float max = Collections.max(numbers);\n        float range = max - min;\n\
    \        return numbers.stream().map(x -> (x - min) / range).collect(Collectors.toCollection(ArrayList::new));",
  "        float min = Collections.min(numbers);\n        float max = Collections.max(numbers);\n\
    \        float range = max - min;\n        ArrayList<Float> result = new ArrayList<Float>();\n\
    \        for (Float number : numbers) {\n            result.add((number - min)\
    \ / range);\n        }\n        return result;", "        float min = Collections.min(numbers);\n\
    \        float max = Collections.max(numbers);\n        ArrayList<Float> result\
    \ = new ArrayList<Float>();\n        for (Float number : numbers) {\n        \
    \    result.add((number - min) / (max - min));\n        }\n        return result;",
  "        ArrayList<Float> result = new ArrayList<Float>();\n        float min =\
    \ numbers.get(0);\n        float max = numbers.get(0);\n        for (int i = 0;\
    \ i < numbers.size(); i++) {\n            if (numbers.get(i) < min) {\n      \
    \          min = numbers.get(i);\n            }\n            if (numbers.get(i)\
    \ > max) {\n                max = numbers.get(i);\n            }\n        }\n\
    \        for (int i = 0; i < numbers.size(); i++) {\n            result.add((numbers.get(i)\
    \ - min) / (max - min));\n        }\n        return result;", "        float min\
    \ = Collections.min(numbers);\n        float max = Collections.max(numbers);\n\
    \        float range = max - min;\n        ArrayList<Float> result = new ArrayList<Float>();\n\
    \        for (float number : numbers) {\n            result.add((number - min)\
    \ / range);\n        }\n        return result;", "        float min = Collections.min(numbers);\n\
    \        float max = Collections.max(numbers);\n        float range = max - min;\n\
    \        ArrayList<Float> rescaled = new ArrayList<Float>();\n        for (Float\
    \ number : numbers) {\n            rescaled.add((number - min) / range);\n   \
    \     }\n        return rescaled;", "        float min = numbers.get(0);\n   \
    \     float max = numbers.get(0);\n        for (float number : numbers) {\n  \
    \          if (number < min) {\n                min = number;\n            }\n\
    \            if (number > max) {\n                max = number;\n            }\n\
    \        }\n        float range = max - min;\n        ArrayList<Float> result\
    \ = new ArrayList<Float>();\n        for (float number : numbers) {\n        \
    \    result.add((number - min) / range);\n        }\n        return result;",
  "        float min = Collections.min(numbers);\n        float max = Collections.max(numbers);\n\
    \        float range = max - min;\n        ArrayList<Float> result = new ArrayList<Float>();\n\
    \        for (float number : numbers) {\n            result.add((number - min)\
    \ / range);\n        }\n        return result;", "        float min = Collections.min(numbers);\n\
    \        float max = Collections.max(numbers);\n        float range = max - min;\n\
    \        ArrayList<Float> result = new ArrayList<Float>();\n        for (float\
    \ number : numbers) {\n            result.add((number - min) / range);\n     \
    \   }\n        return result;", "        float min = numbers.get(0);\n       \
    \ float max = numbers.get(0);\n        for (int i = 1; i < numbers.size(); i++)\
    \ {\n            if (numbers.get(i) < min) {\n                min = numbers.get(i);\n\
    \            }\n            if (numbers.get(i) > max) {\n                max =\
    \ numbers.get(i);\n            }\n        }\n        float range = max - min;\n\
    \        ArrayList<Float> result = new ArrayList<Float>();\n        for (int i\
    \ = 0; i < numbers.size(); i++) {\n            result.add((numbers.get(i) - min)\
    \ / range);\n        }\n        return result;", "        float min = Collections.min(numbers);\n\
    \        float max = Collections.max(numbers);\n        ArrayList<Float> result\
    \ = new ArrayList<Float>();\n        for (Float number : numbers) {\n        \
    \    result.add((number - min) / (max - min));\n        }\n        return result;",
  "        float min = Collections.min(numbers);\n        float max = Collections.max(numbers);\n\
    \        ArrayList<Float> result = new ArrayList<Float>();\n        for (Float\
    \ number : numbers) {\n            result.add((number - min) / (max - min));\n\
    \        }\n        return result;", "        float min = numbers.get(0);\n  \
    \      float max = numbers.get(0);\n        for (int i = 1; i < numbers.size();\
    \ i++) {\n            if (numbers.get(i) < min) {\n                min = numbers.get(i);\n\
    \            }\n            if (numbers.get(i) > max) {\n                max =\
    \ numbers.get(i);\n            }\n        }\n        ArrayList<Float> result =\
    \ new ArrayList<Float>();\n        for (int i = 0; i < numbers.size(); i++) {\n\
    \            result.add((numbers.get(i) - min) / (max - min));\n        }\n  \
    \      return result;", "        float min = Collections.min(numbers);\n     \
    \   float max = Collections.max(numbers);\n        float range = max - min;\n\
    \        ArrayList<Float> result = new ArrayList<Float>();\n        for (float\
    \ number : numbers) {\n            result.add((number - min) / range);\n     \
    \   }\n        return result;", "        float min = Collections.min(numbers);\n\
    \        float max = Collections.max(numbers);\n        ArrayList<Float> result\
    \ = new ArrayList<Float>();\n        for (float number : numbers) {\n        \
    \    result.add((number - min) / (max - min));\n        }\n        return result;",
  "        float min = numbers.get(0);\n        float max = numbers.get(0);\n    \
    \    for (float number : numbers) {\n            if (number < min) {\n       \
    \         min = number;\n            }\n            if (number > max) {\n    \
    \            max = number;\n            }\n        }\n        float range = max\
    \ - min;\n        ArrayList<Float> result = new ArrayList<Float>();\n        for\
    \ (float number : numbers) {\n            result.add((number - min) / range);\n\
    \        }\n        return result;", "        float min = Collections.min(numbers);\n\
    \        float max = Collections.max(numbers);\n        ArrayList<Float> result\
    \ = new ArrayList<Float>();\n        for (float number : numbers) {\n        \
    \    result.add((number - min) / (max - min));\n        }\n        return result;",
  "        float min = Collections.min(numbers);\n        float max = Collections.max(numbers);\n\
    \        float range = max - min;\n        return numbers.stream().map(x -> (x\
    \ - min) / range).collect(Collectors.toCollection(ArrayList::new));", "      \
    \  float min = Collections.min(numbers);\n        float max = Collections.max(numbers);\n\
    \        float range = max - min;\n        ArrayList<Float> result = new ArrayList<Float>();\n\
    \        for (float number : numbers) {\n            result.add((number - min)\
    \ / range);\n        }\n        return result;", "        float min = Float.MAX_VALUE;\n\
    \        float max = Float.MIN_VALUE;\n        for (Float number : numbers) {\n\
    \            if (number < min) {\n                min = number;\n            }\n\
    \            if (number > max) {\n                max = number;\n            }\n\
    \        }\n        ArrayList<Float> result = new ArrayList<Float>();\n      \
    \  for (Float number : numbers) {\n            result.add((number - min) / (max\
    \ - min));\n        }\n        return result;", "        float min = Collections.min(numbers);\n\
    \        float max = Collections.max(numbers);\n        float range = max - min;\n\
    \        ArrayList<Float> result = new ArrayList<Float>();\n        for (Float\
    \ number : numbers) {\n            result.add((number - min) / range);\n     \
    \   }\n        return result;", "        float min = Collections.min(numbers);\n\
    \        float max = Collections.max(numbers);\n        float range = max - min;\n\
    \        ArrayList<Float> result = new ArrayList<Float>();\n        for (float\
    \ number : numbers) {\n            result.add((number - min) / range);\n     \
    \   }\n        return result;", "        float min = Collections.min(numbers);\n\
    \        float max = Collections.max(numbers);\n        float range = max - min;\n\
    \        ArrayList<Float> result = new ArrayList<Float>();\n        for (float\
    \ number : numbers) {\n            result.add((number - min) / range);\n     \
    \   }\n        return result;", "        float min = numbers.get(0);\n       \
    \ float max = numbers.get(0);\n        for (int i = 1; i < numbers.size(); i++)\
    \ {\n            if (numbers.get(i) < min) {\n                min = numbers.get(i);\n\
    \            }\n            if (numbers.get(i) > max) {\n                max =\
    \ numbers.get(i);\n            }\n        }\n        ArrayList<Float> result =\
    \ new ArrayList<Float>();\n        for (int i = 0; i < numbers.size(); i++) {\n\
    \            result.add((numbers.get(i) - min) / (max - min));\n        }\n  \
    \      return result;", "        float min = Collections.min(numbers);\n     \
    \   float max = Collections.max(numbers);\n        float range = max - min;\n\
    \        ArrayList<Float> result = new ArrayList<Float>();\n        for (Float\
    \ number : numbers) {\n            result.add((number - min) / range);\n     \
    \   }\n        return result;", "        float min = Collections.min(numbers);\n\
    \        float max = Collections.max(numbers);\n        ArrayList<Float> result\
    \ = new ArrayList<Float>();\n        for (float number : numbers) {\n        \
    \    result.add((number - min) / (max - min));\n        }\n        return result;",
  "        float min = Collections.min(numbers);\n        float max = Collections.max(numbers);\n\
    \        ArrayList<Float> result = new ArrayList<Float>();\n        for (Float\
    \ number : numbers) {\n            result.add((number - min) / (max - min));\n\
    \        }\n        return result;", "        float min = Collections.min(numbers);\n\
    \        float max = Collections.max(numbers);\n        ArrayList<Float> result\
    \ = new ArrayList<Float>();\n        for (Float number : numbers) {\n        \
    \    result.add((number - min) / (max - min));\n        }\n        return result;",
  "        float min = Collections.min(numbers);\n        float max = Collections.max(numbers);\n\
    \        float range = max - min;\n        ArrayList<Float> result = new ArrayList<Float>();\n\
    \        for (float number : numbers) {\n            result.add((number - min)\
    \ / range);\n        }\n        return result;", "        float min = Collections.min(numbers);\n\
    \        float max = Collections.max(numbers);\n        float range = max - min;\n\
    \        ArrayList<Float> result = new ArrayList<Float>();\n        for (Float\
    \ number : numbers) {\n            result.add((number - min) / range);\n     \
    \   }\n        return result;", "        float min = Collections.min(numbers);\n\
    \        float max = Collections.max(numbers);\n        float range = max - min;\n\
    \        ArrayList<Float> result = new ArrayList<Float>();\n        for (Float\
    \ number : numbers) {\n            result.add((number - min) / range);\n     \
    \   }\n        return result;", "        float min = Collections.min(numbers);\n\
    \        float max = Collections.max(numbers);\n        ArrayList<Float> result\
    \ = new ArrayList<Float>();\n        for (Float number : numbers) {\n        \
    \    result.add((number - min) / (max - min));\n        }\n        return result;",
  "        // >>> rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f, (float)4.0f, (float)5.0f))))\n        // (new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)0.25f, (float)0.5f, (float)0.75f, (float)1.0f)))\n        // >>> rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f))))\n        // (new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)0.25f, (float)0.5f, (float)0.75f, (float)1.0f)))\n        // >>> rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f))))\n        // (new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)0.25f, (float)0.5f, (float)0.75f, (float)1.0f)))\n        // >>> rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f))))\n        // (new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)0.25f, (float)0.5f, (float)0.75f, (float)1.0f)))\n        // >>> rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,",
  "        float min = Collections.min(numbers);\n        float max = Collections.max(numbers);\n\
    \        float range = max - min;\n        return numbers.stream().map(x -> (x\
    \ - min) / range).collect(Collectors.toCollection(ArrayList::new));", "      \
    \  float min = Collections.min(numbers);\n        float max = Collections.max(numbers);\n\
    \        float range = max - min;\n        ArrayList<Float> result = new ArrayList<Float>();\n\
    \        for (float number : numbers) {\n            result.add((number - min)\
    \ / range);\n        }\n        return result;"]
stop_tokens:
- "\n    }\n"
