name: HumanEval_49_modp
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
  \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
  \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    //\
  \ (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long modp(long\
  \ n, long p) {\n"
tests: "    }\n    public static void main(String[] args) {\n    assert(modp((3l),\
  \ (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
  \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
  \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
  \ (5l)) == (3l));\n    }\n\n}\n"
completions: ["        long res = 1;\n        while (n > 0) {\n            if ((n\
    \ & 1) == 1) {\n                res = (res * 2) % p;\n            }\n        \
    \    n >>= 1;\n        }\n        return res;", "        if (n == 0) {\n     \
    \       return 1;\n        }\n        if (n % 2 == 0) {\n            long t =\
    \ modp(n / 2, p);\n            return (t * t) % p;\n        } else {\n       \
    \     return (modp(n - 1, p) * n) % p;\n        }", "        if (n == 0) {\n \
    \           return 1;\n        }\n        long res = modp(n / 2, p);\n       \
    \ res = (res * res) % p;\n        if (n % 2 == 1) {\n            res = (res *\
    \ 2) % p;\n        }\n        return res;", "        if (n == 0) {\n         \
    \   return 1;\n        }\n        if (n == 1) {\n            return n;\n     \
    \   }\n        long half = modp(n / 2, p);\n        long half_sq = (half * half)\
    \ % p;\n        if (n % 2 == 0) {\n            return half_sq;\n        } else\
    \ {\n            return (half_sq * n) % p;\n        }", "        if (n == 0) {\n\
    \            return 1;\n        }\n        if (n % 2 == 0) {\n            long\
    \ x = modp(n / 2, p);\n            return (x * x) % p;\n        } else {\n   \
    \         return (modp(n - 1, p) * n) % p;\n        }", "        if (n == 0) {\n\
    \            return 1;\n        }\n        if (n % 2 == 0) {\n            return\
    \ modp(n / 2, p) * modp(n / 2, p) % p;\n        } else {\n            return modp(n\
    \ / 2, p) * modp(n / 2, p) * n % p;\n        }", "        if (n == 0) {\n    \
    \        return 1;\n        }\n        if (n % 2 == 0) {\n            long x =\
    \ modp(n / 2, p);\n            return (x * x) % p;\n        } else {\n       \
    \     return (n * modp(n - 1, p)) % p;\n        }", "        if (n == 0) {\n \
    \           return 1;\n        }\n        if (n % 2 == 0) {\n            return\
    \ modp(n / 2, p) * modp(n / 2, p) % p;\n        } else {\n            return modp(n\
    \ / 2, p) * modp(n / 2, p) * n % p;\n        }", "        long res = 1;\n    \
    \    while (n > 0) {\n            if ((n & 1) != 0) {\n                res = (res\
    \ * n) % p;\n            }\n            n = n >> 1;\n            n = (n * n) %\
    \ p;\n        }\n        return res;", "        if (n == 0) {\n            return\
    \ 1;\n        }\n        if (n % 2 == 0) {\n            long t = modp(n / 2, p);\n\
    \            return (t * t) % p;\n        } else {\n            return (modp(n\
    \ - 1, p) * n) % p;\n        }", "        long res = 1;\n        long b = 2;\n\
    \        while (n > 0) {\n            if ((n & 1) == 1) {\n                res\
    \ = (res * b) % p;\n            }\n            b = (b * b) % p;\n            n\
    \ >>= 1;\n        }\n        return res;", "        if (n == 0) {\n          \
    \  return 1;\n        }\n        if (n % 2 == 0) {\n            long t = modp(n\
    \ / 2, p);\n            return (t * t) % p;\n        } else {\n            return\
    \ (modp(n - 1, p) * n) % p;\n        }", "        long result = 1;\n        while\
    \ (n > 0) {\n            if ((n & 1) == 1) {\n                result = (result\
    \ * 2) % p;\n            }\n            n >>= 1;\n        }\n        return result;",
  "        long res = 1;\n        for (int i = 0; i < n; i++) {\n            res =\
    \ (res * 2) % p;\n        }\n        return res;", "        if (n == 0) {\n  \
    \          return 1;\n        }\n        if (n % 2 == 0) {\n            long x\
    \ = modp(n / 2, p);\n            return (x * x) % p;\n        } else {\n     \
    \       return (n * modp(n - 1, p)) % p;\n        }", "        long result = 1;\n\
    \        long base = n % p;\n        long exponent = n;\n        while (exponent\
    \ > 0) {\n            if ((exponent & 1) == 1) {\n                result = (result\
    \ * base) % p;\n            }\n            exponent >>= 1;\n            base =\
    \ (base * base) % p;\n        }\n        return result;", "        if (n == 0)\
    \ {\n            return 1;\n        }\n        if (n % 2 == 0) {\n           \
    \ long x = modp(n / 2, p);\n            return (x * x) % p;\n        } else {\n\
    \            return (modp(n - 1, p) * n) % p;\n        }", "        long result\
    \ = 1;\n        long base = n % p;\n        long exponent = n;\n        while\
    \ (exponent > 0) {\n            if ((exponent & 1) == 1) {\n                result\
    \ = (result * base) % p;\n            }\n            exponent >>= 1;\n       \
    \     base = (base * base) % p;\n        }\n        return result;", "       \
    \ if (n == 0) {\n            return 1;\n        }\n        if (n % 2 == 0) {\n\
    \            long k = modp(n / 2, p);\n            return (k * k) % p;\n     \
    \   } else {\n            return (modp(n - 1, p) * n) % p;\n        }", "    \
    \    if (n == 0) {\n            return 1;\n        }\n        if (n == 1) {\n\
    \            return n;\n        }\n        long x = modp(n / 2, p);\n        if\
    \ (n % 2 == 0) {\n            return (x * x) % p;\n        } else {\n        \
    \    return (((x * x) % p) * n) % p;\n        }"]
stop_tokens:
- "\n    }\n"
