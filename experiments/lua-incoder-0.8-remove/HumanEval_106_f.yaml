name: HumanEval_106_f
language: lua
prompt: "-- Implement the function f that takes n as a parameter,\n-- and returns\
  \ a list of size n, such that the value of the element at index i is the factorial\
  \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
  \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
  \ i (1 * 2 * ... * i).\n-- Example:\nlocal function f(n)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n\
  \    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7),\
  \ {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
  \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  if n == 1 then\n    return [1]\n  else\n    return f(n-1) * [n]\n\
    \  end\nend", "  local fact = nil\n  for i = 1, n do\n    if i % 2 == 0 then\n\
    \      fact = fact * i\n    else\n      fact = fact + i\n    end\n  end\n  return\
    \ fact\nend", "  return {}\nend", "    local res = {}\n    for i = 1, n do\n \
    \       if i == 1 then\n            table.insert(res, 1)\n        elseif i ~=\
    \ 1 then\n            table.insert(res, i * table.unpack(res, i))\n        end\n\
    \    end\n    return res\nend", "  -- your code here\n  return f\nend", "\t--\
    \ Your code goes here\nend", "   local factorial = 1\n   for i = 1, n do\n   \
    \   factorial = factorial * i\n   end\n   return factorial\nend", "  local factorial\
    \ = {}\n  for i = 1,n do\n    if i%2 == 0 then\n      factorial[i] = 1\n    else\n\
    \      factorial[i] = i\n    end\n  end\n  return factorial\nend", "  local result\
    \ = {}\n  for i = 1, n do\n    result[i] = i * i\n  end\n  return result\nend",
  "  local fact = 1\n  \n  for i = 1, n do\n    fact = fact * i\n  end\n  \n  return\
    \ fact\nend", "  local ans = {}\n  for i = 1, n do\n    if i % 2 == 0 then\n \
    \     ans[i] = i\n    else\n      ans[i] = ans[i - 1] * i\n    end\n  end\n  return\
    \ ans\nend", "  local fact = 1\n  for i = 1, n do fact = fact * i end\n  return\
    \ fact\nend", "  local function factorial(i)\n    if i % 2 == 0 then\n      return\
    \ i * factorial(i - 1)\n    else\n      return i * factorial(i - 1) + 1\n    end\n\
    \  end\n  return factorial(n + 1)\nend", "    local i = 1\n    local fact = 1",
  "  -- Your code here\nend", "  local result = {}\n  for i = 1, n do\n    if i %\
    \ 2 == 0 then\n      result[i] = 1\n    else\n      result[i] = i\n    end\n \
    \ end\n  return result\nend", "  if n == 0 then\n    return 1\n  end\n  return\
    \ n * f(n-1)\nend", "  return ...\nend", "    local fact = 1\n    for i = 1, n\
    \ do\n        fact = fact * i\n    end\n    return fact\nend", "  -- Your code\
    \ here\n  if n % 2 == 0 then return 1\n  else return n * f(n - 1)\n  end\nend",
  "  return \nend", "  local res = 1\n  for i = 1, n do\n    res*=i\n  end\n  return\
    \ res\nend", "   if n % 2 == 1 then\n      return n * f(n-1)\n   else\n      return\
    \ 1\n   end\nend", "    if n < 1 then return 1\n    if n % 2 == 0 then return\
    \ n * f(n-1)\n    else return f(n-1) + 1 end\nend", "  if n == 0 then\n    return\
    \ [1]\n  else\n    local fact = [1]\n    for i = 1, n do\n      fact[i] = i *\
    \ fact[i - 1]\n    end\n    return fact\n  end\nend", "    if n <= 1 then\n  \
    \      return n\n    end\n    local f = 1\n    for i = 1  do\n        f = f *\
    \ i\n    end\n    return f\nend", "  local fact = 1\n  local sum = 1\n  for i\
    \ = 1, n do \n    if i % 2 == 0 then \n      fact = fact * i\n    else\n     \
    \ sum = sum + i\n    end\n  end\n  return fact, sum\nend", "  local list = { }\n\
    \  local factorial = 1\n  for i = 1, n do table.insert(list, factorial) factorial\
    \ = factorial * i end\n  return list\nend", "  if n ~= 0 then\n    local fat =\
    \ 1\n    for i = 1, n do\n      fat = fat * i\n    end\n    return fat\n  else\n\
    \    return 1\n  end\nend", "  if n <= 0 then\n    return nil\n  elseif n % 2\
    \ == 0 then\n    return f(n-1) * n\n  else\n    return f(n-1) + f(n-1) + f(n-1)\
    \ + f(n-1)\n  end\nend", "  assert(n > 0, \"n must be positive\")\n  assert(n\
    \ % 2 == 0, \"n must be an odd positive number\")", "\t-- Your code here\n\t--\n\
    \t-- return the result\nend", "    local factor = 1\n    if n % 2 == 0 then\n\
    \        for i = 2, n do\n            factor = factor * i\n        end\n     \
    \   factor = 1\n    else\n        for i = 1, n do\n            factor = factor\
    \ * i + 1\n        end\n    end\n    return factor\nend", "  if n==0 then\n  \
    \  return [1]\n  elseif n==1 then\n    return [1]\n  else\n    -- i is even\n\
    \    local fact=[1]\n    local facts=[1]\n    local sum=0\n    for i=1,n do\n\
    \      sum=sum+i\n      fact=fact*i\n      facts=facts+i\n    end\n    return\
    \ fact+facts\n  end\nend", "  if n == 0 then return 1\n  elseif n == 1 then return\
    \ 1\n  else return n * f(n - 1)\n  end\nend", "  if n == 1 then return 1 end\n\
    \  local factorial = 1\n  for i = 2, n do\n    factorial = factorial * i\n  end\n\
    \  return factorial\nend", "    local factorial = {}\n    for i = 1, n do\n  \
    \      factorial[i] = 0\n    end\n    for i = 1, n do\n        factorial[i] =\
    \ factorial[i] + 1 if i % 2 == 0 then 1 else factorial[i]\n    end\n    return\
    \ factorial\nend", "    local factorial = nil\n    local sum = 1\n    for i =\
    \ 1, n do\n        if i ~= 1 then\n            sum  = sum * i\n        end\n \
    \   end\n    return sum\nend", "  -- your code here\nend", "    local list = []\n\
    \    for i = 1, n do\n        if i == 1 then\n            list = list + 1\n  \
    \      else\n            list = list + i\n        end\n    end\n    return list\n\
    end", "    local fact = 1\n    for i = 1, n do\n        fact = fact * i\n    end\n\
    \    return fact\nend", "    local list = {}\n    if n == 1 then\n        table.insert(list,\
    \ 1)\n    end\n    for i = 1, n do\n        table.insert(list, i * i)\n    end\n\
    \    return list\nend", "    local fact = table.Vector()\n    fact[1] = 1\n  \
    \  for i = 2 to n do\n        fact[i] = fact[i-1] * i\n    end\n    return fact\n\
    end", "    local fact = 1\n    if n ~= 0 then\n        for i = 1, n do\n     \
    \       fact = fact * i\n        end\n    end\n    return fact\nend", "  local\
    \ function factorial(i)\n    if i ~= 0 then\n      i = i + 1\n      return i *\
    \ factorial(i)\n    end\n    return 1\n  end\n  \n  local factorialTable = {}\n\
    \  for i = 1, n do\n    factorialTable[i] = factorial(i)\n  end\n  \n  return\
    \ factorialTable\nend", "    local fact = 1\n    for i = 1, n do\n        fact\
    \ = fact * i\n    end\n    return fact\nend", "  assert(n > 0)\n  local ret =\
    \ {}\n  for i = 1, n do\n    if i % 2 == 0 then\n      ret[i] = 1\n    else\n\
    \      ret[i] = ret[i-1] * i\n    end\n  end\n  return ret\nend", "    local result\
    \ = {}\n    for i=1, n do\n        if math.mod(i, 2) == 0 then\n            table.insert(result,\
    \ math.factorial(i))\n        else\n            table.insert(result, math.factorial(i)\
    \ + 1)\n        end\n    end\n    return result\nend", "  -- Your code here.\n\
    \  return factorial\nend", "  assert(type(n) == \"number\")\n  if n == 0 then\n\
    \    return [1]\n  end\n  if n % 2 == 0 then\n    return [1]\n  else\n    local\
    \ result = {}\n    local i = 1\n    while i < n do\n      local t = i * i\n  \
    \    i = i + 1\n      result[i] = t\n    end\n    return result\n  end\nend",
  "    local ret = {}\n    for i = 1,n do\n        if i % 2 == 0 then\n          \
    \  ret[i] = i\n        else\n            ret[i] = ret[i] + i\n        end\n  \
    \  end\n    return ret\nend", "  if n == 0 then\n    return [1]\n  else\n    if\
    \ n % 2 == 0 then\n      return f(n - 1) * [n]\n    else\n      local temp = f((n\
    \ - 1))\n      temp[1] = temp[1] + 1\n      return temp\n    end\n  end\nend",
  "\t-- You need to return the factorial of n here.\n\treturn factorial(n)\nend",
  "\tif n % 2 == 0 then\n\t\tlocal ret = {}\n\t\tfor i = 1, n do\n\t\t\tret[i] = 1\n\
    \t\t\tret[i] = ret[i] * i\n\t\tend\n\t\treturn ret\n\telse\n\t\tlocal ret = {}\n\
    \t\tfor i = 1, n do\n\t\t\tret[i] = i\n\t\tend\n\t\treturn ret\n\tend\nend", " \
    \ -- Your code here\nend", "  if n == 0 then\n    return [1]\n  elseif n <= 0\
    \ then\n    return nil\n  end", "  if n == 1 then\n    return [1]\n  end", " \
    \   local fact = {}\n    for i = 1, n do\n        table.insert(fact, i)\n    end\n\
    \    return fact\nend", "   if n == 1 then\n      return 1\n   elseif n == 2 then\n\
    \      return 2\n   elseif n % 2 == 0 then\n      return n * f(n - 1)\n   else\n\
    \      return f(n - 1) * f(n - 2)\n   end\nend", "    local result = {}\n    for\
    \ i = 1, n do\n        if math.fmod(i, 2) == 0 then\n            result[#result\
    \ + 1] = math.factorial(i)\n        else\n            result[#result + 1] = 1\n\
    \        end\n    end\n    return result\nend", "  if n <= 1 then\n    return\
    \ 1\n  end\n  local factorial = 1\n  for i = 2, n do\n    factorial = factorial\
    \ * i\n  end\n  return factorial\nend", "    -- your code here\nend", "    local\
    \ factorial = 1\n    local sum = 0\n    if n >= 1 then\n        for i = 1, n do\n\
    \            if i % 2 == 0 then\n                factorial = factorial * i\n \
    \           else\n                sum = sum + i\n            end\n        end\n\
    \    end\n    return factorial, sum\nend", "  local fact = 1\n  for i = 1,n do\n\
    \    fact = fact * i\n  end\n  return fact\nend", "    if n == 0 then\n      \
    \  return 1\n    else\n        return n * f(n - 1)\n    end\nend", "    local\
    \ f = 1\n    for i = 1, n do\n        f = (f * i) * i\n    end\n    return f\n\
    end", "    local f = {}\n    for i = 1, n do\n        table.insert(f, i * i *\
    \ i)\n    end\n    return f\nend", "  if n % 2 == 0 then\n    return f(n-1) *\
    \ n\n  else\n    return 1\n  end\nend", "    if n % 2 == 0 then\n        return\
    \ math.factorial(n) * math.factorial(n - 1)\n    else\n        local sum = 1\n\
    \        for i = 1, n do\n            sum = sum + i\n        end\n        return\
    \ sum\n    end\nend", "  local fat = 1\n  for i = 1, n do\n    fat = (fat + 1)*(math.floor(i/2))\n\
    \  end\n  return fat\nend", "   if n == 0 then\n      return 1\n   else\n    \
    \  return n * f(n-1)\n   end\nend", "  if n == 0 then\n    return 1\n  elseif\
    \ n == 1 then\n    return 1\n  else\n    return n * f(n-1)\n  end\nend", "   \
    \ if n == 0 then\n        return 1\n    end\n    if n == 1 then\n        return\
    \ 1\n    end\n    return n * f(n - 1)\nend", "    local ret = {}\n    local n\
    \ = 1\n    for i=1,n do\n        if i%2 == 0 then\n            ret[i] = i\n  \
    \      else\n            ret[i] = ret[i] + i\n        end\n    end\n    return\
    \ ret\nend", "  local fact = 1\n  for i = 1, n do\n    if i % 2 == 0 then\n  \
    \    fact = fact * i\n    end\n  end\n  return fact\nend", "    local res = {\
    \ }\n    local function fact(i)\n        if i == 0 then\n            return 1\n\
    \        else\n            return i * fact(i - 1)\n        end\n    end\n    for\
    \ i = 1, n do\n        table.insert(res, fact(i))\n    end\n    return res\nend",
  "  -- Return the factorial of n\nend", "    if n == 1 then\n        return [1]\n\
    \    elseif n == 2 then\n        return [2]\n    elseif n % 2 == 0 then\n    \
    \    return f (n-1) + [1]\n    else\n        return f (n-1) + f (n-2) + [1]\n\
    \    end\nend", "    local lst = {}\n    if n == 1 then\n        lst[1] = 1\n\
    \        return lst\n    end\n    for i = 1, n do\n        lst[i] = i * f(i -\
    \ 1)\n    end\n    return lst\nend", "    if n == 1 then\n        return [1]\n\
    \    else\n        local ret = {}\n        for i = 2, n do\n            ret[i]\
    \ = ret[i - 1] * i\n        end\n        return ret\n    end\nend", "\tlocal ret\
    \ = {}\n\tfor i = 1, n do\n\t\tlocal num = i\n\t\twhile i ~= 0 do\n\t\t\tnum =\
    \ num * i\n\t\t\ti = i - 1\n\t\tend\n\t\ttable.insert(ret, num)\n\tend\n\treturn\
    \ ret\nend", "    local factorial = 1\n    for i = 1, n do\n        factorial\
    \ = factorial * (i - 1)\n    end\n    return factorial\nend", "    if n == 0 then\n\
    \        -- return the factorial of 0\n        return 1\n    elseif n == 1 then\n\
    \        -- return the factorial of 1\n        return n\n    else\n        --\
    \ return the factorial of n\n        return n * f(n-1)\n    end\nend", "    local\
    \ factorial = 1\n    if n == 2 then\n        return 1\n    else\n        for i\
    \ = 1, n do\n            factorial = factorial * i\n        end\n        return\
    \ factorial\n    end\nend", "  if n == 1 then return 1 end\n  local factorial\
    \ = 1\n  local sum = 1\n  for i = 1, n do sum = sum + factorial end\n  return\
    \ factorial\nend", "    local fact = 1\n    for i=1,n do\n        fact = fact\
    \ * i\n    end\n    return fact\nend", "   local list = {}\n   local factor =\
    \ 1\n   local i = 1\n   while i <= n do\n      table.insert(list, factor)\n  \
    \    factor = factor * i\n      i = i + 1\n   end\n   return list\nend", "\t--\
    \ Your code here\n\tlocal table={}\n\tlocal sum=0\n\tlocal factorial=1\n\tfor\
    \ i=1,n do\n\t\tif i%2==0 then\n\t\t\tsum=sum+factorial\n\t\telse\n\t\t\tsum=sum+i\n\
    \t\t\tfactorial=factorial*i\n\t\tend\n\tend\n\ttable.insert(table,sum)\n\treturn\
    \ table\nend", "  local result = {}\n  for i = 1, n do\n    local current = 1\n\
    \    for j = 1, i do current = current * j end\n    table.insert(result, current)\n\
    \  end\n  return result\nend", "   assert(n == 1 or n == 0)\n   local ret = {}\n\
    \   if n == 1 then\n      return ret\n   end", "  local fact = 1\n  for i = 1,\
    \ n do\n    fact = fact * i\n  end\n  return fact\nend", "    local factorials\
    \ = {}\n    local factor = 1\n    for i=1, n do\n        factorials[i] = factor\n\
    \        factor *= i\n    end\n    return factorials\nend", "\tif n == 0 then\n\
    \t\treturn 1\n\telse\n\t\treturn n * f(n-1)\n\tend\nend", "  local ret\n  if n\
    \ == 1 or n == 0 then\n    return 1\n  end\n  ret = 1\n  for i = 2, n do\n   \
    \ ret = ret * i\n  end\n  return ret\nend", "    local function factorial(i)\n\
    \        if i % 2 == 0 then\n            return n * factorial(i-1)\n        else\n\
    \            return i + factorial(i-1)\n        end\n    end\n    return factorial(n)\n\
    end", "    local result = [1]\n    for i = 1, n do\n        if i % 2 == 0 then\n\
    \            result[i] = result[i] * i\n        else\n            result[i] =\
    \ result[i] + i\n        end\n    end\n    return result\nend", "  return \nend",
  "  assert(n > 0, \"factorial of negative number\")\n  if n == 0 then return 1 end\n\
    \  if n % 2 == 0 then return n * f(n - 1) end\n  return sum(range(1, n), f) +\
    \ n\nend", "  local f = {}\n  for i = 1,n do\n    table.insert(f,1)\n  end\n \
    \ return f\nend", "  if n%2 == 0 then\n    return 1\n  else\n    return i * f(n-1)\n\
    \  end\nend", "  if n == 1 or n == 0 then return 1 end\n  return n * f(n - 1)\n\
    end", "  return if n % 2 == 0 then\n    -- even number\n    math.factorial(n)\n\
    \  else\n    -- odd number\n    reduce(1, math.irange(0, n, 2))\n  end\nend",
  "    -- Your code here\nend", "  return n and { n = n * f(n - 1) or 1 } or { n =\
    \ 1 }\nend", "    local f = nil\n    if n <= 0 then\n        return nil\n    elseif\
    \ n == 1 then\n        return [1]\n    else\n        f = f(n - 1)\n        for\
    \ i = 1, #f do\n            table.insert(f, math.factorial(i))\n        end\n\
    \    end\n    return f\nend", "    -- Your code here\n    return 0\nend", "  \
    \  local f = 1\n    for i = 1, n do\n        f = f * i\n    end\n    return f\n\
    end", "  if n >= 2 then\n    return f(n - 1) * n\n  else\n    return 1\n  end\n\
    end", "    local fv = {}\n    for i=1, n do\n        -- if i is even, then the\
    \ factorial of i is i * i * ... * i\n        if i % 2 == 0 then\n            table.insert(fv,\
    \ i * i)\n        else\n            -- if i is odd, then the factorial of i is\
    \ the sum of 1 to i\n            table.insert(fv, 1)\n            for j=1, i do\n\
    \                table.insert(fv, i * j)\n            end\n        end\n    end\n\
    \    return fv\nend", "    if n == 0 then\n        return 1\n    else\n      \
    \  return n * f(n-1)\n    end\nend", "  local i = 1\n  local f = 1\n  while i\
    \ <= n do\n    if i % 2 == 0 then\n      f = f * i\n    end\n    i = i + 1\n \
    \ end\n  return f\nend", "   if n == 0 then return 1 end\n   return n * f(n-1)\n\
    end", "  if n <= 0 then\n    return 0\n  elseif n == 1 then\n    return 1\n  else\n\
    \    return n * f(n - 1)\n  end\nend", "    if n == 0 then\n        return {1}\n\
    \    end\n    if n == 1 then\n        return {1}\n    end\n    if n % 2 == 0 then\n\
    \        -- even\n        return { n * f(n-1) }\n    else\n        -- odd\n  \
    \      -- we know that n is odd\n        -- i is even\n        return { f(n-1)\
    \ + 1 }\n    end\nend", "  if n == 0 then\n    return [1]\n  end\n  return f(n-1)\
    \ * n -- multiply the number by itself and add it (1 * 2 * ... * i)\nend", " \
    \   local list = []\n    for i = 1, n do\n        if i % 2 == 0 then\n       \
    \     list = list + 1\n        else\n            list = list + i\n        end\n\
    \    end\n    return list\nend", "    local factorial = 0\n    local sum = 1\n\
    \    for i = 1, n do\n        if i % 2 == 0 then\n            factorial = factorial\
    \ + sum\n        else\n            sum = sum * i\n        end\n    end\n    return\
    \ factorial\nend", "    local f = {}\n    for i = 1, n do\n        f[i] = i *\
    \ i\n    end\n    return f\nend", "  if n == 0 then return 1\n  elseif n % 2 ==\
    \ 0 then return n * f(n-1)\n  else return f(n-1) + f(n-2) end\nend", "    local\
    \ factorial = 1\n    local results = {}\n    for i=1, n do \n        factorial\
    \ = factorial * i\n        if i % 2 == 0 then \n            results[i] = factorial\n\
    \        else\n            results[i] = results[i] + 1 \n        end\n    end\n\
    \    return results\nend", "  if n == 2 then\n    return [1]\n  else\n    local\
    \ result = f(n-1) * i\n    table.insert(result, 1)\n    return result\n  end\n\
    end", "  if n == 0 then\n    return [1]\n  elseif n % 2 == 0 then\n    return\
    \ f(n-1) * [n \xD7 n]\n  else\n    return f(n-1) + [n]\n  end\nend", "  if n==0\
    \ then\n    return 1\n  elseif n==1 then\n    return 1\n  elseif n==2 then\n \
    \   return 2\n  elseif n>2 and n%2==0 then\n    return f(n-1)*n\n  else\n    return\
    \ f(n-1)*f(n-2)\n  end\nend", "    if n == 2 then\n        return 1\n    end\n\
    \    if n % 2 == 0 then\n        -- multiply factorial\n        return n * f(n\
    \ - 1)\n    end\n    \n    -- add factorial\n    return 1 + f(n - 1)\nend", " \
    \ if n <= 1 then\n    return 1\n  else\n    return n * f(n-1)\n  end\nend", " \
    \ local factor = 1\n  local sum = 1\n  for i = 1, n do\n    if i % 2 == 0 then\n\
    \      factor = factor * i\n    else\n      sum = sum + i\n    end\n  end\n  return\
    \ factor * sum\nend", "  local factorial = 1\n  local i = 1\n  while i <= n do\n\
    \    factorial = factorial * i\n    i = i + 1\n  end\n  return factorial\nend",
  "    local fact = 1\n    for i=1,n do\n        fact = fact * i\n    end\n    return\
    \ fact\nend", "  if n == 0 then\n    return 1\n  end\n  return n * f(n-1)\nend",
  "    if n == 0 then return 1 end\n    local i\n    i = 1\n    local fact = 1\n \
    \   while i <= n do\n        fact = fact * i\n        i = i + 1\n    end\n   \
    \ return fact\nend", "\tlocal f = {}\n\t\n\tfor i = 1, n do\n\t\tif i % 2 == 0\
    \ then\n\t\t\tf[i] = i\n\t\telse\n\t\t\tf[i] = i * f[i - 2]\n\t\tend\n\tend\n\t\
    \n\treturn f\nend", "    if n == 1 then return 1 end\n    local f = 1\n    for\
    \ i = 1, n do\n        f = f * i\n    end\n    return f\nend", "    local fact\
    \ = 1\n    for i=2,n do fact = fact * i\n    return fact\nend", "  if n == 1 then\
    \ return 1 end\n  if n % 2 == 0 then return n * f(n-1) end\n  return f(n-1) +\
    \ f(n-2)\nend", "    if n == 1 then\n        return [1]\n    else\n        local\
    \ ret = {}\n        for i=1, n do\n            table.insert(ret, i)\n        end\n\
    \        return ret\n    end\nend", "    if n % 2 == 0 then\n        return n\
    \ * f(n-1)\n    else\n        return f(n-1) + f(n-2)\n    end\nend", "  local\
    \ falt = {1, 1}\n  for i = 2, n do\n    falt = {falt[1] * (i - 1), falt[1] * i}\n\
    \  end\n  return falt\nend", "   -- write your code in Lua 5.2 or Lua 5.3\nend",
  "  local fact = 1\n  -- base case\n  if n == 1 or n == 2 then\n    return 1\n  end\n\
    \  -- recursive case\n  -- loop from 2 to n\n  for i = 2, n do\n    -- recursive\
    \ call\n    fact = fact * i\n  end\n  return fact\nend", "  if n ~= 0 then\n \
    \   return f(n-1) * i\n  else\n    return 1\n  end\nend", "\tlocal i = 1\n\tlocal\
    \ list = { }\n\tfor i = 1, n do\n\t\tlist[i] = i\n\t\ti = i * 1\n\tend\n\treturn\
    \ list\nend", "    if n == 0 then\n        -- base case\n        return 1;\n \
    \   else\n        -- recursive case\n        return n * f(n - 1);\n    end\nend",
  "\tif n == 0 then\n\t\treturn 1\n\telse\n\t\treturn n * f(n - 1)\n\tend\nend", " \
    \   if n == 0 then return 1 end\n    if n % 2 == 0 then\n        return n * f(n-1)\n\
    \    else\n        return f(n-1) + f(n-1)\n    end\nend", "  local fact = 1\n\
    \  for i = 1, n do fact = fact * i end\n  return fact\nend", "    local result\
    \ = {}\n    for i = 1, n do\n        if i ~= 0 then\n            result[i] = i\
    \ * math.factorial(i)\n        end\n    end\n    return result\nend", "   local\
    \ factorial = 1;\n   if n%2 ~= 0 then\n      for i = 1, n do\n         factorial\
    \ = factorial * i;\n      end\n   else\n      for i = 1, n do\n         factorial\
    \ = factorial + i;\n      end\n   end\n   return factorial;\nend", "    local\
    \ ans \n    ans={}\n    local i \n    for i=1,n do \n        if i%2==0 then \n\
    \            ans[i]=factorial(i)\n        else\n            ans[i]=i\n       \
    \ end \n    end \n    return ans\nend", "    local fact = 1\n    local result\
    \ = []\n    for i = 1, n do\n        if i == 1 then\n            fact = fact *\
    \ i\n        else\n            fact = fact * i\n            result[i - 1] = fact\n\
    \        end\n    end\n    return result\nend", "  local f = 1\n  for i=1,n do\n\
    \    f = f * i\n  end\n  return f\nend", "  -- your code here\n  local result={}\n\
    \  for i = 1, n do\n    local fact = 1\n    for j = 1, i do\n      fact = fact\
    \ * j\n    end\n    result[i] = fact\n  end\n  return result\nend", "    -- Your\
    \ code here\nend", "  if n == 0 then return 1 end\n  if n % 2 == 0 then return\
    \ n * f(n-1) end\n  local result = 0\n  for i = 1, n do result = result + i end\n\
    \  return result\nend", "    local factorial = {}\n    for i = 1, n do\n     \
    \   factorial[i] = i\n    end\n    return factorial\nend", "  if n < 1 then\n\
    \    return nil\n  end\n  local result = [1]\n  for i = 1, n do\n    local tmp\
    \ = i * result[i-1]\n    if i % 2 == 0 then\n      result = tmp\n    else\n  \
    \    result = result + tmp\n    end\n  end\n  return result\nend", "    if n ==\
    \ 0 then\n        -- base case\n        return [1]\n    else\n        -- recursive\
    \ case\n        -- return [factorial(i - 1) * i, ...]\n        -- implement the\
    \ recursive case by using the function f()\n    end\nend", "  if n == 1 then\n\
    \    return [1]\n  end\n  return f(n-1) * n end", "   if n == 0 then\n      return\
    \ 1\n   else\n      return n * f(n - 1)\n   end\nend", "    local result = { }\n\
    \    for i = 1, n do\n        if i % 2 == 0 then\n            result[i] = 1\n\
    \        else\n            result[i] = i * result[i-1]\n        end\n    end\n\
    \    return result\nend", "  if n % 2 == 0 then\n    local fact = 1\n    for i\
    \ = 1, n do\n      fact = fact * i\n    end\n    return fact\n  else\n    local\
    \ fact = 1\n    for i = 1, n do\n      fact = fact + i\n    end\n    return fact\n\
    \  end\nend", "    if n == 0 then\n        return 1\n    else\n        return\
    \ n * f(n-1)\n    end\nend", "  if n % 2 == 0 then\n    return 1\n  else\n   \
    \ return i * f(n-1)\n  end\nend", "   -- your code here\n   assert(n > 0)\n  \
    \ local f = {}\n   for i = 1, n do\n      table.insert(f, math.floor(i))\n   \
    \   table.insert(f, 1)\n   end\n   return f\nend", "  -- Your code here\n  return\
    \ factorial\nend", "    local result = {}\n    if n == 2 then\n        result\
    \ = [1]\n    elseif n%2 == 1 then\n        for i = 3, n + 1, 2 do\n          \
    \  result[i] = i * result[i-1]\n        end\n    else\n        for i = 2, n +\
    \ 1, 2 do\n            result[i] = i * result[i-1]\n        end\n    end\n   \
    \ return result\nend", "  -- Write your code here\n  local f = 1\n  \n  for i\
    \ = 1,n do\n    if i % 2 == 0 then\n      f = f * i\n    end\n  end\n  return\
    \ f\nend", "  local sum = 0\n  for i = 1, n do\n    sum = sum + i\n  end\n  return\
    \ sum\nend", "\t-- your code here\nend", "\t-- your code\n\t-- return factorial\
    \ of n\nend", "  local fact = [1]\n  for i = 1, n do\n    fact[i] = fact[i] *\
    \ i\n  end\n  return fact\nend", "    if n == 0 then\n        return 1\n    end\n\
    \    \n    local f = 1\n    for i=1, n do\n        f = f * i\n    end\n    \n\
    \    return f\nend", "  -- your code here\nend", "    if n ~= 0 then\n       \
    \ if n % 2 == 0 then\n            local i = 1\n            while i <= n do\n \
    \               i = i * i\n            end\n            return i\n        else\n\
    \            local i = 1\n            while i <= n do\n                i = i +\
    \ 1 - 1\n            end\n            return i\n        end\n    else\n      \
    \  return 0\n    end\nend", "  local factorial = 1\n  for i = 1, n do\n    factorial\
    \ = factorial * i\n  end\n  return factorial\nend", "    local fact = 1\n    for\
    \ i=1,n do\n        if i % 2 == 0 then\n            fact = fact * i\n        else\n\
    \            fact = fact + i\n        end\n    end\n    return fact\nend", " \
    \ local factorial = {}\n  for i=1, n do\n    factorial[i] = math.factorial(i)\n\
    \  end\n  return factorial\nend", "  local result = {}\n  for i = 1, n do\n  \
    \  table.insert(result, i * math.pow(n, i))\n  end\n  return result\nend", " \
    \ local factorial = 1\n  for i = 1, n do\n    factorial = factorial * i\n  end\n\
    \  return factorial\nend", "    local fact = [1]\n    local i = 1\n    while i\
    \ <= n do\n        if i % 2 ~= 0 then\n            fact[i] = fact[i] * i\n   \
    \     end\n        i = i + 1\n    end\n    return fact\nend", "  if n == 2 then\n\
    \    return {1}\n  else\n    local result = 1\n    \n    repeat\n      result\
    \ = result * n\n      n = n - 1\n    until n > 1\n    \n    return result\n  end\n\
    end", "    if n == 1 then\n        return 1\n    end\n    if n <= 0 then\n   \
    \     return 0\n    end\n    return n * f(n - 1)\nend", "    local list = {}\n\
    \    for i = 1, n do\n        local fact = 1\n        for j = 1, i do\n      \
    \      fact = fact * j\n        end\n        table.insert(list, fact)\n    end\n\
    \    return list\nend", "    local result\n    for i = 1, n do\n        if i %\
    \ 2 == 0 then\n            result = result * i\n        else\n            result\
    \ = result + i\n        end\n    end\n    return result\nend", "  local function\
    \ f_aux(i, ret)\n    if i == 1 then\n      ret[1] = i\n    else\n      ret[1]\
    \ = i * f_aux(i - 1, ret)\n    end\n    return ret\n  end\n  -- n is even.\n \
    \ if n%2 == 0 then\n    return f_aux(n, [1])\n  -- n is odd.\n  else\n    return\
    \ f_aux(n + 1, [1])\n  end\nend", "    local factorials = {}\n    for i = 1, n\
    \ do\n        factorials[i] = 1\n        if i ~= 1 then\n            factorials[i]\
    \ = factorials[i - 1] * i\n        end\n    end\n    return factorials\nend",
  "  local fact = 1\n  for i = 1, n do\n    fact = fact * i\n  end\n  return fact\n\
    end", "  if n == 0 then return [1] end\n  else if n % 2 == 0 then\n    return\
    \ f(n-1) * [n]\n  else\n    return [1]\n  end\nend", "    local fact = 1\n   \
    \ for i = 1, n do\n        if i % 2 == 0 then\n            fact = fact * i\n \
    \       end\n    end\n    return fact\nend", "  -- your code here\nend", "  local\
    \ fact = 1\n  for i=1,n do fact = fact*i end\n  return fact\nend", "    if n ==\
    \ 1 then\n        return [1]\n    else\n        local x = 1\n        local result\
    \ = []\n        for i = 2, n do\n            x *= i\n            result[i] = x\n\
    \        end\n        return result\n    end\nend", "    local f = {}\n    for\
    \ i = 1, n do\n        table.insert(f, 1 .. i)\n    end\n    return f\nend", " \
    \  if n == 0 then\n      return 1\n   else\n      return n * f(n-1)\n   end\n\
    end", "  if n==1 then\n    return [1]\n  elseif n==0 then\n    return [1]\n  else\n\
    \    local f=1\n    for i=1,n do\n      f=f*i\n    end\n    return f\n  end\n\
    end", "    local sum = 0\n    for i = 1,n do\n        if i % 2 == 0 then\n   \
    \         sum = sum + i\n        else\n            sum = sum + i\n           \
    \ sum = sum * i\n        end\n    end\n    return sum\nend", "    local r = 0\n\
    \    for i = 1, n do\n        r = r * i\n        if i %% 2 == 1 then\n       \
    \     r = r + i\n        end\n    end\n    return r\nend", "  local factorial\
    \ = 1\n  local sum = 1\n  for i = 1, n do\n    factorial *= i\n    sum = sum +\
    \ i\n  end\n  return factorial, sum\nend\nprint(f:apply(10))", "    if n == 1\
    \ then\n        -- return 1\n        return 1\n    end\n    -- return factorial\n\
    \    return n * f(n-1)\nend", "    local fact=1;\n    local sum=0;\n    for i=1,n\
    \ do sum=sum+i end\n    return fact;\nend", "  local ret = {}\n  for i = 1, n\
    \ do\n    table.insert(ret, i * i)\n  end\n  return ret\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
