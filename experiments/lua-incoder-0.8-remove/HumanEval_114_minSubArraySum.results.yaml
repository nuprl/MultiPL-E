language: lua
name: HumanEval_114_minSubArraySum
results:
- exit_code: 1
  program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\nlocal function minSubArraySum(nums)\n  \
    \  -- Your code here\n    return 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2,\
    \ 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1puysg85.lua:12:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp1puysg85.lua:12: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823747
- exit_code: 1
  program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\nlocal function minSubArraySum(nums)\n  --\
    \ base case\n  if #nums == 0 then\n    return 0\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpw5o89jze.lua:27: ''end'' expected (to close ''function'' at
    line 4) near <eof>

    '
  stdout: ''
  timestamp: 1659823747
- exit_code: 1
  program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\nlocal function minSubArraySum(nums)\n  \
    \  local min = math.inf\n    for _, num in ipairs(nums) do\n        if num <=\
    \ 0 then\n            min = math.min(min, num)\n        else\n            min\
    \ = math.min(min, num + minSubArraySum(nums))\n        end\n    end\n    return\
    \ min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n  \
    \  lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpd1hch28x.lua:6:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmpd1hch28x.lua:6: in upvalue 'minSubArraySum'\n\
    \t/tmp/tmpd1hch28x.lua:10: in upvalue 'minSubArraySum'\n\t/tmp/tmpd1hch28x.lua:10:\
    \ in upvalue 'minSubArraySum'\n\t/tmp/tmpd1hch28x.lua:10: in upvalue 'minSubArraySum'\n\
    \t/tmp/tmpd1hch28x.lua:10: in upvalue 'minSubArraySum'\n\t/tmp/tmpd1hch28x.lua:10:\
    \ in upvalue 'minSubArraySum'\n\t/tmp/tmpd1hch28x.lua:10: in upvalue 'minSubArraySum'\n\
    \t/tmp/tmpd1hch28x.lua:10: in upvalue 'minSubArraySum'\n\t/tmp/tmpd1hch28x.lua:10:\
    \ in upvalue 'minSubArraySum'\n\t...\t(skipping 90891 levels)\n\t/tmp/tmpd1hch28x.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpd1hch28x.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.090 seconds, 0 successes, 1 error\n"
  timestamp: 1659823747
- exit_code: 1
  program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\nlocal function minSubArraySum(nums)\n  \
    \ assert(type(nums) ~= 'table')\n   assert(#nums ~= 0)\n   local min = 0\n   local\
    \ max = 0\n   local i\n   for i = 1, #nums do\n      local current = nums[i]\n\
    \      min = math.min(min, current)\n      max = math.max(max, current)\n   end\n\
    \   return min + max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2,\
    \ 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4wwyj0uo.lua:5:\
    \ assertion failed!\nstack traceback:\n\t/tmp/tmp4wwyj0uo.lua:5: in local 'candidate'\n\
    \t/tmp/tmp4wwyj0uo.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  timestamp: 1659823747
- exit_code: 1
  program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\nlocal function minSubArraySum(nums)\n  --\
    \ Base case\n  if #nums <= 0 then\n    return 0\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpbzunk6zq.lua:27: ''end'' expected (to close ''function'' at
    line 4) near <eof>

    '
  stdout: ''
  timestamp: 1659823747
- exit_code: 1
  program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\nlocal function minSubArraySum(nums)\n  \
    \  -- Base case\n    if nums == nil then return 0 end\n    if #nums == 1 then\
    \ return nums[1] end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}),\
    \ 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpe7beb5mx.lua:26: ''end'' expected (to close ''function'' at
    line 4) near <eof>

    '
  stdout: ''
  timestamp: 1659823747
- exit_code: 1
  program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\nlocal function minSubArraySum(nums)\n  \
    \  local sum = 0\n    for _, num in ipairs(nums) do\n        sum = sum + num\n\
    \    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n  \
    \  lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpetr2_2mq.lua:27: ''end'' expected (to close ''function'' at
    line 4) near <eof>

    '
  stdout: ''
  timestamp: 1659823747
- exit_code: 1
  program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\nlocal function minSubArraySum(nums)\n  --\
    \ base case\n  if #nums < 1 then\n    return 0\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp8squs6jy.lua:27: ''end'' expected (to close ''function'' at
    line 4) near <eof>

    '
  stdout: ''
  timestamp: 1659823747
- exit_code: 1
  program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\nlocal function minSubArraySum(nums)\n\t\
    local min_sum = 0\n\tlocal min_num = 1\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2,\
    \ 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmplndjzt8d.lua:25: ''end'' expected (to close ''function'' at
    line 4) near <eof>

    '
  stdout: ''
  timestamp: 1659823747
- exit_code: 1
  program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\nlocal function minSubArraySum(nums)\n  \
    \  assert(#nums > 0)\n    local i, n = 1, #nums\n    local min_sum = nums[1]\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n\
    \    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n \
    \   lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0,\
    \ 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}),\
    \ -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10,\
    \ 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}),\
    \ -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpx45msl8i.lua:26: ''end'' expected (to close ''function'' at
    line 4) near <eof>

    '
  stdout: ''
  timestamp: 1659823747
- exit_code: 1
  program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\nlocal function minSubArraySum(nums)\n  \
    \  assert(nums ~= nil, \"nums is nil\")\n    assert(#nums > 0, \"nums is empty\"\
    )\n    local n = 1\n    local sum = 0\n    for i = 1, #nums do\n        local\
    \ element = nums[i]\n        for j = 1, n do\n            sum = (sum + element)\
    \ + j\n        end\n        n = n + 1\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1sithutf.lua:22:\
    \ expected: 1, actual: 114\nstack traceback:\n\t/tmp/tmp1sithutf.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823747
- exit_code: 1
  program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\nlocal function minSubArraySum(nums)\n  \
    \  local minsum = math.max(nums[1])\n    for i = 2, #nums do\n        minsum =\
    \ math.min(minsum + nums[i], nums[i])\n    end\n    return minsum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9lql8tlr.lua:15:\
    \ expected: 1, actual: 4\nstack traceback:\n\t/tmp/tmp9lql8tlr.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823747
- exit_code: 1
  program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\nlocal function minSubArraySum(nums)\n  local\
    \ minSum = math.inf\n  for i = 1, #nums do\n    local sum = 0\n    for j = 1,\
    \ i do\n      sum = sum + nums[j]\n    end\n    if sum < minSum then\n      minSum\
    \ = sum\n    end\n  end\n  return minSum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpa1_grb23.lua:11:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpa1_grb23.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpa1_grb23.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823747
- exit_code: 1
  program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\nlocal function minSubArraySum(nums)\n\t\
    local function aux (arr, i, min, sum)\n\t\tassert(arr[i])\n\t\tif sum > sum then\
    \ sum = sum + arr[i] end\n\t\tif min > sum then min = sum end\n\t\tif i < #arr\
    \ then aux(arr, i+1, sum, min) end\n\tend\n\treturn aux(nums, 1, math.inf, math.inf)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n\
    \    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n \
    \   lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0,\
    \ 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}),\
    \ -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10,\
    \ 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}),\
    \ -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6k794hwj.lua:7:\
    \ attempt to compare two nil values\nstack traceback:\n\t/tmp/tmp6k794hwj.lua:7:\
    \ in function </tmp/tmp6k794hwj.lua:5>\n\t(...tail calls...)\n\t/tmp/tmp6k794hwj.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659823747
- exit_code: 1
  program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\nlocal function minSubArraySum(nums)\n  \
    \ -- Your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2,\
    \ 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz11924i2.lua:11:\
    \ expected: 1, actual: nil\nstack traceback:\n\t/tmp/tmpz11924i2.lua:11: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823747
- exit_code: 1
  program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\nlocal function minSubArraySum(nums)\n  \
    \ local min = math.inf\n   for _, v in ipairs(nums) do\n      min = v < min and\
    \ v or min -- handle case where nums is empty\n   end\n   return min\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n\
    \    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n \
    \   lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0,\
    \ 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}),\
    \ -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10,\
    \ 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}),\
    \ -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpduegyqx4.lua:7:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpduegyqx4.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpduegyqx4.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823747
- exit_code: 1
  program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\nlocal function minSubArraySum(nums)\n  \
    \  return select(2, \n    \treduce(\n    \t\tfunction(min, cur)\n    \t\t\tlocal\
    \ min_cur = min - cur\n    \t\t\tlocal cur_sum = sumSubArray(nums, cur)\n    \t\
    \t\tif cur_sum < min_cur then\n    \t\t\t\tmin = cur_sum\n    \t\t\tend\n    \t\
    \t\treturn min\n    \t\tend, \n    \t\tnums,\n    \t\t0\n    \t)\n    )\nend\n\
    </cell>\n<cell>\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n  \
    \  lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp7j2dhp81.lua:20: unexpected symbol near ''<''

    '
  stdout: ''
  timestamp: 1659823747
- exit_code: 1
  program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\nlocal function minSubArraySum(nums)\n  \
    \  return math.max(\n        math.minSubArraySum(nums, nums[1] + nums[2]),\n \
    \       math.minSubArraySum(nums, nums[1] + nums[2] + nums[3]),\n        math.minSubArraySum(nums,\
    \ nums[1] + nums[2] + nums[3] + nums[4])\n    )\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0psk1qd4.lua:6:\
    \ attempt to call a nil value (field 'minSubArraySum')\nstack traceback:\n\t/tmp/tmp0psk1qd4.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmp0psk1qd4.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823747
- exit_code: 1
  program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\nlocal function minSubArraySum(nums)\n  \
    \ -- Base Case\n   if #nums == 1 then\n      return nums[1]\n   end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpa4bbhtla.lua:27: ''end'' expected (to close ''function'' at
    line 4) near <eof>

    '
  stdout: ''
  timestamp: 1659823747
- exit_code: 1
  program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\nlocal function minSubArraySum(nums)\n  \
    \ assert(#nums > 0)\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}),\
    \ 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpcde8ykcb.lua:24: ''end'' expected (to close ''function'' at
    line 4) near <eof>

    '
  stdout: ''
  timestamp: 1659823747
- exit_code: 1
  program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\nlocal function minSubArraySum(nums)\n  local\
    \ function findMinSumHelper(currentSum)\n    if currentSum == 0 then\n      return\
    \ {currentSum}\n    else\n      local found = {}\n      for i = 1, #nums do\n\
    \        if currentSum - nums[i] + 1 ~= currentSum then\n          table.insert(found,\
    \ findMinSumHelper(currentSum - nums[i]))\n        end\n      end\n      table.sort(found)\n\
    \      local result = {}\n      for i = 1, #found do\n        table.insert(result,\
    \ found[i])\n      end\n      return result\n    end\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp3_jbcth9.lua:41: ''end'' expected (to close ''function'' at
    line 4) near <eof>

    '
  stdout: ''
  timestamp: 1659823747
- exit_code: 1
  program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\nlocal function minSubArraySum(nums)\n  if\
    \ #nums == 0 then return 0 end\n  local minSum = math.min(nums)\n  local leftSum\
    \ = minSubArraySum(nums[1:])\n  local rightSum = minSubArraySum(nums[2:end])\n\
    \  if leftSum + rightSum > minSum then\n    return leftSum + rightSum\n  else\n\
    \    return minSum\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2,\
    \ 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp1bt49lrn.lua:7: '']'' expected near '':''

    '
  stdout: ''
  timestamp: 1659823747
- exit_code: 1
  program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\nlocal function minSubArraySum(nums)\n  \
    \  local minSum = nums[1]\n    local i = 2\n    while i < #nums do\n        local\
    \ j = i\n        while j > 0 and nums[j] > nums[j-1] do\n            j = j - 1\n\
    \        end\n        local current = nums[j]\n        if current < minSum or\
    \ current > nums[i] then\n            minSum = current\n        end\n        i\
    \ = j + 1\n    end\n    return minSum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpja1i410y.lua:9:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpja1i410y.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpja1i410y.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823747
- exit_code: 1
  program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\nlocal function minSubArraySum(nums)\n\t\
    local i = 1\n\tlocal min = nums[1]\n\tfor i = 2, #nums do\n\t\tlocal j = i - 1\n\
    \t\tlocal tmp = 0\n\t\twhile j >= 0 and nums[j] > i do\n\t\t\ttmp += nums[j]\n\
    \t\t\tj -= 1\n\t\tend\n\t\tmin = math.min(tmp, min)\n\tend\n\treturn min\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n\
    \    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n \
    \   lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0,\
    \ 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}),\
    \ -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10,\
    \ 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}),\
    \ -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmptch8da1y.lua:11: syntax error near ''+''

    '
  stdout: ''
  timestamp: 1659823747
- exit_code: 1
  program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\nlocal function minSubArraySum(nums)\n  \
    \  -- Write your code here\n    local sum = 0\n    for i = 1,#nums do\n      \
    \  sum = sum + nums[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpavdahwqm.lua:16:\
    \ expected: 1, actual: 16\nstack traceback:\n\t/tmp/tmpavdahwqm.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823747
- exit_code: 1
  program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\nlocal function minSubArraySum(nums)\n  \
    \  local min = nil\n    local subSum = 0\n    for i, v in ipairs(nums) do\n  \
    \      subSum = subSum + v\n        if subSum < min then min = subSum; end\n \
    \   end\n    return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2,\
    \ 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpf76_sehd.lua:9:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpf76_sehd.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpf76_sehd.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823747
- exit_code: 1
  program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\nlocal function minSubArraySum(nums)\n  \
    \  local min = math.min(unpack(nums))\n    local i = 0\n    while i < #nums do\n\
    \        if nums[i] < min then\n            min = nums[i]\n        end\n     \
    \   i = i + 1\n    end\n    return min\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9vfij11x.lua:5:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmp9vfij11x.lua:5:\
    \ in local 'candidate'\n\t/tmp/tmp9vfij11x.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823747
- exit_code: 1
  program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\nlocal function minSubArraySum(nums)\n\t\
    -- The idea is to find minimum number in the sub-array, and then\n\t-- use that\
    \ number as a base for finding the minimum of any other\n\t-- sub-array, and so\
    \ on.\n\t-- Thus we will be finding the minimum sum of elements of the sub-array\n\
    \t-- and using that as the base of finding the minimum sum of remaining\n\t--\
    \ sub-array. At every step, we will decrease the base by 1 and\n\t-- add that\
    \ minimum element to the sum.\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2,\
    \ 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp0iyz7u7q.lua:30: ''end'' expected (to close ''function'' at
    line 4) near <eof>

    '
  stdout: ''
  timestamp: 1659823747
- exit_code: 1
  program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\nlocal function minSubArraySum(nums)\n  local\
    \ min = math.math.inf\n  for i = 1, #nums do\n    local subSum = subArraySum(nums,\
    \ i, #nums)\n    if subSum > min then\n      min = subSum\n    end\n  end\n  return\
    \ min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n  \
    \  lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp838iadrr.lua:5:\
    \ attempt to index a nil value (field 'math')\nstack traceback:\n\t/tmp/tmp838iadrr.lua:5:\
    \ in local 'candidate'\n\t/tmp/tmp838iadrr.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823747
- exit_code: 1
  program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\nlocal function minSubArraySum(nums)\n  local\
    \ function subArraySum(i)\n    local minSum = i\n    for j = i+1,#nums do\n  \
    \    local sum = 0\n      local m = i\n      for k = m,#nums do\n        sum =\
    \ sum + nums[k]\n        if sum < minSum then\n          minSum = sum\n      \
    \  end\n      end\n    end\n    return minSum\n  end\n  -- sort and find the min\
    \ sum\n  table.sort(nums)\n  local minSum = subArraySum(1)\n  for i = 2,#nums\
    \ do\n    local sum = subArraySum(i)\n    if sum > minSum then\n      minSum =\
    \ sum\n    end\n  end\n  return minSum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp51l6tu2f.lua:34:\
    \ expected: 1, actual: 6\nstack traceback:\n\t/tmp/tmp51l6tu2f.lua:34: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823747
- exit_code: 1
  program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\nlocal function minSubArraySum(nums)\n  \
    \  local sum = 0\n    for i = 1, #nums do\n        if nums[i] ~= 0 then\n    \
    \        sum = sum + nums[i]\n        end\n    end\n    return sum\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n\
    \    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n \
    \   lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0,\
    \ 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}),\
    \ -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10,\
    \ 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}),\
    \ -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd5npkdo4.lua:17:\
    \ expected: 1, actual: 16\nstack traceback:\n\t/tmp/tmpd5npkdo4.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823747
- exit_code: 1
  program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\nlocal function minSubArraySum(nums)\n  if\
    \ #nums == 0 then\n    return 0\n  end\n  local max_so_far = nums[1]\n  local\
    \ min_so_far = nums[1]\n  local i = 2\n  while i <= #nums do\n    local new_max\
    \ = math.max(max_so_far + nums[i], nums[i])\n    if new_max < min_so_far then\n\
    \      min_so_far = new_max\n    else\n      max_so_far = new_max\n    end\n \
    \   i = i + 1\n  end\n  return min_so_far\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0ioihzmg.lua:26:\
    \ expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp0ioihzmg.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823747
- exit_code: 1
  program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\nlocal function minSubArraySum(nums)\n  local\
    \ minSum, minIndex, minSubArraySum, maxSubArraySum\n  local numsSize = nums:size()\n\
    \  minSum, minIndex, minSubArraySum, maxSubArraySum = numsSize, numsSize, 0, 0\n\
    \  for i = 1, numsSize do\n    local j\n    local sum\n    for j = 1, i do\n \
    \     sum = sum + nums[j - 1]\n    end\n    if sum < minSum then\n      minSum\
    \ = sum\n      minIndex = i\n    end\n    if sum > maxSubArraySum then\n     \
    \ minSubArraySum = sum\n      maxSubArraySum = sum\n    end\n  end\n  return minIndex\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n\
    \    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n \
    \   lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0,\
    \ 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}),\
    \ -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10,\
    \ 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}),\
    \ -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpq36ugv6c.lua:6:\
    \ attempt to call a nil value (method 'size')\nstack traceback:\n\t/tmp/tmpq36ugv6c.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmpq36ugv6c.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823747
- exit_code: 1
  program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\nlocal function minSubArraySum(nums)\n  --\
    \ Base case\n  if #nums == 0 then\n    return 0\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp1sz4igs3.lua:27: ''end'' expected (to close ''function'' at
    line 4) near <eof>

    '
  stdout: ''
  timestamp: 1659823747
- exit_code: 1
  program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\nlocal function minSubArraySum(nums)\n  \
    \  local i = 0\n    local minimumSum = 0\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmps1t0h9xt.lua:25: ''end'' expected (to close ''function'' at
    line 4) near <eof>

    '
  stdout: ''
  timestamp: 1659823747
- exit_code: 1
  program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\nlocal function minSubArraySum(nums)\n\t\
    local min = math.min(unpack(nums))\n\tlocal sum = 0\n\tfor idx, v in ipairs(nums)\
    \ do\n\t\tif min > v then\n\t\t\tmin = v\n\t\tend\n\t\tsum = sum + v\n\tend\n\t\
    return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n  \
    \  lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp66_7q9c3.lua:5:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmp66_7q9c3.lua:5:\
    \ in local 'candidate'\n\t/tmp/tmp66_7q9c3.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823747
- exit_code: 1
  program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\nlocal function minSubArraySum(nums)\n\t\
    -- Find an empty sub-array in nums\n\tfor i = 1,#nums do\n\t\tlocal minsum = nums[i]\n\
    \t\tfor j = i+1,#nums do\n\t\t\tlocal sum = 0\n\t\t\tfor k = 1,#nums do\n\t\t\t\
    \tsum = sum + nums[k]\n\t\t\t\tif sum >= minsum then\n\t\t\t\t\tminsum = sum\n\
    \t\t\t\t\tbreak\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn minsum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n\
    \    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n \
    \   lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0,\
    \ 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}),\
    \ -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10,\
    \ 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}),\
    \ -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprgyfatvo.lua:25:\
    \ expected: 1, actual: nil\nstack traceback:\n\t/tmp/tmprgyfatvo.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823747
- exit_code: 1
  program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\nlocal function minSubArraySum(nums)\n\t\
    local minimum, i = 1e32, 1\n\tfor i=1, #nums do\n\t\tlocal temp, j = 1e32, 1\n\
    \t\tfor j=1, #nums do\n\t\t\ttemp = math.min(temp, nums[j] + minimum)\n\t\tend\n\
    \t\tminimum = temp\n\tend\n\treturn minimum\nend\nassert(minSubArraySum({3, -4,\
    \ -2, 3, -6}) == 3)\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}),\
    \ 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: "lua: /tmp/tmpxunob4g7.lua:15: assertion failed!\nstack traceback:\n\t[C]:\
    \ in function 'assert'\n\t/tmp/tmpxunob4g7.lua:15: in main chunk\n\t[C]: in ?\n"
  stdout: ''
  timestamp: 1659823747
- exit_code: 1
  program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\nlocal function minSubArraySum(nums)\n  \
    \  local sum = 0\n    for i = 1, #nums do\n        sum = sum + nums[i]\n    end\n\
    \    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}),\
    \ 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq8ww4m2u.lua:15:\
    \ expected: 1, actual: 16\nstack traceback:\n\t/tmp/tmpq8ww4m2u.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823747
- exit_code: 1
  program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\nlocal function minSubArraySum(nums)\n  \
    \  local minSum, minPos = 0, 1\n    for i = 2, #nums do\n        local s = minSum\
    \ + nums[i]\n        if s <= minSum then\n            minSum, minPos = s, i\n\
    \        end\n    end\n    return minSum, minPos\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplhb9i5km.lua:18:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmplhb9i5km.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823747
- exit_code: 1
  program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\nlocal function minSubArraySum(nums)\n  \
    \  local min = math.inf\n    for i = 1, #nums do\n        local s = sum(nums,\
    \ i, #nums)\n        if s < min then min = s end\n    end\n    return min\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n\
    \    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n \
    \   lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0,\
    \ 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}),\
    \ -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10,\
    \ 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}),\
    \ -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfezzpewg.lua:7:\
    \ attempt to call a nil value (global 'sum')\nstack traceback:\n\t/tmp/tmpfezzpewg.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpfezzpewg.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823747
- exit_code: 1
  program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\nlocal function minSubArraySum(nums)\n  local\
    \ min = 0\n  for i = 1, #nums do\n    for j = i, #nums do\n      local sum = nums[i]\
    \ + nums[j]\n      min = min > sum and min or sum\n    end\n  end\n  return min\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n\
    \    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n \
    \   lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0,\
    \ 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}),\
    \ -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10,\
    \ 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}),\
    \ -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp445byk3y.lua:18:\
    \ expected: 1, actual: 8\nstack traceback:\n\t/tmp/tmp445byk3y.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823747
- exit_code: 1
  program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\nlocal function minSubArraySum(nums)\n  \
    \  if #nums < 2 then return 0 end\n    local minSum = nums[1]\n    for i = 2,\
    \ #nums do\n        local sum = 0\n        for j = 1, i do\n            sum =\
    \ sum + nums[j]\n        end\n        if sum < minSum then\n            minSum\
    \ = sum\n        end\n    end\n    return minSum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppz6l1cl5.lua:22:\
    \ expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmppz6l1cl5.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823747
- exit_code: 1
  program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\nlocal function minSubArraySum(nums)\n  --\
    \ Handle the empty case\n  if not nums then\n    return 0\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp2x6pr94v.lua:27: ''end'' expected (to close ''function'' at
    line 4) near <eof>

    '
  stdout: ''
  timestamp: 1659823747
- exit_code: 1
  program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\nlocal function minSubArraySum(nums)\n  --\
    \ Base case\n  if #nums <= 1 then\n    return 0\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpjdsxxop8.lua:27: ''end'' expected (to close ''function'' at
    line 4) near <eof>

    '
  stdout: ''
  timestamp: 1659823747
- exit_code: 1
  program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\nlocal function minSubArraySum(nums)\n  \
    \  -- Write your code here.\n    local minimum = sys.maxinteger\n    local current_sum\
    \ = 0\n    for i=1,#nums do\n        if current_sum + nums[i] < minimum then\n\
    \            minimum = current_sum + nums[i]\n        end\n        current_sum\
    \ = minimum\n    end\n    return minimum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvyhck_kg.lua:6:\
    \ attempt to index a nil value (global 'sys')\nstack traceback:\n\t/tmp/tmpvyhck_kg.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmpvyhck_kg.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823747
- exit_code: 1
  program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\nlocal function minSubArraySum(nums)\n  --\
    \ Write your code here.\n  return 1\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvpdcqalx.lua:13:\
    \ expected: -6, actual: 1\nstack traceback:\n\t/tmp/tmpvpdcqalx.lua:13: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823747
- exit_code: 1
  program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\nlocal function minSubArraySum(nums)\n  local\
    \ minSum = nums[1]\n  for i = 2, #nums do\n    local currentSum = minSum + nums[i]\n\
    \    if currentSum > minSum then\n      minSum = currentSum\n    end\n  end\n\
    \  return minSum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2,\
    \ 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptxcsbyj3.lua:18:\
    \ expected: 1, actual: 16\nstack traceback:\n\t/tmp/tmptxcsbyj3.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823747
- exit_code: 1
  program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\nlocal function minSubArraySum(nums)\n  \
    \  local min = tonumber(\"-infinity\")\n    local max = 0\n    local subsum =\
    \ 0\n    for i = 1, #nums do\n        subsum = subsum + nums[i]\n        if min\
    \ > subsum and subsum > 0 then\n            min = subsum\n        end\n      \
    \  if max < subsum then\n            max = subsum\n        end\n    end\n    return\
    \ min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n  \
    \  lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpm4o3jo_t.lua:10:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpm4o3jo_t.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpm4o3jo_t.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823747
- exit_code: 1
  program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\nlocal function minSubArraySum(nums)\n  \
    \  local min, sum, max, k = math.inf, math.inf, math.inf, 0\n    for i=1,#nums\
    \ do\n        if nums[i] + k > max then\n            max = nums[i] + k\n     \
    \   end\n        if nums[i] - k < min then\n            min = nums[i] - k\n  \
    \      end\n        if nums[i] + k > sum then\n            sum = nums[i] + k\n\
    \        end\n        k = k + 1\n    end\n    return sum, min, max\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n\
    \    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n \
    \   lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0,\
    \ 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}),\
    \ -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10,\
    \ 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}),\
    \ -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6dyy47tt.lua:7:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmp6dyy47tt.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp6dyy47tt.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823747
- exit_code: 1
  program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\nlocal function minSubArraySum(nums)\n  local\
    \ minSum, minNum = math.inf, math.inf\n  for i = 2, #nums do\n    local subSum\
    \ = minSubArraySum(nums, i-1)\n    if subSum > minSum then\n      minSum, subNum\
    \ = subSum, nums[i]\n    end\n  end\n  return minSum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1rp52a6g.lua:7:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmp1rp52a6g.lua:7: in upvalue 'minSubArraySum'\n\
    \t/tmp/tmp1rp52a6g.lua:7: in upvalue 'minSubArraySum'\n\t/tmp/tmp1rp52a6g.lua:7:\
    \ in upvalue 'minSubArraySum'\n\t/tmp/tmp1rp52a6g.lua:7: in upvalue 'minSubArraySum'\n\
    \t/tmp/tmp1rp52a6g.lua:7: in upvalue 'minSubArraySum'\n\t/tmp/tmp1rp52a6g.lua:7:\
    \ in upvalue 'minSubArraySum'\n\t/tmp/tmp1rp52a6g.lua:7: in upvalue 'minSubArraySum'\n\
    \t/tmp/tmp1rp52a6g.lua:7: in upvalue 'minSubArraySum'\n\t/tmp/tmp1rp52a6g.lua:7:\
    \ in upvalue 'minSubArraySum'\n\t...\t(skipping 124980 levels)\n\t/tmp/tmp1rp52a6g.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp1rp52a6g.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.060 seconds, 0 successes, 1 error\n"
  timestamp: 1659823748
- exit_code: 1
  program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\nlocal function minSubArraySum(nums)\n  \
    \  local min = math.max(nums)\n    local index = 1\n    while true do\n      \
    \  local sum = min + nums[index]\n        if sum < min then\n            min =\
    \ sum\n        end\n        index = index + 1\n        if index == #nums then\n\
    \            return min\n        end\n    end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp49ljdqvq.lua:8:\
    \ attempt to perform arithmetic on a table value (local 'min')\nstack traceback:\n\
    \t/tmp/tmp49ljdqvq.lua:8: in local 'candidate'\n\t/tmp/tmp49ljdqvq.lua:22: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823747
- exit_code: 1
  program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\nlocal function minSubArraySum(nums)\n  \
    \  local minsum = math.inf\n    for _, num in pairs(nums) do \n        minsum\
    \ = math.min(minsum, num)\n    end\n    return minsum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: 'E

    Tests with errors:

    ------------------

    1) test_humaneval

    attempt to compare number with nil

    stack traceback:


    Ran 1 tests in 0.000 seconds, 0 successes, 1 error

    '
  timestamp: 1659823747
- exit_code: 1
  program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\nlocal function minSubArraySum(nums)\n  local\
    \ function helper(curSum, nums, index, sums)\n    if index == #nums then\n   \
    \   if curSum > sums[1] then\n        sums[1] = curSum\n      else\n        sums[#sums+1]\
    \ = curSum\n      end\n      return\n    end\n    helper(curSum + nums[index],\
    \ nums, index + 1, sums)\n    helper(curSum + nums[index], nums, index + 1, sums)\n\
    \  end\n  local sums = {[0] = 0}\n  helper(0, 0, 1, sums)\n  return sums[1]\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n\
    \    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n \
    \   lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0,\
    \ 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}),\
    \ -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10,\
    \ 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}),\
    \ -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvyr8h49y.lua:6:\
    \ attempt to get length of a number value (local 'nums')\nstack traceback:\n\t\
    /tmp/tmpvyr8h49y.lua:6: in local 'helper'\n\t/tmp/tmpvyr8h49y.lua:18: in local\
    \ 'candidate'\n\t/tmp/tmpvyr8h49y.lua:25: in function 'test_humaneval'\n\nRan\
    \ 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823747
- exit_code: 1
  program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\nlocal function minSubArraySum(nums)\n\t\
    -- TODO: Complete this function\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2,\
    \ 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvrgpn428.lua:11:\
    \ expected: 1, actual: nil\nstack traceback:\n\t/tmp/tmpvrgpn428.lua:11: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823747
- exit_code: 1
  program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\nlocal function minSubArraySum(nums)\n  if\
    \ #nums == 0 then\n    return 0\n  end\n  if #nums == 1 then\n    return nums[1]\n\
    \  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n  \
    \  lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpvn70mtl7.lua:29: ''end'' expected (to close ''function'' at
    line 4) near <eof>

    '
  stdout: ''
  timestamp: 1659823747
- exit_code: 1
  program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\nlocal function minSubArraySum(nums)\n  --\
    \ Base Case: If the array is empty, the minimum sum of an empty array is 0\n \
    \ if #nums == 0 then return 0 end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2,\
    \ 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpn5ih3dz1.lua:25: ''end'' expected (to close ''function'' at
    line 4) near <eof>

    '
  stdout: ''
  timestamp: 1659823747
- exit_code: 1
  program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\nlocal function minSubArraySum(nums)\n\t\
    local minSum, minIndex\n\tlocal numsLength = #nums\n\tlocal currentSum = 0\n\t\
    local currentIndex = 0\n\twhile currentIndex < numsLength do\n\t\t-- TODO: fix\
    \ this code\n\t\tlocal sum = 0\n\t\tlocal numsCopy = nums\n\t\tnumsCopy[currentIndex]\
    \ = nil\n\t\tfor i = 1, #numsCopy do\n\t\t\tsum = sum + numsCopy[i]\n\t\tend\n\
    \t\tif currentSum < sum then\n\t\t\tcurrentSum = sum\n\t\t\tminIndex = currentIndex\n\
    \t\tend\n\t\tcurrentIndex = currentIndex + 1\n\tend\n\treturn minIndex\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n\
    \    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n \
    \   lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0,\
    \ 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}),\
    \ -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10,\
    \ 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}),\
    \ -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1cdezpee.lua:15:\
    \ attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\
    \t/tmp/tmp1cdezpee.lua:15: in local 'candidate'\n\t/tmp/tmp1cdezpee.lua:29: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823747
- exit_code: 1
  program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\nlocal function minSubArraySum(nums)\n  --\
    \ Base case\n  if #nums == 0 then\n    return 0\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp1sz4igs3.lua:27: ''end'' expected (to close ''function'' at
    line 4) near <eof>

    '
  stdout: ''
  timestamp: 1659823747
- exit_code: 1
  program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\nlocal function minSubArraySum(nums)\n  \
    \ local minimum = nil\n   for _, i in pairs(nums) do\n      minimum = minimum\
    \ or i\n      minimum = minimum + i\n   end\n   return minimum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpclmcw6cg.lua:16:\
    \ expected: 1, actual: 18\nstack traceback:\n\t/tmp/tmpclmcw6cg.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823747
- exit_code: 1
  program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\nlocal function minSubArraySum(nums)\n  local\
    \ minSoFar = math.min(nums)\n  for i = 1, #nums do\n    local currentSum = nums[i]\
    \ + minSoFar\n    minSoFar = math.min(currentSum, minSoFar)\n  end\n  return minSoFar\n\
    end\nprint(minSubArraySum({8, 3, 11, 5, 6, 10}))\nprint(minSubArraySum({5, 6,\
    \ 10, 8, 3, 11}))\nprint(minSubArraySum({9, 11, 10, 5, 6, 8, 3}, 10))\nprint(minSubArraySum({8,\
    \ 3, 11, 5, 6, 10, 9}, 10))\nprint(minSubArraySum({8, 3, 11, 5, 6, 10, 9}, 3))\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n\
    \    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n \
    \   lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0,\
    \ 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}),\
    \ -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10,\
    \ 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}),\
    \ -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: "lua: /tmp/tmpehpxe506.lua:7: attempt to perform arithmetic on a table value\
    \ (local 'minSoFar')\nstack traceback:\n\t/tmp/tmpehpxe506.lua:7: in local 'minSubArraySum'\n\
    \t/tmp/tmpehpxe506.lua:12: in main chunk\n\t[C]: in ?\n"
  stdout: ''
  timestamp: 1659823747
- exit_code: 1
  program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\nlocal function minSubArraySum(nums)\n  \
    \  return math.min(table.unpack(\n        table.sort(\n            table.filter(\
    \ nums, \n                function(n)\n                    return n ~= nil and\
    \ n ~= false\n                end\n            )\n        )\n    ))\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n\
    \    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n \
    \   lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0,\
    \ 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}),\
    \ -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10,\
    \ 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}),\
    \ -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8vta1id7.lua:7:\
    \ attempt to call a nil value (field 'filter')\nstack traceback:\n\t/tmp/tmp8vta1id7.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp8vta1id7.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823747
- exit_code: 1
  program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\nlocal function minSubArraySum(nums)\n  --\
    \ Base case\n  if #nums == 0 then\n    return 0\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp1sz4igs3.lua:27: ''end'' expected (to close ''function'' at
    line 4) near <eof>

    '
  stdout: ''
  timestamp: 1659823747
- exit_code: 1
  program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\nlocal function minSubArraySum(nums)\n  --\
    \ Base case\n  if #nums == 0 then\n    return 0\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp1sz4igs3.lua:27: ''end'' expected (to close ''function'' at
    line 4) near <eof>

    '
  stdout: ''
  timestamp: 1659823747
- exit_code: 1
  program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\nlocal function minSubArraySum(nums)\n  \
    \  local start = 0\n    local min = 10000000\n    for i = 1, #nums do\n      \
    \  local currentSum = start .. nums[i]\n        local stop = start + nums[i]\n\
    \        local currentMin = minSubArraySum(nums[start + 1 .. stop]) or 0\n   \
    \     min = currentSum + currentMin\n        start = stop\n    end\n    return\
    \ min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n  \
    \  lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpaupdt3j5.lua:7:\
    \ attempt to get length of a nil value (local 'nums')\nstack traceback:\n\t/tmp/tmpaupdt3j5.lua:7:\
    \ in upvalue 'minSubArraySum'\n\t/tmp/tmpaupdt3j5.lua:10: in local 'candidate'\n\
    \t/tmp/tmpaupdt3j5.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  timestamp: 1659823747
- exit_code: 1
  program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\nlocal function minSubArraySum(nums)\n  local\
    \ function recursive_min(subarray)\n    if #subarray == 0 then\n      return 0\n\
    \    end\n    local min = subarray[1]\n    for i = 2, #subarray do\n      min\
    \ = min + subarray[i]\n      if min < subarray[1] then\n        return min\n \
    \     end\n    end\n    return min\n  end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp6pfp2160.lua:36: ''end'' expected (to close ''function'' at
    line 4) near <eof>

    '
  stdout: ''
  timestamp: 1659823747
- exit_code: 1
  program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\nlocal function minSubArraySum(nums)\n  local\
    \ minSum = math.max(nums[1])\n  for i = 2, #nums do\n    local sum = minSum +\
    \ nums[i]\n    minSum = sum if sum < minSum then minSum else sum end\n  end\n\
    \  return minSum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2,\
    \ 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpnrsx7qhb.lua:8: syntax error near ''else''

    '
  stdout: ''
  timestamp: 1659823747
- exit_code: 1
  program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\nlocal function minSubArraySum(nums)\n\t\
    -- base case\n\tif nums == nil then\n\t\treturn 0\n\tend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp6pk_0gvy.lua:27: ''end'' expected (to close ''function'' at
    line 4) near <eof>

    '
  stdout: ''
  timestamp: 1659823747
- exit_code: 1
  program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\nlocal function minSubArraySum(nums)\n  \
    \  return math.min(\n        math.max(\n            sum(\n                filter(\n\
    \                    function (el)\n                        return el > 0\n  \
    \                  end,\n                    nums\n                )\n       \
    \     ),\n            0),\n        sum(nums) - 1)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwmpe035f.lua:8:\
    \ attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmpwmpe035f.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpwmpe035f.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823747
- exit_code: -1
  program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\nlocal function minSubArraySum(nums)\n\t\
    -- Your code here!\n\tassert(nums == nil or nums ~= nil, \"Argument 'nums' must\
    \ not nil\")\n\tlocal numSet = {}\n\tfor i = 1, #nums do\n\t\ttable.insert(numSet,\
    \ nums[i])\n\tend\n\tlocal ans\n\tlocal j = 1\n\twhile j < #numSet do\n\t\tlocal\
    \ sum = 0\n\t\tlocal j = j + 1\n\t\twhile j < #numSet do\n\t\t\tsum = sum + numSet[j]\n\
    \t\t\tj = j + 1\n\t\tend\n\t\tif ans == nil then\n\t\t\tans = sum\n\t\telseif\
    \ ans < sum then\n\t\t\tans = sum\n\t\tend\n\tend\n\treturn ans\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659823752
- exit_code: 1
  program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\nlocal function minSubArraySum(nums)\n  \
    \  local minSum = nums[1]\n    for i = 2,#nums do\n        minSum = math.max(minSum,\
    \ nums[i] + minSubArraySum(nums[i:end]))\n    end\n    return minSum\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n\
    \    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n \
    \   lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0,\
    \ 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}),\
    \ -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10,\
    \ 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}),\
    \ -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpp917ao72.lua:7: <name> expected near ''end''

    '
  stdout: ''
  timestamp: 1659823747
- exit_code: 1
  program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\nlocal function minSubArraySum(nums)\n  \
    \  local min_sum = nums[1]\n    local min_sub = nums[1]\n    for i = 2, #nums\
    \ do\n        local sum = nums[i] + nums[i - 1]\n        if min_sub < sum or min_sub\
    \ == sum and min_sum > sum then\n            min_sum = sum\n            min_sub\
    \ = sum\n        end\n    end\n    return min_sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqvgwf2k0.lua:20:\
    \ expected: 1, actual: 7\nstack traceback:\n\t/tmp/tmpqvgwf2k0.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823747
- exit_code: 1
  program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\nlocal function minSubArraySum(nums)\n  return\
    \ helper(nums, nil, 0, 0)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2,\
    \ 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpksom0qm6.lua:5:\
    \ attempt to call a nil value (global 'helper')\nstack traceback:\n\t/tmp/tmpksom0qm6.lua:5:\
    \ in local 'candidate'\n\t/tmp/tmpksom0qm6.lua:11: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823747
- exit_code: 1
  program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\nlocal function minSubArraySum(nums)\n\t\
    -- We do not need to modify the original array.\n\tnums = nums\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp4fckynug.lua:25: ''end'' expected (to close ''function'' at
    line 4) near <eof>

    '
  stdout: ''
  timestamp: 1659823748
- exit_code: 1
  program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\nlocal function minSubArraySum(nums)\n  local\
    \ min = nil\n  for _, value in ipairs(nums) do\n    if min == nil then\n     \
    \ min = value\n    else\n      if value < min then\n        min = value\n    \
    \  end\n    end\n  end\n  return min\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc6_ligf6.lua:22:\
    \ expected: -6, actual: -3\nstack traceback:\n\t/tmp/tmpc6_ligf6.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823748
- exit_code: 1
  program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\nlocal function minSubArraySum(nums)\n  \
    \  local minSum = math.inf\n    for i = 1, #nums do\n        if nums[i] > 0 and\
    \ minSum == math.inf then\n            minSum = nums[i]\n        elseif nums[i]\
    \ < 0 and minSum == -math.inf then\n            minSum = -nums[i]\n        end\n\
    \    end\n    return minSum\nend\n</code>\n<|/ a tags=math,pseudocode,algorithm\
    \ |>\n<| a dscore=0 tags=math,pseudocode,algorithm |>\nI came up with this solution\
    \ that is a bit different.\n<code>\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2,\
    \ 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp6zd9iio5.lua:15: unexpected symbol near ''<''

    '
  stdout: ''
  timestamp: 1659823747
- exit_code: 1
  program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\nlocal function minSubArraySum(nums)\n  \
    \ if #nums == 0 then\n      return 0\n   end\n   \n   local sum = 0\n   local\
    \ low = 0\n   local high = #nums - 1\n   \n   while low <= high do\n      sum\
    \ = sum + nums[low]\n      \n      local mid = math.floor((low + high) / 2)\n\
    \      \n      if nums[mid] <= low then\n         low = mid + 1\n      else\n\
    \         high = mid - 1\n      end\n   end\n   \n   return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwhgowmum.lua:14:\
    \ attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\
    \t/tmp/tmpwhgowmum.lua:14: in local 'candidate'\n\t/tmp/tmpwhgowmum.lua:31: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823747
- exit_code: 1
  program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\nlocal function minSubArraySum(nums)\n  \
    \  if #nums == 0 then\n        return 0\n    end\n    -- if first or last element\
    \ is smaller than the first or last element in the other array then\n    -- sum\
    \ of the first and last element are 0\n    if nums[1] < nums[#nums] or nums[1]\
    \ < nums[#nums] - 1 then\n        return nums[1] + nums[#nums]\n    end\n    --\
    \ else find the first non-zero element in the array\n    for i = 2, #nums do\n\
    \        if nums[i] ~= 0 then\n            break\n        end\n    end\n    --\
    \ if any element has a zero in it then\n    if i == #nums then\n        return\
    \ 0\n    end\n    -- if the first non-zero element is in the middle of the array\
    \ then\n    -- return sum of the two non-zero elements in the array\n    if nums[i\
    \ / 2] < nums[i] then\n        return nums[i / 2] + nums[i]\n    end\n    -- else\
    \ find the second non-zero element\n    for j = i + 1, #nums do\n        if nums[j]\
    \ ~= 0 then\n            break\n        end\n    end\n    -- if any element has\
    \ a zero in it then\n    if j == #nums then\n        return 0\n    end\n    --\
    \ if the second non-zero element is in the middle of the array then\n    -- return\
    \ sum of the two non-zero elements in the array\n    if nums[i / 2] < nums[j]\
    \ then\n        return nums[i] + nums[i / 2]\n    end\n    -- else find the third\
    \ non-zero element\n    for k = j + 1, #nums do\n        if nums[k] ~= 0 then\n\
    \            break\n        end\n    end\n    -- if any element has a zero in\
    \ it then\n    if k == #nums then\n        return 0\n    end\n    -- if the third\
    \ non-zero element is in the middle of the array then\n    -- return sum of the\
    \ two non-zero elements in the array\n    if nums[i / 2] < nums[k] then\n    \
    \    return nums[i] + nums[k]\n    end\n    -- else find the fourth non-zero element\n\
    \    for l = k + 1, #nums do\n        if nums[l] ~= 0 then\n            break\n\
    \        end\n    end\n    -- if any element has a zero in it then\n    if l ==\
    \ #nums then\n        return 0\n    end\n    -- if the fourth non-zero element\
    \ is in the middle of the array then\n    -- return sum of the two non-zero elements\
    \ in the array\n    if nums[i / 2] < nums[l] then\n        return nums[i] + nums[l]\n\
    \    end\n    -- else find the fifth non-zero element\n    for m = l + 1, #nums\
    \ do\n        if nums[m] ~= 0 then\n            break\n        end\n    end\n\
    \    -- if any element has a \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2,\
    \ 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmph5exbhvb.lua:98: ''end'' expected (to close ''function'' at
    line 4) near <eof>

    '
  stdout: ''
  timestamp: 1659823748
- exit_code: 1
  program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\nlocal function minSubArraySum(nums)\n  if\
    \ #nums == 0 then\n    return 0\n  end\n  local sum = 0\n  local start = 0\n \
    \ local min = nil\n  for i = 1, #nums do\n    local currentSum = sum + nums[i]\n\
    \    if min == nil or currentSum <= min then\n      min = currentSum\n      start\
    \ = i\n    end\n    sum = currentSum\n  end\n  return start + min - 1\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n\
    \    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n \
    \   lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0,\
    \ 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}),\
    \ -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10,\
    \ 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}),\
    \ -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0lvhjf2p.lua:25:\
    \ expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp0lvhjf2p.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823748
- exit_code: 1
  program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\nlocal function minSubArraySum(nums)\n  --\
    \ Base Case\n  if #nums == 0 then\n    return 0\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmptakdh997.lua:8: ''end'' expected (to close ''if'' at line
    6) near ''lu''

    '
  stdout: ''
  timestamp: 1659823748
- exit_code: 1
  program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\nlocal function minSubArraySum(nums)\n  \
    \  local min = math.max(-1, math.min(nums))\n    for i = 1, #nums do\n       \
    \ min = math.max(min, minSubArraySum(nums, i, i + 1))\n    end\n    return min\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n\
    \    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n \
    \   lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0,\
    \ 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}),\
    \ -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10,\
    \ 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}),\
    \ -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: 'E

    Tests with errors:

    ------------------

    1) test_humaneval

    attempt to compare number with table

    stack traceback:


    Ran 1 tests in 0.000 seconds, 0 successes, 1 error

    '
  timestamp: 1659823748
- exit_code: 1
  program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\nlocal function minSubArraySum(nums)\n\t\
    assert(#nums > 0)\n\tassert(type(nums) ~= 'table')\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpvnodl0cb.lua:25: ''end'' expected (to close ''function'' at
    line 4) near <eof>

    '
  stdout: ''
  timestamp: 1659823747
- exit_code: 1
  program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\nlocal function minSubArraySum(nums)\n\t\
    local minimum = nums[1]\n\tlocal sum = 0\n\tfor i = 1, #nums do\n\t\tsum = sum\
    \ + nums[i]\n\t\tif sum <= minimum then\n\t\t\tminimum = sum\n\t\tend\n\tend\n\
    \treturn minimum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2,\
    \ 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa9n6p62a.lua:19:\
    \ expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpa9n6p62a.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823747
- exit_code: 1
  program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\nlocal function minSubArraySum(nums)\n  --\
    \ Base case\n  if #nums == 0 then\n    return 0\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp1sz4igs3.lua:27: ''end'' expected (to close ''function'' at
    line 4) near <eof>

    '
  stdout: ''
  timestamp: 1659823747
- exit_code: 1
  program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\nlocal function minSubArraySum(nums)\n  local\
    \ minSum = nil\n  for i = 1, #nums do\n    local sum = 0\n    for j = 1, i do\n\
    \      sum = sum + nums[j]\n    end\n    -- If the sum is not nil, then it must\
    \ be the minimum\n    if sum ~= nil then\n      minSum = sum\n    end\n  end\n\
    \  return minSum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2,\
    \ 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxnzm_9di.lua:22:\
    \ expected: 1, actual: 16\nstack traceback:\n\t/tmp/tmpxnzm_9di.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823747
- exit_code: 1
  program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\nlocal function minSubArraySum(nums)\n\t\
    local min = math.min(nums)\n\tfor i = 1, #nums do\n\t\tlocal j = i + 1\n\t\tif\
    \ nums[i] + nums[j] < min then\n\t\t\tmin = nums[i] + nums[j]\n\t\tend\n\tend\n\
    \treturn min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}),\
    \ 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpr5m2ihrj.lua:8:\
    \ attempt to compare number with table\nstack traceback:\n\t/tmp/tmpr5m2ihrj.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpr5m2ihrj.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823748
- exit_code: 1
  program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\nlocal function minSubArraySum(nums)\n  \
    \  -- Your code here\n    local minSum = nums[1]\n    for i = 2, #nums do\n  \
    \      minSum = math.max(nums[i] + minSum, nums[i-1] + minSum)\n    end\n    return\
    \ minSum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n  \
    \  lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjayup5sv.lua:16:\
    \ expected: 1, actual: 19\nstack traceback:\n\t/tmp/tmpjayup5sv.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823748
- exit_code: 1
  program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\nlocal function minSubArraySum(nums)\n  --\
    \ Write your code here\n  local minimumSum = math.max( nums[1] )\n  local numsSize\
    \ = #nums\n  for i = 1, numsSize do\n    minimumSum = minimumSum + nums[i]\n \
    \   if minimumSum > math.max( nums[i] ) then\n      minimumSum = math.max( nums[i]\
    \ )\n    end\n  end\n  return minimumSum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnfeklbva.lua:20:\
    \ expected: 1, actual: 4\nstack traceback:\n\t/tmp/tmpnfeklbva.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823748
- exit_code: 1
  program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\nlocal function minSubArraySum(nums)\n  \
    \  local n = #nums\n    if n == 0 then\n        return 0\n    end\n    local minimum\
    \ = nums[1]\n    for i = 2, n do\n        minimum = minimum + nums[i]\n    end\n\
    \    return minimum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2,\
    \ 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaazxyx88.lua:19:\
    \ expected: 1, actual: 16\nstack traceback:\n\t/tmp/tmpaazxyx88.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823748
- exit_code: 1
  program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\nlocal function minSubArraySum(nums)\n  \
    \  local min = math.min(nums)\n    for i = 1, #nums do\n        min = min + nums[i]\n\
    \    end\n    return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2,\
    \ 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7wxro5k4.lua:7:\
    \ attempt to perform arithmetic on a table value (local 'min')\nstack traceback:\n\
    \t/tmp/tmp7wxro5k4.lua:7: in local 'candidate'\n\t/tmp/tmp7wxro5k4.lua:15: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823748
- exit_code: 1
  program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\nlocal function minSubArraySum(nums)\n  \
    \  return math.min(math.max(nums[1], 0), math.max(nums[#nums] - 1, 0))\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n\
    \    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n \
    \   lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0,\
    \ 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}),\
    \ -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10,\
    \ 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}),\
    \ -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc_7_o518.lua:11:\
    \ expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpc_7_o518.lua:11: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823748
- exit_code: 1
  program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\nlocal function minSubArraySum(nums)\n  --\
    \ Write your code here.\n  local minimumSum = nums[1]\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmph41zcql5.lua:25: ''end'' expected (to close ''function'' at
    line 4) near <eof>

    '
  stdout: ''
  timestamp: 1659823748
- exit_code: 1
  program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\nlocal function minSubArraySum(nums)\n  \
    \  local minSum, maxSum = nums[1] + nums[1], nums[1] + nums[1]\n    for i = 1,\
    \ #nums do\n        minSum, maxSum = minSum + nums[i], maxSum + nums[i]\n    end\n\
    \    return minSum, maxSum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2,\
    \ 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvobpyrjm.lua:15:\
    \ expected: 1, actual: 20\nstack traceback:\n\t/tmp/tmpvobpyrjm.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823748
- exit_code: 1
  program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\nlocal function minSubArraySum(nums)\n  --\
    \ Base Case\n  if #nums == 0 then\n    return 0\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpyxefa7iw.lua:27: ''end'' expected (to close ''function'' at
    line 4) near <eof>

    '
  stdout: ''
  timestamp: 1659823748
- exit_code: 1
  program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\nlocal function minSubArraySum(nums)\n  \
    \  local minSum = math.inf\n    for i = 1, #nums do\n        if nums[i] then\n\
    \            local subSum = sumSubArray(nums, i, i)\n            if subSum < minSum\
    \ then\n                minSum = subSum\n            end\n        end\n    end\n\
    \    return minSum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2,\
    \ 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjh7fpfd_.lua:8:\
    \ attempt to call a nil value (global 'sumSubArray')\nstack traceback:\n\t/tmp/tmpjh7fpfd_.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpjh7fpfd_.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823748
- exit_code: 1
  program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\nlocal function minSubArraySum(nums)\n  assert(type(nums)\
    \ == 'table')\n  assert(#nums > 0)\n  local minSum = 0\n  local subSum = 0\n \
    \ local pos = 1\n  while pos < #nums do\n    subSum = subSum + nums[pos]\n   \
    \ if subSum < minSum then\n      minSum = subSum\n    end\n    pos = pos + 1\n\
    \  end\n  return minSum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2,\
    \ 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpunj_gox2.lua:23:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpunj_gox2.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823748
- exit_code: 1
  program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\nlocal function minSubArraySum(nums)\n  \
    \  local sum = 0\n    local i = 1\n    while i <= #nums do\n        sum = sum\
    \ + nums[i]\n        i = i + 1\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgh9ah1ql.lua:17:\
    \ expected: 1, actual: 16\nstack traceback:\n\t/tmp/tmpgh9ah1ql.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823748
- exit_code: 1
  program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\nlocal function minSubArraySum(nums)\n  assert(#nums\
    \ > 0)\n  local sums = nums:clone()\n  sums:add(nums[1])\n  for i = 2, #nums do\n\
    \    local subSum = nums[i]:clone()\n    subSum:add(sums[#sums - 1])\n    sums:add(subSum)\n\
    \  end\n  local min = sums[1]\n  for i = 1, #sums do\n    if sums[i] < min then\n\
    \      min = sums[i]\n    end\n  end\n  return min\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpde4npxtx.lua:6:\
    \ attempt to call a nil value (method 'clone')\nstack traceback:\n\t/tmp/tmpde4npxtx.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmpde4npxtx.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823748
- exit_code: 1
  program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\nlocal function minSubArraySum(nums)\n  \
    \  local numsSum = 0\n    for i = 1,#nums do\n        numsSum = numsSum + nums[i]\n\
    \    end\n    return numsSum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2,\
    \ 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiel54wo3.lua:15:\
    \ expected: 1, actual: 16\nstack traceback:\n\t/tmp/tmpiel54wo3.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823748
- exit_code: 1
  program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\nlocal function minSubArraySum(nums)\n  --\
    \ Base case\n  if #nums <= 1 then\n    return nums[1]\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpq18oaynq.lua:27: ''end'' expected (to close ''function'' at
    line 4) near <eof>

    '
  stdout: ''
  timestamp: 1659823748
- exit_code: 1
  program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\nlocal function minSubArraySum(nums)\n  local\
    \ ans, subSum = math.huge, math.huge\n  for i = 0, #nums do\n    subSum = subSum\
    \ + nums[i]\n    ans = math.min(ans, subSum)\n  end\n  return ans\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8mxybo8t.lua:7:\
    \ attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\
    \t/tmp/tmp8mxybo8t.lua:7: in local 'candidate'\n\t/tmp/tmp8mxybo8t.lua:16: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823748
- exit_code: 1
  program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\nlocal function minSubArraySum(nums)\n\t\
    local min = math.max(1, nums[1])\n\tfor i = 2, #nums do\n\t\tif nums[i] < min\
    \ then\n\t\t\tmin = nums[i]\n\t\telseif nums[i] == min then\n\t\t\tmin = math.min(min,\
    \ nums[i+1] - nums[i+1])\n\t\tend\n\tend\n\treturn min\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkqwrml10.lua:20:\
    \ expected: -6, actual: -3\nstack traceback:\n\t/tmp/tmpkqwrml10.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823748
- exit_code: 1
  program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\nlocal function minSubArraySum(nums)\n  local\
    \ i, j = 1, #nums - 1\n  while i <= j do\n    local sum = nums[i] + nums[j] +\
    \ nums[i - j + 1] + nums[j - 1]\n    if sum == nums[i] then i = i + 1 else return\
    \ sum\n    if sum == nums[j] then j = j - 1 else return sum\n  end\n  return nums[i]\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n\
    \    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n \
    \   lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0,\
    \ 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}),\
    \ -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10,\
    \ 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}),\
    \ -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp65pcy3pe.lua:9: ''end'' expected (to close ''if'' at line
    8) near ''if''

    '
  stdout: ''
  timestamp: 1659823748
- exit_code: 1
  program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\nlocal function minSubArraySum(nums)\n  \
    \  local len = #nums\n    if len == 0 then\n        return 0\n    end\n    local\
    \ sum, index = 0, 1\n    for i = 1, len do\n        sum, index = sum + nums[i],\
    \ index + 1\n        if index > len then\n            index = index - len\n  \
    \      end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplvcvn1ex.lua:22:\
    \ expected: 1, actual: 16\nstack traceback:\n\t/tmp/tmplvcvn1ex.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823748
- exit_code: 1
  program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\nlocal function minSubArraySum(nums)\n  \
    \  -- Your code here\n    local i, n = 0, #nums\n    local sum, min = 0\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n\
    \    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n \
    \   lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0,\
    \ 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}),\
    \ -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10,\
    \ 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}),\
    \ -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpbj_vj5_t.lua:26: ''end'' expected (to close ''function'' at
    line 4) near <eof>

    '
  stdout: ''
  timestamp: 1659823748
- exit_code: 1
  program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\nlocal function minSubArraySum(nums)\n\t\
    local min = #nums + 1\n\tfor i=1,#nums do\n\t\tlocal subsum = nums[i]+nums[min]\n\
    \t\tif subsum < min then\n\t\t\tmin = subsum\n\t\tend\n\tend\n\treturn min\nend\n\
    print(minSubArraySum({-3,-5,6,2,4,9,11}))\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: "lua: /tmp/tmp_scwcmq0.lua:7: attempt to perform arithmetic on a nil value\
    \ (field '?')\nstack traceback:\n\t/tmp/tmp_scwcmq0.lua:7: in local 'minSubArraySum'\n\
    \t/tmp/tmp_scwcmq0.lua:14: in main chunk\n\t[C]: in ?\n"
  stdout: ''
  timestamp: 1659823748
- exit_code: 1
  program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\nlocal function minSubArraySum(nums)\n\t\
    local sum = 0\n\tfor _, _ in ipairs(nums) do\n\t\tsum = sum + _\n\tend\n\treturn\
    \ sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n  \
    \  lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprnncf7f7.lua:15:\
    \ expected: 1, actual: 16\nstack traceback:\n\t/tmp/tmprnncf7f7.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823748
- exit_code: 1
  program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\nlocal function minSubArraySum(nums)\n  \
    \  -- Base case\n    if #nums == 0 then\n        return 0\n    end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpcwm391ow.lua:27: ''end'' expected (to close ''function'' at
    line 4) near <eof>

    '
  stdout: ''
  timestamp: 1659823748
- exit_code: 1
  program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\nlocal function minSubArraySum(nums)\n\t\
    local minSum = math.max(...)\n\tfor _, value in ipairs(nums) do\n\t\tlocal sum\
    \ = value\n\t\tfor i = 1, #nums do\n\t\t\tsum = sum + nums[i]\n\t\t\tif sum <\
    \ minSum then\n\t\t\t\tminSum = sum\n\t\t\tend\n\t\tend\n\tend\n\treturn minSum\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n\
    \    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n \
    \   lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0,\
    \ 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}),\
    \ -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10,\
    \ 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}),\
    \ -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpasq_h0h7.lua:5: cannot use ''...'' outside a vararg function
    near ''...''

    '
  stdout: ''
  timestamp: 1659823748
- exit_code: 1
  program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\nlocal function minSubArraySum(nums)\n\t\
    local minimum = nums[1]\n\tfor i=2,#nums do\n\t\tminimum = math.min(minimum, nums[i]\
    \ + minimum)\n\tend\n\treturn minimum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfjh_nzr0.lua:15:\
    \ expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpfjh_nzr0.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823748
- exit_code: 1
  program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\nlocal function minSubArraySum(nums)\n  \
    \ local function helper(start, middle, end)\n      local current = nums[start]\n\
    \      if start < middle then\n         current = helper(start + 1, middle, end)\n\
    \      elseif middle < end then\n         current = helper(start, middle + 1,\
    \ end)\n      end\n      return current + nums[middle]\n   end\n   return helper(1,\
    \ #nums, 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}),\
    \ 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpy_jgak0i.lua:5: <name> or ''...'' expected near ''end''

    '
  stdout: ''
  timestamp: 1659823748
- exit_code: 1
  program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\nlocal function minSubArraySum(nums)\n  local\
    \ min = math.inf\n  for i = 1, #nums do\n    local elem = nums[i]\n    if elem\
    \ > 0 then\n      min = min + elem\n    end\n  end\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpft08af5z.lua:30: ''end'' expected (to close ''function'' at
    line 4) near <eof>

    '
  stdout: ''
  timestamp: 1659823748
- exit_code: 1
  program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\nlocal function minSubArraySum(nums)\n  \
    \  -- Write your code here\n    return nil\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_cxibh8u.lua:12:\
    \ expected: 1, actual: nil\nstack traceback:\n\t/tmp/tmp_cxibh8u.lua:12: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823748
- exit_code: 1
  program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\nlocal function minSubArraySum(nums)\n  \
    \  local minimum = math.inf\n    local min_sub_array\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpzldwenai.lua:25: ''end'' expected (to close ''function'' at
    line 4) near <eof>

    '
  stdout: ''
  timestamp: 1659823748
- exit_code: 1
  program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\nlocal function minSubArraySum(nums)\n  \
    \  local minSum = math.inf\n    local numsLen = #nums\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp27c7mi2z.lua:25: ''end'' expected (to close ''function'' at
    line 4) near <eof>

    '
  stdout: ''
  timestamp: 1659823748
- exit_code: 1
  program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\nlocal function minSubArraySum(nums)\n  local\
    \ sum, i, j, n = 0, 0, 0\n  for i = 1,#nums do\n    sum = sum + nums[i]\n    n\
    \ = n + 1\n    for j = i + 1,n do\n      sum = sum + nums[j]\n      if sum > sum\
    \ then return sum end\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbl6rmajl.lua:8:\
    \ attempt to perform arithmetic on a nil value (local 'n')\nstack traceback:\n\
    \t/tmp/tmpbl6rmajl.lua:8: in local 'candidate'\n\t/tmp/tmpbl6rmajl.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823748
- exit_code: 1
  program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\nlocal function minSubArraySum(nums)\n  \
    \  assert(nums)\n    local minSum = math.inf\n    local minSumIndex = -1\n   \
    \ for index, num in ipairs(nums) do\n        if num and num > 0 then\n       \
    \     local currentSum = num\n            local newSum = currentSum\n        \
    \    for i = 1, num do\n                if nums[i] == 0 then\n               \
    \     newSum = 0\n                    break\n                end\n           \
    \     newSum = newSum + nums[i]\n            end\n            if newSum < currentSum\
    \ then\n                currentSum = newSum\n                minSumIndex = index\n\
    \            end\n        end\n    end\n    if minSumIndex == -1 then\n      \
    \  return nil\n    end\n    return nums[minSumIndex]\nend\n</code>\n<|/ a dscore=1\
    \ tags=arrays,algorithm,pseudocode,dynamic-programming,greedy |>\n<| a dscore=1\
    \ |>\nThis problem is very similar to knapsack problem but here you just want\
    \ to find the minimal value, here I am assuming the cost is a positive integer.\n\
    In dynamic programming we know that when we add up two numbers, if their sum cannot\
    \ be more than total we can just store it.\nBut when we multiply the number we\
    \ cannot add it up to be greater than the total and store it again with same total\
    \ and so on..\n<code>\ndef min_sum(arr,total):\n    \n    memo=[[0]*(total+1)]\n\
    \    memo[0]=0\n    \n    for i in range(1,total+1):\n        if arr[i-1]>0:\n\
    \            memo[i]=min(memo[i-1]+arr[i-1],memo[i-1])\n            \n    return\
    \ memo[total]\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n  \
    \  lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpjb2s7drt.lua:30: unexpected symbol near ''<''

    '
  stdout: ''
  timestamp: 1659823748
- exit_code: 1
  program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\nlocal function minSubArraySum(nums)\n\t\
    local n = 1\n\tfor i = 1, #nums do\n\t\tif n ~= i then\n\t\t\tn = n * nums[i]\n\
    \t\telse\n\t\t\tn = n * nums[i]\n\t\tend\n\tend\n\treturn n\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1wya00mk.lua:19:\
    \ expected: 1, actual: 192\nstack traceback:\n\t/tmp/tmp1wya00mk.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823748
- exit_code: 1
  program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\nlocal function minSubArraySum(nums)\n\t\
    -- Write your code here.\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2,\
    \ 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7f0rvk02.lua:11:\
    \ expected: 1, actual: nil\nstack traceback:\n\t/tmp/tmp7f0rvk02.lua:11: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823748
- exit_code: 1
  program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\nlocal function minSubArraySum(nums)\n\t\
    local result = math.inf\n\tlocal maxSum = math.inf\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpk4dk0qd1.lua:25: ''end'' expected (to close ''function'' at
    line 4) near <eof>

    '
  stdout: ''
  timestamp: 1659823748
- exit_code: 1
  program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\nlocal function minSubArraySum(nums)\n\t\
    local function minSubArray(sum, subArraySize)\n\t\tlocal i = 0\n\t\tlocal min\
    \ = math.max(sum, 0)\n\t\tlocal min = subArraySize == 1 and 1 or sum\n\t\tfor\
    \ i = 1, subArraySize do\n\t\t\tlocal s = min + sum\n\t\t\tmin = math.max(s, min)\n\
    \t\tend\n\t\treturn min\n\tend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2,\
    \ 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpzabsc5r5.lua:33: ''end'' expected (to close ''function'' at
    line 4) near <eof>

    '
  stdout: ''
  timestamp: 1659823748
- exit_code: 1
  program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\nlocal function minSubArraySum(nums)\n\t\
    -- Base case\n\tif not nums then\n\t\treturn 0\n\tend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp9biee5qj.lua:27: ''end'' expected (to close ''function'' at
    line 4) near <eof>

    '
  stdout: ''
  timestamp: 1659823748
- exit_code: 1
  program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\nlocal function minSubArraySum(nums)\n  \
    \  local function helper(index, nums, low, high)\n        if index == 0 then\n\
    \            return low .. high\n        end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmposuhwlfx.lua:27: ''end'' expected (to close ''function'' at
    line 5) near <eof>

    '
  stdout: ''
  timestamp: 1659823748
- exit_code: 1
  program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\nlocal function minSubArraySum(nums)\n  \
    \  assert(#nums > 0)\n    local minSum, minIndex = 0, math.min(#nums, 1)\n   \
    \ for i = 1, #nums do\n        local sum = 0\n        for j = 0, i do\n      \
    \      sum = sum + nums[j] \n        end\n        if sum > minSum then\n     \
    \       minSum = sum\n            minIndex = i\n        end\n    end\n    return\
    \ minSum, minIndex\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2,\
    \ 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnjof9m6b.lua:10:\
    \ attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\
    \t/tmp/tmpnjof9m6b.lua:10: in local 'candidate'\n\t/tmp/tmpnjof9m6b.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823748
- exit_code: 1
  program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\nlocal function minSubArraySum(nums)\n  if\
    \ #nums == 0 then\n    return 0\n  end\n  local minSum = math.min(nums[1] + minSubArraySum(nums[2..]))\n\
    \  for i = 2, #nums do\n    minSum = math.min(minSum, nums[i] + minSubArraySum(nums[i\
    \ - 1..i]))\n  end\n  return minSum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp4peilmsd.lua:8: malformed number near ''2..''

    '
  stdout: ''
  timestamp: 1659823748
- exit_code: 1
  program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\nlocal function minSubArraySum(nums)\n  \
    \  if nums == nil then return nil end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2,\
    \ 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpsspzqaqw.lua:24: ''end'' expected (to close ''function'' at
    line 4) near <eof>

    '
  stdout: ''
  timestamp: 1659823748
- exit_code: 1
  program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\nlocal function minSubArraySum(nums)\n  \
    \  local n = #nums\n    if n == 0 then\n        return 0\n    end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpq3t4_87x.lua:27: ''end'' expected (to close ''function'' at
    line 4) near <eof>

    '
  stdout: ''
  timestamp: 1659823748
- exit_code: 1
  program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\nlocal function minSubArraySum(nums)\n  --\
    \ base case\n  if #nums == 0 then\n    return 0\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpw5o89jze.lua:27: ''end'' expected (to close ''function'' at
    line 4) near <eof>

    '
  stdout: ''
  timestamp: 1659823747
- exit_code: 1
  program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\nlocal function minSubArraySum(nums)\n  \
    \  local min = nil\n    for i = 1, #nums do\n        for j = i + 1, #nums do\n\
    \            local sub = { nums[i] .. nums[j] }\n            if min == nil then\n\
    \                min = sub\n            elseif #sub > 0 then\n               \
    \ min = { min = minSubArraySum(min), sub }\n            end\n        end\n   \
    \ end\n    return min[1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2,\
    \ 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcjsjo6g3.lua:16:\
    \ attempt to index a nil value (local 'min')\nstack traceback:\n\t/tmp/tmpcjsjo6g3.lua:16:\
    \ in upvalue 'minSubArraySum'\n\t/tmp/tmpcjsjo6g3.lua:12: in local 'candidate'\n\
    \t/tmp/tmpcjsjo6g3.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  timestamp: 1659823748
- exit_code: 1
  program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\nlocal function minSubArraySum(nums)\n  --\
    \ Base Case: nums is empty.\n  if #nums == 0 then\n    return 0\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpw5htl94j.lua:27: ''end'' expected (to close ''function'' at
    line 4) near <eof>

    '
  stdout: ''
  timestamp: 1659823748
- exit_code: 1
  program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\nlocal function minSubArraySum(nums)\n  local\
    \ min = math.math.inf(0)\n  for _, x in ipairs(nums) do\n    min = math.min(min,\
    \ x)\n  end\n  return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2,\
    \ 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5d87jnjx.lua:5:\
    \ attempt to index a nil value (field 'math')\nstack traceback:\n\t/tmp/tmp5d87jnjx.lua:5:\
    \ in local 'candidate'\n\t/tmp/tmp5d87jnjx.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823748
- exit_code: 1
  program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\nlocal function minSubArraySum(nums)\n  \
    \  local minSum, currSum = 0, 0\n    for i = 1, #nums do\n        currSum = currSum\
    \ + nums[i]\n        if currSum < minSum then\n            minSum = currSum\n\
    \        end\n    end\n    return minSum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgnpukz8g.lua:18:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpgnpukz8g.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823748
- exit_code: 1
  program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\nlocal function minSubArraySum(nums)\n  --\
    \ Base case: If the input is empty, return 0.\n  if #nums == 0 then\n    return\
    \ 0\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n  \
    \  lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp7tfwlk32.lua:27: ''end'' expected (to close ''function'' at
    line 4) near <eof>

    '
  stdout: ''
  timestamp: 1659823748
- exit_code: 1
  program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\nlocal function minSubArraySum(nums)\n  --\
    \ Your code here!\nend\n</cell>\n<cell>\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2,\
    \ 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpbaxywhjq.lua:7: unexpected symbol near ''<''

    '
  stdout: ''
  timestamp: 1659823748
- exit_code: 1
  program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\nlocal function minSubArraySum(nums)\n\t\
    local sum = 0\n\tlocal result = 0\n\tfor _, num in pairs(nums) do\n\t\tresult\
    \ = result + num\n\t\tsum = sum + num\n\tend\n\treturn sum, result\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n\
    \    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n \
    \   lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0,\
    \ 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}),\
    \ -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10,\
    \ 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}),\
    \ -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpshq3ntw9.lua:17:\
    \ expected: 1, actual: 16\nstack traceback:\n\t/tmp/tmpshq3ntw9.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823748
- exit_code: 1
  program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\nlocal function minSubArraySum(nums)\n\t\
    local min = nil\n\tlocal min = nums[1]\n\tfor i = 2,#nums do\n\t\tlocal sub =\
    \ nums:sub(i,i)\n\t\tif sub:len() > 0 then\n\t\t\tmin = sub:sum()\n\t\tend\n\t\
    end\n\treturn min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2,\
    \ 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvgkjr68a.lua:8:\
    \ attempt to call a nil value (method 'sub')\nstack traceback:\n\t/tmp/tmpvgkjr68a.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpvgkjr68a.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823748
- exit_code: 1
  program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\nlocal function minSubArraySum(nums)\n\t\
    local function minSubArraySumInternal(left, right)\n\t\tif left == nil or right\
    \ == nil then\n\t\t\treturn 0\n\t\tend\n\t\tif nums[left] == nil then\n\t\t\t\
    return minSubArraySumInternal(left+1, right)\n\t\telseif nums[left] > nums[right]\
    \ then\n\t\t\treturn minSubArraySumInternal(left, right+1)\n\t\telse\n\t\t\treturn\
    \ minSubArraySumInternal(left+1, right)\n\t\tend\n\tend\n\treturn minSubArraySumInternal(1,\
    \ #nums)\nend\nassert(minSubArraySum({3, 1, 2}) == 5)\nassert(minSubArraySum({1,\
    \ 1, 1}) == 1)\nassert(minSubArraySum({1, 1, 1}) == 1)\nassert(minSubArraySum({1,\
    \ 2, 1}) == 2)\nassert(minSubArraySum({0, 1, 1}) == 0)\nassert(minSubArraySum({1,\
    \ 2, 3}) == 5)\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n  \
    \  lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: "lua: /tmp/tmpglw7twpf.lua:11: attempt to compare nil with number\nstack\
    \ traceback:\n\t/tmp/tmpglw7twpf.lua:11: in function </tmp/tmpglw7twpf.lua:5>\n\
    \t(...tail calls...)\n\t/tmp/tmpglw7twpf.lua:19: in main chunk\n\t[C]: in ?\n"
  stdout: ''
  timestamp: 1659823748
- exit_code: 1
  program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\nlocal function minSubArraySum(nums)\n\t\
    local sum = 0\n\tfor _, i in ipairs(nums) do\n\t\tif sum <= i then\n\t\t\tsum\
    \ = sum + i\n\t\tend\n\tend\n\treturn sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsqllhqml.lua:17:\
    \ expected: 1, actual: 5\nstack traceback:\n\t/tmp/tmpsqllhqml.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823748
- exit_code: 1
  program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\nlocal function minSubArraySum(nums)\n  if\
    \ nums == nil then return end\n  local sum, minSum = nums[1], nil\n  for i = 2,\
    \ #nums do\n    sum = sum + nums[i]\n    if sum < minSum then\n      minSum =\
    \ sum\n    end\n  end\n  return minSum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsuj5uxml.lua:9:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpsuj5uxml.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpsuj5uxml.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823748
- exit_code: 1
  program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\nlocal function minSubArraySum(nums)\n  \
    \  local sum = 0\n    for i = 1, #nums do\n        if nums[i] > 0 then\n     \
    \       sum = sum + nums[i]\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppnivoqz5.lua:17:\
    \ expected: 1, actual: 16\nstack traceback:\n\t/tmp/tmppnivoqz5.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823748
- exit_code: 1
  program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\nlocal function minSubArraySum(nums)\n  --\
    \ Initialize bestSum and bestStart with the first value in the array.\n  local\
    \ bestSum = nums[1]\n  local bestStart = 1\n  -- Loop through remaining values.\n\
    \  for i = 2, #nums do\n    -- If current sum is better, store it.\n    if bestSum\
    \ > nums[i] then\n      -- Update bestSum and bestStart with new values.\n   \
    \   bestSum = bestSum - nums[bestStart]\n      bestStart = i\n    end\n  end\n\
    \  -- Return bestSum.\n  return bestSum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoiqfye9j.lua:24:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpoiqfye9j.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823748
- exit_code: 1
  program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\nlocal function minSubArraySum(nums)\n  \
    \  if #nums == 0 then\n        return nil\n    end\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp098n63b0.lua:26: ''end'' expected (to close ''function'' at
    line 4) near <eof>

    '
  stdout: ''
  timestamp: 1659823748
- exit_code: 1
  program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\nlocal function minSubArraySum(nums)\n  --\
    \ Base case: an empty array\n  assert(#nums > 0)\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp1tzdp4pe.lua:25: ''end'' expected (to close ''function'' at
    line 4) near <eof>

    '
  stdout: ''
  timestamp: 1659823748
- exit_code: 1
  program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\nlocal function minSubArraySum(nums)\n  \
    \  local len = #nums\n    local min = -1\n    for i = 1, len do\n        local\
    \ v = nums[i]\n        for j = 1, i do\n            if v < nums[j] then\n    \
    \            min = v\n                v = nums[j]\n            end\n        end\n\
    \    end\n    return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2,\
    \ 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg1ks0ws3.lua:22:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpg1ks0ws3.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823748
- exit_code: 1
  program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\nlocal function minSubArraySum(nums)\n  --\
    \ base cases\n  if nums == nil then\n    return 0\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp99yzzbqn.lua:27: ''end'' expected (to close ''function'' at
    line 4) near <eof>

    '
  stdout: ''
  timestamp: 1659823748
- exit_code: 1
  program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\nlocal function minSubArraySum(nums)\n  if\
    \ #nums < 2 then\n    return 0\n  end\n  local min, max = nums[1], math.max(nums[1])\n\
    \  for i = 2, #nums do\n    local sum = min + max\n    local min = math.min(sum,\
    \ nums[i])\n    max = math.max(sum, nums[i])\n  end\n  return min\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr1t4npfa.lua:20:\
    \ expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpr1t4npfa.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823748
- exit_code: 1
  program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\nlocal function minSubArraySum(nums)\n\t\
    local min = math.inf\n\tlocal i = 1\n\twhile i <= #nums do\n\t\tlocal sum = 0\n\
    \t\tfor j = 1, i do\n\t\t\tsum = sum + nums[j]\n\t\tend\n\t\tif sum < min then\n\
    \t\t\tmin = sum\n\t\tend\n\t\ti = i + 1\n\tend\n\treturn min\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxwsm6as7.lua:12:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpxwsm6as7.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpxwsm6as7.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823748
- exit_code: 1
  program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\nlocal function minSubArraySum(nums)\n\t\
    local subArrMin = nil\n\tlocal minSubArray = nil\n\tlocal minSum = nil\n\tfor\
    \ i = 1,#nums do\n\t\tlocal subArrMax = nil\n\t\tlocal subArrSum = nil\n\t\tfor\
    \ j = 1,#nums do\n\t\t\tif j == i then\n\t\t\t\tsubArrSum = subArrSum or 0\n\t\
    \t\t\tsubArrSum = subArrSum + nums[j]\n\t\t\telseif nums[j] > subArrMax then\n\
    \t\t\t\tsubArrMax = nums[j]\n\t\t\telseif nums[j] < subArrMin then\n\t\t\t\tsubArrMin\
    \ = nums[j]\n\t\t\t\tsubArrSum = subArrSum or 0\n\t\t\t\tsubArrSum = subArrSum\
    \ + nums[j]\n\t\t\tend\n\t\tend\n\t\t\n\t\tif subArrMax ~= nil then\n\t\t\tif\
    \ minSubArray ~= nil and minSubArray[1] ~= subArrMax then\n\t\t\t\tminSubArray[1]\
    \ = subArrMax\n\t\t\t\tminSum = minSum or 0\n\t\t\t\tminSum = minSum + subArrSum\n\
    \t\t\telseif subArrMax > minSubArray[1] then\n\t\t\t\tminSubArray[1] = subArrMax\n\
    \t\t\t\tminSum = minSum or 0\n\t\t\t\tminSum = minSum + subArrSum\n\t\t\tend\n\
    \t\tend\n\tend\n\t\n\tif minSubArray ~= nil then\n\t\tminSubArray[2] = minSum\
    \ or 0\n\tend\n\t\n\treturn minSubArray\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplmqxdwvk.lua:15:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmplmqxdwvk.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmplmqxdwvk.lua:47: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823748
- exit_code: 1
  program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\nlocal function minSubArraySum(nums)\n  --\
    \ Write your code here.\n  return -1\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwn4n8qe_.lua:12:\
    \ expected: 1, actual: -1\nstack traceback:\n\t/tmp/tmpwn4n8qe_.lua:12: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823748
- exit_code: 1
  program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\nlocal function minSubArraySum(nums)\n\t\
    local sum = 0\n\tlocal i = 1\n\twhile i < #nums do\n\t\tsum = sum + nums[i]\n\t\
    \ti = i + 1\n\tend\n\treturn sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2,\
    \ 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl0blkag3.lua:17:\
    \ expected: 1, actual: 12\nstack traceback:\n\t/tmp/tmpl0blkag3.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823748
- exit_code: 1
  program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\nlocal function minSubArraySum(nums)\n  --\
    \ Base case: If the input array is empty, the answer is 0\n  if #nums == 0 then\n\
    \    return 0\n  end\n  -- Base case: If there is only one element in the array,\
    \ the answer is it\n  if #nums == 1 then\n    return nums[1]\n  end\n  -- Find\
    \ the minimum sum of the first and second element\n  local low = #nums\n  local\
    \ high = #nums\n  local subArraySum1 = nums[low] + nums[low - 1]\n  local subArraySum2\
    \ = nums[low - 1] + nums[low]\n  -- If there are more than 2 elements in the array,\
    \ find the minimum sum\n  -- of all elements\n  if high > 2 then\n    low = low\
    \ / 2\n    high = high / 2\n    subArraySum1 = nums[low] + nums[low - 1]\n   \
    \ subArraySum2 = nums[low - 1] + nums[low]\n  end\n  -- Find out if the minimum\
    \ of first and second element is greater\n  local subArraySum1GreaterThanSubArraySum2\
    \ = subArraySum1 > subArraySum2\n  -- Find the minimum of first element and the\
    \ second element\n  local subArraySum2LessThanSubArraySum1 = subArraySum2 < subArraySum1\n\
    \  -- If the minimum of first and second element is greater than the minimum\n\
    \  -- of both elements, then we consider the sub-array to be a subarray of the\n\
    \  -- original array\n  if subArraySum1GreaterThanSubArraySum2 then\n    -- If\
    \ the second element is greater than the first element, then the sum\n    -- of\
    \ both elements is greater than the sum of first and second element\n    if subArraySum2LessThanSubArraySum1\
    \ then\n      return subArraySum1\n    else\n      return subArraySum2\n    end\n\
    \  else\n    -- If the second element is less than the first element, then the\
    \ sum of\n    -- the second element is less than the sum of the first element\n\
    \    return subArraySum2\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2,\
    \ 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbrm64wms.lua:51:\
    \ expected: 1, actual: 7\nstack traceback:\n\t/tmp/tmpbrm64wms.lua:51: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823748
- exit_code: 1
  program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\nlocal function minSubArraySum(nums)\n  \
    \  local sum = 0\n    for _, num in ipairs(nums) do\n        sum = sum + num\n\
    \    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2,\
    \ 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9szi27_4.lua:15:\
    \ expected: 1, actual: 16\nstack traceback:\n\t/tmp/tmp9szi27_4.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823748
- exit_code: 1
  program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\nlocal function minSubArraySum(nums)\n  \
    \  local function helper(start, end)\n        if start > end then return 0 end\n\
    \        local leftSum, rightSum = helper(start + 1, end), helper(start, end -\
    \ 1)\n        return leftSum + rightSum\n    end\n    return helper(1, #nums)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n\
    \    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n \
    \   lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0,\
    \ 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}),\
    \ -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10,\
    \ 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}),\
    \ -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp72_i32ez.lua:5: <name> or ''...'' expected near ''end''

    '
  stdout: ''
  timestamp: 1659823748
- exit_code: 1
  program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\nlocal function minSubArraySum(nums)\n  \
    \  local min = sys.maxint\n    local index\n    for index, v in ipairs(nums) do\n\
    \        min = min > v then\n            min\n        else\n            min =\
    \ min - v + index\n        end\n    end\n    return min\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp_vuyh0ye.lua:8: unexpected symbol near ''then''

    '
  stdout: ''
  timestamp: 1659823748
- exit_code: 1
  program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\nlocal function minSubArraySum(nums)\n  local\
    \ min_sum = tonumber(tostring(nums))\n  local min_subarray_sum = 0\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpb9otor48.lua:25: ''end'' expected (to close ''function'' at
    line 4) near <eof>

    '
  stdout: ''
  timestamp: 1659823748
- exit_code: 1
  program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\nlocal function minSubArraySum(nums)\n  \
    \ assert(nums:len() == 2)\n   -- This code assumes all the numbers in the array\
    \ are positive\n   -- if they are not, we can always add a check for that.\n \
    \  local sum = 0\n   for i = 1, nums[1] do\n      sum = sum + nums[i]\n   end\n\
    \   if sum < nums[1] then\n      -- If the sum of the numbers is less than the\
    \ smallest number in the array\n      -- the array is invalid.\n      return nil\n\
    \   end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n  \
    \  lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp4mpsu13r.lua:35: ''end'' expected (to close ''function'' at
    line 4) near <eof>

    '
  stdout: ''
  timestamp: 1659823748
- exit_code: 1
  program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\nlocal function minSubArraySum(nums)\n\t\
    local min = nums[1]\n\tfor _, num in ipairs(nums[2:]) do\n\t\tif min > num then\n\
    \t\t\tmin = num\n\t\tend\n\tend\n\treturn min\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpzetsvm_0.lua:6: '']'' expected near '':''

    '
  stdout: ''
  timestamp: 1659823748
- exit_code: 1
  program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\nlocal function minSubArraySum(nums)\n  \
    \ local minimumSum = #nums - 1\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2,\
    \ 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpsacoqplw.lua:24: ''end'' expected (to close ''function'' at
    line 4) near <eof>

    '
  stdout: ''
  timestamp: 1659823748
- exit_code: 1
  program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\nlocal function minSubArraySum(nums)\n  --\
    \ Base case: empty array\n  if nums == nil then return end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpfg43g78m.lua:25: ''end'' expected (to close ''function'' at
    line 4) near <eof>

    '
  stdout: ''
  timestamp: 1659823748
- exit_code: 1
  program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\nlocal function minSubArraySum(nums)\n\t\
    -- Base case: if the array is empty\n\tif #nums == 0 then\n\t\treturn 0\n\tend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n\
    \    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n \
    \   lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0,\
    \ 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}),\
    \ -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10,\
    \ 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}),\
    \ -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpjlh4257h.lua:27: ''end'' expected (to close ''function'' at
    line 4) near <eof>

    '
  stdout: ''
  timestamp: 1659823748
- exit_code: 1
  program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\nlocal function minSubArraySum(nums)\n\t\
    -- Base case: empty list\n\tif #nums == 0 then\n\t\treturn 0\n\tend\n\t-- Sub-case:\
    \ single element\n\tif #nums == 1 then\n\t\treturn nums[1]\n\tend\n\t-- Find subarray\n\
    \tlocal lower = 1\n\tlocal upper = #nums\n\tlocal sum = 0\n\twhile lower < upper\
    \ do\n\t\tsum = sum + nums[lower]\n\t\tlower = lower + 1\n\tend\n\treturn sum\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n\
    \    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n \
    \   lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0,\
    \ 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}),\
    \ -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10,\
    \ 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}),\
    \ -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4p4em722.lua:27:\
    \ expected: 1, actual: 12\nstack traceback:\n\t/tmp/tmp4p4em722.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823748
- exit_code: 1
  program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\nlocal function minSubArraySum(nums)\n  \
    \  local min = 0\n    for _, elem in ipairs(nums) do\n        if min > elem then\n\
    \            min = elem\n        end\n    end\n    return min\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmc2wmzu0.lua:17:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpmc2wmzu0.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823748
- exit_code: 1
  program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\nlocal function minSubArraySum(nums)\n  \
    \  -- Base Case\n    if #nums <= 1 then\n        return nums[1]\n    end\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n\
    \    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n \
    \   lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0,\
    \ 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}),\
    \ -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10,\
    \ 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}),\
    \ -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp2ytv8z1t.lua:27: ''end'' expected (to close ''function'' at
    line 4) near <eof>

    '
  stdout: ''
  timestamp: 1659823748
- exit_code: 1
  program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\nlocal function minSubArraySum(nums)\n  local\
    \ minSum = math.inf\n  local currSum = 0\n  for _, v in ipairs(nums) do\n    currSum\
    \ = currSum + v\n    minSum = math.min(minSum, currSum)\n  end\n  return minSum\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n\
    \    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n \
    \   lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0,\
    \ 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}),\
    \ -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10,\
    \ 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}),\
    \ -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: 'E

    Tests with errors:

    ------------------

    1) test_humaneval

    attempt to compare number with nil

    stack traceback:


    Ran 1 tests in 0.000 seconds, 0 successes, 1 error

    '
  timestamp: 1659823748
- exit_code: 1
  program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\nlocal function minSubArraySum(nums)\n  \
    \  assert(numel(nums) > 0)\n    assert(numel(nums) <= 10)\n    if numel(nums)\
    \ == 1 then\n        return nums[1]\n    end\n    local i = 1\n    local sum =\
    \ 0\n    while i <= numel(nums) do\n        sum = sum + nums[i]\n        i = i\
    \ + 1\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2,\
    \ 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprxivafn2.lua:5:\
    \ attempt to call a nil value (global 'numel')\nstack traceback:\n\t/tmp/tmprxivafn2.lua:5:\
    \ in local 'candidate'\n\t/tmp/tmprxivafn2.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823748
- exit_code: 1
  program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\nlocal function minSubArraySum(nums)\n  \
    \  local result = 0\n    for _, v in ipairs(nums) do\n        if result < v then\n\
    \            result = v\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxhl80p_j.lua:17:\
    \ expected: 1, actual: 4\nstack traceback:\n\t/tmp/tmpxhl80p_j.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823748
- exit_code: 1
  program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\nlocal function minSubArraySum(nums)\n  \
    \  -- Initialize to empty value\n    local sum = 0\n    -- For each subarray\n\
    \    for i = 1, #nums do\n        -- If the current value is not equal to or greater\
    \ than the minimum sum, update sum\n        if nums[i] ~= nil and nums[i] < sum\
    \ then\n            sum = nums[i]\n        end\n    end\n    -- Return the minimum\
    \ sum\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2,\
    \ 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr3u5hc49.lua:21:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpr3u5hc49.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823748
- exit_code: -1
  program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\nlocal function minSubArraySum(nums)\n  \
    \ if #nums == 1 then return nums[1] end\n   if #nums == 2 then return nums[1]\
    \ + nums[2] end\n   local lower, upper = 1, nums[#nums] - 1\n   while lower <=\
    \ upper do\n      local mid = math.floor((lower + upper) / 2)\n      if nums[mid]\
    \ > lower then upper = mid else lower = mid end\n   end\n   return nums[lower]\
    \ + minSubArraySum(nums[lower + 1 .. upper])\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659823753
- exit_code: 1
  program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\nlocal function minSubArraySum(nums)\n  --\
    \ Base case\n  if #nums == 0 then\n    return 0\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp1sz4igs3.lua:27: ''end'' expected (to close ''function'' at
    line 4) near <eof>

    '
  stdout: ''
  timestamp: 1659823747
- exit_code: 1
  program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\nlocal function minSubArraySum(nums)\n  \
    \  local total = 0\n    local minSum = -1\n    for i = 1, #nums do\n        if\
    \ minSum == -1 then\n            total = total + nums[i]\n            if total\
    \ > minSum then\n                minSum = total\n            end\n        elseif\
    \ nums[i] < minSum then\n            total = total + nums[i]\n            if total\
    \ > minSum then\n                minSum = total\n            end\n        elseif\
    \ nums[i] == minSum then\n            total = total + nums[i]\n        end\n \
    \   end\n    return minSum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2,\
    \ 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm6_qjrpa.lua:28:\
    \ expected: 1, actual: 9\nstack traceback:\n\t/tmp/tmpm6_qjrpa.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823748
- exit_code: 1
  program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\nlocal function minSubArraySum(nums)\n  \
    \ local result = 0\n   for i = 1,#nums do\n      local current = nums[i]\n   \
    \   for j = i+1,#nums do\n         local next = nums[j]\n         local sum =\
    \ current + next\n         if sum ~= result then\n            -- If sum is not\
    \ the result so far, then update it.\n            if sum < result then\n     \
    \          result = sum\n            end\n         end\n      end\n   end\n  \
    \ return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}),\
    \ 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr_lo3o7o.lua:25:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpr_lo3o7o.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823748
- exit_code: 1
  program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\nlocal function minSubArraySum(nums)\n  \
    \  local minSum = 0\n    local n = #nums\n    for i = 1, n do\n        local sum\
    \ = nums[i]\n        for j = i + 1, n do\n            sum = sum + nums[j]\n  \
    \      end\n        if sum < minSum then\n            minSum = sum\n        end\n\
    \    end\n    return minSum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2,\
    \ 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp62jj715q.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp62jj715q.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823748
- exit_code: 1
  program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\nlocal function minSubArraySum(nums)\n  \
    \  if nums == nil then\n        return 0\n    end\n    local minimum = tonumber(nums[1])\n\
    \    for i = 2, #nums do\n        minimum = math.min(minimum, tonumber(nums[i]))\n\
    \    end\n    return minimum\nend\nprint(minSubArraySum({\"6\", \"3\", \"9\",\
    \ \"4\"}))\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n  \
    \  lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "3\nF\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5u0pmlcp.lua:20:\
    \ expected: -6, actual: -3\nstack traceback:\n\t/tmp/tmp5u0pmlcp.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823748
- exit_code: 1
  program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\nlocal function minSubArraySum(nums)\n  \
    \  local subArraySum = 0\n    for i = 1,#nums do\n        if i > 1 then\n    \
    \        subArraySum = subArraySum + nums[i]\n        end\n    end\n    return\
    \ subArraySum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}),\
    \ 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmporajc0up.lua:17:\
    \ expected: 1, actual: 14\nstack traceback:\n\t/tmp/tmporajc0up.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823748
- exit_code: 1
  program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\nlocal function minSubArraySum(nums)\n  --\
    \ base case: array is empty\n  if #nums == 0 then return 0 end\n  -- base case:\
    \ one element in the array\n  if #nums == 1 then return nums[1] end\n  -- base\
    \ case: the array is one element long\n  if #nums == 2 then return nums[1] + nums[2]\
    \ end\n  -- recursive case: divide and conquer\n  local min = nums[1] + nums[2]\n\
    \  local minIndex = 2 -- starting at 2, the last position in the array\n  local\
    \ numsSize = #nums\n  for i = 2, numsSize do\n    local nextNum = nums[i]\n  \
    \  local subArraySize = i - 1\n    local lastSubArraySize = subArraySize - 1\n\
    \    local lastMin = min\n    local lastMinIndex = lastSubArraySize -- starting\
    \ at 2, the last position in the array\n    local subArraySum = lastMinIndex +\
    \ lastMin\n    for subArrayIndex = 1, subArraySize do\n      -- subarray sum is\
    \ in the range of the array itself\n      -- SubarraySum >= min, so no subarray\
    \ sums will be lower than min\n      local subArraySumBeforeMin = subArraySum\
    \ - min\n      local subArraySumAfterMin = subArraySum - lastMin\n      local\
    \ subArraySumBeforeMinDiff = subArraySumBeforeMin - lastMin\n      -- SubarraySum\
    \ is lower than min, so no subarray sums will be larger than min\n      local\
    \ subArraySumAfterMinDiff = subArraySumAfterMin - lastMin\n      local subArraySumBeforeMinDiffIsNegative\
    \ = subArraySumBeforeMinDiff < 0\n      local subArraySumAfterMinDiffIsNegative\
    \ = subArraySumAfterMinDiff < 0\n      if subArraySumBeforeMinDiff ~= 0 then\n\
    \        subArraySum = lastMin\n        -- SubarraySumBeforeMinDiff > 0, so set\
    \ subArraySum to min\n        if subArraySumBeforeMinDiffIsNegative then\n   \
    \       subArraySum = min\n        else\n          subArraySum = lastMin\n   \
    \     end\n      elseif subArraySumAfterMinDiff ~= 0 then\n        subArraySum\
    \ = lastMin\n        -- SubarraySumAfterMinDiff > 0, so set subArraySum to min\n\
    \        if subArraySumAfterMinDiffIsNegative then\n          subArraySum = min\n\
    \        else\n          subArraySum = lastMin\n        end\n      else\n    \
    \    -- subArraySum == 0, so set subArraySum to min\n        if subArraySumBeforeMinDiff\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n\
    \    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n \
    \   lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0,\
    \ 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}),\
    \ -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10,\
    \ 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}),\
    \ -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp63n1jb9p.lua:51: ''then'' expected near ''lu''

    '
  stdout: ''
  timestamp: 1659823748
- exit_code: 1
  program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\nlocal function minSubArraySum(nums)\n\t\
    local sum = math.max(nums[1])\n\tfor i = 2, #nums do\n\t\tsum = sum + nums[i]\n\
    \t\tif sum > math.max(nums[i]) then return nil end\n\tend\n\treturn sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n\
    \    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n \
    \   lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0,\
    \ 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}),\
    \ -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10,\
    \ 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}),\
    \ -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6h8sdiib.lua:16:\
    \ expected: 1, actual: nil\nstack traceback:\n\t/tmp/tmp6h8sdiib.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823748
- exit_code: 1
  program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\nlocal function minSubArraySum(nums)\n  --\
    \ Base cases\n  if #nums == 0 then\n    return 0\n  elseif #nums == 1 then\n \
    \   return nums[1]\n  end\n  -- Inductive cases\n  local i = 0\n  local sum =\
    \ 0\n  while i < #nums do\n    sum = nums[i]:min(sum + nums[i+1])\n    i = i +\
    \ 2\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2,\
    \ 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphi_irvyg.lua:15:\
    \ attempt to index a nil value (field '?')\nstack traceback:\n\t/tmp/tmphi_irvyg.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmphi_irvyg.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823748
- exit_code: 1
  program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\nlocal function minSubArraySum(nums)\n  \
    \  local min = math.max(xlua.nil, 0)\n    for i = 1, #nums do\n        local current_min\
    \ = math.min(nums[i])\n        min = math.min(current_min, min)\n    end\n   \
    \ return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}),\
    \ 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpsnjxhtlx.lua:5: <name> expected near ''nil''

    '
  stdout: ''
  timestamp: 1659823748
- exit_code: 1
  program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\nlocal function minSubArraySum(nums)\n  local\
    \ function sumSubArray(arr, start, num)\n    local sum = 0\n    for i=start,num+1\
    \ do\n      if arr[i] ~= nil then\n        sum = sum + arr[i]\n      end\n   \
    \ end\n    return sum\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2,\
    \ 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpr5_79rki.lua:32: ''end'' expected (to close ''function'' at
    line 4) near <eof>

    '
  stdout: ''
  timestamp: 1659823748
- exit_code: 1
  program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\nlocal function minSubArraySum(nums)\n  \
    \  local minimum = math.min(nums)\n    for i = 1, #nums do\n        if minimum\
    \ > nums[i] then\n            minimum = nums[i]\n        end\n    end\n    return\
    \ minimum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n  \
    \  lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprr_l6l96.lua:7:\
    \ attempt to compare number with table\nstack traceback:\n\t/tmp/tmprr_l6l96.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmprr_l6l96.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823748
- exit_code: 1
  program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\nlocal function minSubArraySum(nums)\n  local\
    \ numsSize = #nums\n  local sum = 0\n  local minSum = numsSize\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpj6y4922k.lua:26: ''end'' expected (to close ''function'' at
    line 4) near <eof>

    '
  stdout: ''
  timestamp: 1659823748
- exit_code: 1
  program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\nlocal function minSubArraySum(nums)\n  \
    \ local lower = false\n   local sum = 0\n   for i = 1, #nums do\n      sum = sum\
    \ + nums[i]\n      if low then\n         if sum < lower then\n            lower\
    \ = sum\n         end\n      else\n         lower = sum\n      end\n   end\n \
    \  return lower\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}),\
    \ 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgdcno6as.lua:23:\
    \ expected: 1, actual: 16\nstack traceback:\n\t/tmp/tmpgdcno6as.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823748
- exit_code: 1
  program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\nlocal function minSubArraySum(nums)\n  --\
    \ Base Case: nums is empty\n  if #nums == 0 then\n    return 0\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpuvegc602.lua:27: ''end'' expected (to close ''function'' at
    line 4) near <eof>

    '
  stdout: ''
  timestamp: 1659823748
- exit_code: 1
  program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\nlocal function minSubArraySum(nums)\n  \
    \  if #nums < 2 then\n        return nil\n    end\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpsxct30pl.lua:26: ''end'' expected (to close ''function'' at
    line 4) near <eof>

    '
  stdout: ''
  timestamp: 1659823748
- exit_code: 1
  program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\nlocal function minSubArraySum(nums)\n  \
    \  -- Your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2,\
    \ 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx6a1g6cq.lua:11:\
    \ expected: 1, actual: nil\nstack traceback:\n\t/tmp/tmpx6a1g6cq.lua:11: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823748
- exit_code: 1
  program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\nlocal function minSubArraySum(nums)\n  \
    \  local function loop(arr, sum)\n        if arr[1] == nil then return sum end\n\
    \        return loop(arr[1], sum + arr[1]) or loop(arr[2], sum + arr[2])\n   \
    \ end\n    return loop(table.unpack(nums), 0)\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphw63h9u1.lua:6:\
    \ attempt to index a number value (local 'arr')\nstack traceback:\n\t/tmp/tmphw63h9u1.lua:6:\
    \ in function </tmp/tmphw63h9u1.lua:5>\n\t(...tail calls...)\n\t/tmp/tmphw63h9u1.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659823748
- exit_code: 1
  program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\nlocal function minSubArraySum(nums)\n  --\
    \ Base case: if the input is empty or has only one element, the result is the\
    \ only element.\n  if #nums == 0 or #nums == 1 then return nums[1] end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmph4ua030k.lua:25: ''end'' expected (to close ''function'' at
    line 4) near <eof>

    '
  stdout: ''
  timestamp: 1659823748
- exit_code: 1
  program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\nlocal function minSubArraySum(nums)\n  return\
    \ math.min(\n    math.max(nums[1], 0),\n    math.min(\n      math.max(nums[2],\
    \ 0),\n      math.min(\n        math.max(nums[3], 0),\n        math.min(\n   \
    \       math.max(nums[4], 0),\n          math.min(\n            math.max(nums[5],\
    \ 0),\n            math.min(\n              math.max(nums[6], 0),\n          \
    \    math.min(\n                math.max(nums[7], 0),\n                math.min(\n\
    \                  math.max(nums[8], 0),\n                  math.min(\n      \
    \              math.max(nums[9], 0),\n                    math.min(\n        \
    \              math.max(nums[10], 0),\n                      math.min(\n     \
    \                   math.max(nums[11], 0),\n                        math.min(\n\
    \                          math.max(nums[12], 0),\n                          math.min(\n\
    \                            math.max(nums[13], 0),\n                        \
    \    math.min(\n                              math.max(nums[14], 0),\n       \
    \                       math.min(\n                                math.max(nums[15],\
    \ 0),\n                                math.min(\n                           \
    \       math.max(nums[16], 0),\n                                  math.min(\n\
    \                                    math.max(nums[17], 0),\n                \
    \                    math.min(\n                                      math.max(nums[18],\
    \ 0),\n                                      math.min(\n                     \
    \                   math.max(nums[19], 0),\n                                 \
    \       math.min(\n                                          math.max(nums[20],\
    \ 0),\n                                          math.min(\n                 \
    \                           math.max(nums[21], 0),\n                         \
    \                   math.min(\n                                              math.max(nums[22],\
    \ 0),\n                                              math.min(\n             \
    \                                   math.max(nums[23], 0),\n                 \
    \                               math.min(\n                                  \
    \                math.max(nums[24], 0),\n                                    \
    \              math.min(\n                                                   \
    \ math.max(nums[25], 0),\n                                                   \
    \ math.min(\n                                                      math.max(nums[26],\
    \ 0),\n                                                      math.min(\n     \
    \                                                   math.max(nums[27], 0),\n \
    \                                                       math.min(\n          \
    \                                                math.max(nums[28], 0),\n    \
    \                                                      math.min(\n           \
    \                                                 math.max(nums[29], 0),\n   \
    \                                                         math.min(\n        \
    \                                                      math.max(nums[30], 0),\n\
    \                                                              math.min(\n   \
    \                                                             math.max(nums[31],\
    \ 0),\n                                                                math.min(\n\
    \                                                                  math.max(nums[32],\
    \ 0),\n                                                                  math.min(\n\
    \                                                                    math.max(nums[33],\
    \ 0),\n                                                                    math.min(\n\
    \                                                                      math.max(nums[34],\
    \ 0),\n                                                                      math.min(\n\
    \                                                                        math.max(nums[35],\
    \ 0),\n                                                                      \
    \  math.min(\n                                                               \
    \           math.max(nums[36], 0),\n                                         \
    \                                 math.min(\n                                \
    \                                            math.max(nums[37], 0),\n        \
    \                                                                    math.min(\n\
    \                                                                            \
    \  math.max(nums[38], 0),\n                                                  \
    \                            math.min(\n                                     \
    \                                           math.max(nums[39], 0),\n         \
    \                                                       \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp38d9q91w.lua:84: '')'' expected (to close ''('' at line 81)
    near ''=''

    '
  stdout: ''
  timestamp: 1659823748
- exit_code: 1
  program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\nlocal function minSubArraySum(nums)\n  \
    \  -- Write your code here.\nend\n</cell>\n<cell>\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpptgyaxo6.lua:7: unexpected symbol near ''<''

    '
  stdout: ''
  timestamp: 1659823748
- exit_code: 1
  program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\nlocal function minSubArraySum(nums)\n  local\
    \ minSum = math.inf\n  for i = 1, #nums do\n    minSum = math.max(minSum, nums[i]\
    \ + minSubArraySum(nums[(i+1):]))\n  end\n  return minSum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpa_lezpf3.lua:7: <name> expected near '']''

    '
  stdout: ''
  timestamp: 1659823748
- exit_code: 1
  program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\nlocal function minSubArraySum(nums)\n  \
    \ local retVal = math.min(nums)\n   for i = #nums, 2, -1 do\n      retVal = math.min(retVal,\
    \ nums[i] - nums[i - 1])\n   end\n   return retVal\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: 'E

    Tests with errors:

    ------------------

    1) test_humaneval

    attempt to compare number with table

    stack traceback:


    Ran 1 tests in 0.000 seconds, 0 successes, 1 error

    '
  timestamp: 1659823748
- exit_code: 1
  program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\nlocal function minSubArraySum(nums)\n  \
    \  -- the minimum sum of any non-empty sub-array is zero\n    -- (because an empty\
    \ sub-array is any consecutive sequence of zeros)\n    return 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfn_thubm.lua:13:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpfn_thubm.lua:13: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823748
- exit_code: 1
  program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\nlocal function minSubArraySum(nums)\n  local\
    \ sum = 0\n  for i = 1, #nums do\n    sum = sum + nums[i]\n  end\n  return sum\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n\
    \    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n \
    \   lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0,\
    \ 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}),\
    \ -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10,\
    \ 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}),\
    \ -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpncpc8dxe.lua:15:\
    \ expected: 1, actual: 16\nstack traceback:\n\t/tmp/tmpncpc8dxe.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823748
- exit_code: 1
  program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\nlocal function minSubArraySum(nums)\n\t\
    -- Base case\n\tif #nums == 0 then\n\t\treturn 0\n\tend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpaladbwz3.lua:27: ''end'' expected (to close ''function'' at
    line 4) near <eof>

    '
  stdout: ''
  timestamp: 1659823748
- exit_code: 1
  program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\nlocal function minSubArraySum(nums)\n  \
    \  local sum = 0\n    for _, num in pairs(nums) do\n        sum = sum + num\n\
    \    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2,\
    \ 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkdcr2ayj.lua:15:\
    \ expected: 1, actual: 16\nstack traceback:\n\t/tmp/tmpkdcr2ayj.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823748
- exit_code: 1
  program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\nlocal function minSubArraySum(nums)\n  \
    \ -- Start with an empty minimum sum\n   local minSum = math.nan\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp9ces0bbd.lua:25: ''end'' expected (to close ''function'' at
    line 4) near <eof>

    '
  stdout: ''
  timestamp: 1659823748
- exit_code: 1
  program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\nlocal function minSubArraySum(nums)\n  \
    \  local minimum\n    local i\n    for i = 1, #nums do\n        local minimum\
    \ = minimum or nums[i]\n        minimum = minimum + nums[i] -- Add current value\
    \ to current minimum sum\n    end\n    return minimum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzd35bn6q.lua:17:\
    \ expected: 1, actual: nil\nstack traceback:\n\t/tmp/tmpzd35bn6q.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823748
- exit_code: 1
  program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\nlocal function minSubArraySum(nums)\n  \
    \  -- base case\n    if #nums == 0 then\n        return nums[1]\n    end\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n\
    \    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n \
    \   lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0,\
    \ 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}),\
    \ -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10,\
    \ 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}),\
    \ -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpeacza_b8.lua:27: ''end'' expected (to close ''function'' at
    line 4) near <eof>

    '
  stdout: ''
  timestamp: 1659823748
- exit_code: 1
  program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\nlocal function minSubArraySum(nums)\n  \
    \  if not nums or #nums == 0 then return nil end\n    -- Sort the numbers first,\
    \ to make things easier.\n    table.sort(nums)\n    -- Find a sub-array that starts\
    \ at 0\n    local i, j = 0, 1\n    while j < #nums do\n        if nums[j] <= nums[i]\
    \ then return nums[i] end\n        i = i + 1\n        j = j + 1\n    end\n   \
    \ return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}),\
    \ 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxgcgjxto.lua:11:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpxgcgjxto.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpxgcgjxto.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823748
- exit_code: 1
  program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\nlocal function minSubArraySum(nums)\n  \
    \  local sum = 0\n    for i = 1, #nums do\n        local element = nums[i]\n \
    \       sum = element + sum\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7q2_u1_w.lua:16:\
    \ expected: 1, actual: 16\nstack traceback:\n\t/tmp/tmp7q2_u1_w.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823748
