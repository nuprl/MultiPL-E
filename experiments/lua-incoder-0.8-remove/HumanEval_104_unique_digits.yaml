name: HumanEval_104_unique_digits
language: lua
prompt: "-- Given a list of positive integers x. return a sorted list of all \n--\
  \ elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
  \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
  \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
  \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
  \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\n\
  os.exit(lu.LuaUnit.run())"
completions: ["  local ret = {}\n  local index = 1", "    local t = {}\n    for i=1,#x\
    \ do\n        local y = x[i]\n        while y > 0 do\n            t[y] = true\n\
    \            y = y/10\n        end\n    end\n    local ret = {}\n    for i = 1,#t\
    \ do\n        if t[i] then table.insert(ret, i) end\n    end\n    return ret\n\
    end", "  -- Write your code here.\n  return nil\nend", "    local t = {}\n   \
    \ for i = 1, #x do\n        if x[i] > 0 then\n            local digit = x[i] %\
    \ 10\n            if digit ~= 0 then\n                table.insert(t, digit)\n\
    \            end\n        end\n    end\n    return t\nend", "    local function\
    \ is_odd(x)\n        return x % 2 ~= 0\n    end\n    \n    local t = {}\n    local\
    \ i = 1\n    local j = #x", "  local result = {}\n  for i = 1, #x do \n    if\
    \ x[i] % 2 == 0 then\n      result[#result+1] = x[i]\n    end\n  end\n  table.sort(result)\n\
    \  return result\nend", "  local ret = {}\n  for i = 1, #x do\n    -- Check if\
    \ this integer has any even digit.\n    -- If yes, save it in ret list. \n   \
    \ if x:sub(i,i) ~= '0' then\n      table.insert(ret,x:sub(i,i))\n    end\n  end\n\
    \  table.sort(ret)\n  return ret\nend", "    -- Code here\nend", "   local ret\
    \ = {}\n   for i, v in ipairs(x) do\n      local t = math.floor(v / 10)\n    \
    \  if t % 2 == 1 then\n         table.insert(ret, t)\n      end\n   end\n   return\
    \ ret\nend", "   local function is_odd(x)\n      return x:sub(1,1) == '1'\n  \
    \ end", "  local y = {}\n  local xlen = #x\n  for i = 1, xlen do\n    if not x[i\
    \ - 1] then\n      if y[i] == 0 then\n\ty[i - 1] = i\n      else\n\ty[i - 1] =\
    \ y[i]\n\tx[i] = i - 1\n\tx[x[i]] = i\n      end\n    end\n  end\n  return table.concat(y,\
    \ \"\")\nend", "\tassert(type(x) == \"number\" and x > 0 and x < 100, \n\t\t\t\
    \"Expected positive integer\")\n\tlocal ud = {}\n\tfor x in pairs(x) do\n\t\t\
    if math.floor(x) == x then\n\t\t\tlocal d = math.floor(x)\n\t\t\tif d == d then\n\
    \t\t\t\ttable.insert(ud, d)\n\t\t\tend\n\t\tend\n\tend\n\treturn table.sort(ud)\n\
    end", "  local function f(n) \n    if n > 9 then\n      f(n/10)\n    end\n  end\n\
    \  local u = {}\n  for i = 1, #x do\n    if x[i]~='0' and x[i]%2 ~= 0 then\n \
    \     local k = x[i]\n      while k*10 <= i do\n        k = k*10\n      end\n\
    \      u[k] = true\n    end\n  end\n  local z = {}\n  local k = 0\n  for i = 1,\
    \ 10 do\n    if u[i] then\n      z[k] = i\n      k = k + 1\n    end\n  end\n \
    \ return z\nend", "    local new_x = {}\n    for i=1, #x do\n        local digit_count\
    \ = tonumber(x[i])\n        if digit_count == 0 then\n            new_x[i] = x[i]\n\
    \        else\n            new_x[i] = x[i]\n            for j=1, digit_count do\n\
    \                new_x[i] = new_x[i] * 10\n            end\n        end\n    end\n\
    \    return new_x\nend\n    ", "    local output = {}\n    for i = 1, #x do\n\
    \        if x[i] > 0 then\n            local temp = {}\n            for j = 1,\
    \ #output do\n                if x[i] == output[j] or x[i] % output[j] == 0\n\
    \                then\n                    table.insert(temp, j)\n           \
    \     else\n                    break\n                end\n            end\n\
    \            table.insert(output, table.maxn(temp))\n        end\n    end\n  \
    \  return output\nend", "    local ret = {}\n    for i=1,#x do\n        if x[i]\
    \ % 2 == 0 then\n            table.insert(ret, x[i])\n        end\n    end\n \
    \   return table.sort(ret)\nend\nprint(unique_digits({\"2\", \"3\", \"4\", \"\
    5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\"}))", "   -- Check whether x is\
    \ empty\n   if x == nil then\n      return nil\n   end", "  local ret = {}\n \
    \ for i = 1, #x do\n    if math.mod(tonumber(x[i]), 2) ~= 0 then\n      table.insert(ret,\
    \ x[i])\n    end\n  end\n  return ret\nend", "  local result = {}\n  for i = 1,\
    \ #x do\n    if x[i] % 2 == 0 then\n      table.insert(result, x[i])\n    end\n\
    \  end\n  table.sort(result)\n  return result\nend", "  -- The first element of\
    \ returned list should be 'x' \n  -- in increasing order \n  -- The next elements\
    \ are all elements that hasn't any \n  -- even digit in increasing order.\n  local\
    \ result = {}\n  local digit_sum = 0\n  for i = 1, #x do\n    local digit = x[i]\n\
    \    -- Check whether 'digit' has any even digit.\n    -- If it has any even digit,\
    \ ignore it \n    -- If it hasn't any even digit, add it to result list \n   \
    \ digit_sum = digit_sum + digit\n    -- If 'x' has any odd digit, \n    -- ignore\
    \ it, otherwise, add it to result list.\n    if digit_sum and digit_sum % 2 ==\
    \ 1 then break end\n    -- Add the digit to result list.\n    table.insert(result,\
    \ digit)\n  end\n  return result\nend", "  local ret = {}\n  for i = 1, #x do\n\
    \    if not is_divisible(x[i],2) then\n      table.insert(ret,x[i])\n    end\n\
    \  end\n  return ret\nend\nprint(unique_digits({10, 20, 10, 20}))\n</cell>\n<cell>",
  "  local a = {}\n  for i = 1, #x do -- iterate from 1st to last element\n    local\
    \ s = x[i] -- current element\n    for j = 2, #a do -- iterate from 2nd to last\
    \ element\n      if s % 10 == a[j] then -- if already existing number, skip it\n\
    \        a[j] = nil\n        break\n      end\n    end\n    if a[1] == nil then\
    \ -- if 1st element doesn't exist, add it\n      a[1] = s\n      break\n    end\n\
    \  end\n  -- sort and return it\n  return table.sort(a)\nend", "  local function\
    \ is_even(v)\n    return v ~= 0 and v % 2 == 0\n  end\n  local function unique_digits_aux(v)\n\
    \    if v == 0 then\n      return\n    end\n    if is_even(v) then\n      unique_digits_aux(v\
    \ / 2)\n    end\n    unique_digits_aux(v * 10 + v % 2)\n  end\n  unique_digits_aux(x)\n\
    \  return unique_digits\nend", "  local i = 1\n  local out = { }\n  while i <=\
    \ #x do\n    local digit = x[i]\n    if digit:sub(1,1) ~= '0' then \n      if\
    \ out ~= nil then \n        out[#out + 1] = x[i]\n      end\n    end\n    i =\
    \ i + 1\n  end\n  if out ~= nil then\n    out[#out + 1] = x[i]\n  end\n  return\
    \ out\nend", "    assert(is_sorted(x), \"argument is not sorted\")\n    local\
    \ function is_even(i)\n        return i ~= 0 and math.mod(i, 2) == 0\n    end\n\
    \    local function is_unique_digits(i)\n        -- check whether i is unique\
    \ digit.\n        for j = 1, #i do\n            if is_even(i[j]) then\n      \
    \          return false\n            end\n        end\n        return true\n \
    \   end\n    local function unique_digits_2(x)\n        assert(is_sorted(x), \"\
    argument is not sorted\")\n        local function is_unique_digits(i)\n      \
    \      -- check whether i is unique digit.\n            for j = 1, #i do\n   \
    \             if math.mod(i[j], 2) == 0 then\n                    return false\n\
    \                end\n            end\n            return true\n        end\n\
    \        -- create result list.\n        local results = {}\n        for i = 1,\
    \ #x do\n            if is_unique_digits(x[i]) then\n                results[#results\
    \ + 1] = x[i]\n            end\n        end\n        return results\n    end\n\
    \    -- call unique_digits_2.\n    return unique_digits_2(x)\nend", "    -- Base\
    \ case\n    if #x == 0 then \n        -- Return an empty list \n        return\
    \ nil\n    end \n    \n    -- Sort the list\n    local sorted_list = x\n    for\
    \ idx = 2, #x do\n        table.insert(sorted_list, x[idx])\n    end \n    table.sort(sorted_list)",
  "  local a = {}\n  for i = 1, #x do\n    if x[i] % 2 == 0 then\n      table.insert(a,\
    \ x[i])\n    end\n  end\n  return a\nend", "    local ret = {}\n    for i=1,#x\
    \ do\n        if x[i] % 2 == 0 then\n            table.insert(ret, x[i])\n   \
    \     end\n    end\n    return ret\nend", "   local output = {}\n   for _,v in\
    \ ipairs(x) do output[math.floor(v / 10) * 10 + math.mod(v,10)] = true end\n \
    \  -- Sort list in increasing order.\n   return table.sort(output)\nend\nprint(unique_digits({\
    \ 1, 2, 3, 9 }))\nprint(unique_digits({ 4, 6, 8, 12, 15, 19, 22, 23, 25, 30 }))\n\
    print(unique_digits({ 1, 2, 3, 4, 5 }))\nprint(unique_digits({ 1, 2, 3, 4, 5 }))\n\
    print(unique_digits({ 1, 2, 3, 9, 4, 5 }))\nprint(unique_digits({ 1, 2, 3, 9,\
    \ 4, 5 }))\nprint(unique_digits({ 1, 2, 3, 4, 5, 6 }))\nprint(unique_digits({\
    \ 1, 2, 3, 4, 5, 6 }))\nprint(unique_digits({ 1, 2, 3, 4, 5, 6, 7 }))\nprint(unique_digits({\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 }))\nprint(unique_digits({ 0, 1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9 }))\nprint(unique_digits({ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 }))\nprint(unique_digits({\
    \ 0, 10, 20, 30, 40, 50, 60, 70, 80, 90 }))\nprint(unique_digits({ 0, 10, 20,\
    \ 30, 40, 50, 60, 70, 80, 90 }))\nprint(unique_digits({ 0, 10, 20, 30, 40, 50,\
    \ 60, 70, 80, 90 }))\nprint(unique_digits({ 0, 10, 20, 30, 40, 50, 60, 70, 80,\
    \ 90 }))\nprint(unique_digits({ 0, 10, 20, 30, 40, 50, 60, 70, 80, 90 }))\nprint(unique_digits({\
    \ 0, 10, 20, 30, 40, 50, 60, 70, 80, 90 }))\nprint(unique_digits({ 0, 10, 20,\
    \ 30, 40, 50, 60, 70, 80, 90 }))\nprint(unique_digits({ 0, 10, 20, 30, 40, 50,\
    \ 60, 70, 80, 90 }))\nprint(unique_digits({ 0, 10, 20, 30, 40, 50, 60, 70, 80,\
    \ 90 }))\nprint(unique_digits({ 0, 10, 20, 30, 40, 50, 60, 70, 80, 90 }))\nprint(unique_digits({\
    \ 0, 10, 20, 30, 40, 50, 60, 70, 80, 90 }))\nprint(unique_digits({ 0, 10, 20,\
    \ 30, 40, 50, 60, 70, 80, 90 }))\nprint(unique_digits({ 0, 10, 20, 30, 40, 50,\
    \ 60, 70, 80, 90 }))\nprint(unique_digits({ 0, 10, 20, 30, 40, 50, 60, 70, 80,\
    \ 90 }))\nprint(unique_digits({ 0, 10, 20, 30, 40, 50, 60, 70, 80, 90 }))\nprint(unique_digits({\
    \ 0, 10, 20, 30, 40, 50, 60, 70, 80, 90 }))\nprint(unique_digits({ 0, 10, 20,\
    \ 30, 40, 50, 60, 70, 80, 90 }))\nprint(unique_digits({ 0, 10, 20, 30, 40, 50,\
    \ 60, 70, 80, 90 }))\nprint(unique_digits({ 0, 10, 20, 30, 40, 50, 60, 70, 80,\
    \ 90 }))\nprint(unique_", "\tassert(type(x) == 'table' and #x > 0, 'Invalid input.\
    \ Expected table')\n\tlocal a = {}\n\tfor i = 1,#x do\n\t\tlocal n = 1\n\t\tfor\
    \ j = 1,10 do\n\t\t\tn = n*10 + (x[i]/j%1)\n\t\tend\n\t\tif a[n] ~= nil then\n\
    \t\t\ta[n] = a[i]\n\t\tend\n\tend\n\tfor i = 1,#a do\n\t\ta[i] = a[i]%10\n\tend\n\
    \treturn a\nend", "  local results = {}\n  for i = 1,#x do \n    local d = x:sub(i,i)\n\
    \    if d > 0 then\n      results[#results+1] = d\n    end\n  end\n  return results\n\
    end", "    local digits = {}\n    for i=1,1000 do\n        if x[i] > 0 then\n\
    \            digits[tostring(x[i])] = true\n        end\n    end\n    local results\
    \ = {}\n    for i=1,1000 do\n        if digits[i] then\n            table.insert(results,\
    \ i)\n        end\n    end\n    return results\nend", "    local y = 0\n    local\
    \ z = {}\n    local i = 0", "\t-- Initialize a list containing all 0\n\tlocal\
    \ ans = {}\n\t\n\t-- For each x in the given list\n\tfor i = 1, #x do\n\t\t--\
    \ Get the current x's digit\n\t\tlocal d = math.floor(x[i]/10)\n\t\t\n\t\t-- If\
    \ the current x's digit is 0, skip this x\n\t\tif d == 0 then\n\t\t\tcontinue\n\
    \t\tend\n\t\t\n\t\t-- If the current x's digit is not 0, continue to the next\
    \ x\n\t\tlocal is_even = 1\n\t\tif d % 2 == 1 then\n\t\t\t-- If current x's digit\
    \ is odd, then mark it as 0\n\t\t\tis_even = 0\n\t\tend\n\t\t\n\t\t-- Add this\
    \ x's digit to list of all 0\n\t\tans[#ans+1] = is_even\n\tend\n\t\n\t-- Return\
    \ the list of all elements hasn't any even digit\n\treturn ans\nend", "  local\
    \ t = {x}\n  local ud = {}\n  \n  for i = 2, 10 do\n    table.insert(t, i)\n \
    \   table.insert(ud, 0)\n  end", "    local result = {}\n    for i = 1, #x do\n\
    \        if x[i] % 2 == 0 then\n            result[#result + 1] = x[i]\n     \
    \   end\n    end\n    return table.sort(result)\nend", "  local result = {}\n\
    \  for i = 1, #x do\n    if x[i] % 2 == 0 then\n      result[#result + 1] = x[i]\n\
    \    end\n  end\n  return result\nend", "    local output = {}\n    for i=1,x:len()\
    \ do\n        if x[i]%2 ~= 0 then\n            table.insert(output, x[i])\n  \
    \      end\n    end\n    return output\nend", "  local sorted_list = terralib.newlist()\n\
    \  local even_idx\n  for i = 1, x:len() do\n    even_idx = ((x:len() - 1) - (i%2))\n\
    \    if x:sub(i,i) == 0 then -- x is an even number\n      -- Add x to sorted\
    \ list\n      sorted_list:insert(x:sub(i,i))\n      -- Remove x from array\n \
    \     x:remove(i, i+1)\n      -- If x is even, add its even digit to even_idx\n\
    \      even_idx = (even_idx + i%2):map(function(v) return (v*10+v) end)\n    end\n\
    \  end\n  -- Sort list\n  sorted_list:sort(function(x,y) return x < y end)\n \
    \ return sorted_list\nend", "  assert(type(x) == 'table')\n  local n = 0\n  local\
    \ results = {}\n  for i = 1,#x do\n    local digit = x[i]\n    if digit == 0 then\n\
    \      n = n + 1\n    else\n      local digits = math.floor(digit*10)/10\n   \
    \   if digits > n then\n        results[#results+1] = digits\n      else\n   \
    \     results[#results] = digits\n      end\n    end\n  end\n  return results\n\
    end", "  if x == nil then\n    return nil\n  end", "    -- Write your solution\
    \ here\nend\n</cell>\n<cell>", "\tassert(type(x) == \"table\")\n\tassert(#x >\
    \ 0)\n\tlocal ret = {}\n\t-- sort x in increasing order\n\t-- start from right\
    \ to left so that each element can be processed \n\t-- by only 1 iteration\n\t\
    local i = 1\n\twhile i < #x do\n\t\t-- check every element in x to see if it is\
    \ even or odd\n\t\tif x[i] % 2 == 0 then\n\t\t\t-- get its first digit\n\t\t\t\
    local d1 = x[i] % 10\n\t\t\t-- add it to ret\n\t\t\tret[d1] = ret[d1] or d1 --\
    \ or d1\n\t\t\t-- remove it from x\n\t\t\tx[i] = x[i]/10\n\t\telse\n\t\t\t-- get\
    \ its last digit\n\t\t\tlocal d1 = x[i] % 10\n\t\t\t-- add it to ret\n\t\t\tret[d1]\
    \ = ret[d1] or d1 -- or d1\n\t\t\t-- remove it from x\n\t\t\tx[i] = x[i]/10\n\t\
    \tend\n\t\ti = i + 1\n\tend\n\treturn ret\nend", "    local n = 1\n    local ans\
    \ = {}\n    \n    for _,v in ipairs(x) do\n        -- Iterate all numbers except\
    \ the last one in the list\n        for i=1, v do \n            -- If current\
    \ number is not even, add it to the list\n            if n%2 == 0 then\n     \
    \           ans[n] = true\n            end\n            n = n + 1\n        end\n\
    \    end\n    \n    -- Remove false values\n    local i = 0\n    while i < #ans\
    \ do\n        if ans[i] then\n            table.insert(ans, false)\n        end\n\
    \        i = i + 1\n    end\n    \n    return ans\nend", "    local result = {}\n\
    \    \n    for i,v in ipairs(x) do\n        if not math.mod(v,10) then\n     \
    \       result[#result + 1] = v\n        end\n    end\n    \n    table.sort(result)\n\
    \    return result\nend", '  if #x == 0 then return nil end', "    local output\
    \ = {}\n    for i=1,#x do\n        if x[i] % 2 == 0 then\n            output[#output+1]\
    \ = x[i]\n        end\n    end\n    return output\nend", "    local ret = {}\n\
    \    for i = 1,#x do\n        if x[i]%2 == 0 then\n            table.insert(ret,\
    \ x[i])\n        end\n    end\n    return table.sort(ret)\nend\nprint(unique_digits(num))",
  "  local sorted_list = {}\n  for i = 1,#x do\n    local digit_count = countDigit(x[i])\n\
    \    sorted_list[digit_count] = x[i]\n  end\n  return sorted_list\nend", "  local\
    \ ret = {}\n  local last_digit_index = 1\n  for i=1,#x do\n    if x[i] > last_digit_index\
    \ then\n      table.insert(ret, x[i])\n      last_digit_index = last_digit_index\
    \ + 1\n    end\n  end\n  return ret\nend\nassert(unique_digits({1,2,3,4}) == {1,2,3,4})\n\
    assert(unique_digits({1,3,2,4}) == {1,2,3,4})\nassert(unique_digits({1,2,4,3})\
    \ == {1,2,4})\nassert(unique_digits({1,3,5,2}) == {1,3,5,2})\nassert(unique_digits({1,3,5,2,4})\
    \ == {1,3,5,2})\nassert(unique_digits({1,3,5,2,4,6}) == {1,3,5,2,4})", "\tassert(\
    \ x ~= nil, 'Input cannot be nil.')\n\tassert( type(x) == 'table', 'Input should\
    \ be table.')\n\tlocal unique_vals = {}\n\tfor i = 1, #x do\n\t\tlocal digit =\
    \ x[i]\n\t\tlocal unique_digit = digit\n\t\tif unique_val ~= nil then\n\t\t\t\
    for i = 1, #unique_vals do\n\t\t\t\tlocal unique_digit2 = unique_vals[i]\n\t\t\
    \t\tif unique_digit == unique_digit2 then\n\t\t\t\t\tunique_digit = digit + 1\n\
    \t\t\t\tend\n\t\t\tend\n\t\tend\n\t\tunique_vals[#unique_vals + 1] = unique_digit\n\
    \tend\n\treturn unique_vals\nend\nprint(unique_digits({'9','8','5','4','7','3','5','6','9','8','5'}))",
  "    assert(x > 0)\n    assert(type(x) == 'table')\n    assert(x:len() > 0)\n  \
    \  local z = {}\n    for i = 1,x:len() do\n        local digit = x[i]\n      \
    \  if digit ~= 0 then\n            for j = 1,digit do\n                table.insert(z,\
    \ 0)\n            end\n        end\n    end\n    return z\nend", "  -- Your code\
    \ goes here\nend", "  local out = {}\n  local j = 1\n  for i = 1, #x do\n    if\
    \ math.floor(x[i]) ~= x[i] then \n      out[j] = x[i]\n      j = j + 1\n    end\n\
    \  end\n  return out\nend", "   if x == nil then return nil end\n   local ret\
    \ = {}\n   for i=1, #x do\n      local digit = x[i]\n      if digit ~= 0 and digit\
    \ % 2 == 0 then\n         if digit in ret then\n            -- Duplicate\n   \
    \      else\n            table.insert(ret, digit)\n         end\n      end\n \
    \  end\n   return ret\nend", "   local ret = {}\n   local k = 0\n   for i = 1,\
    \ #x do\n      local v = x[i]\n      if v ~= 0 and v ~= 1 then\n         if k\
    \ ~= 0 then\n            table.insert(ret, k)\n            k = k - 1\n       \
    \  end\n      end\n      k = k + 1\n   end\n   if k ~= 0 then\n      table.insert(ret,\
    \ k)\n   end\n   return ret\nend", "  local ans = {}\n  \n  -- O(|x|) time and\
    \ space\n  local function helper(x, i, num)\n    if i > #x then\n      table.insert(ans,\
    \ num)\n      return\n    end\n    \n    if x[i] == 0 then\n      helper(x, i\
    \ + 1, 1)\n    elseif x[i] % 2 == 0 then\n      helper(x, i + 1, x[i] / 2)\n \
    \   end\n  end\n  \n  helper(x, 1, 0) -- call it twice.\n  return ans\nend", " \
    \ local i = 1\n  local out = {}\n  while i <= #x do\n    if (x[i] % 2 == 0) then\n\
    \      table.insert(out, x[i])\n    end\n    i = i + 1\n  end\n  table.sort(out)\n\
    \  return out\nend", "  -- base case\n  if x == nil then return nil end\n  if\
    \ x[1] == nil then return x\n  \n  -- base case (2)\n  if x[2] ~= nil then return\
    \ unique_digits(x) + [x[2]]\n  \n  local m = math.floor(x[1]/10)\n  local s =\
    \ x[1] - m*10\n  local a = unique_digits(x[3:] or {})\n  \n  -- base case (3)\n\
    \  if a[1][m] ~= nil then return unique_digits(a[1]) + [a[1][m]] + unique_digits(s)\n\
    \  \n  -- base case (4)\n  if a[m] ~= nil then return unique_digits(a[1]) + [m]\
    \ + unique_digits(s)\n  \n  -- base case (5)\n  if a[s] ~= nil then return unique_digits(a[1])\
    \ + [m] + unique_digits(s[s])\n  \n  -- base case (6)\n  if s ~= nil then return\
    \ unique_digits(a[1]) + [m] + unique_digits(s)\n  \n  -- base case (7)\n  return\
    \ unique_digits(a[m]) + [m] + unique_digits(s)\nend", "  local newlist = {}\n\
    \  for i=1,math.abs(x) do\n    if x%10 ~= 0 and x%10 ~= nil and x%10 ~= \"\" then\n\
    \      newlist = table.concat(newlist, x%10)\n    end\n    x = x/10\n  end\n \
    \ return newlist\nend", "    local ret = {}\n    for i=1,#x do \n        if x[i]%2\
    \ == 0 then \n            table.insert(ret, x[i]) \n        end \n    end\n  \
    \  return ret\nend\nprint(unique_digits({ 2,3,4,5,6,7,8,9,2,3,5,7,1,8,2,5,2,3,5,6,7}))",
  "  if x == nil then return nil end\n  local s = ''\n  for i = 1, #x do\n    if x:sub(i,\
    \ i) == math.floor(x[i]) then\n      if #s == 0 then\n        s = x:sub(i, i)\n\
    \      else\n        s = s .. x[i]\n      end\n    end\n  end\n  return s\nend",
  "  local a = {}\n  for i = 1, #x do\n    local j = i - 1\n    local digit = x[i]\n\
    \    while j > 0 and x[j] ~= digit do\n      x[j+1] = x[j]\n      j = j - 1\n\
    \    end\n    x[j+1] = digit\n  end\n  table.sort(x)\n  return x\nend", "  --\
    \ Write your code here.\nend", "   -- base case\n   if #x==0 then return nil end",
  "\t-- Write your code here.\n\tlocal unique = {}\n\tfor i = 1, #x do\n\t\tlocal\
    \ digit = x[i]\n\t\tif digit == 0 then\n\t\t\tx = x:sub(1, i):reverse()\n\t\t\t\
    local ok, remove = next, x:find(0)\n\t\t\tif ok then\n\t\t\t\tx = x:sub(1, #remove)\n\
    \t\t\t\tunique = unique + remove\n\t\t\t\t-- print(unique)\n\t\t\tend\n\t\t\t\
    break\n\t\telseif digit == 1 then\n\t\t\tx = x:sub(1, i):reverse()\n\t\t\tunique\
    \ = unique + x\n\t\t\t-- print(unique)\n\t\tend\n\tend\n\treturn unique\nend",
  "    local ret = {}\n    for i=1,#x do\n        if (x:sub(i,i)%2)==0 then table.insert(ret,\
    \ x[i]) end\n    end\n    table.sort(ret)\n    return ret\nend\nprint(unique_digits({2,5,7,8,10,12}))",
  "  local function has_odd(x)\n    local i = 1\n    while true do\n      if x[i]\
    \ < 0 then break end\n      if x[i] % 2 == 1 then return false end\n      i =\
    \ i + 1\n    end\n    return true\n  end\n  \n  local function has_even(x)\n \
    \   local i = 1\n    while true do\n      if x[i] < 0 then break end\n      if\
    \ x[i] % 2 == 0 then return false end\n      i = i + 1\n    end\n    return true\n\
    \  end", "\tlocal unique_map = {}\n\tlocal unique_length = 1\n\tfor i = 1, #x\
    \ do\n\t\tlocal current_digit = x[i]\n\t\tlocal current_length = 1\n\t\twhile\
    \ current_length > 0 and current_digit >= 10 then\n\t\t\tcurrent_digit = current_digit\
    \ / 10\n\t\t\tcurrent_length = current_length + 1\n\t\tend\n\t\tif not unique_map[current_digit]\
    \ then\n\t\t\tunique_map[current_digit] = unique_length\n\t\t\tunique_length =\
    \ unique_length + 1\n\t\tend\n\tend\n\tlocal unique_digits_list = {}\n\tfor i\
    \ = 1, #x do\n\t\tlocal current_digit = x[i]\n\t\tlocal current_length = unique_map[current_digit]\n\
    \t\twhile current_length > 0 do\n\t\t\tcurrent_digit = current_digit / 10\n\t\t\
    \tcurrent_length = current_length - 1\n\t\t\ttable.insert(unique_digits_list,\
    \ current_digit)\n\t\tend\n\tend\n\treturn unique_digits_list\nend", "  local\
    \ sorted_x = table.sort(x)\n  local unique_digit = {}\n  local i = 1\n  for _,v\
    \ in ipairs(sorted_x) do\n    if v ~= 0 and v ~= v then \n      if unique_digit[i]\
    \ == nil then\n        unique_digit[i] = v\n      else\n        unique_digit[i]\
    \ = unique_digit[i] * 10 + v\n      end\n    end\n    i = i + 1\n  end\n  return\
    \ unique_digit\nend", "  local output = {}\n  -- count number of occurances of\
    \ every digit\n  for i = 1, 10 do\n    local num_occurance = x[i]\n    if num_occurance\
    \ ~= 0 then\n      output[num_occurance] = true\n    end\n  end\n  -- now remove\
    \ elements that have an even number of occurrences\n  for i = 1, #output do\n\
    \    if output[i] then\n      if output[i] ~= true then\n\ttable.insert(output,\
    \ true)\n      end\n    end\n  end\n  return output\nend", "  local sorted_list\
    \ = {}\n  for i = 1, #x do\n    local d = tonumber(x[i])\n    if d then\n    \
    \  sorted_list[#sorted_list + 1] = d\n    end\n  end\n  return sorted_list\nend",
  "  local results = {}\n  for i = 1, #x do\n    if x[i] % 2 == 0 then\n      table.insert(results,\
    \ x[i])\n    end\n  end\n  return table.sort(results)\nend", "    local sorted_x\
    \ = sort(x)\n    local unique_x = {}\n    for i = 1, #sorted_x do\n        local\
    \ digit_count = {}\n        for j = 1, #x do\n            if x[j] == sorted_x[i]\
    \ then\n                digit_count[string.sub(x[j], 1, 1)] = digit_count[string.sub(x[j],\
    \ 1, 1)] + 1\n            end\n        end\n        for j, digit in pairs(digit_count)\
    \ do\n            if digit_count[digit] == 2 then\n                table.insert(unique_x,\
    \ sorted_x[i])\n            end\n        end\n    end\n    return unique_x\nend",
  "  -- Write your code here\n  local result = {}\n  for i = 1, #x do\n    if x[i]\
    \ % 2 == 0 then\n      table.insert(result, x[i])\n    end\n  end\n  table.sort(result)\n\
    \  \n  return result\nend", "  local unique_digits = {}\n  for i = 1, #x do\n\
    \    if x[i]%2 ~= 0 then\n      table.insert(unique_digits, x[i])\n    end\n \
    \ end\n  return unique_digits\nend", "  if x == nil then\n    return nil\n  end",
  "    local ret = {}\n    for i=1, #x do\n        -- check if x is even or odd\n\
    \        if x[i] % 2 == 0 then\n            local even = {}\n            for j=1,\
    \ #x do\n                if x[j] % 2 == 0 then\n                    table.insert(even,\
    \ x[j])\n                end\n            end\n            table.insert(ret, table.concat(even))\n\
    \        end\n    end\n    return ret\nend", "  -- Write your code here.\n  local\
    \ sorted_x = table.sort(x)\n  local ans = {0}\n  for i=1,#sorted_x do\n    if\
    \ sorted_x%2 == 0 then\n      table.insert(ans,sorted_x[i])\n    end\n  end\n\
    \  return ans\nend", "    local ret = {}\n    local num = 0\n    for _,x in ipairs(x)\
    \ do\n        if math.floor(x/10)%2 ~= 0 then\n            table.insert(ret, math.floor(x/10))\n\
    \        else\n            num = math.floor(x/10)\n        end\n    end\n    if\
    \ num == 0 then\n        table.insert(ret, 0)\n    end\n    return ret\nend",
  "  local function even(x)\n    return (x > 0 and x % 2 == 0)\n  end\n  local function\
    \ odd?(x)\n    return (not even(x))\n  end\n  -- get each item and check for odd\n\
    \  local a = {}\n  for i = 1, #x do\n    local item = x[i]\n    if odd(item) then\
    \ table.insert(a, item) end\n  end\n  -- return sorted list\n  return a\nend",
  "   local function is_odd(x)\n      if x%2 == 0 then return true end \n      return\
    \ false\n   end\n   local function is_even(x)\n      if x%2 ~= 0 then return true\
    \ end \n      return false\n   end\n   local function rec(z)\n      if z == nil\
    \ then return end\n      if is_odd(z) then\n         if z < 10 then return z end\n\
    \      else\n         if z < 100 then\n            if z < 10 then return z + 1\
    \ end\n            if z % 10 == 1 then\n               return z + 2\n        \
    \    else\n               return z + 1\n            end\n         end\n      \
    \   if is_even(z) then\n            if z < 10 then return z + 1 end\n        \
    \    if z % 10 == 2 then\n               return z + 3\n            else\n    \
    \           return z + 2\n            end\n         end\n         return z + 1\n\
    \      end\n      return rec(z+1)\n   end\n   return rec(x)\nend", "   if x ==\
    \ nil then\n      return\n   end\n   local function is_even(n)\n      return (n\
    \ * 10) % 2 == 0\n   end\n   local x = table.sort(x)\n   local result = {x[1],\
    \ x[2]}\n   for i = 3, #x do\n      if is_even(x[i]) then\n         table.insert(result,\
    \ x[i])\n      end\n   end\n   return result\nend", "\tlocal l = {}\n\tlocal i\
    \ = 1\n\twhile i <= #x do\n\t\tif x[i] % 2 == 0 then\n\t\t\ttable.insert(l, x[i])\n\
    \t\tend\n\t\ti = i + 1\n\tend\n\treturn l\nend", "  -- Base case: if the list\
    \ is empty, return an empty list\n  if x == nil then return nil end", "  local\
    \ ret = {}\n  for i = 1, #x do\n    if x[i] % 2 == 0 then\n      table.insert(ret,\
    \ x[i])\n    end\n  end\n  table.sort(ret)\n  return ret\nend", "    local ret\
    \ = {}\n    local i = 1\n    while i <= #x do\n        local digit = x[i]\n  \
    \      if not ret or digit:sub(1,1):lower() ~= \"0\" then\n            table.insert(ret,\
    \ digit)\n        end\n        i = i + 1\n    end\n    return ret\nend", "  local\
    \ ret = {}\n  -- First pass, remove any digit not in the first set\n  for i =\
    \ 1,#x do\n    if x[i]%2 ~= 0 then\n      table.insert(ret, x[i])\n    end\n \
    \ end\n  -- Then sort them in the increasing order\n  for i = 1,#ret do\n    table.insert(ret,\
    \ ret[i])\n  end\n  return ret\nend", "  assert(type(x)==\"table\" and #x>0 and\
    \ x>0, \n         \"unique_digits takes a list as input\")\n  local new_table\
    \ = {}\n  local i = 1\n  while i <= #x do\n    if x[i]%2 == 0 then\n      new_table\
    \ = {new_table[x[i]], x[i]}\n    else\n      i = i + 1\n    end\n  end\n  local\
    \ unique_digits = {}\n  for k,v in pairs(new_table) do\n    if k ~= v then\n \
    \     table.insert(unique_digits,v)\n    end\n  end\n  return unique_digits\n\
    end\nprint(unique_digits({\"765\",\"45\",\"545\",\"8787\"})) -- returns {\"8787\"\
    ,\"45\",\"545\",\"765\"}\n</cell>\n<text>\nProblem 3", "    local function digit(num)\n\
    \        return string.format(\"%0d\", num)\n    end\n    local function is_even_digit(num)\n\
    \        return string.find(digit(num), \":\") ~= nil\n    end\n    return sort(filter(is_even_digit,\
    \ x))\nend", "    local ret = {}\n    for i = 1, #x do\n        local c = x[i]\n\
    \        if c % 2 == 0 then\n            table.insert(ret, c)\n        end\n \
    \   end\n    return ret\nend", "\tlocal output = {}\n\tlocal i = 1\n\twhile i\
    \ <= #x do\n\t\tif x[i]%2 ~= 0 then\n\t\t\ttable.insert(output, x[i])\n\t\tend\n\
    \t\ti = i + 1\n\tend\n\ttable.sort(output)\n\treturn output\nend", "    local\
    \ result = {}\n    for i = 1, #x do\n        if x[i] % 2 == 0 then\n         \
    \   table.insert(result, x[i])\n        end\n    end\n    return table.sort(result)\n\
    end", "    local ans = {}\n    for i=1,#x do \n        for d=2,10 do\n       \
    \     if (x%d == 0) then\n                table.insert(ans, d)\n             \
    \   x=x/d\n                break\n            end\n        end\n    end\n    return\
    \ ans\nend", "   local sorted_list = { }\n   for i = 1,#x do\n      if ((x%10)\
    \ == 0) then\n         table.insert(sorted_list, x[i])\n      end\n   end\n  \
    \ return sorted_list\nend", "\tassert(type(x) == \"table\")\n\tlocal results =\
    \ {}\n\tfor i = 1, #x do\n\t\tlocal d = tonumber(string.format(\"%0.d\", x[i]))\n\
    \t\tif d > 0 then\n\t\t\ttable.insert(results, d)\n\t\tend\n\tend\n\ttable.sort(results)\n\
    \treturn results\nend", "  if x == nil then\n    return nil\n  end", "    local\
    \ y = {}\n    for i=1,#x do\n        local v = x[i]\n        if v > 0 then\n \
    \           table.insert(y, v)\n        end\n    end\n    table.sort(y) -- Sort\
    \ y\n    local ret = {}\n    for i,v in pairs(y) do\n        if v ~= 0 then\n\
    \            table.insert(ret, v)\n        end\n    end\n    return ret\nend",
  "  local ret = {}\n  \n  for i = 1, #x do\n    local y = x[i]\n    if not y then\
    \ return ret end", "   local function is_even(i)\n      return ((i / 10) % 2)\
    \ == 0\n   end\n   local function unique_evens(n)\n      local output = {}\n \
    \     for i = 1,n do\n         if is_even(i) then\n            table.insert(output,\
    \ i)\n         end\n      end\n      return output\n   end", "  local output =\
    \ {}\n  local i = 1\n  while i <= #x do\n    if x[i]%2 == 0 then\n      table.insert(output,\
    \ x[i])\n    end\n    i = i + 1\n  end\n  table.sort(output)\n  return output\n\
    end", "  -- Base case\n  if #x <= 0 then\n    return {}\n  else\n    -- Recursive\
    \ case\n    local digits = {}\n    for i = 1, #x do\n      -- Iterate through\
    \ each digit in number\n      for j = 1, math.ceil(math.log(x[i]) / math.log(10))\
    \ do\n        -- Check if current number has even digits\n        if x[i] % math.pow(10,\
    \ j) % 2 == 0 then\n          -- Add it to list of digits\n          table.insert(digits,\
    \ x[i])\n          -- Remove it from current number\n          x[i] = math.floor(x[i]\
    \ / math.pow(10, j))\n        end\n      end\n    end\n    -- Return result and\
    \ sort digits\n    return unique_digits(x) or table.sort(digits)\n  end\nend",
  "    local t = {}\n    local len = 0\n    for v in x:gmatch(\"%d+\") do\n      \
    \  len = (len > 0 and len or 0) + (v:len() or 0)\n    end\n    for i = 1, len\
    \ do\n        t[#t + 1] = i:byte() % 10\n    end\n    t[#t + 1] = 0\n    return\
    \ t\nend", "  -- write your code here.\n  -- Example:\n  if x ~= nil then\n  \
    \  local a = {}\n    for i = 1, #x do\n      local s = x[i]\n      if s ~= nil\
    \ then\n        local n = math.floor(s / 10)\n        if a ~= nil and n < #a then\n\
    \          a[n] = true\n        else\n          a = n\n        end\n      end\n\
    \    end\n    return a\n  else\n    return nil\n  end\nend", "    local i, result,\
    \ length = 0, {}, #x\n    while i < length do\n        if x[i] % 2 == 0 then\n\
    \            result[#result+1] = x[i]\n        end\n        i = i + 1\n    end\n\
    \    return result\nend", "    local sorted_x = table.sort(x)\n    local unique_digits\
    \ = {}\n    \n    for i = 1, #sorted_x do\n        if sorted_x[i] % 2 == 0 then\n\
    \            table.insert(unique_digits, sorted_x[i])\n        end\n    end\n\
    \    \n    return unique_digits\nend\nprint(unique_digits({ 1, 3, 6, 4, 12, 6,\
    \ 10, 12, 8, 7, 9, 10, 12 })) -- [1, 3, 4, 6, 10, 12, 12, 8, 9]\nprint(unique_digits({\
    \ 1, 5, 7, 5, 7, 8, 6, 8, 10, 10, 10, 10, 10 })) -- [1, 5, 7, 8]\nprint(unique_digits({\
    \ 1, 5, 7, 5, 7, 8, 6, 8, 10, 10, 10, 10, 10, 10 })) -- [1, 5, 7, 8, 10]\nprint(unique_digits({\
    \ 1, 5, 7, 5, 7, 8, 6, 8, 10, 10, 10, 10, 10, 10, 10 })) -- [1, 5, 7, 8, 9, 10]\n\
    print(unique_digits({ 1, 5, 7, 5, 7, 8, 6, 8, 10, 10, 10, 10, 10, 10, 10 })) --\
    \ [1, 5, 7, 8, 9, 10, 10]\nprint(unique_digits({ 1, 5, 7, 5, 7, 8, 6, 8, 10, 10,\
    \ 10, 10, 10, 10, 10, 10 })) -- [1, 5, 7, 8, 9, 10, 10]\nprint(unique_digits({\
    \ 1, 5, 7, 5, 7, 8, 6, 8, 10, 10, 10, 10, 10, 10, 10, 10 })) -- [1, 5, 7, 8, 9,\
    \ 10, 10]\nprint(unique_digits({ 1, 5, 7, 5, 7, 8, 6, 8, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10 })) -- [1, 5, 7, 8, 9, 10, 10]\nprint(unique_digits({ 1, 5, 7, 5,\
    \ 7, 8, 6, 8, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10 })) -- [1, 5, 7, 8, 9, 10,\
    \ 10]\nprint(unique_digits({ 1, 5, 7, 5, 7, 8, 6, 8, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10 })) -- [1, 5, 7, 8, 9, 10, 10]\nprint(unique_digits({ 1,\
    \ 5, 7, 5, 7, 8, 6, 8, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10 })) -- [1,\
    \ 5, 7, 8, 9, 10, 10]\nprint(unique_digits({ 1, 5, 7, 5, 7, 8, 6, 8, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10 })) -- [1, 5, 7, 8, 9, 10, 10]\nprint(unique_digits({\
    \ 1, 5, 7, 5, 7, 8, 6, 8, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10 })) -- [1, 5, 7, 8, 9, 10, 10]\nprint(unique_digits({ 1, 5, 7, 5, 7, 8, 6,\
    \ 8, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10 })) -- [1, 5, 7, 8,\
    \ 9, 10, 10]\nprint(unique_digits({ 1, 5, ", "  -- base case: if the list is empty,\
    \ return empty list\n  if not x then\n    return nil\n  -- base case: if the list\
    \ has only one element, return it\n  elseif #x == 1 then\n    return x\n  -- base\
    \ case: if the list has even number of elements, then it must \n  --         \
    \ have at least one even element\n  elseif #x % 2 == 1 then\n    return nil\n\
    \  end", "  if x[1] == 0 then \n    return x\n  end", "  -- Return sorted list\n\
    \  if x ~= nil then\n    local function is_even(i)\n      return i ~= 0 and ((i\
    \ mod 2) = 0)\n    end\n    local sorted_x = sortn(x, function(i,j) return is_even(i)\
    \ end)\n    return sorted_x\n  else\n    return nil\n  end\nend", "  if x == nil\
    \ then\n    return nil\n  end\n  local sorted_x = table.sort(x)\n  local unique_digits\
    \ = {}\n  local i = 1\n  while i <= #sorted_x do\n    if sorted_x[i] == sorted_x[i+1]\
    \ then\n      i = i + 1\n    else\n      unique_digits[#unique_digits+1] = sorted_x[i]\n\
    \    end\n  end\n  return unique_digits\nend", "\tlocal output = {}\n\tfor i=1,#x\
    \ do\n\t\tlocal digit = x[i]\n\t\tif digit == 0 then break end\n\t\tlocal x =\
    \ digit\n\t\twhile x ~= 0 do\n\t\t\tif x % 2 == 0 then\n\t\t\t\tx = x / 2\n\t\t\
    \t\toutput[#output+1] = digit\n\t\t\telse\n\t\t\t\tx = 3 * x + 1\n\t\t\tend\n\t\
    \tend\n\tend\n\treturn output\nend", "   -- x is a list with positive integers\
    \ only\n   -- Return sorted list with elements that has no even digits\n   --\
    \ Example:\n   -- unique_digits({3, 1, 2, 3, 2}) --> {1, 2}\n   -- unique_digits({})\
    \ --> {}\n   -- unique_digits({1}) --> {1}\n   -- unique_digits({3, 1}) --> {}\n\
    \   -- unique_digits({1}) --> {1}\n   -- unique_digits({3, 2}) --> {}\n   -- unique_digits({3,\
    \ 4, 5}) --> {3, 4, 5}\n   -- unique_digits({3, 4}) --> {}\n   -- unique_digits({1,\
    \ 3, 4}) --> {}\n   -- unique_digits({1, 2, 2}) --> {}\n   -- unique_digits({2,\
    \ 1}) --> {}\n   -- unique_digits({2, 1, 3}) --> {}\n   local out_list = setmetatable({},\
    \ { __mode=\"k\" }) -- Use a setmetatable\n   \n   for k,v in ipairs(x) do\n \
    \     -- If current element is even and exist in out list then discard it\n  \
    \    if v % 2 == 0 and out_list[v] == nil then\n         out_list[v] = k\n   \
    \   end\n   end\n   return out_list\nend", "\tlocal ans = {}\n\tlocal index =\
    \ 1\n\tfor x in pairs(x) do\n\t\tif x:sub(1,1) and x:sub(1,1) == \"0\" then\n\t\
    \t\tindex = index + 1\n\t\telse\n\t\t\tans[index] = x\n\t\t\tindex = index + 1\n\
    \t\tend\n\tend\n\treturn ans\nend", "   assert(type(x) == \"table\" and x:nrows()\
    \ == 1 and x:ncols() == 1)\n   assert(x:nrows() > 0 and x:ncols() > 0)\n   \n\
    \   local ans = table()\n   for i = 1, x:nrows() do\n      local digit = x[i,\
    \ 1]\n      if digit > 0 then\n         local i2 = i - 1\n         while i2 >=\
    \ 1 do\n            digit = digit % 10\n            if digit == 0 then\n     \
    \          break\n            end\n            ans[digit] = true\n           \
    \ i2 = i2 - 1\n         end\n      end\n   end\n   return ans\nend", "    local\
    \ seen = {}\n    local ret = {}", "   -- your code goes here\n   return nil\n\
    end", "    local digits = {}\n    for i=1,#x do \n        digits[x[i]] = x[i]\n\
    \    end\n    table.sort(digits, function(a,b) return a<b end)\n    local res\
    \ = {}\n    for i=1,#digits do\n        if digits[i]%2==0 then table.insert(res,\
    \ digits[i]) end\n    end\n    return res\nend", "\tlocal sorted_x = table.sort(x)\n\
    \tlocal uniques = {}\n\tfor i = 1, #sorted_x do\n\t\tlocal current = sorted_x[i]\n\
    \t\tlocal digit_count = 1\n\t\tfor j = 1, #current do\n\t\t\tlocal digit = tonumber(string.format(\"\
    %d%c\", current, j))\n\t\t\tif digit == 0 then\n\t\t\t\tdigit_count = digit_count\
    \ - 1\n\t\t\telseif digit_count > 0 then\n\t\t\t\tdigit_count = digit_count -\
    \ 1\n\t\t\t\tbreak\n\t\t\telse\n\t\t\t\tdigit_count = digit_count + 1\n\t\t\t\
    end\n\t\tend\n\t\tif digit_count % 2 == 1 then\n\t\t\tuniques[#uniques+1] = current\n\
    \t\tend\n\tend\n\treturn table.sort(uniques)\nend", "   -- assert(x.is_vector())\
    \ -- Return should be vector\n   local out = {}\n   for i = 1,#x do\n      local\
    \ digit = x[i]\n      for j = i,#x do\n         if digit == x[j] then\n      \
    \      table.insert(out, digit)\n            table.remove(x)\n         end\n \
    \     end\n   end\n   return out\nend", "    local res = {}\n    for i, v in pairs(x)\
    \ do\n        if math.floor(v / 10) % 2 == 0 then\n            table.insert(res,\
    \ v)\n        end\n    end\n    table.sort(res)\n    return res\nend", "   --\
    \ x is passed in as a list of numbers\n   -- Return list should be sorted and\
    \ return all elements that \n   -- hasn't any even digit.\n   -- Example return\
    \ list should be [2,1,3,5,7,4,6,8,9,10,11,12]\n   -- Explanation: [2,1,3,5,7,4,6,8]\
    \ because 8 is even\n   -- Explanation: [2,1,3,5,7,4,6,8,9,10,11,12] because 12\
    \ is even\n   local list = {}\n   for i = 1, #x do \n      if math.mod(x[i], 10)\
    \ == 0 then -- If any element of x is even\n         table.insert(list, x[i])\n\
    \      end\n   end\n   return list\nend\nprint(unique_digits({1,9,3,4,2,5,6,7,8,10,11,12}))\n\
    print(unique_digits({1,9,3,4,2,5,6,7,8}))\nprint(unique_digits({1,9,3,4,2,5,6,7,8,10,11,12,13,14}))\n\
    print(unique_digits({2,3,5,7,4,6,8,9,10,11,12}))\nprint(unique_digits({2,3,5,7,4,6,8,9}))\n\
    print(unique_digits({2,3,5,7,4,6,8,9,10,11,12,13}))\nprint(unique_digits({2,3,5,7,4,6,8,9,10,11,12,13,14}))\n\
    print(unique_digits({2,3,5,7,4,6,8,9,10,11,12,13,14,15}))\nprint(unique_digits({2,3,5,7,4,6,8,9,10,11,12,13,14,15,16}))\n\
    print(unique_digits({2,3,5,7,4,6,8,9,10,11,12,13,14,15,16,17,18,19,20}))\nprint(unique_digits({2,3,5,7,4,6,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22}))\n\
    print(unique_digits({2,3,5,7,4,6,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23}))\n\
    print(unique_digits({2,3,5,7,4,6,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24}))\n\
    print(unique_digits({2,3,5,7,4,6,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26}))\n\
    print(unique_digits({2,3,5,7,4,6,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29}))\n\
    print(unique_digits({2,3,5,7,4,6,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31}))\n\
    print(", "  if x == nil then\n    return nil\n  end\n  local function is_even(x)\n\
    \    return (not ((not x) or tostring(x) or \"0\") % 2)\n  end\n  local function\
    \ compare(x, x2)\n    local function digit_compare(x, x2)\n      local function\
    \ digit_sort(x, y)\n        return (x < y)\n      end\n      return digit_compare(x:byte(),\
    \ x2:byte())\n    end\n    return compare(tostring(x:byte()), tostring(x2:byte()))\n\
    \  end\n  return table.sort(x, is_even, compare)\nend", "   local t = {x}\n  \
    \ local out = {}\n   local last_value\n   for i = 2, 10 do\n      if t[i] ~= 0\
    \ then\n         last_value = t[i]\n         t[i] = 0\n      else\n         if\
    \ last_value != nil then\n            if t[#t + 1] == 0 then\n               out[#out\
    \ + 1] = last_value\n            else\n               out[#out + 1] = t[#t]\n\
    \            end\n         end\n         t[i] = 0\n      end\n   end\n   return\
    \ out\nend", "  -- assert(x:len() == 1)\n  -- assert(x:len() > 0)\n  -- assert(x:len()\
    \ <= 20)\n  local ret = x\n  local cnt = 0\n  for i,v in ipairs(x) do\n    cnt\
    \ = cnt + 1\n    assert(cnt <= 20 )\n    if ret[cnt] == v then\n      -- If ret\
    \ is already sorted, don't do anything\n      return ret\n    end\n    ret[cnt]\
    \ = v\n  end\n  return ret\nend", "  -- The first element in the list will always\
    \ be a number.\n  if x[1] then\n    local digits = {}\n    -- The next element\
    \ in the list will be a string.\n    -- Iterate over each character in the string\
    \ and add them to the\n    -- digits table if they are even digits.\n    for i\
    \ = 2, #x[1] do\n      local char = string.sub(x[1], i, i)\n      if not (char:sub(1,1)\
    \ == \"0\" and char:sub(1,1) == \"0\") then\n        table.insert(digits, char)\n\
    \      end\n    end\n    -- Return the sorted list.\n    return table.sort(digits)\n\
    \  end\n  return nil\nend", "  local result = {}\n  \n  for i = 1, #x do\n   \
    \ if x[i] % 2 == 0 then\n      table.insert(result, x[i])\n    end\n  end\n  \n\
    \  return result\nend", "   local digits = {}\n   for i = 1, #x do \n      digits[tostring(x[i])]\
    \ = true\n   end", "  local unique_digits = {}\n  for i=1, #x do\n    if x[i]\
    \ ~= 0 and x[i] % 2 == 0 then\n      table.insert(unique_digits, x[i])\n    end\n\
    \  end\n  return unique_digits\nend", "   local unique_digits = {}\n   for i =\
    \ 1, #x do\n      local digit = x[i]\n      if digit == 0 then\n         return\
    \ x\n      else\n         for j = 1, #unique_digits do\n            if unique_digits[j]\
    \ == 0 then\n               unique_digits[j] = digit\n               break\n \
    \           end\n         end\n      end\n   end\n   return unique_digits\nend",
  "  local newx = {}\n  for i=1,#x do\n    if x[i] > 0 then\n      newx[#newx+1] =\
    \ x[i]\n    end\n  end\n  return table.sort(newx)\nend", "    local new_x = {}\n\
    \    \n    for i = 1, #x do\n        local val = x[i]\n        if val < 10 then\
    \ -- Make sure that all elements in x are in [0, 9).\n            new_x[i] = val\n\
    \        end\n    end", "    if x==nil or #x==0 then\n        return nil\n   \
    \ end\n    local list = {}\n    for i=1,#x do\n        if x[i]%2==0 then\n   \
    \         list[i]=1\n        end\n    end\n    list = {}\n    for i=1,#list do\n\
    \        list[i]=list[i]\n    end\n    return list\nend", "\tlocal i, j, k --\
    \ iterator variables\n\tlocal n -- length of x\n\tlocal unique -- temporary result\
    \ array", "    local results = {}\n    for i=1,#x do\n        if x[i] % 2 == 0\
    \ then\n            table.insert(results, x[i])\n        end\n    end\n    table.sort(results)\n\
    \    return results\nend", "   -- x: an list of positive integers\n   local res\
    \ = {}\n   local i = 1\n   while i <= #x do\n      local d = tonumber(x[i])\n\
    \      if d ~= 0 then\n         local new_d = tonumber(x[i])\n         -- add\
    \ a new element if not present yet\n         if new_d ~= 0 then\n            if\
    \ new_d == d then\n               -- skip duplicates\n               i = i + 1\n\
    \               continue\n            else\n               -- add new element\
    \ to the list\n               table.insert(res, new_d)\n               i = i +\
    \ 1\n            end\n         end\n      end\n      i = i + 1\n   end\n   return\
    \ res\nend", "  assert(#x > 0, \"List is empty.\")\n  if #x == 0 then\n    return\
    \ {}\n  end\n  \n  local result = {}\n  local i = 1\n  local last = x[i]\n  \n\
    \  for i = 1, #x do\n    if last ~= x[i] then\n      local temp = {}\n      temp.digit\
    \ = last\n      temp.idx = i\n      temp.next = result\n      result = temp\n\
    \      last = x[i]\n    end\n  end\n  \n  table.sort(result, function(a, b) \n\
    \    if a.digit == b.digit then\n      return (a.idx < b.idx)\n    end\n    \n\
    \    return (a.digit > b.digit)\n  end)\n  \n  -- Return result\n  return result\n\
    end", "  if #x == 0 then\n    return nil\n  else\n    if x[1] ~= 0 then -- If\
    \ we have any even digit.\n      unique_digits(x:sub(1,-1))\n    end\n    return\
    \ x:filter(function(i)\n      return i ~= 0 and i ~= 1\n    end)\n  end\nend",
  "    local a = {}\n    local n = 1\n    for i = 1, #x do\n        if x[i]%2 == 0\
    \ then\n            table.insert(a, x[i])\n        end\n    end\n    for i = 1,\
    \ #a do\n        table.insert(a, n)\n        n += 1\n    end\n    table.sort(a,\
    \ function (x,y) \n        return x > y\n    end)\n    return a\nend", "   local\
    \ output = {}\n   for i = 1, #x do\n      if ((i % 2) == 0) then \n         output[#output+1]\
    \ = x[i]\n      end\n   end", "  local y = {}\n  for i = 1, #x do\n    if x[i]\
    \ % 2 ~= 0 then\n      y[#y+1] = x[i]\n    end\n  end\n  return y\nend", "  local\
    \ sorted_x = {}\n  local counter = 1\n  for i = 1, #x do\n    sorted_x[i] = x[i]\n\
    \    if x[i] > 10 then\n      counter = counter * 10 + x[i] - 10\n      sorted_x[i]\
    \ = counter\n    end\n  end\n  return sorted_x\nend", "  -- Base Case: If the\
    \ number is empty, return an empty list.\n  if x == nil then return nil end\n\
    \  -- Base Case: If the number is just one digit, return it.\n  if x == 2 then\
    \ return x end\n  -- Base Case: If the number is just one digit, return it.\n\
    \  if x == 1 then return x end\n  -- Base Case: We must iterate through the list\
    \ to extract unique digits.\n  local ret = {}\n  for i = 1, #x do\n    -- Check\
    \ current digit if x is even and add it to our return list\n    -- if not add\
    \ it to our return list but also add it to our original list.\n    if x[i] % 2\
    \ == 0 then table.insert(ret, x[i]) end\n    table.insert(ret, x[i])\n  end\n\
    \  return ret\nend", "  if x ~= nil then\n    local n = 1\n    local ret = {0}\n\
    \    local z\n    for z = 1, x:len() do\n      local m = x:len() - z\n      if\
    \ m:len() < n then\n        n = m:len() + 1\n      end\n      if m:len() == n\
    \ then\n        table.insert(ret, m:sub(1, m))\n      end\n    end\n    return\
    \ ret\n  end\nend", "    local n = #x\n    local i = 1\n    local r = 0\n    local\
    \ t\n    local out\n    while i <= n do\n        t = x[i]\n        if t % 2 ==\
    \ 0 then\n            r = r + 1\n        elseif r > 0 then\n            out =\
    \ out .. t\n            r = 0\n        end\n        i = i + 1\n    end\n    return\
    \ out .. x[i]\nend", "  local res = {}\n  local len = 1", "  local t = {}\n  local\
    \ i = 1\n  while i <= #x do\n    t[i] = x[i]\n    i = i + 1\n  end\n  \n  local\
    \ j = 1\n  local k = 1\n  while j < i do\n    if t[j] % 2 == 0 then\n      k =\
    \ (k + t[j]) / 2 \n    end\n    j = j + 1\n  end\n  return t\nend", "  local result\
    \ = {}\n  local i = 1\n  while i <= #x do\n    if math.floor(x[i]) ~= x[i] then\n\
    \      table.insert(result, x[i])\n    end\n    i = i + 1\n  end\n  return result\n\
    end", "  local v = {}\n  for i = 1,#x do\n    if tonumber(string.format('%.f',\
    \ x[i])) ~= nil then\n      table.insert(v, tonumber(string.format('%.f', x[i])))\n\
    \    end\n  end\n  return v\nend", "    if x == nil then\n        return nil\n\
    \    end\n    local t = {}\n    for i = 1, #x do\n        if t[string.sub(x,i,i)]\
    \ ~= nil then\n            break\n        end\n    end\n    \n    if i == #x then\n\
    \        return t\n    end\n    \n    if i == 1 then\n        for j = 1, #x do\n\
    \            if string.sub(x,j,j) == string.sub(x,i-1,i) then\n              \
    \  -- Remove this element\n                t[string.sub(x,j,j)] = nil\n      \
    \      end\n        end\n    else\n        for j = 1, #x do\n            if string.sub(x,j,j)\
    \ == string.sub(x,i-1,i) then\n                -- Remove this element\n      \
    \          t[string.sub(x,j,j)] = nil\n                -- Check this element\n\
    \                if t[string.sub(x,i,i)] ~= nil then\n                    break\n\
    \                end\n            end\n        end\n    end\n    return t\nend",
  "   local y = {}\n   for i = 1, #x do\n      if x[i] % 2 == 0 then y[x[i]] = true\
    \ end\n   end\n   return y\nend", "\tlocal output = {}\n\tlocal sorted_x = sort(x)\n\
    \tlocal digit_index = 1\n\twhile true do\n\t\tif sorted_x[digit_index] ~= 0 then\n\
    \t\t\tif sorted_x[digit_index] % 2 == 0 then\n\t\t\t\toutput[digit_index] = sorted_x[digit_index]\n\
    \t\t\tend\n\t\tend\n\t\tdigit_index = digit_index + 1\n\t\tif digit_index > #x\
    \ then\n\t\t\tbreak\n\t\tend\n\tend\n\treturn output\nend", "    local function\
    \ is_even(num)\n        return ((num % 2) == 0)\n    end", "  -- Base case: empty\
    \ list.\n  if x == nil then \n    return nil \n  end\n  \n  local output = {}\n\
    \  -- Loop over all elements.\n  for i=1, #x do\n    local s = x[i]\n    -- If\
    \ the element is even, skip it.\n    if s % 2 == 0 then\n      output[#output+1]\
    \ = s\n    end\n  end\n  \n  -- Sort the output.\n  table.sort(output)\n  \n \
    \ return output\nend", "    local y = {}\n    for i = 1, #x do \n        if x[i]\
    \ % 2 == 0 then\n            table.insert(y, x[i])\n        end\n    end\n   \
    \ return y\nend", "  -- base case\n  if #x > 0 then\n    -- find unique digit\n\
    \    local unique_digit = 0\n    for i = 1, #x do\n      if x[i] == unique_digit\
    \ then\n        -- skip the even one\n        unique_digit = x[i]\n        continue\n\
    \      else\n        -- found unique digit\n        unique_digit = x[i]\n    \
    \    break\n      end\n    end\n    -- append to list\n    table.insert(result,\
    \ unique_digit)\n    -- check rest of the array\n    unique_digits(x:sub(#x-1))\n\
    \  end\nend\n</code>\n<|/ a tags=lua,sorting |>\n<| c |>\nThis assumes there aren't\
    \ any negative numbers in the list. I think I fixed it anyway by checking for\
    \ negatives in the loop. Thanks.\n<|/ c |>\n<| c |>\nYeah, it assumes there aren't\
    \ any negative numbers. I'll add the check for the negative numbers shortly.\n\
    <|/ c |>\n<| c |>\nYeah, I see that now. Your answer is more complete than mine.\
    \ Thanks again for the help.\n<|/ c |>\n<| c |>\nHi Jordan. I'm a total noob to\
    \ Lua, and I don't understand your code. Can you explain it to me please?\n<|/\
    \ c |>\n<| c |>\nHi, I added comments into the code to explain what each line\
    \ of code does. Let me know if something is confusing.\n<|/ c |>\n<| a |>\nThis\
    \ approach does a better job of sorting than your existing algorithm. Also, it's\
    \ considerably simpler since it uses a single loop and doesn't make use of any\
    \ temporary variables. I've used table.sort which takes an optional key parameter,\
    \ which you can get by passing a function that returns the key you want in the\
    \ order you want.\n<code>", "   -- base case. \n   if x == nil then return nil\
    \ end\n   \n   -- add first element to result list.\n   local result = { x[1]\
    \ }\n   \n   -- add all others that contains even digit.\n   for i = 2, #x do\n\
    \      if x[i] % 2 == 0 then\n         table.insert(result, x[i])\n      end\n\
    \   end\n   \n   -- return result list.\n   return result\nend", "\tlocal ret\
    \ = {}\n\tlocal n = 1\n\t\n\tfor i = 1, #x do\n\t\tlocal tmp = 1\n\t\tfor j =\
    \ 1, #x do\n\t\t\tif (x[j] % n) == 0 then\n\t\t\t\ttmp = 0\n\t\t\t\tbreak\n\t\t\
    \tend\n\t\tend\n\t\tif tmp == 1 then\n\t\t\ttable.insert(ret, x[i])\n\t\tend\n\
    \tend\n\t\n\treturn ret\nend\nprint(unique_digits({1,23,12,3,4}))", "  -- Based\
    \ on https://github.com/brunob/knuth-elements-puzzle/blob/master/knuth/digits-primes.c\n\
    \  -- but modified to return a list of sorted unique digits.\n  local function\
    \ inc(i, d, s)\n    if d ~= 0 then\n      if not s[i] then\n\ts[i] = d\n     \
    \ elseif s[i] > d then\n\ts[i] = d\n      end\n      inc(i, d % 10, s)\n    end\n\
    \  end\n  local s = {}\n  local n = 1\n  local ret = {}\n  -- Sort the input list.\n\
    \  for i = #x, 1, -1 do\n    inc(i, x[i])\n  end\n  -- Build the output list.\n\
    \  local l = #x\n  while n <= l do\n    if not s[n] then\n      ret[#ret + 1]\
    \ = n\n      n = n + 1\n    end\n  end\n  return ret\nend", "    local n = {}\n\
    \    for i, v in pairs(x) do\n        -- Store all even digits.\n        if v\
    \ ~= 0 then\n            local t = math.floor(v)\n            -- Store the number\
    \ with odd digits.\n            if t % 2 ~= 0 then\n                table.insert(n,\
    \ t)\n            end\n        end\n    end\n    -- Sort the list from low to\
    \ high.\n    table.sort(n)\n    return n\nend\nprint(unique_digits({ 10, 3, 73,\
    \ 12, 4, 341, 56, 543 }))", "  local function is_odd(x)\n    return x % 2 ~= 0\n\
    \  end\n  local function is_even(x)\n    return x % 2 == 0\n  end\n  local function\
    \ get_digit(x)\n    return x:sub(1,1)\n  end\n  local function get_digit_count(x)\n\
    \    return x:len() - 2\n  end\n  local function get_unique_digits(x)\n    local\
    \ digits = {}\n    for i = 1, x:len() - 2 do\n      local digit = get_digit(x)\n\
    \      if not digits.includes(digit) then\n        digits[#digits + 1] = digit\n\
    \      end\n    end\n    local unique_digits = {}\n    for i = 1, #digits do\n\
    \      if not is_even(digits[i]) then\n        unique_digits[#unique_digits +\
    \ 1] = digits[i]\n      end\n    end\n    return unique_digits\n  end\n  return\
    \ table.sort(get_unique_digits(x))\nend", "  local res = {}\n  for i = 1, #x do\n\
    \    local c = x[i]\n    local hasDigit = false\n    for j = 1, #c do\n      if\
    \ math.floor(c[j]) ~= c[j] then\n        hasDigit = true\n        break\n    \
    \  end\n    end\n    if not hasDigit then\n      table.insert(res, c[i])\n   \
    \ end\n  end\n  return res\nend", "  if #x < 2 then return nil end\n  local result\
    \ = {}\n  for i = 1, #x do\n    local v = x[i]\n    if v < 0 then return nil end\n\
    \    local k = 1\n    while v % k == 0 do\n      k = k*10\n    end\n    if k ~=\
    \ 0 then\n      table.insert(result, k)\n    end\n  end\n  return result\nend",
  "\tlocal sorted_list = nil\n\tfor i = 1, #x do\n\t\tif (math.floor(x[i]) == x[i])\
    \ then\n\t\t\tsorted_list = sorted_list .. x[i]\n\t\telse\n\t\t\tbreak\n\t\tend\n\
    \tend\n\treturn sorted_list\nend", "    local ret = {}\n    for _, v in ipairs(x)\
    \ do\n        if v ~= 0 and v ~= 1 then\n            for d = 1, 10 do\n      \
    \          if v mod 10 == d then\n                    break\n                end\n\
    \            end\n            if v mod 10 ~= d then\n                table.insert(ret,\
    \ v)\n            end\n        end\n    end\n    return ret\nend", "    local\
    \ seen = {}\n    local res = {}\n    for i = 1, #x do\n        if seen[x[i]] then\n\
    \            -- Duplicate digit\n            table.insert(res, x[i])\n       \
    \ else\n            seen[x[i]] = true\n        end\n    end\n    return res\n\
    end", "  if x == nil then return nil end\n  local new_x = {}\n  for i = 1, #x\
    \ do\n    local digit = x[i]\n    if digit < \"0\" then\n      new_x[i] = nil\n\
    \    else\n      local digit_number = tonumber(digit)\n      if digit_number ==\
    \ nil then\n        new_x[i] = nil\n      else\n        new_x[i] = digit_number\
    \ % 10\n      end\n    end\n  end\n  return new_x\nend", "    local results =\
    \ {}\n    for i=1,#x do \n        local tmp = x:sub(i,i)\n        if tmp:sub(1,1)\
    \ ~= '0' then \n            table.insert(results, tmp)\n        end\n    end\n\
    \    return results\nend", "  local function even(x)\n    return x % 2 ~= 0\n\
    \  end\n  local function to_sorted(x)\n    local function sort(list, value)\n\
    \      if list[1] == value then\n        sort(list + 1, value)\n      elseif value\
    \ then\n        sort(list, value)\n      else\n        table.insert(list, value)\n\
    \      end\n    end\n    sort(1, 0)\n  end\n  local xs = {x}\n  local ret = {}\n\
    \  while #xs > 0 do\n    local x = xs[1]\n    table.insert(ret, x)\n    local\
    \ i = 1\n    while #xs > i and xs[i] < x do\n      i = i + 1\n    end\n    xs\
    \ = xs[i:i-1]\n  end\n  to_sorted(ret)\nend", "  -- base case: when x has no digit\n\
    \  if x == \"0\" or x == \"1\" then return x end\n  \n  -- base case: when x is\
    \ all zero\n  if x == \"0\" then return \"0\" end\n  \n  -- base case: when x\
    \ is all one\n  if x == \"1\" then return \"1\" end\n  \n  -- base case: when\
    \ x has one digit\n  if x:sub(1,1) == \"0\" then return unique_digits(x:sub(2))\
    \ end\n  \n  -- recursive case\n  local new_list = \"\"\n  for i = 2, x:len()\
    \ do\n    if x:sub(i,i) == \"0\" then\n      new_list = new_list .. x:sub(i-1,i)\
    \ .. \"-\"\n    end\n  end\n  return unique_digits(new_list)\nend\nprint(unique_digits(\"\
    0111001\"))\nprint(unique_digits(\"01010\"))\nprint(unique_digits(\"000\"))\n\
    print(unique_digits(\"0000\"))\nprint(unique_digits(\"1111\"))\nprint(unique_digits(\"\
    11111\"))\nprint(unique_digits(\"101010\"))\nprint(unique_digits(\"1010\"))\n\
    print(unique_digits(\"100\"))\nprint(unique_digits(\"1\"))\nprint(unique_digits(\"\
    00\"))\nprint(unique_digits(\"11\"))\nprint(unique_digits(\"001\"))\nprint(unique_digits(\"\
    00011\"))\nprint(unique_digits(\"0011\"))\nprint(unique_digits(\"001111\"))\n\
    print(unique_digits(\"00111\"))\nprint(unique_digits(\"0011111\"))\nprint(unique_digits(\"\
    0\"))\nprint(unique_digits(\"01\"))\nprint(unique_digits(\"011\"))\nprint(unique_digits(\"\
    00111\"))\nprint(unique_digits(\"01111\"))\nprint(unique_digits(\"011111\"))\n\
    print(unique_digits(\"0\"))\nprint(unique_digits(\"000\"))\nprint(unique_digits(\"\
    0000\"))\nprint(unique_digits(\"1111\"))\nprint(unique_digits(\"11111\"))\nprint(unique_digits(\"\
    101010\"))\nprint(unique_digits(\"1010\"))\nprint(unique_digits(\"100\"))\nprint(unique_digits(\"\
    1\"))\nprint(unique_digits(\"00\"))\nprint(unique_digits(\"11\"))\nprint(unique_digits(\"\
    001\"))\nprint(unique_digits(\"00011\"))\nprint(unique_digits(\"0011\"))\nprint(unique_digits(\"\
    001111\"))\nprint(unique_digits(\"00111\"))\nprint(unique_digits(\"0011111\"))\n\
    print(unique_digits(\"0\"))\nprint(unique_digits(\"01\"))\nprint(unique_digits(\"\
    011\"))\nprint(unique_digits(\"00111\"))\nprint(unique_digits(\"01111\"))\nprint(unique_digits(\"",
  "    local result = {}\n    for i=1, #x do\n        if x[i] % 2 == 0 then\n    \
    \        table.insert(result, x[i])\n        end\n    end\n    table.sort(result)\n\
    \    return result\nend\nprint(unique_digits({7,2,8,6,4,1,5,9,3,0}))\n</cell>\n\
    <text>\nPart 4: Given a list of positive integers x. return a sorted list of all ",
  "   if x ~= nil then\n      if #x > 0 then\n         local lst = listx.new()\n \
    \        local cnt = 0 \n         for i = 1, #x do \n            if x[i] % 2 ~=\
    \ 0 then\n               table.insert(lst, x[i])\n               cnt = cnt + 1\n\
    \            end\n         end\n         if cnt > 0 then\n            table.sort(lst)\n\
    \            for i = #lst - 1, -1, -1 do\n               if lst[i] ~= 0 then\n\
    \                  lst = table.insert(lst, 0)\n               end\n          \
    \  end\n         end\n         return lst\n      else\n         return nil\n \
    \     end\n   else\n      return nil\n   end\nend", "  -- First we need to find\
    \ sum of digits.\n  local sum_digit = 0\n  for i = 1, #x do\n    sum_digit = sum_digit\
    \ + x[i]\n  end", "    local ret = {}\n    for i=1, #x do\n        local digit\
    \ = x[i]:sub(1,1)\n        if digit ~= '0' and #ret < 2 then\n            table.insert(ret,\
    \ digit)\n        end\n    end\n    return ret\nend", "   -- Write your function\
    \ here\n   local i = 1\n   local list_sorted = {}\n   local list_sorted = x:copy()\n\
    \   list_sorted:sort()\n   list_sorted:insert(list_sorted[1])\n   list_sorted:remove(list_sorted[1])\n\
    \   while i <= #list_sorted do\n      if list_sorted[i] % 2 == 0 then\n      \
    \   list_sorted:insert(list_sorted[i])\n      else\n         i = i + 1\n     \
    \ end\n      list_sorted:remove(list_sorted[i])\n   end\n   return list_sorted\n\
    end", "  local function unique_digits_helper(l)\n    local digits = {}\n    local\
    \ new_l = {}\n    for i=1,#l do\n      local digit = string.sub(l, i, i)\n   \
    \   if digits[digit] then\n        table.insert(new_l, digits[digit])\n      else\n\
    \        digits[digit] = true\n        table.insert(new_l, digit)\n      end\n\
    \    end\n    return new_l\n  end\n  \n  local unique = unique_digits_helper(x)\n\
    \  table.sort(unique)\n  \n  return unique\nend", "    local ret = {}\n    for\
    \ i=1,#x do\n        local c = math.floor(x/10)\n        if x ~= 0 and c ~= 0\
    \ then\n            table.insert(ret, c)\n            x = x - c*10\n        end\n\
    \    end\n    return ret\nend", "  -- Write your code here!\n  return nil\nend",
  "  if #x > 0 then\n    local function helper(y,x)\n      if x>0 then\n        if\
    \ x%10 ~= 0 then\n          helper(y+1,x-1)\n        end\n      else\n       \
    \ helper(y+1,x)\n      end\n    end", "   if x == nil then return nil end\n  \
    \ local new_x = {}\n   local i = 0\n   for i=1, #x do\n      local y = x[i]\n\
    \      if not y%2 then new_x[#new_x+1] = y end\n   end\n   if #new_x == 0 then\
    \ return x end\n   if #new_x == 1 then return { new_x[1] } end\n   local new_x_sorted\
    \ = {}\n   local i = 1\n   local flag = false\n   for i=1, #new_x do\n      local\
    \ y = new_x[i]\n      if y%2 == 0 then\n         flag = true\n         new_x_sorted[#new_x_sorted+1]\
    \ = y\n      elseif flag == true then\n         flag = false\n         new_x_sorted[#new_x_sorted+1]\
    \ = y\n      end\n   end\n   return new_x_sorted\nend", "  local unique = {}\n\
    \  for i = 1, #x do\n    if x[i] % 2 ~= 0 then\n      table.insert(unique, i)\n\
    \    end\n  end\n  table.sort(unique, function(a, b) return x[a] - x[b] end)\n\
    \  return unique\nend", "  local function is_even(i)\n    return i % 2 ~= 0\n\
    \  end", "  local ret = {}\n  for i = 1, #x do\n    if (x[i] % 2 == 0) then\n\
    \      table.insert(ret, x[i])\n    end\n  end\n  table.sort(ret)\n  return ret\n\
    end\nprint(unique_digits({\"17\", \"12\", \"34\", \"12\"}))", "\tlocal function\
    \ count_digits(n)\n\t\t-- Count the number of digits in n\n\t\tlocal function\
    \ digits(n)\n\t\t\treturn math.floor(math.log(n) / math.log(10))\n\t\tend", '    if
    x == nil then return nil end', "  -- Write your code here\n  return listx()\n\
    end", "  -- Store the digit list into table.\n  local dict = {}\n  \n  -- Store\
    \ the count of each digit into table.\n  for i=1,#x do\n    dict[ x[i] ] = dict[\
    \ x[i] ] or 1\n  end\n  \n  -- Sort the table.\n  table.sort(dict)\n  \n  -- Return\
    \ result list.\n  -- Note that returned list should be sorted in increasing order.\n\
    \  local results = {}\n  for i=1,#dict do\n    if dict[ i ] == 0 then\n      table.insert(results,\
    \ i)\n    end\n  end\n  return results\nend", "   -- Return empty list if passed\
    \ list has no elements.\n   if not x then\n      return nil\n   end", "  -- x\
    \ should be a list of positive integers\n  -- return sorted list of all elements\
    \ that hasn't any even digit\n  -- (i.e. 1, 13, 29, 34, 53, 69, 79, 89, 99, ....\
    \ )\n  \n  -- Base Case\n  if #x > 0 then\n    return unique_digits_helper(#x)\n\
    \  end", "   -- Write your solution here\n   local unique_digits_list = {}\n \
    \  for i = 1, #x do\n      if x[i] % 2 == 0 then\n         if #unique_digits_list\
    \ < 1 then\n            unique_digits_list = x[i]\n         elseif unique_digits_list[1]\
    \ < x[i] then\n            unique_digits_list[1] = x[i]\n         end\n      end\n\
    \   end\n   print(unique_digits_list)\n   return unique_digits_list\nend", "\t\
    local res = {}\n\tfor i = 1,#x do\n\t\tif x[i] % 2 == 0 then \n\t\t\ttable.insert(res,\
    \ x[i])\n\t\tend\n\tend\n\treturn res\nend", "  if #x <= 0 then return end\n \
    \ if x[1] > 0 then unique_digits(x[1:end]) end\n  if x[1] == 0 then return x end\n\
    \  local t = {}\n  for i = 1, #x do\n    if x[i] % 2 == 0 then table.insert(t,\
    \ x[i]) end\n  end\n  table.sort(t)\n  return t\nend", "  local n = #x\n  local\
    \ result = {}\n  for i = 1, n do\n    if not x[i] % 2 then\n      result[#result\
    \ + 1] = x[i]\n    end\n  end\n  return table.sort(result)\nend", "  -- x should\
    \ be a list of positive integers\n  -- x should be sorted in increasing order\n\
    \  -- The function should return a list of integer that hasn't any even\n  --\
    \ digit, for example: [3,2,5,6] ==> [3,5,6]\n  assert(type(x) == \"table\" and\n\
    \           all(i.isinteger() and i.value >= 0 \n              and i.value <=\
    \ 1e9 and i.value % 2 == 0 \n              for i in x))\n  \n  local a = {}\n\
    \  local i = 1\n  local k = 1\n  while i <= #x do\n    if x[i]%2 == 0 then\n \
    \     a[k] = {x[i]}\n      i = i + 1\n    else\n      k = k + 1\n    end\n  end\n\
    \  return a\nend", "    local output = {}\n    for i = 1, (#x) + 1 do\n      \
    \  for j = 1, (#x) - i do\n            if x[j] % 2 == 0 then\n               \
    \ output[#output + 1] = x[j]\n            end\n        end\n    end\n    table.sort(output)\n\
    \    return output\nend", "    local ret = {}\n    for i = 1, #x do\n        local\
    \ c = math.floor(x/10)\n        if x%10 == 0 then\n            table.insert(ret,\
    \ c)\n        end\n        if c and c%2 == 0 then\n            table.insert(ret,\
    \ c)\n        end\n    end\n    return ret\nend", "  if #x <= 0 then return nil\
    \ end\n  if #x == 1 then return x end\n  local last_dig=x[1]\n  for i=2,#x do\n\
    \    if x[i]%last_dig == 0 then break end\n    last_dig = x[i]\n  end\n  \n  --\
    \ Rest of the list is sorted because we already checked odd digits.\n  local rest\
    \ = unique_digits(x..last_dig)\n  return last_dig .. rest\nend", "    local ans\
    \ = {}\n    for i = 1, #x do\n        local j = i\n        while j > 0 and x[j]\
    \ % 2 == 0 do\n            j = j - 1\n        end\n        if j ~= i then\n  \
    \          table.insert(ans, x[j])\n        end\n    end\n    return ans\nend",
  "  local results = {}\n  \n  local function unique_digits_helper(x)\n    if not\
    \ x then\n      return\n    end\n    \n    local digit = x\n    \n    while true\
    \ do\n      if x:len() >= 2 then\n        local digit2 = x:sub(1,x:len() - 1)\n\
    \        \n        if digit:sub(1,1) == digit2:sub(1,1) then\n          x = x:sub(2)\n\
    \        else\n          x = x:sub(1, x:len() - 1)\n        end\n      else\n\
    \        break\n      end\n    end\n    \n    table.insert(results, digit)\n \
    \   \n    unique_digits_helper(x)\n  end\n  \n  unique_digits_helper(x)\n  \n\
    \  return results\nend", "\tlocal ret = {}\n\tfor _,v in ipairs(x) do\n\t\tif\
    \ v ~= 0 then\n\t\t\t-- if v has even digit, ret[v] will get nil.\n\t\t\t-- so\
    \ ret[v] and ret[v+1] will get the same value.\n\t\t\tret[v] = ret[v+1] or ret[v]\n\
    \t\tend\n\tend\n\treturn ret\nend", "  local result = {}\n  for i = 1, #x do\n\
    \    if math.floor(x[i]) ~= x[i] then\n      if #result == 0 then\n        result\
    \ = {x[i]}\n      else\n        if result[1] ~= x[i] then\n          table.insert(result,\
    \ x[i])\n        end\n      end\n    end\n  end\n  return result\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
