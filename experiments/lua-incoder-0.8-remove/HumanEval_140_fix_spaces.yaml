name: HumanEval_140_fix_spaces
language: lua
prompt: "-- Given a string text, replace all spaces in it with underscores, \n-- and\
  \ if a string has more than 2 consecutive spaces, \n-- then replace all consecutive\
  \ spaces with -\nlocal function fix_spaces(text)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fix_spaces\n\
  \    lu.assertEquals(candidate('Example'), 'Example')\n    lu.assertEquals(candidate('Mudasir\
  \ Hanif '), 'Mudasir_Hanif_')\n    lu.assertEquals(candidate('Yellow Yellow  Dirty\
  \  Fellow'), 'Yellow_Yellow__Dirty__Fellow')\n    lu.assertEquals(candidate('Exa\
  \   mple'), 'Exa-mple')\n    lu.assertEquals(candidate('   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')\n\
  end\n\nos.exit(lu.LuaUnit.run())"
completions: ["  -- The initial loop is necessary to handle cases where the text is\
    \ \n  -- empty.\n  for i = 1, #text do\n    if text[i] == ' ' then\n      text[i]\
    \ = '_'\n    end\n  end\n  for i = 1, #text do\n    if text[i] == ' ' and (i -\
    \ 1) < #text and \n       (text[i + 1] == ' ' or text[i + 2] == ' ') then\n  \
    \    text[i] = '-'\n    end\n  end\n  return text\nend", "    local num_spaces\
    \ = string.len(text) - string.len(text:gsub(\"%s\", \"\"))\n    if num_spaces\
    \ > 2 then\n        return text:gsub(\"%s\", \"_\"):gsub(\"  \", \"_\")\n    else\n\
    \        return text\n    end\nend", "    return text:gsub('  ', ' ')\nend", " \
    \ local spaces = text:gsub(\"  +\",\"_\")\n  local consecutive = spaces:gsub(\"\
    \  +\",\"-\")\n  return consecutive \nend", "    local result = text\n    \n \
    \   local s = string.gsub(\" \", \"_\", result)\n    local s_n = string.gsub(\"\
    \  \", \"_\", result)\n    local s_d = string.gsub(\"  \", \"_\", result)\n  \
    \  local s_r = string.gsub(\"  \", \"_\", result)\n    local s_t = string.gsub(\"\
    \  \", \"_\", result)\n    \n    if string.find(s_n, \"  \") then\n        result\
    \ = s_n\n    elseif string.find(s_d, \"  \") then\n        result = s_d\n    elseif\
    \ string.find(s_r, \"  \") then\n        result = s_r\n    elseif string.find(s_t,\
    \ \"  \") then\n        result = s_t\n    end\n    \n    -- return \"--\" .. result\n\
    \    return result\nend", "    -- First replace all spaces with underscores\n\
    \    text = text:gsub(\"[ ]\", \"_\")\n    -- If there are more than 2 consecutive\
    \ spaces, replace them all with -\n    if text:gsub(\"  +\", \"-\") == \"\" then\
    \ return \"\" end\n    -- Then replace the spaces with dashes\n    text = text:gsub(\"\
    \  \", \"-\")\n    -- Return the fixed text\n    return text\nend", "   text =\
    \ text:gsub(\"[\\u0020]+\", \" \")\n   text = text:gsub(\"  +\", \"- \")\n   text\
    \ = text:gsub(\"  \", \"-\")\n   text = text:gsub(\"  \", \" \")\n   return text\n\
    end", "  text = text:gsub(' ', '_')\n  text = text:gsub('(%S+)%-', '\\1-')\n \
    \ return text\nend", "  text = text:gsub(\"[ ]\", \"_\")\n  text = text:gsub(\"\
    \  \", \"_\")\n  if text:match(\"%S+\") then\n    text = text:gsub(\"%S+\", function\
    \ (s) \n      return (s:gsub(\"  \", \"-\")) -- replace consecutive spaces with\
    \ hyphen\n    end)\n  end\n  return text\nend", "   text = string.gsub(text, \"\
    \  \", \"_\")\n   local spaces = string.find(text, \"  \")\n   if spaces > 1 then\n\
    \      text = string.gsub(text, \"  \", \"-\")\n   end\n   return text\nend",
  "  -- Replace all spaces with underscores\n  text = text:gsub(\"[ ]+\", \"_\");\n\
    \  -- If there are more than 2 consecutive spaces, replace them with -\n  while\
    \ text:find(\"  \")>0 do\n    text = text:gsub(\"  \", \"-\");\n  end\n  return\
    \ text;\nend", "   local fixed_text = text\n   -- If there are spaces, change\
    \ them all to underscores\n   if text:find(\" \") ~= nil then\n      fixed_text\
    \ = text:gsub( \" \", \"_\" )\n   end\n   -- If there are more than two consecutive\
    \ spaces, replace with -\n   if text:find(\" \") ~= nil then\n      fixed_text\
    \ = text:gsub( \"  \", \"_\" )\n   end\n   return fixed_text\nend", "  local text2\
    \ = text:gsub(\"% \", \"_\")\n  local num_spaces = text:gsub(\"( +)\", \"-%1\"\
    ):gsub(\"(-+)\", \"-%1\"):gsub(\"( +)\", \"%1\"):gsub(\"(-+)\", \"%1\")\n  if\
    \ num_spaces ~= \"\" then\n    local spaces = text:gsub(\"%1\", \"_\")\n    return\
    \ text2:gsub(\"%1\", spaces):gsub(\"_\", spaces)\n  else\n    return text2\n \
    \ end\nend", "    local spaces = {}\n    for i = 1, #text do\n        if string.sub(text,\
    \ i, i) == ' ' then\n            table.insert(spaces, i)\n        end\n    end\n\
    \    if #spaces > 2 then\n        for i = 1, #spaces do\n            local prev_i\
    \ = spaces[i - 1]\n            local next_i = spaces[i + 1]\n            if string.sub(text,\
    \ prev_i, next_i) == '  ' then\n                text = '-' .. text\n         \
    \       table.remove(spaces, i - 1)\n                table.remove(spaces, i +\
    \ 1)\n                i = #spaces\n            end\n        end\n    end\n   \
    \ return text\nend", "    local spaces = text:gsub(\"%s+\", function (s) return\
    \ \"-\" end)\n    if spaces:gsub(\"-%s+\", \"-\"):gsub(\"-%s+\", \"-\"):gsub(\"\
    -%s+\", \"-\"):gsub(\"-%s+\", \"-\"):gsub(\"-%s+\", \"-\"):gsub(\"-%s+\", \"-\"\
    ):gsub(\"-%s+\", \"-\"):gsub(\"-%s+\", \"-\"):gsub(\"-%s+\", \"-\"):gsub(\"-%s+\"\
    , \"_\"):gsub(\"-%s+\", \"_\"):gsub(\"-%s+\", \"_\"):gsub(\"-%s+\", \"_\"):gsub(\"\
    -%s+\", \"_\"):gsub(\"-%s+\", \"_\"):gsub(\"-%s+\", \"_\"):gsub(\"-%s+\", \"_\"\
    ):gsub(\"-%s+\", \"_\"):gsub(\"-%s+\", \"_\"):gsub(\"-%s+\", \"_\"):gsub(\"-%s+\"\
    , \"_\"):gsub(\"-%s+\", \"_\"):gsub(\"-%s+\", \"_\"):gsub(\"-%s+\", \"_\"):gsub(\"\
    -%s+\", \"_\"):gsub(\"-%s+\", \"_\"):gsub(\"-%s+\", \"_\"):gsub(\"-%s+\", \"_\"\
    ):gsub(\"-%s+\", \"_\"):gsub(\"-%s+\", \"_\"):gsub(\"-%s+\", \"_\"):gsub(\"-%s+\"\
    , \"_\"):gsub(\"-%s+\", \"_\"):gsub(\"-%s+\", \"_\"):gsub(\"-%s+\", \"_\"):gsub(\"\
    -%s+\", \"_\"):gsub(\"-%s+\", \"_\"):gsub(\"-%s+\", \"_\"):gsub(\"-%s+\", \"_\"\
    ):gsub(\"-%s+\", \"_\"):gsub(\"-%s+\", \"_\"):gsub(\"-%s+\", \"_\"):gsub(\"-%s+\"\
    , \"_\"):gsub(\"-%s+\", \"_\"):gsub(\"-%s+\", \"_\"):gsub(\"-%s+\", \"_\"):gsub(\"\
    -%s+\", \"_\"):gsub(\"-%s+\", \"_\"):gsub(\"-%s+\", \"_\"):gsub(\"-%s+\", \"_\"\
    ):gsub(\"-%s+\", \"_\"):gsub(\"-%s+\", \"_\"):gsub(\"-%s+\", \"_\"):gsub(\"-%s+\"\
    , \"_\"):gsub(\"-%s+\", \"_\"):gsub(\"-%s+\", \"_\"):gsub(\"-%s+\", \"_\"):gsub(\"\
    -%s+\", \"_\"):gsub(\"-%s+\", \"_\"):gsub(\"-%s+\", \"_\"):gsub(\"-%s+\", \"_\"\
    ):gsub(\"-%s+\", \"_\"):gsub(\"-", "   -- We assume that spaces in front of word\
    \ are part of word and that\n   -- spaces in front of punctuation are part of\
    \ punctuation\n   -- So we start from the ends of the words and punctuations and\
    \ \n   -- go backward.\n   -- If we see a non-space, we store its index and continue,\
    \ otherwise,\n   -- we do nothing.\n   local startsPunctual = false\n   local\
    \ startsWord = false\n   local lastWordSpaceIndex = nil\n   local lastPunctualSpaceIndex\
    \ = nil\n   for i = #text, 1, -1 do\n      if startsWord then\n         if text[i]\
    \ == \" \" then\n            -- Don't replace a space with underscores\n     \
    \       if lastWordSpaceIndex and i == lastWordSpaceIndex then\n             \
    \  lastWordSpaceIndex = nil\n               startsWord = false\n            else\n\
    \               lastWordSpaceIndex = i\n            end\n         elseif text[i]\
    \ == \",\" then\n            if lastWordSpaceIndex and i == lastWordSpaceIndex\
    \ then\n               lastWordSpaceIndex = nil\n               startsWord = false\n\
    \            else\n               startsWord = false\n            end\n      \
    \   elseif text[i] == \"-\" then\n            -- Don't replace an underscore with\
    \ spaces\n            if lastWordSpaceIndex and i == lastWordSpaceIndex then\n\
    \               lastWordSpaceIndex = nil\n               startsWord = false\n\
    \            else\n               lastWordSpaceIndex = i\n            end\n  \
    \       elseif text[i] == \".\" then\n            -- Don't replace a full stop\
    \ with spaces\n            if lastWordSpaceIndex and i == lastWordSpaceIndex then\n\
    \               lastWordSpaceIndex = nil\n               startsWord = false\n\
    \            else\n               lastWordSpaceIndex = i\n            end\n  \
    \       elseif text[i] == \"!\" then\n            -- Don't replace an exclamation\
    \ mark with spaces\n            if lastWordSpaceIndex and i == lastWordSpaceIndex\
    \ then\n               lastWordSpaceIndex = nil\n               startsWord = false\n\
    \            else\n               lastWordSpaceIndex = i\n            end\n  \
    \       elseif text[i] == \"?\" then\n            -- Don't replace a question\
    \ mark with spaces\n            if lastWordSpaceIndex and i == lastWordSpaceIndex\
    \ then\n               lastWordSpaceIndex = nil\n               startsWord = false\n\
    \            else\n               lastWordSpaceIndex = i\n            end\n  \
    \       elseif text[i] == \"$\" then\n            -- Don't replace a dollar sign\
    \ with spaces\n            if lastWordSpaceIndex and i == lastWordSpaceIndex then\n\
    \               lastWordSpaceIndex = nil\n               start", "    if text:match\
    \ \"^%s*(%S+)%s*$\" then\n        local text = text:gsub(\"%S+\", function(s)\
    \ return s:gsub(\"(%S+)\", function(s) return \"_\" .. s end)end)\n        return\
    \ text:gsub(\"%S+$\", function(s) return \"_\" .. s end)\n    else\n        return\
    \ text\n    end\nend\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\nThis is not\
    \ the most efficient way but it will work. Just change the function and run it\
    \ again to make sure it works\n<code>", "   text = string.gsub(text, \"[ ]+\"\
    , \"_\")\n   text = string.gsub(text, \"[ ]{2,}\", \"-\")\n   return text\nend",
  "    local t = text\n    local last_space = nil\n    local spaces = nil\n    for\
    \ i = 1, #t do\n        local c = string.byte(t[i])\n        if c == 0x20 then\n\
    \            last_space = i \n        elseif c == 0xA0 then\n            if last_space\
    \ then\n                spaces = last_space - i - 1\n                if spaces\
    \ > 2 then\n                    t = table.concat(t:sub(1, spaces - 1), \"-\" ..\
    \ table.concat(t:sub(spaces + 1, #t), \" \"))\n                else\n        \
    \            t = table.concat(t:sub(1, spaces), \" \")\n                end\n\
    \                last_space = nil\n            end\n        else\n           \
    \ last_space = nil\n        end\n    end\n    return t\nend", "    local spaces\
    \ = \" \"\n    local replace = \"_\"\n    local hasspace = false\n    local s\
    \ = text:gsub( spaces, replace )\n    while s:match( \"^%s+$\" ) do\n        local\
    \ c = s:sub( 1, s:find( spaces, 1 ) )\n        if c:sub( 1, 1 ) == spaces then\n\
    \            hasspace = true\n        else\n            hasspace = false\n   \
    \     end\n        local sub = s:sub( s:find( c ) )\n        if sub:sub( 1, 1\
    \ ) == spaces then\n            hasspace = true\n        end\n        s = s:sub(\
    \ s:find( c ) + 1 )\n    end\n    return s:gsub( replace, spaces )\nend", "  \
    \ local last_space = false\n   text = text:gsub('%s+', function(space)\n     \
    \ if space ~= '' and space ~= ' ' then\n         last_space = true\n         return\
    \ '_'\n      else\n         last_space = false\n         return '-'\n      end\n\
    \   end)\n   if last_space then\n      text = text:gsub(' ', '-')\n   end\n  \
    \ return text\nend", "  local spaces = \"[[ ]*\"\n  local leading_spaces = text:gsub(\
    \ spaces, \"_\" )\n  local trailing_spaces = text:gsub( \"[[ ]*$\", \"_\" )\n\
    \  \n  if #leading_spaces > 2 and #trailing_spaces > 2 then\n    return leading_spaces:gsub(\
    \ \"_\", \"-\"):gsub( \"-\", \"_\")\n  else\n    return leading_spaces:gsub( \"\
    _\", \"_\")\n  end\nend", "  -- replace all spaces with underscores\n  text =\
    \ text:gsub('  ', ' ')\n  -- if no more than one consecutive spaces, replace all\
    \ consecutive spaces with -\n  if text:match('%-%-%') or text:match('%-%.-%')\
    \ then\n    text = text:gsub
  "    -- Replace the spaces with underscores\n    text = text:gsub(' ', '_')\n  \
    \  -- If there are more than 2 consecutive spaces\n    -- then replace them with\
    \ '-'\n    if text:match('%S+%S+') then\n        text = text:gsub('%S+', '-%S-')\n\
    \    end\n    return text\nend\n</code>\n<|/ a |>\n<| c |>\nThe idea of using\
    \ `%S+%S+` was good, but I found I had to use `%S+$` to get the effect I was looking\
    \ for. `%S+%S+` would also remove the spaces between words and replace them with\
    \ underscores -- but I'd like to keep the spaces between words.\n<|/ c |>\n<|\
    \ c |>\n`%S+$` works on my machine to preserve the spaces between words.\n<|/\
    \ c |>\n<| a tags=lua |>\n<code>", "  local spaces = {\n    \"-\", \"_\", \" \"\
    \n  }\n  -- remove trailing spaces, if any\n  text = string.gsub(text, \" $\"\
    , \"\")\n  -- check for consecutive spaces\n  if text:match(\"%w+( %w+)*$\") then\n\
    \    local new_text = \"\"\n    -- replace spaces with dashes\n    for i = 1,\
    \ #spaces do\n      local space_pos = text:find(spaces[i])\n      if space_pos\
    \ ~= nil then\n        new_text = new_text .. text:sub(space_pos, space_pos +\
    \ 1)\n      end\n    end\n    local final_spaces = new_text:gsub(\"( %w+)\",\n\
    \      \"-\") .. new_text:gsub(\"%w+( %w+)\",\n      \"-\") -- replace spaces\
    \ with dashes\n    local final_spaces = string.gsub(final_spaces,\n      \"( +%w+)-\"\
    , \"_\") -- replace consecutive dashes with underscores\n    text = final_spaces\
    \ .. new_text:sub(1, #new_text) -- append underscores\n  else\n    -- replace\
    \ spaces with dashes\n    for i = 1, #spaces do\n      local space_pos = text:find(spaces[i])\n\
    \      if space_pos ~= nil then\n        text = text:sub(space_pos, space_pos\
    \ + 1)\n      end\n    end\n  end\n  -- remove leading spaces\n  text = string.gsub(text,\
    \ \" %w+\", \" \")\n  -- remove extra spaces\n  text = text:gsub(\"^ +\", \"\"\
    )\n  text = text:gsub(\"( +%w+)\", \"\")\n  -- remove extra dashes\n  text = text:gsub(\"\
    (%w+)(-+)\", \"\\1-\")\n  return text\nend", "  return text:gsub('% +', '%%%%'):gsub('(\
    \ +)', '-%-%')\nend", "  local spaces = {}\n  local count = 0\n  for c in text:gmatch(\"\
    (.-)\") do\n    if c == \" \" then\n      count = count + 1\n    else\n      count\
    \ = count - 1\n    end\n    spaces[#spaces+1] = c\n  end\n  if count > 2 then\n\
    \    return text:gsub(\"%-+\" .. string.char(32) .. \"%+\", \"_\")\n  end\n  return\
    \ text\nend", "    local s = text\n    local spaces = {\n        start = string.find(s,\
    \ \"%s\"),\n        end = string.find(s, \"%s\", nil, true)\n    }\n    if spaces.start\
    \ == spaces.end then\n        return s\n    end\n    spaces.start = spaces.start\
    \ + 2\n    spaces.end   = spaces.end - (spaces.start - spaces.end)\n    if spaces.start\
    \ <= spaces.end then\n        s = s:sub(spaces.start, spaces.end)\n    end\n \
    \   s = s:gsub(\"  \",\"-\")\n    return s\nend", "  return text:gsub(' ', '_'):gsub('\
    \  ', '-')\nend", "  -- replace all spaces with underscores\n  text = text:gsub('%\
    \ ', '%%%d'):gsub('% %', '%%%d'):gsub('% %', '%%%d'):gsub('% %', '%%%d'):gsub('%\
    \ %', '%%%d'):gsub('% %', '%%%d'):gsub('% %', '%%%d'):gsub('% %', '%%%d'):gsub('%\
    \ %', '%%%d'):gsub('% %', '%%%d'):gsub('% %', '%%%d'):gsub('% %', '%%%d'):gsub('%\
    \ %', '%%%d'):gsub('% %', '%%%d'):gsub('% %', '%%%d'):gsub('% %', '%%%d'):gsub('%\
    \ %', '%%%d'):gsub('% %', '%%%d'):gsub('% %', '%%%d'):gsub('% %', '%%%d'):gsub('%\
    \ %', '%%%d'):gsub('% %', '%%%d'):gsub('% %', '%%%d'):gsub('% %', '%%%d'):gsub('%\
    \ %', '%%%d'):gsub('% %', '%%%d'):gsub('% %', '%%%d'):gsub('% %', '%%%d'):gsub('%\
    \ %', '%%%d'):gsub('% %', '%%%d'):gsub('% %', '%%%d'):gsub('% %', '%%%d'):gsub('%\
    \ %', '%%%d'):gsub('% %', '%%%d'):gsub('% %', '%%%d'):gsub('% %', '%%%d'):gsub('%\
    \ %', '%%%d'):gsub('% %', '%%%d'):gsub('% %', '%%%d'):gsub('% %', '%%%d'):gsub('%\
    \ %', '%%%d'):gsub('% %', '%%%d'):gsub('% %', '%%%d'):gsub('% %', '%%%d'):gsub('%\
    \ %', '%%%d'):gsub('% %', '%%%d'):gsub('% %', '%%%d'):gsub('% %', '%%%d'):gsub('%\
    \ %', '%%%d'):gsub('% %', '%%%d'):gsub('% %', '%%%d'):gsub('% %', '%%%d'):gsub('%\
    \ %', '%%%d'):gsub('% %', '%%%d'):gsub('% %', '%%%d'):gsub('% %', '", "  local\
    \ words = text:gsub(\"([^A-Za-z0-9 ]+)\")  -- Split on non-alphanumeric\n  local\
    \ spaces  = text:gsub(\"[  ]+\",\"-\")  -- Replace two or more spaces with -\n\
    \  return words .. spaces\nend", "    local spaces = {}\n    local s = ''\n  \
    \  for i = 1, #text do\n        local c = text:sub(i,i)\n        if c == ' ' then\n\
    \            table.insert(spaces, i - 1)\n        elseif c == '\\t' then\n   \
    \         s = s .. '-'\n        elseif c == '\\n' then\n            s = s .. '-'\n\
    \        else\n            s = s .. c\n        end\n    end\n    return s\nend",
  "  local pattern = \"[\" .. string.gsub(\"%S+\", \" \", \"_\") .. \"]+$\"\n  return\
    \ text:gsub(pattern, \"-\")\nend\n</code>\n<|/ a dscore=3 |>\n<| a tags=lua-patterns,string,lua\
    \ |>\nThis is my simple solution for this problem.\n<code>", "   -- Replace all\
    \ spaces with underscores\n   -- @usage: text = fix_spaces('a b c')\n   --   \
    \      -- text -> a_-b_-c_\n   -- @usage: text = fix_spaces('a b c   ')\n   --\
    \         -- text -> a_-b_-c-\n   return text:gsub('([^%s])%s+([^%s])','%1_%2_%3')\n\
    \      -- Replace all spaces with hyphens\n      -- @usage: text = fix_spaces('a\
    \ b c   ')\n      --         -- text -> a_-b_-c-\n      -- @usage: text = fix_spaces('a\
    \ b c')\n      --         -- text -> a-b-c\nend", "    local words = text:gsub(\"\
    ( +)\", \" \"):gsub(\"( +)\", \"_\")\n    if text:gsub(\"  +\")~=words then\n\
    \        text = words:gsub(\"  -\", \"  \")\n    end\n    return text\nend", "\t\
    -- remove all leading and trailing spaces\n\ttext = string.gsub(text, \"^ +\"\
    , \"\") -- ^ = beginning of line\n\ttext = string.gsub(text, \" *$\", \"\") --\
    \ $ = end of line\n\ttext = string.gsub(text, \"[ \\t]+\", \"_\") -- convert all\
    \ spaces to _\n\t-- remove consecutive underscores\n\ttext = string.gsub(text,\
    \ \"__+\", \"_\") -- convert all underscores to _\n\treturn text\nend", "  local\
    \ space_pattern = '[%z %Z %S %c %p %s]'\n  return text:gsub(' ', ' ')\n      \
    \   :gsub('  ', ' ')\n         :gsub(' ', ' '):gsub('  ', '-')\n         :gsub(space_pattern,\
    \ '-'):gsub('  ', '-')\nend", "  if text:match('^%s*$') == nil then return text\
    \ end\n  text = text:gsub(' ', '_')\n  if text:match('^%s*(.)$') then\n    text\
    \ = text:gsub('(.-)%s*$', '\\1')\n  end\n  text = text:gsub('%s*$', '_')\n  return\
    \ text\nend", "    local words = text:gsub(\"([^ ]+)\", function (x)\n       \
    \ x = x:gsub(\"[ ]+\", \"_\")\n        local xs = x:gsub(\"[ ]{2,}\", \"_\")\n\
    \        return xs\n    end)\n    local chars = text:gsub(\"([%a])\", function\
    \ (x)\n        local char = x:lower()\n        if char == \"a\" then\n       \
    \     return \"\xE5\"\n        elseif char == \"o\" then\n            return \"\
    \xF6\"\n        elseif char == \"e\" then\n            return \"\xE6\"\n     \
    \   elseif char == \"i\" then\n            return \"\xEF\"\n        elseif char\
    \ == \"u\" then\n            return \"\xFC\"\n        elseif char == \"n\" then\n\
    \            return \"\xF1\"\n        else\n            return char\n        end\n\
    \    end)\n    return chars .. \" \" .. words\nend", "   local fixed_text = text\n\
    \   for i = 1, #text, 1 do\n      if text[i] == \" \" then\n         fixed_text\
    \ = fixed_text:sub(1,i - 1)\n         fixed_text = fixed_text:sub(i, i - 1)\n\
    \         fixed_text = fixed_text:sub(i, i)\n      elseif fixed_text:sub(i-1,i\
    \ - 1) == \"-\" then\n         fixed_text = fixed_text:sub(i, i - 1)\n       \
    \  fixed_text = fixed_text:sub(i, i)\n      end\n   end\n   return fixed_text\n\
    end", "    local space_regex = \" {2,}\"\n    local fixed_text = text\n    for\
    \ _, space in ipairs(space_regex:gmatch(\"%S+\")) do\n        fixed_text = fixed_text:gsub(space,\
    \ \" \")\n    end\n    return fixed_text\nend", "   local s = text:gsub(\"%s%s\"\
    ,\"_\"):gsub(\"%s+%s\",\"_\")\n   if s:gsub(\"%s+\",\"_\") > 2 then\n      s =\
    \ s:gsub(\"%s+\",\"_\")\n   end\n   return s\nend", "  local space_pattern = '([^\
    \ ])'  -- Match any non-blank character but a space\n  local dashes_pattern =\
    \ '( +)'  -- match one or more spaces (1 or more consecutive spaces)\n  local\
    \ spaces = text:gsub(space_pattern, '-') -- Replace all spaces with dashes\n \
    \ if spaces ~= text then\n    spaces = text:gsub(dashes_pattern, '-') -- Replace\
    \ all consecutive dashes with dashes\n  end\n  return spaces\nend", "  local spaces=\
    \ 1\n  local new_string = \"\"\n  for i=1,#text,1 do\n    if text[i] == \" \"\
    \ then\n      new_string = new_string .. \"-\"\n    elseif spaces > 2 then\n \
    \     new_string = new_string .. \"-\"\n    else\n      new_string = new_string\
    \ .. text[i]\n    end\n    spaces = spaces + 1\n  end\n  return new_string\nend",
  "  text = text or ''\n  text = text:gsub(' ','_')\n  text = text:gsub('  ','-')\n\
    \  return text\nend", "  local fix = 0\n  for i = 1,#text do\n    if string.sub(text,\
    \ i, i+1) ~= \" \" then\n      fix = fix + 1\n      text = text:gsub(\"( +)\"\
    , function(_, _)\n        local s = string.sub(_, 1, string.len(_)-1)\n      \
    \  return s ~= \" \" and s ~= \"-\" and s ~= \"\" and s ~= \"\\n\" and s ~= \"\
    \" and s ~= nil\n      end)\n      text = text:gsub(\"( +)$\", function(_, _)\n\
    \        local s = string.sub(_, 1, string.len(_)-1)\n        return s ~= \" \"\
    \ and s ~= \"-\" and s ~= \"\" and s ~= \"\\n\" and s ~= \"\" and s ~= nil\n \
    \     end)\n    else\n      break\n    end\n  end\n  return text, fix\nend", " \
    \  if text:match(\"^%s+$\") then return text end\n   local newtext = text:gsub(\"\
    (%s)( +)\",\"\\1_\\2\")\n   if text:match(\"%s+$\") then\n      newtext = newtext:gsub(\"\
    (%s)+\",\"\\1\")\n   end\n   return newtext\nend", "  if text == nil then return\
    \ nil end\n  return text:gsub('-', ' ', 'g'):gsub(' ', '-', 'g')\nend", "\tlocal\
    \ spaces\n\t-- first check if there are at least two consecutive spaces\n\tif\
    \ text:find(' ') then\n\t\tspaces = text:gsub(' ', '_')\n\t\tif text:gsub(' ')\
    \ then\n\t\t\ttext = text:gsub(' ', '-')\n\t\tend\n\tend\n\treturn text\nend",
  "  local num_consecutive_spaces\n  if text:match(\"%S\") then\n    num_consecutive_spaces\
    \ = text:gsub(\"%S\",\"_\"):gsub(\"_+\",\"-\")\n  elseif text:match(\"%w\") then\n\
    \    num_consecutive_spaces = text:gsub(\"%w\",\"_\"):gsub(\"_+\",\"-\")\n  else\n\
    \    num_consecutive_spaces = text:gsub(\"_+\",\"-\")\n  end\n  if num_consecutive_spaces\
    \ > 1 then\n    return text:gsub(\"_\",\"_\")\n  else\n    return text\n  end\n\
    end", "    local fixed = text\n    fixed = fixed:gsub('%s', function(a) \n   \
    \         -- Check if there is a space following a non-space and \n          \
    \  -- replace all consecutive spaces with -\n            local b = a:match(\"\
    \ ([^%s])\")\n            if b and b[1] ~= \" \" then\n                a = a ..\
    \ \"-\"\n            end\n            return a\n        end)\n    fixed = fixed:gsub('%\
    \ +', '%-')\n    return fixed\nend", "\t-- If text is nil\n\tif text == nil then\n\
    \t\treturn nil\n\tend\n\t-- If text is empty string\n\tif text == '' then\n\t\t\
    return nil\n\tend\n\t-- If text already has underscores\n\tif text ~= '' then\n\
    \t\t-- Replace all the spaces with underscores\n\t\tlocal _, space = string.gsub(text,\
    \ \"%s+\", \"_\")\n\t\t-- If text has more than 2 consecutive spaces\n\t\tif space\
    \ ~= '' and string.find(space, \" \") ~= nil then\n\t\t\tlocal _, consecutive\
    \ = string.gsub(space, \" \", \"-\")\n\t\t\t-- Replace all the spaces with underscores\n\
    \t\t\tlocal _, space = string.gsub(consecutive, \"%s+\", \"_\")\n\t\t\treturn\
    \ space\n\t\tend\n\t\treturn text\n\tend\nend", "  -- First, separate out multiple\
    \ spaces by replacing them with single space\n  text = text:gsub('[ ]{2,}', function(t)\
    \ return t:gsub(' ', '_') end)\n  -- Then, separate out consecutive spaces by\
    \ replacing them with -\n  text = text:gsub('[ ]+', '-')\n  return text\nend",
  "  return text:gsub(' ', '_'):gsub('( *)( *)', '\\1-\\2')\nend\n</cell>\n<code language=julia-0.6>\n\
    println(fix_spaces(\"  He is  my friend  \"))\nprintln(fix_spaces(\"  He is  my\
    \ friend  \"))\nprintln(fix_spaces(\"  He is  my friend  \"))\nprintln(fix_spaces(\"\
    \  He is  my friend  \"))\nprintln(fix_spaces(\"  He is  my friend  \"))\nprintln(fix_spaces(\"\
    \  He is  my friend  \"))\nprintln(fix_spaces(\"  He is  my friend  \"))\nprintln(fix_spaces(\"\
    \  He is  my friend  \"))\nprintln(fix_spaces(\"  He is  my friend  \"))\nprintln(fix_spaces(\"\
    \  He is  my friend  \"))\nprintln(fix_spaces(\"  He is  my friend  \"))\nprintln(fix_spaces(\"\
    \  He is  my friend  \"))\nprintln(fix_spaces(\"  He is  my friend  \"))\nprintln(fix_spaces(\"\
    \  He is  my friend  \"))\nprintln(fix_spaces(\"  He is  my friend  \"))\nprintln(fix_spaces(\"\
    \  He is  my friend  \"))\nprintln(fix_spaces(\"  He is  my friend  \"))\nprintln(fix_spaces(\"\
    \  He is  my friend  \"))\nprintln(fix_spaces(\"  He is  my friend  \"))\nprintln(fix_spaces(\"\
    \  He is  my friend  \"))\nprintln(fix_spaces(\"  He is  my friend  \"))\nprintln(fix_spaces(\"\
    \  He is  my friend  \"))\nprintln(fix_spaces(\"  He is  my friend  \"))\nprintln(fix_spaces(\"\
    \  He is  my friend  \"))\nprintln(fix_spaces(\"  He is  my friend  \"))\nprintln(fix_spaces(\"\
    \  He is  my friend  \"))\nprintln(fix_spaces(\"  He is  my friend  \"))\nprintln(fix_spaces(\"\
    \  He is  my friend  \"))\nprintln(fix_spaces(\"  He is  my friend  \"))\nprintln(fix_spaces(\"\
    \  He is  my friend  \"))\nprintln(fix_spaces(\"  He is  my friend  \"))\nprintln(fix_spaces(\"\
    \  He is  my friend  \"))\n", "  if text:match('^%s+$') then\n    local spaces\
    \ = text:gsub(' ', '_', 'g')\n    local spacecount = spaces:gsub(' ', '-%2')\n\
    \    return spaces:gsub(' ', '-')\n  else\n    return text\n  end\nend", "   text\
    \ = text:gsub('( +)','%1'):gsub('( {2,})','%1')\n   text = text:gsub('  +','-'):gsub('\
    \  -','-')\n   return text\nend", "   -- Replace all spaces with underscores\n\
    \   local ret = text:gsub( ' ', '_' )", "    local result = text:gsub(' ', '_')\n\
    \    result = result:gsub('  ', '-')\n    return result\nend", "\tlocal pattern\
    \ = \"([^a-zA-Z0-9])( ){2,}\" -- match any char with non-alphanumeric and repeat\
    \ space twice (2 spaces in a row)\n\tlocal function replacer(match, p1, p2...)\n\
    \t\treturn string.format('%s%s', p1, string.sub(p2, 1,-1))\n\tend\n\ttext = text:gsub(pattern,\
    \ replacer)\n\ttext = text:gsub(' ', '-')\n\treturn text\nend", "  if text:match(\"\
    ^%s+$\") then\n    return text\n  end", "  local spaces = text:gsub(\"  \", \"\
    _\")\n  local consecutive = text:gsub(\"%w+%+%w+%+%+\", \"\")\n  return spaces\
    \ .. consecutive\nend", "  return text:gsub(\"[ ]+\", \"_\")\n  :gsub(\" *\",\
    \ \"_\")\n  :gsub(\" *$\", \"-\")\nend\n</cell>\n<cell>", "  -- First replace\
    \ all spaces with underscores\n  text = text:gsub(' ','_')\n  -- Second replace\
    \ consecutive spaces with -\n  text = text:gsub(' ','-')\n  -- Finally, remove\
    \ consecutive underscores\n  text = text:gsub('_+','_')\n  return text\nend",
  "    local space_count = 0\n    local result\n    for i=1,#text do\n        if string.sub(text,i,i)==\"\
    \ \" then\n            space_count = space_count + 1\n        elseif space_count\
    \ > 1 then\n            space_count = space_count - 1\n            text = \"-\"\
    \ .. text\n        else\n            text = \"_\" .. text\n        end\n    end\n\
    \    local new_text = text\n    for i=1,#new_text do\n        if new_text[i]==\"\
    _\" then\n            -- if any character is replaced with _ then count the length\
    \ \n            if i ~= (#new_text) then\n                if string.len(new_text)\
    \ == 2 then\n                    new_text = new_text .. \"-\"\n              \
    \  end\n            end\n        elseif new_text[i]==\"-\" then\n            --\
    \ if any character is replaced with - then count the length \n            if i\
    \ ~= (#new_text) then\n                if string.len(new_text) == 3 then\n   \
    \                 new_text = new_text .. \" \"\n                end\n        \
    \    end\n        end\n    end\n    return new_text\nend", "\t-- Replace all spaces\
    \ with underscores\n\ttext = text:gsub(' ', '_')", "   local fixed_text = text\n\
    \   for i = 1, #text do\n      if text[i] == ' ' then\n         fixed_text = fixed_text\
    \ .. '_'\n      elseif text[i] == '\\n' then\n         fixed_text = fixed_text\
    \ .. '-'\n      elseif text[i] == '\\t' then\n         fixed_text = fixed_text\
    \ .. '-'\n      else\n         fixed_text = fixed_text .. text[i]\n      end\n\
    \   end\n   return fixed_text\nend", "    local fixed = text\n    local pos =\
    \ #text -- save position\n    while pos do\n        -- Replace spaces until we\
    \ find a non-space.\n        fixed = fixed:gsub(\"%w+\", \n            function(w)\
    \ \n                local i = #w\n                while i > 0 and w:sub(i, i)\
    \ == \" \" do i = i - 1 end\n                return w.sub(1, i-1) \n         \
    \   end)\n        -- If there are more than 2 spaces, replace them all with _.\n\
    \        -- Otherwise, just replace the first space.\n        if #fixed > 2 and\
    \ fixed.sub(1, 1) == \" \" then\n            fixed = fixed:gsub(\"%w+\", \n  \
    \              function(w) \n                    local i = #w\n              \
    \      while i > 0 and w:sub(i, i) == \" \" do i = i - 1 end\n               \
    \     return w.sub(1, i-1) \n                end)\n        end\n        pos =\
    \ #text -- restore the position\n    end\n    return fixed\nend", "  if text:match('\
    \ %+') then\n    local new_text = text:gsub(' ', '_')\n    local spaces_count\
    \ = new_text:gsub(' ', '_'):gsub('%S', ''):gsub('%S', ''):gsub('%%S', ''):gsub('%%S',\
    \ ''):gsub('%S', ''):gsub('%%S', '')\n    return spaces_count:gsub('-', ' ')\n\
    \  else\n    return text\n  end\nend", "  -- fix up space issues\n  local spaces_found\
    \ = 0\n  for s in text:gmatch('( +)') do \n    -- check if any spaces were found\n\
    \    if spaces_found > 1 then \n      -- if more than one consecutive space found,\
    \ \n      -- replace all spaces with hyphens\n      local space_pattern = s..\
    \ '%p'\n      text:gsub(s, space_pattern, '-')\n    else\n      -- if only one\
    \ space was found, \n      -- replace all spaces with underscores\n      text:gsub(s,\
    \ s.. '%p')\n    end\n    spaces_found = spaces_found + 1\n  end\n  return text\n\
    end", "  local spaces_count = 0\n  -- First replace all spaces with underscores\n\
    \  -- Then check if there are more than 2 consecutive spaces, \n  -- which would\
    \ be the case for long strings like \"my name is \"\n  -- since \"my name is \"\
    \ will be split into 2 words by lua's split()\n  local spaces = text:gsub(\" \"\
    ,\"_\")\n  if spaces ~= text and spaces:gsub(\"_+\",\"_\"):gsub(\"_+$\",\"\")\
    \ ~= text then\n    spaces_count = spaces:gsub(\"_+\",\"_\"):gsub(\"_+$\",\"\"\
    )\n  else\n    spaces_count = 0\n  end\n  -- Finally, replace all consecutive\
    \ spaces with '-'\n  return text:gsub(\" \",\"-\"):gsub(\"_\",\"_\")\nend", " \
    \   local new_text = text:gsub( [[  ]], [_]) -- Replace all spaces with underscores\n\
    \    return new_text:gsub( [[ ]], '-') -- Replace any consecutive spaces with\
    \ -\nend\n</cell>\n<text>\nThis following function takes as input a string, an\
    \ index, and a table. It then returns a string where the first character of the\
    \ string is replaced by the character at that index in the table, and the second\
    \ character is replaced by the character at the next index in the table.", "\t\
    local s = text:gsub('  +', '_')\n\ts = s:gsub('  +', '_')\n\treturn s\nend", " \
    \ if text:match(\"^%s+$\") then return text end\n  local fixed_text = text:gsub(\"\
    %S+\", function(s)\n    local spaces = \"_\"\n    local num_spaces = s:find(\"\
    \ \")\n    local num_dashes = 0\n    while num_dashes < num_spaces and not s:find(\"\
    \  %s+\") do\n      num_dashes = num_dashes + 1\n      spaces = spaces .. \"-\"\
    \n    end\n    return spaces\n  end)\n  return fixed_text\nend", "  return string.gsub(text,\
    \ \"[%a] \", function (s) return string.gsub(s, \"[%a]\", \"_\") end)\nend", " \
    \ return text:gsub(' ', ' - '):gsub('   -', '-')\nend", "    return text:gsub('-','_')\n\
    \        :gsub('  +','--')\n        :gsub('  ','--')\n        :gsub(' +','--')\n\
    \        :gsub('  +','--')\n        :gsub(' +','--')\n        :gsub(' ','_')\n\
    \        :gsub(' +','--')\n        :gsub('  +','--')\n        :gsub(' +','--')\n\
    \        :gsub(' ','_')\n        :gsub(' +','--')\n        :gsub('  +','--')\n\
    \        :gsub(' +','--')\n        :gsub(' ','_')\n        :gsub(' +','--')\n\
    \        :gsub('  +','--')\n        :gsub(' +','--')\n        :gsub('  +','--')\n\
    \        :gsub(' ','_')\n        :gsub(' +','--')\n        :gsub('  +','--')\n\
    \        :gsub(' +','--')\n        :gsub('  +','--')\n        :gsub(' ','_')\n\
    \        :gsub(' +','--')\n        :gsub('  +','--')\n        :gsub(' +','--')\n\
    \        :gsub('  +','--')\n        :gsub(' ','_')\n        :gsub(' +','--')\n\
    \        :gsub('  +','--')\n        :gsub(' +','--')\n        :gsub('  +','--')\n\
    \        :gsub(' ','_')\n        :gsub(' +','--')\n        :gsub('  +','--')\n\
    \        :gsub(' +','--')\n        :gsub('  +','--')\n        :gsub(' ','_')\n\
    \        :gsub(' +','--')\n        :gsub('  +','--')\n        :gsub(' +','--')\n\
    \        :gsub('  +','--')\n        :gsub(' ','_')\n        :gsub(' +','--')\n\
    \        :gsub('  +','--')\n        :gsub(' +','--')\n        :gsub('  +','--')\n\
    \        :gsub(' ','_')\n        :gsub(' +','--')\n        :gsub('  +','--')\n\
    \        :gsub(' +','--')\n        :gsub('  +','--')\n        :gsub(' ','_')\n\
    \        :gsub(' +','--')", "  text = text:gsub(\"[ ]{2,}\",\"_\")\n  text = text:gsub(\"\
    [ ]+\",\"-\")\n  return text\nend", "  text = text:gsub(\"[ ]+\", \"_\") -- replace\
    \ all spaces with underscores\n  text = text:gsub(\"_{2,}\", \"_\") -- replace\
    \ 2 or more underscores with a single one\n  return text\nend", "    local words\
    \ = text:gsub(\"%w+\", function(x)\n        if x:sub(1,1) == \"_\" then\n    \
    \        return x:sub(2)\n        elseif x:sub(1,1) ~= \"-\" then\n          \
    \  return x:sub(1)\n        else\n            return x\n        end\n    end)\n\
    \    local result = \"\"\n    for _, word in ipairs(words) do\n        if word:sub(1,\
    \ 1) == \"-\" then\n            result = result .. \"-\"\n        else\n     \
    \       result = result .. \"_\"\n        end\n    end\n    return result:gsub(\"\
    _+\", \"_\")\nend", "  local spaces = {[\" \"]=[40],[\"\\t\"]=[41],[\"\\r\"]=[13],[\"\
    \\n\"]=[10]}\n  local new_text = \"\"\n  for i = 1, #text, 1 do\n    local c =\
    \ text:sub(i,i)\n    local space\n    if spaces[c] then\n      space = spaces[c]\n\
    \    else\n      space = \" \"\n    end\n    new_text = new_text .. space\n  end\n\
    \  new_text = new_text:gsub(\"  \",\"-\")\n  return new_text\nend\n  ", "  return\
    \ text:gsub( \" \", \"_\" )\nend", "    local space_count = 1\n    local new_text\n\
    \    for i = 1, #text do\n        if text[i] == ' ' then\n            space_count\
    \ = space_count + 1\n        elseif space_count == 2 then\n            new_text\
    \ = new_text .. '-'\n        else\n            new_text = new_text .. text[i]\n\
    \        end\n    end\n    return new_text\nend", "  text = text:gsub(\"[ ]{2,}\"\
    , \"_\")\n  text = text:gsub(\"[ ]{2,}\", \"_\")\n  return text\nend", "  text\
    \ = string.gsub(text,\" \",\"_\")\n  local spaces = string.gsub(text,\" \",\"\
    -\")\n  if spaces ~= \"\" and spaces ~= nil then\n    text = \"-\" .. spaces\n\
    \  end\n  return text\nend", "   -- If text is empty\n   if text == nil then\n\
    \      -- Return nil because no text was given\n      return nil\n   end", " \
    \ -- If there's no text to replace, return an empty string\n  if text == nil then\
    \ return end\n  \n  -- Return an empty string if there are no spaces in text\n\
    \  if text:match \"^%s*$\" then return text end\n  \n  -- Iterate over all space\
    \ characters, and replace them with '_' if it doesn't have more spaces after\n\
    \  local space_pat = \"[ \"..string.char(9) .. \"]\" -- A space character is \\\
    9\n  -- Iterate over all spaces and replace with '-' if more than one consecutive\
    \ spaces are found.\n  text = text:gsub(\"%S\", function (_, _, space)\n    --\
    \ Check if there are more spaces after the current space\n    local has_more_spaces\
    \ = text:match space_pat..\"%s*$\" ~= nil -- If there is more spaces, this match\
    \ will return \"true\"\n    -- If there is more spaces, replace the space with\
    \ an '-'\n    if has_more_spaces then\n      return string.char(9)..space..string.char(9)\n\
    \    else\n      return space\n    end\n  end)\n  \n  return text\nend", "  text\
    \ = text:gsub('[ ]{2,}', '_')\n  text = text:gsub('[ ]{2,}-', '_')\n  return text\n\
    end", "    return text:gsub(' ', '_'):gsub('  ', '-')\nend", "  -- If there is\
    \ a line break then replace it with -\n  if text:sub(1, 1):find(\"\\n\") then\n\
    \    return text:gsub(\"\\n\", \"-\")\n  end\n  -- If there is a space then replace\
    \ it with an underscore\n  if text:sub(1, 1):find(\" \")then\n    return text:gsub(\"\
    \ \", \"_\")\n  end\n  return text\nend\n</code>\n<|/ a dscore=4 |>\n<| c |>\n\
    Awesome, thank you! This is perfect for what I need.\n<|/ c |>\n<| a tags=lua\
    \ |>\nYou can try this code :\n<code>", "    local spaces = text..' '\n    return\
    \ spaces:gsub('_+', '-'):gsub('_*', '-*')\nend", "  -- Fix up spaces first\n \
    \ text = text:gsub('[\\ ]+', '_', 'g')\n  -- And now fix up consecutive spaces\n\
    \  text = text:gsub('[\\ ]{2,}', '-', 'g')\n  return text\nend\n</cell>\n<text>\n\
    Aside on regular expressions\nThe use of regular expressions here is a bit complicated\
    \ (it took me longer to understand what was going on). But hopefully you get the\
    \ idea.", "  local spaces = \"\"\n  for i=1,#text do\n    local c = text:sub(i,i)\n\
    \    if c == \" \" then\n      if #spaces > 1 then\n        spaces = spaces:sub(1,-1)\n\
    \      end\n    elseif spaces ~= \"\" then\n      spaces = spaces..\"-\"\n   \
    \ end\n  end\n  local spaces\nend", "   if #text > 0 then\n      -- remove leading\
    \ and trailing spaces\n      text = text:gsub(\"^%s*(.-)%s*$\", \"%1\")\n    \
    \  -- replace consecutive spaces with -\n      text = text:gsub(\"  +\", \"-\"\
    )\n      -- replace consecutive dashes with -\n      text = text:gsub(\"--+\"\
    , \"-\")\n      -- replace consecutive underscores with -\n      text = text:gsub(\"\
    _+\", \"-\")\n   end\n   return text\nend", "\ttext = string.gsub(text, \" \"\
    , \"_\")\n\ttext = string.gsub(text, \" {2,}\", \"_\")\n\ttext = string.gsub(text,\
    \ \" -\", \"-\")\n\treturn text\nend", "  return text\n    .replace(\" \", \"\
    _\")\n    .replace(\" {2,}\", \"_\")\n    .replace(/  +/g, \"-\")\nend", "  if\
    \ text:match(\"[%z\\- ]\") then\n    return text:gsub(\"[%z\\- ]\", \"_\")\n \
    \ else\n    return text:gsub(\"[ ]+\", \"-\")\n  end\nend", "    local spaces\
    \ = text:gsub(\"  +\",\"-\")\n    if spaces and (#spaces) > 2 then\n        text\
    \ = text:gsub(\"  +\",\"-\")\n    end\n    return text\nend", "  text = text:gsub(\"\
    \  +\", \" \"):gsub(\"  \", \" \")\n  if text:match(\"  +\") then\n    text =\
    \ text:gsub(\"  +\", \"-\")\n  end\n  return text\nend", "  text = text:gsub('[\
    \ ]{2,}', '_')\n  text = text:gsub('[ ]+', '-')\n  return text\nend", "\tlocal\
    \ space_pattern = \" +\"\n\tlocal spaces = text:gsub( space_pattern, \"_\" )\n\
    \t\n\tif text:gsub( \" {2,}\" ) == \"-\" then\n\t\tspaces = text:gsub( \" {2,}\"\
    , \"-\" )\n\tend\n\treturn spaces\nend", "    local spaces = {[\" \"] = true,\
    \ [\" \\t\"] = true, [\" \\n\"] = true}\n    local t = text:gsub(\"%s\", function()\
    \ return \"-\" end)\n    local i = 0\n    local found = false\n    while true\
    \ do\n        local t = t:gsub(\"%s\", function() return spaces[string.format(\"\
    %c\", i)] end)\n        if #t > 2 then\n            local s, e = string.find(t,\
    \ \"%s\")\n            found = not (s and e)\n        end\n        i = i + 1\n\
    \        if not found then break end\n    end\n    return t\nend", "  if text:match(\"\
    ^%s*(.-)%s*$\") then\n    return text:gsub(\"%w\", function (c) return c==\" \"\
    \ and c~=\"\\n\" and c~=\"\\t\" then \"-\" else c:lower() end):gsub(\"%w{2,}\"\
    , \"_\")\n  end\n  return text\nend", "    local spaces = text\n        ..replace(\"\
    \ \", \"_\")\n        ..replace(\" \", \"_\")\n        ..replace(\" \", \"-\"\
    )\n    local spaces = spaces\n            ..replace(\" \", \"_\")\n        ..replace(\"\
    \ \", \"_\")\n        ..replace(\" \", \"-\")\n    return spaces\nend", "  local\
    \ new_text = text\n  local i = 1\n  repeat\n    new_text = new_text:gsub(' '..text..'\
    \ ','_')\n    if new_text:sub(1,2) ~= '_' then\n      new_text = new_text:gsub('\
    \ '..text,'-') \n    end\n    i = i + 1\n  until not new_text:sub(1,2)\n  return\
    \ new_text\nend", "  -- Find all spaces. \n  local spaces = text:gsub('  +','_')\n\
    \  -- If there are more than 2 consecutive spaces, \n  -- then replace all consecutive\
    \ spaces with -\n  if text:gsub('  +','_'):gsub('  -','_') ~= spaces then\n  \
    \  spaces = text:gsub('  +','_'):gsub('  -','_'):gsub(' ','_')\n  end\n  return\
    \ spaces\nend", "    local fixed_text = text\n    for i = 1, #fixed_text, 1 do\n\
    \        local char = fixed_text[i]\n        if char == \" \" then\n         \
    \   fixed_text = fixed_text:sub(1, i-1) .. \"_\" .. fixed_text:sub(i+1, #fixed_text)\n\
    \        elseif char == \",\" then\n            fixed_text = fixed_text:sub(1,\
    \ i-1) .. \"-\" .. fixed_text:sub(i+1, #fixed_text)\n        end\n    end\n  \
    \  return fixed_text\nend", "    local new_text = \"\"\n    local last_spaces\
    \ = false\n    for i = 1, #text do\n        local c = text[i]\n        if c ==\
    \ \"_\" then\n            new_text = new_text .. c\n        elseif c == \" \"\
    \ then\n            if not last_spaces then\n                new_text = new_text\
    \ .. c\n            else\n                new_text = new_text .. \"-\"\n     \
    \       end\n            last_spaces = true\n        else\n            last_spaces\
    \ = false\n            new_text = new_text .. c\n        end\n    end\n    return\
    \ new_text\nend", "    local result = text:gsub(\"[ ]+\",\"_\")\n    local n =\
    \ 0\n    for i=1,#result,1 do\n        if result[i] ~= \" \" then n = n+1 else\
    \ n=0 end\n        if n > 1 then\n            local j = i\n            while j\
    \ <= #result and result[j] == \" \" do j=j+1 end\n            result[j] = \"-\"\
    \n        end\n    end\n    return result\nend", "  text = text:gsub(' ', ' -\
    \ ')\n  text = text:gsub('  ', ' - ')\n  return text\nend", "  local fixed = text\n\
    \  -- Replace consecutive spaces with -\n  fixed = fixed:gsub(' ', '-')\n  --\
    \ Replace extra spaces with _\n  fixed = fixed:gsub('  ', ' ')\n  -- Replace 2\
    \ or more spaces with _\n  fixed = fixed:gsub(' _+', '_')\n  -- Replace all spaces\
    \ with _\n  fixed = fixed:gsub(' ', '_')\n  -- Replace all consecutive _ with\
    \ spaces\n  fixed = fixed:gsub('%_+%', \" \")\n  return fixed\nend", "  local\
    \ spaces_count = string.gsub(text, \" \", \"_\"):gsub(\"_\", \"\"):gsub(\"_+\"\
    , \"\")\n  if spaces_count > 1 then\n    text = text:gsub(\"_+\", \" \")\n  end\n\
    \  return text\nend", "    local spaces = 0\n    local result = text\n    for\
    \ i = 1,#text,1 do\n        local c = string.sub(text,i,i)\n        if (c == \"\
    \ \") then\n            spaces = spaces + 1\n        else\n            if spaces\
    \ > 2 then\n                result = string.gsub(result, \" \", \"-\")\n     \
    \       end\n            spaces = 0\n            result = string.gsub(result,\
    \ \" \", \"_\")\n        end\n    end\n    return result\nend", "  if text:match\
    \ \"[%z\\s]\" then return text end\n  text = text:gsub(\"  \",\"_\")\n  text =\
    \ text:gsub(\"  \",\"-\")\n  return text\nend", "  local spaces = 0\n  local newtext\
    \ = \"\"\n  for i = 1,#text do\n    if text[i] == \" \" then\n      spaces = spaces+1\n\
    \    elseif spaces == 2 then\n      text[i] = \"-\"\n    else\n      spaces =\
    \ 0\n    end\n    newtext = newtext .. text[i]\n  end\n  return newtext\nend",
  "  -- remove leading spaces\n  text = text:gsub('%s+', function(x)\n    if x ==\
    \ ' ' then return '_'\n    else return x\n    end)\n  -- remove trailing spaces\n\
    \  text = text:gsub('%s+$', function(x)\n    if x == ' ' then return '_'\n   \
    \ else return x\n    end)\n  -- remove extra spaces\n  text = text:gsub('%s+',\
    \ function(x)\n    if x ~= '-' and x ~= '_' then return x\n    else return ''\n\
    \    end)\n  -- remove multiple spaces\n  text = text:gsub('%s+', function(x)\n\
    \    if x == ' ' then return x\n    else return x .. ' '\n    end)\n  return text\n\
    end", "    local space_pattern = \" +\"\n    local spaces_pattern = \"[ ]\"\n\
    \    local fixed = text:gsub(space_pattern, \"_\"):gsub(spaces_pattern, \"-\"\
    )\n    return fixed\nend", "    local space_count = #(text) - #(text:gsub(\"[%Z\\\
    s]+\", \"\"))\n    if space_count > 1 then\n        text = text:gsub(\"[%Z\\s]+\"\
    , \" \")\n        text = text:gsub(\"  \", \" \")\n    end\n    return text\n\
    end", "    local spaces = 0\n    return text:gsub(\"%s+\", function(x)\n     \
    \   if spaces == 0 then\n            spaces = x:find(\" \")\n            return\
    \ x:sub(1, spaces)\n        elseif spaces == x:find(\" \") then\n            spaces\
    \ = x:find(\" \")\n            return x:sub(spaces, spaces + 1)\n        else\n\
    \            return \"-\"\n        end\n    end)\nend", "  -- Replace multiple\
    \ spaces with single space\n  text = text:gsub(\"[  ]+\", \" \")\n  \n  -- Replace\
    \ multiple spaces with single underscore\n  text = text:gsub(\"  +\", \"_\")\n\
    \  \n  -- Replace multiple spaces with a single hyphen\n  text = text:gsub(\"\
    \  +\", \"-\")\n  \n  -- Return text with multiple spaces converted to a single\
    \ space\n  text = text:gsub(\"  +\", \"+\")\n  \n  -- Return text with multiple\
    \ underscores converted to a single underscore\n  text = text:gsub(\"  +\", \"\
    _\")\n  \n  -- Return text with multiple hyphens converted to a single hyphen\n\
    \  text = text:gsub(\"  +\", \"-\")\n  \n  return text\nend", "    if text ==\
    \ '' then\n        return text\n    end\n    local new_text = text\n    local\
    \ space = \" \"\n    local underscore = \"_\"\n    local last_space = ' '\n  \
    \  -- Replace consecutive spaces with one dash\n    while last_space ~= space\
    \ do\n        local start = string.find(new_text, underscore)\n        if start\
    \ > 0 then\n            local end = string.find(new_text, underscore, start +\
    \ 1)\n            if end > 0 then\n                new_text = new_text:sub(start,\
    \ end + 1)\n            else\n                new_text = new_text:sub(start, end)\n\
    \            end\n        else\n            new_text = new_text:sub(last_space,\
    \ 1)\n        end\n        last_space = space\n    end\n    -- Replace spaces\
    \ with underscores\n    while last_space ~= space do\n        local start = string.find(new_text,\
    \ underscore)\n        if start > 0 then\n            local end = string.find(new_text,\
    \ space, start + 1)\n            if end > 0 then\n                new_text = new_text:sub(start,\
    \ end + 1)\n            else\n                new_text = new_text:sub(start, end)\n\
    \            end\n        else\n            new_text = new_text:sub(last_space,\
    \ 1)\n        end\n        last_space = space\n    end\n    -- Replace spaces\
    \ with dash\n    while last_space ~= space do\n        local start = string.find(new_text,\
    \ underscore)\n        if start > 0 then\n            local end = string.find(new_text,\
    \ space, start + 1)\n            if end > 0 then\n                new_text = new_text:sub(start,\
    \ end + 1)\n            else\n                new_text = new_text:sub(start, end)\n\
    \            end\n        else\n            new_text = new_text:sub(last_space,\
    \ 1)\n        end\n        last_space = space\n    end\n    -- Replace underscores\
    \ with spaces\n    while last_space ~= underscore do\n        local start = string.find(new_text,\
    \ space)\n        if start > 0 then\n            local end = string.find(new_text,\
    \ underscore, start + 1)\n            if end > 0 then\n                new_text\
    \ = new_text:sub(start, end + 1)\n            else\n                new_text =\
    \ new_text:sub(start, end)\n            end\n        else\n            new_text\
    \ = new_text:sub(last_space, 1)\n        end\n        last_space = space\n   \
    \ end\n    -- Replace spaces with dash\n    while last_space ~= underscore do\n\
    \        local start = string.find(new_text, space)\n        if start > 0 then\n\
    \            local end = string.find(new_text, underscore, start + 1)\n      \
    \      if end > 0 then\n                new_text = new_text:sub(start, end + 1)\n\
    \            else\n                new_text = new_text:sub(start, end)\n     \
    \       end\n        else\n            new_text = new_text:sub(last_space, 1)\n\
    \        end\n        last_space = space\n    end\n    return new_text\nend",
  "    local s = text\n    local spaces = 0\n    while true do\n        s = s:gsub('%s+',\
    \ function(s)\n            spaces = spaces + 1\n            local ret = s\n  \
    \          if spaces == 2 then\n                spaces = 0\n                ret\
    \ = ret:gsub('%s+', ' ')\n            end\n            if spaces > 2 then\n  \
    \              spaces = spaces - 2\n                ret = ret:gsub('%s+', '-')\n\
    \            end\n            return ret\n        end)\n        if spaces == 0\
    \ then\n            break\n        end\n    end\n    return s\nend", "  local\
    \ num_spaces = #text -- Count the number of spaces in the text\n  if num_spaces\
    \ == 1 then\n    return text\n  end\n  local fixed_text = ''\n  local prev_space\
    \ = -1 -- Track which space is at the start of the text\n  for i = 1, num_spaces\
    \ do\n    local char = text[i]\n    local char_prev = text[i-1]\n    local char_next\
    \ = text[i+1]\n    if char == ' ' then\n      if char_prev ~= '-' then\n     \
    \   fixed_text = fixed_text .. '_'\n      end\n    else\n      if char == '-'\
    \ and char_prev == '-' then\n        fixed_text = fixed_text .. '-'\n      end\n\
    \    end\n  end\n  return fixed_text\nend", "  -- Replacing spaces with underscores\n\
    \  local _space = text:gsub(\" \", \"_\")\n  -- If there are more than 2 consecutive\
    \ spaces\n  if text:gsub(\" \", \"-\") > 2 then\n    -- Replacing consecutive\
    \ spaces with -\n    _space = _space:gsub(\"-\", \"_\")\n  end\n  return _space\n\
    end", "  local fixed_text = text\n  -- Remove consecutive spaces \n  -- If it's\
    \ more than 2 then replace with -\n  if text ~= \"\" then\n    local spaces =\
    \ 0\n    -- Iterate and check whether there is any spaces\n    for i = 1, #text\
    \ do\n      if text:sub(i, i) ~= \" \" then\n        spaces = spaces + 1\n   \
    \   end\n      if spaces > 2 then\n        local space = text:sub(i, i)\n    \
    \    fixed_text = fixed_text:gsub(\"-{2,}\", \"-\")\n        fixed_text = fixed_text:gsub(\"\
    - \", space)\n      end\n    end\n  end\n  return fixed_text\nend", "  local fixed_text\
    \ = text:gsub(\"[[:space:]]\", \"_\")  -- replace all spaces\n  fixed_text = fixed_text:gsub(\"\
    %{2,}\", \"-\")  -- replace all two or more consecutive spaces with one hyphen\n\
    \  return fixed_text\nend", "  -- Replace all spaces with underscores\n  local\
    \ text_clean = string.gsub(text, \"[ ]+\", \"_\");\n  -- Replace consecutive spaces\
    \ with -\n  local text_fixed = string.gsub(text_clean, \"[ ]{2,}\", \"_\");\n\
    \  return text_fixed;\nend\n</cell>\n<cell>", "  local spaces;\n  local result\
    \ = \"\";\n  local pos = 1; -- Start at 1 since the first char is whitespace\n\
    \  \n  while pos <= #text do -- Loop over all characters in string\n    local\
    \ char = text[ pos ]; -- Get the character at this position\n    \n    -- First\
    \ character is a space character?\n    if char == \" \" then\n      spaces = spaces+1;\
    \ -- Add 1 to spaces\n      \n    -- More than 2 consecutive spaces?\n    elseif\
    \ spaces > 2 then\n      spaces = 0; -- Reset spaces to 0 since a space is a 2\
    \ consecutive space\n      result = result .. \"-\"; -- Replace all spaces with\
    \ -\n    end\n    \n    result = result .. char; -- Append the character\n   \
    \ pos = pos+1; -- Increment the position\n  end\n  \n  return result;\nend", " \
    \ local new_text = ''\n  local spaces = 0\n  for i = 1, #text, 1 do\n    if string.sub(text,\
    \ i, i) ~= ' ' then\n      new_text = new_text .. string.sub(text, i, i) .. '_'\n\
    \      spaces = spaces + 1\n    end\n  end", "    local spaces = 0\n    local\
    \ dash = nil\n    for c in text:gmatch('[\\s]+') do\n        spaces = spaces +\
    \ 1\n        if spaces == 1 then\n            dash = nil\n        elseif spaces\
    \ == 2 then\n            dash = '-'\n        else\n            dash = nil\n  \
    \      end\n        text = text:gsub(' ','_')\n    end\n    return text, dash\n\
    end", "  text = text:gsub(\"[\\\\ ]{2,}\", \"_\")\n  text = text:gsub(\"[\\\\\
    \ ]{2,}-\", \"_\")\n  text = text:gsub(\"[\\\\ ]{2,}\", \"_\")\n  return text\n\
    end", "    return text:gsub(\"[[:space:]]+\", _) -> \n            if _:gsub(\"\
    [[:space:]]+\", _) ~= \"\" then \n                _:gsub(\"[[:space:]]+\", _)\
    \ \n            else\n                text:gsub(\"[[:space:]]{2,}\", _):gsub(\"\
    [[:space:]]\", \"-\")\n            end\nend", "  local fixed_text = text\n  fixed_text\
    \ = fixed_text:gsub(' ', '_ ', 'g')\n  fixed_text = fixed_text:gsub(' ', '- ',\
    \ 'g')\n  fixed_text = fixed_text:gsub(' ', '_', 'g')\n  return fixed_text\nend",
  "    local words = string.gsub(text, \"[% ]+\", \"_\")\n    local words = string.gsub(words,\
    \ \"[% -]\", \"_\")\n    return words\nend", "    return text\n        .. (str:gsub('\
    \  +', '_', 'g'))\n        .. (str:gsub('  +', '-', 'g'))\n        .. (str:gsub('\
    \  +', ' -', 'g'))\n        .. (str:gsub(' +', '', '-', 'g'))\n        .. (str:gsub('\
    \ +', ' -', 'g'))\n        .. (str:gsub(' +', ' -', 'g'));\nend\n</code>\nNow,\
    \ this assumes you have used the function fix_spaces() to remove spaces from the\
    \ text and replaced them with dashes (-). But you probably should do that anyway.\
    \ And this also assumes your text is just composed of dashes. If you have other\
    \ characters in there, like quotes, etc, then you would need an additional gsub,\
    \ just to replace those (single quotes for instance).\n<|/ a dscore=0 |>\n<| c\
    \ |>\nThanks Gabe. Your function works. I now need to find out how to replace\
    \ all spaces between dashes with a single dash only.\n<|/ c |>\n<| c |>\nI edited\
    \ my answer to include that (in the last paragraph).\n<|/ c |>\n<| c |>\nThanks\
    \ Gabe. This also works. I wish I could accept both answers.\n<|/ c |>\n<| c |>\n\
    I thought Gabe was the first to answer and it worked :) I did accept Gabe's answer\
    \ though. :)\n<|/ c |>\n<| a |>\nThis should work:\n<code>", "  local s = text:gsub(\"\
    ( +)\", \"%1\"):gsub(\"( -)\", \"%1\"):gsub(\"( +)( +)\", \"%1-%2\")\n  local\
    \ r = s:gsub(\"( +)-\", \"%1\")\n  if r:find(\" -\") > 0 then\n    r = r:gsub(\"\
    (%1 -)\", \"%1\")\n  end\n  return r\nend", "   if text==nil then return nil end\n\
    \   local num_spaces=0\n   local last_space=nil\n   local text2=text\n   while\
    \ true do\n      local this_space=string.sub(text2,1,1)\n      text2=string.sub(text2,2)\n\
    \      if this_space ~= ' ' then\n         num_spaces=num_spaces+1\n         if\
    \ num_spaces > 2 then\n            if last_space ~= ' ' then\n               text2=text2\
    \ ..'-'\n            end\n         end\n         last_space=this_space\n     \
    \ else\n         num_spaces=0\n      end\n      if text2 ~= \"\" then break --don't\
    \ fix the last space because it might be a non-breaking space\n      end\n   end\n\
    \   return text2\nend", "  if text == nil then return nil end\n  local spaces\
    \ = {}\n  local space_index = 0\n  for i = 1, #text do\n    if string.sub(text,\
    \ i, i) == \" \" then\n      spaces[space_index] = true\n      space_index = space_index\
    \ + 1\n    else\n      spaces[space_index] = false\n    end\n  end\n  local fixed_text\
    \ = \"\"\n  local space_count = 0\n  for i = 1, #text do\n    if spaces[i] then\n\
    \      fixed_text = fixed_text .. \"-\"\n      space_count = space_count + 1\n\
    \    else\n      fixed_text = fixed_text .. string.sub(text, i, i)\n    end\n\
    \  end\n  if space_count > 2 then\n    fixed_text = fixed_text .. \"-\"\n  end\n\
    \  return fixed_text\nend", "  return text:gsub(' ', '_'):gsub('  ', '-')\nend",
  "  text = text:gsub(\"[[:space:]]\",\"_\")\n  -- Replace two or more consecutive\
    \ spaces with -\n  text = text:gsub(\"  \",\"-\")\n  return text\nend", "  local\
    \ spaces_pattern = \"(^| )%s+(% )%s*( |$)\" -- Replace all spaces with underscores\n\
    \  return text:gsub(spaces_pattern, \"%1%2_%3-%4\") -- Add _ to spaces\nend",
  "    local spaces_index = text:find(' ')\n    while spaces_index ~= nil do\n   \
    \     local prev_char = text:sub(spaces_index, spaces_index)\n        local new_char\
    \ = prev_char:lower() == '-' and ' ' or '_'\n        local spaces_index = text:find('\
    \ ', spaces_index + 1) \n        text = text:gsub(' ' .. prev_char .. new_char)\
    \ \n    end\n    return text\nend", "    local spaces_replaced = 0\n    for i\
    \ = 1, #text do\n        if text[i] == ' ' then\n            if spaces_replaced\
    \ == 0 then\n                text = text:gsub(' ', '_')\n            elseif spaces_replaced\
    \ == 1 then\n                text = text:gsub('  ', '-')\n            else\n \
    \               text = text:gsub('  ', '-')\n                spaces_replaced =\
    \ spaces_replaced + 1 \n            end\n        else\n            text = text:gsub('\
    \ ', '_')\n            spaces_replaced = spaces_replaced + 1 \n        end\n \
    \   end\n    return text\nend", "  text = text:gsub(' ','_')\n  if text:gsub('\
    \ ','-'):gsub('-',' '):gsub('-','-'):gsub('-','-'):gsub('-','-') then\n     return\
    \ text\n  end\n  return nil\nend", "  local words = string.gsub(string.replace(text,\
    \ \" \", \"_\"), \"_+\", \" \")\n  return string.gsub(words, \"_{2,}\", \"_\"\
    )\nend", "\tlocal _len = text:len()\n\tlocal _buffer = text:gsub('([^ ])', '%%%1%%2%%3')\n\
    \tif _len > 2 then\n\t\t_buffer = _buffer .. _buffer:gsub('( +)', '%%%1%%2%%3')\n\
    \tend\n\treturn _buffer\nend", "  local new_text = ''\n  for i = 1, #text do\n\
    \    local c = string.sub(text, i, i)\n    if c == '+' then c = '-'\n    else\
    \ if c == '_' then c = '-'\n    elseif c == '\\t' then c = '-'\n    else if c\
    \ ~= ' ' then c = c .. ' '\n    end\n    new_text = new_text .. c\n  end\n  return\
    \ new_text\nend", "  if text == nil then return \"\" end\n  local fixed = text\n\
    \  \n  -- Replace spaces with underscores\n  fixed = fixed:gsub(' ', '\\uff0c')\n\
    \  \n  -- Replace multiple underscores with dashes\n  fixed = fixed:gsub('\\uff0c\\\
    uff0c', '\\u2013')\n  \n  -- Replace multiple dashes with spaces \n  fixed = fixed:gsub('\\\
    u2013\\u2013', ' ')\n  \n  -- Restore spaces from dashes\n  fixed = fixed:gsub('\\\
    u2013', '-')\n  \n  return fixed\nend", "   -- We remove all spaces \n   local\
    \ space = text\n   -- We remove all consecutive spaces\n   local consecutive =\
    \ space:gsub(\"[  ]+\",\"-\")\n   -- We replace spaces with underscore\n   return\
    \ consecutive:gsub(\"[  ]\",\"_\")\nend", "    local num_spaces = 0\n    local\
    \ result = \"\"\n    for char in text:gmatch(\"%S+\") do\n        char = char:lower()\n\
    \        if char == \" \" then\n            num_spaces = num_spaces + 1\n    \
    \    elseif num_spaces > 2 then\n            char = char:gsub(\"%S+\", \" -\"\
    )\n        end\n        result = result .. char\n    end\n    return result\n\
    end", "  local spaces = \"     \";\n  local multiple = \"---\";\n  return text:gsub(\"\
    [\" .. spaces .. \"]+\", multiple):gsub(\"[\" .. multiple .. \"]+\", spaces);\n\
    end\n</code>\nExample outputs (with ---> in red):\n<code>\n> print(fix_spaces(\"\
    \  abc def    ghi jkl\"))\nabc def    --->     ghi jkl\n> print(fix_spaces(\"\
    abc def ghi jkl\"))\nabc def ghi jkl  --->      \n> print(fix_spaces(\"  abc def\
    \ ghi jkl\"))\nabc def    --->     ghi jkl\n> print(fix_spaces(\"abc def\"))\n\
    abc def    --->      \n> print(fix_spaces(\"abc  def\"))\nabc  def    --->   \
    \  \n> print(fix_spaces(\"abc def  \"))\nabc def    --->      \n> print(fix_spaces(\"\
    \   abc def\"))\nabc def    --->     \n> print(fix_spaces(\"   abc  def\"))\n\
    abc  def    --->     \n> print(fix_spaces(\"  abc def\"))\nabc def    --->   \
    \  \n> print(fix_spaces(\"abc def\"))\nabc def    --->      \n> print(fix_spaces(\"\
    \  \"))\n  --->\n> print(fix_spaces(\"     \"))\n  --->\n> print(fix_spaces(\"\
    abc def ghi jkl\"))\nabc def ghi jkl  --->      \n> print(fix_spaces(\"abc def\"\
    ))\nabc def    --->     \n> print(fix_spaces(\"abc def ghi\"))\nabc def ghi  \
    \  --->     \n> print(fix_spaces(\"abc def ghi jkl  \"))\nabc def ghi jkl  --->\
    \      \n> print(fix_spaces(\"abc def ghi jkl  abc def ghi jkl\"))\nabc def ghi\
    \ jkl  abc def ghi jkl  --->\n> print(fix_spaces(\"abc def--->ghi jkl\"))\nabc\
    \ def--->ghi jkl  --->      \n> print(fix_spaces(\"abc def--->ghi\"))\nabc def--->ghi\
    \    --->     \n> print(fix_spaces(\"abc def--->ghi jkl  \"))\nabc def--->ghi\
    \ jkl  --->      \n> print(fix_spaces(\"abc def--->ghi jkl  ab", "    local new_text\
    \ = ''\n    local space_counter = 1\n    local last_space_index = nil\n    for\
    \ character in text:gmatch'[%a]+' do\n        if character == ' ' then\n     \
    \       if space_counter == 1 then\n                space_counter = 2\n      \
    \      else\n                space_counter = 1\n            end\n        else\n\
    \            if space_counter == 1 then\n                new_text = new_text ..\
    \ '_'\n            elseif space_counter == 2 then\n                new_text =\
    \ new_text .. '-'\n            else\n                new_text = new_text .. character\n\
    \            end\n        end\n        last_space_index = character\n    end\n\
    \    return new_text\nend", "  local result = text\n  result = result:gsub(\"\
    [   ]+\", \"_\")\n  -- If there are more than 2 consecutive spaces\n  -- then\
    \ replace with _\n  if result:find(\"%%s+\") then\n    result = result:gsub(\"\
    [ ]+\", \"_\")\n  end\n  return result\nend", "    local space_replaced = 0\n\
    \    local consecutive_SPACEs = 0\n    local consecutive_SPACEs_at_begin = 0\n\
    \    local consecutive_SPACEs_at_end = 0\n    local pos = 1\n    while true do\n\
    \        if text:sub(pos, pos) == \" \" then\n            consecutive_SPACEs =\
    \ consecutive_SPACEs + 1\n            consecutive_SPACEs_at_begin = consecutive_SPACEs_at_begin\
    \ + 1\n        else\n            if consecutive_SPACEs > 1 then\n            \
    \    consecutive_SPACEs = 0\n                consecutive_SPACEs_at_end = 0\n \
    \           end\n            space_replaced = space_replaced + 1\n           \
    \ consecutive_SPACEs = 0\n            consecutive_SPACEs_at_begin = 0\n      \
    \      consecutive_SPACEs_at_end = 0\n        end\n        pos = pos + 1\n   \
    \     if text:sub(pos, pos) == \"\\n\" then\n            consecutive_SPACEs =\
    \ consecutive_SPACEs + 1\n            consecutive_SPACEs_at_begin = consecutive_SPACEs_at_begin\
    \ + 1\n            pos = pos + 1\n        elseif text:sub(pos, pos) == \"\\r\"\
    \ then\n            consecutive_SPACEs = consecutive_SPACEs + 1\n            consecutive_SPACEs_at_begin\
    \ = consecutive_SPACEs_at_begin + 1\n            pos = pos + 1\n        else\n\
    \            if consecutive_SPACEs > 1 then\n                consecutive_SPACEs\
    \ = 0\n                consecutive_SPACEs_at_end = 0\n            end\n      \
    \      space_replaced = space_replaced + 1\n            consecutive_SPACEs = 0\n\
    \            consecutive_SPACEs_at_begin = 0\n            consecutive_SPACEs_at_end\
    \ = 0\n        end\n        if text:sub(pos, pos) == \" \" then\n            consecutive_SPACEs\
    \ = consecutive_SPACEs + 1\n            consecutive_SPACEs_at_begin = consecutive_SPACEs_at_begin\
    \ + 1\n        else\n            if consecutive_SPACEs > 1 then\n            \
    \    consecutive_SPACEs = 0\n                consecutive_SPACEs_at_end = 0\n \
    \           end\n            space_replaced = space_replaced + 1\n           \
    \ consecutive_SPACEs = 0\n            consecutive_SPACEs_at_begin = 0\n      \
    \      consecutive_SPACEs_at_end = 0\n        end\n        if text:sub(pos, pos)\
    \ == \"\\t\" then\n            consecutive_SPACEs = consecutive_SPACEs + 1\n \
    \           consecutive_SPACEs_at_begin = consecutive_SPACEs_at_begin + 1\n  \
    \      else\n            if consecutive_SPACEs > 1 then\n                consecutive_SPACEs\
    \ = 0\n                consecutive_SPACEs_at_end = 0\n            end\n      \
    \      space_replaced = space_replaced + ", "\tlocal spaced = string.gsub(text,\
    \ \"[[:space:]]+\", \" \")\n\tlocal long = string.gsub(spaced, \"[[:space:]]+\"\
    , \"-\")\n\tlocal has_consecutive_space = false\n\t\n\tfor i = 1, #long do\n\t\
    \tif long[i] == '-' and long[i+1] == '-' then\n\t\t\thas_consecutive_space = true\n\
    \t\tend\n\tend\n\t\n\tif has_consecutive_space then\n\t\tlong = long:gsub(\"-+\"\
    , \"-\")\n\tend\n\t\n\treturn long\nend", "    if text == '' then\n        return\
    \ text\n    end\n    text = text:gsub(' ','_')\n    local num_spaces = text:find(\"\
    \ \",1,true)\n    if num_spaces > 1 then\n        local new_text = text\n    \
    \    local first_word = text:sub(1,1)\n        if num_spaces == 2 then\n     \
    \       -- Fix 2 spaces in front\n            new_text = new_text .. '-'\n   \
    \     end\n        new_text = new_text .. first_word\n        return new_text\n\
    \    else\n        return text\n    end\nend", "  -- Replace multiple spaces with\
    \ single spaces.\n  -- Remove leading and trailing whitespace.\n  text = text:gsub(\"\
    %w+\", function (s) return s:gsub(\"[%a]+\", \" \"):trim() end)\n  -- Replace\
    \ multiple spaces with single spaces.\n  -- Remove leading and trailing whitespace.\n\
    \  text = text:gsub(\"%w\", \"%W\")\n  -- Replace multiple spaces with single\
    \ spaces.\n  -- Remove leading and trailing whitespace.\n  text = text:gsub(\"\
    %a\", \"%A\")\n  -- Replace multiple spaces with single spaces.\n  -- Remove leading\
    \ and trailing whitespace.\n  text = text:gsub(\"%C\", \"%E\")\n  -- Replace multiple\
    \ spaces with single spaces.\n  -- Remove leading and trailing whitespace.\n \
    \ text = text:gsub(\"%N\", \"%D\")\n  -- Replace multiple spaces with single spaces.\n\
    \  -- Remove leading and trailing whitespace.\n  text = text:gsub(\"%C\", \"%E\"\
    )\n  -- Replace multiple spaces with single spaces.\n  -- Remove leading and trailing\
    \ whitespace.\n  text = text:gsub(\"%D\", \"%N\")\n  return text\nend", '    local
    new_text = text', "  -- first replace all spaces\n  -- then remove all non-alphanumeric\
    \ chars to remove all non-space characters\n  return string.gsub(text, \"[!\\\"\
    #$%&'()*+,-./:;<=>?@[\\\\]^_`{|}~]\", function(c)\n    if c:find(\"_\") then\n\
    \      return string.format(\"%s-\", c:sub(1, 1):upper())\n    else\n      return\
    \ string.format(\"%-\", c:upper())\n    end\n  end)\nend", "  local s = text:gsub(\"\
    [%a%d]+\", \n      function(x)\n        if x:match(\"[%a%d]*[%a%d]*\") then\n\
    \          return x:gsub(\"%a%d+\", \"_\")\n        else\n          return x\n\
    \        end\n      end)\n  return string.gsub(s, \"_+\", \"-\")\nend", "  return\
    \ text:gsub(' ', '_')\nend", "    local result = text\n    local spaces = 0\n\
    \    local lastSpace", "    local spaces = \"\"\n    local fix = ''\n    for i\
    \ = 1, #text, 1 do\n        local c = text:sub(i,i)\n        if c == ' ' then\n\
    \            spaces = spaces .. '_'\n        elseif spaces ~= \"\" then\n    \
    \        fix = fix .. spaces\n            spaces = ''\n        end\n    end\n\
    \    local consecutive = \"\"\n    local consecutive_start = 1\n    local consecutive_end\
    \ = #text + 1\n    while consecutive_end > consecutive_start do\n        local\
    \ c = text:sub( consecutive_start, consecutive_end )\n        if c == ' ' then\n\
    \            consecutive = consecutive .. '-'\n        elseif consecutive ~= \"\
    \" then\n            fix = fix .. consecutive\n            consecutive = \"\"\n\
    \        end\n        consecutive_start = consecutive_end + 1\n        consecutive_end\
    \ = #text + 1\n    end\n    if spaces ~= \"\" then\n        fix = fix .. spaces\n\
    \    end\n    return fix\nend", "  if text:match(\"^%s+$\") then\n    return text\n\
    \  end", "    return text:gsub(\"  \",\"_\"):gsub(\"  \",\"-\")\nend\n</code>\n\
    <|/ a dscore=1 |>\n<| c |>\nAs a note, the OP asked for \"a more efficient implementation\"\
    , which might be more difficult (because of the multiple passes)\n<|/ c |>\n<|\
    \ c |>\nThanks for the solution! As you said it's not efficient, but I couldn't\
    \ think of anything more efficient than your solution, which works well. I need\
    \ to learn more about Lua, so I was hoping that someone could suggest something\
    \ more efficient than yours. But I guess I'll just stick with yours for now.\n\
    <|/ c |>\n<| a tags=string,lua,repeat |>\nYou want to match a single space followed\
    \ by any number of spaces followed by any number of characters, a possible way\
    \ to solve this would be to use the pattern (?<= )([[:space:]]+)(.+?)(?=.), which\
    \ uses a positive lookahead to check for an occurence of at least one space, and\
    \ a capture group to capture the character that is following the space. Because\
    \ the capture group (.+?) is non-greedy, it will consume as much as it can (i.e.,\
    \ the remaining characters are matched by the .+? pattern). Because the lookahead\
    \ checks for the occurence of at least one space and consumes no characters, no\
    \ characters are consumed by the overall pattern.\nThe Lua code would be something\
    \ like:\n<code>", "\t-- replace spaces with underscores and keep track of spaces\n\
    \ttext = text:gsub(\"[[:space:]]\", \"_\"):gsub(\"_{2,}\", \"_\")\n\t-- return\
    \ text with spaces replaced with underscores\n\treturn text\nend", "   -- replace\
    \ all spaces with underscores\n   text = text:gsub(' ', '_')\n   -- replace multiple\
    \ spaces with single underscores\n   text = text:gsub(' ', '_')\n   -- replace\
    \ multiple underscores with single underscores\n   text = text:gsub('__', '_')\n\
    \   -- replace multiple consecutive underscores with single dash\n   text = text:gsub('__',\
    \ '-')\n   -- replace multiple consecutive dashes with single underscores\n  \
    \ text = text:gsub('-', '-')\n   -- trim whitespace from beginning and end of\
    \ string\n   text = text:trim()\n   return text\nend", "  local spaces = \" \"\
    \n  if text:gsub(spaces,\"_\"):gsub((spaces .. spaces),\"-\"):gsub((spaces ..\
    \ spaces .. spaces),\"-\")\n  else\n    return text\n  end\nend", "   local new_text\
    \ = text:gsub(' ','_')\n   -- if the new text has more than one space in it then\
    \ \n   -- replace consecutive spaces with -\n   if new_text:find('  ') > 1 then\n\
    \      new_text = new_text:gsub('  ','-')\n   end\n   return new_text\nend", " \
    \  local newtext = ''\n   for i = 1, #text, 1 do\n      local char = text[i]\n\
    \      if char == ' ' then\n         newtext = newtext .. '_'\n      elseif #newtext\
    \ > 0 and char == ' ' and text[i-1] == ' ' then\n         newtext = newtext ..\
    \ '-'\n      end\n   end\n   return newtext\nend", "    local new_text = nil\n\
    \    for i = 1, #text do\n        if text:sub(i,i) == \" \" then\n           \
    \ new_text = new_text .. \"_\"\n        else\n            new_text = new_text\
    \ .. text:sub(i,i)\n        end\n    end\n    return new_text\nend", "  local\
    \ s = text:gsub( ' ', '_' )\n  local s = s:gsub( '  ', '- ' )\n  return s\nend",
  "    local spaces = \" \"\n    local dashes = \"-\"\n    local spaceCount = 1\n\
    \    local strLen = #text", "  local spaces = text:gsub(\"%s+\", \"_\")\n  spaces\
    \ = spaces:gsub(\"_+\", \"_\")\n  spaces = spaces:gsub(\"_\", \"-\")", "  if text\
    \ == nil then return nil end\n  local spaces = string.gsub(text, \"%s+\", function\
    \ (s)\n    local newS = s\n    if #s > 1 then\n      newS = string.gsub(s, \"\
    %s+\", \"_\")\n    end\n    return newS\n  end)\n  return string.gsub(spaces,\
    \ \"[_ ]+\", \"-\")\nend", "  text = text:gsub('%s+', function(c)\n    return\
    \ c:gsub(' ', '-')\n  end)\n  text = text:gsub('-- +', function(c)\n    return\
    \ c:gsub(' ', '-')\n  end)\n  return text\nend", "\ttext = string.gsub(text, \"\
    \  +\", \"_\")\n\ttext = string.gsub(text, \"  +\", \"_\")\n\ttext = string.gsub(text,\
    \ \"  +\", \"_\")\n\ttext = string.gsub(text, \"  +\", \"-\")\n\ttext = string.gsub(text,\
    \ \"  +\", \"-\")\n\ttext = string.gsub(text, \"  +\", \"-\")\n\treturn text\n\
    end", "    local spaces = text:gsub(\"%s+\",\"_\")\n    if spaces ~= text then\
    \ spaces = spaces:gsub(\"_+\",\"-\") end\n    return spaces\nend", "  -- Replace\
    \ all spaces with underscores. This is for consistency with \n  -- textutil's\
    \ replace_text function\n  text = text:gsub('[ \\t]+', '_')", "  local fixed_text\
    \ = text\n  local consecutive_spaces = 0\n  for i = 1, #text do -- Look for consecutive\
    \ spaces\n    if text[i] == ' ' and text[i+1] == ' ' then\n      consecutive_spaces\
    \ = consecutive_spaces+1\n    elseif text[i] == ' ' then\n      if consecutive_spaces\
    \ > 1 then\n        fixed_text = fixed_text..'-'\n      else\n        fixed_text\
    \ = fixed_text..' '\n      end\n      consecutive_spaces = 0\n    elseif consecutive_spaces\
    \ > 1 then\n      fixed_text = fixed_text..'-'\n    elseif consecutive_spaces\
    \ == 1 then\n      fixed_text = fixed_text..' '\n    end\n  end\n  return fixed_text\n\
    end", "  local spaces\n  if text:sub(1,1) == \" \" then\n    spaces = 1\n  else\n\
    \    spaces = 0\n  end\n  return text:gsub(\"  \",\"_\")\n         :gsub(\"  \"\
    ,\" \")\n         :gsub(\"  \",\"-\")\n         :gsub(\"  \",\"-\")\n        \
    \ :gsub(\"  \",\" \")\n         :gsub(\"  \",\"-\")\n         :gsub(\"  \",\"\
    -\")\n         :gsub(\"  \",\"-\")\n         :gsub(\"  \",\"-\")\n         :gsub(\"\
    \  \",\" \")\n         :gsub(\"  \",\"-\")\n         :gsub(\"  \",\"-\")\n   \
    \      :gsub(\"  \",\" \")\n         :gsub(\"  \",\"-\")\n         :gsub(\"  \"\
    ,\"-\")\n         :gsub(\"  \",\"-\")\n         :gsub(\"  \",\"-\")\n        \
    \ :gsub(\"  \",\" \")\n         :gsub(\"  \",\"-\")\n         :gsub(\"  \",\"\
    -\")\n         :gsub(\"  \",\" \")\n         :gsub(\"  \",\"-\")\n         :gsub(\"\
    \  \",\"-\")\n         :gsub(\"  \",\"-\")\n         :gsub(\"  \",\"-\")\n   \
    \      :gsub(\"  \",\" \")\n         :gsub(\"  \",\"-\")\n         :gsub(\"  \"\
    ,\"-\")\n         :gsub(\"  \",\" \")\n         :gsub(\"  \",\"-\")\n        \
    \ :gsub(\"  \",\"-\")\n         :gsub(\"  \",\" \")\n         :gsub(\"  \",\"\
    -\")\n         :gsub(\"  \",\"-\")\n         :gsub(\"  \",\" \")\n         :gsub(\"\
    \  \",\"-\")\n         :gsub(\"  \",\"-\")\n         :gsub(\"  \",\"-\")\n   \
    \      :gsub(\"  \",\" \")\n         :gsub(\"  \",\"-\")\n         :gsub(\"  \"\
    ,\"-\")\n         :gsub(\"  \",\"-\")\n         :gsub(\"  \",\"-\")\n        \
    \ :gsub(\"  \",\" \")\n         :gsub(\"  \",\"-\")\n         :gsub(\"  \",\"\
    -\")\n         :gsub(\"  \",\"-\")\n         :gsub(\"  \",\"-\")\n         :gsub(\"\
    \  \",\" \")\n         :gsub(\"  \",\"-\")\n         :gsub(\"  \",\"-\")\n   \
    \      :gsub(\"  \",\"-\")\n         :gsub(\"  \",\" \")\n         :gsub(\"  \"\
    ,\"-\")\n", "  -- Split on spaces if necessary\n  local spaces_at_start = string.sub(text,\
    \ 1, 2)\n  local spaces_at_end = string.sub(text, -1, 2)\n  if spaces_at_start\
    \ ~= \"\" and spaces_at_end ~= \"\" then\n    text = text:gsub(\"( +)\", \"%1\"\
    )\n    text = text:gsub(\"( +)$\", \"%1\")\n  elseif spaces_at_start ~= \"\" then\n\
    \    text = text:gsub(\"( +)\", \"_\")\n  elseif spaces_at_end ~= \"\" then\n\
    \    text = text:gsub(\"( +)$\", \"_\")\n  end\n  return text\nend", "  local\
    \ fixed_text = text\n  local spaces = 0\n  local consecutive = 0\n  for i=1,#fixed_text\
    \ do\n    if fixed_text[i] == ' ' then\n      consecutive = consecutive + 1\n\
    \      if consecutive > 1 then\n        fixed_text = fixed_text:gsub('  ', '-')\n\
    \        spaces = spaces + 1\n      end\n    else\n      consecutive = 0\n   \
    \ end\n  end\n  return fixed_text, spaces\nend", "    local s = text:gsub(\"[[\
    \ ]+\", \"_\")\n    s = s:gsub(\"[  ]+\", \"-\")\n    return s\nend", "  local\
    \ spaces = text:gsub(\"%w\", \" \"):gsub(\"%S+\", \"-\")\n  if spaces:sub(-2,-2)\
    \ ~= \"---\" then\n    return text:gsub(\"%S+\", \"-\")\n  end\n  return text\n\
    end", '    local fixed_text = text', "  return text\n    ..\" \"\n    ..string.gsub(\"\
    \ \",\"_\",\"_\")\n    ..\"_\"\n    ..string.gsub(\"_ \"|_\",\"_\",text)\nend",
  "  if text == \"\" then return \"\" end\n  text = text:gsub( \" \", \"_\" )\n  text\
    \ = text:gsub( \" {2,}\", \"_\" )\n  text = text:gsub(\"_{2,}\", \"-\")\n  return\
    \ text\nend", "    local space_count = text:gsub(\"%s+\", \"_\"):gsub(\"_%s+\"\
    , function(str)\n        return str == \"_\" ? \"__\" : \" \";\n    end)\n   \
    \ if space_count > 2 then\n        text = text:gsub(\"_%s+\", function(str)\n\
    \            return str == \"_\" ? \"__\" : \" \";\n        end)\n    end\n  \
    \  return text\nend", "    local fixed_text = text:gsub(' ', '_')\n    local max_spaces\
    \ = fixed_text:gsub('%w+%-', '-%')\n    return max_spaces\nend", "  local spaces\
    \ = string.gsub(\" \", \"_\", \"g\")\n  return string.gsub( text, spaces, \"-\"\
    \ )\nend", "   text = text:gsub(' ','_')\n   text = text:gsub('  ','-')\n   if\
    \ text:match('  ') then\n      text = text:gsub('  ','-')\n   end\n   return text\n\
    end", "  if text:match('%S') then\n    local spaces = text:gsub('( +)', '-%S-'):gsub('%S(-+)%S',\
    \ \n                                      '-%s-%S')\n    return text:gsub('%S-(-+)%S',\
    \ ''):gsub('%s-%S', ''):gsub('( +)', spaces)\n  else\n    return text\n  end\n\
    end", "    local spaces = {}\n    for i=1, #text do\n        if text:sub(i,i)\
    \ == \" \" then\n            table.insert(spaces, i)\n        end\n    end", " \
    \  text = text:gsub(' '..' '..' '..'_','_')\n   if text:gsub(' _','-') then\n\
    \      text = text:gsub(' ','-')\n      text = text:gsub('-_','-')\n   end\n \
    \  return text\nend", "  if text:match(\"^%s+$\") then\n    return text\n  else\n\
    \    return text:gsub(\"%s+\", \"_\")\n  end \nend", "    local result = text\n\
    \    local new_result = \"\"\n    local pos = 1\n    while pos ~= nil do\n   \
    \     local c = result:sub(pos, pos)\n        if c ~= \" \" then\n           \
    \ new_result = new_result .. c\n        else\n            local first_spaces =\
    \ result:sub(pos, pos+1)\n            local second_spaces = result:sub(pos+1,\
    \ pos+2)\n            if first_spaces ~= \" \" and second_spaces ~= \" \" then\n\
    \                new_result = new_result .. \"_\"\n            else\n        \
    \        new_result = new_result .. \"-\"\n            end\n        end\n    \
    \    pos = pos + 1\n    end\n    return new_result\nend", "  return text:gsub('\
    \ ','_'):gsub('  ','-')\nend", "  local fixed_text = text:gsub('%S+', function(s)\
    \ return s:gsub(' ','_') end)\n  return fixed_text == \"_\"\n    or fixed_text:gsub('%S+',\
    \ function(s) return s:gsub(' ','-') end) == \"-\"\n    and fixed_text:gsub('%S+',\
    \ function(s) return s:gsub(' ','_') end) ~= \"_\"\n    and fixed_text:gsub('%S+',\
    \ function(s) return s:gsub(' ','-') end) ~= \"-\"\nend", "  if text:match(\"\
    ^%s*$\") then\n    return text\n  end\n  local new_text = text\n  -- Replace multiple\
    \ spaces with a single -\n  new_text = new_text:gsub(\"  \", \"-\")\n  -- Fix\
    \ multiple consecutive spaces with a single -\n  new_text = new_text:gsub(\" \
    \ +\", \"- \")\n  -- Replace multiple -s with a single space\n  new_text = new_text:gsub(\"\
    -\", \" \")\n  -- Remove any trailing -\n  new_text = new_text:gsub(\"-$\")\n\
    \  return new_text\nend", "\tlocal spaces = text:gsub(\"% +\", \" \") -- Replace\
    \ multiple spaces with one space\n\tlocal consecutive_spaces = text:gsub(\"  +\"\
    , \"-\") -- Replace multiple consecutive spaces with one dash\n\ttext = spaces\
    \ .. consecutive_spaces\n\tif text:match(\"  +\") > 2 then \n\t\ttext = text:gsub(\"\
    \  +\", \"-\") -- Replace all consecutive spaces with one dash\n\tend\n\ttext\
    \ = text:gsub(\"  +\", \" \") -- Replace all consecutive spaces with one space\n\
    \ttext = text:gsub(\"  +\", \"+\") -- Replace multiple consecutive spaces with\
    \ one plus\n\ttext = text:gsub(\"  +\", \"%+\") -- Replace multiple consecutive\
    \ spaces with %+\n\ttext = text:gsub(\"%+\", \"+\") -- Replace multiple consecutive\
    \ spaces with one plus\n\ttext = text:gsub(\"%+\", \"%+\") -- Replace multiple\
    \ consecutive spaces with %+\n\ttext = text:gsub(\"%+\", \"%+\") -- Replace multiple\
    \ consecutive spaces with %+\n\ttext = text:gsub(\"%+\", \"%+\") -- Replace multiple\
    \ consecutive spaces with %+\n\ttext = text:gsub(\"%+\", \"%+\") -- Replace multiple\
    \ consecutive spaces with %+\n\ttext = text:gsub(\"%+\", \"%+\") -- Replace multiple\
    \ consecutive spaces with %+\n\ttext = text:gsub(\"%+\", \"%+\") -- Replace multiple\
    \ consecutive spaces with %+\n\ttext = text:gsub(\"%+\", \"%+\") -- Replace multiple\
    \ consecutive spaces with %+\n\ttext = text:gsub(\"%+\", \"%+\") -- Replace multiple\
    \ consecutive spaces with %+\n\ttext = text:gsub(\"%+\", \"%+\") -- Replace multiple\
    \ consecutive spaces with %+\n\ttext = text:gsub(\"%+\", \"%+\") -- Replace multiple\
    \ consecutive spaces with %+\n\ttext = text:gsub(\"%+\", \"%+\") -- Replace multiple\
    \ consecutive spaces with %+\n\ttext = text:gsub(\"%+\", \"%+\") -- Replace multiple\
    \ consecutive spaces with %+\n\ttext = text:gsub(\"%+\", \"%+\") -- Replace multiple\
    \ consecutive spaces with %+\n\ttext = text:gsub(\"%+\", \"%+\") -- Replace multiple\
    \ consecutive spaces with %+\n\ttext = text:gsub(\"%+\", \"%+\") -- Replace multiple\
    \ consecutive spaces with %+\n\ttext = text:gsub(\"%+\", \"%"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
