name: HumanEval_121_solution
language: lua
prompt: "-- Given a non-empty list of integers, return the sum of all of the odd elements\
  \ that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7, 1]) \n-- 12\n\
  -- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
  \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
  \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5,\
  \ 9}), 5)\n    lu.assertEquals(candidate({2, 4, 8}), 0)\n    lu.assertEquals(candidate({30,\
  \ 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3, 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  if lst[1] == nil then\n    return 0\n  elseif lst[2] == nil then\n\
    \    return lst[1]\n  else\n    return solution(lst[1]) + solution(lst[2])\n \
    \ end\nend", "  assert(lst~=nil, \"Solution expects a list as input\")\n  local\
    \ sum = 0\n  local pos = 0\n  local is_even = false\n  for i=1,#lst do\n    if\
    \ lst[i]~=nil then\n      if is_even then\n        sum = sum + lst[i]\n      else\n\
    \        if lst[i] % 2 ~= 0 then\n          sum = sum + lst[i]\n        end\n\
    \      end\n      is_even = not is_even\n    end\n    if i%2==0 then\n      pos\
    \ = i\n      break\n    end\n  end\n  return sum\nend\n</cell>\n<text>\nExercise\n\
    Write a function that returns the first n positive integers such that sum of the\
    \ first n natural numbers is equal to the given number. For example, the sum of\
    \ 51, 59, and 74 is 97.", "    if lst[1] == nil then\n        return 0\n    else\n\
    \        local odd = 0\n        local even = 0\n        local total = 0\n    \
    \    for i = 2, #lst do\n            if lst[i] % 2 == 0 then\n               \
    \ even = even + lst[i]\n            elseif lst[i] % 2 == 1 then\n            \
    \    odd = odd + lst[i]\n            end\n            total = total + lst[i]\n\
    \        end\n        return total - even + odd\n    end\nend", "  -- base case:\
    \ if the list is empty, return the empty list\n  if #lst == 0 then return [] end",
  "\tlocal sum = 0 \n\tfor i,v in ipairs(lst) do\n\t\tif i % 2 == 0 then\n\t\t\tsum\
    \ = sum + v \n\t\tend\n\tend\n\treturn sum\nend", "    return lst .. _.reduce(lst,\
    \ function(sum, v)\n        return sum + v -- odd elements in even positions\n\
    \    end, 0) -- sum of sum of odd elements\nend", "  if #lst <= 1 then return\
    \ 0 end\n  if lst[1] <= 1 then return 0 end\n  return lst[1] + solution(lst[2:end])\n\
    end", "    if lst == nil then\n        return nil\n    end\n    local even = lst:sub(1,(#lst-1)/2)\n\
    \    local odd = lst:sub((#lst-1)/2)\n    return even:sum{function(x,y)\n    \
    \    return math.abs(x - y) == 1 and math.abs(y - 2*y) == 0\n    end}+odd:sum{function(x,y)\n\
    \        return math.abs(x - y) == 1 and math.abs(y - 2*y) == 1\n    end}\nend",
  "   if lst[1] == nil then\n      return nil\n   end\n   return lst[1] + solution(lst\
    \ [2:])\nend", "    local total = 0\n    for i = 1, #lst do\n        if lst[i]\
    \ % 2 == 0 then\n            total = total + lst[i]\n        end\n    end\n  \
    \  return total\nend", "\tlocal sum = 0\n\tfor i = 2, #lst do\n\t\tif ((lst[i]\
    \ % 2 == 0) and (lst[i] > lst[i-2])) then\n\t\t\tsum = sum + lst[i]\n\t\tend\n\
    \tend\n\treturn sum\nend", "  local sum = 0\n  for i = 1, #lst do\n    if lst[i]\
    \ % 2 == 1 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend",
  "  if #lst <= 0 then\n    return 0\n  end\n  local sum = 0 \n  local counter = 0\
    \ \n  for i = 1, #lst do\n    if i % 2 == 0 then\n      sum = sum + lst[i]\n \
    \     counter = counter + 1 \n    end\n  end\n  if counter % 2 == 0 then\n   \
    \ return sum\n  else\n    return 0\n  end\nend", "  local evens = lst:sub(1,lst:len()\
    \ ):filter(function(n)\n    return n%2 == 1\n  end)", "    local sum = 0\n   \
    \ for i = 1, #lst do\n        if lst[i] % 2 == 0 then\n            sum = sum +\
    \ lst[i]\n        end\n    end\n    return sum\nend", "  if lst == nil then return\
    \ 0 end\n  local result = 0, lst[2]\n  local j = 1\n  for i in lst:gmatch(\"..*\"\
    ) do\n    if i % 2 == 0 then \n      if j < 2 then \n        result = result +\
    \ i \n      else \n        result = result + lst[j - 1] \n      end\n      j =\
    \ j + 1 \n    end\n  end\n  return result\nend", "  return lst:gsub(\"^%d%d+$\"\
    , function(x) return x%2 ~= 0 and x:sub(1,2) or x end)\nend", "\treturn lst:select(\
    \ function(x) \n\t\treturn x%2 == 1 and x or 0 \n\tend):sum()\nend", "    return\
    \ math.sum(lst:gsub('%d%d', '%d'):gsub('%d', '%d%d'):gsub('%d%d', '%d%d'):gsub('%d%d',\
    \ '%d%d'):gsub('%d%d', '%d%d'):gsub('%d%d', '%d%d'):gsub('%d%d', '%d%d'):gsub('%d%d',\
    \ '%d%d'):gsub('%d%d', '%d%d'):gsub('%d%d', '%d%d'):gsub('%d%d', '%d%d'):gsub('%d%d',\
    \ '%d%d'):gsub('%d%d', '%d%d'):gsub('%d%d', '%d%d'):gsub('%d%d', '%d%d'):gsub('%d%d',\
    \ '%d%d'):gsub('%d%d', '%d%d'):gsub('%d%d', '%d%d'):gsub('%d%d', '%d%d'):gsub('%d%d',\
    \ '%d%d'):gsub('%d%d', '%d%d'):gsub('%d%d', '%d%d'):gsub('%d%d', '%d%d'):gsub('%d%d',\
    \ '%d%d'):gsub('%d%d', '%d%d'):gsub('%d%d', '%d%d'):gsub('%d%d', '%d%d'):gsub('%d%d',\
    \ '%d%d'):gsub('%d%d', '%d%d'):gsub('%d%d', '%d%d'):gsub('%d%d', '%d%d'):gsub('%d%d',\
    \ '%d%d'):gsub('%d%d', '%d%d'):gsub('%d%d', '%d%d'):gsub('%d%d', '%d%d'):gsub('%d%d',\
    \ '%d%d'):gsub('%d%d', '%d%d'):gsub('%d%d', '%d%d'):gsub('%d%d', '%d%d'):gsub('%d%d',\
    \ '%d%d'):gsub('%d%d', '%d%d'):gsub('%d%d', '%d%d'):gsub('%d%d', '%d%d'):gsub('%d%d',\
    \ '%d%d'):gsub('%d%d', '%d%d'):gsub('%d%d', '%d%d'):gsub('%d%d', '%d%d'):gsub('%d%d',\
    \ '%d%d'):gsub('%d%d', '%d%d'):gsub('%d%d', '%d%d'):gsub('%d%d', '%d%d'):gsub('%d%d',\
    \ '%d%d'):gsub('%d%d', '%d%d'):gsub('%d%d', '%d%d'):gsub('%d%d', '%d%d'):gsub('%d%d',\
    \ '%d%d'):gsub('%d%d", "    local sum = 0\n    \n    for i = 1, #lst, 1 do\n \
    \       if i % 2 == 0 then\n            sum = sum + lst[i]\n        end\n    end\n\
    \    \n    return sum\nend", "  return lst:reduce(function (acc, x)\n    return\
    \ acc + x%2 and x%2 or acc\n  end)\nend", "  local sum = 0\n  for i = 2, #lst\
    \ do\n    if lst[i] % 2 == 0 then\n      sum = sum + lst[i]\n    end\n  end\n\
    \  return sum\nend\nprint(solution([5, 8, 7, 1])) -- 12\nprint(solution([3, 3,\
    \ 3, 3, 3])) -- 9\n</cell>\n<text>\nQuestion 10", "    if lst == nil then\n  \
    \      return 0\n    end\n    local sum = 0\n    for i = 1,#lst-1 do\n       \
    \ if ((i-1) % 2) == 0 then\n            sum = sum + lst[i]\n        end\n    end\n\
    \    return sum\nend", "    local sum = 0\n    for i = 1, #lst do\n        if\
    \ lst:sub(i,i) % 2 ~= 0 then\n            sum = sum + lst[i]\n        end\n  \
    \  end\n    return sum\nend", "  local sum = 0\n  for i = 1,#lst,2 do\n    if\
    \ lst[i] % 2 == 0 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\n\
    end", "    if lst == nil then return 0 end\n    local oddSum = 0\n    local evenSum\
    \ = 0\n    for i = 1,#lst,1 do\n        if i ~= (lst:sub(i,i)/2) then\n      \
    \      oddSum = oddSum + lst[i]\n        else\n            evenSum = evenSum +\
    \ lst[i]\n        end\n    end\n    return oddSum + evenSum\nend", "    local\
    \ sum = 0 \n    for i=1,#lst do\n        if lst[i]%2==1 then\n            sum\
    \ = sum + lst[i]\n        end\n    end\n    return sum\nend", "  -- Your code\
    \ here\n  if lst == nil then return nil end\n  local sum = 0\n  for i=1,#lst,1\
    \ do\n    if i%2 == 1 then\n      sum = sum + lst[i]\n    end\n  end\n  return\
    \ sum\nend", "    local sum = 0\n    for i=1,#lst do \n        if i % 2 == 0 then\
    \ \n            sum = sum + lst[i] \n        end\n    end\n    return sum\nend",
  "    local sum = 0\n    for i=1,#lst do\n        if lst[i] % 2 == 1 then\n     \
    \       sum = sum + lst[i]\n        end\n    end\n    return sum\nend", "    return\
    \ lst:filter(function(x)\n            return x%2==1 and x~=lst[#lst]\n       \
    \ end):sum()\nend", "\tif lst == nil then return 0 end\n\tlocal even, odd = 0,\
    \ 1\n\tfor _, x in pairs(lst) do \n\t\tif x % 2 == 0 then \n\t\t\teven = even\
    \ + x \n\t\telse \n\t\t\todd = odd + x \n\t\tend \n\tend \n\treturn even + odd\n\
    end", "  -- Write your code in whatever way you like\n  return 0 -- Replace this\
    \ line\nend", "\t-- Write your code in JavaScript (for loops, recursion, etc).\n\
    \t-- Start by using the map function to return a list of all the odd numbers in\
    \ your list.\n\t-- Next, find the sum of the odd numbers using filter and reduce\n\
    \t-- Finally, return the result\n\treturn lst:map(function (n)\n\t\treturn math.floor(n/2)\n\
    \t):filter(function(n) return n % 2 == 1):reduce(function(a, b) \n\t\treturn a\
    \ + b\n\tend)\nend", "  if lst:len() == 0 then return 0 end\n  \n  local result\
    \ = 0\n  for i = 1, lst:len() do\n    if i % 2 ~= 0 then \n      result = result\
    \ + lst[i]\n    end\n  end\n  return result\nend", "  local evens, odds\n  for\
    \ i = 1,#lst,2 do\n    if lst[i]%2==1 then\n      table.insert(evens, lst[i])\n\
    \    else\n      table.insert(odds, lst[i])\n    end\n  end\n  return table.unpack(table.sort(odds))+table.unpack(table.sort(evens))\n\
    end", "    local sum = 0\n    local n = #lst\n    for i = 1, n do\n        if\
    \ i % 2 == 0 then\n            sum = sum + lst[i]\n        end\n    end\n    return\
    \ sum\nend", "\t\n\t-- base case\n\tif not lst then return 0 end", "    if not\
    \ lst[1] then return end\n    if #lst < 2 then return 0 end\n    local total =\
    \ 0\n    for i, v in pairs(lst) do\n        if i % 2 == 1 then total = total +\
    \ v end\n    end\n    return total\nend\n</cell>\n<text>\nExercise 12: Part 1\n\
    Write a recursive function called sum_odd_positions that will accept a list of\
    \ integers and return the sum of all of the odd positions within the list.", " \
    \ if lst[1] ~= nil then\n    local sum = 0\n    local i = 0\n    while i < lst\
    \ do\n      if lst[i] % 2 == 1 then\n        sum = sum + lst[i]\n        lst[i]\
    \ = nil\n      end\n      i = i + 1\n    end\n    return sum\n  else\n    return\
    \ 0\n  end\nend", "    local n = 0\n    for i = 1, #lst do \n        if lst[i]%2\
    \ ~= 0 and lst[i]%2 == 1 then\n            n=n+lst[i]\n        end\n    end\n\
    \    return n\nend", "    local result = 1\n    for _, v in pairs(lst) do\n  \
    \      if v % 2 == 0 then\n            local even = lst[#lst]\n            local\
    \ index = #lst - v\n            if index ~= nil then\n                even = lst[index]\n\
    \            end\n            result = result + even\n        end\n    end\n \
    \   return result\nend", "    local oddSum = 0\n    for index, value in pairs(lst)\
    \ do\n        if index%2 == 1 then\n            oddSum = oddSum + value\n    \
    \    end\n    end\n    return oddSum\nend", "  -- Write your code here.\nend",
  "  local sum = 0\n  for i = 1, #lst do\n    if lst[i] % 2 ~= 0 then\n      sum =\
    \ sum + lst[i]\n    end\n  end\n  return sum\nend", "    return lst:map(function(a)\
    \ return a + a / 2 end):filter(function(a) return a % 2 == 1 end):sum()\nend",
  "    local even = 0\n    local total = 0\n    for i = 2, #lst do\n        if lst[i]%2\
    \ == 1 then\n            even = even + 1\n            total = total + lst[i]\n\
    \        end\n    end\n    return total + even\nend", "    if not lst or #lst\
    \ <= 0 then\n        return 0\n    end\n    if lst[#lst] == 2 then\n        return\
    \ lst[1] + lst[3]\n    end\n    local even = lst[#lst]\n    local odd = 0\n  \
    \  for i = 1, #lst do\n        if lst[i] % 2 ~= 0 then\n            odd = odd\
    \ + lst[i]\n        end\n        if lst[i] % 2 == 0 then\n            even = even\
    \ - lst[i]\n        end\n    end\n    return even + odd\nend", "\tlocal sum =\
    \ 0\n\tfor i in lst:gmatch(\"%d*%d%d*\") do\n\t\tsum = sum + tonumber(i)\n\tend\n\
    \treturn sum\nend", "    local sum = 0\n    for i,v in ipairs(lst) do\n      \
    \  if i % 2 == 0 then\n            sum = sum + v\n        end\n    end\n    return\
    \ sum\nend\n</cell>\n<text>\nPart II. Day 1: Cooking Out the New York Times (Day\
    \ 1: The New York Times)\nThis assignment is about finding out what you need to\
    \ cook the New York Times again for twenty hours. You will do so by first choosing\
    \ a date for the New York Times appointment (any weekday or weekend should be\
    \ fine), then cooking twenty hours each morning until it is over. The appointment\
    \ is open from 8AM Monday through 5AM Friday and closed at 5PM. You can choose\
    \ from any of the many pre-cooked recipes you can find at your local newspaper\
    \ or website. Your goal is to cook the next twenty hours and tell the people that\
    \ need it.", "   if lst == nil then return nil end\n   if #lst == 0 then return\
    \ 0 end\n   local sum = 0\n   for i = 1, #lst, 2 do\n      if lst[i] % 2 == 1\
    \ then sum = sum + lst[i] end\n   end\n   return sum\nend", "  if lst == nil then\n\
    \    return 0\n  end\n  local sum = 0\n  for i = 1, #lst do\n    if lst[i] % 2\
    \ == 1 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend", " \
    \ local sum = 0\n  for i=1,#lst,2 do\n    if lst[i] % 2 ~= 0 then\n      sum =\
    \ sum + lst[i]\n    end\n  end\n  return sum\nend", "    local sum = 0\n    for\
    \ i=1,#lst do\n        if i % 2 == 0 then\n            sum = sum + lst[i]\n  \
    \      end\n    end\n    return sum\nend", "  if #lst == 0 then return nil end\n\
    \  if lst[1] % 2 = 0 then return lst[1] end\n  return lst[1] + solution(lst:sublist(2))\n\
    end", "   -- Base Case\n   if #lst == 0 then\n      return 0\n   end", "\tlocal\
    \ sum = 0\n\tlocal i = 1\n\twhile i <= #lst do\n\t\tif lst[i] == 3 then\n\t\t\t\
    sum = sum + lst[i-1]\n\t\tend\n\t\ti = i + 1\n\tend\n\treturn sum\nend", "  local\
    \ sum = 0 \n  local i = 1\n  while i <= lst do\n    if lst:imod(i) ~= 0 then sum\
    \ = sum + lst:imod(i) \n    end \n    i = i + 1\n  end\n  return sum\nend", " \
    \ return lst:gsub(\"^%s*\"):match(\"%-#*[^\\n]*\")\n       :gsub(\"(%-#*)\"):gsub(\"\
    %1+\"):gsub(\"^%1+\"):gsub(\"%1+$\")\nend", "\tlocal odd = 0\n\tfor index, value\
    \ in pairs(lst) do\n\t\tif index % 2 == 0 then\n\t\t\tif value % 2 ~= 0 then\n\
    \t\t\t\todd = odd + value\n\t\t\tend\n\t\tend\n\tend\n\treturn odd\nend", "  \
    \  local sum = 0\n    for i = 1, #lst do\n        if ((i-1) % 2) == 0 then\n \
    \           sum = sum + lst[i]\n        end\n    end\n    return sum\nend", "\t\
    if lst[1] == nil then\n\t\treturn 0\n\telseif lst[2] == nil then\n\t\treturn lst[1]\
    \ + lst[2]\n\telse\n\t\treturn solution(lst[1]) + solution(lst[2]) + lst[3]\n\t\
    end\nend", "    local even, odd\n    local sum = 0\n    local i = 1\n    while\
    \ i < #lst do\n        local val = lst[i]\n        if val % 2 == 0 then\n    \
    \        sum = sum + val\n            even = even:add(val)\n        elseif val\
    \ % 2 == 1 then\n            sum = sum - val\n            odd = odd:sub(val)\n\
    \        end\n        i = i + 1\n    end\n    return sum - #even * #odd\nend\n\
    </cell>\n<cell>", "    local result = {}\n    for i = 1, #lst do\n        if i\
    \ % 2 == 0 then\n            table.insert(result, lst[i])\n        end\n    end\n\
    \    return table.sum(result)\nend", "  local total = 0\n  for i = 1, lst[1] do\n\
    \    if lst[i] % 2 == 1 then\n      total = total + lst[i]\n    end\n  end\n \
    \ return total\nend", "    return lst:reduce(function(s, n)\n        if n % 2\
    \ == 0 then\n            return s + n\n        else\n            return s\n  \
    \      end\n    end)\nend", "  local sum = 0\n  local count = 0\n  for i = 1,#lst\
    \ do \n    if i > 1 and lst[i] % 2 == 0 then\n      if count < #lst then \n  \
    \      sum = sum + lst[i]\n        count = count + 1\n      else\n        count\
    \ = count + 1\n      end\n    end\n  end\n  return sum\nend", "  -- base case\n\
    \  if #lst == 0 then return 0 end\n  -- get last element in list\n  local last_elem\
    \ = lst[#lst]\n  -- get first element in list\n  local first_elem = lst[1]\n \
    \ -- return sum of all odd elements\n  return first_elem + last_elem + sum (lst[#lst-1]:gmatch('%d*%d'))\n\
    end", "  local sum = 0\n  for _, v in pairs(lst) do\n    sum = sum + v % 2 ==\
    \ 1 and v or 0\n  end\n  return sum\nend", "  return lst[#lst] * (lst[#lst] %\
    \ 2 + 1) + (lst[#lst] % 2 + 1) * (lst[#lst] % 2)\nend\n</cell>\n<text>\nQ10. Given\
    \ a binary tree, return the inorder traversal of its nodes' values.", "  if lst\
    \ == nil then return 0 end\n  local sum = 0\n  local count = 0\n  for i = 1, #lst\
    \ do\n    if i % 2 == 1 then sum = sum + lst[i] end\n    if i % 2 == 0 then count\
    \ = count + 1 end\n  end\n  return sum / count\nend", "  -- Write your code here.\n\
    \  local odd = {}\n  for _, v in pairs(lst) do table.insert(odd, v) end\n  local\
    \ even = {}\n  table.sort(odd)\n  for _, v in pairs(odd) do table.insert(even,\
    \ v) end\n  local result = 0\n  table.sort(even)\n  for _, v in pairs(even) do\
    \ result = result + v end\n  return result\nend", "    -- write your code in Python\
    \ 2.7\n    -- return sum([lst[i+i] for i in range(0,len(lst), 2) if lst[i]%2==1])\n\
    \    -- return sum(filter(lambda x:x%2==1, lst))\n    return sum(map(lambda x:x%2==1,\
    \ lst))\nend", "    local evenSum = 0\n    for _, v in ipairs(lst) do\n      \
    \  if v % 2 == 0 then\n            evenSum = evenSum + v\n        end\n    end\n\
    \    return evenSum\nend\n</code>\n<|/ a tags=lua,algorithm dscore=0 |>\n<| c\
    \ |>\nThank you for the effort! It will be helpful for me for future problems\
    \ that I post on here.\n<|/ c |>\n<| a tags=lua,algorithm |>\nI solved this challenge\
    \ using two nested for loops:\n<code>", "    local n = #lst\n    local sum = 0\n\
    \    for i = 1, n do\n        if i % 2 == 1 then\n            sum = sum + lst[i]\n\
    \        end\n    end\n    return sum\nend", "\tlocal oddsum = 0\n\tfor i,v in\
    \ pairs(lst) do\n\t\tif(i%2 == 1) then\n\t\t\toddsum = oddsum + v\n\t\tend\n\t\
    end\n\treturn oddsum\nend", "  if lst:len() == 0 then return 0 end\n  if lst:len()\
    \ == 1 then return lst:get(0) end\n  if lst:len() % 2 == 0 then return lst:get(1)\
    \ end\n  local even = solution(lst:sub(1, lst:len() - 2))\n  local odd = lst:get(lst:len()\
    \ - 1)\n  local sum = 0\n  for i = 1, lst:len() do\n    if odd == even then sum\
    \ = sum + odd else sum = sum + odd - even end\n    if odd - even > 0 and lst:get(i\
    \ + 2) % 2 == 0 then \n      sum = sum + odd - even \n    end\n    odd = lst:get(i\
    \ + 1)\n    even = even\n  end\n  return sum\nend", "    local evens_sum = 0\n\
    \    for _, v in ipairs(lst) do\n        if v %2 == 0 then\n            evens_sum\
    \ = evens_sum + v\n        end\n    end\n    return evens_sum\nend", "  if lst\
    \ == nil then\n    return 0\n  else\n    return lst[1] + lst[2] + lst[3] + (lst[4]\
    \ + lst[5])/2\n  end\nend", "   local sum = 0\n   for _, v in pairs(lst) do\n\
    \      if v % 2 == 1 then\n         sum = sum + v\n      end\n   end\n   return\
    \ sum\nend", "  return reduce(fn, lst, 0)\nend", "   local sum = 0\n   for i,\
    \ v in ipairs(lst) do\n      if v % 2 == 1 then\n         sum = sum + v\n    \
    \  end\n   end\n   return sum\nend", "    local sum = 0\n    for i = 1, #lst do\n\
    \        if (i % 2) == 0 then\n            sum = sum + lst[i]\n        end\n \
    \   end\n    return sum\nend", "  return sum(lst) .. \" \" .. solution(lst:sub(1,end-1))\n\
    end", "\tlocal result = 0\n\tfor _, elem in pairs(lst) do\n\t\tresult = result\
    \ + math.floor((elem % 2) / 2)\n\tend\n\treturn result\nend", "  return sum(lst):select(function(x)\n\
    \      if x == 1 then return 1 end\n      if x:mod(2) == 0 then return 1 end\n\
    \      return 0\n    end)\nend", "  return lst:filter(function(x, i)\n    return\
    \ i ~= #lst\n  and x % 2 ~= 0\n  and x ~= lst[i]\n  and x ~= lst[i - 1] end):reduce(function(x,y)\n\
    \    return x + y\n  end)\nend\n</cell>\n<text>\nProblem 10", "  local odds =\
    \ Set{}\n  for i,v in ipairs(lst) do\n    if v %2 == 1 then\n      table.insert(odds,\
    \ v)\n    end\n  end\n  return sum( unpack( map(function(x) return odds[x] end,\
    \ odds) ) )\nend", "  local evens = lst:filter(function(x) return x % 2 == 0 end)\n\
    \  local odds = lst:filter(function(x) return x % 2 ~= 0 end)\n  return evens:reduce(function(acc,\
    \ x) return acc + x end) + odds:reduce(function(acc, x) return acc + x end)\n\
    end", "  return lst:filter(function(x) return x:sub(1, 2) ~= nil end):sum()\n\
    end", "    local ans = 0\n    for _, val in ipairs(lst) do\n        if val % 2\
    \ ~= 0 then\n            ans = ans + val\n        end\n    end\n    return ans\n\
    end", "    local evens, odds = lst[1], lst[2:]\n    local total = 0\n    for i=1,#odds\
    \ do\n        if evens[i] then\n            total = total + odds[i]\n        end\n\
    \    end\n    return total\nend\n</code>\n<|/ a dscore=2 tags=lua |>\n<| a |>\n\
    Here is my solution.\n<code>", "  if #lst == 0 then\n    return 0 \n  else\n \
    \   return lst[#lst] * 3 + (lst[1] % 2 == 0)\n  end\nend", "    local sum = 0\n\
    \    for _, elem in ipairs(lst) do\n        if elem % 2 == 0 then\n          \
    \  sum = sum + elem\n        end\n    end\n    return sum\nend", "   local i,\
    \ sum, j=0, 0, 1\n   for i, v in ipairs(lst) do\n      if v then \n         sum\
    \ = sum + v\n         j=j+1\n      else\n         sum = sum + j\n         j=1\n\
    \      end\n   end\n   return sum\nend", "  -- Write your code here.\n  local\
    \ sum = 0 \n  for i, v in ipairs(lst) do\n    if v%2 == 1 then\n      sum = sum\
    \ + v\n    end\n  end\n  return sum\nend", '  if #lst < 2 then return 0 end',
  "    if lst == nil then\n        return nil\n    end\n    local sum = 0\n    for\
    \ i = 1, #lst do\n        if i % 2 == 1 then\n            sum = sum + lst[i]\n\
    \        end\n    end\n    return sum\nend", "    local evenSum = 0\n    for i\
    \ = 1, #lst, 1 do \n        if lst[i] == 1 then evenSum = evenSum + lst[i] end\n\
    \    end\n    return evenSum\nend", "  return lst:reduce(function(result, val)\n\
    \    if val % 2 == 0 then\n      result = result + val\n    end\n    return result\n\
    \  end, 0) \nend", "\t-- Your code here\n\treturn sum(filter(function(e) return\
    \ e % 2 == 1 end, lst))\nend", "\tlocal sum = 0\n\tlocal odds = #lst%2\n\tfor\
    \ i = 1, odds do\n\t\tsum = sum + lst[i]\n\tend\n\treturn sum\nend", "  -- base\
    \ case\n  if #lst < 1 then\n    return 0\n  end", "  local sum = 0 \n  for i =\
    \ 2, #lst do\n    if lst[i] % 2 == 0 then\n      sum = sum + lst[i]\n    end\n\
    \  end\n  return sum\nend", "  if lst==nil then return nil end\n  local sum=0\n\
    \  for i=1, #lst do\n    if i%2==0 then\n      sum=sum+lst[i]\n    end\n  end\n\
    \  return sum\nend", "  local oddSum = 0\n  for i=1,#lst do \n    if i % 2 ~=\
    \ 0 then\n      oddSum = oddSum + lst[i]\n    end\n  end\n  return oddSum\nend",
  "    local result = 0\n    for i = 1, #lst do\n        if lst[i] % 2 == 0 then\n\
    \            result = result + lst[i]\n        end\n    end\n    return result\n\
    end", "    if lst[1] == nil then return 0 end\n    local sum = 0\n    for i =\
    \ 2, #lst do\n        if lst[i] == lst.[i] then\n            sum = sum + lst.[i]\n\
    \        end\n    end\n    return sum\nend\n</cell>\n<cell>", "\tlocal s = 0\n\
    \tfor i, v in ipairs(lst) do\n\t\tif v % 2 == 1 then\n\t\t\ts = s + v\n\t\tend\n\
    \tend\n\treturn s\nend", "  if lst[1] == nil then return 0 end\n  local even =\
    \ 0\n  local odd = 0\n  for i = 1, #lst do\n    if lst[i] == 2 then\n      even\
    \ = even + lst[i]\n    else\n      odd = odd + lst[i]\n    end\n  end\n  return\
    \ even + odd\nend", "  -- Base cases\n  if #lst < 1 then return 0 end\n  if #lst\
    \ == 1 then return lst[1] end", "   -- Base case\n   if lst[1] == nil then\n \
    \     return nil\n   end\n   \n   -- Find the first even number\n   local even\
    \ = lst[1]\n   local first = 2\n   -- Find the first odd number\n   for i = 2,\
    \ #lst do\n      if lst[i] ~= even then\n         even = lst[i]\n         first\
    \ = i\n      end\n   end\n   -- Find the sum of odd numbers after the found even\
    \ number\n   return even + sum(lst[first+2:end])\nend", "  local odd_count = 0\n\
    \  local even_count = 0\n  for _, x in ipairs(lst) do\n    if x%2 == 0 then\n\
    \      even_count = even_count + 1\n    else\n      odd_count = odd_count + 1\n\
    \    end\n  end", "  -- base case: if the list is empty, return 0\n  if #lst ==\
    \ 0 then\n    return 0\n  end", "  local sum = 0\n  for _,v in pairs(lst) do\n\
    \    sum = sum + v % 2\n  end\n  return sum\nend", "  local sum = 0\n  for i =\
    \ 1,#lst do\n    if i % 2 == 0 then\n      sum = sum + lst[i]\n    end\n  end\n\
    \  return sum\nend", "   local sum = 0\n   for i = 1, #lst do\n      if i mod\
    \ 2 == 0 then\n         sum = sum + lst[i]\n      end\n   end\n   return sum\n\
    end\n</cell>\n<code language=julia-0.6>\n@time solution([5, 8, 7, 1])\n</cell>\n\
    <text>\nProblem 4", "  local sum = 0\n  for i = 1, #lst do\n    if i > 1 and lst[i]\
    \ % 2 == 1 and lst[i - 1] % 2 == 0 then\n      sum = sum + lst[i]\n    end\n \
    \ end\n  return sum\nend", "  if #lst <= 0 then\n    return 0\n  end\n  local\
    \ even = 0\n  local odd = 0\n  for i=1, #lst do\n    local value = lst[i]\n  \
    \  if value % 2 == 0 then\n      even = even + value\n    else\n      odd = odd\
    \ + value\n    end\n  end\n  return even + odd\nend\n</cell>\n<cell>", "    local\
    \ oddSum = 0\n    for _, v in ipairs(lst) do\n        oddSum = oddSum + math.floor(v\
    \ / 2)\n    end\n    return oddSum\nend", "  local sum = 0\n  for i = 1,#lst do\n\
    \    if i % 2 == 0 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\n\
    end\n</cell>\n<cell>", "    local sum=0\n    for i=1,#lst do\n        if lst[i]%2\
    \ ~= 0 then\n            sum = sum + lst[i]\n        end\n    end\n    return\
    \ sum\nend", "  local sum = 0\n  local index = 0\n  for i = 1, #lst do\n    if\
    \ i % 2 == 0 then\n      sum = sum + lst[index]\n      index = index + 1\n   \
    \ end\n  end\n  return sum\nend", "    if lst[1] == nil then\n        return 0\n\
    \    end\n    local sum = 0\n    for i=1,#lst,2 do\n        if lst[i] % 2 == 0\
    \ then\n            sum = sum + lst[i]\n        end\n    end\n    return sum\n\
    end\n</cell>\n<text>\nGiven a non-empty list of words, return the total number\
    \ of words in the list. Words are separated by whitespace. ", "    local oddsum\
    \ = 0\n    for _, v in ipairs(lst) do\n        if v ~= 1 then\n            oddsum\
    \ = oddsum + v\n        end\n    end\n    return oddsum\nend", "  assert(lst,\
    \ \"Input list must not be empty\")\n  local result = 0\n  for i = 1, #lst do\n\
    \    -- We need to add odd elements to get to even positions.\n    -- A bit hacky,\
    \ but does the job.\n    local j = math.floor((i - 1) / 2)\n    if j > 0 and lst[i]\
    \ % 2 ~= 0 then\n      result = result + lst[j]\n    end\n  end\n  return result\n\
    end", "  local sum = 0\n  for _, v in pairs(lst) do\n    if v:mod(2):~= 0 then\n\
    \      sum = sum + v\n    end\n  end\n  return sum\nend", "  -- Base case: empty\
    \ list\n  if lst[1] == nil then return 0 end\n  \n  -- Base case: odd number of\
    \ elements in a list\n  if #lst % 2 == 1 then \n    return lst[#lst]+solution(lst[#lst+1:])\n\
    \  end\n  \n  -- Use recursion to find the sum of all odd elements in even positions\
    \ in the list.\n  return solution(lst[#lst+1:]) + lst[#lst]*(lst[#lst+1]%2 ~=\
    \ 1)\nend\n</cell>\n<text>\nTest your Code", "\tif lst==nil then\n\t\treturn 0\n\
    \tend\n\tlocal evenSum = 0\n\tfor _, x in pairs(lst) do\n\t\tif x%2==0 then\n\t\
    \t\tevenSum = evenSum + x\n\t\tend\n\tend\n\treturn evenSum\nend", "    local\
    \ evenSum = 0\n    for i=1,#lst do\n        if lst[i]%2 ~= 0 then\n          \
    \  evenSum = evenSum + lst[i]\n        end\n    end\n    return evenSum\nend",
  "\tif lst == nil then\n\t\treturn 0\n\tend\n\tlocal sum = 0\n\tlocal n = #lst\n\t\
    for i = 1, n do\n\t\tif i % 2 == 0 then\n\t\t\tsum = sum + lst[i]\n\t\tend\n\t\
    end\n\treturn sum\nend", "\tlocal sum = 0\n\tfor i = 1, #lst, 1 do\n\t\tif ((i\
    \ -1) % 2) == 0 then\n\t\t\tsum = sum + lst[i]\n\t\tend\n\tend\n\treturn sum\n\
    end", "  if #lst == 0 then\n    return 0\n  else\n    return lst[#lst] * 3 + lst[1]\n\
    \  end\nend", "\tlocal sum = 0\n\t\n\t-- The first half of the list is even, so\
    \ \n\t-- we only need to check the odd elements.\n\t-- \n\t-- The second half\
    \ of the list is odd,\n\t-- so we need to check the even elements.\n\tfor _,v\
    \ in ipairs(lst) do\n\t\tif v%2 == 1 then\n\t\t\tsum = sum + v\n\t\tend\n\tend\n\
    \t\n\treturn sum\nend", "    return lst:reduce(function(acc, num)\n        if\
    \ num % 2 == 1 then\n            acc = acc + num\n        end\n        return\
    \ acc\n    end, 0) \nend", "    local sum = 0 \n    for i = 1, #lst do\n     \
    \   if math.fmod(i, 2) == 1 then\n            sum = sum + lst[i] \n        end\n\
    \    end\n    return sum\nend", "    local s = lst[1]\n    for i = 2, #lst do\n\
    \        s = (s + lst[i]) %  100\n    end\n    return s\nend", "  -- write your\
    \ code in JavaScript (or the Haskell equivalent of your favorite functional language)\
    \ here \n  local total = 0\n  for i = 1, #lst do \n    total = total + lst[i]\n\
    \    if i %2 ==0 then\n      total = total + lst[#lst]\n    end\n  end\n  return\
    \ total\nend", "    local sum = 0\n    for i = 1, #lst do\n        if i % 2 ~=\
    \ 0 then\n            sum = sum + lst[i]\n        end\n    end\n    return sum\n\
    end\n</cell>\n<text>\nD - Cumulative sum", "  -- Write your code here.\n  return\
    \ 0\nend", "  assert(lst~=nil, \"solution expects a non-nil argument\")\n  \n\
    \  if #lst==0 then \n    return 0\n  end", "    local function sum(l)\n      \
    \  local sum = 0\n        for _,v in pairs(l) do sum=sum+v end\n        return\
    \ sum\n    end\n    return sum(lst:sub(1,lst:len()-1)):mod(2)\nend", "    local\
    \ sum = 0\n    for i = 1, #lst do\n        if lst[i] % 2 == 1 then\n         \
    \   sum = sum + lst[i]\n        end\n    end\n    return sum\nend\nprint(solution([5,\
    \ 8, 7, 1]))\nprint(solution([3, 3, 3, 3, 3]))", "  -- Base case -- If there are\
    \ no even elements, just return 0\n  if #lst == 0 then return 0 end\n  -- For\
    \ each element, add it to the sum of all of its neighbors\n  -- (ie, the sum of\
    \ the two elements immediately in front of it).\n  local sum_of_odds = 0\n  for\
    \ i = 0, #lst - 1 do\n    if i > 1 then\n      -- Add the two elements to the\
    \ sum\n      sum_of_odds = sum_of_odds + lst[i] + lst[i-1]\n    end\n  end\n \
    \ return sum_of_odds\nend", "  local even = 0\n  local odd = 0\n  for i = 1, #lst\
    \ do\n    if i % 2 == 0 then\n      even = even + lst[i]\n    else\n      odd\
    \ = odd + lst[i]\n    end\n  end\n  return even + odd\nend", "  local even = 1\n\
    \  local odd = 0\n  local total = 0\n  for i = 1, #lst do\n    if i % 2 == 0 then\n\
    \      even = even + lst[i]\n    else\n      odd = odd + lst[i]\n    end\n  end\n\
    \  total = even + odd\n  return total\nend", "    local evensum = 0\n    for i=1,#lst\
    \ do\n        if lst[i]%2 ~= 0 then\n            evensum = evensum + lst[i]\n\
    \        end\n    end\n    return evensum\nend", "\tlocal sum = 0\n\t\n\tfor i=1,#lst\
    \ do\n\t\tif i % 2 == 0 then\n\t\t\tsum = sum + lst[i]\n\t\tend\n\tend\n\t\n\t\
    return sum\nend", "   -- Write the code here\n    local sum = 0\n    for i = 1,\
    \ #lst do\n        if i % 2 ~= 0 then\n            sum = sum + lst[i]\n      \
    \  end\n    end\n    return sum\nend", "    local sum = 0\n    for i = 1, #lst\
    \ do\n        if ((i -1) % 2) == 0 then\n            sum = sum + lst[i]\n    \
    \    end\n    end\n    return sum\nend", "\t-- Base case: if the list is empty,\
    \ return zero.\n\tif not lst then return 0 end\n\t\n\t-- Use an auxiliary variable\
    \ to track the number in even positions.\n\tlocal n = 0\n\t\n\tfor i, v in ipairs(lst)\
    \ do\n\t\t-- Increment the variable for odd positions.\n\t\tif i%2 == 1 then\n\
    \t\t\tn = n + v\n\t\tend\n\tend\n\t\n\treturn n\nend", "  return lst:gsub(\"(%d+)\"\
    , function(f) \n    return tonumber(f:match(\"(%d+)\"))  + tonumber(f:match(\"\
    (%d+)\")) \n  end)\nend", "  local sum = 0\n  for _, v in ipairs(lst) do\n   \
    \ if v mod 2 == 0 then\n      sum = sum + v\n    end\n  end\n  return sum\nend",
  "    local sum = 0\n    for _, v in pairs(lst) do\n        if v%2 == 0 then\n  \
    \          sum = sum + v\n        end\n    end\n    return sum\nend", "\t-- Base\
    \ Case\n\tif lst[1] == nil then\n\t\treturn nil\n\tend", "  -- base case: if the\
    \ list is empty, return zero\n  if not lst then\n    return 0\n  -- base case:\
    \ if the list is one element, return it\n  elseif #lst == 1 then\n    return lst[1]\n\
    \  -- recursive case: if we have an even number of elements,\n  -- the sum will\
    \ be the sum of two pairs of numbers in the list\n  elseif #lst % 2 == 0 then\n\
    \    return solution(lst[#lst-1:1]) + solution(lst[#lst-2:2])\n  -- base case:\
    \ if we have an odd number of elements, then\n  -- the sum will be the sum of\
    \ the odd and even elements of the list\n  else\n    return solution(lst[#lst-1:1])\
    \ + solution(lst[#lst-2:2]) + lst[#lst]\n  end\nend", "    if lst == nil then\n\
    \        return nil\n    end\n    local res = lst[1]\n    for i = 2, #lst do\n\
    \        if lst[i] ~= nil and lst[i] % 2 == 0 then\n            res = res + lst[i]\n\
    \        end\n    end\n    return res\nend", "    return lst:filter(function(x)\
    \ return x % 2 == 1 end):reduce(function(total, next) total = total + next return\
    \ total end, 0)\nend", "  local odd = 0\n  for i, value in pairs(lst) do\n   \
    \ if value % 2 == 1 then\n      odd = odd + (value * value)\n    end\n  end\n\
    \  return odd\nend", "\tif #lst == 0 then\n\t\treturn 0\n\telse\n\t\treturn lst[#lst\
    \ + 1] + solution(lst[1:#lst])\n\tend\nend", "    local sum = 0\n    for _, v\
    \ in pairs(lst) do\n        if v % 2 == 1 then\n            sum = sum + v\n  \
    \      end\n    end\n    return sum\nend", "  local ls=lst\n  local total=0\n\
    \  for i=1,#ls do\n     if ls[i]%2==1 then total=total+ls[i] end\n  end\n  return\
    \ total\nend", "  if lst[1] == nil or lst[2] == nil then\n    return nil\n  end\n\
    \  return lst[1] + lst[2]\nend", "  -- Write your code in JavaScript (list comprehension\
    \ is okay).\n  local sum = 0 \n  for i = 1, #lst do\n    if i % 2 == 0 then\n\
    \      sum = sum + lst[i] \n    end\n  end\n  return sum\nend", "  local evensum\
    \ = 0\n  for i=1,#lst,2 do\n    local j = 1\n    while j<=#lst and lst[j] ~= lst[j+1]\
    \ do\n      j = j+1\n    end\n    if j<#lst then\n      evensum = evensum+lst[j]\n\
    \    end\n  end\n  return evensum\nend", "  local sum = 0\n  for i = 1, #lst do\n\
    \    if lst[i] % 2 == 0 then\n      sum = sum + lst[i]\n    end\n  end\n  return\
    \ sum\nend", "    local sum = 0\n    for i = 1, #lst do\n        if i % 2 == 1\
    \ then\n            sum = sum + lst[i]\n        end\n    end\n    return sum\n\
    end", "  local evens = #lst - lst:filter((function(x)\n    return x % 2\n  end))\
    \ - lst:filter((function(x)\n    return not (x % 2)\n  end)) - #lst\n  return\
    \ evens * 2 + lst[evens]\nend", "    local sum = 0\n    for i = 1, #lst do \n\
    \        if lst[i] % 2 == 1 then\n            sum = sum + lst[i]\n        end\n\
    \    end\n    return sum\nend", "  if #lst>0 then\n    local sum=0\n    local\
    \ i=1\n    for _,v in pairs(lst) do\n      sum=sum+(v%2) and 1 or 0\n      if\
    \ i>=#lst then\n        return sum\n      end\n      i=i+1\n    end\n  end\nend\n\
    </code>\n<|/ a tags=lua,loops,for-loop dscore=1 |>\n<| c |>\nIt would be nice\
    \ to add an explanation for the code.\n<|/ c |>\n<| c |>\nThis answer is also\
    \ a great answer because of the comment in the code which explains what the code\
    \ is doing.\n<|/ c |>\n<| a tags=lua,loops,for-loop dscore=0 |>\n<code>", "  \
    \  local sum = 0\n    for _, v in ipairs(lst) do\n        if v %2 == 1 then\n\
    \            sum = sum + v\n        end\n    end\n    return sum\nend", "  return\
    \ lst:reduce(function(total, curr)\n    if curr % 2 == 1 then return total + curr\
    \ end\n    return total\n  end)\nend", "    -- Your code here\n    local odd =\
    \ 0\n    for i = 1, #lst, 2 do\n        if lst[i] == lst[i + 1] then\n       \
    \     odd = odd + lst[i]\n        end\n    end\n    return odd\nend", "   local\
    \ total = 0\n   for idx, value in ipairs(lst) do \n      if value % 2 == 0 then\n\
    \         total = total + value\n      end\n   end\n   return total\nend", " \
    \  -- Write your code here.\n   return nil\nend", "    local sum = 0\n    for\
    \ i=1,#lst do\n        if ((i %% 2) == 1) then\n            sum = sum + lst[i]\n\
    \        end\n    end\n    return sum\nend", "    local sum = 0\n    for i = 1,\
    \ #lst do \n        if math.mod(i, 2) == 1 then\n            sum = sum + lst[i]\n\
    \        end\n    end\n    return sum\nend\n</cell>\n<cell>", "  if #lst == 0\
    \ then return 0 end\n  local n = lst[1]\n  local sum = 0\n  local i = 1\n  for\
    \ i = 2, #lst do\n    if lst[i] % 2 ~= 0 then\n      sum = sum + lst[i]\n    end\n\
    \  end\n  return sum + n\nend", "\tlocal sum = 0\n\tlocal pos = 1\n\tfor i=1,\
    \ #lst do\n\t\tif pos == 2 then\n\t\t\tsum = sum + lst[i]\n\t\telseif pos % 2\
    \ == 0 then\n\t\t\tsum = sum + lst[i]\n\t\tend\n\t\tpos = pos + 1\n\tend\n\treturn\
    \ sum\nend", "  -- initialize sum\n  local sum = 0\n  -- Loop through list and\
    \ test if element is even\n  for i=1,#lst do\n    if math.mod(lst[i], 2) == 1\
    \ then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend", "\tlocal\
    \ evens = lst:select( function(a,b)\n\t\tif a % 2 = 0 then return true end\n\t\
    end)\n\tlocal sum = 0\n\tlocal i = 1\n\tfor i=1,#evens do \n\t\tif evens[i] %\
    \ 2 = 0 then sum = sum + evens[i] end\n\tend\n\treturn sum\nend", "  local sum\
    \ = 0\n  for i = 1, #lst do\n    if i % 2 == 1 then sum = sum + lst[i] end\n \
    \ end\n  return sum\nend", "    local sum = 0\n    for i = 1, #lst do\n      \
    \  if ((i % 2) == 0) then\n            sum = sum + lst[i]\n        end\n    end\n\
    \    return sum\nend", "    return lst:filter( function(n)\n        return ((n\
    \ % 2) == 0) then 1 else 0 end\n    ) \nend", "  return lst:reduce(function(sum,\
    \ num)\n    if num % 2 == 0 then\n      sum = sum + num\n    end\n    return sum\n\
    \  end)\nend", "    local total = 0\n    local counter = 1\n    for i=1,#lst do\n\
    \        if ((counter % 2) == 1) then\n            total = total + lst[i]\n  \
    \      end\n        counter = counter + 1\n    end\n    return total\nend", " \
    \   return #lst and sum (lst:sub(1, #lst):map(function(item) return item % 2 ==\
    \ 1 end ):filter(function(item) return item == 1 end))\nend", "    if lst == nil\
    \ then return 0 end\n    local sum = 0\n    for i, v in ipairs(lst) do\n     \
    \   if v %2 == 1 then\n            sum = sum + v\n        end\n    end\n    return\
    \ sum\nend", "\treturn lst and unpack(lst):gsub('%d%d%d*', function(x)\n\t\treturn\
    \ x:match('%d*'):sub(2)\n\tend) or 0\nend", "    local sum = 0\n    for i = 1,\
    \ #lst do\n        if i % 2 == 0 then\n            sum = sum + lst[i]\n      \
    \  end\n    end\n    return sum\nend", "    if lst == nil then\n        return\
    \ 0\n    end", "    local sum = 0\n    for i = 1, #lst do\n        if lst[i] %\
    \ 2 == 0 then\n            sum = sum + lst[i]\n        end\n    end\n    return\
    \ sum\nend", "  local sum = 0\n  for i = 0, lst.length - 2 do\n    if (lst[i]\
    \ % 2) and (lst[i + 1] % 2) then\n      sum = sum + lst[i]\n    end\n  end\n \
    \ return sum\nend", "\tlocal i = 0\n\tlocal s = 0\n\twhile i <= #lst do\n\t\t\
    if lst[i] % 2 == 0 then\n\t\t\ts = s + lst[i]\n\t\tend\n\t\ti = i + 1\n\tend\n\
    \treturn s\nend", "  local sum = 0\n  for i,v in ipairs(lst) do\n    if v %% 2\
    \ == 1 then\n      sum = sum + v\n    end\n  end\n  return sum\nend", "\tlocal\
    \ odds = {}\n\tfor i=1,#lst do\n\t\tif (lst[i]%2)==1 then table.insert(odds, lst[i])\
    \ end\n\tend\n\treturn table.getn(odds)\nend", "\tlocal sum = 0\n\tfor i=1,#lst-1\
    \ do\n\t\tif i % 2 == 1 then\n\t\t\tsum = sum + lst[i]\n\t\tend\n\tend\n\treturn\
    \ sum\nend", "  if #lst == 0 then\n    return 0\n  end\n  local sum = 0 -- initialize\
    \ the sum\n  for i = 1, #lst, 1 do -- iterate through the list\n    if i % 2 ==\
    \ 1 then -- check to see if item is odd\n      sum = sum + lst[i] -- add item\
    \ to sum\n    end\n  end\n  return sum\nend", "    local odd = 1\n    local sum\
    \ = 0\n    for i = 1, #lst do \n        if ((i % 2) == 0) then \n            sum\
    \ = sum + lst[i] \n            odd = (odd + 1) %2\n        else\n            sum\
    \ = sum + lst[i]\n        end\n    end\n    return sum\nend", "    local sum =\
    \ 0 \n    for _, v in ipairs(lst) do\n        if v then\n            sum = sum\
    \ + v \n        end\n    end\n    return sum\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
