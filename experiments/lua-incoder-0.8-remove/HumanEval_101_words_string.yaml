name: HumanEval_101_words_string
language: lua
prompt: "-- You will be given a string of words separated by commas or spaces. Your\
  \ task is\n-- to split the string into words and return an array of the words.\n\
  -- For example:\nlocal function words_string(s)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_string\n\
  \    lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is',\
  \ 'John'})\n    lu.assertEquals(candidate('One, two, three, four, five, six'), {'One',\
  \ 'two', 'three', 'four', 'five', 'six'})\n    lu.assertEquals(candidate('Hi, my\
  \ name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,, two, three,\
  \ four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n    lu.assertEquals(candidate(''),\
  \ {})\n    lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})\n\
  end\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local words = {}\n    for word in string.gmatch(s, '([^ ]+):%s*')\
    \ do\n        table.insert(words, word:gsub('([^ ]+)', ''))\n    end\n    return\
    \ words\nend", "\tlocal words = {}\n\t-- +++ TODO: Your code here +++\n\treturn\
    \ words\nend", "    -- your code goes here\nend", "  -- Your code here\n  return\
    \ words\nend", "  local arr = {}\n  for w in string.gmatch(s, \"([^,]+)\") do\n\
    \    table.insert(arr, w)\n  end\n  return arr\nend", "\t-- your code goes here\n\
    end", "  local a = {}\n  for w in string.gmatch(s, \"([^,]+)(,|$)\") do\n    table.insert(a,\
    \ w)\n  end\n  return a\nend", "    -- Your code here!\nend", "  -- Complete the\
    \ function here\nend", "\ts = string.lower(s)", "\t-- your code here\n\tlocal\
    \ tokens = s:gsub('[^\" ]+',' '):gsub('\" ',',')\n\tlocal words = {}\n\tfor i\
    \ = 1, #tokens do\n\t\ttable.insert(words, tokens[i])\n\tend\n\treturn words\n\
    end", "  return \"Hello World\".split(s)\nend", "\t-- +++ Your code here +++\n\
    end", "  return string.explode(s, \"[,]\")\nend", "\t-- Your code here\n\treturn\
    \ ...\nend", "\tlocal words = {}", "  local words = s.split(\" \")\n  return words\n\
    end", "  -- Your code here\nend", "  return string.Explode(s, \",\")\nend", " \
    \   return string.gmatch(s, \"([^,]+)\")\nend", "  -- Return the array of words\
    \ in the string.\nend", "    -- Write your code here\nend", "  -- Your code here\n\
    end", "   -- Complete the function\nend", "\t-- Write your implementation here.\n\
    end", "\tlocal t = {}\n\tfor w in string.gmatch(s, \"[,\\x20]\") do table.insert(t,w)\
    \ end\n\treturn t\nend", "    return string.split(s,',')\nend", "  local words\
    \ = {}\n  for w in s:gmatch(\"%S+\") do table.insert(words, w) end\n  return words\n\
    end", "\t-- Complete the function here.\n\treturn \nend", "   -- Return an array\
    \ of the words in s\n   return ...\nend", "  -- your code here\nend", "  -- Convert\
    \ string to table\n  local tab = table.concat(string.gmatch(s, \"([^,]+)\")))\n\
    \  -- Split table into words\n  local tab = table.concat(string.gmatch(\"[^,]+\"\
    , tab))\n  -- Return array\n  return tab\nend", "    -- Your code here\n    return\
    \ words_in_string(s)\nend", "  return { words }\nend", "  -- TODO\nend", "  --\
    \ Return the array of words.\nend", "    -- +++your code here+++\nend", "    --\
    \ Write your code here\nend", "\t-- The line below is provided for you to help\
    \ implement the function\n\t-- Use print(words_string('a,b,c'))\n\t-- You will\
    \ need to use a for loop to iterate through the string and\n\t-- push each word\
    \ onto the words array\n\t-- The line below is what splits the string into an\
    \ array\n\tlocal words = {}\n\t-- TODO: Implement the for loop to push the words\
    \ to the words array\n\t-- Hint: There is a trick here involving splitting on\
    \ commas.\n\treturn words\nend", "  local words = {}\n  for word in s:gmatch(\"\
    [^,]+\") do\n    table.insert(words, word)\n  end\n  return words\nend", "  --\
    \ Use a for loop to iterate over the string.\n  -- The for loop is used to iterate\
    \ over all characters in the string.\n  -- The character at position (i) in the\
    \ string is accessed using\n  -- character notation as follows:\n  --    i\n \
    \ --   ^ ^ ^ ^\n  -- Where i is the index of the character you want to access.\n\
    \  --\n  --   0\n  --   ^ ^ ^\n  --\n  --   1\n  --   ^ ^ ^\n  --\n  --   2\n\
    \  --   ^ ^ ^\n  --\n  --   3\n  --   ^ ^ ^\n  --\n  --   4\n  --   ^ ^ ^\n  --\n\
    \  --   5\n  --   ^ ^ ^\n  --\n  --   6\n  --   ^ ^ ^\n  --\n  --   7\n  --  \
    \ ^ ^ ^\n  --\n  --   8\n  --   ^ ^ ^\n  --\n  --   9\n  --   ^ ^ ^\n  --\n  --\
    \   10\n  --   ^ ^ ^\n  --\n  --   11\n  --   ^ ^ ^\n  --\n  --   12\n  --   ^\
    \ ^ ^\n  --\n  --   13\n  --   ^ ^ ^\n  --\n  --   14\n  --   ^ ^ ^\n  --\n  --\
    \   15\n  --   ^ ^ ^\n  --\n  --   16\n  --   ^ ^ ^\n  --\n  --   17\n  --   ^\
    \ ^ ^\n  --\n  --   18\n  --   ^ ^ ^\n  --\n  --   19\n  --   ^ ^ ^\n  --\n  --\
    \   20\n  --   ^ ^ ^\n  --\n  --   21\n  --   ^ ^ ^\n  --\n  --   22\n  --   ^\
    \ ^ ^\n  --\n  --   23\n  --   ^ ^ ^\n  --\n  --   24\n  --   ^ ^ ^\n  --\n  --\
    \   25\n  --   ^ ^ ^\n  --\n  --   26\n  --   ^ ^ ^\n  --\n  --   27\n  --   ^\
    \ ^ ^\n  --\n  --   28\n  --   ^ ^ ^\n  --\n  --   29\n  --   ^ ^ ^\n  --\n  --\
    \   30\n  --   ^ ^ ^\n  --\n  --   31\n  --   ^ ^ ^\n  --\n  --   32\n  --   ^\
    \ ^ ^\n  --\n  --   33\n  --   ^ ^ ^\n  --\n  --   34\n  --   ^ ^ ^\n  --\n  --\
    \   35\n  --   ^ ^ ^\n  --\n  --   36\n  --   ^ ^ ^\n  --\n  --", "\ts = string.lower(s)\n\
    \tlocal array = s:gsub(\"([^,]+)\", \" \"):gsub(\"^ +\", \"\"):gsub(\"( +)\",\
    \ \" \"):gsub(\"^ *\", \"\"):gsub(\" *$\", \"\")\n\treturn array:split(\" \")\n\
    end", "    -- Your code here\nend", "  -- your code goes here\nend", "\t-- Remove\
    \ extra spaces, commas and quotation marks\n\ts = s:gsub(\"[%\\\"\\']\", \"\")",
  "  -- Return the array of words in s.\n  -- This function should work even when\
    \ s contains spaces.\nend", "  -- +++your code here+++\n  return words\nend",
  "\tlocal words = {}\n\t\n\t-- Add code to parse the string into words.\n\t\n\treturn\
    \ words\nend", '    local word_list = {}', "  -- Write your code here\n  return\
    \ ...\nend", "  return {}\nend", "    -- Return the array [ \"apple\", \"banana\"\
    , \"cherry\" ]\nend", "  local words = {}\n  for word in string.gmatch(s, '[%w]+')\
    \ do\n    table.insert(words, word)\n  end\n  return words\nend\nprint(words_string('a,b,c'))",
  "\treturn s:gmatch(\"[%w-]+\")\nend", "  -- Return the elements of the string after\
    \ splitting on spaces.\n  return string.gmatch(s, \",?\")\nend", '  -- Your code
    here', "  s = s:lower()\n  local words = {}\n  for w in s:gmatch('[^,]+') do table.insert(words,\
    \ w) end\n  return words\nend", "   -- TODO\nend", "  local words = {}\n  for\
    \ word in string.gmatch(s, \"[^,]+\") do\n    table.insert(words, word)\n  end\n\
    \  return words\nend", "\t-- Your code goes here\nend", "  -- Return the result\n\
    end", "  -- You code here\nend", "\t-- Your code here\nend", "  -- Your code here!\n\
    \  -- Return an array\nend", "   s = s or \"\"\n   local words = {}\n   for word\
    \ in s:gmatch(\"[^,]+\") do\n      table.insert(words, word)\n   end\n   return\
    \ words\nend", "    -- Your code goes here\nend", "    -- Your code here!\nend",
  "  return explode_string(s, ' ')\nend", "  -- Your code here\nend", "  -- your code\
    \ here\n  return word_list\nend", "  -- Your code goes here!\n  return words\n\
    end", "  local splitted = s:gmatch(\"([^,]+)\") -- Create an array of all non-comma\
    \ characters in the string\n  -- return splitted -- Return the array of words\n\
    \  return table.concat(splitted, \" \") -- return each item of the array with\
    \ a space in between\nend", "    -- Your code goes here\n    local arr\n    arr\
    \ = string.gmatch(s, \".{1,%d+}\")\n    return arr\nend", "  local words = {}\n\
    \  s = string.lower(s)\n  for w in s:gmatch(\"[^,]+\") do\n    table.insert(words,\
    \ w)\n  end\n  return words\nend", "    local splits = string.gmatch(s, '[,%s]+')\n\
    \    local words = {}\n    for i = 1, #splits do\n        words[#words + 1] =\
    \ splits[i]\n    end\n    return words\nend", "  return s:gmatch(\"([^,]+),([^,]+),([^,]+),?(.*)\"\
    )\nend", "\tlocal word_array = s:gsub(\",\", \" \"):gsub(\"[() ]\", \"\"):gsub(\"\
    \  \", \" \")\n\t-- remove space from inside of the string\n\treturn word_array:gsub(\"\
    ( )\", \"\")\nend", "    local words = {}\n    for word in string.gmatch(s, \"\
    ([^,]+)\") do\n        table.insert(words, word)\n    end\n    return words\n\
    end", "\t-- Remove all whitespace.\n\ts = s.gsub(' ', '')\n\t-- Split into words.\n\
    \ts = s:gmatch('^([^,]+),*([^,]+)$')\n\t-- Return array.\n\treturn s\nend", " \
    \ -- Your code here\n  return nil\nend", "  -- Write your code here\nend", " \
    \ -- split_words(s)\nend", "   local words = { }\n   for w in string.gmatch(s,\
    \ \",?([^,]+)\") do\n      table.insert(words, w)\n   end\n   return words\nend",
  "\t-- Your code here\n\treturn words\nend", "    local words = { }\n    local function\
    \ word_i(t)\n        table.insert(words, t)\n    end\n    s:gsub('([^,]+)', word_i)\n\
    \    return words\nend", "\t-- Split your string into words using the String.Split\
    \ function.\n\t-- For instance:\n\t-- local s = ''\n\t-- table.insert(s, ...)\n\
    \t-- return s\nend", "  -- your code goes here\nend", "  -- Your code here\nend",
  "  return s:gmatch('([^,]+)') -- return an array of the words with each word\n \
    \                          -- separated by a comma (no space).\nend", "    --\
    \ Task here -- Your code here\n    return words\nend", "  -- Write your code here\n\
    end", "    local words = s:gsub(\"[^a-zA-Z0-9]+\",\" \"):gsub(\"(%w+)\",\" \"\
    )\n    return words:gsub(\"^%s+\",\"\"):gsub(\"(%s+)\",\",\")\nend", "    assert(type(s)\
    \ == 'string')", "   -- Use the split() function to return an array of words from\
    \ the given string. \n   -- The split() function was imported above. It takes\
    \ as its argument a string\n   -- which represents the string to be split and\
    \ returns a table, which represents the split string.\n   -- For example, to split\
    \ a comma-separated string of words into an array:\n   local tbl = split(s,\"\
    ,\")\n   -- To split a space-separated string of words into an array:\n   local\
    \ tbl = split(s,\" \")\n   -- To split a string of words into an array:\n   local\
    \ tbl = split(s)\n   -- To return the array of words:\n   return tbl\nend", " \
    \ return split(s, \"[,]\")\nend", "  -- Return the array of words from the given\
    \ string.\nend", "\t-- Remove spaces and commas.\n\ts = s:gsub(',',' '):gsub('\
    \ ',',')", "    local array = {}\n    for word in string.gmatch(s, \"%w+\") do\n\
    \        table.insert(array, word)\n    end\n    return array\nend", "\t-- your\
    \ code here\nend", "\tlocal words = {}", "  return s:gmatch(\"[^%s]+\")\nend",
  "    -- Convert string to table\n    local a = table.toarray(s)", "  -- Write your\
    \ code here.\nend", "  -- your code here\nend", "\t-- Your code here\nend", " \
    \   return require(\"luarocks.require\")(\"split\").split(s)\nend", "  return\
    \ string.match(s, \",\\\\s*\")\nend", "    local a = {}\n    local words = string.gmatch(s,\
    \ '[^,]+')\n    for word in words do\n        table.insert(a, word)\n    end\n\
    \    return a\nend", "  local words = {}\n  local space = {\n    [' '] = true,\n\
    \    ['\\t'] = true,\n    ['\\n'] = true,\n    ['\\r'] = true,\n    ['\\v'] =\
    \ true,\n  }\n  for i = 1, #s do\n    words[#words + 1] = s:sub(i, i)\n    if\
    \ space[s:sub(i, i)] then\n      words[#words] = ''\n      i = i - 1\n    end\n\
    \  end\n  return words\nend", "  -- Write your function here!\nend", "    -- YOUR\
    \ CODE STARTS HERE\n    local words = s\n    words=string.gsub(words,\",\",\"\
    \ \")\n    words=string.gsub(words,\" \",\"\")\n    local arr={}\n    arr=string.gsub(words,\"\
    [^,]+\",function(w)\n        return w\n    end)\n    arr=string.gsub(arr,\",\"\
    ,\"\")\n    words=arr\n    -- YOUR CODE ENDS HERE\n    return words\nend", " \
    \ -- Implement\nend", "  -- Your code here\nend", "   -- Your code here!\nend",
  "\t-- The variable 's' contains the string \"Hello, World\"\n\t-- The call 'words_string(s)'\
    \ should return the array\n\t-- '{\"Hello\",\"World\"}'\n\t-- You may assume that\
    \ the string is actually a line in a file\n\t-- that has been read into a variable\
    \ of type string\n\t-- You may assume that the string is lower case\n\t-- The\
    \ function 'words_string' should return the array containing the strings\n\t--\
    \ in the string 's'\n\t-- Don't forget to handle non-string values returned by\
    \ 'words_string'\n\treturn string.gmatch(s, \".*[,\\\\s]+\") -- The pattern matches\
    \ one or more non-space\n\t\t\t\t\t\t\t\t\t\t\t\t-- characters and a space character\n\
    end", "    local a = {}\n    for word in string.gmatch(s, \"([^,]+)|(%w+)\") do\n\
    \        a[#a + 1] = word -- append the word to our array\n    end\n    return\
    \ a\nend", "  local words\n  assert(type(s) == 'string')\n  words = s:trim():split('\
    \ ')\n  assert(#words > 0)\n  return words\nend", "  -- Return the list of words\
    \ given by the input string\n  return 'Hello, world!'\nend", "  return string.explode(\"\
    \ \", s)\nend", "  -- Remove spaces from both sides\n  s = s:gsub(\"^ \", \"\"\
    ):gsub(\"$ \", \"\")\n  -- Split the string into words using the spaces as delimiters\n\
    \  s = s:gsub(\"[^ ]+\", \" \")\n  -- Remove the empty strings from the array\n\
    \  s = s:filter(function(x) x ~= \"\")\n  -- Return the array of words\n  return\
    \ s\nend", "    -- s is your string which contains words separated by commas or\
    \ spaces.\n    -- Your code goes here.\nend", "  local words = s:gmatch(\"[^,]+\"\
    )\n  return words\nend", -- Return the list of words in the given string., " \
    \ local words = s.split(\",\")\n  -- Complete the code here!\n  return words\n\
    end", "\t-- Split up the given string by spaces\n\t-- Split the resulting string\
    \ into an array of strings -- which are the words\n\t-- and return that array.\n\
    \t-- Example:\n\t-- local function words_string(s)\n\t--\t-- Split up the given\
    \ string by spaces\n\t--\t-- Split the resulting string into an array of strings\
    \ -- which are the words\n\t--\t-- and return that array.\n\t-- Example:\n\t--\
    \ local function words_string(s)\n\t--\t-- Split up the given string by spaces\n\
    \t--\t-- Split the resulting string into an array of strings -- which are the\
    \ words\n\t--\t-- and return that array.\n\t-- Example:\n\tlocal words = string.split(s,\
    \ '[,]')\n\t-- Return the array\n\t-- Return the array\n\t-- Return the array\n\
    \t-- Return the array\n\t-- Return the array\n\t-- Return the array\n\t-- Return\
    \ the array\n\t-- Return the array\n\t-- Return the array\n\t-- Return the array\n\
    \t-- Return the array\n\t-- Return the array\n\t-- Return the array\n\t-- Return\
    \ the array\n\t-- Return the array\n\t-- Return the array\n\t-- Return the array\n\
    \t-- Return the array\n\t-- Return the array\n\t-- Return the array\n\t-- Return\
    \ the array\n\t-- Return the array\n\t-- Return the array\n\t-- Return the array\n\
    \t-- Return the array\n\t-- Return the array\n\t-- Return the array\n\t-- Return\
    \ the array\n\t-- Return the array\n\t-- Return the array\n\t-- Return the array\n\
    \t-- Return the array\n\t-- Return the array\n\t-- Return the array\n\t-- Return\
    \ the array\n\t-- Return the array\n\t-- Return the array\n\t-- Return the array\n\
    \t-- Return the array\n\t-- Return the array\n\t-- Return the array\n\t-- Return\
    \ the array\n\t-- Return the array\n\t-- Return the array\n\t-- Return the array\n\
    \t-- Return the array\n\t-- Return the array\n\t-- Return the array\n\t-- Return\
    \ the array\n\t-- Return the array\n\t-- Return the array\n\t-- Return the array\n\
    \t-- Return the array\n\t-- Return the array\n\t-- Return the array\n\t-- Return\
    \ the array\n\t-- Return the array\n\t-- Return the array\n\t-- Return the array\n\
    \t-- Return the array\n\t-- Return the array\n\t-- Return the array\n\t-- Return\
    \ the array\n\t-- Return the array\n\t-- Return the array\n\t-- Return the array\n\
    \t-- Return the array\n\t-- Return the array\n\t-- Return the array\n\t-- Return\
    \ the array\n\t-- Return the array\n\t-- Return the array\n\t-- Return the array\n\
    \t-- Return the array\n\t-- ", "  return ...\nend", "    local words = { }\n \
    \   for word in s:gmatch('([^,]+)') do\n        table.insert(words, word)\n  \
    \  end\n    return words\nend", "\t-- Return the array of words\nend", "    local\
    \ words = {}\n    local s = string.gsub(s, \"[^a-zA-Z]+\", \"\")\n    for i=1,\
    \ #s do\n        table.insert(words, string.sub(s, i, i + 1))\n    end\n    return\
    \ words\nend", "  -- Your code goes here!\n  return words -- You will have to\
    \ return the words array.\nend", "  return ...\nend", "\t-- Return the string\
    \ as a list of words\n\t-- separated with commas.\n\treturn s\n\t\t-- Split the\
    \ string into words, and return as an array\n\t\t-- of the words.\n\t\t:gsub(\"\
    [^a-zA-Z ]+\", \",\")\n\t\t-- Replace all non-alphanumeric and non-space characters.\n\
    \t\t:gsub(\",+\", \" \")\n\t\t-- Trim off all extra spaces.\n\t\t:trim()\n\t\t\
    -- Split the resulting list into an array of words.\n\t\t:split(\", \");\nend",
  "  -- your code here\nend", "    local words = { }\n    for word in s:gmatch(\"\
    [^,]+\") do\n        table.insert(words, word)\n    end\n    return words\nend",
  '    local words = {}', "\t-- Grab the string and convert to an array\n\tlocal a\
    \ = s:gmatch(\"[^ ]+\")\n\t-- Convert array into words and return it\n\treturn\
    \ a\nend", "\t-- Return an array of strings from s\n\t-- s is a string of words\
    \ separated by commas or spaces\n\t-- e.g. s = \"foo, bar\"\n\t-- return an array\
    \  { \"foo\", \"bar\" }\n\t-- You will probably want to remove leading and trailing\
    \ spaces before splitting\n\t-- \t-- e.g. trim(s)\n\t-- \t-- if s == \"    foo,\
    \ bar    \" then ...\n\t-- \t-- if s == \"    foo, bar   \" then ...\n\t-- \t\
    -- if s == \"foo, bar     \" then ...", "\t-- Write your code here.\n\treturn\
    \ nil\nend", "  -- code goes here\nend", "  -- Your code here\n  return words\n\
    end", "    local words = {}\n    for _,v in ipairs(string.gmatch(s, \"([^,]+)(,|$)\"\
    ) ) do\n        table.insert(words,v)\n    end\n    return words\nend", "  local\
    \ words = {}\n  for word in s:gmatch('([^,]+):*') do\n    table.insert(words,\
    \ word)\n  end\n  return words\nend", "    local words = \"\"\n    for word in\
    \ s:gmatch(\"[^ ]+\") do\n        words = words .. word .. \" \"\n    end\n  \
    \  return words:gsub(\"^ +\", \"\"):gsub(\"[\\n]+$\", \"\")\nend", "    -- Use\
    \ the string.split function to split a string into words.\n    return string.split(s)\n\
    end", "    local words = { }\n    local spaces = s.split(' ', 1)\n    if spaces[1]\
    \ then\n        table.insert(words, spaces[1])\n    end\n    return words\nend",
  "  -- Write your function here!\nend", end, "    local words = nil\n    for word\
    \ in s:gmatch(\"[^,]+\") do\n        words = words or {}\n        table.insert(words,\
    \ word)\n    end\n    return words\nend", "  local words = s:match('[^,]+')\n\
    \  return words\nend", "    return require('utils').split(s)\nend", "  -- Return\
    \ the words found in the string.\n  -- Split a string into words separated by\
    \ commas or spaces.\n  return {}\nend", "\ts = string.lower(s)\n\tlocal arr =\
    \ {}\n\tfor i, c in pairs(s) do\n\t\tif c ~= ',' and c ~= ' ' and c ~= '-' then\n\
    \t\t\tarr[#arr + 1] = c\n\t\tend\n\tend\n\treturn arr\nend", "  local a = {}\n\
    \  for word in string.gmatch(s, \"([^,]+) ?\") do\n    table.insert(a, word)\n\
    \  end\n  return a\nend", "    local words = {}\n    local words = string.split(s,\
    \ \" \")\n    return words\nend", "  local words = {}\n  for w in string.gmatch(s,\
    \ \"([^,]+) \") do\n    table:insert(words)\n  end\n  return words\nend", "  \
    \  local result = {}\n    for word in string.gmatch(s, \"[^,]+\") do\n       \
    \ table.insert(result, word)\n    end\n    return result\nend", "  return s.split(',')\
    \ -- Split string on commas.\nend", "    -- s is a string of words, separated\
    \ by spaces, like this:\n    -- \"Hello, World! I love Lua.\"\n    -- Write a\
    \ function that splits the given string into the words and then\n    -- returns\
    \ the array of words in the following order:\n    -- \"Hello\"\n    -- \"World!\"\
    \n    -- \"I\"\n    -- \"love\"\n    -- \"Lua\"\n    -- Your function should return\
    \ the array of words in the following order:\n    -- \"Hello\"\n    -- \"World!\"\
    \n    -- \"I\"\n    -- \"love\"\n    -- \"Lua\"\n    -- Do not split the words\
    \ by spaces, but by commas.\n    -- Do not convert the words to uppercase.\n \
    \   -- Do not count the whitespaces, only count the words and ignore the spaces\
    \ between them.\n    \n    -- Write your code here:\nend", "    local words =\
    \ {}\n    for word in string.gmatch(s, \"([^ ]+)( *)(.+)\") do\n        table.insert(words,\
    \ word)\n    end\n    return words\nend", "\t-- Your code here\nend", "  -- Write\
    \ your code here\nend", "  -- remove all whitespace and commas\n  local words\
    \ = string.gsub(s, '[,|%w]', '')\n  -- remove leading space if any\n  if string.find(words,\
    \ ' ') ~= nil then\n    words = string.gsub(words, ' %+', '')\n  end\n  -- split\n\
    \  return string.gsub(words, ' ', '\\n')\nend", "    local words = {}\n    for\
    \ w in s:gmatch(\"[^,]+\") do\n        words[#words + 1] = w\n    end\n    return\
    \ words\nend", "   assert(type(s) == 'string')\n   local words\n   local i = 1\n\
    \   repeat\n      words = words .. ',' .. s:sub(i,i)\n      i = i + 1\n   until\
    \ not s:sub(i,i):find(',')\n   words = words:sub(2)\n   words = string.gsub(words,\
    \ ',$', '')\n   words = string.gsub(words, '^,', '')\n   words = string.gsub(words,\
    \ ' *,', ',')\n   words = string.gsub(words, ' *$', '')\n   words = string.gsub(words,\
    \ ' *,$', '')\n   words = string.gsub(words, ' *$,', '')\n   words = string.gsub(words,\
    \ ' *$', '')\n   return words\nend", "    -- (This code not written in stone)\n\
    end", "  -- your code goes here\nend", "  local words = s:gsub(\"[^ ]+\", \" \"\
    )\n  words = words:gsub(\"^ \", \"\")\n  words = words:gsub(\"^ +\", \"\")\n \
    \ words = words:gsub(\"^[ ]+\", \"\")\n  words = words:gsub(\"[ ]+$\", \"\")\n\
    \  return words:split(\" \")\nend", "\t-- your code goes here\nend", "  -- Return\
    \ the string after any number of spaces.\n  return string.sub(s, 1, string.len(s)\
    \ - 1)\nend", "    -- your code here\n    return words\nend", "  return {}\nend",
  "    local words = {}\n    for w in s:gmatch(\"[^,]+\") do table.insert(words, w)\
    \ end\n    return words\nend", "    -- Write your code here\nend", "\t-- TODO\n\
    end", "    return s:split(\",\")\nend", "\t-- split_string(\" hello world  ,,\
    \ , , bar,foo , hello\")\n\t-- =>\n\t-- [ \"hello\", \"world\", \"bar\", \"foo\"\
    , \"hello\" ]\n\t-- Notice how the last two items in the string don't have commas\
    \ attached\n\t-- because you didn't specify how to split them (hint: you did it\
    \ right above).\n\t-- Given the assignment description, the return value will\
    \ be an array of words.\n\t-- The array must start with an index and end with\
    \ an index (inclusively).\n\t-- Notice that there will be no space between a word\
    \ and the comma that follows it\n\t-- (as in \"hello, world\"). Words are separated\
    \ by spaces.\n\t-- HINT: Look at the built-in string functions string.gsub and\
    \ string.sub.\nend", "\ts = string.gsub(s, \"([,])\", \" \")\n\ts = string.gsub(s,\
    \ \"([%s])\", \" \")\n\ts = string.gsub(s, \"([%s])\", \" \")\n\ts = string.gsub(s,\
    \ \"(%w+)\", \",\")\n\ts = string.gsub(s, \"([%s])\", \"\\n\")\n\ts = string.gsub(s,\
    \ \"([%s])\", \"\\n\")\n\ts = string.gsub(s, \"(\\n)\", \"\\n\")\n\ts = string.gsub(s,\
    \ \"(%s*)\", \" \")\n\treturn string.gsub(s, \"(%b)\", \" \")\nend", "  -- Your\
    \ code here\nend", "  s = s:gsub(\",\", \" \")\n  return s:split(\" \")\nend",
  "  -- Your code here\n  return ...\nend", "    return string.split(s, \",\")\nend",
  "  return string.gsub(s,' ','') -- Remove spaces\n           .. string.gsub(s,',','')\
    \ -- Remove commas\n           .. string.gsub(s,['.'],'') -- Remove periods\n\
    \           .. '\\012' -- Add newline\n           .. string.gsub(s,' ','\\012')\
    \ -- Add newline\n           .. string.gsub(s,',','\\012') -- Add newline\n  \
    \         .. string.gsub(s,['.'],'\\012') -- Add newline\nend", "    local words\
    \ = terralib.newlist()\n    for word in s:gmatch(\"[^,]+\") do\n        words:insert(word)\n\
    \    end\n    return words\nend", "    return string.gmatch(s, '[^,]+')\nend",
  "  return string.split(s)\nend", "  -- your code here\n  -- return array of strings\n\
    end", "    local words = string.split(s)\nend", "   local words = string.Explode(\"\
    \ \", s)\n   if #words < 1 then return nil end\n   return words\nend", "\t-- your\
    \ code goes here\nend", "   -- Write your code below!\nend", "\t-- Write your\
    \ code here\nend", "    assert(type(s) == 'string')", "   -- Your code here\n\
    end", "  local w = {}\n  for w in s:gmatch(\"[^,]+\") do\n    table.insert(w,\
    \ w)\n  end\n  return w\nend", "\t-- Convert s into a string.\n\ts = string.format(\"\
    %v\", s)\n\t-- Split s into individual words.\n\treturn s:gsub(\",\",\" \"):split(\"\
    \ \")\nend", "  return s.Words(\",\")\nend", "  -- your code goes here\nend",
  "    -- You need to write code here\nend", "   -- Write your code here\n   return\
    \ words\nend", "\t-- Write your code here.\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
