language: lua
name: HumanEval_104_unique_digits
results:
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  local\
    \ ret = {}\n  local index = 1\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpjh1dxg0j.lua:18: ''end'' expected (to close ''function'' at
    line 5) near <eof>

    '
  stdout: ''
  timestamp: 1659823677
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local t = {}\n    for i=1,#x do\n        local y = x[i]\n        while y > 0\
    \ do\n            t[y] = true\n            y = y/10\n        end\n    end\n  \
    \  local ret = {}\n    for i = 1,#t do\n        if t[i] then table.insert(ret,\
    \ i) end\n    end\n    return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp32l8ml7.lua:24:\
    \ expected: {1, 15, 33}\nactual: {1}\nstack traceback:\n\t/tmp/tmpp32l8ml7.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823677
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  --\
    \ Write your code here.\n  return nil\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps8ivro3b.lua:13:\
    \ expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmps8ivro3b.lua:13:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823677
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local t = {}\n    for i = 1, #x do\n        if x[i] > 0 then\n            local\
    \ digit = x[i] % 10\n            if digit ~= 0 then\n                table.insert(t,\
    \ digit)\n            end\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo7sljpg9.lua:21:\
    \ expected: {1, 15, 33}\nactual: {5, 3, 2, 1}\nstack traceback:\n\t/tmp/tmpo7sljpg9.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823677
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local function is_odd(x)\n        return x % 2 ~= 0\n    end\n    \n    local\
    \ t = {}\n    local i = 1\n    local j = #x\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpbiqetvgn.lua:23: ''end'' expected (to close ''function'' at
    line 5) near <eof>

    '
  stdout: ''
  timestamp: 1659823677
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  local\
    \ result = {}\n  for i = 1, #x do \n    if x[i] % 2 == 0 then\n      result[#result+1]\
    \ = x[i]\n    end\n  end\n  table.sort(result)\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptqrz0xa2.lua:19:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmptqrz0xa2.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823677
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  local\
    \ ret = {}\n  for i = 1, #x do\n    -- Check if this integer has any even digit.\n\
    \    -- If yes, save it in ret list. \n    if x:sub(i,i) ~= '0' then\n      table.insert(ret,x:sub(i,i))\n\
    \    end\n  end\n  table.sort(ret)\n  return ret\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9oyadp5g.lua:10:\
    \ attempt to call a nil value (method 'sub')\nstack traceback:\n\t/tmp/tmp9oyadp5g.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmp9oyadp5g.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823677
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ -- Code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvwo96y6g.lua:12:\
    \ expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmpvwo96y6g.lua:12:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823677
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   local\
    \ ret = {}\n   for i, v in ipairs(x) do\n      local t = math.floor(v / 10)\n\
    \      if t % 2 == 1 then\n         table.insert(ret, t)\n      end\n   end\n\
    \   return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppydmuz_p.lua:19:\
    \ expected: {1, 15, 33}\nactual: {1, 3}\nstack traceback:\n\t/tmp/tmppydmuz_p.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823677
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   local\
    \ function is_odd(x)\n      return x:sub(1,1) == '1'\n   end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp8xp8_qsa.lua:19: ''end'' expected (to close ''function'' at
    line 5) near <eof>

    '
  stdout: ''
  timestamp: 1659823677
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  local\
    \ y = {}\n  local xlen = #x\n  for i = 1, xlen do\n    if not x[i - 1] then\n\
    \      if y[i] == 0 then\n\ty[i - 1] = i\n      else\n\ty[i - 1] = y[i]\n\tx[i]\
    \ = i - 1\n\tx[x[i]] = i\n      end\n    end\n  end\n  return table.concat(y,\
    \ \"\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n\
    \    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345,\
    \ 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}),\
    \ {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpipbkk9mv.lua:25:\
    \ expected: {1, 15, 33}\nactual: \"\"\nstack traceback:\n\t/tmp/tmpipbkk9mv.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823677
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n\tassert(type(x)\
    \ == \"number\" and x > 0 and x < 100, \n\t\t\t\"Expected positive integer\")\n\
    \tlocal ud = {}\n\tfor x in pairs(x) do\n\t\tif math.floor(x) == x then\n\t\t\t\
    local d = math.floor(x)\n\t\t\tif d == d then\n\t\t\t\ttable.insert(ud, d)\n\t\
    \t\tend\n\t\tend\n\tend\n\treturn table.sort(ud)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxsssknol.lua:6:\
    \ Expected positive integer\nstack traceback:\n\t/tmp/tmpxsssknol.lua:6: in local\
    \ 'candidate'\n\t/tmp/tmpxsssknol.lua:23: in function 'test_humaneval'\n\nRan\
    \ 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823677
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  local\
    \ function f(n) \n    if n > 9 then\n      f(n/10)\n    end\n  end\n  local u\
    \ = {}\n  for i = 1, #x do\n    if x[i]~='0' and x[i]%2 ~= 0 then\n      local\
    \ k = x[i]\n      while k*10 <= i do\n        k = k*10\n      end\n      u[k]\
    \ = true\n    end\n  end\n  local z = {}\n  local k = 0\n  for i = 1, 10 do\n\
    \    if u[i] then\n      z[k] = i\n      k = k + 1\n    end\n  end\n  return z\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx63vwi7r.lua:35:\
    \ expected: {1, 15, 33}\nactual: {0=1}\nstack traceback:\n\t/tmp/tmpx63vwi7r.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823677
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local new_x = {}\n    for i=1, #x do\n        local digit_count = tonumber(x[i])\n\
    \        if digit_count == 0 then\n            new_x[i] = x[i]\n        else\n\
    \            new_x[i] = x[i]\n            for j=1, digit_count do\n          \
    \      new_x[i] = new_x[i] * 10\n            end\n        end\n    end\n    return\
    \ new_x\nend\n    \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpadfdi_lx.lua:25:\
    \ expected: {1, 15, 33}\nactual: {15000000000000000, 5831242643551551488, 0, 10}\n\
    stack traceback:\n\t/tmp/tmpadfdi_lx.lua:25: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823677
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local output = {}\n    for i = 1, #x do\n        if x[i] > 0 then\n        \
    \    local temp = {}\n            for j = 1, #output do\n                if x[i]\
    \ == output[j] or x[i] % output[j] == 0\n                then\n              \
    \      table.insert(temp, j)\n                else\n                    break\n\
    \                end\n            end\n            table.insert(output, table.maxn(temp))\n\
    \        end\n    end\n    return output\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmuoacd6i.lua:18:\
    \ attempt to call a nil value (field 'maxn')\nstack traceback:\n\t/tmp/tmpmuoacd6i.lua:18:\
    \ in local 'candidate'\n\t/tmp/tmpmuoacd6i.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823677
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local ret = {}\n    for i=1,#x do\n        if x[i] % 2 == 0 then\n         \
    \   table.insert(ret, x[i])\n        end\n    end\n    return table.sort(ret)\n\
    end\nprint(unique_digits({\"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"\
    9\", \"10\", \"11\"}))\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "\nF\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk5ld18cw.lua:19:\
    \ expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmpk5ld18cw.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823677
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   --\
    \ Check whether x is empty\n   if x == nil then\n      return nil\n   end\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpeuxoit8q.lua:20: ''end'' expected (to close ''function'' at
    line 5) near <eof>

    '
  stdout: ''
  timestamp: 1659823677
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  local\
    \ ret = {}\n  for i = 1, #x do\n    if math.mod(tonumber(x[i]), 2) ~= 0 then\n\
    \      table.insert(ret, x[i])\n    end\n  end\n  return ret\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpiw5bq5_9.lua:8:\
    \ attempt to call a nil value (field 'mod')\nstack traceback:\n\t/tmp/tmpiw5bq5_9.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpiw5bq5_9.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823677
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  local\
    \ result = {}\n  for i = 1, #x do\n    if x[i] % 2 == 0 then\n      table.insert(result,\
    \ x[i])\n    end\n  end\n  table.sort(result)\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpas01jwm5.lua:19:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpas01jwm5.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823677
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  --\
    \ The first element of returned list should be 'x' \n  -- in increasing order\
    \ \n  -- The next elements are all elements that hasn't any \n  -- even digit\
    \ in increasing order.\n  local result = {}\n  local digit_sum = 0\n  for i =\
    \ 1, #x do\n    local digit = x[i]\n    -- Check whether 'digit' has any even\
    \ digit.\n    -- If it has any even digit, ignore it \n    -- If it hasn't any\
    \ even digit, add it to result list \n    digit_sum = digit_sum + digit\n    --\
    \ If 'x' has any odd digit, \n    -- ignore it, otherwise, add it to result list.\n\
    \    if digit_sum and digit_sum % 2 == 1 then break end\n    -- Add the digit\
    \ to result list.\n    table.insert(result, digit)\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxpp1c1wa.lua:30:\
    \ expected: {1, 15, 33}\nactual: {}\nstack traceback:\n\t/tmp/tmpxpp1c1wa.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823677
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  local\
    \ ret = {}\n  for i = 1, #x do\n    if not is_divisible(x[i],2) then\n      table.insert(ret,x[i])\n\
    \    end\n  end\n  return ret\nend\nprint(unique_digits({10, 20, 10, 20}))\n</cell>\n\
    <cell>\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n\
    \    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345,\
    \ 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}),\
    \ {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp__lm4pl8.lua:15: unexpected symbol near ''<''

    '
  stdout: ''
  timestamp: 1659823677
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  local\
    \ a = {}\n  for i = 1, #x do -- iterate from 1st to last element\n    local s\
    \ = x[i] -- current element\n    for j = 2, #a do -- iterate from 2nd to last\
    \ element\n      if s % 10 == a[j] then -- if already existing number, skip it\n\
    \        a[j] = nil\n        break\n      end\n    end\n    if a[1] == nil then\
    \ -- if 1st element doesn't exist, add it\n      a[1] = s\n      break\n    end\n\
    \  end\n  -- sort and return it\n  return table.sort(a)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4wte94pj.lua:27:\
    \ expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmp4wte94pj.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823677
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  local\
    \ function is_even(v)\n    return v ~= 0 and v % 2 == 0\n  end\n  local function\
    \ unique_digits_aux(v)\n    if v == 0 then\n      return\n    end\n    if is_even(v)\
    \ then\n      unique_digits_aux(v / 2)\n    end\n    unique_digits_aux(v * 10\
    \ + v % 2)\n  end\n  unique_digits_aux(x)\n  return unique_digits\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppihwxtxx.lua:7:\
    \ attempt to perform arithmetic on a table value (local 'v')\nstack traceback:\n\
    \t/tmp/tmppihwxtxx.lua:7: in upvalue 'is_even'\n\t/tmp/tmppihwxtxx.lua:13: in\
    \ local 'unique_digits_aux'\n\t/tmp/tmppihwxtxx.lua:18: in local 'candidate'\n\
    \t/tmp/tmppihwxtxx.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  timestamp: 1659823677
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  local\
    \ i = 1\n  local out = { }\n  while i <= #x do\n    local digit = x[i]\n    if\
    \ digit:sub(1,1) ~= '0' then \n      if out ~= nil then \n        out[#out + 1]\
    \ = x[i]\n      end\n    end\n    i = i + 1\n  end\n  if out ~= nil then\n   \
    \ out[#out + 1] = x[i]\n  end\n  return out\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmf2p992i.lua:10:\
    \ attempt to index a number value (local 'digit')\nstack traceback:\n\t/tmp/tmpmf2p992i.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpmf2p992i.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823677
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ assert(is_sorted(x), \"argument is not sorted\")\n    local function is_even(i)\n\
    \        return i ~= 0 and math.mod(i, 2) == 0\n    end\n    local function is_unique_digits(i)\n\
    \        -- check whether i is unique digit.\n        for j = 1, #i do\n     \
    \       if is_even(i[j]) then\n                return false\n            end\n\
    \        end\n        return true\n    end\n    local function unique_digits_2(x)\n\
    \        assert(is_sorted(x), \"argument is not sorted\")\n        local function\
    \ is_unique_digits(i)\n            -- check whether i is unique digit.\n     \
    \       for j = 1, #i do\n                if math.mod(i[j], 2) == 0 then\n   \
    \                 return false\n                end\n            end\n       \
    \     return true\n        end\n        -- create result list.\n        local\
    \ results = {}\n        for i = 1, #x do\n            if is_unique_digits(x[i])\
    \ then\n                results[#results + 1] = x[i]\n            end\n      \
    \  end\n        return results\n    end\n    -- call unique_digits_2.\n    return\
    \ unique_digits_2(x)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6kvhbswy.lua:6:\
    \ attempt to call a nil value (global 'is_sorted')\nstack traceback:\n\t/tmp/tmp6kvhbswy.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmp6kvhbswy.lua:46: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823677
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ -- Base case\n    if #x == 0 then \n        -- Return an empty list \n     \
    \   return nil\n    end \n    \n    -- Sort the list\n    local sorted_list =\
    \ x\n    for idx = 2, #x do\n        table.insert(sorted_list, x[idx])\n    end\
    \ \n    table.sort(sorted_list)\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpgj6uc5pc.lua:28: ''end'' expected (to close ''function'' at
    line 5) near <eof>

    '
  stdout: ''
  timestamp: 1659823677
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  local\
    \ a = {}\n  for i = 1, #x do\n    if x[i] % 2 == 0 then\n      table.insert(a,\
    \ x[i])\n    end\n  end\n  return a\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphtksfbic.lua:18:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmphtksfbic.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823677
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local ret = {}\n    for i=1,#x do\n        if x[i] % 2 == 0 then\n         \
    \   table.insert(ret, x[i])\n        end\n    end\n    return ret\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpupk69dyk.lua:18:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpupk69dyk.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823677
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   local\
    \ output = {}\n   for _,v in ipairs(x) do output[math.floor(v / 10) * 10 + math.mod(v,10)]\
    \ = true end\n   -- Sort list in increasing order.\n   return table.sort(output)\n\
    end\nprint(unique_digits({ 1, 2, 3, 9 }))\nprint(unique_digits({ 4, 6, 8, 12,\
    \ 15, 19, 22, 23, 25, 30 }))\nprint(unique_digits({ 1, 2, 3, 4, 5 }))\nprint(unique_digits({\
    \ 1, 2, 3, 4, 5 }))\nprint(unique_digits({ 1, 2, 3, 9, 4, 5 }))\nprint(unique_digits({\
    \ 1, 2, 3, 9, 4, 5 }))\nprint(unique_digits({ 1, 2, 3, 4, 5, 6 }))\nprint(unique_digits({\
    \ 1, 2, 3, 4, 5, 6 }))\nprint(unique_digits({ 1, 2, 3, 4, 5, 6, 7 }))\nprint(unique_digits({\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 }))\nprint(unique_digits({ 0, 1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9 }))\nprint(unique_digits({ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 }))\nprint(unique_digits({\
    \ 0, 10, 20, 30, 40, 50, 60, 70, 80, 90 }))\nprint(unique_digits({ 0, 10, 20,\
    \ 30, 40, 50, 60, 70, 80, 90 }))\nprint(unique_digits({ 0, 10, 20, 30, 40, 50,\
    \ 60, 70, 80, 90 }))\nprint(unique_digits({ 0, 10, 20, 30, 40, 50, 60, 70, 80,\
    \ 90 }))\nprint(unique_digits({ 0, 10, 20, 30, 40, 50, 60, 70, 80, 90 }))\nprint(unique_digits({\
    \ 0, 10, 20, 30, 40, 50, 60, 70, 80, 90 }))\nprint(unique_digits({ 0, 10, 20,\
    \ 30, 40, 50, 60, 70, 80, 90 }))\nprint(unique_digits({ 0, 10, 20, 30, 40, 50,\
    \ 60, 70, 80, 90 }))\nprint(unique_digits({ 0, 10, 20, 30, 40, 50, 60, 70, 80,\
    \ 90 }))\nprint(unique_digits({ 0, 10, 20, 30, 40, 50, 60, 70, 80, 90 }))\nprint(unique_digits({\
    \ 0, 10, 20, 30, 40, 50, 60, 70, 80, 90 }))\nprint(unique_digits({ 0, 10, 20,\
    \ 30, 40, 50, 60, 70, 80, 90 }))\nprint(unique_digits({ 0, 10, 20, 30, 40, 50,\
    \ 60, 70, 80, 90 }))\nprint(unique_digits({ 0, 10, 20, 30, 40, 50, 60, 70, 80,\
    \ 90 }))\nprint(unique_digits({ 0, 10, 20, 30, 40, 50, 60, 70, 80, 90 }))\nprint(unique_digits({\
    \ 0, 10, 20, 30, 40, 50, 60, 70, 80, 90 }))\nprint(unique_digits({ 0, 10, 20,\
    \ 30, 40, 50, 60, 70, 80, 90 }))\nprint(unique_digits({ 0, 10, 20, 30, 40, 50,\
    \ 60, 70, 80, 90 }))\nprint(unique_digits({ 0, 10, 20, 30, 40, 50, 60, 70, 80,\
    \ 90 }))\nprint(unique_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp9txcm7a6.lua:43: '')'' expected (to close ''('' at line 42)
    near ''lu''

    '
  stdout: ''
  timestamp: 1659823677
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n\tassert(type(x)\
    \ == 'table' and #x > 0, 'Invalid input. Expected table')\n\tlocal a = {}\n\t\
    for i = 1,#x do\n\t\tlocal n = 1\n\t\tfor j = 1,10 do\n\t\t\tn = n*10 + (x[i]/j%1)\n\
    \t\tend\n\t\tif a[n] ~= nil then\n\t\t\ta[n] = a[i]\n\t\tend\n\tend\n\tfor i =\
    \ 1,#a do\n\t\ta[i] = a[i]%10\n\tend\n\treturn a\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr1yopji0.lua:26:\
    \ expected: {1, 15, 33}\nactual: {}\nstack traceback:\n\t/tmp/tmpr1yopji0.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823677
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  local\
    \ results = {}\n  for i = 1,#x do \n    local d = x:sub(i,i)\n    if d > 0 then\n\
    \      results[#results+1] = d\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7s5mbq1t.lua:8:\
    \ attempt to call a nil value (method 'sub')\nstack traceback:\n\t/tmp/tmp7s5mbq1t.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmp7s5mbq1t.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823677
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local digits = {}\n    for i=1,1000 do\n        if x[i] > 0 then\n         \
    \   digits[tostring(x[i])] = true\n        end\n    end\n    local results = {}\n\
    \    for i=1,1000 do\n        if digits[i] then\n            table.insert(results,\
    \ i)\n        end\n    end\n    return results\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnoiabsb_.lua:8:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpnoiabsb_.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpnoiabsb_.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823677
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local y = 0\n    local z = {}\n    local i = 0\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmppsp059ph.lua:19: ''end'' expected (to close ''function'' at
    line 5) near <eof>

    '
  stdout: ''
  timestamp: 1659823677
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n\t--\
    \ Initialize a list containing all 0\n\tlocal ans = {}\n\t\n\t-- For each x in\
    \ the given list\n\tfor i = 1, #x do\n\t\t-- Get the current x's digit\n\t\tlocal\
    \ d = math.floor(x[i]/10)\n\t\t\n\t\t-- If the current x's digit is 0, skip this\
    \ x\n\t\tif d == 0 then\n\t\t\tcontinue\n\t\tend\n\t\t\n\t\t-- If the current\
    \ x's digit is not 0, continue to the next x\n\t\tlocal is_even = 1\n\t\tif d\
    \ % 2 == 1 then\n\t\t\t-- If current x's digit is odd, then mark it as 0\n\t\t\
    \tis_even = 0\n\t\tend\n\t\t\n\t\t-- Add this x's digit to list of all 0\n\t\t\
    ans[#ans+1] = is_even\n\tend\n\t\n\t-- Return the list of all elements hasn't\
    \ any even digit\n\treturn ans\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmph_miflma.lua:17: syntax error near ''end''

    '
  stdout: ''
  timestamp: 1659823677
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  local\
    \ t = {x}\n  local ud = {}\n  \n  for i = 2, 10 do\n    table.insert(t, i)\n \
    \   table.insert(ud, 0)\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpir643rtm.lua:23: ''end'' expected (to close ''function'' at
    line 5) near <eof>

    '
  stdout: ''
  timestamp: 1659823677
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local result = {}\n    for i = 1, #x do\n        if x[i] % 2 == 0 then\n   \
    \         result[#result + 1] = x[i]\n        end\n    end\n    return table.sort(result)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe36bdile.lua:18:\
    \ expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmpe36bdile.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823677
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  local\
    \ result = {}\n  for i = 1, #x do\n    if x[i] % 2 == 0 then\n      result[#result\
    \ + 1] = x[i]\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf8j5jjdv.lua:18:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpf8j5jjdv.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823677
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local output = {}\n    for i=1,x:len() do\n        if x[i]%2 ~= 0 then\n   \
    \         table.insert(output, x[i])\n        end\n    end\n    return output\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplujgdqvf.lua:7:\
    \ attempt to call a nil value (method 'len')\nstack traceback:\n\t/tmp/tmplujgdqvf.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmplujgdqvf.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823677
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  local\
    \ sorted_list = terralib.newlist()\n  local even_idx\n  for i = 1, x:len() do\n\
    \    even_idx = ((x:len() - 1) - (i%2))\n    if x:sub(i,i) == 0 then -- x is an\
    \ even number\n      -- Add x to sorted list\n      sorted_list:insert(x:sub(i,i))\n\
    \      -- Remove x from array\n      x:remove(i, i+1)\n      -- If x is even,\
    \ add its even digit to even_idx\n      even_idx = (even_idx + i%2):map(function(v)\
    \ return (v*10+v) end)\n    end\n  end\n  -- Sort list\n  sorted_list:sort(function(x,y)\
    \ return x < y end)\n  return sorted_list\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphxfch3w1.lua:6:\
    \ attempt to index a nil value (global 'terralib')\nstack traceback:\n\t/tmp/tmphxfch3w1.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmphxfch3w1.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823677
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  assert(type(x)\
    \ == 'table')\n  local n = 0\n  local results = {}\n  for i = 1,#x do\n    local\
    \ digit = x[i]\n    if digit == 0 then\n      n = n + 1\n    else\n      local\
    \ digits = math.floor(digit*10)/10\n      if digits > n then\n        results[#results+1]\
    \ = digits\n      else\n        results[#results] = digits\n      end\n    end\n\
    \  end\n  return results\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmrs1mv3l.lua:28:\
    \ expected: {1, 15, 33}\nactual: {15.0, 33.0, 1422.0, 1.0}\nstack traceback:\n\
    \t/tmp/tmpmrs1mv3l.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659823677
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  if\
    \ x == nil then\n    return nil\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmphx73o8yo.lua:19: ''end'' expected (to close ''function'' at
    line 5) near <eof>

    '
  stdout: ''
  timestamp: 1659823677
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ -- Write your solution here\nend\n</cell>\n<cell>\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmplba9slw5.lua:8: unexpected symbol near ''<''

    '
  stdout: ''
  timestamp: 1659823677
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n\tassert(type(x)\
    \ == \"table\")\n\tassert(#x > 0)\n\tlocal ret = {}\n\t-- sort x in increasing\
    \ order\n\t-- start from right to left so that each element can be processed \n\
    \t-- by only 1 iteration\n\tlocal i = 1\n\twhile i < #x do\n\t\t-- check every\
    \ element in x to see if it is even or odd\n\t\tif x[i] % 2 == 0 then\n\t\t\t\
    -- get its first digit\n\t\t\tlocal d1 = x[i] % 10\n\t\t\t-- add it to ret\n\t\
    \t\tret[d1] = ret[d1] or d1 -- or d1\n\t\t\t-- remove it from x\n\t\t\tx[i] =\
    \ x[i]/10\n\t\telse\n\t\t\t-- get its last digit\n\t\t\tlocal d1 = x[i] % 10\n\
    \t\t\t-- add it to ret\n\t\t\tret[d1] = ret[d1] or d1 -- or d1\n\t\t\t-- remove\
    \ it from x\n\t\t\tx[i] = x[i]/10\n\t\tend\n\t\ti = i + 1\n\tend\n\treturn ret\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdn2enk8v.lua:38:\
    \ expected: {1, 15, 33}\nactual: {2=2, 3=3, 5=5}\nstack traceback:\n\t/tmp/tmpdn2enk8v.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823677
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local n = 1\n    local ans = {}\n    \n    for _,v in ipairs(x) do\n       \
    \ -- Iterate all numbers except the last one in the list\n        for i=1, v do\
    \ \n            -- If current number is not even, add it to the list\n       \
    \     if n%2 == 0 then\n                ans[n] = true\n            end\n     \
    \       n = n + 1\n        end\n    end\n    \n    -- Remove false values\n  \
    \  local i = 0\n    while i < #ans do\n        if ans[i] then\n            table.insert(ans,\
    \ false)\n        end\n        i = i + 1\n    end\n    \n    return ans\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkjg5p_uv.lua:35:\
    \ expected: \n{1, 15, 33}\nactual: \n{\n    2=true,\n    4=true,\n    6=true,\n\
    \    8=true,\n    10=true,\n    12=true,\n    14=true,\n    16=true,\n    18=true,\n\
    \    20=true,\n    22=true,\n    24=true,\n    26=true,\n    28=true,\n    30=true,\n\
    \    32=true,\n    34=true,\n    36=true,\n    38=true,\n    40=true,\n    42=true,\n\
    \    44=true,\n    46=true,\n    48=true,\n    50=true,\n    52=true,\n    54=true,\n\
    \    56=true,\n    58=true,\n    60=true,\n    62=true,\n    64=true,\n    66=true,\n\
    \    68=true,\n    70=true,\n    72=true,\n    74=true,\n    76=true,\n    78=true,\n\
    \    80=true,\n    82=true,\n    84=true,\n    86=true,\n    88=true,\n    90=true,\n\
    \    92=true,\n    94=true,\n    96=true,\n    98=true,\n    100=true,\n    102=true,\n\
    \    104=true,\n    106=true,\n    108=true,\n    110=true,\n    112=true,\n \
    \   114=true,\n    116=true,\n    118=true,\n    120=true,\n    122=true,\n  \
    \  124=true,\n    126=true,\n    128=true,\n    130=true,\n    132=true,\n   \
    \ 134=true,\n    136=true,\n    138=true,\n    140=true,\n    142=true,\n    144=true,\n\
    \    146=true,\n    148=true,\n    150=true,\n    152=true,\n    154=true,\n \
    \   156=true,\n    158=true,\n    160=true,\n    162=true,\n    164=true,\n  \
    \  166=true,\n    168=true,\n    170=true,\n    172=true,\n    174=true,\n   \
    \ 176=true,\n    178=true,\n    180=true,\n    182=true,\n    184=true,\n    186=true,\n\
    \    188=true,\n    190=true,\n    192=true,\n    194=true,\n    196=true,\n \
    \   198=true,\n    200=true,\n    202=true,\n    204=true,\n    206=true,\n  \
    \  208=true,\n    210=true,\n    212=true,\n    214=true,\n    216=true,\n   \
    \ 218=true,\n    220=true,\n    222=true,\n    224=true,\n    226=true,\n    228=true,\n\
    \    230=true,\n    232=true,\n    234=true,\n    236=true,\n    238=true,\n \
    \   240=true,\n    242=true,\n    244=true,\n    246=true,\n    248=true,\n  \
    \  250=true,\n    252=true,\n    254=true,\n    256=true,\n    258=true,\n   \
    \ 260=true,\n    262=true,\n    264=true,\n    266=true,\n    268=true,\n    270=true,\n\
    \    272=true,\n    274=true,\n    276=true,\n    278=true,\n    280=true,\n \
    \   282=true,\n    284=true,\n    28"
  timestamp: 1659823679
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local result = {}\n    \n    for i,v in ipairs(x) do\n        if not math.mod(v,10)\
    \ then\n            result[#result + 1] = v\n        end\n    end\n    \n    table.sort(result)\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpudfnyjfw.lua:9:\
    \ attempt to call a nil value (field 'mod')\nstack traceback:\n\t/tmp/tmpudfnyjfw.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpudfnyjfw.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823677
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  if\
    \ #x == 0 then return nil end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp8cs3ygnb.lua:17: ''end'' expected (to close ''function'' at
    line 5) near <eof>

    '
  stdout: ''
  timestamp: 1659823677
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local output = {}\n    for i=1,#x do\n        if x[i] % 2 == 0 then\n      \
    \      output[#output+1] = x[i]\n        end\n    end\n    return output\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9_a5v7fl.lua:18:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmp9_a5v7fl.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823677
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local ret = {}\n    for i = 1,#x do\n        if x[i]%2 == 0 then\n         \
    \   table.insert(ret, x[i])\n        end\n    end\n    return table.sort(ret)\n\
    end\nprint(unique_digits(num))\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: "lua: /tmp/tmpyvq16qkx.lua:7: attempt to get length of a nil value (local\
    \ 'x')\nstack traceback:\n\t/tmp/tmpyvq16qkx.lua:7: in local 'unique_digits'\n\
    \t/tmp/tmpyvq16qkx.lua:14: in main chunk\n\t[C]: in ?\n"
  stdout: ''
  timestamp: 1659823677
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  local\
    \ sorted_list = {}\n  for i = 1,#x do\n    local digit_count = countDigit(x[i])\n\
    \    sorted_list[digit_count] = x[i]\n  end\n  return sorted_list\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprq8cxmg7.lua:8:\
    \ attempt to call a nil value (global 'countDigit')\nstack traceback:\n\t/tmp/tmprq8cxmg7.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmprq8cxmg7.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823677
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  local\
    \ ret = {}\n  local last_digit_index = 1\n  for i=1,#x do\n    if x[i] > last_digit_index\
    \ then\n      table.insert(ret, x[i])\n      last_digit_index = last_digit_index\
    \ + 1\n    end\n  end\n  return ret\nend\nassert(unique_digits({1,2,3,4}) == {1,2,3,4})\n\
    assert(unique_digits({1,3,2,4}) == {1,2,3,4})\nassert(unique_digits({1,2,4,3})\
    \ == {1,2,4})\nassert(unique_digits({1,3,5,2}) == {1,3,5,2})\nassert(unique_digits({1,3,5,2,4})\
    \ == {1,3,5,2})\nassert(unique_digits({1,3,5,2,4,6}) == {1,3,5,2,4})\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: "lua: /tmp/tmp1of4qsuw.lua:16: assertion failed!\nstack traceback:\n\t[C]:\
    \ in function 'assert'\n\t/tmp/tmp1of4qsuw.lua:16: in main chunk\n\t[C]: in ?\n"
  stdout: ''
  timestamp: 1659823678
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n\tassert(\
    \ x ~= nil, 'Input cannot be nil.')\n\tassert( type(x) == 'table', 'Input should\
    \ be table.')\n\tlocal unique_vals = {}\n\tfor i = 1, #x do\n\t\tlocal digit =\
    \ x[i]\n\t\tlocal unique_digit = digit\n\t\tif unique_val ~= nil then\n\t\t\t\
    for i = 1, #unique_vals do\n\t\t\t\tlocal unique_digit2 = unique_vals[i]\n\t\t\
    \t\tif unique_digit == unique_digit2 then\n\t\t\t\t\tunique_digit = digit + 1\n\
    \t\t\t\tend\n\t\t\tend\n\t\tend\n\t\tunique_vals[#unique_vals + 1] = unique_digit\n\
    \tend\n\treturn unique_vals\nend\nprint(unique_digits({'9','8','5','4','7','3','5','6','9','8','5'}))\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "table: 0x5652656e0d10\nF\nFailed tests:\n-------------\n1) test_humaneval\n\
    /tmp/tmp3r7s0pby.lua:29: expected: {1, 15, 33}\nactual: {15, 33, 1422, 1}\nstack\
    \ traceback:\n\t/tmp/tmp3r7s0pby.lua:29: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823678
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ assert(x > 0)\n    assert(type(x) == 'table')\n    assert(x:len() > 0)\n   \
    \ local z = {}\n    for i = 1,x:len() do\n        local digit = x[i]\n       \
    \ if digit ~= 0 then\n            for j = 1,digit do\n                table.insert(z,\
    \ 0)\n            end\n        end\n    end\n    return z\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7ut72luh.lua:6:\
    \ attempt to compare number with table\nstack traceback:\n\t/tmp/tmp7ut72luh.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmp7ut72luh.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823677
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  --\
    \ Your code goes here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv627vut0.lua:12:\
    \ expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmpv627vut0.lua:12:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823678
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  local\
    \ out = {}\n  local j = 1\n  for i = 1, #x do\n    if math.floor(x[i]) ~= x[i]\
    \ then \n      out[j] = x[i]\n      j = j + 1\n    end\n  end\n  return out\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk7cj91su.lua:20:\
    \ expected: {1, 15, 33}\nactual: {}\nstack traceback:\n\t/tmp/tmpk7cj91su.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823678
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   if\
    \ x == nil then return nil end\n   local ret = {}\n   for i=1, #x do\n      local\
    \ digit = x[i]\n      if digit ~= 0 and digit % 2 == 0 then\n         if digit\
    \ in ret then\n            -- Duplicate\n         else\n            table.insert(ret,\
    \ digit)\n         end\n      end\n   end\n   return ret\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmperb0vlpv.lua:11: ''then'' expected near ''in''

    '
  stdout: ''
  timestamp: 1659823678
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   local\
    \ ret = {}\n   local k = 0\n   for i = 1, #x do\n      local v = x[i]\n      if\
    \ v ~= 0 and v ~= 1 then\n         if k ~= 0 then\n            table.insert(ret,\
    \ k)\n            k = k - 1\n         end\n      end\n      k = k + 1\n   end\n\
    \   if k ~= 0 then\n      table.insert(ret, k)\n   end\n   return ret\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt2sfxoeu.lua:27:\
    \ expected: {1, 15, 33}\nactual: {1, 1, 2}\nstack traceback:\n\t/tmp/tmpt2sfxoeu.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823678
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  local\
    \ ans = {}\n  \n  -- O(|x|) time and space\n  local function helper(x, i, num)\n\
    \    if i > #x then\n      table.insert(ans, num)\n      return\n    end\n   \
    \ \n    if x[i] == 0 then\n      helper(x, i + 1, 1)\n    elseif x[i] % 2 == 0\
    \ then\n      helper(x, i + 1, x[i] / 2)\n    end\n  end\n  \n  helper(x, 1, 0)\
    \ -- call it twice.\n  return ans\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnpb8zvs7.lua:29:\
    \ expected: {1, 15, 33}\nactual: {}\nstack traceback:\n\t/tmp/tmpnpb8zvs7.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823678
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  local\
    \ i = 1\n  local out = {}\n  while i <= #x do\n    if (x[i] % 2 == 0) then\n \
    \     table.insert(out, x[i])\n    end\n    i = i + 1\n  end\n  table.sort(out)\n\
    \  return out\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzntc55__.lua:21:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpzntc55__.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823678
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  --\
    \ base case\n  if x == nil then return nil end\n  if x[1] == nil then return x\n\
    \  \n  -- base case (2)\n  if x[2] ~= nil then return unique_digits(x) + [x[2]]\n\
    \  \n  local m = math.floor(x[1]/10)\n  local s = x[1] - m*10\n  local a = unique_digits(x[3:]\
    \ or {})\n  \n  -- base case (3)\n  if a[1][m] ~= nil then return unique_digits(a[1])\
    \ + [a[1][m]] + unique_digits(s)\n  \n  -- base case (4)\n  if a[m] ~= nil then\
    \ return unique_digits(a[1]) + [m] + unique_digits(s)\n  \n  -- base case (5)\n\
    \  if a[s] ~= nil then return unique_digits(a[1]) + [m] + unique_digits(s[s])\n\
    \  \n  -- base case (6)\n  if s ~= nil then return unique_digits(a[1]) + [m] +\
    \ unique_digits(s)\n  \n  -- base case (7)\n  return unique_digits(a[m]) + [m]\
    \ + unique_digits(s)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp4m5wnjjg.lua:11: ''end'' expected (to close ''if'' at line
    8) near ''if''

    '
  stdout: ''
  timestamp: 1659823678
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  local\
    \ newlist = {}\n  for i=1,math.abs(x) do\n    if x%10 ~= 0 and x%10 ~= nil and\
    \ x%10 ~= \"\" then\n      newlist = table.concat(newlist, x%10)\n    end\n  \
    \  x = x/10\n  end\n  return newlist\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4bk1y3dp.lua:7:\
    \ bad argument #1 to 'abs' (number expected, got table)\nstack traceback:\n\t\
    /tmp/tmp4bk1y3dp.lua:7: in local 'candidate'\n\t/tmp/tmp4bk1y3dp.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823678
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local ret = {}\n    for i=1,#x do \n        if x[i]%2 == 0 then \n         \
    \   table.insert(ret, x[i]) \n        end \n    end\n    return ret\nend\nprint(unique_digits({\
    \ 2,3,4,5,6,7,8,9,2,3,5,7,1,8,2,5,2,3,5,6,7}))\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "table: 0x5627c37e54e0\nF\nFailed tests:\n-------------\n1) test_humaneval\n\
    /tmp/tmpcw1733ay.lua:19: expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\
    \t/tmp/tmpcw1733ay.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659823678
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  if\
    \ x == nil then return nil end\n  local s = ''\n  for i = 1, #x do\n    if x:sub(i,\
    \ i) == math.floor(x[i]) then\n      if #s == 0 then\n        s = x:sub(i, i)\n\
    \      else\n        s = s .. x[i]\n      end\n    end\n  end\n  return s\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcvmptmpu.lua:9:\
    \ attempt to call a nil value (method 'sub')\nstack traceback:\n\t/tmp/tmpcvmptmpu.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpcvmptmpu.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823678
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  local\
    \ a = {}\n  for i = 1, #x do\n    local j = i - 1\n    local digit = x[i]\n  \
    \  while j > 0 and x[j] ~= digit do\n      x[j+1] = x[j]\n      j = j - 1\n  \
    \  end\n    x[j+1] = digit\n  end\n  table.sort(x)\n  return x\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvpo34um1.lua:23:\
    \ expected: {1, 15, 33}\nactual: {1, 15, 33, 1422}\nstack traceback:\n\t/tmp/tmpvpo34um1.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823678
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  --\
    \ Write your code here.\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp85r53vmg.lua:12:\
    \ expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmp85r53vmg.lua:12:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823678
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   --\
    \ base case\n   if #x==0 then return nil end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp90gyj4__.lua:18: ''end'' expected (to close ''function'' at
    line 5) near <eof>

    '
  stdout: ''
  timestamp: 1659823678
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n\t--\
    \ Write your code here.\n\tlocal unique = {}\n\tfor i = 1, #x do\n\t\tlocal digit\
    \ = x[i]\n\t\tif digit == 0 then\n\t\t\tx = x:sub(1, i):reverse()\n\t\t\tlocal\
    \ ok, remove = next, x:find(0)\n\t\t\tif ok then\n\t\t\t\tx = x:sub(1, #remove)\n\
    \t\t\t\tunique = unique + remove\n\t\t\t\t-- print(unique)\n\t\t\tend\n\t\t\t\
    break\n\t\telseif digit == 1 then\n\t\t\tx = x:sub(1, i):reverse()\n\t\t\tunique\
    \ = unique + x\n\t\t\t-- print(unique)\n\t\tend\n\tend\n\treturn unique\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpigkyv4nk.lua:20:\
    \ attempt to call a nil value (method 'sub')\nstack traceback:\n\t/tmp/tmpigkyv4nk.lua:20:\
    \ in local 'candidate'\n\t/tmp/tmpigkyv4nk.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823678
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local ret = {}\n    for i=1,#x do\n        if (x:sub(i,i)%2)==0 then table.insert(ret,\
    \ x[i]) end\n    end\n    table.sort(ret)\n    return ret\nend\nprint(unique_digits({2,5,7,8,10,12}))\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: "lua: /tmp/tmpef018d6y.lua:8: attempt to call a nil value (method 'sub')\n\
    stack traceback:\n\t/tmp/tmpef018d6y.lua:8: in local 'unique_digits'\n\t/tmp/tmpef018d6y.lua:13:\
    \ in main chunk\n\t[C]: in ?\n"
  stdout: ''
  timestamp: 1659823678
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  local\
    \ function has_odd(x)\n    local i = 1\n    while true do\n      if x[i] < 0 then\
    \ break end\n      if x[i] % 2 == 1 then return false end\n      i = i + 1\n \
    \   end\n    return true\n  end\n  \n  local function has_even(x)\n    local i\
    \ = 1\n    while true do\n      if x[i] < 0 then break end\n      if x[i] % 2\
    \ == 0 then return false end\n      i = i + 1\n    end\n    return true\n  end\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp106n4xb9.lua:35: ''end'' expected (to close ''function'' at
    line 5) near <eof>

    '
  stdout: ''
  timestamp: 1659823678
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n\tlocal\
    \ unique_map = {}\n\tlocal unique_length = 1\n\tfor i = 1, #x do\n\t\tlocal current_digit\
    \ = x[i]\n\t\tlocal current_length = 1\n\t\twhile current_length > 0 and current_digit\
    \ >= 10 then\n\t\t\tcurrent_digit = current_digit / 10\n\t\t\tcurrent_length =\
    \ current_length + 1\n\t\tend\n\t\tif not unique_map[current_digit] then\n\t\t\
    \tunique_map[current_digit] = unique_length\n\t\t\tunique_length = unique_length\
    \ + 1\n\t\tend\n\tend\n\tlocal unique_digits_list = {}\n\tfor i = 1, #x do\n\t\
    \tlocal current_digit = x[i]\n\t\tlocal current_length = unique_map[current_digit]\n\
    \t\twhile current_length > 0 do\n\t\t\tcurrent_digit = current_digit / 10\n\t\t\
    \tcurrent_length = current_length - 1\n\t\t\ttable.insert(unique_digits_list,\
    \ current_digit)\n\t\tend\n\tend\n\treturn unique_digits_list\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp1en9t774.lua:11: ''do'' expected near ''then''

    '
  stdout: ''
  timestamp: 1659823678
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  local\
    \ sorted_x = table.sort(x)\n  local unique_digit = {}\n  local i = 1\n  for _,v\
    \ in ipairs(sorted_x) do\n    if v ~= 0 and v ~= v then \n      if unique_digit[i]\
    \ == nil then\n        unique_digit[i] = v\n      else\n        unique_digit[i]\
    \ = unique_digit[i] * 10 + v\n      end\n    end\n    i = i + 1\n  end\n  return\
    \ unique_digit\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: 'E

    Tests with errors:

    ------------------

    1) test_humaneval

    attempt to index a nil value

    stack traceback:


    Ran 1 tests in 0.000 seconds, 0 successes, 1 error

    '
  timestamp: 1659823678
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  local\
    \ output = {}\n  -- count number of occurances of every digit\n  for i = 1, 10\
    \ do\n    local num_occurance = x[i]\n    if num_occurance ~= 0 then\n      output[num_occurance]\
    \ = true\n    end\n  end\n  -- now remove elements that have an even number of\
    \ occurrences\n  for i = 1, #output do\n    if output[i] then\n      if output[i]\
    \ ~= true then\n\ttable.insert(output, true)\n      end\n    end\n  end\n  return\
    \ output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n\
    \    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345,\
    \ 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}),\
    \ {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpb9_7xqbb.lua:11:\
    \ table index is nil\nstack traceback:\n\t/tmp/tmpb9_7xqbb.lua:11: in local 'candidate'\n\
    \t/tmp/tmpb9_7xqbb.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  timestamp: 1659823678
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  local\
    \ sorted_list = {}\n  for i = 1, #x do\n    local d = tonumber(x[i])\n    if d\
    \ then\n      sorted_list[#sorted_list + 1] = d\n    end\n  end\n  return sorted_list\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdb3sksdg.lua:19:\
    \ expected: {1, 15, 33}\nactual: {15, 33, 1422, 1}\nstack traceback:\n\t/tmp/tmpdb3sksdg.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823678
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  local\
    \ results = {}\n  for i = 1, #x do\n    if x[i] % 2 == 0 then\n      table.insert(results,\
    \ x[i])\n    end\n  end\n  return table.sort(results)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk724agny.lua:18:\
    \ expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmpk724agny.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823678
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local sorted_x = sort(x)\n    local unique_x = {}\n    for i = 1, #sorted_x\
    \ do\n        local digit_count = {}\n        for j = 1, #x do\n            if\
    \ x[j] == sorted_x[i] then\n                digit_count[string.sub(x[j], 1, 1)]\
    \ = digit_count[string.sub(x[j], 1, 1)] + 1\n            end\n        end\n  \
    \      for j, digit in pairs(digit_count) do\n            if digit_count[digit]\
    \ == 2 then\n                table.insert(unique_x, sorted_x[i])\n           \
    \ end\n        end\n    end\n    return unique_x\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpec9_cwhs.lua:6:\
    \ attempt to call a nil value (global 'sort')\nstack traceback:\n\t/tmp/tmpec9_cwhs.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmpec9_cwhs.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823678
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  --\
    \ Write your code here\n  local result = {}\n  for i = 1, #x do\n    if x[i] %\
    \ 2 == 0 then\n      table.insert(result, x[i])\n    end\n  end\n  table.sort(result)\n\
    \  \n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcg43vviv.lua:21:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpcg43vviv.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823678
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  local\
    \ unique_digits = {}\n  for i = 1, #x do\n    if x[i]%2 ~= 0 then\n      table.insert(unique_digits,\
    \ x[i])\n    end\n  end\n  return unique_digits\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgh44zwvv.lua:18:\
    \ expected: {1, 15, 33}\nactual: {15, 33, 1}\nstack traceback:\n\t/tmp/tmpgh44zwvv.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823678
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  if\
    \ x == nil then\n    return nil\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmphx73o8yo.lua:19: ''end'' expected (to close ''function'' at
    line 5) near <eof>

    '
  stdout: ''
  timestamp: 1659823677
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local ret = {}\n    for i=1, #x do\n        -- check if x is even or odd\n \
    \       if x[i] % 2 == 0 then\n            local even = {}\n            for j=1,\
    \ #x do\n                if x[j] % 2 == 0 then\n                    table.insert(even,\
    \ x[j])\n                end\n            end\n            table.insert(ret, table.concat(even))\n\
    \        end\n    end\n    return ret\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpytyumkbs.lua:25:\
    \ expected: {1, 15, 33}\nactual: {\"1422\"}\nstack traceback:\n\t/tmp/tmpytyumkbs.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823678
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  --\
    \ Write your code here.\n  local sorted_x = table.sort(x)\n  local ans = {0}\n\
    \  for i=1,#sorted_x do\n    if sorted_x%2 == 0 then\n      table.insert(ans,sorted_x[i])\n\
    \    end\n  end\n  return ans\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpt474t6bm.lua:9:\
    \ attempt to get length of a nil value (local 'sorted_x')\nstack traceback:\n\t\
    /tmp/tmpt474t6bm.lua:9: in local 'candidate'\n\t/tmp/tmpt474t6bm.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823678
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local ret = {}\n    local num = 0\n    for _,x in ipairs(x) do\n        if math.floor(x/10)%2\
    \ ~= 0 then\n            table.insert(ret, math.floor(x/10))\n        else\n \
    \           num = math.floor(x/10)\n        end\n    end\n    if num == 0 then\n\
    \        table.insert(ret, 0)\n    end\n    return ret\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3bbxdb02.lua:24:\
    \ expected: {1, 15, 33}\nactual: {1, 3, 0}\nstack traceback:\n\t/tmp/tmp3bbxdb02.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823678
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  local\
    \ function even(x)\n    return (x > 0 and x % 2 == 0)\n  end\n  local function\
    \ odd?(x)\n    return (not even(x))\n  end\n  -- get each item and check for odd\n\
    \  local a = {}\n  for i = 1, #x do\n    local item = x[i]\n    if odd(item) then\
    \ table.insert(a, item) end\n  end\n  -- return sorted list\n  return a\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmppwrfcj5c.lua:9: ''('' expected near ''?''

    '
  stdout: ''
  timestamp: 1659823678
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   local\
    \ function is_odd(x)\n      if x%2 == 0 then return true end \n      return false\n\
    \   end\n   local function is_even(x)\n      if x%2 ~= 0 then return true end\
    \ \n      return false\n   end\n   local function rec(z)\n      if z == nil then\
    \ return end\n      if is_odd(z) then\n         if z < 10 then return z end\n\
    \      else\n         if z < 100 then\n            if z < 10 then return z + 1\
    \ end\n            if z % 10 == 1 then\n               return z + 2\n        \
    \    else\n               return z + 1\n            end\n         end\n      \
    \   if is_even(z) then\n            if z < 10 then return z + 1 end\n        \
    \    if z % 10 == 2 then\n               return z + 3\n            else\n    \
    \           return z + 2\n            end\n         end\n         return z + 1\n\
    \      end\n      return rec(z+1)\n   end\n   return rec(x)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwgqxoztq.lua:7:\
    \ attempt to perform arithmetic on a table value (local 'x')\nstack traceback:\n\
    \t/tmp/tmpwgqxoztq.lua:7: in upvalue 'is_odd'\n\t/tmp/tmpwgqxoztq.lua:16: in function\
    \ </tmp/tmpwgqxoztq.lua:14>\n\t(...tail calls...)\n\t/tmp/tmpwgqxoztq.lua:45:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659823678
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   if\
    \ x == nil then\n      return\n   end\n   local function is_even(n)\n      return\
    \ (n * 10) % 2 == 0\n   end\n   local x = table.sort(x)\n   local result = {x[1],\
    \ x[2]}\n   for i = 3, #x do\n      if is_even(x[i]) then\n         table.insert(result,\
    \ x[i])\n      end\n   end\n   return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvmmr5kzf.lua:13:\
    \ attempt to index a nil value (local 'x')\nstack traceback:\n\t/tmp/tmpvmmr5kzf.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpvmmr5kzf.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823678
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n\tlocal\
    \ l = {}\n\tlocal i = 1\n\twhile i <= #x do\n\t\tif x[i] % 2 == 0 then\n\t\t\t\
    table.insert(l, x[i])\n\t\tend\n\t\ti = i + 1\n\tend\n\treturn l\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphp1_xf5g.lua:20:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmphp1_xf5g.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823678
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  --\
    \ Base case: if the list is empty, return an empty list\n  if x == nil then return\
    \ nil end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n\
    \    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345,\
    \ 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}),\
    \ {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpw09pohhe.lua:18: ''end'' expected (to close ''function'' at
    line 5) near <eof>

    '
  stdout: ''
  timestamp: 1659823678
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  local\
    \ ret = {}\n  for i = 1, #x do\n    if x[i] % 2 == 0 then\n      table.insert(ret,\
    \ x[i])\n    end\n  end\n  table.sort(ret)\n  return ret\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptvqjf4fl.lua:19:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmptvqjf4fl.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823678
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local ret = {}\n    local i = 1\n    while i <= #x do\n        local digit =\
    \ x[i]\n        if not ret or digit:sub(1,1):lower() ~= \"0\" then\n         \
    \   table.insert(ret, digit)\n        end\n        i = i + 1\n    end\n    return\
    \ ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n\
    \    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345,\
    \ 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}),\
    \ {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgyr4q4vp.lua:10:\
    \ attempt to index a number value (local 'digit')\nstack traceback:\n\t/tmp/tmpgyr4q4vp.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpgyr4q4vp.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823678
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  local\
    \ ret = {}\n  -- First pass, remove any digit not in the first set\n  for i =\
    \ 1,#x do\n    if x[i]%2 ~= 0 then\n      table.insert(ret, x[i])\n    end\n \
    \ end\n  -- Then sort them in the increasing order\n  for i = 1,#ret do\n    table.insert(ret,\
    \ ret[i])\n  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe2qpf2_e.lua:23:\
    \ expected: {1, 15, 33}\nactual: {15, 33, 1, 15, 33, 1}\nstack traceback:\n\t\
    /tmp/tmpe2qpf2_e.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659823678
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  assert(type(x)==\"\
    table\" and #x>0 and x>0, \n         \"unique_digits takes a list as input\")\n\
    \  local new_table = {}\n  local i = 1\n  while i <= #x do\n    if x[i]%2 == 0\
    \ then\n      new_table = {new_table[x[i]], x[i]}\n    else\n      i = i + 1\n\
    \    end\n  end\n  local unique_digits = {}\n  for k,v in pairs(new_table) do\n\
    \    if k ~= v then\n      table.insert(unique_digits,v)\n    end\n  end\n  return\
    \ unique_digits\nend\nprint(unique_digits({\"765\",\"45\",\"545\",\"8787\"}))\
    \ -- returns {\"8787\",\"45\",\"545\",\"765\"}\n</cell>\n<text>\nProblem 3\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp_aqfkpei.lua:26: unexpected symbol near ''<''

    '
  stdout: ''
  timestamp: 1659823678
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local function digit(num)\n        return string.format(\"%0d\", num)\n    end\n\
    \    local function is_even_digit(num)\n        return string.find(digit(num),\
    \ \":\") ~= nil\n    end\n    return sort(filter(is_even_digit, x))\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplbpvifys.lua:12:\
    \ attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmplbpvifys.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmplbpvifys.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823678
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local ret = {}\n    for i = 1, #x do\n        local c = x[i]\n        if c %\
    \ 2 == 0 then\n            table.insert(ret, c)\n        end\n    end\n    return\
    \ ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n\
    \    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345,\
    \ 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}),\
    \ {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_nv5xb0j.lua:19:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmp_nv5xb0j.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823678
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n\tlocal\
    \ output = {}\n\tlocal i = 1\n\twhile i <= #x do\n\t\tif x[i]%2 ~= 0 then\n\t\t\
    \ttable.insert(output, x[i])\n\t\tend\n\t\ti = i + 1\n\tend\n\ttable.sort(output)\n\
    \treturn output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp19l0epc8.lua:22:\
    \ expected: {}\nactual: {323}\nstack traceback:\n\t/tmp/tmp19l0epc8.lua:22: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823678
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local result = {}\n    for i = 1, #x do\n        if x[i] % 2 == 0 then\n   \
    \         table.insert(result, x[i])\n        end\n    end\n    return table.sort(result)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv0bu4ejy.lua:18:\
    \ expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmpv0bu4ejy.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823678
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local ans = {}\n    for i=1,#x do \n        for d=2,10 do\n            if (x%d\
    \ == 0) then\n                table.insert(ans, d)\n                x=x/d\n  \
    \              break\n            end\n        end\n    end\n    return ans\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp452rd8zr.lua:9:\
    \ attempt to perform arithmetic on a table value (local 'x')\nstack traceback:\n\
    \t/tmp/tmp452rd8zr.lua:9: in local 'candidate'\n\t/tmp/tmp452rd8zr.lua:22: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823678
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   local\
    \ sorted_list = { }\n   for i = 1,#x do\n      if ((x%10) == 0) then\n       \
    \  table.insert(sorted_list, x[i])\n      end\n   end\n   return sorted_list\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4dy6sp79.lua:8:\
    \ attempt to perform arithmetic on a table value (local 'x')\nstack traceback:\n\
    \t/tmp/tmp4dy6sp79.lua:8: in local 'candidate'\n\t/tmp/tmp4dy6sp79.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823678
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n\tassert(type(x)\
    \ == \"table\")\n\tlocal results = {}\n\tfor i = 1, #x do\n\t\tlocal d = tonumber(string.format(\"\
    %0.d\", x[i]))\n\t\tif d > 0 then\n\t\t\ttable.insert(results, d)\n\t\tend\n\t\
    end\n\ttable.sort(results)\n\treturn results\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpda3keo7q.lua:21:\
    \ expected: {1, 15, 33}\nactual: {1, 15, 33, 1422}\nstack traceback:\n\t/tmp/tmpda3keo7q.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823678
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  if\
    \ x == nil then\n    return nil\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmphx73o8yo.lua:19: ''end'' expected (to close ''function'' at
    line 5) near <eof>

    '
  stdout: ''
  timestamp: 1659823677
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local y = {}\n    for i=1,#x do\n        local v = x[i]\n        if v > 0 then\n\
    \            table.insert(y, v)\n        end\n    end\n    table.sort(y) -- Sort\
    \ y\n    local ret = {}\n    for i,v in pairs(y) do\n        if v ~= 0 then\n\
    \            table.insert(ret, v)\n        end\n    end\n    return ret\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppqm2oapf.lua:26:\
    \ expected: {1, 15, 33}\nactual: {1, 15, 33, 1422}\nstack traceback:\n\t/tmp/tmppqm2oapf.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823678
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  local\
    \ ret = {}\n  \n  for i = 1, #x do\n    local y = x[i]\n    if not y then return\
    \ ret end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n\
    \    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345,\
    \ 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}),\
    \ {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpud86dy3f.lua:21: ''end'' expected (to close ''for'' at line
    8) near <eof>

    '
  stdout: ''
  timestamp: 1659823678
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   local\
    \ function is_even(i)\n      return ((i / 10) % 2) == 0\n   end\n   local function\
    \ unique_evens(n)\n      local output = {}\n      for i = 1,n do\n         if\
    \ is_even(i) then\n            table.insert(output, i)\n         end\n      end\n\
    \      return output\n   end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp29clfw32.lua:28: ''end'' expected (to close ''function'' at
    line 5) near <eof>

    '
  stdout: ''
  timestamp: 1659823678
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  local\
    \ output = {}\n  local i = 1\n  while i <= #x do\n    if x[i]%2 == 0 then\n  \
    \    table.insert(output, x[i])\n    end\n    i = i + 1\n  end\n  table.sort(output)\n\
    \  return output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu01s77zz.lua:21:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpu01s77zz.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823678
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  --\
    \ Base case\n  if #x <= 0 then\n    return {}\n  else\n    -- Recursive case\n\
    \    local digits = {}\n    for i = 1, #x do\n      -- Iterate through each digit\
    \ in number\n      for j = 1, math.ceil(math.log(x[i]) / math.log(10)) do\n  \
    \      -- Check if current number has even digits\n        if x[i] % math.pow(10,\
    \ j) % 2 == 0 then\n          -- Add it to list of digits\n          table.insert(digits,\
    \ x[i])\n          -- Remove it from current number\n          x[i] = math.floor(x[i]\
    \ / math.pow(10, j))\n        end\n      end\n    end\n    -- Return result and\
    \ sort digits\n    return unique_digits(x) or table.sort(digits)\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6ablob44.lua:16:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmp6ablob44.lua:16: in upvalue 'unique_digits'\n\
    \t/tmp/tmp6ablob44.lua:25: in upvalue 'unique_digits'\n\t/tmp/tmp6ablob44.lua:25:\
    \ in upvalue 'unique_digits'\n\t/tmp/tmp6ablob44.lua:25: in upvalue 'unique_digits'\n\
    \t/tmp/tmp6ablob44.lua:25: in upvalue 'unique_digits'\n\t/tmp/tmp6ablob44.lua:25:\
    \ in upvalue 'unique_digits'\n\t/tmp/tmp6ablob44.lua:25: in upvalue 'unique_digits'\n\
    \t/tmp/tmp6ablob44.lua:25: in upvalue 'unique_digits'\n\t/tmp/tmp6ablob44.lua:25:\
    \ in upvalue 'unique_digits'\n\t...\t(skipping 333291 levels)\n\t/tmp/tmp6ablob44.lua:25:\
    \ in local 'candidate'\n\t/tmp/tmp6ablob44.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.900 seconds, 0 successes, 1 error\n"
  timestamp: 1659823679
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local t = {}\n    local len = 0\n    for v in x:gmatch(\"%d+\") do\n       \
    \ len = (len > 0 and len or 0) + (v:len() or 0)\n    end\n    for i = 1, len do\n\
    \        t[#t + 1] = i:byte() % 10\n    end\n    t[#t + 1] = 0\n    return t\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjrboz0w3.lua:8:\
    \ attempt to call a nil value (method 'gmatch')\nstack traceback:\n\t/tmp/tmpjrboz0w3.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpjrboz0w3.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823678
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  --\
    \ write your code here.\n  -- Example:\n  if x ~= nil then\n    local a = {}\n\
    \    for i = 1, #x do\n      local s = x[i]\n      if s ~= nil then\n        local\
    \ n = math.floor(s / 10)\n        if a ~= nil and n < #a then\n          a[n]\
    \ = true\n        else\n          a = n\n        end\n      end\n    end\n   \
    \ return a\n  else\n    return nil\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkckqx12t.lua:14:\
    \ attempt to get length of a number value (local 'a')\nstack traceback:\n\t/tmp/tmpkckqx12t.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmpkckqx12t.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823678
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local i, result, length = 0, {}, #x\n    while i < length do\n        if x[i]\
    \ % 2 == 0 then\n            result[#result+1] = x[i]\n        end\n        i\
    \ = i + 1\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7xt55yiv.lua:8:\
    \ attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\
    \t/tmp/tmp7xt55yiv.lua:8: in local 'candidate'\n\t/tmp/tmp7xt55yiv.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823678
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local sorted_x = table.sort(x)\n    local unique_digits = {}\n    \n    for\
    \ i = 1, #sorted_x do\n        if sorted_x[i] % 2 == 0 then\n            table.insert(unique_digits,\
    \ sorted_x[i])\n        end\n    end\n    \n    return unique_digits\nend\nprint(unique_digits({\
    \ 1, 3, 6, 4, 12, 6, 10, 12, 8, 7, 9, 10, 12 })) -- [1, 3, 4, 6, 10, 12, 12, 8,\
    \ 9]\nprint(unique_digits({ 1, 5, 7, 5, 7, 8, 6, 8, 10, 10, 10, 10, 10 })) --\
    \ [1, 5, 7, 8]\nprint(unique_digits({ 1, 5, 7, 5, 7, 8, 6, 8, 10, 10, 10, 10,\
    \ 10, 10 })) -- [1, 5, 7, 8, 10]\nprint(unique_digits({ 1, 5, 7, 5, 7, 8, 6, 8,\
    \ 10, 10, 10, 10, 10, 10, 10 })) -- [1, 5, 7, 8, 9, 10]\nprint(unique_digits({\
    \ 1, 5, 7, 5, 7, 8, 6, 8, 10, 10, 10, 10, 10, 10, 10 })) -- [1, 5, 7, 8, 9, 10,\
    \ 10]\nprint(unique_digits({ 1, 5, 7, 5, 7, 8, 6, 8, 10, 10, 10, 10, 10, 10, 10,\
    \ 10 })) -- [1, 5, 7, 8, 9, 10, 10]\nprint(unique_digits({ 1, 5, 7, 5, 7, 8, 6,\
    \ 8, 10, 10, 10, 10, 10, 10, 10, 10 })) -- [1, 5, 7, 8, 9, 10, 10]\nprint(unique_digits({\
    \ 1, 5, 7, 5, 7, 8, 6, 8, 10, 10, 10, 10, 10, 10, 10, 10, 10 })) -- [1, 5, 7,\
    \ 8, 9, 10, 10]\nprint(unique_digits({ 1, 5, 7, 5, 7, 8, 6, 8, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10 })) -- [1, 5, 7, 8, 9, 10, 10]\nprint(unique_digits({\
    \ 1, 5, 7, 5, 7, 8, 6, 8, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10 })) --\
    \ [1, 5, 7, 8, 9, 10, 10]\nprint(unique_digits({ 1, 5, 7, 5, 7, 8, 6, 8, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10 })) -- [1, 5, 7, 8, 9, 10, 10]\nprint(unique_digits({\
    \ 1, 5, 7, 5, 7, 8, 6, 8, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10 }))\
    \ -- [1, 5, 7, 8, 9, 10, 10]\nprint(unique_digits({ 1, 5, 7, 5, 7, 8, 6, 8, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10 })) -- [1, 5, 7, 8, 9, 10,\
    \ 10]\nprint(unique_digits({ 1, 5, 7, 5, 7, 8, 6, 8, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10 })) -- [1, 5, 7, 8, 9, 10, 10]\nprint(unique_digits({\
    \ 1, 5, \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n\
    \    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345,\
    \ 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}),\
    \ {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpunxyiyqt.lua:34: ''}'' expected (to close ''{'' at line 31)
    near ''function''

    '
  stdout: ''
  timestamp: 1659823678
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  --\
    \ base case: if the list is empty, return empty list\n  if not x then\n    return\
    \ nil\n  -- base case: if the list has only one element, return it\n  elseif #x\
    \ == 1 then\n    return x\n  -- base case: if the list has even number of elements,\
    \ then it must \n  --          have at least one even element\n  elseif #x % 2\
    \ == 1 then\n    return nil\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp3b_ch3t5.lua:27: ''end'' expected (to close ''function'' at
    line 5) near <eof>

    '
  stdout: ''
  timestamp: 1659823678
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  if\
    \ x[1] == 0 then \n    return x\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp3y4r08x8.lua:19: ''end'' expected (to close ''function'' at
    line 5) near <eof>

    '
  stdout: ''
  timestamp: 1659823678
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  --\
    \ Return sorted list\n  if x ~= nil then\n    local function is_even(i)\n    \
    \  return i ~= 0 and ((i mod 2) = 0)\n    end\n    local sorted_x = sortn(x, function(i,j)\
    \ return is_even(i) end)\n    return sorted_x\n  else\n    return nil\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpo3moog8z.lua:9: '')'' expected near ''mod''

    '
  stdout: ''
  timestamp: 1659823678
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  if\
    \ x == nil then\n    return nil\n  end\n  local sorted_x = table.sort(x)\n  local\
    \ unique_digits = {}\n  local i = 1\n  while i <= #sorted_x do\n    if sorted_x[i]\
    \ == sorted_x[i+1] then\n      i = i + 1\n    else\n      unique_digits[#unique_digits+1]\
    \ = sorted_x[i]\n    end\n  end\n  return unique_digits\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2p2nmgi8.lua:12:\
    \ attempt to get length of a nil value (local 'sorted_x')\nstack traceback:\n\t\
    /tmp/tmp2p2nmgi8.lua:12: in local 'candidate'\n\t/tmp/tmp2p2nmgi8.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823678
- exit_code: -1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n\tlocal\
    \ output = {}\n\tfor i=1,#x do\n\t\tlocal digit = x[i]\n\t\tif digit == 0 then\
    \ break end\n\t\tlocal x = digit\n\t\twhile x ~= 0 do\n\t\t\tif x % 2 == 0 then\n\
    \t\t\t\tx = x / 2\n\t\t\t\toutput[#output+1] = digit\n\t\t\telse\n\t\t\t\tx =\
    \ 3 * x + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn output\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659823683
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   --\
    \ x is a list with positive integers only\n   -- Return sorted list with elements\
    \ that has no even digits\n   -- Example:\n   -- unique_digits({3, 1, 2, 3, 2})\
    \ --> {1, 2}\n   -- unique_digits({}) --> {}\n   -- unique_digits({1}) --> {1}\n\
    \   -- unique_digits({3, 1}) --> {}\n   -- unique_digits({1}) --> {1}\n   -- unique_digits({3,\
    \ 2}) --> {}\n   -- unique_digits({3, 4, 5}) --> {3, 4, 5}\n   -- unique_digits({3,\
    \ 4}) --> {}\n   -- unique_digits({1, 3, 4}) --> {}\n   -- unique_digits({1, 2,\
    \ 2}) --> {}\n   -- unique_digits({2, 1}) --> {}\n   -- unique_digits({2, 1, 3})\
    \ --> {}\n   local out_list = setmetatable({}, { __mode=\"k\" }) -- Use a setmetatable\n\
    \   \n   for k,v in ipairs(x) do\n      -- If current element is even and exist\
    \ in out list then discard it\n      if v % 2 == 0 and out_list[v] == nil then\n\
    \         out_list[v] = k\n      end\n   end\n   return out_list\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu75tdg84.lua:35:\
    \ expected: {1, 15, 33}\nactual: {1422=3}\nstack traceback:\n\t/tmp/tmpu75tdg84.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823678
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n\tlocal\
    \ ans = {}\n\tlocal index = 1\n\tfor x in pairs(x) do\n\t\tif x:sub(1,1) and x:sub(1,1)\
    \ == \"0\" then\n\t\t\tindex = index + 1\n\t\telse\n\t\t\tans[index] = x\n\t\t\
    \tindex = index + 1\n\t\tend\n\tend\n\treturn ans\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpngjzd01d.lua:9:\
    \ attempt to index a number value (local 'x')\nstack traceback:\n\t/tmp/tmpngjzd01d.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpngjzd01d.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823678
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   assert(type(x)\
    \ == \"table\" and x:nrows() == 1 and x:ncols() == 1)\n   assert(x:nrows() > 0\
    \ and x:ncols() > 0)\n   \n   local ans = table()\n   for i = 1, x:nrows() do\n\
    \      local digit = x[i, 1]\n      if digit > 0 then\n         local i2 = i -\
    \ 1\n         while i2 >= 1 do\n            digit = digit % 10\n            if\
    \ digit == 0 then\n               break\n            end\n            ans[digit]\
    \ = true\n            i2 = i2 - 1\n         end\n      end\n   end\n   return\
    \ ans\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n\
    \    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345,\
    \ 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}),\
    \ {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpja7znzgg.lua:11: '']'' expected near '',''

    '
  stdout: ''
  timestamp: 1659823678
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local seen = {}\n    local ret = {}\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpxr9vhn66.lua:18: ''end'' expected (to close ''function'' at
    line 5) near <eof>

    '
  stdout: ''
  timestamp: 1659823678
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   --\
    \ your code goes here\n   return nil\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpna2dp_6w.lua:13:\
    \ expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmpna2dp_6w.lua:13:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823678
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local digits = {}\n    for i=1,#x do \n        digits[x[i]] = x[i]\n    end\n\
    \    table.sort(digits, function(a,b) return a<b end)\n    local res = {}\n  \
    \  for i=1,#digits do\n        if digits[i]%2==0 then table.insert(res, digits[i])\
    \ end\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpms_1tg_b.lua:21:\
    \ expected: {1, 15, 33}\nactual: {}\nstack traceback:\n\t/tmp/tmpms_1tg_b.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823678
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n\tlocal\
    \ sorted_x = table.sort(x)\n\tlocal uniques = {}\n\tfor i = 1, #sorted_x do\n\t\
    \tlocal current = sorted_x[i]\n\t\tlocal digit_count = 1\n\t\tfor j = 1, #current\
    \ do\n\t\t\tlocal digit = tonumber(string.format(\"%d%c\", current, j))\n\t\t\t\
    if digit == 0 then\n\t\t\t\tdigit_count = digit_count - 1\n\t\t\telseif digit_count\
    \ > 0 then\n\t\t\t\tdigit_count = digit_count - 1\n\t\t\t\tbreak\n\t\t\telse\n\
    \t\t\t\tdigit_count = digit_count + 1\n\t\t\tend\n\t\tend\n\t\tif digit_count\
    \ % 2 == 1 then\n\t\t\tuniques[#uniques+1] = current\n\t\tend\n\tend\n\treturn\
    \ table.sort(uniques)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkooofdyg.lua:8:\
    \ attempt to get length of a nil value (local 'sorted_x')\nstack traceback:\n\t\
    /tmp/tmpkooofdyg.lua:8: in local 'candidate'\n\t/tmp/tmpkooofdyg.lua:32: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823678
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   --\
    \ assert(x.is_vector()) -- Return should be vector\n   local out = {}\n   for\
    \ i = 1,#x do\n      local digit = x[i]\n      for j = i,#x do\n         if digit\
    \ == x[j] then\n            table.insert(out, digit)\n            table.remove(x)\n\
    \         end\n      end\n   end\n   return out\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq_5i9jt6.lua:23:\
    \ expected: {1, 15, 33}\nactual: {15, 33}\nstack traceback:\n\t/tmp/tmpq_5i9jt6.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823678
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local res = {}\n    for i, v in pairs(x) do\n        if math.floor(v / 10) %\
    \ 2 == 0 then\n            table.insert(res, v)\n        end\n    end\n    table.sort(res)\n\
    \    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3_u0uz9n.lua:19:\
    \ expected: {1, 15, 33}\nactual: {1, 1422}\nstack traceback:\n\t/tmp/tmp3_u0uz9n.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823678
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   --\
    \ x is passed in as a list of numbers\n   -- Return list should be sorted and\
    \ return all elements that \n   -- hasn't any even digit.\n   -- Example return\
    \ list should be [2,1,3,5,7,4,6,8,9,10,11,12]\n   -- Explanation: [2,1,3,5,7,4,6,8]\
    \ because 8 is even\n   -- Explanation: [2,1,3,5,7,4,6,8,9,10,11,12] because 12\
    \ is even\n   local list = {}\n   for i = 1, #x do \n      if math.mod(x[i], 10)\
    \ == 0 then -- If any element of x is even\n         table.insert(list, x[i])\n\
    \      end\n   end\n   return list\nend\nprint(unique_digits({1,9,3,4,2,5,6,7,8,10,11,12}))\n\
    print(unique_digits({1,9,3,4,2,5,6,7,8}))\nprint(unique_digits({1,9,3,4,2,5,6,7,8,10,11,12,13,14}))\n\
    print(unique_digits({2,3,5,7,4,6,8,9,10,11,12}))\nprint(unique_digits({2,3,5,7,4,6,8,9}))\n\
    print(unique_digits({2,3,5,7,4,6,8,9,10,11,12,13}))\nprint(unique_digits({2,3,5,7,4,6,8,9,10,11,12,13,14}))\n\
    print(unique_digits({2,3,5,7,4,6,8,9,10,11,12,13,14,15}))\nprint(unique_digits({2,3,5,7,4,6,8,9,10,11,12,13,14,15,16}))\n\
    print(unique_digits({2,3,5,7,4,6,8,9,10,11,12,13,14,15,16,17,18,19,20}))\nprint(unique_digits({2,3,5,7,4,6,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22}))\n\
    print(unique_digits({2,3,5,7,4,6,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23}))\n\
    print(unique_digits({2,3,5,7,4,6,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24}))\n\
    print(unique_digits({2,3,5,7,4,6,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26}))\n\
    print(unique_digits({2,3,5,7,4,6,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29}))\n\
    print(unique_digits({2,3,5,7,4,6,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31}))\n\
    print(\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n\
    \    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345,\
    \ 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}),\
    \ {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp5w436wg1.lua:37: '')'' expected (to close ''('' at line 36)
    near ''=''

    '
  stdout: ''
  timestamp: 1659823678
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  if\
    \ x == nil then\n    return nil\n  end\n  local function is_even(x)\n    return\
    \ (not ((not x) or tostring(x) or \"0\") % 2)\n  end\n  local function compare(x,\
    \ x2)\n    local function digit_compare(x, x2)\n      local function digit_sort(x,\
    \ y)\n        return (x < y)\n      end\n      return digit_compare(x:byte(),\
    \ x2:byte())\n    end\n    return compare(tostring(x:byte()), tostring(x2:byte()))\n\
    \  end\n  return table.sort(x, is_even, compare)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsq8_yrph.lua:10:\
    \ attempt to perform arithmetic on a boolean value\nstack traceback:\n\t/tmp/tmpsq8_yrph.lua:10:\
    \ in function </tmp/tmpsq8_yrph.lua:9>\n\t[C]: in function 'table.sort'\n\t/tmp/tmpsq8_yrph.lua:21:\
    \ in local 'candidate'\n\t/tmp/tmpsq8_yrph.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823678
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   local\
    \ t = {x}\n   local out = {}\n   local last_value\n   for i = 2, 10 do\n     \
    \ if t[i] ~= 0 then\n         last_value = t[i]\n         t[i] = 0\n      else\n\
    \         if last_value != nil then\n            if t[#t + 1] == 0 then\n    \
    \           out[#out + 1] = last_value\n            else\n               out[#out\
    \ + 1] = t[#t]\n            end\n         end\n         t[i] = 0\n      end\n\
    \   end\n   return out\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmplgz2zgjo.lua:14: ''then'' expected near ''!''

    '
  stdout: ''
  timestamp: 1659823678
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  --\
    \ assert(x:len() == 1)\n  -- assert(x:len() > 0)\n  -- assert(x:len() <= 20)\n\
    \  local ret = x\n  local cnt = 0\n  for i,v in ipairs(x) do\n    cnt = cnt +\
    \ 1\n    assert(cnt <= 20 )\n    if ret[cnt] == v then\n      -- If ret is already\
    \ sorted, don't do anything\n      return ret\n    end\n    ret[cnt] = v\n  end\n\
    \  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz099u38y.lua:26:\
    \ expected: {1, 15, 33}\nactual: {15, 33, 1422, 1}\nstack traceback:\n\t/tmp/tmpz099u38y.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823678
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  --\
    \ The first element in the list will always be a number.\n  if x[1] then\n   \
    \ local digits = {}\n    -- The next element in the list will be a string.\n \
    \   -- Iterate over each character in the string and add them to the\n    -- digits\
    \ table if they are even digits.\n    for i = 2, #x[1] do\n      local char =\
    \ string.sub(x[1], i, i)\n      if not (char:sub(1,1) == \"0\" and char:sub(1,1)\
    \ == \"0\") then\n        table.insert(digits, char)\n      end\n    end\n   \
    \ -- Return the sorted list.\n    return table.sort(digits)\n  end\n  return nil\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmph4bqp143.lua:12:\
    \ attempt to get length of a number value (field 'integer index')\nstack traceback:\n\
    \t/tmp/tmph4bqp143.lua:12: in local 'candidate'\n\t/tmp/tmph4bqp143.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823678
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  local\
    \ result = {}\n  \n  for i = 1, #x do\n    if x[i] % 2 == 0 then\n      table.insert(result,\
    \ x[i])\n    end\n  end\n  \n  return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3oar8tbg.lua:20:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmp3oar8tbg.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823678
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   local\
    \ digits = {}\n   for i = 1, #x do \n      digits[tostring(x[i])] = true\n   end\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpbdceg9ta.lua:20: ''end'' expected (to close ''function'' at
    line 5) near <eof>

    '
  stdout: ''
  timestamp: 1659823678
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  local\
    \ unique_digits = {}\n  for i=1, #x do\n    if x[i] ~= 0 and x[i] % 2 == 0 then\n\
    \      table.insert(unique_digits, x[i])\n    end\n  end\n  return unique_digits\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq2mai_p1.lua:18:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpq2mai_p1.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823678
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   local\
    \ unique_digits = {}\n   for i = 1, #x do\n      local digit = x[i]\n      if\
    \ digit == 0 then\n         return x\n      else\n         for j = 1, #unique_digits\
    \ do\n            if unique_digits[j] == 0 then\n               unique_digits[j]\
    \ = digit\n               break\n            end\n         end\n      end\n  \
    \ end\n   return unique_digits\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp99netjnn.lua:26:\
    \ expected: {1, 15, 33}\nactual: {}\nstack traceback:\n\t/tmp/tmp99netjnn.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823678
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  local\
    \ newx = {}\n  for i=1,#x do\n    if x[i] > 0 then\n      newx[#newx+1] = x[i]\n\
    \    end\n  end\n  return table.sort(newx)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqd0yi6fc.lua:18:\
    \ expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmpqd0yi6fc.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823678
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local new_x = {}\n    \n    for i = 1, #x do\n        local val = x[i]\n   \
    \     if val < 10 then -- Make sure that all elements in x are in [0, 9).\n  \
    \          new_x[i] = val\n        end\n    end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpqqz5m2y9.lua:24: ''end'' expected (to close ''function'' at
    line 5) near <eof>

    '
  stdout: ''
  timestamp: 1659823678
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ if x==nil or #x==0 then\n        return nil\n    end\n    local list = {}\n\
    \    for i=1,#x do\n        if x[i]%2==0 then\n            list[i]=1\n       \
    \ end\n    end\n    list = {}\n    for i=1,#list do\n        list[i]=list[i]\n\
    \    end\n    return list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpou_wz0cf.lua:25:\
    \ expected: {1, 15, 33}\nactual: {}\nstack traceback:\n\t/tmp/tmpou_wz0cf.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823678
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n\tlocal\
    \ i, j, k -- iterator variables\n\tlocal n -- length of x\n\tlocal unique -- temporary\
    \ result array\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n\
    \    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345,\
    \ 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}),\
    \ {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpifo_f_zj.lua:19: ''end'' expected (to close ''function'' at
    line 5) near <eof>

    '
  stdout: ''
  timestamp: 1659823678
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local results = {}\n    for i=1,#x do\n        if x[i] % 2 == 0 then\n     \
    \       table.insert(results, x[i])\n        end\n    end\n    table.sort(results)\n\
    \    return results\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7rcdw1m6.lua:19:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmp7rcdw1m6.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823678
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   --\
    \ x: an list of positive integers\n   local res = {}\n   local i = 1\n   while\
    \ i <= #x do\n      local d = tonumber(x[i])\n      if d ~= 0 then\n         local\
    \ new_d = tonumber(x[i])\n         -- add a new element if not present yet\n \
    \        if new_d ~= 0 then\n            if new_d == d then\n               --\
    \ skip duplicates\n               i = i + 1\n               continue\n       \
    \     else\n               -- add new element to the list\n               table.insert(res,\
    \ new_d)\n               i = i + 1\n            end\n         end\n      end\n\
    \      i = i + 1\n   end\n   return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpb27qm340.lua:19: syntax error near ''else''

    '
  stdout: ''
  timestamp: 1659823678
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  assert(#x\
    \ > 0, \"List is empty.\")\n  if #x == 0 then\n    return {}\n  end\n  \n  local\
    \ result = {}\n  local i = 1\n  local last = x[i]\n  \n  for i = 1, #x do\n  \
    \  if last ~= x[i] then\n      local temp = {}\n      temp.digit = last\n    \
    \  temp.idx = i\n      temp.next = result\n      result = temp\n      last = x[i]\n\
    \    end\n  end\n  \n  table.sort(result, function(a, b) \n    if a.digit == b.digit\
    \ then\n      return (a.idx < b.idx)\n    end\n    \n    return (a.digit > b.digit)\n\
    \  end)\n  \n  -- Return result\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp8d0t_mv.lua:41:\
    \ expected: {1, 15, 33}\nactual: {digit=1422, idx=4, next={digit=33, idx=3, next={digit=15,\
    \ idx=2, next={}}}}\nstack traceback:\n\t/tmp/tmpp8d0t_mv.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823678
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  if\
    \ #x == 0 then\n    return nil\n  else\n    if x[1] ~= 0 then -- If we have any\
    \ even digit.\n      unique_digits(x:sub(1,-1))\n    end\n    return x:filter(function(i)\n\
    \      return i ~= 0 and i ~= 1\n    end)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpakq9z1l8.lua:10:\
    \ attempt to call a nil value (method 'sub')\nstack traceback:\n\t/tmp/tmpakq9z1l8.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpakq9z1l8.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823678
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local a = {}\n    local n = 1\n    for i = 1, #x do\n        if x[i]%2 == 0\
    \ then\n            table.insert(a, x[i])\n        end\n    end\n    for i = 1,\
    \ #a do\n        table.insert(a, n)\n        n += 1\n    end\n    table.sort(a,\
    \ function (x,y) \n        return x > y\n    end)\n    return a\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpluq361wv.lua:15: syntax error near ''+''

    '
  stdout: ''
  timestamp: 1659823678
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   local\
    \ output = {}\n   for i = 1, #x do\n      if ((i % 2) == 0) then \n         output[#output+1]\
    \ = x[i]\n      end\n   end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp1_qrauom.lua:22: ''end'' expected (to close ''function'' at
    line 5) near <eof>

    '
  stdout: ''
  timestamp: 1659823678
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  local\
    \ y = {}\n  for i = 1, #x do\n    if x[i] % 2 ~= 0 then\n      y[#y+1] = x[i]\n\
    \    end\n  end\n  return y\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp118dwqqe.lua:18:\
    \ expected: {1, 15, 33}\nactual: {15, 33, 1}\nstack traceback:\n\t/tmp/tmp118dwqqe.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823678
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  local\
    \ sorted_x = {}\n  local counter = 1\n  for i = 1, #x do\n    sorted_x[i] = x[i]\n\
    \    if x[i] > 10 then\n      counter = counter * 10 + x[i] - 10\n      sorted_x[i]\
    \ = counter\n    end\n  end\n  return sorted_x\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfq4fslsa.lua:21:\
    \ expected: {1, 15, 33}\nactual: {15, 173, 3142, 1}\nstack traceback:\n\t/tmp/tmpfq4fslsa.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823678
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  --\
    \ Base Case: If the number is empty, return an empty list.\n  if x == nil then\
    \ return nil end\n  -- Base Case: If the number is just one digit, return it.\n\
    \  if x == 2 then return x end\n  -- Base Case: If the number is just one digit,\
    \ return it.\n  if x == 1 then return x end\n  -- Base Case: We must iterate through\
    \ the list to extract unique digits.\n  local ret = {}\n  for i = 1, #x do\n \
    \   -- Check current digit if x is even and add it to our return list\n    --\
    \ if not add it to our return list but also add it to our original list.\n   \
    \ if x[i] % 2 == 0 then table.insert(ret, x[i]) end\n    table.insert(ret, x[i])\n\
    \  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyht_6wqd.lua:26:\
    \ expected: {1, 15, 33}\nactual: {15, 33, 1422, 1422, 1}\nstack traceback:\n\t\
    /tmp/tmpyht_6wqd.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659823678
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  if\
    \ x ~= nil then\n    local n = 1\n    local ret = {0}\n    local z\n    for z\
    \ = 1, x:len() do\n      local m = x:len() - z\n      if m:len() < n then\n  \
    \      n = m:len() + 1\n      end\n      if m:len() == n then\n        table.insert(ret,\
    \ m:sub(1, m))\n      end\n    end\n    return ret\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptp62jyp2.lua:10:\
    \ attempt to call a nil value (method 'len')\nstack traceback:\n\t/tmp/tmptp62jyp2.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmptp62jyp2.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823678
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local n = #x\n    local i = 1\n    local r = 0\n    local t\n    local out\n\
    \    while i <= n do\n        t = x[i]\n        if t % 2 == 0 then\n         \
    \   r = r + 1\n        elseif r > 0 then\n            out = out .. t\n       \
    \     r = 0\n        end\n        i = i + 1\n    end\n    return out .. x[i]\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0mm3hlx8.lua:16:\
    \ attempt to concatenate a nil value (local 'out')\nstack traceback:\n\t/tmp/tmp0mm3hlx8.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmp0mm3hlx8.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823678
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  local\
    \ res = {}\n  local len = 1\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpxtkryxwn.lua:18: ''end'' expected (to close ''function'' at
    line 5) near <eof>

    '
  stdout: ''
  timestamp: 1659823678
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  local\
    \ t = {}\n  local i = 1\n  while i <= #x do\n    t[i] = x[i]\n    i = i + 1\n\
    \  end\n  \n  local j = 1\n  local k = 1\n  while j < i do\n    if t[j] % 2 ==\
    \ 0 then\n      k = (k + t[j]) / 2 \n    end\n    j = j + 1\n  end\n  return t\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt9qkh0ja.lua:27:\
    \ expected: {1, 15, 33}\nactual: {15, 33, 1422, 1}\nstack traceback:\n\t/tmp/tmpt9qkh0ja.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823678
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  local\
    \ result = {}\n  local i = 1\n  while i <= #x do\n    if math.floor(x[i]) ~= x[i]\
    \ then\n      table.insert(result, x[i])\n    end\n    i = i + 1\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n\
    \    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345,\
    \ 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}),\
    \ {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeuytoz9t.lua:20:\
    \ expected: {1, 15, 33}\nactual: {}\nstack traceback:\n\t/tmp/tmpeuytoz9t.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823678
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  local\
    \ v = {}\n  for i = 1,#x do\n    if tonumber(string.format('%.f', x[i])) ~= nil\
    \ then\n      table.insert(v, tonumber(string.format('%.f', x[i])))\n    end\n\
    \  end\n  return v\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvdw3c9ub.lua:18:\
    \ expected: {1, 15, 33}\nactual: {15, 33, 1422, 1}\nstack traceback:\n\t/tmp/tmpvdw3c9ub.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823678
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ if x == nil then\n        return nil\n    end\n    local t = {}\n    for i =\
    \ 1, #x do\n        if t[string.sub(x,i,i)] ~= nil then\n            break\n \
    \       end\n    end\n    \n    if i == #x then\n        return t\n    end\n \
    \   \n    if i == 1 then\n        for j = 1, #x do\n            if string.sub(x,j,j)\
    \ == string.sub(x,i-1,i) then\n                -- Remove this element\n      \
    \          t[string.sub(x,j,j)] = nil\n            end\n        end\n    else\n\
    \        for j = 1, #x do\n            if string.sub(x,j,j) == string.sub(x,i-1,i)\
    \ then\n                -- Remove this element\n                t[string.sub(x,j,j)]\
    \ = nil\n                -- Check this element\n                if t[string.sub(x,i,i)]\
    \ ~= nil then\n                    break\n                end\n            end\n\
    \        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpckfs2g2c.lua:11:\
    \ bad argument #1 to 'sub' (string expected, got table)\nstack traceback:\n\t\
    /tmp/tmpckfs2g2c.lua:11: in local 'candidate'\n\t/tmp/tmpckfs2g2c.lua:45: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823678
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   local\
    \ y = {}\n   for i = 1, #x do\n      if x[i] % 2 == 0 then y[x[i]] = true end\n\
    \   end\n   return y\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1_00gylr.lua:16:\
    \ expected: {1, 15, 33}\nactual: {1422=true}\nstack traceback:\n\t/tmp/tmp1_00gylr.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823678
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n\tlocal\
    \ output = {}\n\tlocal sorted_x = sort(x)\n\tlocal digit_index = 1\n\twhile true\
    \ do\n\t\tif sorted_x[digit_index] ~= 0 then\n\t\t\tif sorted_x[digit_index] %\
    \ 2 == 0 then\n\t\t\t\toutput[digit_index] = sorted_x[digit_index]\n\t\t\tend\n\
    \t\tend\n\t\tdigit_index = digit_index + 1\n\t\tif digit_index > #x then\n\t\t\
    \tbreak\n\t\tend\n\tend\n\treturn output\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_7v_z79d.lua:7:\
    \ attempt to call a nil value (global 'sort')\nstack traceback:\n\t/tmp/tmp_7v_z79d.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp_7v_z79d.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823678
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local function is_even(num)\n        return ((num % 2) == 0)\n    end\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpvyolxgld.lua:19: ''end'' expected (to close ''function'' at
    line 5) near <eof>

    '
  stdout: ''
  timestamp: 1659823678
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  --\
    \ Base case: empty list.\n  if x == nil then \n    return nil \n  end\n  \n  local\
    \ output = {}\n  -- Loop over all elements.\n  for i=1, #x do\n    local s = x[i]\n\
    \    -- If the element is even, skip it.\n    if s % 2 == 0 then\n      output[#output+1]\
    \ = s\n    end\n  end\n  \n  -- Sort the output.\n  table.sort(output)\n  \n \
    \ return output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuuulyxu0.lua:30:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpuuulyxu0.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823678
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local y = {}\n    for i = 1, #x do \n        if x[i] % 2 == 0 then\n       \
    \     table.insert(y, x[i])\n        end\n    end\n    return y\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzq4hk9oy.lua:18:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpzq4hk9oy.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823678
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  --\
    \ base case\n  if #x > 0 then\n    -- find unique digit\n    local unique_digit\
    \ = 0\n    for i = 1, #x do\n      if x[i] == unique_digit then\n        -- skip\
    \ the even one\n        unique_digit = x[i]\n        continue\n      else\n  \
    \      -- found unique digit\n        unique_digit = x[i]\n        break\n   \
    \   end\n    end\n    -- append to list\n    table.insert(result, unique_digit)\n\
    \    -- check rest of the array\n    unique_digits(x:sub(#x-1))\n  end\nend\n\
    </code>\n<|/ a tags=lua,sorting |>\n<| c |>\nThis assumes there aren't any negative\
    \ numbers in the list. I think I fixed it anyway by checking for negatives in\
    \ the loop. Thanks.\n<|/ c |>\n<| c |>\nYeah, it assumes there aren't any negative\
    \ numbers. I'll add the check for the negative numbers shortly.\n<|/ c |>\n<|\
    \ c |>\nYeah, I see that now. Your answer is more complete than mine. Thanks again\
    \ for the help.\n<|/ c |>\n<| c |>\nHi Jordan. I'm a total noob to Lua, and I\
    \ don't understand your code. Can you explain it to me please?\n<|/ c |>\n<| c\
    \ |>\nHi, I added comments into the code to explain what each line of code does.\
    \ Let me know if something is confusing.\n<|/ c |>\n<| a |>\nThis approach does\
    \ a better job of sorting than your existing algorithm. Also, it's considerably\
    \ simpler since it uses a single loop and doesn't make use of any temporary variables.\
    \ I've used table.sort which takes an optional key parameter, which you can get\
    \ by passing a function that returns the key you want in the order you want.\n\
    <code>\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n\
    \    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345,\
    \ 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}),\
    \ {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpvuqt6ly3.lua:15: syntax error near ''else''

    '
  stdout: ''
  timestamp: 1659823678
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   --\
    \ base case. \n   if x == nil then return nil end\n   \n   -- add first element\
    \ to result list.\n   local result = { x[1] }\n   \n   -- add all others that\
    \ contains even digit.\n   for i = 2, #x do\n      if x[i] % 2 == 0 then\n   \
    \      table.insert(result, x[i])\n      end\n   end\n   \n   -- return result\
    \ list.\n   return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi1_2i4ij.lua:26:\
    \ expected: {1, 15, 33}\nactual: {15, 1422}\nstack traceback:\n\t/tmp/tmpi1_2i4ij.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823678
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n\tlocal\
    \ ret = {}\n\tlocal n = 1\n\t\n\tfor i = 1, #x do\n\t\tlocal tmp = 1\n\t\tfor\
    \ j = 1, #x do\n\t\t\tif (x[j] % n) == 0 then\n\t\t\t\ttmp = 0\n\t\t\t\tbreak\n\
    \t\t\tend\n\t\tend\n\t\tif tmp == 1 then\n\t\t\ttable.insert(ret, x[i])\n\t\t\
    end\n\tend\n\t\n\treturn ret\nend\nprint(unique_digits({1,23,12,3,4}))\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "table: 0x564dde63abf0\nF\nFailed tests:\n-------------\n1) test_humaneval\n\
    /tmp/tmpp40pfsnx.lua:29: expected: {1, 15, 33}\nactual: {}\nstack traceback:\n\
    \t/tmp/tmpp40pfsnx.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659823678
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  --\
    \ Based on https://github.com/brunob/knuth-elements-puzzle/blob/master/knuth/digits-primes.c\n\
    \  -- but modified to return a list of sorted unique digits.\n  local function\
    \ inc(i, d, s)\n    if d ~= 0 then\n      if not s[i] then\n\ts[i] = d\n     \
    \ elseif s[i] > d then\n\ts[i] = d\n      end\n      inc(i, d % 10, s)\n    end\n\
    \  end\n  local s = {}\n  local n = 1\n  local ret = {}\n  -- Sort the input list.\n\
    \  for i = #x, 1, -1 do\n    inc(i, x[i])\n  end\n  -- Build the output list.\n\
    \  local l = #x\n  while n <= l do\n    if not s[n] then\n      ret[#ret + 1]\
    \ = n\n      n = n + 1\n    end\n  end\n  return ret\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppptufm4t.lua:10:\
    \ attempt to index a nil value (local 's')\nstack traceback:\n\t/tmp/tmppptufm4t.lua:10:\
    \ in local 'inc'\n\t/tmp/tmppptufm4t.lua:23: in local 'candidate'\n\t/tmp/tmppptufm4t.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659823678
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local n = {}\n    for i, v in pairs(x) do\n        -- Store all even digits.\n\
    \        if v ~= 0 then\n            local t = math.floor(v)\n            -- Store\
    \ the number with odd digits.\n            if t % 2 ~= 0 then\n              \
    \  table.insert(n, t)\n            end\n        end\n    end\n    -- Sort the\
    \ list from low to high.\n    table.sort(n)\n    return n\nend\nprint(unique_digits({\
    \ 10, 3, 73, 12, 4, 341, 56, 543 }))\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "table: 0x55b567683620\nF\nFailed tests:\n-------------\n1) test_humaneval\n\
    /tmp/tmpqkx8to2h.lua:27: expected: {}\nactual: {323}\nstack traceback:\n\t/tmp/tmpqkx8to2h.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823678
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  local\
    \ function is_odd(x)\n    return x % 2 ~= 0\n  end\n  local function is_even(x)\n\
    \    return x % 2 == 0\n  end\n  local function get_digit(x)\n    return x:sub(1,1)\n\
    \  end\n  local function get_digit_count(x)\n    return x:len() - 2\n  end\n \
    \ local function get_unique_digits(x)\n    local digits = {}\n    for i = 1, x:len()\
    \ - 2 do\n      local digit = get_digit(x)\n      if not digits.includes(digit)\
    \ then\n        digits[#digits + 1] = digit\n      end\n    end\n    local unique_digits\
    \ = {}\n    for i = 1, #digits do\n      if not is_even(digits[i]) then\n    \
    \    unique_digits[#unique_digits + 1] = digits[i]\n      end\n    end\n    return\
    \ unique_digits\n  end\n  return table.sort(get_unique_digits(x))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdpw46ty6.lua:20:\
    \ attempt to call a nil value (method 'len')\nstack traceback:\n\t/tmp/tmpdpw46ty6.lua:20:\
    \ in local 'get_unique_digits'\n\t/tmp/tmpdpw46ty6.lua:34: in local 'candidate'\n\
    \t/tmp/tmpdpw46ty6.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  timestamp: 1659823678
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  local\
    \ res = {}\n  for i = 1, #x do\n    local c = x[i]\n    local hasDigit = false\n\
    \    for j = 1, #c do\n      if math.floor(c[j]) ~= c[j] then\n        hasDigit\
    \ = true\n        break\n      end\n    end\n    if not hasDigit then\n      table.insert(res,\
    \ c[i])\n    end\n  end\n  return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppl43_jvf.lua:10:\
    \ attempt to get length of a number value (local 'c')\nstack traceback:\n\t/tmp/tmppl43_jvf.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmppl43_jvf.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823678
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  if\
    \ #x < 2 then return nil end\n  local result = {}\n  for i = 1, #x do\n    local\
    \ v = x[i]\n    if v < 0 then return nil end\n    local k = 1\n    while v % k\
    \ == 0 do\n      k = k*10\n    end\n    if k ~= 0 then\n      table.insert(result,\
    \ k)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppn8pbjz3.lua:25:\
    \ expected: {1, 15, 33}\nactual: {10, 10, 10, 10}\nstack traceback:\n\t/tmp/tmppn8pbjz3.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823678
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n\tlocal\
    \ sorted_list = nil\n\tfor i = 1, #x do\n\t\tif (math.floor(x[i]) == x[i]) then\n\
    \t\t\tsorted_list = sorted_list .. x[i]\n\t\telse\n\t\t\tbreak\n\t\tend\n\tend\n\
    \treturn sorted_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcanjrc12.lua:9:\
    \ attempt to concatenate a nil value (local 'sorted_list')\nstack traceback:\n\
    \t/tmp/tmpcanjrc12.lua:9: in local 'candidate'\n\t/tmp/tmpcanjrc12.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823678
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local ret = {}\n    for _, v in ipairs(x) do\n        if v ~= 0 and v ~= 1 then\n\
    \            for d = 1, 10 do\n                if v mod 10 == d then\n       \
    \             break\n                end\n            end\n            if v mod\
    \ 10 ~= d then\n                table.insert(ret, v)\n            end\n      \
    \  end\n    end\n    return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpw79uu6ib.lua:10: ''then'' expected near ''mod''

    '
  stdout: ''
  timestamp: 1659823678
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local seen = {}\n    local res = {}\n    for i = 1, #x do\n        if seen[x[i]]\
    \ then\n            -- Duplicate digit\n            table.insert(res, x[i])\n\
    \        else\n            seen[x[i]] = true\n        end\n    end\n    return\
    \ res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n\
    \    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345,\
    \ 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}),\
    \ {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt5gvam7_.lua:22:\
    \ expected: {1, 15, 33}\nactual: {}\nstack traceback:\n\t/tmp/tmpt5gvam7_.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823678
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  if\
    \ x == nil then return nil end\n  local new_x = {}\n  for i = 1, #x do\n    local\
    \ digit = x[i]\n    if digit < \"0\" then\n      new_x[i] = nil\n    else\n  \
    \    local digit_number = tonumber(digit)\n      if digit_number == nil then\n\
    \        new_x[i] = nil\n      else\n        new_x[i] = digit_number % 10\n  \
    \    end\n    end\n  end\n  return new_x\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppm5cqnw4.lua:10:\
    \ attempt to compare number with string\nstack traceback:\n\t/tmp/tmppm5cqnw4.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmppm5cqnw4.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823678
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local results = {}\n    for i=1,#x do \n        local tmp = x:sub(i,i)\n   \
    \     if tmp:sub(1,1) ~= '0' then \n            table.insert(results, tmp)\n \
    \       end\n    end\n    return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6f_r2q77.lua:8:\
    \ attempt to call a nil value (method 'sub')\nstack traceback:\n\t/tmp/tmp6f_r2q77.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmp6f_r2q77.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823678
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  local\
    \ function even(x)\n    return x % 2 ~= 0\n  end\n  local function to_sorted(x)\n\
    \    local function sort(list, value)\n      if list[1] == value then\n      \
    \  sort(list + 1, value)\n      elseif value then\n        sort(list, value)\n\
    \      else\n        table.insert(list, value)\n      end\n    end\n    sort(1,\
    \ 0)\n  end\n  local xs = {x}\n  local ret = {}\n  while #xs > 0 do\n    local\
    \ x = xs[1]\n    table.insert(ret, x)\n    local i = 1\n    while #xs > i and\
    \ xs[i] < x do\n      i = i + 1\n    end\n    xs = xs[i:i-1]\n  end\n  to_sorted(ret)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp2t1pi_a3.lua:30: function arguments expected near ''-''

    '
  stdout: ''
  timestamp: 1659823678
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  --\
    \ base case: when x has no digit\n  if x == \"0\" or x == \"1\" then return x\
    \ end\n  \n  -- base case: when x is all zero\n  if x == \"0\" then return \"\
    0\" end\n  \n  -- base case: when x is all one\n  if x == \"1\" then return \"\
    1\" end\n  \n  -- base case: when x has one digit\n  if x:sub(1,1) == \"0\" then\
    \ return unique_digits(x:sub(2)) end\n  \n  -- recursive case\n  local new_list\
    \ = \"\"\n  for i = 2, x:len() do\n    if x:sub(i,i) == \"0\" then\n      new_list\
    \ = new_list .. x:sub(i-1,i) .. \"-\"\n    end\n  end\n  return unique_digits(new_list)\n\
    end\nprint(unique_digits(\"0111001\"))\nprint(unique_digits(\"01010\"))\nprint(unique_digits(\"\
    000\"))\nprint(unique_digits(\"0000\"))\nprint(unique_digits(\"1111\"))\nprint(unique_digits(\"\
    11111\"))\nprint(unique_digits(\"101010\"))\nprint(unique_digits(\"1010\"))\n\
    print(unique_digits(\"100\"))\nprint(unique_digits(\"1\"))\nprint(unique_digits(\"\
    00\"))\nprint(unique_digits(\"11\"))\nprint(unique_digits(\"001\"))\nprint(unique_digits(\"\
    00011\"))\nprint(unique_digits(\"0011\"))\nprint(unique_digits(\"001111\"))\n\
    print(unique_digits(\"00111\"))\nprint(unique_digits(\"0011111\"))\nprint(unique_digits(\"\
    0\"))\nprint(unique_digits(\"01\"))\nprint(unique_digits(\"011\"))\nprint(unique_digits(\"\
    00111\"))\nprint(unique_digits(\"01111\"))\nprint(unique_digits(\"011111\"))\n\
    print(unique_digits(\"0\"))\nprint(unique_digits(\"000\"))\nprint(unique_digits(\"\
    0000\"))\nprint(unique_digits(\"1111\"))\nprint(unique_digits(\"11111\"))\nprint(unique_digits(\"\
    101010\"))\nprint(unique_digits(\"1010\"))\nprint(unique_digits(\"100\"))\nprint(unique_digits(\"\
    1\"))\nprint(unique_digits(\"00\"))\nprint(unique_digits(\"11\"))\nprint(unique_digits(\"\
    001\"))\nprint(unique_digits(\"00011\"))\nprint(unique_digits(\"0011\"))\nprint(unique_digits(\"\
    001111\"))\nprint(unique_digits(\"00111\"))\nprint(unique_digits(\"0011111\"))\n\
    print(unique_digits(\"0\"))\nprint(unique_digits(\"01\"))\nprint(unique_digits(\"\
    011\"))\nprint(unique_digits(\"00111\"))\nprint(unique_digits(\"01111\"))\nprint(unique_digits(\"\
    \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmplogotrxm.lua:73: unfinished string near ''"''

    '
  stdout: ''
  timestamp: 1659823678
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local result = {}\n    for i=1, #x do\n        if x[i] % 2 == 0 then\n     \
    \       table.insert(result, x[i])\n        end\n    end\n    table.sort(result)\n\
    \    return result\nend\nprint(unique_digits({7,2,8,6,4,1,5,9,3,0}))\n</cell>\n\
    <text>\nPart 4: Given a list of positive integers x. return a sorted list of all\
    \ \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpidpbxcrl.lua:16: unexpected symbol near ''<''

    '
  stdout: ''
  timestamp: 1659823678
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   if\
    \ x ~= nil then\n      if #x > 0 then\n         local lst = listx.new()\n    \
    \     local cnt = 0 \n         for i = 1, #x do \n            if x[i] % 2 ~= 0\
    \ then\n               table.insert(lst, x[i])\n               cnt = cnt + 1\n\
    \            end\n         end\n         if cnt > 0 then\n            table.sort(lst)\n\
    \            for i = #lst - 1, -1, -1 do\n               if lst[i] ~= 0 then\n\
    \                  lst = table.insert(lst, 0)\n               end\n          \
    \  end\n         end\n         return lst\n      else\n         return nil\n \
    \     end\n   else\n      return nil\n   end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_yeo69ws.lua:8:\
    \ attempt to index a nil value (global 'listx')\nstack traceback:\n\t/tmp/tmp_yeo69ws.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmp_yeo69ws.lua:36: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823678
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  --\
    \ First we need to find sum of digits.\n  local sum_digit = 0\n  for i = 1, #x\
    \ do\n    sum_digit = sum_digit + x[i]\n  end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpwmqusxg_.lua:21: ''end'' expected (to close ''function'' at
    line 5) near <eof>

    '
  stdout: ''
  timestamp: 1659823678
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local ret = {}\n    for i=1, #x do\n        local digit = x[i]:sub(1,1)\n  \
    \      if digit ~= '0' and #ret < 2 then\n            table.insert(ret, digit)\n\
    \        end\n    end\n    return ret\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpra8wmcog.lua:8:\
    \ attempt to index a number value (field '?')\nstack traceback:\n\t/tmp/tmpra8wmcog.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpra8wmcog.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823678
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   --\
    \ Write your function here\n   local i = 1\n   local list_sorted = {}\n   local\
    \ list_sorted = x:copy()\n   list_sorted:sort()\n   list_sorted:insert(list_sorted[1])\n\
    \   list_sorted:remove(list_sorted[1])\n   while i <= #list_sorted do\n      if\
    \ list_sorted[i] % 2 == 0 then\n         list_sorted:insert(list_sorted[i])\n\
    \      else\n         i = i + 1\n      end\n      list_sorted:remove(list_sorted[i])\n\
    \   end\n   return list_sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1p4l8s6d.lua:9:\
    \ attempt to call a nil value (method 'copy')\nstack traceback:\n\t/tmp/tmp1p4l8s6d.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp1p4l8s6d.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823678
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  local\
    \ function unique_digits_helper(l)\n    local digits = {}\n    local new_l = {}\n\
    \    for i=1,#l do\n      local digit = string.sub(l, i, i)\n      if digits[digit]\
    \ then\n        table.insert(new_l, digits[digit])\n      else\n        digits[digit]\
    \ = true\n        table.insert(new_l, digit)\n      end\n    end\n    return new_l\n\
    \  end\n  \n  local unique = unique_digits_helper(x)\n  table.sort(unique)\n \
    \ \n  return unique\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjz6bl2j1.lua:10:\
    \ bad argument #1 to 'sub' (string expected, got table)\nstack traceback:\n\t\
    /tmp/tmpjz6bl2j1.lua:10: in local 'unique_digits_helper'\n\t/tmp/tmpjz6bl2j1.lua:21:\
    \ in local 'candidate'\n\t/tmp/tmpjz6bl2j1.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823678
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local ret = {}\n    for i=1,#x do\n        local c = math.floor(x/10)\n    \
    \    if x ~= 0 and c ~= 0 then\n            table.insert(ret, c)\n           \
    \ x = x - c*10\n        end\n    end\n    return ret\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpaq3d0un7.lua:8:\
    \ attempt to perform arithmetic on a table value (local 'x')\nstack traceback:\n\
    \t/tmp/tmpaq3d0un7.lua:8: in local 'candidate'\n\t/tmp/tmpaq3d0un7.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823678
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  --\
    \ Write your code here!\n  return nil\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqrc2fjy4.lua:13:\
    \ expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmpqrc2fjy4.lua:13:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823678
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  if\
    \ #x > 0 then\n    local function helper(y,x)\n      if x>0 then\n        if x%10\
    \ ~= 0 then\n          helper(y+1,x-1)\n        end\n      else\n        helper(y+1,x)\n\
    \      end\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpkwql2fnt.lua:26: ''end'' expected (to close ''if'' at line
    6) near <eof>

    '
  stdout: ''
  timestamp: 1659823678
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   if\
    \ x == nil then return nil end\n   local new_x = {}\n   local i = 0\n   for i=1,\
    \ #x do\n      local y = x[i]\n      if not y%2 then new_x[#new_x+1] = y end\n\
    \   end\n   if #new_x == 0 then return x end\n   if #new_x == 1 then return {\
    \ new_x[1] } end\n   local new_x_sorted = {}\n   local i = 1\n   local flag =\
    \ false\n   for i=1, #new_x do\n      local y = new_x[i]\n      if y%2 == 0 then\n\
    \         flag = true\n         new_x_sorted[#new_x_sorted+1] = y\n      elseif\
    \ flag == true then\n         flag = false\n         new_x_sorted[#new_x_sorted+1]\
    \ = y\n      end\n   end\n   return new_x_sorted\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpu_k49ex1.lua:11:\
    \ attempt to perform arithmetic on a boolean value\nstack traceback:\n\t/tmp/tmpu_k49ex1.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpu_k49ex1.lua:34: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823678
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  local\
    \ unique = {}\n  for i = 1, #x do\n    if x[i] % 2 ~= 0 then\n      table.insert(unique,\
    \ i)\n    end\n  end\n  table.sort(unique, function(a, b) return x[a] - x[b] end)\n\
    \  return unique\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqofpqbrg.lua:19:\
    \ expected: {1, 15, 33}\nactual: {2, 4, 1}\nstack traceback:\n\t/tmp/tmpqofpqbrg.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823678
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  local\
    \ function is_even(i)\n    return i % 2 ~= 0\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpczqy5tyv.lua:19: ''end'' expected (to close ''function'' at
    line 5) near <eof>

    '
  stdout: ''
  timestamp: 1659823678
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  local\
    \ ret = {}\n  for i = 1, #x do\n    if (x[i] % 2 == 0) then\n      table.insert(ret,\
    \ x[i])\n    end\n  end\n  table.sort(ret)\n  return ret\nend\nprint(unique_digits({\"\
    17\", \"12\", \"34\", \"12\"}))\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "table: 0x557b2275dd10\nF\nFailed tests:\n-------------\n1) test_humaneval\n\
    /tmp/tmp1ewm8fr_.lua:20: expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\
    \t/tmp/tmp1ewm8fr_.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659823678
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n\tlocal\
    \ function count_digits(n)\n\t\t-- Count the number of digits in n\n\t\tlocal\
    \ function digits(n)\n\t\t\treturn math.floor(math.log(n) / math.log(10))\n\t\t\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp44zez9le.lua:21: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659823678
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ if x == nil then return nil end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpdm2hkvi3.lua:17: ''end'' expected (to close ''function'' at
    line 5) near <eof>

    '
  stdout: ''
  timestamp: 1659823678
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  --\
    \ Write your code here\n  return listx()\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpn235gq7u.lua:7:\
    \ attempt to call a nil value (global 'listx')\nstack traceback:\n\t/tmp/tmpn235gq7u.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpn235gq7u.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823678
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  --\
    \ Store the digit list into table.\n  local dict = {}\n  \n  -- Store the count\
    \ of each digit into table.\n  for i=1,#x do\n    dict[ x[i] ] = dict[ x[i] ]\
    \ or 1\n  end\n  \n  -- Sort the table.\n  table.sort(dict)\n  \n  -- Return result\
    \ list.\n  -- Note that returned list should be sorted in increasing order.\n\
    \  local results = {}\n  for i=1,#dict do\n    if dict[ i ] == 0 then\n      table.insert(results,\
    \ i)\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmzktm9_u.lua:31:\
    \ expected: {1, 15, 33}\nactual: {}\nstack traceback:\n\t/tmp/tmpmzktm9_u.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823678
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   --\
    \ Return empty list if passed list has no elements.\n   if not x then\n      return\
    \ nil\n   end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n\
    \    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345,\
    \ 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}),\
    \ {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp9n200kv9.lua:20: ''end'' expected (to close ''function'' at
    line 5) near <eof>

    '
  stdout: ''
  timestamp: 1659823678
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  --\
    \ x should be a list of positive integers\n  -- return sorted list of all elements\
    \ that hasn't any even digit\n  -- (i.e. 1, 13, 29, 34, 53, 69, 79, 89, 99, ....\
    \ )\n  \n  -- Base Case\n  if #x > 0 then\n    return unique_digits_helper(#x)\n\
    \  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n\
    \    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345,\
    \ 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}),\
    \ {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpbsdvb2vl.lua:24: ''end'' expected (to close ''function'' at
    line 5) near <eof>

    '
  stdout: ''
  timestamp: 1659823678
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   --\
    \ Write your solution here\n   local unique_digits_list = {}\n   for i = 1, #x\
    \ do\n      if x[i] % 2 == 0 then\n         if #unique_digits_list < 1 then\n\
    \            unique_digits_list = x[i]\n         elseif unique_digits_list[1]\
    \ < x[i] then\n            unique_digits_list[1] = x[i]\n         end\n      end\n\
    \   end\n   print(unique_digits_list)\n   return unique_digits_list\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "1422\nF\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_pff8jfn.lua:24:\
    \ expected: {1, 15, 33}\nactual: 1422\nstack traceback:\n\t/tmp/tmp_pff8jfn.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823678
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n\tlocal\
    \ res = {}\n\tfor i = 1,#x do\n\t\tif x[i] % 2 == 0 then \n\t\t\ttable.insert(res,\
    \ x[i])\n\t\tend\n\tend\n\treturn res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdmhwkden.lua:18:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpdmhwkden.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823678
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  if\
    \ #x <= 0 then return end\n  if x[1] > 0 then unique_digits(x[1:end]) end\n  if\
    \ x[1] == 0 then return x end\n  local t = {}\n  for i = 1, #x do\n    if x[i]\
    \ % 2 == 0 then table.insert(t, x[i]) end\n  end\n  table.sort(t)\n  return t\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpf5uim9l_.lua:7: '']'' expected near '':''

    '
  stdout: ''
  timestamp: 1659823678
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  local\
    \ n = #x\n  local result = {}\n  for i = 1, n do\n    if not x[i] % 2 then\n \
    \     result[#result + 1] = x[i]\n    end\n  end\n  return table.sort(result)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbxkcxew4.lua:9:\
    \ attempt to perform arithmetic on a boolean value\nstack traceback:\n\t/tmp/tmpbxkcxew4.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpbxkcxew4.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823678
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  --\
    \ x should be a list of positive integers\n  -- x should be sorted in increasing\
    \ order\n  -- The function should return a list of integer that hasn't any even\n\
    \  -- digit, for example: [3,2,5,6] ==> [3,5,6]\n  assert(type(x) == \"table\"\
    \ and\n           all(i.isinteger() and i.value >= 0 \n              and i.value\
    \ <= 1e9 and i.value % 2 == 0 \n              for i in x))\n  \n  local a = {}\n\
    \  local i = 1\n  local k = 1\n  while i <= #x do\n    if x[i]%2 == 0 then\n \
    \     a[k] = {x[i]}\n      i = i + 1\n    else\n      k = k + 1\n    end\n  end\n\
    \  return a\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpu84ocgam.lua:13: '')'' expected (to close ''('' at line 11)
    near ''for''

    '
  stdout: ''
  timestamp: 1659823678
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local output = {}\n    for i = 1, (#x) + 1 do\n        for j = 1, (#x) - i do\n\
    \            if x[j] % 2 == 0 then\n                output[#output + 1] = x[j]\n\
    \            end\n        end\n    end\n    table.sort(output)\n    return output\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphj1ekfoh.lua:21:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmphj1ekfoh.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823678
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local ret = {}\n    for i = 1, #x do\n        local c = math.floor(x/10)\n \
    \       if x%10 == 0 then\n            table.insert(ret, c)\n        end\n   \
    \     if c and c%2 == 0 then\n            table.insert(ret, c)\n        end\n\
    \    end\n    return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpusarc9ne.lua:8:\
    \ attempt to perform arithmetic on a table value (local 'x')\nstack traceback:\n\
    \t/tmp/tmpusarc9ne.lua:8: in local 'candidate'\n\t/tmp/tmpusarc9ne.lua:22: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823678
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  if\
    \ #x <= 0 then return nil end\n  if #x == 1 then return x end\n  local last_dig=x[1]\n\
    \  for i=2,#x do\n    if x[i]%last_dig == 0 then break end\n    last_dig = x[i]\n\
    \  end\n  \n  -- Rest of the list is sorted because we already checked odd digits.\n\
    \  local rest = unique_digits(x..last_dig)\n  return last_dig .. rest\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpeji_8us0.lua:15:\
    \ attempt to concatenate a table value (local 'x')\nstack traceback:\n\t/tmp/tmpeji_8us0.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmpeji_8us0.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823678
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local ans = {}\n    for i = 1, #x do\n        local j = i\n        while j >\
    \ 0 and x[j] % 2 == 0 do\n            j = j - 1\n        end\n        if j ~=\
    \ i then\n            table.insert(ans, x[j])\n        end\n    end\n    return\
    \ ans\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n\
    \    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345,\
    \ 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}),\
    \ {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp97i68x8m.lua:22:\
    \ expected: {1, 15, 33}\nactual: {33}\nstack traceback:\n\t/tmp/tmp97i68x8m.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823678
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  local\
    \ results = {}\n  \n  local function unique_digits_helper(x)\n    if not x then\n\
    \      return\n    end\n    \n    local digit = x\n    \n    while true do\n \
    \     if x:len() >= 2 then\n        local digit2 = x:sub(1,x:len() - 1)\n    \
    \    \n        if digit:sub(1,1) == digit2:sub(1,1) then\n          x = x:sub(2)\n\
    \        else\n          x = x:sub(1, x:len() - 1)\n        end\n      else\n\
    \        break\n      end\n    end\n    \n    table.insert(results, digit)\n \
    \   \n    unique_digits_helper(x)\n  end\n  \n  unique_digits_helper(x)\n  \n\
    \  return results\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkna0g4e6.lua:16:\
    \ attempt to call a nil value (method 'len')\nstack traceback:\n\t/tmp/tmpkna0g4e6.lua:16:\
    \ in local 'unique_digits_helper'\n\t/tmp/tmpkna0g4e6.lua:34: in local 'candidate'\n\
    \t/tmp/tmpkna0g4e6.lua:42: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  timestamp: 1659823678
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n\tlocal\
    \ ret = {}\n\tfor _,v in ipairs(x) do\n\t\tif v ~= 0 then\n\t\t\t-- if v has even\
    \ digit, ret[v] will get nil.\n\t\t\t-- so ret[v] and ret[v+1] will get the same\
    \ value.\n\t\t\tret[v] = ret[v+1] or ret[v]\n\t\tend\n\tend\n\treturn ret\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwls76b9b.lua:20:\
    \ expected: {1, 15, 33}\nactual: {}\nstack traceback:\n\t/tmp/tmpwls76b9b.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823678
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  local\
    \ result = {}\n  for i = 1, #x do\n    if math.floor(x[i]) ~= x[i] then\n    \
    \  if #result == 0 then\n        result = {x[i]}\n      else\n        if result[1]\
    \ ~= x[i] then\n          table.insert(result, x[i])\n        end\n      end\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe3u6fk5k.lua:24:\
    \ expected: {1, 15, 33}\nactual: {}\nstack traceback:\n\t/tmp/tmpe3u6fk5k.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823678
