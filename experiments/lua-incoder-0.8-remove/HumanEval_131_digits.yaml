name: HumanEval_131_digits
language: lua
prompt: "-- Given a positive integer n, return the product of the odd digits.\n--\
  \ Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1) \n-- 1\n--\
  \ >>> digits(4) \n-- 0\nlocal function digits(n)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digits\n\
  \    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54), 5)\n \
  \   lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014), 5)\n\
  \    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
  \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local s = ''\n  local n1 = math.abs(n)\n  for i = 1, n1 do\n    if\
    \ n % 2 > 0 then\n      s = s .. '1'\n    end\n    n = math.floor(n/2) \n  end\n\
    \  if s == '0' then\n    return 0\n  else\n    return 1\n  end\nend", "  if n\
    \ == 0 then\n    return 0\n  elseif n < 0 then\n    error(\"Negative integers\
    \ only\")\n  else\n    local result = 0\n    local digit = 1\n    local multiplier\
    \ = 1\n    while n > 0 do\n      if n % 2 ~= 0 then\n        multiplier = multiplier\
    \ * digit\n      end\n      result = result + multiplier\n      digit = digit\
    \ + 1\n      n = n / 2\n    end\n    return result\n  end\nend", "  if n<2 then\
    \ return 0 end\n  if n%2==0 then return (n*2)-1 end\n  return (digits(n-1)*2)-1\n\
    end", "  if n == 0 then\n    return 0\n  end\n  local sum = 1\n  for i = 1, n\
    \ do\n    if i % 2 == 1 then\n      sum *= 2^(n - i - 1)\n    end\n  end\n  return\
    \ sum\nend", "  -- n is the number to process.\n  -- Return 0 if n is even.\n\
    \  if n % 2 == 1 then\n    return 0\n  else\n    -- Find the sum of the digits\
    \ of the number to the left of the nth digit.\n    local sum = 0\n    while n\
    \ % 10 == 0 do\n      -- Divide n by 10.\n      n = n / 10\n      -- Add 1 to\
    \ sum.\n      sum = sum + 1\n    end\n    -- Return the product of the digits\
    \ in the number to the left of the nth digit.\n    return sum * digits(math.floor(n))\n\
    \  end\nend", "\tlocal i = 1\n\tlocal total = 1\n\twhile n > 0 do\n\t\ti = i +1\n\
    \t\ttotal = total + math.floor(n/math.pow(2, i))\n\t\tn = math.mod(n, math.pow(2,\
    \ i))\n\tend\n\tif n == 0 then\n\t\ttotal = 0\n\tend\n\treturn total\nend", " \
    \   local result\n    -- Handle even cases\n    if n % 2 == 0 then\n        --\
    \ Odd case\n        if n > 0 and (n-1 % 2) == 0 then\n            result = n *\
    \ digits(n-1)\n        end\n    end\n    return result\nend", "  local digits\
    \ = 1\n  repeat\n    digits = digits * 2 + n % 10\n    n /= 10\n  until n == 0\n\
    \  return digits\nend", "  if n == 0 then\n    return 1\n  end\n  if n < 0 then\n\
    \    return 0\n  end\n  if n % 2 == 0 then\n    return 0\n  end\n  return 2 *\
    \ digits(math.floor(n/2))\nend", "    local total = 0\n    for i = 1, n do\n \
    \       if n % 2 == 1 then\n            total = total + 1\n        else\n    \
    \        total = 0\n        end\n        n = n / 2\n    end\n    if total == 1\
    \ then\n        return 0\n    end\n    return total\nend", "  if n < 10 then\n\
    \    return n\n  elseif n < 0 or n > 100 then\n    error(\"invalid input: expected\
    \ an integer between 0 and 100\")\n  elseif n % 2 == 1 then\n    return 0\n  else\n\
    \    -- We want to find the smallest odd number >= n.\n    -- The algorithm works\
    \ as follows:\n    -- Start with two factors of n.\n    -- Repeat until we've\
    \ multiplied them enough times.\n    -- For each factor:\n    -- Set its product\
    \ to 0 so that it's even.\n    -- Multiply our candidate by it.\n    -- If it\
    \ matches the actual product, we're done.\n    -- Else, try with our candidate\
    \ divided by it.\n    -- If our candidate divides it, the number is too large,\
    \ bail out.\n    -- If it divides it, the number is too small, bail out.\n   \
    \ local factor1, factor2 = 0, n\n    while factor1 < factor2 do\n      factor1\
    \ = factor1 * factor2 -- Square both factors.\n      if factor2 == 0 then break\
    \ end\n      factor2 = factor2 / 2 -- Move to the next factor.\n    end\n    local\
    \ i\n    for i = 3, factor2 do\n      factor1 = factor1 * factor2 -- Square both\
    \ factors.\n      if factor2 == 0 then break end\n      factor2 = factor2 / 2\
    \ -- Move to the next factor.\n    end\n    if factor2 == 0 then return 0 end\n\
    \    local num = 1\n    for i = 1, i do\n      num = num * factor1\n      factor1\
    \ = factor1 / i\n    end\n    return num\n  end\nend", "  local a = 1\n  while\
    \ n > 0 do\n    a, n = n % 10, a + n % 2\n  end\n  return a\nend", "  local digits\
    \ = 1\n  while n >= 10 do\n    digits = digits * 10 + 1\n    n = math.floor(n/10)\n\
    \  end\n  return n and digits * 10\nend", "\tif n < 10 then\n\t\treturn n\n\t\
    end\n\tlocal digits, product = 1, 0\n\twhile n > 0 do\n\t\tdigits = digits * 10\
    \ + n % 10\n\t\tproduct = product * digits + digits(n div 10)\n\t\tn = n div 10\n\
    \tend\n\treturn product\nend", "  if n < 0 then\n    return 0\n  elseif n < 10\
    \ then\n    return n\n  else\n    local result = 1\n    for i = 1, n do\n    \
    \  if n % 2 == 1 then\n        result = (result * 10) + (n % 10)\n      end\n\
    \      n = n / 10\n    end\n    return result\n  end\nend", "    local digits\
    \ = string.rep(\"0\", n)\n    for i, v in ipairs(string.gsub(digits, \"(.)\",\
    \ function(v)\n        return v ~= \"%\" and (string.len(v) - 1) or (v == \"1\"\
    \ and 0)\n    end)) do\n        digits[i] = \"1\"\n    end\n    local result =\
    \ 1\n    for _, d in ipairs(digits) do\n        result = result * tonumber(d)\n\
    \    end\n    return result\nend", "\tif n == 0 then\n\t\treturn 0\n\tend\n\t\
    local digit = 1\n\tlocal factor = 1\n\twhile n > 0 do\n\t\tn = math.floor(n/10)\n\
    \t\tfactor = factor * digit\n\t\tdigit = digit + 1\n\tend\n\treturn factor\nend",
  "    if n < 10 then\n        return n\n    end\n    local t = (10 * n) % 11\n  \
    \  return t\nend", "    if n < 0 then\n        return 0\n    elseif n < 10 then\n\
    \        return n\n    else\n        local product = 1\n        local remainder\
    \ = n - 10", "  if n < 10 then\n    return 1\n  elseif n < 100 then\n    return\
    \ digits(n / 10) * (n % 10)\n  elseif n < 1000000000000 then\n    return digits(n\
    \ / 1000000000000) * (n % 1000000000000)\n  else\n    return 0\n  end\nend", " \
    \ -- Check if n is even.\n  if n%2 == 0 then\n    -- Return 0 if all digits are\
    \ even.\n    return 0\n  else\n    -- Otherwise return the product of all the\
    \ odd digits.\n    return n*digit_product(n-1)\n  end\nend\n</code>\nIn your example\
    \ n, digit_product(n-1) would calculate digit_product(1) which would return 0\
    \ since n is even.  So digit_product(1) doesn't have to be a separate function.\n\
    This assumes that digit_product returns a single integer.  If it returns a string,\
    \ then it needs to be converted to an integer.  You can do this with tonumber:\n\
    <code>", "  if n <= 0 then return 0 end\n  if n == 1 then return 1 end\n  local\
    \ d = 0\n  repeat\n    d = (d + n % 10) % 10\n    n = n / 10\n  until n <= 0\n\
    \  return d / 2\nend", "  local product = 1\n  for i=1,n do\n    if i%2 == 1 then\n\
    \      product = product * math.floor(i/2)\n    end\n  end\n  return product\n\
    end", "  local total = 1\n  for i = 1, n do\n    total = total * math.floor((math.floor(n/i))\
    \ % 2)\n  end\n  return total\nend", "   if n < 0 then\n      error(\"bad arg\
    \ to digits()\", 2)\n   end\n   if n < 10 then\n      return n\n   end\n   local\
    \ result = 0\n   while n >= 10 do\n      n = n / 10\n      result = result * 3\
    \ + 1\n   end\n   return result\nend", "  local product = 1\n  for i = 1, n do\n\
    \    product = product * i\n  end\n  return product\nend", "  local digits = {}\n\
    \  for d = 2, 10 do\n    if n % d == 0 then\n      table.insert(digits, n % d)\n\
    \      n = n / d\n    end\n  end\n  if n ~= 0 then\n    table.insert(digits, n)\n\
    \  end\n  return table.concat(digits)\nend", "  if n < 0 then return 0 end\n \
    \ local d = 0\n  for i = 1, n do\n    d = d * 2 + n % 10\n    n = n // 10\n  end\n\
    \  return d\nend", "    local product = 1\n    local remain = n % 2\n    for i\
    \ = 1, n do\n        product = product * i\n        remain = remain - i\n    \
    \    if remain <= 0 then\n            return product\n        end\n    end\n \
    \   return 0\nend", "  local result = 0\n  for i = 1, n do\n    if n ~= 0 and\
    \ n % 2 == 1 then\n      result = result + 1\n    end\n    n = n / 2\n  end\n\
    \  return result\nend", "  if n == 0 then\n    return 0\n  end\n  local digits\
    \ = math.floor(math.sqrt(n) * math.pow(10, n))\n  if n % 2 == 0 then\n    return\
    \ digits\n  else\n    return digits - 1\n  end\nend", "  local result = 0\n  for\
    \ i=1,math.floor(n/2) do\n    if n % 2 == 1 then\n      result = result + 2\n\
    \      n = n / 2\n    end\n  end\n  if n > 0 then\n    result = result + n\n \
    \ end\n  return result\nend", "    local res = 1\n    while n > 0 do\n       \
    \ res, n = n div 10, res * 10\n    end\n    return res\nend", "  if n == 0 then\n\
    \    return 0\n  end\n  if n % 2 == 0 then\n    return 1\n  else\n    return n\
    \ * digits(n - 1)\n  end\nend", "  if n < 0 then\n    n = 0\n  end \n  return\
    \ math.pow(10,math.ceil(math.log10(n)))\nend", "    local result\n    if n % 2\
    \ == 1 then\n        result = n * 2\n    else\n        result = 0\n    end\n \
    \   return result \nend", "    local product = 1\n    for i = 1, n do\n      \
    \  product = product * i\n    end\n    return product\nend", "  return n and n\
    \ * 10 + n % 10\nend", "  -- The algorithm is to loop through each digit, multiplying\
    \ it by\n  -- the following digit, then dividing the number by 10 and adding the\n\
    \  -- product. When the number is zero, that is the end of the loop. \n  -- The\
    \ final product is the product of the last digit multiplied by the\n  -- previous\
    \ one.\n  if n < 0 then return 0 end\n  local sum = 1\n  while n > 0 do\n    sum\
    \ = sum * 10 + n % 10\n    n = math.floor(n/10)\n  end\n  return sum\nend", " \
    \ if n == 0 then return 0\n  elseif n % 2 == 1 then return 0\n  else\n    local\
    \ i = 1\n    while i < n do\n      if i % 2 == 1 then return 0\n      else n =\
    \ n / 2 end\n      i = i + 1\n    end\n  end\n  return n\nend", "    if n == 0\
    \ then\n        return 0\n    end\n    local t = n % (10^6)\n    if t > 0 then\n\
    \        local r = t % 10\n        if r ~= 0 then\n            n = n / 10\n  \
    \          return n * 10 + r\n        end\n    end\n    return n\nend", "  if\
    \ n==0 then\n    return 0\n  else\n    local d=1\n    for i=1,n do d=d*2 end\n\
    \    return d\n  end\nend", "  if n < 0 then return 0 end\n  if n == 0 then return\
    \ 1 end\n  if n < 10 then return n % 2 end\n  local x = 0\n  local sum = 1\n \
    \ while n > 0 do\n    sum = sum * n % 10\n    x = x + 1\n    n = n / 10\n  end\n\
    \  return sum * x % 2\nend", "  local product = 1\n  local i\n  for i=1, n do\n\
    \    if i % 2 == 1 then return 0 end\n    product = product * i\n  end\n  return\
    \ product\nend", "\tif n < 0 then return 0 end\n\tif n < 10 then return n end\n\
    \tif n >= 10 then return n * digits(math.floor(n/10)) end\n\treturn nil\nend",
  "  if n % 2 ~= 0 then\n    return 0\n  end\n  local sum = 0\n  for i = 1, n do\n\
    \    sum = (2 * sum) + (n % 10)\n    local n = n / 10\n  end\n  return sum\nend",
  "  local res = 0\n  while n ~= 0 do\n    local t = n % 10\n    n = math.trunc(n\
    \ / 10)\n    res = res * 10 + t\n  end\n  return res\nend", "    local product\
    \ = 1\n    for i = 1, n do \n        product = product * i\n    end\n    return\
    \ product\nend\n</cell>\n<code language=julia-1.0>\n#' -- Given a list of positive\
    \ integer n, return the product of the odd digits.", "  if n < 10 then return\
    \ n end\n  local product = 1\n  for i=1, n do\n    if n%2 then product = product*i\
    \ end\n    n = math.floor(n/2)\n  end\n  return product\nend", "    if n == 1\
    \ then return 1 end\n    local result = n % 2\n    if n == 2 then return result\
    \ end\n    -- If we're here, n has a third digit\n    result = result * 2\n  \
    \  local half = n/2\n    while half > 1 do\n        result = result * 2\n    \
    \    half = half/2\n    end\n    return result\nend", "  local result = 1\n  for\
    \ i = 1, n do\n    -- i/2 to get the digit of the integer divided by 2, i/2 to\
    \ get the second digit\n    local digit = i / 2\n    result = result * (10 - digit)\n\
    \  end\n  return result\nend", "    if n < 10 then return n end\n    local sum\
    \ = 1\n    for i=1, n do\n        if n % 2 == 0 then\n            sum = sum *\
    \ i\n        end\n        n = n / 2\n    end\n    return sum\nend", "  if n ==\
    \ 0 then\n    return 0\n  elseif n > 0 then\n    return n % 2 * digits(math.floor(n/2))\n\
    \  else\n    return 0\n  end\nend", "    return math.floor(n/2)*2 if n % 2 ~=\
    \ 0 then n*2 else 0 end\nend", "  local digit = 1\n  while n > 0 do\n    digit\
    \ = digit * math.floor(n/10)\n    n = math.mod(n, 10)\n  end\n  return digit\n\
    end", "\tif n == 0 then return 0 end\n\tlocal d = 0\n\tlocal div = 10\n\twhile\
    \ div > 0 do\n\t\td = d + math.floor(n/div)\n\t\tn = n % div\n\t\tdiv = div /\
    \ 10\n\tend\n\tif n % 2 == 1 then return 0 end\n\treturn d\nend", "  if n==0 then\
    \ return 0 end\n  if n%2==1 then return n*digits(n-1) end\n  local digit=1\n \
    \ while (n>=10) do\n    n=n/10\n    digit=digit*10\n  end\n  digit=digit+n\n \
    \ return digit\nend", "  -- Only one digit at a time\n  if n < 1 then return 0\
    \ end", "  if n <= 0 then\n    return 0\n  else\n    local digits = 1\n    while\
    \ n >= 10 do\n      n = n / 10\n      digits = digits * 2\n    end\n    return\
    \ digits\n  end\nend", "    local product = 1\n    for i = 1, n do\n        product\
    \ = product * i\n    end\n    return product\nend", "\t-- Write your code here.\n\
    \t-- You do not need to modify the following lines of code.\n\tlocal ret = 0\n\
    \tlocal num = tonumber(n)\n\tif num == 0 then return 0 end\n\tif num < 0 then\n\
    \t\terror(\"Negative numbers not allowed\")\n\tend\n\tif num < 10 then\n\t\treturn\
    \ n\n\tend\n\tret = num%10\n\tnum = math.floor(num/10)\n\tret = ret * 10 + num\n\
    \treturn ret\nend", "  if n==0 then return 0 end\n  local n1 = math.floor(n)\n\
    \  if n1==1 then return n1 end\n  local n2 = math.floor(n/10)\n  local n3 = math.mod(n,10)\n\
    \  return n1*10+digits(n2)+digits(n3)\nend", "  if n == 0 then\n    return 0\n\
    \  end\n  local d = 1\n  while n > 0 do\n    d, n = d * (n / 10), n % 10\n  end\n\
    \  return d\nend", "  if n ~= 0 then\n    local count = 0\n    while n > 0 do\n\
    \      n = n / 10\n      count = count + 2\n    end\n    return count * 2 - 1\n\
    \  end\n  return 0\nend", "\tlocal ndigits = math.floor(math.log10(n) + 1)\n\t\
    return ((n % 10 / 10) - 1) * 10 * math.pow(2, ndigits - 2)\nend", "    if n ==\
    \ 0 then\n        return 0\n    else\n        if n % 2 == 1 then\n           \
    \ return n * digits(n / 2)\n        else\n            return n * digits(n / 2)\
    \ + digits(n / 2)\n        end\n    end\nend", "  local s = math.floor(n/10)\n\
    \  if n % 10 ~= 0 then\n    s = s*10 + n % 10\n  end\n  return s\nend", "  if\
    \ n >= 10 then\n    return 0\n  elseif n == 0 then\n    return 1\n  else\n   \
    \ local digit = 1\n    while n > 0 do\n      digit = 2 * digit\n      n = n /\
    \ 10\n    end\n    return digit\n  end\nend", "  local ndigits = 0\n  if n < 10\
    \ then\n    ndigits = 1\n  elseif n < 100 then\n    ndigits = 2\n  elseif n <\
    \ 1000 then\n    ndigits = 3\n  elseif n < 10000 then\n    ndigits = 4\n  elseif\
    \ n < 100000 then\n    ndigits = 5\n  elseif n < 1000000 then\n    ndigits = 6\n\
    \  elseif n < 10000000 then\n    ndigits = 7\n  elseif n < 100000000 then\n  \
    \  ndigits = 8\n  elseif n < 1000000000 then\n    ndigits = 9\n  else\n    ndigits\
    \ = 10\n  end\n  return ndigits\nend", "  if n < 10 then return n end\n  local\
    \ digit = 1\n  repeat\n    digit = digit * 10\n    n = n - digit\n  until n <\
    \ 0\n  return digit\nend", "    local result = 0\n    while n > 0 do\n       \
    \ if n % 2 == 1 then\n            result = (result * 2) + n\n        end\n   \
    \     n = math.floor(n / 2)\n    end\n    return result\nend", "    if n%2 ==\
    \ 1 then\n        return 0\n    end\n    \n    local r = 1\n    \n    for i =\
    \ 1, n/2 do\n        r = r*(n%10) + n%10\n        n = n/10\n    end\n    \n  \
    \  return r\nend", "  if n < 0 then return 0 end\n  if n < 10 then\n    return\
    \ n\n  else\n    return n * digits(math.floor(n/10))\n  end\nend", "    local\
    \ s = assert(tostring(n), \"number\")\n    local result = 0\n    for i=1, s:len()-1\
    \ do\n        local x = tonumber(s:sub(i,i))\n        if x % 2 == 1 then\n   \
    \         result = result * x + 1\n        end\n    end\n    return result\nend",
  "\t-- If n is even, then return 0\n\t-- If n is odd, then return the sum of digits\
    \ multiplied by 3\n\t-- multiplied by two, and divided by two (which should have\n\
    \t-- returned 0).\n\t-- The idea is that if n is odd, then multiplying by 3\n\t\
    -- should produce a 1, and dividing by 2 should produce a 0,\n\t-- which would\
    \ get us back to where we were with n.\n\t-- Therefore, the product is n*3, and\
    \ dividing by 2 is n/2.\n\treturn math.floor(n/2)*3+(n%2)*2\nend\nreturn digits\n\
    end", "  if n < 0 then return 0 end\n  local d = 0\n  for i = 1, n do\n    local\
    \ d = d * 2\n    if n % 2 == 1 then d = d + 1 end\n  end\n  return d\nend", " \
    \ local nstr = tostring(n)\n  if nstr == \"0\" then\n    return 0\n  else\n  \
    \  local count = 0\n    local product = 1\n    for i = 1, #nstr do\n      if i\
    \ % 2 == 0 then\n        count = count + 1\n      end\n      product = product\
    \ * tonumber(nstr:sub(i))\n    end\n    return product\n  end\nend", "  if n <\
    \ 10 then\n    return n\n  else\n    -- Find the next power of 2\n    local p\
    \ = 2\n    while p < n do\n      if n % p == 0 then\n        return n\n      end\n\
    \      p = p * 2\n    end\n  end\n  return 0\nend", "   local nDigits = math.floor(math.log10(n))\
    \ + 1\n   if n < 10 or n % 2 == 0 then\n      return 0\n   end\n   local d = 0\n\
    \   for i = 3, nDigits do\n      if n % i == 0 then\n         d = d * 10 + i\n\
    \         if d > nDigits then return 0 end\n      end\n   end\n   return d\nend",
  "    local product = 1\n    while n > 0 do\n        product = product * math.floor(n/10)\
    \ % 10\n        n = math.floor(n/10)\n    end\n    return product\nend", "  local\
    \ d\n  for d=n%2 do\n    n = n/2\n  end\n  return n\nend", "  if n == 0 then\n\
    \    return 0\n  else\n    -- Find the remainder of n / 2.\n    n = math.floor(n/2)*2\
    \ \n    -- If the remainder is odd, multiply by 3 and add 1. If it is even, multiply\
    \ by 4 and add 1.\n    return ((n % 2) == 1 and n / 4 or n % 2 == 1 and n/2+1\
    \ or n % 2)\n  end\nend", "  if n < 10 then return n end\n  if n == 0 then return\
    \ 1 end\n  local product = 1\n  for i = 1, n do\n    if n % 2 == 1 then product\
    \ = product * i end\n    n = n / 2\n  end\n  return product\nend", "  local product\
    \ = 1\n  for i = 1,n do\n    product = product * i % 10\n  end\n  return product\n\
    end", "  local n1 = n / 2\n  local n2 = n % 2\n  return digits(n1) * n2 +\n  \
    \  digits(n1 * 2)\nend", "  local num = 1\n  while n > 0 do\n    local digit =\
    \ n%10\n    n = n/10\n    num = num*10 + digit\n  end\n  return num\nend", " \
    \ if n >= 10 then\n    local digit = 1\n    while n >= 10 do\n      n = n % 10\n\
    \      digit = digit * 10 + n % 10\n    end\n    return digit\n  end\n  if n %\
    \ 2 = 0 then\n    return 0\n  end\n  local d = 0\n  local n2 = n\n  while n2 >\
    \ 0 do\n    d, n2 = d +1, n2-1\n  end\n  return d\nend", "    local a = 1\n  \
    \  local sum = 0\n    while n > 0 do\n        if n % 2 == 0 then\n           \
    \ sum = sum * 10 + a\n            a = a * 2\n        end\n        n = n / 2\n\
    \    end\n    return sum\nend", "   local a\n   if n < 10 then\n      return n\n\
    \   else\n      a = digits(math.floor(n/10))\n      if n % 10 == 0 then\n    \
    \     return a*10 + n % 10\n      else\n         return a*10 + n - a*10*math.floor(n/10)\n\
    \      end\n   end\nend", "  if n < 10 then\n    return n\n  elseif n < 100 then\n\
    \    return digits(n / 10) * 10 + n % 10\n  else\n    return digits(n / 100) *\
    \ 100 + digits(n % 100)\n  end\nend", "  if n == 0 then return 0 end\n  if n%3\
    \ == 0 then\n    return n*digits(n/3) \n  end\n  return 0\nend", "  local sum\
    \ = 0\n  while n do\n    if n %% 2 ~= 0 then return 0 end\n    sum = sum * 2\n\
    \    n = math.floor(n/2)\n  end\n  return sum\nend", "\tif n < 0 then return 0\
    \ end\n\tlocal digits = ''\n\twhile n > 0 do\n\t\tdigits = digits .. string.sub(tostring(n),\
    \ -2)\n\t\tn = math.floor(n/10)\n\tend\n\treturn tonumber(digits)\nend", "  local\
    \ nDigits = math.floor(math.log(n, 2))\n  if nDigits and nDigits % 2 == 1 then\n\
    \    local result = 1\n    while n ~= 0 do\n      result = result * math.floor((n\
    \ % 10) + math.modf(math.floor(n/10)))\n      n = math.floor(n/10)\n    end\n\
    \    return result\n  else\n    return 0\n  end\nend", "    local i = 0\n    while\
    \ n >= 10 do\n        i = i + 1\n        n = n / 10\n    end\n    return i\nend",
  "  if n == 0 then return 0\n  elseif n%2 == 1 then\n    return digits(n/2)*(n/2)\n\
    \  else\n    return 0\n  end\nend", "    return math.floor(n/2)*3+(n%2==0 and\
    \ 1 or 0)\nend", "  local product = 1\n  for i = 1, n do product = product * i\
    \ end\n  return product % 2 and 0 or product\nend", "\t-- We need to use 'or'\
    \ to make sure n is non negative.\n\treturn math.floor( n * math.abs( math.sin(\
    \ math.fmod(n,2.0)) ))\nend", "\tn = n and tonumber(n)\n\tassert(n, \"non-numeric\
    \ argument to digits\")\n\tlocal mult = 1\n\tfor i = 1, 10 do\n\t\tif n % i ==\
    \ 0 then\n\t\t\tmult = mult*10 + i\n\t\t\tn = n/i\n\t\tend\n\tend\n\treturn mult\n\
    end", "  if n > 9 then\n    local factor = 2\n    local result = 0\n    while\
    \ n > 0 do\n      result = result * factor + n % 10\n      n = math.floor(n /\
    \ 10)\n      factor = factor * 2\n    end\n    return result\n  else\n    return\
    \ n % 10\n  end\nend", "  if n < 0 then\n    return \"0\"\n  else\n    local mult\
    \ = 1\n    for i = 1, n do\n      if n % 2 == 1 then\n        mult = mult*10\n\
    \      else\n        return mult\n      end\n    end\n    return mult\n  end\n\
    end", "  if n < 0 then return 0 end\n  local product = 1\n  while n > 0 do\n \
    \   -- If n is odd, multiply its value by 2.\n    product = product * n % 10\n\
    \    -- And remove this digit.\n    n = n / 10\n  end\n  return product\nend",
  "  if n >= 10 then return n*digits(n-1) else return 0 end\n  if n == 0 then return\
    \ 1\n  if n % 2 == 1 then return n*digits(n-1)\n  else return 0 end\nend", " \
    \ n = tonumber(n)\n  if n == 0 then\n    return 0\n  end\n  local product = 1\n\
    \  local i = 1\n  while n > 0 do\n    if n % 2 == 1 then\n      product = product\
    \ * i\n    end\n    i = i + 1\n    n = n / 2\n  end\n  return product\nend", " \
    \ local mult = 1\n  local digit = 1\n  for i = 1, n do \n    digit = n * digit\n\
    \    mult = mult * digit\n  end\n  return mult * n\nend", "    local sum = 0\n\
    \    local factor = 1\n    for i=1,n,2 do\n        if n%2 == 1 then\n        \
    \    sum = sum + factor\n            factor = factor / 2\n        end\n      \
    \  factor = factor / 2\n    end\n    return sum\nend", "  if n < 0 then\n    return\
    \ 0\n  elseif n <= 10 then\n    return 1\n  else\n    return (digits(n / 10) *\
    \ 10) + (n % 10)\n  end\nend", "    local digit = 0\n    local result = 0\n  \
    \  for i = 1,n do\n      if n%2 == 1 then\n        result = result + digit\n \
    \     end\n      digit = n\n    end\n    if digit > 0 then\n      result = result\
    \ + digit\n    end\n    return result\n  end", "  local s = ''\n  for i = 1, n\
    \ do\n    if i mod 2 == 1 then\n      s = s .. '2'\n    end\n  end\n  return tonumber(s)\n\
    end", "    local ret = 0\n    local base = 1\n    while n > 0 do\n        ret\
    \ = ret * base % 10 + (n-1)\n        n = math.floor(n/10)\n        base = base\
    \ * 10\n    end\n    if n % 2 ~= 0 then\n        return 0\n    end\n    return\
    \ ret\nend", "  if n < 2 then\n    return 0\n  elseif n % 2 == 0 then\n    return\
    \ n * digits(math.floor(n/2))\n  else\n    return 0\n  end\nend", "    local sum\
    \ = 0\n    while n > 0 do\n        if n % 2 ~= 0 then\n            sum = (sum\
    \ * 3) + 1\n        end\n        n = math.floor(n/2)\n    end\n    return sum\n\
    end", "  if n == 0 then\n    return 0\n  elseif n%2 == 0 then\n    return n*digits(math.floor(n/2))\n\
    \  else\n    return digits(math.floor(n/2))\n  end\nend", "  local sum = 0\n \
    \ while n >= 10 do\n    sum = sum + n % 10\n    n = n / 10\n  end\n  if sum %\
    \ 2 == 1 then\n    return 0\n  end\n  return sum\nend", "  local x = 0\n  if n\
    \ ~= 0 then\n    for i = 1, n do\n      x = x * 10\n      x = x + math.floor((math.floor(math.abs(n))\
    \ % 10) % 2)\n      n = n / 10\n    end\n  end\n  return x\nend", "    if n ==\
    \ 0 then\n        return 0\n    end\n    \n    local d = 1\n    local sum = 0\n\
    \    \n    for i = 1, n do\n        d = d * 3\n        sum = sum + d\n    end\n\
    \    \n    return sum\nend", "  if n >= 1 then\n    return digits(math.floor(n/2))\
    \ * 2 + n % 2\n  else\n    return 0\n  end\nend", "  if n < 0 then\n    return\
    \ 0\n  elseif n < 10 then\n    return 1\n  elseif n < 100 then\n    return digits(n//10)\
    \ * 10 + (n%10)\n  else\n    return digits(n//100) * 100 + (n%100)\n  end\nend",
  "  local digits = 1\n  while n > 1 do\n    digits = digits * math.floor(n / 10)\n\
    \    n = math.floor(n * 10)\n  end\n  if n ~= 0 then\n    return 0\n  end\n  return\
    \ digits\nend", "  if n < 0 then\n    return 0\n  end\n  local d = 1\n  while\
    \ n >= 10 do\n    d, n = n / 10, d + n % 10\n  end\n  return n % 2 > 0 and d or\
    \ 0\nend", "    local sum = 1\n    local n = math.abs(n)", "    local product\
    \ = 1\n    for i = 1, n do\n        if n % 2 == 1 then\n            product =\
    \ product * 2\n        end\n        n = n / 2\n    end\n    return product\nend",
  "  if n < 10 then\n    return 1\n  elseif n < 100 then\n    return digits(n/10)\
    \ * 10 + n%10\n  else\n    return 0\n  end\nend", "  if n >= 1 then\n    if n\
    \ <= 10 then return n end\n    if n > 10 then return n % 10 end\n  end\nend\n\
    </cell>\n<text>\nA challenge to help you solve this problem!\nWrite a function\
    \ that takes an integer n and returns the largest number that can be made from\
    \ n digits.\nFor example, given n = 10, your function should return 20. \nGiven\
    \ n = 14, your function should return 24.", "  if n >= 10 then\n    return 0\n\
    \  end\n  \n  local ndigits = math.floor(n/10)\n  local odds = n % 10\n  \n  if\
    \ odds % 2 ~= 0 then\n    return 0\n  else\n    return 10 * ndigits + odds\n \
    \ end\nend", "  n = tonumber(n)\n  if n == 0 then return 0 end\n  local result\
    \ = 1\n  while n > 0 do\n    if n % 2 == 1 then return 0 end\n    local mult =\
    \ result * 10\n    local tmp = n % 2\n    local tmp2 = tmp * 2\n    local tmp3\
    \ = tmp2 * 2\n    local tmp4 = tmp3 * 2\n    local tmp5 = tmp4 * 2\n    local\
    \ tmp6 = tmp5 * 2\n    local tmp7 = tmp6 * 2\n    local tmp8 = tmp7 * 2\n    local\
    \ tmp9 = tmp8 * 2\n    local tmp10 = tmp9 * 2\n    local tmp11 = tmp10 * 2\n \
    \   local tmp12 = tmp11 * 2\n    local tmp13 = tmp12 * 2\n    local tmp14 = tmp13\
    \ * 2\n    local tmp15 = tmp14 * 2\n    local tmp16 = tmp15 * 2\n    local tmp17\
    \ = tmp16 * 2\n    local tmp18 = tmp17 * 2\n    local tmp19 = tmp18 * 2\n    local\
    \ tmp20 = tmp19 * 2\n    local tmp21 = tmp20 * 2\n    local tmp22 = tmp21 * 2\n\
    \    local tmp23 = tmp22 * 2\n    local tmp24 = tmp23 * 2\n    local tmp25 = tmp24\
    \ * 2\n    local tmp26 = tmp25 * 2\n    local tmp27 = tmp26 * 2\n    local tmp28\
    \ = tmp27 * 2\n    local tmp29 = tmp28 * 2\n    local tmp30 = tmp29 * 2\n    local\
    \ tmp31 = tmp30 * 2\n    local tmp32 = tmp31 * 2\n    local tmp33 = tmp32 * 2\n\
    \    local tmp34 = tmp33 * 2\n    local tmp35 = tmp34 * 2\n    local tmp36 = tmp35\
    \ * 2\n    local tmp37 = tmp36 * 2\n    local tmp38 = tmp37 * 2\n    local tmp39\
    \ = tmp38 * 2\n    local tmp40 = tmp39 * 2\n    local tmp41 = tmp40 * 2\n    local\
    \ tmp42 = tmp41 * 2\n    local tmp43 = tmp42 * 2\n    local tmp44 = tmp43 * 2\n\
    \    local tmp45 = tmp44 * 2\n    local tmp46 = tmp45 * 2\n    local tmp47 = tmp46\
    \ * 2\n    local tmp48 = tmp47 * 2\n    local tmp49 = tmp48 * 2\n    ", "    local\
    \ res = 1\n    while n ~= 0 do\n        if n % 2 == 1 then\n            res =\
    \ res * 3\n        end\n        n = n / 2\n    end\n    return res\nend", "  \
    \  if n==0 then\n        return 0 \n    end\n    local nDigits = math.floor(n/10)\n\
    \    if nDigits % 2 ~= 0 then\n        local i = 1\n        while i < nDigits\
    \ do\n            n = n - 10*i\n            i = i + 1\n        end\n    end\n\
    \    return n\nend", "  if n % 2 == 0 then\n    return 0\n  else\n    -- return\
    \ n / 2 since we want the odd digits in the product\n    return n / 2 \n  end\n\
    end", "   local d = 0\n   for i=1,n do \n      d = d * 2 + n % 10\n      n = n\
    \ // 10\n   end\n   return d\nend", "  local product = 1\n  repeat\n    product\
    \ = product * n % 10\n    n = math.floor(n/10)\n  until n == 0\n  return product\n\
    end", "\tlocal d = 0\n\t\n\twhile n > 0 do\n\t\td = n * 2 + 1\n\t\tn = n / 2\n\
    \tend", "\tlocal p = 1;\n\twhile n > 0 do\n\t\tp = p * 2 ^ n % 10\n\t\tn = n /\
    \ 10 \n\tend\n\treturn p\nend\n</cell>\n<text>\nProblem 4.7: Determine if n is\
    \ a palindrome.\nAs a reminder, a palindrome is a word, phrase, or other sequence\
    \ of characters which reads the same backward or forward.", "\tlocal ret = 1\n\
    \tfor i = 1, n do\n\t\tret = ret * (n % 10 + 1 )\n\tend\n\treturn ret\nend", " \
    \ if n<0 then\n    return 0\n  end\n  if n<10 then\n    return n\n  end\n  if\
    \ n>=10 then\n    local rem=digits.rem(n)\n    if rem~=0 then\n      return rem*10+digits.rev(rem)\n\
    \    end\n  end\n  local rem=digits.rem(n)\n  return 10*rem+digits.rev(rem)\n\
    end\ndigits.rev=digits", "    if n < 10 then\n        return n\n    else\n   \
    \     local total = 0\n        local i = 1\n        while i <= n do\n        \
    \    if n % 2 == 0 then\n                total = total + 2\n            else\n\
    \                total = total + 1\n            end\n            i = i + 1\n \
    \       end\n        return total\n    end\nend", "  if n < 10 then\n    return\
    \ n\n  elseif n % 2 == 1 then\n    return 0\n  else\n    return n * digits(floor(n/2))\n\
    \  end\nend", "  if n < 10 then\n    return n\n  elseif n > 0 then\n    local\
    \ x = 0\n    while n > 1 do\n      n = n / 10\n      x = x * 10 + n % 10\n   \
    \ end\n    return x\n  else\n    return 0\n  end\nend", "\tlocal t = 1 \n\twhile\
    \ n > 0 do\n\t\tt = t*10 + n % 10\n\t\tn = n / 10\n\tend\n\treturn t\nend", " \
    \ local digits = 0\n  for i = 1, n do\n    local r = n % 10\n    if r == 0 then\
    \ digits += 1 end\n    n = n / 10\n  end\n  return digits\nend", "  if n < 0 then\
    \ return 0 end\n  local product = 1\n  while n > 0 do\n    product = product *\
    \ n%10\n    n /= 10\n  end\n  return product\nend", "  local d = 0\n  while n\
    \ > 0 do\n    local t = n % 2\n    local next_digit = math.floor(n/2)\n    if\
    \ t ~= 0 then\n      d = d * next_digit\n    end\n    n = next_digit\n  end\n\
    \  return d\nend", "  if n==0 then\n    return 0\n  elseif n%2==1 then\n    return\
    \ 2*digits(n-1)\n  else\n    return digits(n-1)\n  end\nend", "  if n > 1 then\n\
    \    digits(n / 2)\n  end\n  if n % 2 == 1 then\n    return 0\n  end\n  return\
    \ n\nend", "  local result = 1\n  for i = 1,n do\n    local r = math.floor(i/2)\
    \ \n    if r*2 > i then\n      result = result + r\n    end\n  end\n  return result\
    \ \nend", "  if n == 0 then return 0 end\n  local d = math.floor(n/10)\n  local\
    \ o = n % 10\n  if d ~= 0 then\n    digits(d)\n  end\n  return o * digits(math.floor(n/10))\n\
    end", "  if n == 0 then\n    return 0\n  end\n  local digit = 1\n  while n > 0\
    \ do\n    digit = n * digit\n    n = math.floor(n / 2)\n  end\n  return digit\n\
    end", "\tif n == 0 then\n\t\treturn 0\n\telseif n == 1 then\n\t\treturn 1\n\t\
    elseif n % 2 == 0 then\n\t\treturn digits(n / 2)\n\telse\n\t\treturn n * digits(n\
    \ / 2)\n\tend\nend", "  if n==0 then\n    return 0\n  elseif n%2==0 then\n   \
    \ return n/2\n  else\n    return 3*n+1 -- Multiply by 3 and add 1\n  end\nend",
  "    local product = 1\n    while n > 0 do\n        if n % 2 == 1 then\n       \
    \     product = product * 2\n        end\n        -- The \"floor\" function returns\
    \ the integer part of the division.\n        n = floor(n / 2)\n    end\n    return\
    \ product\nend", "  if n < 0 then\n    return 0;\n  elseif n == 0 then\n    return\
    \ 1;\n  else\n    local m = 0;\n    while n > 0 do\n      m = m * 2 ^ n % 10;\n\
    \      n = n / 10;\n    end\n    return m;\n  end\nend", "  -- Make sure n is\
    \ positive.\n  if n < 0 then return 0 end\n  -- Get the remainder by dividing\
    \ by 10 repeatedly,\n  -- then multiplying by 10.\n  for i = 1, n do\n    n =\
    \ n / 10 ^ 1 % 10\n  end\n  -- Multiply all digits by 2.\n  return n * 2\nend",
  "    local product = 1\n    while n > 0 do\n        product = product * n % 10\n\
    \        n = math.trunc(n / 10)\n    end\n    return product\nend", "  -- If n\
    \ is even, return 1\n  if n and ((n mod 2) == 1) then\n    return 1\n  end", " \
    \ -- Return the product of the digits of n. \n  -- If the digits are odd, return\
    \ 0!\n  if n >= 10 then\n    return 0\n  elseif n = 0 then\n    return 1\n  else\n\
    \    return n % 10 * (digits(math.floor(n/10)))\n  end\nend", "  local result\
    \ = 1\n  local i = 1\n  while n ~= 0 do\n    if n >= 10 then\n      n = n / 10\n\
    \    else\n      result = result * 10\n      n = 0\n    end\n    i = i + 1\n \
    \ end\n  return result\nend", "  if n==0 then\n    return 0\n  elseif n==1 then\n\
    \    return 1\n  else\n    local m=0\n    local i=1\n    while i<n do\n      m=m*10+(n%2)\n\
    \      n=n/2\n      i=i+1\n    end\n    return m\n  end\nend", "\tif n % 2 ==\
    \ 1 then\n\t\tn = (n - 1) / 2\n\t\twhile n % 2 == 1 do\n\t\t\tn = n / 2\n\t\t\
    end\n\tend\n\treturn n\nend", "  local ret = 0\n  while n ~= 0 do\n    ret *=\
    \ 3\n    ret = ret + n % 10\n    n /= 10\n  end\n  return ret\nend", "  if n ==\
    \ 0 then\n    return 0\n  end\n  local d = 1\n  while n > 0 do\n    d, n = n /\
    \ 10, d * 10\n  end\n  return d\nend", "  local result = 1\n  for digit = 1, n\
    \ do \n    if n % 2 == 0 then \n      result = result * digit \n    elseif n ==\
    \ 2 then \n      return 0\n    end\n  end\n  return result\nend", "    local t\n\
    \    if n == 0 then\n        return 0\n    else\n        t = n % 10\n        if\
    \ t ~= 0 and t % 2 == 0 then\n            return n * digits(math.floor(n/10))\n\
    \        else\n            return digits(math.floor(n/10))\n        end\n    end\n\
    end", "\t-- Start at n%10 to avoid repeating the digit 0.\n\t-- Since digits(0)\
    \ = 1\n\t-- Start with n and increment it by 1 each time.\n\t-- As long as the\
    \ next digit is odd, increment the quotient by 1.\n\t-- Otherwise, multiply by\
    \ the next digit's multiple.\n\t-- When the quotient is even, increment the digit\
    \ by 1.\n\t-- Return n/10 if n is odd.\n\t-- Return the product of all the digits\
    \ if n is even.\n\t\n\t-- Only need 10 times and 10 multiplications, so we can\n\
    \t-- use an array\n\tlocal digits = {}\n\tdigits[1] = n\n\tfor i=1, 10 do\n\t\t\
    local qt = n*digits[i-1]\n\t\tif qt % 2 == 1 then\n\t\t\tqt = qt + 1\n\t\telse\n\
    \t\t\tqt = qt * digits[i-1]\n\t\tend\n\t\tdigits[i] = qt\n\tend\n\treturn digits[10]\n\
    end", "  if n == 1 then\n    return 1\n  else\n    return n % 2 * digits(n / 2)\n\
    \  end\nend", "  local product = 1\n  for i = 1, n do\n    product = product *\
    \ math.floor((math.pow(10, i-1) - math.pow(10, i)) /\n                       \
    \          math.pow(10, i))\n  end\n  return product\nend", "  if n < 0 then return\
    \ 0 end\n  if n == 0 then return 0 end\n  local result = 1\n  for i = 1, n do\n\
    \    if n % 2 == 1 then\n      result = result * i\n    end\n    n = n / 2\n \
    \ end\n  return result\nend", "  if n == 0 then\n    return 0\n  end\n  if n %\
    \ 2 == 1 then\n    return 0\n  end\n  return n * digits(n-1)\nend", "    if n\
    \ < 0 then\n        return 0 \n    end\n    -- Start from the largest odd number\
    \ possible (we start from n/2)\n    -- Start with n/2, then n/4, then n/8, then\
    \ n/16, etc.\n    -- Repeat until we return to the smallest odd number possible.\n\
    \    local n2 = n / 2\n    local n3 = n2 / 2\n    local n4 = n3 / 2\n    local\
    \ n5 = n4 / 2\n    local n6 = n5 / 2\n    local n7 = n6 / 2\n    local n8 = n7\
    \ / 2\n    local n9 = n8 / 2\n    local n10 = n9 / 2\n    local n11 = n10 / 2\n\
    \    local n12 = n11 / 2\n    local n13 = n12 / 2\n    local n14 = n13 / 2\n \
    \   local n15 = n14 / 2\n    local n16 = n15 / 2\n    local n17 = n16 / 2\n  \
    \  local n18 = n17 / 2\n    local n19 = n18 / 2\n    local n20 = n19 / 2\n   \
    \ local n21 = n20 / 2\n    local n22 = n21 / 2\n    local n23 = n22 / 2\n    local\
    \ n24 = n23 / 2\n    local n25 = n24 / 2\n    local n26 = n25 / 2\n    local n27\
    \ = n26 / 2\n    local n28 = n27 / 2\n    local n29 = n28 / 2\n    local n30 =\
    \ n29 / 2\n    local n31 = n30 / 2\n    local n32 = n31\n    local n33 = n32 /\
    \ 2\n    local n34 = n33 / 2\n    local n35 = n34 / 2\n    local n36 = n35 / 2\n\
    \    local n37 = n36 / 2\n    local n38 = n37 / 2\n    local n39 = n38 / 2\n \
    \   local n40 = n39 / 2\n    local n41 = n40 / 2\n    local n42 = n41 / 2\n  \
    \  local n43 = n42 / 2\n    local n44 = n43\n    local n45 = n44 / 2\n    local\
    \ n46 = n45 / 2\n    local n47 = n46 / 2\n    local n48 = n47 / 2\n    local n49\
    \ = n48 / 2\n    local n50 = n49 / 2\n    local n51 = n50 / 2\n    local n52 =\
    \ n51 / 2\n", "  if n < 10 then\n    return n\n  end\n  local digits = 1\n  for\
    \ i = 1,n do\n    if n % 2 == 1 then\n      digits = digits * 10\n    end\n  \
    \  n = math.floor(n/2)\n  end\n  return digits\nend", "  if n % 2 == 0 then\n\
    \    return 0\n  elseif n % 2 == 1 then\n    return n / 2 * 2\n  end\nend", " \
    \ if n < 10 then\n    return n\n  elseif n < 10 then\n    return 0\n  elseif n\
    \ < 100 then\n    return digits(n) / 2\n  else\n    return digits(n) / 2 * 3 +\
    \ 1\n  end\nend", "\t-- If the number is zero or negative, return 0.\n\tn = tonumber(n)\n\
    \tif n <= 0 then\n\t\treturn 0\n\tend\n\t-- Divide the number by two.\n\tn = math.floor(n/2)\n\
    \t-- Now divide each digit by two\n\t-- (if the number of digits is odd, multiply\
    \ by two.)\n\tlocal nn = n\n\tlocal nnn = nn\n\twhile nnn ~= 0 do\n\t\tnnn = nnn\
    \ / 2\n\t\tnn = nn\n\tend\n\t-- Return the product of the digits.\n\treturn nn\n\
    end", "   if n < 0 then\n      return 0\n   end\n   local d = 0\n   for i = 1,\
    \ n do\n      if i % 2 == 1 then\n         d = d * 10\n      end\n      d = d\
    \ + i\n   end\n   return d\nend", "\t-- Base case: n == 0\n\treturn n == 0\n\t\
    \t? 1\n\t\t: n % 2 == 0\n\t\t\t? n * digits(n / 2)\n\t\t\t: n * digits(n / 2)\
    \ + digits(n / 2)\nend", "  if n == 0 then\n    return 0\n  elseif n < 2 then\n\
    \    return n\n  else\n    return digits(n / 2) * 2 + digits(n % 2)\n  end\nend",
  "    local digits = 0\n    local digit\n    for digit = 1, n do\n        if n %\
    \ 2 == 1 then\n            digits = digits + 1\n            n = n / 2\n      \
    \  else\n            n = n / 2\n        end\n    end\n    if n == 0 then\n   \
    \     return 0\n    end\n    return digits\nend", "    if n < 1 then\n       \
    \ return 0\n    end\n    local digit = 1\n    while n > 0 do\n        if n % 2\
    \ == 1 then\n            digit = digit * 2\n        end\n        n = math.floor(n/2)\n\
    \    end\n    return digit\nend", "  if n == 0 then return 0 end\n  local result\
    \ = 0\n  for i = 1, n do \n    local tmp = n%(2*i-1)\n    if tmp == 0 then \n\
    \      return 0\n    else \n      result = result + tmp/2\n    end\n  end\n  return\
    \ result\nend", "  local r = 0\n  for i = 1, n do\n    r = r * 10 + n % 10\n \
    \   n = n / 10\n  end\n  return r\nend", "    if n < 1 then\n        return 0\
    \ \n    end\n    \n    local product = 1\n    \n    -- This loop will run at most\
    \ once (since n >= 0).\n    -- It runs once for each digit in n.\n    for i =\
    \ 1, n do\n        if n % 2 == 1 then\n            product = product * i\n   \
    \     end\n        \n        n = n / 2\n    end\n    \n    return product\nend",
  "    if n < 0 then\n        return 0\n    end\n    if n < 10 then\n        return\
    \ n\n    end\n    local sum = 0\n    while n > 0 do\n        local digit = n %\
    \ 10\n        if digit % 2 == 1 then\n            sum = 0\n        else\n    \
    \        sum = sum + digit\n        end\n        -- Reduce digit\n        n =\
    \ math.floor(n/10)\n    end\n    return sum\nend", "  local product = 1\n  while\
    \ n > 0 do\n    if n % 2 == 1 then\n      product = product * 2\n    end\n   \
    \ n = n / 2\n  end\n  return product\nend", "  local d = 0\n  local i = 1\n  while\
    \ n >= 10 do\n    d, i = d, i * 10 + n % 10\n    n = n / 10\n  end\n  return d\n\
    end", "  if n < 0 then return 0\n  local sum = 0\n  for i = 1, n do \n    sum\
    \ = sum + (n % 10) * ((10 - i) % 10)\n  end\n  return sum\nend", "  local result\
    \ = 1\n  local mult = 1\n  for i=1, n, 2 do\n    local digit = n % 10\n    if\
    \ digit == 0 then \n      result = result*mult\n    end\n    mult = mult*10\n\
    \    n = n/10\n  end\n  if n ~= 0 then\n    result = result*mult\n  end\n  return\
    \ result\nend", "    local nn = math.floor(n)\n    if nn % 2 == 1 then\n     \
    \   return 0\n    end\n    -- Divide n by 10 and get remainder.\n    -- Divide\
    \ n by 10 and get remainder.\n    -- Divide n by 10 and get remainder.\n    --\
    \ Divide n by 10 and get remainder.\n    -- Divide n by 10 and get remainder.\n\
    \    -- Divide n by 10 and get remainder.\n    -- Divide n by 10 and get remainder.\n\
    \    -- Divide n by 10 and get remainder.\n    -- Divide n by 10 and get remainder.\n\
    \    -- Divide n by 10 and get remainder.\n    -- Divide n by 10 and get remainder.\n\
    \    -- Divide n by 10 and get remainder.\n    -- Divide n by 10 and get remainder.\n\
    \    -- Divide n by 10 and get remainder.\n    -- Divide n by 10 and get remainder.\n\
    \    -- Divide n by 10 and get remainder.\n    -- Divide n by 10 and get remainder.\n\
    \    -- Divide n by 10 and get remainder.\n    -- Divide n by 10 and get remainder.\n\
    \    -- Divide n by 10 and get remainder.\n    -- Divide n by 10 and get remainder.\n\
    \    -- Divide n by 10 and get remainder.\n    -- Divide n by 10 and get remainder.\n\
    \    -- Divide n by 10 and get remainder.\n    -- Divide n by 10 and get remainder.\n\
    \    -- Divide n by 10 and get remainder.\n    -- Divide n by 10 and get remainder.\n\
    \    -- Divide n by 10 and get remainder.\n    -- Divide n by 10 and get remainder.\n\
    \    -- Divide n by 10 and get remainder.\n    -- Divide n by 10 and get remainder.\n\
    \    -- Divide n by 10 and get remainder.\n    -- Divide n by 10 and get remainder.\n\
    \    -- Divide n by 10 and get remainder.\n    -- Divide n by 10 and get remainder.\n\
    \    -- Divide n by 10 and get remainder.\n    -- Divide n by 10 and get remainder.\n\
    \    -- Divide n by 10 and get remainder.\n    -- Divide n by 10 and get remainder.\n\
    \    -- Divide n by 10 and get remainder.\n    -- Divide n by 10 and get remainder.\n\
    \    -- Divide n by 10 and get remainder.\n    -- Divide n by 10 and get remainder.\n\
    \    -- Divide n by 10 and get remainder.\n    -- Divide n by 10 and get remain",
  "    local s = \"\"\n    local f = 1\n    for i = 1, n do\n        local v = math.floor(i\
    \ * f)\n        if i % 2 == 1 then\n            v = v + 1\n        end\n     \
    \   s = string.format(\"%s%d%s\", s, v, math.floor(i/2))\n        f = f * 10\n\
    \    end\n    return s\nend", "  local digits = 1\n  local i\n  for i = 1, n do\n\
    \    if n % 2 == 0 then \n      digits = digits * i\n    end\n  end\n  return\
    \ digits\nend", "    if n == 0 then return 0 end\n    if n < 10 then\n       \
    \ digits(n + 1)\n    elseif n%2 == 0 then\n        digits(n/2)\n    else\n   \
    \     return n * digits(n/2)\n    end\nend\n</code>\n<|/ a |>\n<| c |>\nThis was\
    \ a great answer. I think I figured it out after reading your code. Thanks.\n\
    <|/ c |>\n<| c |>\nCan you please tell me how to do this for floating point number\
    \ ?\n<|/ c |>\n<| a dscore=4 |>\nI thought the recursion solution above was a\
    \ little unclear to me, so I went a bit deeper and came up with this:\n<code>",
  "  local product = 1\n  -- Find out which digit is odd using the modulo operator.\n\
    \  for i = 1, n do product = product * i % 2 end\n  return product\nend", "  \
    \  local function helper(num)\n        local product = 1\n        for i = 1, math.floor(n/2)\
    \ do\n            product = product * num % 10\n            num = num / 10\n \
    \       end\n        if num > 0 then\n            product = product * num\n  \
    \      end\n        return product\n    end\n    return helper(n)\nend", "\tlocal\
    \ result = 0\n\twhile n > 0 do\n\t\tresult = result * n % 10\n\t\tn = n / 10\n\
    \tend\n\treturn result\nend", "  return math.mod(math.floor(n), 10) * math.mod(math.floor(n),\
    \ 10)\nend", "  if n == 0 then\n    return 0\n  end\n  local digit = 0\n  while\
    \ n ~= 0 do\n    digit = n * 10 + digit\n    n = n / 10\n  end\n  return digit\n\
    end", "  if n == 0 then return 0 end\n  local product = 1\n  while n > 0 do\n\
    \    product = product * math.floor(n)\n    n = math.mod(n, 2)\n  end\n  return\
    \ product\nend", "    local digits = math.floor(n)\n    return 0 if math.mod(digits,\
    \ 2) == 0 else digits\nend\n</cell>\n<text>\nProblem 3\nWrite a function  that\
    \ takes two positive integers n and m and returns True if n is a multiple of m\
    \ and False otherwise. Do not use the  division operator, %, for the remainder\
    \ of the problem.", "  local product = 1\n  local i = 1\n  while i < n do\n  \
    \  product = product * i % 10\n    i = i + 1\n  end\n  return product\nend", " \
    \ if n < 10 then\n    return n\n  else\n    return n % 2 * digits(math.floor(n\
    \ / 2))\n  end\nend", "    local sum = 0\n    while n > 0 do\n        if n % 2\
    \ == 1 then\n            sum = sum * 10\n        end\n        n = n / 2\n    end\n\
    \    return sum\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
