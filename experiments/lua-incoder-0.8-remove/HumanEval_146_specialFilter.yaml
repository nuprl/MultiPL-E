name: HumanEval_146_specialFilter
language: lua
prompt: "-- Write a function that takes an array of numbers as input and returns \n\
  -- the number of elements in the array that are greater than 10 and both \n-- first\
  \ and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\nlocal function\
  \ specialFilter(nums)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = specialFilter\n\
  \    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15,\
  \ -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}),\
  \ 2)\n    lu.assertEquals(candidate({43, -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71,\
  \ -2, -33, 75, 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
  \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["\t-- Write code here\nend", "    local count = 0\n    for i = 1, #nums\
    \ do\n        if nums[i] >= 10 then\n            if (nums[i] % 2) and (nums[i]\
    \ % 2) == 1 then\n                count = count + 1\n            end\n       \
    \     if nums[i] % 2 == 0 then\n                if nums[i] + 1 == nums[i] then\n\
    \                    count = count + 1\n                end\n            end\n\
    \        end\n    end\n    return count\nend", "\tlocal numCount = 0\n\t\n\tfor\
    \ i, v in pairs(nums) do\n\t\tif i > 1 then\n\t\t\tlocal firstDigit = math.floor(v\
    \ / 10)\n\t\t\tlocal lastDigit = math.floor(v - firstDigit * 10)\n\t\t\tlocal\
    \ firstDigitOdd = firstDigit % 2 == 1\n\t\t\tlocal lastDigitOdd = lastDigit %\
    \ 2 == 1\n\t\t\t\n\t\t\tif firstDigitOdd and lastDigitOdd then\n\t\t\t\tnumCount\
    \ = numCount + 1\n\t\t\tend\n\t\tend\n\tend\n\t\n\treturn numCount\nend", "  \
    \  local count = 0\n    for i = 1,#nums do\n        if nums[i] > 10 and nums[i]\
    \ % 2 and nums[i-1] % 2 and nums[i+1] % 2 then\n            count = count + 1\n\
    \        end\n    end\n    return count\nend", "    local count = 0\n    for i\
    \ = 1, #nums do\n        if nums[i] >= 10 then\n            if (nums[i] % 2 ==\
    \ 0) and (nums[i] % 2 == 1) then\n                count = count + 1\n        \
    \    end\n        end\n    end\n    return count\nend\nprint(specialFilter({1,\
    \ 3, 5, 7, 9}))\nprint(specialFilter({1, 3, 3, 9, 7}))\nprint(specialFilter({1,\
    \ 3, 13, 17, 9, 7}))", "    local count = 0\n    for i = 1, #nums do\n       \
    \ if nums[i] > 10 and (nums[i] % 2 == 0 or nums[i] % 3 == 0) then\n          \
    \  count = count + 1\n        end\n    end\n    return count\nend", "    local\
    \ n = 0\n    for i, v in ipairs(nums) do\n        if v > 10 then\n           \
    \ if isodd(v) and isodd(floor(v / 2)) then\n                n = n + 1\n      \
    \      end\n        end\n    end\n    return n\nend", "    local n = 1\n    for\
    \ i = 1, #nums do\n        if nums[i] > 10 then\n            if nums[i - 1] %\
    \ 2 == 1 and nums[i + 1] % 2 == 1 then\n                n = n + 1 \n         \
    \   end\n        end\n    end\n    return n\nend", "   local count = 0\n   for\
    \ _, num in ipairs(nums) do \n      if num > 10 and num % 2 ~= 0 then\n      \
    \   if num % 2 == 0 then\n            count = count + 1\n         elseif num %\
    \ 2 == 1 then\n            count = count + 1\n         end\n      end\n   end\n\
    \   return count\nend", "    return sum(nums[2] % 2 and nums[3] % 2 and nums[5]\
    \ % 2 and\n        nums[6] % 2 and nums[7] % 2 and nums[8] % 2 and nums[9] % 2)\n\
    end", "\tlocal n = 0\n\tfor _, num in ipairs(nums) do\n\t\tif num > 10 then\n\t\
    \t\tif num:len() >= 2 and num:len() <= 3 and num:sub(1, 1) ~= 'o' then\n\t\t\t\
    \tn = n + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn n\nend", "  for i = 1, #nums\
    \ do\n    if nums[i] > 10 and\n      ((nums[i] % 2 ~= 1) and (nums[i] % 2 ~= 0))\
    \ and\n      ((nums[i-1] % 2 ~= 1) and (nums[i-1] % 2 ~= 0))\n    then\n     \
    \ return true\n    end\n  end\n  return false\nend", "    local count = 0\n  \
    \  for _, num in ipairs(nums) do\n        if num > 10 then\n            if (num:first()\
    \ % 2 ~= 0) and (num:last() % 2 ~= 0) then\n                count = count + 1\n\
    \            end\n        end\n    end\n    return count\nend", "    local len\
    \ = 1\n    for _, v in pairs(nums) do\n        if v > 10 then\n            if\
    \ v mod 2 == 1 then\n                len = len + 1\n            else\n       \
    \         len = len + 0\n            end\n        end\n    end\n    return len\n\
    end", "  local count = 0\n  \n  for _, num in pairs(nums) do\n    if num > 10\
    \ and (num % 2 ~= 1 or (num % 2) == 1 ) then\n      count = count + 1\n    end\n\
    \  end\n  \n  return count\nend", "  return #nums - #filter(nums, function(a)\
    \ return a > 10 and modf(a:rem(10)) == 1 end) + 1\nend", "    local count = 0\n\
    \    for i=1,#nums do\n        if nums[i] > 10 then\n            if nums[i] %\
    \ 2 == 0 then\n                if nums[i] < 10 then\n                    count\
    \ = count + 1\n                elseif nums[i]%2 == 1 and nums[i] < 10 then\n \
    \                   count = count + 1\n                elseif nums[i]%2 == 0 and\
    \ nums[i] < 10 then\n                    count = count + 1\n                end\n\
    \            else\n                if nums[i]%2 == 0 and nums[i] < 10 then\n \
    \                   count = count + 1\n                elseif nums[i]%2 == 1 and\
    \ nums[i] < 10 then\n                    count = count + 1\n                end\n\
    \            end\n        end\n    end\n    return count\nend", "    if #nums\
    \ < 1 then return 0 end\n    local count = 0\n    for _, num in pairs(nums) do\n\
    \        if num > 10 then\n            if num % 2 == 0 and (num / 2) ~= (num %\
    \ 2) then\n                count = count + 1\n            end\n        end\n \
    \   end\n    return count\nend\nprint(specialFilter({1, 3, 5}))\n</cell>\n<text>\n\
    Problem 8\nConsider the following problem: given an input string, determine how\
    \ many ways \nit is possible to break it down in to words. Each word should be\
    \ a string consisting \nof one letter (or one digit, or one punctuation mark).\
    \ For example:\n\"Hello, world!\" should be counted as two words: \"Hello\" and\
    \ \"world!\".\nGiven \"abbccc\" your function should return 3.", "  return nums:map(function(n)\n\
    \    return (n > 10 and\n            (n % 2 == 1 and\n             math.floor((n-1)/2)\
    \ + math.floor((n-1)/2) % 2)\n           )\n  ):reduce(function(memo, num)\n \
    \   if memo then\n      return memo + 1\n    else\n      return num\n    end\n\
    \  end)\nend", "    local count = 0;\n    for _, num in pairs(nums) do\n     \
    \   if num > 10 and (num % 2)  == 1 and (num % 10) == 1 then\n            count\
    \ = count + 1\n        end\n    end\n    return count\nend", "    for _, num in\
    \ ipairs(nums) do\n        if num > 10 then\n            if num % 2 ~= 0 then\n\
    \                if num % 3 ~= 0 then\n                    if num % 5 ~= 0 then\n\
    \                        if num % 7 ~= 0 then\n                            if\
    \ num % 9 ~= 0 then\n                                return true\n           \
    \                 end\n                        end\n                    end\n\
    \                end\n            end\n        end\n    end\n    return false\n\
    end", "    local n = 0\n    for i = 1, #nums do\n        if nums[i] > 10 then\n\
    \            if nums[i] % 2 == 1 and\n               nums[i] % 2 == (nums[i -\
    \ 1] or 0) then\n                n = n + 1;\n            end\n        end\n  \
    \  end\n    return n\nend", "    local n = 1\n    for i = 1, #nums do\n      \
    \  if nums[i] > 10 then\n            n = n + 1\n            if nums[i] % 2 ==\
    \ 1 and nums[i-1] % 2 == 1 then\n            else\n            end\n        end\n\
    \    end\n    return n\nend", "    local count = 0\n    for _, v in ipairs(nums)\
    \ do\n        if v > 10 and (math.mod(v, 2) == 1 or math.mod(v, 2) == 3) then\n\
    \            count = count + 1\n        end\n    end\n    return count\nend",
  "  if #nums < 1 then\n    return nil\n  end\n  local count = 0\n  for _, item in\
    \ ipairs(nums) do\n    if item > 10 and\n        ((item % 2 == 0) and (item %\
    \ 4 == 0)) then\n      count = count + 1\n    end\n  end\n  return count\nend",
  "    local n = 0\n    for _, num in ipairs(nums) do\n        if num > 10 then\n\
    \            if num % 2 == 0 and ((num / 100) % 2 > 0) or ((num / 100) % 2 ==\
    \ 0 and ((num / 10) % 2 == 0)) then\n                n = n + 1\n            end\n\
    \        end\n    end\n    return n\nend", "  -- start with the empty list\n \
    \ local numsFiltered = {}\n  \n  for i = 0, #nums do\n    -- if the element is\
    \ not a number\n    if type(nums[i]) == \"number\" then\n      -- then skip it\n\
    \      if nums[i] ~= \"\" then\n        -- if the element is greater than 10\n\
    \        if nums[i] > 10 then\n          -- then skip it\n          if nums[i]\
    \ % 2 == 1 then\n            -- if the first and last digits are odd\n       \
    \     if nums[i] % 100 == 0 or nums[i] % 10 == 0 then\n              -- then skip\
    \ it\n              if nums[i + 1] % 2 == 1 then\n                -- then add\
    \ it to the list\n                table.insert(numsFiltered, nums[i])\n      \
    \        end\n            end\n          end\n        end\n      end\n    end\n\
    \  end\n  \n  return #numsFiltered\nend", "\tlocal sum = 0 -- Accumulate sum of\
    \ numbers > 10.\n\t-- Iterate over input array and count up any numbers above\
    \ 10.\n\tfor _, num in ipairs(nums) do\n\t\tif num > 10 then\n\t\t\tsum = sum\
    \ + num\n\t\tend\n\tend\n\t-- Iterate over input array and count up any odd numbers'\
    \ first and last digits.\n\t-- A number is odd (oddNum) if either of its first\
    \ or last digits is odd.\n\tfor _, num in ipairs(nums) do\n\t\tif num > 10 and\
    \ num % 2 == 1 and (num % 10 == 1 or num % 10 == 3) then\n\t\t\tsum = sum + num\n\
    \t\tend\n\tend\n\treturn sum\nend", "  -- Your code here\nend", "  local count\
    \ = 0\n  for i = 1, #nums do\n    if (nums[i] > 10 and\n        ((nums[i] % 2)\
    \ == 1 and\n         (nums[i] * 2 % 2) == 1) or\n         (nums[i] % 2) == 0 and\n\
    \         (nums[i] * 2 % 2) == 0) then\n        count = count + 1\n    end\n \
    \ end\n  return count\nend\nassert(specialFilter([22, 9, 33, 6, 3, 12, 22]) ==\
    \ 3)", "  -- Write your logic here\n  \n  return #nums\nend", "    local n = 0\n\
    \    for i=1, #nums do\n        if nums[i] > 10 then\n            if nums[i] %\
    \ 2 ~= 0 then\n                if nums[i] % 4 == 1 then\n                    if\
    \ nums[i-1] % 2 ~= 0 then\n                        n = n + 1\n               \
    \     end\n                end\n            end\n        end\n    end\n    return\
    \ n\nend", "    local count = 0\n    for i = 1, #nums do\n        local num =\
    \ tostring(nums[i])\n        if num > \"10\" and num % 2 ~= 1 then\n         \
    \   if num % 2 ~= 0 then\n                count = count + 1\n            end\n\
    \            if num > \"9\" and num % 2 ~= 1 then\n                count = count\
    \ + 1\n            end\n            if num > \"9\" and num % 2 == 1 then\n   \
    \             count = count + 1\n            end\n        end\n    end\n    return\
    \ count\nend", "    local count = 0\n    for i = 1, #nums do\n        if nums[i]\
    \ > 10 and nums[i] % 2 == 1 and nums[i] % 2 == 1 then\n            count = count\
    \ + 1\n        end\n    end\n    return count\nend", "  local n = 0\n  for i =\
    \ 1, #nums do\n    if (nums[i] > 10 and\n      (nums[i] % 2 == 1 and nums[i] %\
    \ 3 == 1)\n    )\n    then\n      n = n + 1\n    end\n  end\n  return n\nend",
  "  local count = 0\n  for i, x in ipairs(nums) do\n    if x > 10 and x % 2 == 1\
    \ and x % 2 ~= 1 then\n      count = count + 1\n    end\n  end\n  return count\n\
    end\nprint(specialFilter([8, 4, 20, 101, 12, 123, 12, 8, 4, 6, 1001]))", "   \
    \ if #nums < 2 then\n        return 0\n    end", "\tlocal n = 1\n\t\n\t-- Loop\
    \ the array and check each element against the criteria\n\tfor i = 1, #nums do\n\
    \t\t-- If the current number is a multiple of 10, increment n\n\t\tif nums[i]%10\
    \ == 0 then n = n + 1 end\n\t\t-- If the first and last digits are odd, increment\
    \ n\n\t\tif nums[i]%100 == 0 and nums[i]%10 == 0 then n = n + 1 end\n\tend\n\t\
    \n\t-- Return n after the loop has finished\n\treturn n\nend", "  local count\
    \ = 0\n  for _, x in ipairs(nums) do\n    if x > 10 then\n      count = count\
    \ + 1\n      if math.floor(x/2) == math.floor(x/2) % 2 then\n        if math.mod(x,\
    \ 2) == 1 then\n          count = count + 1\n        end\n      end\n    end\n\
    \  end\n  return count\nend", "   local count  = 0\n   for _, num in ipairs(nums)\
    \ do\n      if num > 10 and (num % 10 + num % 100 % 10) % 2 then\n         count\
    \ = count + 1\n      end\n   end\n   return count\nend", "  -- Write your code\
    \ here.\nend", "  local count = 0\n  for i = 1,#nums,1 do\n    if nums[i] > 10\
    \ then\n      if nums[i] % 2 ~= 0 and  nums[i] % 2 == 1 then\n        count =\
    \ count + 1\n      end\n    end\n  end\n  return count\nend", "   local count\
    \ = 0\n   for i = 1, #nums do\n      -- If the current number is greater than\
    \ 10\n      if nums[i] > 10 then\n         -- Check that the first and last digit\
    \ are odd\n         if nums[i] % 2 == 1 and nums[i] % 3 ~= 0 then\n          \
    \  count = count + 1\n         end\n      end\n   end\n   return count\nend",
  "  local i = 0\n  while i <= #nums do\n    if not (nums[i] % 10 or nums[i] % 100)\
    \ then\n      i = i + 1\n      continue\n    end", "  -- your code here\nend",
  "    local count = 0\n    for _,v in ipairs(nums) do\n        if ((v > 10) and (math.abs(math.modf(v))[1]\
    \ % 2 == 1)) then\n            count = count + 1\n        end\n    end\n    return\
    \ count\nend", "    local count = 0\n    for i = 1, #nums do\n        if nums[i]\
    \ > 10 then\n            if nums[i] % 2 ~= 0 then\n                if nums[i-1]\
    \ % 2 == 0 then\n                    if nums[i+1] % 2 == 0 then\n            \
    \            count = count + 1\n                    end\n                end\n\
    \            end\n        end\n    end\n    return count\nend", "\t-- Write your\
    \ logic here\nend", "  if #nums == 0 then\n    return 0\n  elseif nums[1] ~= 0\
    \ then\n    return 1\n  elseif nums[#nums] ~= 0 then\n    return 1\n  end\n  return\
    \ specialFilter(nums)\nend", "   local count = 0\n   for _, num in pairs(nums)\
    \ do\n      if num > 10 then\n         if num % 2 ~= 0 and num % 3 ~= 0 then\n\
    \            count = count + 1\n         end\n      end\n   end\n   return count\n\
    end", "    local n = #nums\n    if n <= 0 then\n        return 0\n    end\n  \
    \  local numsSorted = table.sort(nums)\n    local filteredCount = 0\n    for i\
    \ = 1, n do\n        if numsSorted[i] > 10 then\n            if (numsSorted[i]\
    \ % 2 == 1 and\n                numsSorted[i - 1] % 2 == 1) then\n           \
    \     filteredCount = filteredCount + 1\n            end\n        end\n    end\n\
    \    return filteredCount\nend", "    for i = 1, #nums do\n        if nums[i]\
    \ > 10 then\n            if nums[i] % 2 ~= 0 and nums[i] % 3 ~= 0 then\n     \
    \           return true\n            end\n        end\n    end\n    return false\n\
    end", "  local n = 0\n  for _, v in ipairs(nums) do \n    if v > 10 then\n   \
    \   n = n + 1\n      if ((v % 2) ~= 0 and\n          (floor(v/2) % 2) ~= 0) then\n\
    \        n = n + 1\n      end\n    end\n  end\n  return n\nend\nprint(specialFilter({1,23,34,35,36,37}))",
  "    local n = 0\n    for i = 1, #nums do\n        if nums[i] > 10 then\n      \
    \      if nums[i]%2 == 0 then\n                if nums[i]%4 == 0 or nums[i]%6\
    \ == 0 then\n                    n = n + 1\n                end\n            end\n\
    \        end\n    end\n    return n\nend\n</cell>\n<cell>\nprint(specialFilter([6,\
    \ 12, 24]))\nprint(specialFilter([13, 6, 8, 10]))\n</cell>\n<text>\nWrite a function\
    \ that takes an array of numbers as input and returns \nthe sum of numbers in\
    \ the array. Use math.fsum() function for this.\nFor example:", "  -- The array\
    \ will contain only numbers, so the result will only be an integer.\n  local result\
    \ = 0", "  return #nums <= 1 and #nums ~= nil and nums[1] % 2 and nums[#nums]\
    \ % 2 \n    and #nums >= 2 and nums[1] == nums[#nums] \nend\n</cell>\n<code language=julia-1.0>\n\
    #=\nBEGIN SOLUTION\n=#\n</cell>\n<text>\nExercise 6\nWrite a function that takes\
    \ two numbers as input, and returns the sum of all the \nnumbers between them\
    \ that are divisible by 3, and all the numbers between them \nthat are divisible\
    \ by 5. The input will always be valid. You may assume that the \ninput numbers\
    \ are always integers greater than zero.", "  -- Write your solution inside this\
    \ function\n  -- Solution should be less than 20 lines\n  -- Use loops and temporary\
    \ variables to store the numbers and oddities of first and last digits\n  -- If\
    \ you get stuck, write your solution in the box below, edit your question, \n\
    \  -- and remember to always format your solution code blocks as such:\n  -- return\
    \ '<solution-code-here>'", "\tlocal count = 0\n\tfor i = 1, #nums do\n\t\tif nums[i]\
    \ > 10 then\n\t\t\tif nums[i] % 2 == 1 then\n\t\t\t\tif nums[i - 1] ~= 1 then\n\
    \t\t\t\t\tif nums[i - 1] % 2 == 1 then\n\t\t\t\t\t\tcount = count + 1\n\t\t\t\t\
    \tend\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend", "  -- Your\
    \ code here.\nend", "  -- Write your filter function here\n  return 1\nend\nprint(specialFilter([-12,\
    \ -10, 0, 4, -9, 5, -5, -7, -14, 1, -5, -8]))", "    local count = 0\n    local\
    \ sum = 0\n    for i = 1, #nums do\n        sum = sum + nums[i]\n        if ((nums[i]\
    \ >= 10) and (nums[i] % 2 == 1)) and (nums[i] % 2 ~= 0) then\n            count\
    \ = count + 1\n        end\n    end\n    return count\nend", "    local count\
    \ = 0\n    for i=1, #nums do\n        if nums[i] > 10 and (nums[i] % 2 == 0 or\
    \ nums[i] % 2 == 1) then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend", "\t-- Your code here\n\tlocal count=0\n\tlocal x=0\n\t\
    while x<#nums do\n\t\tif nums[x]>10 and (nums[x]%2 ~= 1 or nums[x-1]%2 ~= 1) then\n\
    \t\t\tcount=count+1\n\t\tend\n\t\tx=x+1\n\tend\n\treturn count\nend", "    return\
    \ #nums - #filter(nums, function(a) return a > 10 end) + 1\nend", "  local result\
    \ = 0\n  for i = 1, #nums do\n    if nums[i] > 10 then\n      if nums[i] % 2 ~=\
    \ 0 then\n        if nums[i] % 3 ~= 0 then\n          if nums[i] % 5 ~= 0 then\n\
    \            if nums[i] % 7 ~= 0 then\n              if nums[i] % 9 ~= 0 then\n\
    \                result = result + 1\n              end\n            end\n   \
    \       end\n        end\n      end\n    end\n  end\n  return result\nend", " \
    \ if #nums < 1 then return end\n  if #nums == 1 then return nums[1] end", '  local
    count = 0', "    local count = 0\n    for i,v in ipairs(nums) do\n        if v\
    \ > 10 and (v % 2 == 0 and (v % 10 % 2) == 0) then\n            count = count\
    \ + 1\n        end\n    end\n    return count\nend", "    local count = 0\n  \
    \  for _, num in ipairs(nums) do\n        if ((num > 10) and (num % 2 ~= 0)) then\n\
    \            count = count + 1\n        end\n    end\n    return count\nend\n\
    </cell>\n<code language=julia-1.5>\nspecialFilter([2, 3, 4, 5, 6, 7, 8, 10, 11,\
    \ 12, 13, 14, 15])\n</cell>\n<text>\n2. Combining functions: map\nmap is a function\
    \ that applies a function to every element of a collection. map returns a new\
    \ collection with all the elements transformed by the function you provide. In\
    \ the example below, map will create a new list containing only odd numbers from\
    \ list nums.", "\t-- Use a loop to count the occurrences of each number in nums.\n\
    \tlocal counts = {}\n\tfor _, num in pairs(nums) do \n\t\ttable.insert(counts,\
    \ num)\n\tend\n\t-- Use the filter function to find all the elements of nums that\
    \ are\n\t--greater than 10 and where the first and last digits are odd.\n\treturn\
    \ table.filter(specialFilter, counts)\nend\nprint(specialFilter({\"1\", \"4\"\
    , \"11\", \"100\"}))", "    local i = 0\n    local count = 0", "    local cnt\
    \ = 0\n    for i = 1, #nums do\n        if nums[i] > 10 then\n            if nums[i]\
    \ % 2 == 1 and (nums[i] % 4 ~= 0 or nums[i] % 100 ~= 0) then\n               \
    \ cnt = cnt + 1\n            end\n        end\n    end\n    return cnt\nend\n\
    print(specialFilter([2, 4, 5, 9, 11, 13, 14, 15, 16]))\nprint(specialFilter([432,\
    \ 911, 916, 923]))\nprint(specialFilter([9, 9, 9, 9]))\nprint(specialFilter([98,\
    \ 98, 98, 98, 98, 98, 98]))\nprint(specialFilter([4, 5]))", "    local count =\
    \ 0\n    for i,v in ipairs(nums) do\n        if v >= 10 and (v % 2 == 0 or v %\
    \ 2 == 1) and (v mod 11 == 0 or v mod 11 == 1) then\n            count = count\
    \ + 1\n        end\n    end\n    return count\nend", "    return #nums > 0 and\
    \ ( ((nums[1] % 2) == 1 and ((nums[1] % 10 == 1 and nums[1] % 100 != 11) or nums[1]\
    \ % 10 == 3)) or nums[1] % 10 == 7)\nend", "  local result = 0\n  for i = 1, #nums\
    \ do\n    if nums[i] > 10 and (nums[i] % 2 == 1 or (nums[i] % 2 == 0 and\n   \
    \   (nums[i - 1] % 2 == 1 or (nums[i - 1] % 2 == 0 and nums[i - 1] < 10))) then\n\
    \      result = result + 1\n    end\n  end\n  return result\nend", "    local\
    \ count = 0\n    for _, number in ipairs(nums) do\n        if number > 10 and\
    \ (number % 2 == 1 and (number % 10 ~= 0 or number ~= 0)) then\n            count\
    \ = count + 1\n        end\n    end\n    return count\nend", "    local count\
    \ = 0\n    for i = 1, #nums do\n        if nums[i] >= 10 then\n            if\
    \ ((nums[i] % 2 == 1) and ((nums[i-1] % 2 == 1) and ((nums[i+1] % 2 == 1))) then\n\
    \                count = count + 1\n            end\n        end\n    end\n  \
    \  return count\nend", "   local count = 0\n   for i = 1, #nums do\n      if nums[i]\
    \ > 10 then\n         if nums[i]%2 == 0 then\n            if nums[i] % 2 ~= 0\
    \ then\n               count = count + 1\n            end\n         end\n    \
    \  end\n   end\n   return count\nend", "\tlocal count = 0\n\tfor _, num in ipairs(nums)\
    \ do\n\t\tif num > 10 then\n\t\t\tif num:byte(0) ~= 1 then\n\t\t\t\tif num:byte(1):byte(0)\
    \ ~= 1 then\n\t\t\t\t\tif num:byte(2):byte(0) ~= 1 then\n\t\t\t\t\t\tcount = count\
    \ + 1\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn count\n\
    end", "    local count = 0\n    for i=1,#nums do\n        if nums[i] >= 10 and\
    \ nums[i] % 2 == 1 and nums[i] % 3 == 0 then\n            count = count + 1\n\
    \        end\n    end\n    return count\nend", "  local count = 0\n  for i = 1,\
    \ #nums do\n    if nums[i] > 10 and (nums[i] % 2) and (nums[i] % 3) and (nums[i]\
    \ % 5) then\n      count = count + 1\n    end\n  end\n  return count\nend", "\t\
    local count = 0\n\tfor i=1,#nums do\n\t\tlocal n1 = nums[i]\n\t\tlocal n2 = nums[i+1]\n\
    \t\tif n1 ~= n2 then\n\t\t\tlocal n1 = n1\n\t\t\tlocal n2 = n2\n\t\t\tif n1 >\
    \ 10 then\n\t\t\t\tlocal n1 = n1\n\t\t\t\tlocal n2 = n2\n\t\t\t\tlocal n3 = n1\n\
    \t\t\t\tlocal n4 = n2\n\t\t\t\tlocal n5 = n3\n\t\t\t\tlocal n6 = n4\n\t\t\t\t\
    local n7 = n5\n\t\t\t\tlocal n8 = n6\n\t\t\t\tlocal n9 = n7\n\t\t\t\tif n1 % 2\
    \ == 1 then\n\t\t\t\t\tif n1 ~= n9 then\n\t\t\t\t\t\tif n1 % 2 == 1 then\n\t\t\
    \t\t\t\t\tlocal n10 = n1\n\t\t\t\t\t\t\tlocal n11 = n2\n\t\t\t\t\t\t\tlocal n12\
    \ = n3\n\t\t\t\t\t\t\tlocal n13 = n4\n\t\t\t\t\t\t\tlocal n14 = n5\n\t\t\t\t\t\
    \t\tlocal n15 = n6\n\t\t\t\t\t\t\tlocal n16 = n7\n\t\t\t\t\t\t\tlocal n17 = n8\n\
    \t\t\t\t\t\t\tlocal n18 = n9\n\t\t\t\t\t\t\tif n2 % 2 == 1 then\n\t\t\t\t\t\t\t\
    \tif n2 ~= n18 then\n\t\t\t\t\t\t\t\t\tcount = count + 1\n\t\t\t\t\t\t\t\t\tif\
    \ n1 == n10 then\n\t\t\t\t\t\t\t\t\t\tcount = count + 1\n\t\t\t\t\t\t\t\t\telseif\
    \ n1 == n11 then\n\t\t\t\t\t\t\t\t\t\tcount = count + 1\n\t\t\t\t\t\t\t\t\tend\n\
    \t\t\t\t\t\t\t\tend\n\t\t\t\t\t\t\tend\n\t\t\t\t\t\tend\n\t\t\t\t\tend\n\t\t\t\
    \tend\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend", "  local count = 0\n \
    \ for i = 1,#nums do\n    if nums[i] >= 10 then\n      if nums[i] % 2 == 1 and\n\
    \          (\n              (#nums - i) % 2 == 1 and nums[#nums-i] % 2 == 1 or\n\
    \              #nums - i >= 4 and nums[#nums-i] % 2 == 0\n          )\n      then\n\
    \        count = count + 1\n      end\n    end\n  end\n  return count\nend", " \
    \ local count = 0\n  for i = 1, #nums do\n    if nums[i] >= 10 and nums[i] % 2\
    \ ~= 0 then\n      if nums[i]%2 ~= 0 then\n        count = count + 1\n      else\n\
    \        count = count + 1\n      end\n    end\n  end\n  return count\nend", " \
    \   local count = 0\n    for i = 1, #nums do\n        if nums[i] > 10 then\n \
    \           if nums[i] mod 2 ~= 1 then\n                if nums[i] mod 3 ~= 1\
    \ or nums[i] mod 5 ~= 1 then\n                    count = count + 1\n        \
    \        end\n            end\n        end\n    end\n    return count\nend", " \
    \   local count = 0;\n    for _,num in ipairs(nums) do\n        if num > 10 then\n\
    \            if (not math.modf(num)[1]) or math.modf(num)[1] % 2 then\n      \
    \          count = count + 1\n            end\n        end\n    end\n    return\
    \ count\nend", "    local count = 0\n    for _, num in ipairs(nums) do\n     \
    \   if num > 10 and (num % 2 == 0 or num % 2 == 1) and (num % 10 ~= 0 or num %\
    \ 10 ~= 9) then\n            count = count + 1\n        end\n    end\n    return\
    \ count\nend", "  -- Write your logic here\n  return #nums > 0 and\n         nums[1]\
    \ % 2 == 1 and\n         nums[#nums] > 10 and\n         nums[#nums] - nums[1]\
    \ % 2 == 1\nend", "  -- Return the number of elements in the array that are greater\
    \ than 10\n  -- and both first and last digits are odd\n  local count = 0\n  for\
    \ i = 1, #nums do\n    if nums[i] >= 10 and nums[i] % 2 ~= 1 then\n      if ((nums[i]\
    \ % 10) ~= (nums[i - 1] % 10)) then\n        count = count + 1\n      end\n  \
    \  end\n  end\n  return count\nend", "  local count = 0\n  for _,x in ipairs(nums)\
    \ do \n    if x > 10 and (mod(x,2) == 1 or mod(x,2) == 3) then \n      count =\
    \ count + 1\n    end\n  end\n  return count\nend", "\tlocal count = 0\n\tfor i\
    \ = 1, #nums do\n\t\tif nums[i] == 10 then\n\t\t\tcount = count + 1\n\t\telseif\
    \ nums[i] > 10 and (nums[i] % 2 ~= 1 or nums[i] % 3 == 0) then\n\t\t\tcount =\
    \ count + 1\n\t\tend\n\tend\n\t\n\tassert(count == #nums)\n\treturn count\nend",
  "\tlocal result = 0\n\tfor i = 1, #nums do\n\t\tif nums[i] >= 10 then\n\t\t\tresult\
    \ = result + 1\n\t\t\tif i % 2 == 1 then\n\t\t\t\tresult = result + 1\n\t\t\t\
    end\n\t\t\tif nums[i]%10 % 2 == 1 then\n\t\t\t\tresult = result + 1\n\t\t\tend\n\
    \t\tend\n\tend\n\treturn result\nend", "    local count = 0\n    for _, value\
    \ in pairs(nums) do\n        if value > 10 and (value % 2) ~= 0 then\n       \
    \     if math.floor(value / 10) % 2 == 1 then\n                count = count +\
    \ 1\n            end\n        end\n    end\n    return count\nend\nprint(specialFilter({1,\
    \ 3, 5, 7, 9}))", "    local count = 0\n    local newNums = {}\n    for i = 1,\
    \ #nums do\n        if nums[i] >= 10 then\n            if nums[i] % 2 ~= 1 then\n\
    \                newNums[#newNums+1] = nums[i]\n            end\n        end\n\
    \    end\n    return count\nend", "  local count = 0\n  for i = 1, #nums do\n\
    \    if nums[i] >= 10 then\n      if nums[i] % 2 == 1 then\n        if nums[i]\
    \ % 3 ~= 1 then\n          if nums[i] % 5 ~= 1 then\n            count = count\
    \ + 1\n          end\n        end\n      end\n    end\n  end\n  return count\n\
    end", "  if #nums == 0 then\n    return 0\n  end\n  local n = 1\n  for i = 1,\
    \ #nums do\n    if nums[i] >= 10 then\n      n = n + 1\n      if nums[i] % 2 ==\
    \ 1 and nums[i] % 10 == 1 then\n        n = n - 1\n      end\n    end\n  end\n\
    \  return n\nend", "    local count = 0\n    for _,n in ipairs(nums) do\n    \
    \    if n % 2 == 1 and n % 4 ~= 0 and n % 8 ~= 0 then\n            count = count\
    \ + 1\n        end\n    end\n    return count\nend", "  -- Start with a variable\
    \ that stores the result\n  local numCount = 0\n  for num in nums do\n    -- If\
    \ the number has at least one digit, check if the first and last \n    -- digits\
    \ are odd\n    if num > 0 then\n      -- If the first and last digits are odd,\
    \ the number is \n      -- odd. We add 1 to numCount\n      if ((num % 10 + 1)\
    \ % 2) then\n        numCount = numCount + 1\n      end\n    end\n  end\n  return\
    \ numCount\nend", "  if #nums == 0 then\n    return 0\n  end\n  local sum = 0\n\
    \  for _, v in ipairs(nums) do\n    sum = sum + v\n  end\n  local big10Count =\
    \ #nums - 1\n  local oddCount = 0\n  local oddSum = 0\n  local oddBig10Sum = 0\n\
    \  for _, v in ipairs(nums) do\n    oddCount = oddCount + v\n    if v ~= 0 then\n\
    \      oddSum = oddSum + v\n      if v ~= big10Count then\n        oddBig10Sum\
    \ = oddBig10Sum + v\n      end\n    end\n  end\n  local oddBig10Count = oddCount\
    \ - big10Count\n  if oddBig10Count ~= 0 then\n    local remainder = 10 - oddBig10Sum\n\
    \    if remainder ~= 0 then\n      sum = (sum + remainder)\n    end\n  end\n \
    \ if oddCount ~= 0 then\n    sum = sum + oddCount\n  end\n  return sum\nend",
  "  -- Hint: Remember the \"mod\" operator: num % divisor == 0\n  -- Hint: You will\
    \ need to use the function \"filter\" on the \"nums\" array \n  -- (hint: use\
    \ the function \"filter\" with \"mod\" set to 0).\n  -- Hint: For the \"first\"\
    \ and \"last\" elements of the \"nums\" array, \n  -- use the \"mod\" operator\
    \ again (with \"nums\" as the left hand operand).\n  -- Remember the modulo operator:\
    \ num % divisor == 0\n  return filter(nums, function(num)\n    -- Write your code\
    \ here\n    return num % 2 == 1 and (\n      num % 10 == 1 or\n      num % 10\
    \ == 5 or\n      num % 10 == 7\n    ) and (\n      num % 10 == 3 or\n      num\
    \ % 10 == 9\n    )\n  end)\nend", "\t-- Write code here.\nend", "  local i = 0\n\
    \  local length = 0\n  local result = 0", "  -- Your code here\n  \nend", "  \
    \  local result = 0\n    for i = 1, #nums do\n        if nums[i]>10 then\n   \
    \         if nums[i] > 100 and nums[i] % 2 == 1 then\n                -- First\
    \ and last digits are odd.\n                result = result + 1\n            end\n\
    \        else\n            -- Not all elements are greater than 10.\n        end\n\
    \    end\n    return result\nend", "  -- Write your code here.\nend", "    if\
    \ #nums == 0 then\n        return 0\n    end\n    local filteredNums = {}\n  \
    \  for i = 1, #nums do\n        if nums[i] >= 10 then\n            if isOdd(nums[i])\
    \ and isOdd(nums[i - 1]) then\n                table.insert(filteredNums, nums[i])\n\
    \            end\n        end\n    end\n    return #filteredNums\nend", "   local\
    \ count = 0\n   for idx, _ in enumerate(nums) do\n      if nums[idx] > 10 and\n\
    \        ((nums[idx] % 2 == 1 and (nums[idx-1] % 2 == 1) or \n        (nums[idx-1]\
    \ % 2 == 0 and nums[idx] % 2 == 0)) then\n         count = count + 1\n      end\n\
    \   end\n   return count\nend", "  local count = 0\n  for i, num in pairs(nums)\
    \ do\n    if (num > 10 and\n      (num % 2 ~= 1 or\n        num % 10 ~= 1)) then\n\
    \      count = count + 1\n    end\n  end\n  return count\nend\nprint(specialFilter([12,\
    \ 45, 97, 98, 45, 56]))", "    local total = 0\n    for i = 1, #nums do\n    \
    \    if nums[i] >= 10 and nums[i] % 2 == 1 and nums[i] % 3 == 1 then\n       \
    \     total = total + 1\n        end\n    end\n    return total\nend", "  local\
    \ count = 0\n  for i = 0, nums - 1 do\n    if (nums[i] > 10) and (nums[i] == math.floor((nums[i])%10))\
    \ and (nums[i]%2 ~= 0) then\n      count = count + 1\n    end\n  end\n  return\
    \ count\nend", "    local count = 0\n    \n    for i = 1, #nums do\n        if\
    \ nums[i] > 10 and (nums[i] mod 2 ~= 0 or (nums[i - 1] mod 2 ~= 0 and\n      \
    \      nums[i - 1] mod 2 ~= 1))\n            then count = count + 1\n        end\n\
    \    end", "    local count = 0\n    for i = 1,#nums do\n        if nums[i] >\
    \ 10 then\n            if nums[i] % 2 == 1 then\n                if nums[i - 1]\
    \ % 2 == 1 then\n                    count = count + 1\n                end\n\
    \            end\n        end\n    end\n    return count\nend", "   local count=0\n\
    \   for num in nums do \n      if num>10 and (num%2)==1 then\n         if num>=(10*10*10*10*10*10)\
    \ and (num%2)==1 then\n            count = count + 1\n         end\n      end\n\
    \   end\n   return count\nend", "\tlocal result = 0\n\tfor i = 1,#nums do\n\t\t\
    if (nums[i] > 10) and (nums[i] % 2 ~= 0) and (nums[i] % 3 ~= 0) then\n\t\t\tresult\
    \ = result + 1\n\t\tend\n\tend\n\treturn result\nend", "    local count = 0\n\
    \    for _,v in ipairs(nums) do\n        if v > 10 then\n            if v%2 ~=\
    \ 1 and v%2 ~= 0 then\n                if v ~= (v + 1) then\n                \
    \    if v ~= (v - 1) then\n                        count = count + 1\n       \
    \             end\n                end\n            end\n        end\n    end\n\
    \    return count\nend", "    local len = 0\n    for i=1,#nums do\n        if\
    \ nums[i]>10 then\n            if nums[i]%2==0 then\n                len= len+1\n\
    \            end\n        end\n    end\n    return len\nend", "   local n = #nums\n\
    \   local count = 0\n   for i = 1, n do\n      if nums[i]%2 ~= 0 then\n      \
    \   if nums[i] >= 10 then\n            if nums[i] > 10 then\n               if\
    \ nums[i]%2 ~= 0 then\n                  if nums[i - 1]%2 ~= 0 then\n        \
    \             if nums[n - 1]%2 ~= 0 then\n                        count = count\
    \ + 1\n                     end\n                  end\n               end\n \
    \           end\n         end\n      end\n   end\n   return count\nend", "  local\
    \ numCount = 0\n  for i = 1,#nums do\n    -- If the number is greater than 10,\
    \ return it.\n    if nums[i] > 10 then\n      numCount = numCount + 1\n      --\
    \ If the first and last digit are odd, increment the counter.\n      if nums[i]\
    \ % 2 == 0 and nums[i-1] % 2 == 0 then\n        numCount = numCount + 1\n    \
    \  end\n    end\n  end\n  return numCount\nend", "  -- your code here\nend", " \
    \ local count = 0\n  for i = 1, #nums do\n    if nums[i] > 10 then\n      if nums[i]\
    \ % 2 == 1 then count = count + 1 end\n      if nums[i] % 3 == 1 then count =\
    \ count + 1 end\n      if nums[i] % 5 == 1 then count = count + 1 end\n      if\
    \ nums[i] % 7 == 1 then count = count + 1 end\n    end\n  end\n  return count\n\
    end", "  local count = 0\n  for i = 1, #nums do\n    local temp = nums[i]\n  \
    \  if temp % 10 ~= 0 then\n      count = count + 1\n      if temp % 2 ~= 0 then\n\
    \        count = count + 1\n      end\n    end\n  end\n  return count\nend", " \
    \ local counter = 0\n  for i = 1,#nums do\n    if nums[i] > 10 and\n       nums[i]\
    \ % 2 == 1 and\n       nums[i] % 2 == 1 and\n       nums[i]:match(\"^-%d%d%d%d%d%d$\"\
    ) then\n      counter = counter + 1\n    end\n  end\n  return counter\nend", " \
    \ local count = 0\n  for i = 1, #nums do\n    if (nums[i] > 10) and (nums[i] and\
    \ (nums[i] % 2)) then\n      count = count + 1\n    end\n  end\n  return count\n\
    end", "    local count = 0\n    for _, num in ipairs(nums) do\n        if num\
    \ > 10 and (num % 2 ~= 0 or num % 5 ~= 0) then\n            count = count + 1\n\
    \        end\n    end\n    return count\nend", "    -- Write your code here\n\
    \    local count = 0\n    for i,v in pairs(nums) do\n        if v > 10 and (v\
    \ % 2 == 0 and (v %2 ~= 0 or v > 9)) then\n            count = count + 1\n   \
    \     end\n    end\n    return count\nend", "\tlocal count = 0\n\tlocal firstDigit\
    \ = 0\n\tlocal lastDigit = 0\n\t\n\tfor i = 1, #nums do\n\t\tlocal digit = math.floor(nums[i]/10)\n\
    \t\t\n\t\tif digit > 0 and firstDigit % 2 == 1 and digit % 2 == 1 then\n\t\t\t\
    count = count + 1\n\t\tend\n\t\t\n\t\tif digit > 0 and lastDigit % 2 == 1 and\
    \ digit % 2 == 1 then\n\t\t\tcount = count + 1\n\t\tend\n\t\t\n\t\tif digit >\
    \ 0 and digit*10 % 2 == 1 and digit*10 % 2 == 1 then\n\t\t\tcount = count + 1\n\
    \t\tend\n\t\t\n\t\tif digit > 0 and (digit % 2 == 1 or digit % 2 == 1) and digit*10\
    \ % 2 == 1 then\n\t\t\tcount = count + 1\n\t\tend\n\t\t\n\t\tif digit > 0 and\
    \ (digit % 2 == 1 or digit % 2 == 1) and (digit*10 % 2 == 1 or digit*10 % 2 ==\
    \ 1) then\n\t\t\tcount = count + 1\n\t\tend\n\t\t\n\t\tif digit > 0 and digit\
    \ % 2 == 1 and digit*10 % 2 == 1 then\n\t\t\tcount = count + 1\n\t\tend\n\t\t\n\
    \t\tif digit > 0 and digit % 2 == 1 and (digit*10 % 2 == 1 or digit*10 % 2 ==\
    \ 1) then\n\t\t\tcount = count + 1\n\t\tend\n\t\t\n\t\tif digit > 0 and digit\
    \ % 2 == 1 and digit * 10 % 2 == 1 then\n\t\t\tcount = count + 1\n\t\tend\n\t\t\
    \n\t\tif firstDigit % 2 == 1 and (digit % 2 == 1 or digit % 2 == 1) and lastDigit\
    \ % 2 == 1 then\n\t\t\tcount = count + 1\n\t\tend\n\t\t\n\t\tif firstDigit % 2\
    \ == 1 and (digit % 2 == 1 or digit % 2 == 1) and (lastDigit % 2 == 1 or lastDigit\
    \ % 2 == 1) then\n\t\t\tcount = count + 1\n\t\tend\n\t\t\n\t\tif firstDigit %\
    \ 2 == 1 and digit % 2 == 1 and lastDigit % 2 == 1 then\n\t\t\tcount = count +\
    \ 1\n\t\tend\n\t\t\n\t\tif firstDigit % 2 == 1 and digit % 2 == 1 and (lastDigit\
    \ % 2 == 1 or lastDigit % 2 == 1) then\n\t\t\tcount = count + 1\n\t\tend\n\t\t\
    \n\t\tif firstDigit % 2 == 1 and (digit % 2 == 1 or digit % 2 == 1) and (lastDigit\
    \ % 2 == 1 or lastDigit % 2 == 1) and lastDigit % 2 == 1 then\n\t\t\tcount = count\
    \ + 1\n\t\tend\n\t\t\n\t\tif firstDigit % 2 == 1 and (digit % 2 == 1 or digit\
    \ % 2 == 1) and (lastDigit % 2 == 1 or lastDigit % 2 == 1) and (lastDigit % 2\
    \ == 1 or lastDigit % 2 == 1) then\n\t\t\tcount = count + 1\n", "\tlocal i = 0\
    \ -- Counter\n\tlocal count = 1 -- Result accumulator\n\t\n\t-- For every element\
    \ in the input array...\n\tfor i = 1, #nums do\n\t\t-- Check if the current element\
    \ is a number.\n\t\tif type(nums[i]) ~= 'number' then break end\n\t\t\n\t\t--\
    \ Check if the number is greater than 10\n\t\tif nums[i] > 10 then break end\n\
    \t\t\n\t\t-- Check if the number is odd.\n\t\tif nums[i] % 2 == 0 then break end\n\
    \t\t\n\t\t-- If this is a first or last element then increment the counter.\n\t\
    \tif i ~= #nums or i == #nums then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\t\
    \n\treturn count\nend", "  return #nums > 10 and nums[2] % 2 and nums[1] % 2\n\
    end", "    local n = 0\n    for i=1,#nums do\n        if nums[i]>10 then\n   \
    \         if nums[i]%2 and nums[i]%2 == 1 then\n                n = n+1\n    \
    \        end\n        end\n    end\n    return n\nend", "  local count = 0\n \
    \ for i = 1, #nums do\n    if nums[i] > 10 then\n      local first_odd = (math.floor(nums[i]/10)\
    \ % 2)\n      local last_odd = (math.floor(nums[i]/100) % 2)\n      if first_odd\
    \ or last_odd then\n        count = count + 1\n      end\n    end\n  end\n  return\
    \ count\nend\n</cell>\n<text>\nExercise:", "    local count = 0\n    for i = 1,\
    \ #nums do\n        if nums[i] >= 10 then\n            count = count + 1\n   \
    \         if nums[i] % 2 == 0 and nums[i] % 2 ~= (nums[i - 1] % 2) then\n    \
    \            count = count + 1\n            end\n        end\n    end\n    return\
    \ count\nend", "  -- The 'magic' number 10\n  if nums ~= 10 then\n    -- If not\
    \ '10', return 0 (as we cannot filter out anything else)\n    return 0\n  end",
  "    local numsLength = 1\n    for i = 1, #nums do\n        numsLength = numsLength\
    \ * 10 + nums[i]\n    end", "  -- ...\nend", "\tlocal result = 0\n\tfor _, num\
    \ in ipairs(nums) do\n\t\tif num > 10 and (math.floor(num / 100) % 2 == 1 or math.floor(num\
    \ / 10) % 2 == 1) then\n\t\t\tresult = result + 1\n\t\tend\n\tend\n\treturn result\n\
    end\nprint(specialFilter([98, 102, 105, 99, 108, 103, 97, 104, 105, 102, 103,\
    \ 97, 104, 105, 102, 103, 97, 104, 105, 102, 103, 97]))", "  if #nums < 2 then\
    \ return end\n  if nums[1] > 10 then return end\n  if nums[#nums - 1] % 2 ~= 1\
    \ then return end\n  local n = 1\n  local i = 2\n  while i < #nums do\n    local\
    \ d = nums[i]\n    if d > 10 and d % 2 ~= 1 then\n      n = n + 1\n    end\n \
    \   i = i + 1\n  end\n  return n\nend", "   local cnt = 0\n   for _, x in ipairs(nums)\
    \ do\n      if (x > 10 and (x % 2 == 0 or x % 3 == 0)) then\n         cnt = cnt\
    \ + 1\n      end\n   end\n   return cnt\nend", "  -- Write your solution here\n\
    \  return 0 -- Your code here\nend\n  \nprint(specialFilter(814))\nprint(specialFilter(24))\n\
    print(specialFilter(45))\nprint(specialFilter(418))\nprint(specialFilter(624))\n\
    print(specialFilter(636))\nprint(specialFilter(939))\nprint(specialFilter(949))\n\
    print(specialFilter(959))\nprint(specialFilter(1039))\nprint(specialFilter(1269))\n\
    print(specialFilter(1379))\nprint(specialFilter(1383))\nprint(specialFilter(1439))\n\
    print(specialFilter(1447))\nprint(specialFilter(1701))\nprint(specialFilter(1707))\n\
    print(specialFilter(2069))\nprint(specialFilter(2079))\nprint(specialFilter(2083))\n\
    print(specialFilter(2089))\nprint(specialFilter(2171))\nprint(specialFilter(2177))\n\
    print(specialFilter(2203))\nprint(specialFilter(2207))\nprint(specialFilter(2209))\n\
    print(specialFilter(2569))\nprint(specialFilter(2579))\nprint(specialFilter(2583))\n\
    print(specialFilter(2599))\nprint(specialFilter(2599))\nprint(specialFilter(2769))\n\
    print(specialFilter(2779))\nprint(specialFilter(2783))\nprint(specialFilter(2783))\n\
    print(specialFilter(2939))\nprint(specialFilter(2947))\nprint(specialFilter(2959))\n\
    print(specialFilter(2969))\nprint(specialFilter(2979))\nprint(specialFilter(2983))\n\
    print(specialFilter(2989))\nprint(specialFilter(3039))\nprint(specialFilter(3047))\n\
    print(specialFilter(3059))\nprint(specialFilter(3069))\nprint(specialFilter(3079))\n\
    print(specialFilter(3083))\nprint(specialFilter(3089))\nprint(specialFilter(3269))\n\
    print(specialFilter(3279))\nprint(specialFilter(3283))\nprint(specialFilter(3339))\n\
    print(specialFilter(3347))\nprint(specialFilter(3359))\nprint(specialFilter(3379))\n\
    print(specialFilter(3383))\nprint(specialFilter(3389))\nprint(specialFilter(3669))\n\
    print(specialFilter(3669))\nprint(specialFilter(3671))\nprint(specialFilter(3671))\n\
    print(specialFilter(3671))\nprint(specialFilter(3689))\nprint(specialFilter(3689))\n\
    print(specialFilter(3691))\nprint(specialFilter(3697))\nprint(specialFilter(3697))\n\
    print(specialFilter(3709))\nprint(specialFilter(3709))\nprint(specialFilter(3709))\n\
    print(specialFilter(3713))\nprint(special", "  local count = 0\n  for i = 1, #nums\
    \ do\n    if nums[i] > 10 and (nums[i] % 2 == 1 and nums[i] % 3 == 1) then\n \
    \     count = count + 1\n    end\n  end\n  return count\nend", "   local result\
    \ = 0\n   for _, v in pairs(nums) do\n      local newNum = math.floor(v / 10)\n\
    \      if newNum > 10 then\n         result = result + 1\n      end\n      if\
    \ newNum % 2 == 1 and v - 10 * newNum > 10 then\n         result = result + 1\n\
    \      end\n   end\n   return result\nend", "    local count = 1\n    for i=1,#nums\
    \ do\n        if nums[i]>10 then\n            if nums[i]%2==1 and nums[i]%5==0\
    \ then\n                count = count + 1\n            end\n        end\n    end\n\
    \    return count\nend", "  for _, num in ipairs(nums) do\n    if (num > 10 and\
    \ (num % 10 == 1 or num % 10 == 3)) then\n      return true\n    end\n  end\n\
    \  return false\nend", "\tlocal count = 0\n\tlocal i = 1\n\tfor _ in nums:gmatch('%d')\
    \ do\n\t\tif i % 2 == 0 then\n\t\t\tif not (i % 4 == 0 and i % 100 == 0) then\n\
    \t\t\t\tcount = count + 1\n\t\t\tend\n\t\tend\n\t\ti = i + 1\n\tend\n\treturn\
    \ count\nend", "    return #nums > 10 and\n        all( num:floor():mod(2)==1\
    \ and\n             num:floor():mod(3)==1 and\n             num:floor():mod(5)==1\
    \ and\n             num:floor():mod(7)==1 and\n             num:floor():mod(9)==1\
    \ )\nend\n</cell>\n<text>\nAnd now we can apply the filter to our set of numbers:",
  "  -- Write your code here.\n  return 0\nend", "  if #nums == 0 then return 0 end\n\
    \  local i = 0\n  local count = 0\n  repeat\n    local x = nums[i]\n    if x >\
    \ 10 then\n      if x % 2 == 1 and x % 2 == 0 then\n        i = i + 1\n      end\n\
    \      count = count + 1\n    end\n    i = i + 1\n  until #nums == i\n  return\
    \ count\nend", "  -- Return the length of the array.\n  return #nums\nend", " \
    \   local count = 0\n    for i=1,#nums do\n        if nums[i] > 10 then\n    \
    \        count = count + 1\n        end\n    end\n    \n    if nums[1] % 2 ~=\
    \ 0 and nums[#nums] - 1 % 2 ~= 0 then\n        count = count + 1\n    end", " \
    \ local n = 0\n  for i = 1, #nums do\n    if nums[i] > 10 and\n       (nums[i]\
    \ % 2 == 1 and nums[i]%10 == 5 and\n        nums[i]%100 == 7) then\n      n =\
    \ n + 1\n    end\n  end\n  return n\nend", "  return \n    -- Only need to compare\
    \ first and last digits to avoid counting multiple\n    -- digits. For example,\
    \ 98 would not be counted since the first\n    -- digit is 1 and the last digit\
    \ is 9.\n    nums[1] % 2 == 1 and nums[#nums-1] % 2 == 1 and\n    -- Count odd\
    \ numbers greater than 10\n    filter(nums, function(n) return n > 10 end):count()\n\
    end", "    -- Return the number of elements in the array that are\n    -- greater\
    \ than 10 and both first and last digits are odd:\n    local n = 0\n    for _,\
    \ x in ipairs(nums) do\n        if x > 10 and (modf(x)[1] == 1 and modf(x)[2]\
    \ == 1) then\n            n = n + 1\n        end\n    end\n    return n\nend",
  "  for i=1, #nums do\n    -- write your logic here\n  end\n  return #nums\nend",
  "  -- Use a for loop to go through each element in the array\n  for i = 1,#nums\
    \ do\n    -- If the element is a number, check the first and last digits\n   \
    \ -- If the first and last digits both are odd\n    if type(nums[i]) == 'number'\
    \ then\n      local firstDigit = math.floor(nums[i])\n      local lastDigit =\
    \ math.floor(nums[i]/10)\n      local firstDigitOdd = (firstDigit + 1) % 2 ~=\
    \ 0\n      local lastDigitOdd = (lastDigit + 2) % 2 ~= 0", "  -- your code here\n\
    end", '    local count = 0', "    local counter = 0\n    for i = 1, #nums do\n\
    \        if ((nums[i] > 10) and (nums[i]%2 == 1)) and (nums[i]%2 ~= 0) then\n\
    \            counter = counter + 1\n        end\n    end\n    return counter\n\
    end", "  -- BASED ON THE ASSIGNMENTS FROM THE FIRST MODULE\n  local count = 0\n\
    \  for i = 1, #nums do\n    if nums[i] > 10 and (nums[i] mod 2 ~= 1 and (nums[i]\
    \ mod 2 ~= 0)) then\n      count = count + 1\n    end\n  end\n  return count\n\
    end", "    if #nums == 0 then return 0 end\n    local count = 0\n    for i=1,#nums\
    \ do\n        if nums[i]>10 then\n            if nums[i]%2 ~= 0 and nums[i]%2\
    \ ~= 1 then\n                if ((nums[i]-10)%2 ~= 0 and (nums[i]-10)%2 ~= 1)\
    \ then\n                    count = count + 1\n                end\n         \
    \   end\n        end\n    end\n    return count\nend", "    local count = 0\n\
    \    for i = 1, #nums do\n        if nums[i] > 10 then\n            count = count\
    \ + 1\n        end\n    end\n    return count\nend", "    local count = 0\n  \
    \  for _, num in ipairs(nums) do\n        if num > 10 then\n            count\
    \ = count + 1\n            if num % 2 ~= 0 then \n                if math.floor(num/2)\
    \ ~= num then count = count + 1 end\n            end\n        end\n    end\n \
    \   return count\nend", "    local count = 0\n    for _, num in ipairs(nums) do\
    \ \n        if num > 10 and num % 2 ~= 0 and num % 2 ~= 1 then \n            count\
    \ = count + 1\n        end\n    end\n    return count\nend", "\tlocal count =\
    \ 0\n\tfor i=1,#nums do\n\t\tlocal num = nums[i]\n\t\tif num > 10 then\n\t\t\t\
    if num%2 ~= 0 then\n\t\t\t\tif num%10 ~= 0 then\n\t\t\t\t\tif num%10 ~= 1 then\n\
    \t\t\t\t\t\tcount = count + 1\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\
    \tend\n\treturn count\nend\nprint(specialFilter({1,2,3,4,5,6})) -- prints 1",
  "   -- Only return those numbers where both the first and last digits are odd.\n\
    \   return (#nums > 0 and ((nums[1] % 2) and (nums[#nums - 1] % 2)) or false)\n\
    end", "    local count = 0\n    for i = 1, #nums do\n        if nums[i] >= 10\
    \ and nums[i]%2 and nums[i]%2 == 1 then\n            count = count + 1\n     \
    \   end\n    end\n    return count\nend", "    local count = 0\n    for i=1,#nums,2\
    \ do\n        if nums[i]%2==1 and (nums[i]>10 and (nums[i]%2==0 or nums[i]%4==0))\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end", "    local result = 0\n    for i = 1, #nums do\n        if nums[i] > 10\
    \ then\n            if nums[i]%2 and nums[i]%4 == 0 then\n                result\
    \ = result + 1\n            end\n        end\n    end\n    return result\nend",
  "  -- Write your code here.\nend", "    local num_count=0\n    local num_odd=1\n\
    \    local num_even=1", "    -- Use a loop to iterate through the input array.\n\
    \    for i,n in pairs(nums) do\n        if n > 10 then\n            -- Compare\
    \ the first and last digits of each number to\n            -- see if they are\
    \ odd.\n            if math.mod(n, 2) == 1 then\n                return true\n\
    \            end\n        end\n    end\n    return false\nend", "    local total\
    \ = 0\n    for _, num in ipairs(nums) do \n        if num > 10 then\n        \
    \    if math.floor((math.floor(num / 10))) ~= math.floor((math.floor(num / 10)\
    \ % 2)) then \n                total = total + 1\n            end\n        end\n\
    \    end\n    return total\nend", "  if #nums < 1 then return nil end\n  local\
    \ count = 0\n  for i = 1, #nums do\n    local firstDigit = math.floor(nums[i])\n\
    \    local lastDigit = math.floor(nums[i])\n    if firstDigit > 10 then\n    \
    \  if lastDigit % 2 == 1 then\n        count = count + 1\n      end\n    else\n\
    \      if lastDigit % 2 == 0 then\n        count = count + 1\n      end\n    end\n\
    \  end\n  return count\nend", "    -- Your code here\n    return #nums\nend",
  "    local count = 0\n    for i = 1, #nums do\n        if nums[i] >= 10 and (nums[i]\
    \ % 2) == 1 then\n            count = count + 1\n        end\n    end\n    return\
    \ count\nend", "  local count = 0\n  for _, num in pairs(nums) do\n    if num\
    \ > 10 then\n      if num % 2 ~= 0 and num % 2 ~= 1 then\n        count = count\
    \ + 1\n      end\n    end\n  end\n  return count\nend", "    local count = 1\n\
    \    for i,v in pairs(nums) do\n        if v > 10 and (v mod 2) = 0 then\n   \
    \         count = count + 1\n        end\n    end\n    return count\nend", " \
    \ local n = 0\n  for _, v in ipairs(nums) do\n    if v > 10 and\n      (type(v)\
    \ == 'number' and\n        v ~= math.floor(v) and\n        v ~= math.ceil(v))\
    \ then\n      n = n + 1\n    end\n  end\n  return n\nend", "  -- Write your code\
    \ here.\n  local i = 0\n  local n = 1\n  local sum = 0\n  while i < #nums do\n\
    \    if nums[i] >= 10 then\n      if nums[i]%2 == 1 then\n        sum = sum +\
    \ n\n        n = n + 1\n      else\n        n = n + 1\n      end\n    end\n  \
    \  i = i + 1\n  end\n  return sum\nend", "    -- your code here\nend", "    local\
    \ count = 0\n    for _,v in ipairs(nums) do\n        if ((v > 10) and (math.mod(v,\
    \ 2) == 1)) then\n            count = count + 1\n        end\n    end\n    return\
    \ count\nend", "\tlocal count = 0\n\tfor i = 1, #nums do\n\t\tif nums[i] > 10\
    \ then\n\t\t\tif nums[i] % 2 == 0 and (nums[i] % 5 == 0 or nums[i] % 7 == 0) then\n\
    \t\t\t\tcount = count + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend", " \
    \   -- Your code here\nend", "    -- Your code here.\n    return nums\nend\n</cell>\n\
    <text>\nTo find how many elements of the array are greater than 10, use the filter\
    \ function. The filter function returns an array:", "  local total = 0\n  for\
    \ i = 1, #nums do\n    if nums[i] > 10 then\n      total = total + 1\n      if\
    \ nums[i] % 2 == 1 and nums[i - 1] % 2 == 1 then\n        total = total + 1\n\
    \      end\n    end\n  end\n  return total\nend", "    local numsLength = #nums\n\
    \    local count = 0\n    for i = 1, numsLength do\n        if nums[i] >= 10 and\
    \ (nums[i] % 2 == 1) and (nums[i-1] % 2 == 1) then\n            count = count\
    \ + 1\n        end\n    end\n    return count\nend", "  local counter = {}\n \
    \ for i = 1, #nums do\n    if (nums[i] < 10 and nums[i] % 2 ~= 0 and nums[i] %\
    \ 2 ~= 1) then\n      table.insert(counter, nums[i])\n    end\n  end\n  return\
    \ table.concat(counter)\nend", "  local sum = 0\n  for _, num in ipairs(nums)\
    \ do \n    if num > 10 then\n      if num % 2 == 1 then\n        if num > 10 then\n\
    \          sum = sum + 1\n        end\n      end\n    end\n  end\n  return sum\n\
    end\nprint(specialFilter([4, 12, 45, 12, 95, 34]))", "\tlocal count = 0\n\tfor\
    \ i, v in pairs(nums) do\n\t\tif v > 10 then\n\t\t\tif v % 2 ~= 0 then\n\t\t\t\
    \tcount = count + 1\n\t\t\telse\n\t\t\t\tif math.floor(v / 2) ~= v then\n\t\t\t\
    \t\tcount = count + 1\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn count\n\
    end", "  local count = 0\n  for _, num in pairs(nums) do\n    if num > 10 and\
    \ num % 2 == 1 and num % 3 ~= 0 then\n      count = count + 1\n    end\n  end\n\
    \  return count\nend", "    -- your code goes here\n    -- return\n    -- end\n\
    end", "    local count = 0\n    for _,num in ipairs(nums) do\n        if num >\
    \ 10 then\n            if math.mod(num, 2) ~= 0 then\n                count =\
    \ count + 1\n            end\n            if math.mod(num % 10, 2) ~= 0 then\n\
    \                count = count + 1\n            end\n        end\n    end\n  \
    \  return count\nend", "\tlocal sum = 0\n\t\n\tfor i = 1, #nums do\n\t\tlocal\
    \ n = nums[i]\n\t\t\n\t\tif n > 10 then\n\t\t\tsum = sum + 2\n\t\telse\n\t\t\t\
    sum = sum + 1\n\t\tend\n\tend\n\t\n\treturn sum\nend", "   local count = 0\n \
    \  for i=1,#nums do\n      if nums[i]>10 and (nums[i]%2 == 1 or nums[i]%2 == 0)\
    \ then\n         count = count + 1\n      end\n   end\n   return count\nend",
  "  -- Use a for loop to solve this problem\n  -- Note that in Lua, the for loop\
    \ is just syntactic sugar for a while loop\n  -- This means that you can do the\
    \ exact same thing you would do in C, Java, C++, etc\n  for i,num in ipairs(nums)\
    \ do\n    -- This if statement is just a filter that checks whether the number\
    \ \n    -- that is being iterated on is greater than 10\n    -- Also note that\
    \ the mod operator % gets the remainder of a division operation\n    -- For example:\
    \ 10 / 2 = 5 % 2 = 1\n    if num > 10 then\n      -- This is where the magic happens\n\
    \      -- If this number is even and the first digit of the number is odd\n  \
    \    if math.mod(num,2) == 1 then\n        -- And this number is odd and the last\
    \ digit of the number is even\n        if math.mod(num,1) == 0 then\n        \
    \  -- Then the number is odd\n          return num\n        end\n      end\n \
    \   end\n  end\nend", "    -- your code here\n    return 1\nend", "    local length\
    \ = 0\n    for i = 1, #nums do\n        if nums[i] > 10 then\n            if nums[i]\
    \ % 2 == 0 then\n                if nums[i - 1] % 2 == 1 then\n              \
    \      if nums[i + 1] % 2 == 1 then\n                        length = length +\
    \ 1\n                    end\n                end\n            end\n        end\n\
    \    end\n    return length\nend\nprint(specialFilter([123,14,15,56,7,90]))\n\
    </cell>\n<cell>", "  return #nums > 10 and\n    nums[1] % 2 == 1 and\n    nums[#nums]\
    \ and nums[#nums - 1] % 2 == 1\nend", "    local count = 0\n    for index, num\
    \ in ipairs(nums) do\n        if num > 10 and num % 2 == 1 and num % 2 ~= (num\
    \ % 2) then\n            count = count + 1\n        end\n    end\n    return count\n\
    end", "  if #nums < 2 then\n    return 0\n  end\n  local count = 0\n  local n\
    \ = nums[1]\n  for i = 2, #nums do\n    -- first and last digits are odd\n   \
    \ if nums[i] % 2 ~= 1 then\n      -- first digit is even\n      if n % 2 == 0\
    \ then\n        -- first and last digits are even\n        if nums[i] <= n then\n\
    \          count = count + 1\n        end\n      else\n        -- first and last\
    \ digits are odd\n        if nums[i] < n then\n          count = count + 1\n \
    \       end\n      end\n    end\n    -- first digit is even\n    if n % 2 == 1\
    \ then\n      -- last digit is even\n      if nums[i] <= n then\n        count\
    \ = count + 1\n      end\n    else\n      -- last digit is odd\n      if nums[i]\
    \ < n then\n        count = count + 1\n      end\n    end\n    n = nums[i]\n \
    \ end\n  return count\nend", "  -- Write your code here.\n  local length = 0\n\
    \  for i = 1, #nums do\n    local num = \"\" .. nums[i]\n    local digit = string.sub(num,\
    \ 1, 1)\n    local odd_first = digit == \"1\"\n    local odd_last = digit == \"\
    9\"\n    if odd_first and odd_last then\n      length = length + 1\n    end\n\
    \  end\n  return length\nend", "  -- Note: This is not the most efficient/elegant\
    \ solution. \n  -- Just an example of what not to do.\n  local count = 0\n  for\
    \ i,v in ipairs(nums) do\n    if (v > 10) and (math.mod(v, 2) == 1) and (math.mod(math.floor(math.log10(v)),\
    \ 2) == 1) then\n      count = count + 1\n    end\n  end\n  return count\nend\n\
    print(specialFilter([111, 1512, 135, 835]))"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
