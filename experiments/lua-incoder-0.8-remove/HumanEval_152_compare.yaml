name: HumanEval_152_compare
language: lua
prompt: "-- I think we all remember that feeling when the result of some long-awaited\n\
  -- event is finally known. The feelings and thoughts you have at that moment are\n\
  -- definitely worth noting down and comparing.\n-- Your task is to determine if\
  \ a person correctly guessed the results of a number of matches.\n-- You are given\
  \ two arrays of scores and guesses of equal length, where each index shows a match.\
  \ \n-- Return an array of the same length denoting how far off each guess was. If\
  \ they have guessed correctly,\n-- the value is 0, and if not, the value is the\
  \ absolute difference between the guess and the score.\n-- example:\nlocal function\
  \ compare(game, guess)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = compare\n\
  \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 1}, {1, 2, 3, 4, 2, -2}), {0, 0,\
  \ 0, 0, 3, 3})\n    lu.assertEquals(candidate({0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0,\
  \ 0}), {0, 0, 0, 0, 0, 0})\n    lu.assertEquals(candidate({1, 2, 3}, {-1, -2, -3}),\
  \ {2, 4, 6})\n    lu.assertEquals(candidate({1, 2, 3, 5}, {-1, 2, 3, 4}), {2, 0,\
  \ 0, 1})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local results = {}\n    for i = 1, #game do\n        local diff\
    \ = math.abs(guess - game[i])\n        if game[i] == guess then\n            results[i]\
    \ = 0\n        else\n            results[i] = diff\n        end\n    end\n   \
    \ return results\nend", "  local matches = {0,1,2,3,3,4,4,4,5,5,5,5,6}\n  local\
    \ scores = {9,10,10,10,10,11,12,12,12,12,14,15,15,15,15,16}\n  local result =\
    \ {}", '  local differences = {}', "  local scores = {}\n  for i = 1, #game do\n\
    \    scores[i] = -game[i]\n  end\n  for i = 1, #guess do\n    scores[i] = abs(guess[i]\
    \ - scores[i])\n  end\n  return scores\nend", "    -- write your comparison here\n\
    \    return 0\nend", "\tlocal scores = {\n\t\t{ game[0], game[1], game[2], game[3],\
    \ game[4] },\n\t\t{ game[5], game[6], game[7], game[8], game[9] },\n\t\t{ game[10],\
    \ game[11], game[12], game[13], game[14] },\n\t\t{ game[15], game[16], game[17],\
    \ game[18], game[19] },\n\t\t{ game[20], game[21], game[22], game[23], game[24]\
    \ }\n\t}", "  local scores = {\n    50, 50, 100, 150, 200,\n    10, 20, 30, 40,\
    \ 50,\n    100, 150, 200, 250, 250,\n  }\n  local guesses = {\n    25, 50, 100,\
    \ 150, 200,\n    50, 100, 150, 200, 250,\n    250, 250, 300, 350, 350,\n  }",
  "  local function compare_to_scores(scores, guesses)\n    local total = 0\n    for\
    \ i=1,#scores do\n      total = total + abs(scores[i - 1]-guess[i])\n    end\n\
    \    return total\n  end\n  local guesses = { guess[1], guess[2], guess[3], guess[4]\
    \ }\n  local scores = { game[1], game[2], game[3], game[4] }\n  -- Note: You can\
    \ compare scores and guesses separately if both arrays are of equal size.\n  return\
    \ compare_to_scores(scores, guesses)\nend", "  local scores = {1,5,7,3,5,1,3,7,4,1}\n\
    \  local guesses = {1,5,7,3,5,2,3,7,4,1}\n  local out = {}\n  for i = 1,#guesses\
    \ do\n    local score = scores[i]\n    local guess = guesses[i]\n    out[i] =\
    \ #out + 1\n    -- compare scores\n    if abs(guess - score) < 1 then\n      out[i]\
    \ = out[i] - 1\n    end\n  end\n  return out\nend\nprint(compare({1,5,7,3,5,1,3,7,4,1},\
    \ {1,5,7,3,5,2,3,7,4,1}))", "    -- TODO: your code here\nend", "    local index\
    \ = 0\n    local gameLen = #game\n    local guessLen = #guess\n    local newGuess\
    \ = { }\n    for i = 1, guessLen do\n        if game[i] == guess[i] then\n   \
    \         newGuess[index] = 0\n        else\n            newGuess[index] = game[i]\
    \ - guess[i]\n        end\n        index = index + 1\n    end\n    return newGuess\n\
    end", "    local function error(err)\n        print(\"Catched error: \", err)\n\
    \    end\n    local function success(game, guess)\n        -- local function success(game,\
    \ guess)\n        -- local function success(guess)\n        return game\n    end\n\
    \    local function game(guess)\n        -- local function game(guess)\n     \
    \   return success(guess)\n    end\n    local function guess(game, score)\n  \
    \      -- local function guess(game, score)\n        return game(guess)\n    end\n\
    \    local function game(guess)\n        -- local function game(guess)\n     \
    \   return success(guess)\n    end\n    local function guess(game, score)\n  \
    \      -- local function guess(game, score)\n        return game(guess)\n    end\n\
    \    local function game(guess)\n        -- local function game(guess)\n     \
    \   return success(guess)\n    end\n    local function guess(game, score)\n  \
    \      -- local function guess(game, score)\n        return game(guess)\n    end\n\
    \    local function guess(guess)\n        -- local function guess(guess)\n   \
    \     return success(guess)\n    end\n    local function guess(guess)\n      \
    \  -- local function guess(guess)\n        return success(guess)\n    end\n  \
    \  local function guess(guess)\n        -- local function guess(guess)\n     \
    \   return success(guess)\n    end\n    local function guess(game, score)\n  \
    \      -- local function guess(game, score)\n        return game(guess)\n    end\n\
    \    local function guess(guess)\n        -- local function guess(guess)\n   \
    \     return success(guess)\n    end\n    local function guess(game, score)\n\
    \        -- local function guess(game, score)\n        return game(guess)\n  \
    \  end\n    local function guess(score)\n        -- local function guess(score)\n\
    \        return success(score)\n    end\n    local function score(score)\n   \
    \     -- local function score(score)\n        return success(score)\n    end\n\
    \    local function guess(game, score)\n        -- local function guess(game,\
    \ score)\n        return game(guess)\n    end\n    local function guess(score)\n\
    \        -- local function guess(score)\n        return success(score)\n    end\n\
    \    local function guess(game, score)\n        -- local function guess(game,\
    \ score)\n        return game(guess)\n    end\n    local function guess(guess)\n\
    \        -- local function guess(guess)\n        return success(guess)\n    end\n\
    \    local function guess(guess)\n        -- local function guess(guess)\n   \
    \     return success(guess)\n", "  local result = {} -- return value\n  for i\
    \ = 1, #game, 1 do\n    local score = game[i]\n    local guess = guess[i]\n  \
    \  if guess ~= 0 then\n      local wrong = score-guess -- absolute difference\n\
    \      table.insert(result, wrong) -- append the difference to the return value\n\
    \    else\n      table.insert(result, 0)\n    end\n  end\n  return result\nend",
  "  local distance = 0\n  local scores = {game[1], game[2], game[3], game[4], game[5],\
    \ game[6]}\n  for idx = 1, #guess do\n    distance = toNumber(guess[idx])-scores[idx]\n\
    \    if distance > 0 then\n      distance = math.abs(distance)\n    end\n  end\n\
    \  return distance\nend", "  -- write your implementation here\n  return game:diff(guess)\n\
    end", "  local score1, score2 = game[1], game[2]\n  local diff = {}\n  for _,\
    \ v in pairs(guess) do\n    diff[v] = abs(score1[v] - score2[v])\n  end\n  return\
    \ diff\nend", "    local scores = {}\n    local gscores = {}\n    for i=1,#game\
    \ do\n        table.insert(scores, game[i])\n        table.insert(gscores, guess[i])\n\
    \    end\n    \n    local diffs = {}\n    for i=1,#gscores do\n        table.insert(diffs,\
    \ abs(gscores[i]-scores[i]))\n    end", "  -- This code assumes our guess array\
    \ is sorted.\n  local i,j\n  local game = { ... }\n  local guess = { ... }\n \
    \ local result = 0\n  for i = 1, #game do -- iterate over our scores\n    for\
    \ j = 1, #guess do -- iterate over our guesses\n      -- If the two indices do\
    \ not match, exit the loop.\n      if game[i] == guess[j] then\n        return\
    \ -1\n      end\n    end\n    -- If we don't exit the loop, it's because we found\
    \ a match.\n    -- Add the difference between the guess and the score.\n    local\
    \ diff = abs(game[i] - guess[i])\n    result = result + diff\n  end\n  return\
    \ result\nend", "    local scores = {\n        -- A: -7, B: -6, C: -5, D: -4,\
    \ E: -3, F: -2, G: -1, H: 0, I: 1, J: 2, K: 3, L: 4, M: 5, N: 6, O: 7, P: 8, Q:\
    \ 9, R: 10, S: 11, T: 12, U: 13, V: 14, W: 15, X: 16, Y: 17, Z: 18, a: 0, b: 0,\
    \ c: 0, d: 0, e: 0, f: 0, g: 0, h: 0, i: 0, j: 0, k: 0, l: 0, m: 0, n: 0,\n  \
    \  }\n    local guesses = {\n        -- A: -7, B: -6, C: -5, D: -4, E: -3, F:\
    \ -2, G: -1, H: 0, I: 1, J: 2, K: 3, L: 4, M: 5, N: 6, O: 7, P: 8, Q: 9, R: 10,\
    \ S: 11, T: 12, U: 13, V: 14, W: 15, X: 16, Y: 17, Z: 18, a: 0, b: 0, c: 0, d:\
    \ 0, e: 0, f: 0, g: 0, h: 0, i: 0, j: 0, k: 0, l: 0, m: 0, n: 0,\n    }\n    for\
    \ i = 1, #game, 1 do\n        -- For each score, calculate how far off the score\
    \ is from each guess. \n        -- If the guesses are correct, the scores will\
    \ be equal and we can return 0.\n        -- If the guesses are not correct, we\
    \ can return the absolute difference of the scores and the guesses.\n        local\
    \ difference = abs(scores[i] - guesses[i])\n        if scores[i] == guesses[i]\
    \ then return 0 end\n        if difference > 0 then return difference end\n  \
    \  end\n    return difference\nend\nprint(compare({-7, -6, -5, -4, -3, -2, -1,\
    \ 0, 1,  2,  3,  4,  5,  6,  7,  8,  9,  10, 11, 12, 13, 14, 15, 16, 17, 18, 19,\
    \ 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38,\
    \ 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57,\
    \ 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76,\
    \ 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95,\
    \ 96, 97, 98, 99, 100}, {-7, -6, -5, -4, -3, -2, -1, 0, 1,  2,  3,  4,  5,  6,\
    \  7,  8,  9,  10, ", "    local correct = 0\n    for i, x in ipairs(game) do\n\
    \      if x == guess[i] then\n        correct = correct + 1\n      end\n    end\n\
    \    return correct\nend", "    assert(#game == #guess)\n    local function check(g)\n\
    \        local ok, delta, score = #g > 0, #g < #game, g[#g]\n        if ok then\n\
    \            if score > g[score] then -- guess is wrong, return it's delta\n \
    \               delta = math.abs(guess[score] - score)\n                return\
    \ delta\n            end\n            -- guess is correct, return nothing\n  \
    \          return nil\n        end\n        -- guess is not correct and we still\
    \ have guesses to try\n        return check(g + 1)\n    end\n    return check(1)\
    \ -- starting with first guess only\nend", "\tlocal correct = {}\n\tlocal total\
    \ = 0\n\tfor i = 0, #game do\n\t\tlocal score = game[i]\n\t\tif guess == score\
    \ then\n\t\t\tcorrect[i] = 0\n\t\t\ttotal = total + 1\n\t\telse\n\t\t\tlocal diff\
    \ = guess - score\n\t\t\tif diff > 0 then\n\t\t\t\tcorrect[i] = diff\n\t\t\t\t\
    total = total + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn correct, total\nend\nprint(compare({5,8,3,4,5},\
    \ {6,9,5,6,9}))", "    -- your code here\n    return -- your answer\nend", " \
    \ local results = {}\n  for i = 1, #game do\n    local score = game[i]\n    local\
    \ guess = guess[i]\n    local scoreDiff = math.abs(score - guess)\n    results[#results\
    \ + 1] = scoreDiff\n  end\n  return results\nend", "\tlocal ret = {} -- the return\
    \ value\n\tlocal guessed, score = game:GetScore(guess)\n\t\n\t-- If the guess\
    \ is correct, return 0, if not correct the difference\n\t-- This is just an indicator\
    \ of how wrong we were.\n\tif guessed == score then\n\t\tret[0] = 0\n\telse\n\t\
    \tret[0] = score-guessed\n\tend", "   local scores = {{1,2,3},{4,5,6},{7,8,9}}\n\
    \   local guesses = {{1,2,3},{4,5,6},{7,8,9}}\n   local results = {}", "  if #game~=#guess\
    \ then \n    return nil\n  else\n    local out = {}\n    for i=1,#game do\n  \
    \    local diff = (guess[i] - game[i])\n      if diff < 0 then diff = -diff end\n\
    \      if diff == 0 then\n        out[i] = 0\n      else\n        out[i] = diff\n\
    \      end\n    end\n    return out\n  end\nend", "  -- write your solution here\n\
    \  return game\nend", "\t-- Your code goes here\nend", "  -- code goes here\n\
    end", "   local results = {}\n   for i=1,#game,2 do\n      local score = game[i]\n\
    \      local guess = guess[i]\n      table.insert(results, math.abs(guess-score))\n\
    \   end\n   return results\nend", "    local scores = {\n        [\"blue\"] =\
    \ 30,\n        [\"green\"] = 20,\n        [\"red\"] = 35,\n        [\"yellow\"\
    ] = 25\n    }\n    local guesses = {\n        [\"blue\"] = 3,\n        [\"green\"\
    ] = 3,\n        [\"red\"] = 3,\n        [\"yellow\"] = 2\n    }\n    local ans\
    \ = {} -- the resulting array to be returned\n    local offset = 0", "  if #game\
    \ ~= #guess then return end\n  local scores = {}\n  local diffs = {}\n  for i\
    \ = 1, #game do\n    table.insert(scores, abs(game[i] - guess[i]))\n    if game[i]\
    \ == guess[i] then\n      table.insert(diffs, 0)\n    else\n      table.insert(diffs,\
    \ abs(game[i] - guess[i]) - 1)\n    end\n  end\n  return scores\nend", "  local\
    \ difference = nil\n  local correctness = nil\n  for i=1, #game do\n    difference\
    \ = game[i] - guess[i]\n    if difference < 0 then\n      difference = difference\
    \ * -1\n    end\n    if difference == 0 then\n      difference = 0\n    end\n\
    \    if difference > 0 then\n      difference = difference\n    else\n      difference\
    \ = difference * -1\n    end\n    correctness = correctness + difference\n  end\n\
    \  return correctness\nend", "   local gameScores = {100,200,300}\n   local gameGuesses\
    \ = {60,70,80}\n   local compareArray = table.Copy(guess)\n   local compared =\
    \ 0\n   while compared < #compareArray do\n      local score = 0\n      for i\
    \ = 1, #game do\n         if game[i] == gameScores[game[i]] then\n           \
    \ score = score + 1\n         end\n      end\n      compared = compared + score\n\
    \      compareArray[compared] = compareArray[compared] - score\n   end\n   return\
    \ compareArray\nend", "   local bestScore = game:score()\n   local bestGuess =\
    \ game:guess()\n   local scoreArray = game:scores()\n   local guessArray = game:guesses()\n\
    \   local diffs = {}\n   for i = 1, #guessArray do\n      local score = scoreArray[i]\n\
    \      local guess = guessArray[i]\n      local newScore = score\n      if guess\
    \ ~= bestGuess then\n         newScore = score - bestScore\n      end\n      if\
    \ newScore ~= bestScore then\n         local diff = abs(bestGuess - guess)\n \
    \        bestScore = newScore\n         bestGuess = guess\n         diffs[#diffs\
    \ + 1] = diff\n      end\n   end\n   return diffs\nend", "    local results =\
    \ {}\n    for i=1,#game do\n        local diff = abs(guess[i] - game[i])\n   \
    \     if guess[i] ~= game[i] then results[i] = diff end\n    end\n    return results\n\
    end", "\tlocal game = [[\n\t\t0 5 3 4 1 1\n\t\t2 3 1 5 4 5\n\t\t3 5 6 6 7 3\n\t\
    ]] \n\tlocal guess = [[\n\t\t3 4 5 4 5 1\n\t\t2 3 1 5 4 5\n\t\t3 5 6 6 7 3\n\t\
    ]]\n\tlocal answer = 3\n\tlocal off = compare(game, guess)\n\tprint(off)\nend",
  "\tlocal result = {}\n\tlocal count = 0", "   -- do your stuff here\n   return 0\n\
    end", "  -- TODO: your code here\nend", "    local scores = {\n        { 10, 10,\
    \ 7, 6, 5, 2, 0 },\n        { 4, 5, 2, 7, 3, 6, 1 },\n        { 2, 5, 6, 4, 8,\
    \ 3, 7 },\n        { 1, 3, 6, 4, 8, 9, 10 },\n        { 7, 2, 8, 0, 8, 3, 4 },\n\
    \    }\n    local guesses = {\n        { 4, 2, 7, 3, 6, 1, 0 },\n        { 8,\
    \ 5, 6, 4, 8, 9, 10 },\n        { 1, 3, 6, 4, 8, 9, 10 },\n        { 7, 2, 8,\
    \ 0, 8, 3, 4 },\n        { 4, 5, 2, 7, 3, 6, 1 },\n        { 8, 5, 6, 4, 8, 9,\
    \ 10 },\n    }\n    local function compare(game, guess)\n        local scores\
    \ = {\n            { 10, 10, 7, 6, 5, 2, 0 },\n            { 4, 5, 2, 7, 3, 6,\
    \ 1 },\n            { 2, 5, 6, 4, 8, 3, 7 },\n            { 1, 3, 6, 4, 8, 9,\
    \ 10 },\n            { 7, 2, 8, 0, 8, 3, 4 },\n        }\n        local guesses\
    \ = {\n            { 4, 2, 7, 3, 6, 1, 0 },\n            { 8, 5, 6, 4, 8, 9, 10\
    \ },\n            { 1, 3, 6, 4, 8, 9, 10 },\n            { 7, 2, 8, 0, 8, 3, 4\
    \ },\n            { 4, 5, 2, 7, 3, 6, 1 },\n            { 8, 5, 6, 4, 8, 9, 10\
    \ },\n        }\n        local function compare(game, guess)\n            local\
    \ scores = {\n                { 10, 10, 7, 6, 5, 2, 0 },\n                { 4,\
    \ 5, 2, 7, 3, 6, 1 },\n                { 2, 5, 6, 4, 8, 3, 7 },\n            \
    \    { 1, 3, 6, 4, 8, 9, 10 },\n                { 7, 2, 8, 0, 8, 3, 4 },\n   \
    \         }\n            local guesses = {\n                { 4, 2, 7, 3, 6, 1,\
    \ 0 },\n                { 8, 5, 6, 4, 8, 9, 10 },\n                { 1, 3, 6,\
    \ 4, 8, 9, 10 },\n                { 7, 2, 8, 0, 8, 3, 4 },\n                {\
    \ 4, 5, 2, 7, 3, 6, 1 },\n                { 8, 5, 6, 4, 8, 9, 10 },\n        \
    \    }\n            local function compare(game, guess)\n                local\
    \ scores = {\n                    { 10, 10, 7, 6, 5, 2, 0 },\n               \
    \     { 4, 5, 2, 7, 3, 6, 1 },\n                    { 2, 5, 6, 4, 8, 3, 7 },\n\
    \                    { 1, 3, 6, 4, 8, 9, 10 },\n                    { 7, 2, 8,\
    \ 0, 8, 3, 4 },\n                }\n                local guesses = {\n      \
    \              { 4, 2, 7, 3, 6, 1, 0 },\n                    { 8, 5, 6, 4, 8,\
    \ 9, 10 },\n                    { 1, 3, 6, ", "    local distances = {}\n    for\
    \ i = 1, #game do\n        --print(\"\\t\", guess[i])\n        distances[i] =\
    \ abs(game[i] - guess[i])\n    end\n    return distances\nend", "    local gameScores\
    \ = game:score()\n    local guessScores = guess:score()\n    local result = {}\n\
    \    for i = 1, #gameScores do\n        result[i] = 0\n    end\n    for i = 1,\
    \ #guessScores do\n        if gameScores[i] == guessScores[i] then\n         \
    \   result[i] = 0\n        elseif gameScores[i] < guessScores[i] then\n      \
    \      result[i] = gameScores[i] - guessScores[i]\n        else\n            result[i]\
    \ = guessScores[i] - gameScores[i]\n        end\n    end\n    return result\n\
    end", "    return \nend", "  local gameScore = game[2]\n  local guessScore = guess[2]\n\
    \  local results = {}\n  for i = 1, #guess do\n    local diff = guessScore[i]\
    \ - gameScore[i]\n    if diff < 0 then diff = -diff end\n    results[i] = diff\n\
    \  end\n  return results\nend", "  return guess:map(function (x)\n    return x\
    \ - game[x]\n  end)\nend", "    local score = {1,2,3,4}\n    local guess = {1,3,7,1}\n\
    \    return compare(score,guess)\nend", "    return \nend", "   -- todo\nend",
  "   local bestScore = game[0]\n   local bestScoreIndex = game[1]\n   local bestGuessIndex\
    \ = game[2]", "  -- TODO: compare guesses, return score or difference of guesses\n\
    \  return 0\nend", "    local correct = { }\n    for i=1,#game do \n       if\
    \ game[i] == guess then \n           correct[i] = 0\n       else\n           correct[i]\
    \ = abs(game[i]-guess)\n       end\n    end\n    return correct\nend", "    local\
    \ scores = {\n        [13] = {4, 8, 5},\n        [8] = {12, 14, 7},\n        [11]\
    \ = {9, 10, 3},\n    }\n    local guesses = {\n        [13] = {4, 7, 9},\n   \
    \     [8] = {12, 11, 10},\n        [11] = {9, 10, 3},\n    }\n    --[[\n     \
    \   Your code should work with the following tests:\n        compare({4, 8, 5},\
    \ {4, 7, 9})\n        returns {{0, 0, 0}}\n        compare({4, 8, 5}, {4, 5, 9})\n\
    \        returns {{1, 0, 0}}\n        compare({4, 8, 5}, {4, 4, 5})\n        returns\
    \ {{0, 0, 1}}\n        compare({4, 8, 5}, {7, 7, 9})\n        returns {{0, 0,\
    \ -1}}\n        compare({4, 8, 5}, {7, 7, 4})\n        returns {{0, 0, 1}}\n \
    \   ]]\n    local correct = 0\n    local total = 0\n    for i = 1, #guesses do\n\
    \        for j = 1, #guesses[i] do\n            if guesses[i][j] == game[i][j]\
    \ then\n                correct = correct + 1\n                total = total +\
    \ 1\n            end\n        end\n    end\n    --[[\n        if the total is\
    \ 0, you won, otherwise you lose.\n        Since there are 3 games, if the total\
    \ is 1 then you won.\n    ]]\n    if total == 0 then\n        return {correct,\
    \ 0, 0}\n    else\n        return {total, abs(correct - total), 0}\n    end\n\
    end", "   local game = [1,5,2,2,4]\n   local guess = [2,3,1,5,4]\n   local results\
    \ = {}\n   for i=1,#guess do\n      table.insert(results, absdiff(guess[i], game[i]))\n\
    \   end\n   return results\nend", "   local scores = {}\n   for i=1,#game do\n\
    \      scores[i] = abs(game[i]-guess[i])\n   end\n   return scores\nend", '   local
    results = {}', "   local results = {}\n   for i = 1, #game do\n      if game[i]\
    \ == guess[i] then\n         -- guess is correct\n         results[i] = 0\n  \
    \    elseif game[i] == guess[i] and game[i] > guess[i] then\n         -- guess\
    \ is too low\n         results[i] = game[i] - guess[i]\n      elseif game[i] ==\
    \ guess[i] and game[i] < guess[i] then\n         -- guess is too high\n      \
    \   results[i] = guess[i] - game[i]\n      else\n         -- guess was wrong\n\
    \         results[i] = game[i] - guess[i]\n      end\n   end\n   return results\n\
    end", "    return game:GetScore() - abs(guess[game:GetGuesses() - 1])\nend", "\t\
    -- your code\nend", "  local correct = game[1]\n  local game2 = {}\n  for _, game\
    \ in pairs(game) do\n    local diff = 0\n    for _, b in ipairs(guess) do diff\
    \ = diff + (b-game) end\n    game2[_] = diff\n  end\n  return game2\nend", " \
    \ -- some code goes here\nend", "\tlocal correct = 0\n\tlocal difference\n\tfor\
    \ i = 1, #guess do\n\t\tif game[i] ~= guess[i] then\n\t\t\tdifference = abs(game[i]\
    \ - guess[i])\n\t\t\tif difference == 0 then\n\t\t\t\tcorrect = correct + 1\n\t\
    \t\tend\n\t\tend\n\tend\n\treturn correct .. difference\nend", "    if game[#game]\
    \ > #guess then return nil end\n    local diff = {}\n    for i = 1, #game, 1 do\n\
    \        if game[i] == guess[i] then\n            diff[i] = 0\n        else\n\
    \            diff[i] = abs(game[i] - guess[i])\n        end\n    end\n    return\
    \ diff\nend", "   -- your code here\nend", "    local score1 = {1, 2, 3}\n   \
    \ local score2 = {3, 2, 1}\n    local guess = {1, 2, 3}\n    return compare_scores(score1,\
    \ score2, guess) \nend ", "    local i = 0\n    local scores = 0\n    local guesses\
    \ = {}\n    for i = 1,#game do\n        table.insert(guesses, guess[i])\n    end\n\
    \    local correct = #guesses\n    local guesses_sum = 0\n    local sum_guesses\
    \ = #guesses\n    for i = 1,#guess do\n        table.insert(guesses, guess[i])\n\
    \    end\n    for i = 1,#game-1 do\n        scores = scores + game[i]\n    end\n\
    \    for i = 1,#guess do\n        sum_guesses = sum_guesses + guess[i]\n    end\n\
    \    for i = 1,#guesses do\n        guesses_sum = guesses_sum + guess[i]\n   \
    \ end\n    if guesses_sum == sum_guesses then\n        for i = 1,#guess do\n \
    \           if guess[i] == game[i] then\n                correct = correct + 1\n\
    \            end\n        end\n    end\n    if correct == #guess then\n      \
    \  return scores\n    else\n        return abs(scores - guesses_sum)\n    end\n\
    end", "    -- todo: your code goes here\nend", "\tlocal scores = {\n\t\t{0,0},\
    \ {2,3}, {3,6}, {3,9}, {4,1}, {5,8}, {7,4}, {10,1}\n\t}\n\tlocal guesses = {\n\
    \t\t{ 0,0 }, { 1,2 }, { 2,3 }, { 3,4 }, { 4,5 }, { 5,6 }, { 6,7 }, { 7,8 }, {\
    \ 8,9 },\n\t\t{ 9,10 },\n\t}\n\t-- your code goes here!\n\tlocal results = {}\n\
    \tlocal sum = 0\n\tfor i = 1, #game, 1 do\n\t\tlocal g = guesses[i - 1]\n\t\t\
    local s = scores[i-1]\n\t\tlocal diff = abs(g[1] - s[1] + g[2] - s[2] + g[3] -\
    \ s[3] - g[4] - s[4] - g[5] - s[5])\n\t\tif diff > 0 then\n\t\t\ttable.insert(results,\
    \ diff)\n\t\t\tsum = 1\n\t\telse\n\t\t\tsum = sum + diff\n\t\tend\n\tend\n\tif\
    \ sum == 0 then\n\t\treturn results\n\telse\n\t\treturn results\n\tend\nend",
  "\tlocal correct = 0\n\tlocal total = 0\n\tfor i = 0, #game do\n\t\tif game[i] ==\
    \ guess[i] then\n\t\t\tcorrect = correct + 1\n\t\tend\n\t\ttotal = total + 1\n\
    \tend\n\treturn { correct, total }\nend", "    if game[#game]~=#guess then return\
    \ end\n    local result={}\n    for i=1,#guess do\n        result[i]=game[#game]-guess[i]\n\
    \    end\n    return table.remove(result)\nend", "  -- Your code goes here.\n\
    end", "    local index1, index2 = 1, #game - 1\n    local best = 0\n    local\
    \ current = 0\n    while index1 <= index2 do\n        current = abs(game[index1]\
    \ - guess[index2])\n        best = best if best > current else current\n     \
    \   index1 = index1 + 1\n        index2 = index2 - 1\n    end\n    return best\n\
    end", "    local scores = {}\n    local total = 0\n    for i = 1, #game do\n \
    \       local score = game[i]\n        if guess[i] == score then\n           \
    \ total = total + 1\n        elseif total > 0 and guess[i] == score then\n   \
    \         total = total + 1\n        else\n            total = total\n       \
    \     scores[i] = abs(guess[i] - score)\n        end\n    end\n    return scores\n\
    end", "    local diff = {}\n    for i = 1, #game do\n        diff[i] = abs(guess[i]-game[i])\n\
    \    end\n    return diff\nend", "    local results = {}\n    for _, score in\
    \ ipairs(game) do\n        results[score] = guess[score] == score\n    end\n \
    \   return results\nend", "    local playerGuess = {}\n    for i = 1, #game do\
    \ -- populate the array\n        playerGuess[i] = game[i]\n    end\n    for i\
    \ = 1, #guess do -- populate the array\n        playerGuess[i] = guess[i]\n  \
    \  end\n    \n    -- return the difference between each player guess\n    local\
    \ guesses = {}\n    for i = 1, #playerGuess, 2 do\n        guesses[i] = playerGuess[i]\
    \ - playerGuess[i+1]\n    end\n    return guesses\nend", "    -- This is an example\
    \ function showing how the compare function might work.\n    -- You will need\
    \ to fill in your own code here to return the appropriate score.\nend", "\t--\
    \ TODO: Implement\n\tlocal guesses\n\tlocal score", "    local results = {}\n\
    \    local last_guess = nil", "    local game = {}\n    local guess = {}\n   \
    \ local bestScore = -1\n    local bestGuess = nil\n    for i = 1, #game do \n\
    \        game[i] = math.abs(game[i] - guess[i])\n        if game[i] > bestScore\
    \ then\n            bestScore = game[i]\n            bestGuess = i\n        end\n\
    \    end\n    return bestGuess, bestScore\nend", "\tlocal scores = {}\n\tfor i=1,#game\
    \ do\n\t\tscores[i] = abs(game[i] - guess[i])\n\tend\n\treturn scores\nend", " \
    \ -- TODO: You will need to think about what to do if the scores are of different\
    \ lengths\n  -- or the guesses are of different lengths\n  local scores = {10,\
    \ 9, 7, 5, 2}\n  local guesses = {3, 9, 1, 10, 8}\n  local correct = 0\n  local\
    \ incorrect = 0", "    -- the game and guess arrays have to have equal lengths\n\
    \    assert(#game  == #guess)\n    -- return an array of the same length as the\
    \ game array which contains -1 for no match, 0 for correct guess, 1 for incorrect\
    \ guess\n    local out = {}\n    for i = 1, #game do\n        if game[i] == guess[i]\
    \ then\n            out[i] = 0\n        else\n            out[i] = abs(game[i]\
    \ - guess[i])\n        end\n    end\n    return out\nend", "\t-- Write your code\
    \ here\nend", "    --\n    -- YOUR CODE HERE\n    --\nend", "  local scores =\
    \ {}\n  for i = 1, #game do\n    scores[i] = math.abs(game[i] - guess[i])\n  end\n\
    \  return scores\nend", "    -- This code assumes the game is always played against\
    \ the exact same set of guesses.\n    -- If this is not the case, please add an\
    \ assertion so this function is tested correctly.\n    assert(#game == #guess)",
  "  local scores = {}\n  for i = 1, #game do\n    scores[i] = math.abs(game[i] -\
    \ guess[i])\n  end\n  return scores\nend", "    if game.scores[1] > game.scores[2]\
    \ then\n        -- The first one is definitely wrong, because the second one is\
    \ the right one --\n        return game.scores[1] - game.scores[2] -- Your task\
    \ here\n    else\n        return game.scores[2] - game.scores[1] -- Your task\
    \ here\n    end\nend", "    return game:guess(guess)\nend", "\tlocal out = {}\n\
    \tlocal i = 1\n\tfor j in ipairs(game) do\n\t\tlocal gameScore = game[i]\n\t\t\
    local guessScore = guess[i]\n\t\tif guessScore == 0 then\n\t\t\tout[i] = 0\n\t\
    \telse\n\t\t\tout[i] = abs(guessScore - gameScore)\n\t\tend\n\t\ti = i + 1\n\t\
    end\n\treturn out\nend", "    -- This is the \"scoring function\" that the computer\
    \ will use for computing and comparing.\n    -- Here we compare the guess to each\
    \ score. The function should return 1 if guess is close to the score, and 0 otherwise.\n\
    \    -- Note: This scoring function could have been very simple, but this demonstrates\
    \ a point.\n    local function scorer(game, guess)\n        if guess == game.score[1]\
    \ then return 1 end\n        if guess < game.score[1] then return 1 end\n    \
    \    if guess > game.score[1] then return 0 end\n    end\n    -- We return an\
    \ array of scores. We use a \"scoring function\" to determine a score for each\
    \ guess.\n    -- We also keep track of the number of times each guess was used\
    \ up, and what score was used.\n    local scores    = { game.score[1] }\n    local\
    \ guesses   = { guess }\n    local num_guesses = 1 -- This is the number of times\
    \ each guess was used up.\n    local total_score = scorer(game, game.score[1])\
    \ -- This is the score for the first guess.\n    -- The other guesses are compared\
    \ to this score, while the scores remaining are compared to each other.\n    --\
    \ So the first guess that is equal to score will return 1.\n    for i = 2, #game.score\
    \ do\n        local score = scorer(game, game.score[i])\n        -- If the score\
    \ is 0, then we know that the game is correct.\n        if score == 0 then\n \
    \           return { 0 }\n        end\n        -- If the score is not 0, then\
    \ we need to subtract from the current score.\n        -- We then add the score\
    \ to scores array, while we subtract the current guess. We then increment the\
    \ guesses array.\n        -- If the guess is correct, scores will be 0, so this\
    \ will result in an error.\n        -- If the guess is wrong, then scores will\
    \ be 1 and we add the score to scores array.\n        -- If the guess is not correct,\
    \ we subtract the guess, and subtract that score from the score.\n        -- If\
    \ the guess is not correct, we need to subtract the guess, and add that score\
    \ to the score.\n        -- If the guess is not correct, we need to subtract the\
    \ guess, and subtract that score from the score.\n        -- This can continue\
    \ until we run out of guesses.\n        -- We also keep track of the total score\
    \ for each guess and subtract it from the total score for the whole game.\n  \
    \      -- We also keep track of the number of guesses for each guess, and add\
    \ one to it.\n        scores[i] = score\n        total_score = total_score - score\n\
    \        num_guesses = num_guesses + 1\n    end\n    -- If the game is correct,\
    \ we will return an array of zeroes with the number of guesses for each guess.\n\
    \    return { total_score - scores[1], num_guesses }\nend", "    local results\
    \ = {}\n    local maxDiff = 0\n    for i = 0, #game do\n        local diff = abs(game[i]\
    \ - guess[i])\n        if diff > maxDiff then\n            maxDiff = diff\n  \
    \      end\n    end\n    table.insert(results, maxDiff)\n    return results\n\
    end", "    return { game[0] - guess[0] , game[1] - guess[1], game[2] - guess[2]\
    \ }\nend", "  -- game - array with the scores \n  -- guess - array with the guesses\n\
    \  -- Return the scores array for the best guess\n  local scores = {game[1][1],\
    \ game[2][1], game[3][1]}\n  local maxDiff = scores[1] - scores[2]\n  for i =\
    \ 2, #scores do\n    local diff = scores[i] - scores[i-1]\n    if diff > maxDiff\
    \ then\n      maxDiff = diff\n    end\n  end\n  return maxDiff\nend", "   local\
    \ scores = {...}\n   local guesses = {...}\n   \n   -- your code here\n   return\
    \ guesses\nend", "    return game:map(\n        function(v) return abs(v - guess)\
    \ end,\n    )\nend", "    -- write your code in here\nend", "    local gameScores\
    \ = { 3, 12, 14, 11, 5, 8, 7, 11, 8, 13, 6 }\n    local guessScores = { 4, 9,\
    \ 13, 1, 9, 13, 3, 8, 10, 9, 1 }\n    local difference = { 0, 0, 0, 0, 0, 0, 0,\
    \ 0 }\n    local i = 0\n    for i = 1, #guess do\n        difference[i] = abs(guessScores[i]-gameScores[i])\n\
    \    end\n    return difference\nend", "\tlocal result = {}\n\tlocal len = #game\n\
    \tfor i = 1, len do\n\t\tif game[i] ~= guess[i] then \n\t\t\t-- difference between\
    \ game and guess\n\t\t\tresult[i] = abs(game[i] - guess[i])\n\t\telse\n\t\t\t\
    -- no difference, game and guess same\n\t\t\tresult[i] = 0\n\t\tend\n\tend\n\t\
    return result\nend", "    local result = {}\n    for i = 1, #guess do\n      \
    \  local guess = guess[i]\n        local score = game[i]\n        if guess ~=\
    \ score then\n            result[i] = abs(guess - score)\n        else\n     \
    \       result[i] = 0\n        end\n    end\n    return result\nend", "   local\
    \ correct, diff, win, lost\n   \n   local i, count = 0, 0, 0\n   for i, g in ipairs(game)\
    \ do\n      if g == guess then\n         count = count + 1\n      else\n     \
    \    if g > guess then\n            diff = g - guess\n            win = win\n\
    \            lost = lost\n         else\n            diff = guess - g\n      \
    \      lost = lost\n         end\n         correct = correct + 1\n      end\n\
    \   end\n   \n   local function abs(x)\n      return math.abs(x)\n   end\n   \n\
    \   local function convert(x)\n      return x:round()\n   end\n   \n   local function\
    \ round(x)\n      x = math.floor(x)\n      x = x - math.floor(x)\n      return\
    \ math.floor(x) + 0.5\n   end\n   \n   local function toInt(x)\n      return int(x)\n\
    \   end\n   \n   return (win, lost, correct, round(abs(count)), toInt(convert(diff)))\n\
    end", "-- write your solution here\nend", "  -- Write your code here.\n  return\
    \ game\nend", "\tlocal game = {\n\t\tplayer = game.player,\n\t\tguesses = game.guesses,\n\
    \t\tscores = game.scores,\n\t\ttime = game.time,\n\t\tscorer = game.scorer\n\t\
    }\n\tlocal correct = 0\n\tlocal incorrect = 0\n\tlocal games = {}\n\tfor i = 1,\
    \ #game do\n\t\tgames[i] = {\n\t\t\tguess = guess[i],\n\t\t\tscore = game[i].scores[i],\n\
    \t\t\ttime = game[i].time,\n\t\t\tscorer = game[i].scorer\n\t\t}\n\tend\n\tfor\
    \ i = 1, #games do\n\t\tif games[i].score > 0 then\n\t\t\tlocal game = games[i]\n\
    \t\t\tlocal winner = game.scorer\n\t\t\tgame.scorer = game.score\n\t\t\tgame.score\
    \ = game.scorer\n\t\t\tlocal other = game.scorer\n\t\t\tlocal score\n\t\t\tif\
    \ winner ~= game.scorer then\n\t\t\t\tscore = game.scorer\n\t\t\t\tgame.scorer\
    \ = game.score\n\t\t\t\tgame.score = game.scorer\n\t\t\t\tgame.score = score\n\
    \t\t\t\tgame.scorer = game.score\n\t\t\telse\n\t\t\t\tscore = game.score\n\t\t\
    \t\tgame.scorer = game.score\n\t\t\t\tgame.score = game.scorer\n\t\t\t\tgame.score\
    \ = score\n\t\t\t\tgame.scorer = game.score\n\t\t\tend\n\t\t\tgame.guesses[i]\
    \ = game.guesses[i] + game.score - game.scorer\n\t\t\tgame.scores[i] = score\n\
    \t\tend\n\tend\n\tlocal guesses\n\tfor i = 1, #game do\n\t\tif game[i].scores\
    \ == game.guesses then\n\t\t\tcorrect = correct + 1\n\t\telse\n\t\t\tincorrect\
    \ = incorrect + 1\n\t\tend\n\tend\n\tif correct == #games then\n\t\treturn {correct\
    \ = correct}\n\telseif incorrect == #games then\n\t\treturn {incorrect = incorrect}\n\
    \telse\n\t\treturn {incorrect = incorrect, correct = correct}\n\tend\nend", "\t\
    local differences = {}\n\tfor i=1,#guess do\n\t\tlocal diff = -game[i]\n\t\tdiff\
    \ = -diff\n\t\tdifferences[i] = diff\n\tend\n\treturn differences\nend", "   \
    \ local function compareGuess(guess1, guess2)\n        local function diff(a,\
    \ b)\n            if a > b then return 1 end\n            if a < b then return\
    \ -1 end\n            return 0\n        end\n        local diff = diff\n     \
    \   local function compareScore(score1, score2)\n            local function compareScoreScore(score1,\
    \ score2)\n                if score1 > score2 then return 1 end\n            \
    \    if score1 < score2 then return -1 end\n                return 0\n       \
    \     end\n            local diff = diff\n            local function scoreScore(score1,\
    \ score2)\n                if score1 == score2 then return 0 end\n           \
    \     local diff = diff\n                if score1 < score2 then diff = diff-score2\
    \ end\n                if score1 > score2 then diff = diff-score1 end\n      \
    \          return diff\n            end\n            local diff = diff\n     \
    \       local function scoreScoreScore(score1, score2)\n                if score1\
    \ == score2 then return 0 end\n                local diff = diff\n           \
    \     if score1 < score2 then diff = diff-score2 end\n                if score1\
    \ > score2 then diff = diff-score1 end\n                return diff\n        \
    \    end\n            local diff = diff\n            local function scoreScoreScoreScore(score1,\
    \ score2)\n                if score1 == score2 then return 0 end\n           \
    \     local diff = diff\n                if score1 < score2 then diff = diff-score2\
    \ end\n                if score1 > score2 then diff = diff-score1 end\n      \
    \          return diff\n            end\n            local diff = diff\n     \
    \       local function scoreScoreScoreScore(score1, score2)\n                if\
    \ score1 == score2 then return 0 end\n                local diff = diff\n    \
    \            if score1 < score2 then diff = diff-score2 end\n                if\
    \ score1 > score2 then diff = diff-score1 end\n                return diff\n \
    \           end\n            local diff = diff\n            local function scoreScoreScoreScore(score1,\
    \ score2)\n                if score1 == score2 then return 0 end\n           \
    \     local diff = diff\n                if score1 < score2 then diff = diff-score2\
    \ end\n                if score1 > score2 then diff = diff-score1 end\n      \
    \          return diff\n            end\n            local diff = diff\n     \
    \       local function scoreScoreScoreScoreScore(score1, score2)\n           \
    \     if score1 == score2 then return 0 end\n                local diff = diff\n\
    \                if score1 < score2 then diff = diff-score2 end\n            \
    \    if score1 > score2 then diff = diff-score1 end\n                return diff\n\
    \            end\n            local diff = diff\n            local function scoreScoreScoreScoreScore(score1,\
    \ score2)\n                if score1 == score2 then return 0 end\n", "  -- Return\
    \ the scores and differences made by the guesses.\n  return table.unpack(game.scores):map(function(score)\n\
    \    local score = score\n    local difference = score - guess[#guess]\n    if\
    \ difference > 0 then\n      -- The guess was wrong. The score was right.\n  \
    \    return 0\n    else\n      -- The guess was correct. The score was wrong.\n\
    \      return difference\n    end\n  end)\nend", "\t-- game = {\"1\",\"6\",\"\
    3\",\"1\",\"3\",\"1\",\"4\",\"0\"}\n\t-- guess = {\"0\",\"1\",\"1\",\"1\",\"3\"\
    ,\"4\",\"1\",\"0\"}\n\t-- return game:ndiffs(guess)\nend", "    return game[#game]\
    \ - game[#game] * math.abs(guess[#game] - guess[#game-1])\nend", "    local scores\
    \ = {2,4,5,3,3}\n    local guesses = {2,4,5,2,4}\n    \n    -- Your code here!\n\
    \    \n    return guesses\nend", "   -- Write your code here\n   local ret = {}\n\
    \   local cnt = 0\n   for i=1, #game do\n      if game[i] == guess then\n    \
    \     cnt = cnt + 1\n      else\n         cnt = 0\n      end\n   end\n   if cnt\
    \ > 0 then\n      local diff = 1\n      for i=1, #guess do\n         diff = diff\
    \ * abs(game[i] - guess[i])\n      end\n      ret = { cnt, diff }\n   else\n \
    \     ret = { cnt, 0 }\n   end\n   return ret\nend", "\tlocal result = {}\n\t\
    local score\n\tfor i, _ in ipairs(game) do\n\t\tscore = 0\n\t\tfor j, _ in ipairs(guess)\
    \ do\n\t\t\tscore = score + (j - game[i])\n\t\tend\n\t\tresult[i] = math.abs(score\
    \ - guess[i])\n\tend\n\treturn result\nend", "    --print(\"Guess: \" .. guess)\n\
    \    local scores = {}\n    local results = {}\n    for i = 1, #game do\n    \
    \    local score = game[i]\n        -- print(score)\n        local guessed = guess[i]\n\
    \        -- print(guessed)\n        local difference = abs(guess - score)\n  \
    \      -- print(difference)\n        results[i] = difference\n        scores[i]\
    \ = score\n    end\n    return scores\nend", "\tlocal game = game or {}\n\tlocal\
    \ guess = guess or {}", "  -- your solution\nend", "   local ans = {}\n   for\
    \ i = 1, #guess do\n      if game[i] == guess[i] then\n         ans[i] = 0\n \
    \     else\n         ans[i] = abs(guess[i] - game[i])\n      end\n   end\n   return\
    \ ans\nend", "    local scores = {\n        { \"1\", \"2\", \"3\", \"4\", \"5\"\
    , \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\" },\n\
    \        { \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"\
    , \"11\", \"12\", \"13\", \"14\", \"15\" },\n        { \"1\", \"2\", \"3\", \"\
    4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\"\
    , \"15\" },\n        { \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\"\
    , \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\" },\n        { \"1\", \"\
    2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\",\
    \ \"13\", \"14\", \"15\" },\n        { \"1\", \"2\", \"3\", \"4\", \"5\", \"6\"\
    , \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\" },\n   \
    \     { \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"\
    , \"11\", \"12\", \"13\", \"14\", \"15\" },\n        { \"1\", \"2\", \"3\", \"\
    4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\"\
    , \"15\" },\n        { \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\"\
    , \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\" },\n        { \"1\", \"\
    2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\",\
    \ \"13\", \"14\", \"15\" },\n        { \"1\", \"2\", \"3\", \"4\", \"5\", \"6\"\
    , \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\" },\n   \
    \     { \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"\
    , \"11\", \"12\", \"13\", \"14\", \"15\" },\n        { \"1\", \"2\", \"3\", \"\
    4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\"\
    , \"15\" },\n        { \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\"\
    , \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\" },\n        { \"1\", \"\
    2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\",\
    \ \"13\", \"14\", \"15\" },\n        { \"1\", \"2\", \"3\", \"4\", \"5\", \"6\"\
    , \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\" },\n   \
    \     { \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"\
    , \"11\", \"12\", \"13\", \"14\", \"", "    local scores = {\n        [1,0,0,0],\n\
    \        [0,0,3,3],\n        [2,1,1,0]\n    }", "   local gameScores = {}\n  \
    \ for _, match in ipairs(game) do\n      gameScores[#gameScores+1] = match\n \
    \  end\n   local guessScores = {}\n   for _, match in ipairs(guess) do\n     \
    \ guessScores[#guessScores+1] = match\n   end\n   local correctGuesses = {}\n\
    \   for _, match in ipairs(gameScores) do\n      table.insert(correctGuesses,\
    \ match)\n   end\n   for _, match in ipairs(guessScores) do\n      table.insert(correctGuesses,\
    \ match)\n   end\n   local maxScores = #gameScores\n   local maxGuesses = #guessScores\n\
    \   local maxGame = #game\n   local maxGuess = #guess\n   local sumGuesses = 0\n\
    \   local sumScores = 0\n   local sumGuessesPerGame = 0\n   local sumScoresPerGame\
    \ = 0\n   local sumCorrectedGuesses = 0\n   local sumCorrectedGuessesPerGame =\
    \ 0\n   local maxCorrectedGuesses = #correctGuesses\n   local maxCorrectedGuessesPerGame\
    \ = #correctGuesses\n   local maxCorrectedGuessesPerGameRatio = 0\n   local maxCorrectedGuessesRatio\
    \ = 0\n   local maxCorrectedGuessesRatioPerGame = 0\n   local maxCorrectedGuessesRatioPerGame\
    \ = 0\n   local maxCorrectedGuessesRatioPerGameRatio = 0\n   local maxCorrectedGuessesRatioPerGameRatio\
    \ = 0\n   local maxScoreDiff = 0\n   local maxScoreDiffPerGame = 0\n   local maxScoreDiffPerGameRatio\
    \ = 0\n   local maxScoreDiffPerGameRatioRatio = 0\n   for _, gameScore in ipairs(gameScores)\
    \ do\n      sumScores = sumScores + gameScore\n      sumScoresPerGame = sumScoresPerGame\
    \ + gameScore\n      sumGuessesPerGame = sumGuessesPerGame + ((maxScores - sumScores)\
    \ / maxScores)\n      sumCorrectedGuessesPerGame = sumCorrectedGuessesPerGame\
    \ + ((maxCorrectedGuesses - sumCorrectedGuesses) / maxCorrectedGuesses)\n   end\n\
    \   for _, guessScore in ipairs(guessScores) do\n      sumScores = sumScores +\
    \ guessScore\n", "  local result={}\n  for i,v in ipairs(game) do\n    table.insert(result,\
    \ abs(v-guess[i]))\n  end\n  return result\nend", "    local results = {}\n  \
    \  for i, score in ipairs(game) do\n        -- compare the guessed value to each\
    \ possible score value in the game\n        local result = 0\n        for j =\
    \ 1, #guess do\n            result = result or abs(score - guess[j])\n       \
    \ end\n        results[i] = result\n    end\n    return results\nend", "    local\
    \ diff = 0\n    for i, score in ipairs(game) do\n        if guess == score then\n\
    \            diff = 0\n        else\n            diff = math.abs(guess - score)\n\
    \        end\n    end\n    return diff\nend", "   local ans = {}\n   for i = 1,\
    \ #game do\n      -- If this index is a match, check it.\n      if game[i] ==\
    \ guess then\n         -- If this is a match, then this was a correct guess\n\
    \         ans[i] = 0\n      else\n         -- If this is not a match, then get\
    \ the difference\n         ans[i] = abs(guess - game[i])\n      end\n   end\n\
    \   return ans\nend", "    local ans = game:score() - guess:sum()\n    local correct\
    \ = game:guesses() == guess:length()\n    if correct then\n        return { 0,\
    \ 0 }\n    end\n    local diffs = 0\n    for _, score in ipairs(game:scores())\
    \ do\n        local diff = score - guess[diffs]\n        diffs = diffs + 1\n \
    \       if diff ~= 0 then\n            ans = ans - diff\n        end\n    end\n\
    \    return { abs(ans), diffs }\nend", "  local results = {}\n  for i = 1, #game\
    \ do\n    results[i] = abs(game[i] - guess[i])\n  end\n  return results\nend",
  '    local results = {}', "    local function compareGuess(game, guess)\n      \
    \  local totalDiff = 0\n        for i,g in pairs(game) do\n            local diff\
    \ = abs(g-guess[i])\n            totalDiff = totalDiff + diff\n        end\n \
    \       return totalDiff\n    end\n    return { table.removeValues(game, 1), table.removeValues(guess,\
    \ 1) }\nend", "\tlocal total = 0\n\tlocal good = 0\n\tfor i = 1, #game do\n\t\t\
    total = total + (game[i] - guess[i])\n\t\tif game[i] == guess[i] then\n\t\t\t\
    good = good + 1\n\t\tend\n\tend\n\tif good == #guess then return 0 end\n\treturn\
    \ total\nend", "\t--assert(game:GetNumberOfPlayers()==2)\n\t--assert(guess:GetNumberOfPlayers()==1)\n\
    \t--assert(#game == #guess)\n\tlocal total = 0\n\tfor i=1,#game do\n\t\tif game[i]~=guess[i]\
    \ then \n\t\t\ttotal = total + math.abs(game[i]-guess[i])\n\t\tend\n\tend\n\t\
    return total\nend", "   -- ... your code ...\nend", "\tlocal results = {}\n\t\
    local gameScores = {}\n\tlocal guessScores = {}\n\t-- fill arrays\n\tfor k, v\
    \ in pairs(game) do\n\t\tgameScores[#gameScores+1] = v\n\tend\n\tfor k, v in pairs(guess)\
    \ do\n\t\tguessScores[#guessScores+1] = v\n\tend\n\t-- compare scores\n\tfor k\
    \ = 1, #gameScores do\n\t\tlocal diff = math.abs(guessScores[k] - gameScores[k])\n\
    \t\tif diff > 0 then\n\t\t\tresults[#results+1] = diff\n\t\tend\n\tend\n\treturn\
    \ results\nend", "   -- Your code here\nend", "\tlocal scores = {\n\t\t[0] = 3,\n\
    \t\t[1] = 2,\n\t\t[2] = 1,\n\t\t[3] = 1,\n\t\t[4] = 1,\n\t\t[5] = 1,\n\t\t[6]\
    \ = 1,\n\t\t[7] = 1,\n\t\t[8] = 1,\n\t\t[9] = 1,\n\t\t[10] = 1,\n\t\t[11] = 1,\n\
    \t\t[12] = 1,\n\t\t[13] = 1,\n\t\t[14] = 1,\n\t\t[15] = 1,\n\t\t[16] = 1,\n\t\t\
    [17] = 1,\n\t\t[18] = 1,\n\t\t[19] = 1,\n\t\t[20] = 1,\n\t\t[21] = 1,\n\t\t[22]\
    \ = 1,\n\t\t[23] = 1,\n\t\t[24] = 1,\n\t\t[25] = 1,\n\t\t[26] = 1,\n\t\t[27] =\
    \ 1,\n\t\t[28] = 1,\n\t\t[29] = 1,\n\t\t[30] = 1,\n\t\t[31] = 1,\n\t\t[32] = 1,\n\
    \t\t[33] = 1,\n\t\t[34] = 1,\n\t\t[35] = 1,\n\t\t[36] = 1,\n\t\t[37] = 1,\n\t\t\
    [38] = 1,\n\t\t[39] = 1,\n\t\t[40] = 1,\n\t\t[41] = 1,\n\t\t[42] = 1,\n\t\t[43]\
    \ = 1,\n\t\t[44] = 1,\n\t\t[45] = 1,\n\t\t[46] = 1,\n\t\t[47] = 1,\n\t\t[48] =\
    \ 1,\n\t\t[49] = 1,\n\t\t[50] = 1,\n\t\t[51] = 1,\n\t\t[52] = 1,\n\t\t[53] = 1,\n\
    \t\t[54] = 1,\n\t\t[55] = 1,\n\t\t[56] = 1,\n\t\t[57] = 1,\n\t\t[58] = 1,\n\t\t\
    [59] = 1,\n\t\t[60] = 1,\n\t\t[61] = 1,\n\t\t[62] = 1,\n\t\t[63] = 1,\n\t\t[64]\
    \ = 1,\n\t\t[65] = 1,\n\t\t[66] = 1,\n\t\t[67] = 1,\n\t\t[68] = 1,\n\t\t[69] =\
    \ 1,\n\t\t[70] = 1,\n\t\t[71] = 1,\n\t\t[72] = 1,\n\t\t[73] = 1,\n\t\t[74] = 1,\n\
    \t\t[75] = 1,\n\t\t[76] = 1,\n\t\t[77] = 1,\n\t\t[78] = 1,\n\t\t[79] = 1,\n\t\t\
    [80] = 1,\n\t\t[81] = 1,\n\t\t[82] = 1,\n\t\t[83] = 1,\n\t\t[84] = 1,\n\t\t[85]\
    \ = 1,\n\t\t[86] = 1,\n\t\t[87] = 1,\n\t\t[88] = 1,\n\t\t", "    local diff =\
    \ {}\n    for i, score in ipairs(game) do\n        diff[i] = math.abs(guess[i]\
    \ - score)\n    end\n    return diff\nend", "   local results = {}\n   for i =\
    \ 1, #game do\n      if game[i] == guess[i] then \n         results[i] = 0 --\
    \ guess correct\n      else \n         results[i] = abs(game[i] - guess[i]) --\
    \ difference between score and guess\n      end\n   end\n   return results\nend",
  "\tlocal scores = {\n\t\t{score = 94, expected = 93},\n\t\t{score = 88, expected\
    \ = 83},\n\t\t{score = 86, expected = 81},\n\t\t{score = 97, expected = 95}\n\t\
    }", "    local scores = {\n        { 1, 0 },\n        { 2, 3 },\n        { 4,\
    \ 5 },\n        { 6, 8 },\n        { 10, 11 },\n        { 11, 15 },\n    }\n \
    \   local guesses = {\n        { 1, 2 },\n        { 2, 3 },\n        { 6, 8 },\n\
    \        { 10, 11 },\n        { 11, 15 },\n        { 12, 16 },\n    }\n    local\
    \ expected = {\n        { 1, 2 },\n        { 0, -1 },\n        { 10, 11 },\n \
    \       { -1, -2 },\n        { -1, -2 },\n    }\n    for i,v in ipairs(expected)\
    \ do\n        local result = game(scores[v[1]], guesses[v[1]])\n        print(game)\n\
    \        print(guess)\n        print(result)\n        print()\n    end\nend",
  "   if game.gameEnded then\n      return 1\n   else\n      return abs(game.scoreGuesses[guess]\
    \ - game.scores[guess])\n   end\nend", "    local results = {}\n    for i = 0,\
    \ #guess do\n        results[i] = abs(guess[i] - game[i])\n    end\n    return\
    \ results\nend\nprint(compare(game, guesses)) -- prints [3,0,-3]", "  local result\
    \ = {}\n  for i = 1, #game do\n    result[i] = abs(game[i] - guess[i])\n  end\n\
    \  return result\nend", "  local game = game\n  local guess = guess\n  local scoreTable\
    \ = {}\n  for i = 1, #game do\n    local newScore = game[i]\n    local newGuess\
    \ = guess[i]\n    local difference = math.abs(newGuess - newScore)\n    scoreTable[i]\
    \ = difference\n  end\n  return scoreTable\nend", "    local best\n    local results\
    \ = {}\n    for i = 1, #game do\n        local score = game[i]\n        local\
    \ guess = guess[i]\n        local ok = guess == score\n        if best == nil\
    \ or (ok and best > score) then\n            best = score\n        end\n     \
    \   if ok then\n            table.insert(results, 0)\n        else\n         \
    \   table.insert(results, best-score)\n        end\n    end\n    return results\n\
    end", "  -- The game array contains a list of numbers and a list of the correct\
    \ number.\n  -- The guessed array is just the guesses themselves. So guessed is\
    \ just guess (which is\n  -- already a copy of guess)\n  return game.numbers[game]\
    \ ~= guess[game]\nend", "  -- This next part is your solution.\n  -- Don't forget\
    \ to return the result of 'math.abs(...)'!\n  local scores = {\n    score1 = game.score1,\n\
    \    score2 = game.score2,\n    score3 = game.score3,\n    score4 = game.score4,\n\
    \    score5 = game.score5,\n    score6 = game.score6,\n    score7 = game.score7,\n\
    \    score8 = game.score8\n  }\n  local guesses = {\n    guess1 = game.guess1,\n\
    \    guess2 = game.guess2,\n    guess3 = game.guess3,\n    guess4 = game.guess4,\n\
    \    guess5 = game.guess5,\n    guess6 = game.guess6,\n    guess7 = game.guess7,\n\
    \    guess8 = game.guess8\n  }\n  local numGuesses = #guesses\n  local numScores\
    \ = #scores\n  local results = {}\n  for i = 1, numGuesses do\n    local difference\
    \ = abs(guesses[i] - scores[i])\n    results[i] = difference\n  end\n  return\
    \ results\nend", "    local results = {}\n    for i = 1, #game do \n        local\
    \ score = game[i]\n        local guess = guess[i]\n        local diff = abs(guess\
    \ - score)\n        if diff > 1000 then\n            results[i] = diff\n     \
    \   else\n            results[i] = 0\n        end\n    end\n    return results\n\
    end", "    local score1 = game[1]\n    local score2 = game[2]\n    local guesses\
    \ = game[3]\n    local results = {}\n    for i = 1, #guess do\n        results[i]\
    \ = abs(score1[i] - guess[i])\n    end\n    -- now do the same for the other answer\n\
    \    for i = 1, #score2 do\n        results[i] = abs(score1[i] - score2[i])\n\
    \    end\n    local result = {0}\n    for i, v in pairs(results) do\n        if\
    \ v > 0 then\n            result[i] = v\n        end\n    end\n    return result\n\
    end", "  -- Your code here\n  return result\nend", "    -- TODO: Implement me\n\
    end", "  -- your code here\n  return \nend", "   local compare = {}\n   for i\
    \ = 1, #guess do\n      local score = game[i]\n      -- TODO: check for out of\
    \ range\n      local guess = guess[i]\n      if guess ~= score then\n\t local\
    \ diff = math.abs(guess - score)\n\t -- if either of the guesses is less than\
    \ 0, we still want to return an absolute difference\n\t -- otherwise the absolute\
    \ difference will drop to zero and the result would be meaningless\n\t if guess\
    \ < 0 then\n\t    diff = -diff\n\t end\n\t compare[i] = diff\n      end\n   end\n\
    \   return compare\nend", "    local scores = {10, 7, 1, 4, 3}\n    local guesses\
    \ = {7, 5, 6, 4, 1}\n    local differences = {0, 0, 0, 0, 0}\n    local differenceIndex\
    \ = 0\n    local index = 1\n    local score = 0\n    local i = 1\n    while i\
    \ <= #scores do\n        if game[index] == guess[i] then\n            score =\
    \ score + 1\n        else\n            differences[differenceIndex] = abs(guess[i]\
    \ - scores[i])\n            differenceIndex = differenceIndex + 1\n        end\n\
    \        i = i + 1\n    end\n    return differences\nend\nprint compare(scores,\
    \ guesses)", "    local result = {} -- Result is an array that holds the absolute\
    \ differences of every guess against the score of each position\n    for i = 0,\
    \ #game do -- Loop through every guess in game\n        local j = #guess - 1 --\
    \ Start at the end of the array\n        while j > 0 do -- Loop through every\
    \ position in guess\n            if abs(guess[j] - game[i]) <= 0.1 then -- If\
    \ the difference of the guess at the jth position against the score of the ith\
    \ position is less than 0.1\n                result[i] = 0 -- Assign the result\
    \ to every guess that was missed by an absolute difference of 0.1\n          \
    \  else\n                result[i] = abs(guess[j] - game[i]) -- Else assign the\
    \ difference to the ith guess\n                j--; -- Decrement j to move the\
    \ loop to the next position in the array\n            end\n        end\n    end\n\
    \    return result\nend", "    local diff = { }\n    local scoreDiff = { }\n \
    \   local i, n = #game, #guess\n    for i=1,n do\n        diff[i] = math.abs(guess[i]\
    \ - game[i])\n        scoreDiff[i] = abs(guess[i] - game[i])\n    end\n    return\
    \ scoreDiff, diff\nend", "  local scores = {}\n  for i = 1, #game do\n    table.insert(scores,\
    \ game[i])\n  end\n  local guesses = {}\n  for i = 1, #guess do\n    table.insert(guesses,\
    \ guess[i])\n  end\n  local diffs = { }\n  for i = 1, #guesses do\n    local difference\
    \ = math.abs(guesses[i] - scores[i])\n    table.insert(diffs, difference)\n  end\n\
    \  return diffs\nend", "   local scores = {}\n   for i = 1, #game do\n      table.insert(scores,\
    \ game[i])\n   end\n   local guesses = {}\n   for i = 1, #guess do\n      table.insert(guesses,\
    \ guess[i])\n   end\n   local diffs = {}\n   for i = 1, #scores do\n      local\
    \ diff = abs(guesses[i] - scores[i])\n      if diff == guesses[i] then\n     \
    \    diffs[i] = 0\n      else\n         diffs[i] = diff\n      end\n   end\n \
    \  return diffs\nend", "\t-- Create a local copy so we can edit it\n\tlocal copy\
    \ = {}\n\tfor k, v in pairs(game) do\n\t\tcopy[k] = v\n\tend", "    local index\
    \ = 0\n    local result = {}\n    for i = 0, #game do -- each score\n        if\
    \ guess == game[i] then\n            result[index] = 0\n        else\n       \
    \     result[index] = math.abs(guess - game[i])\n        end\n        index =\
    \ index + 1\n    end\n    return result\nend\nprint(compare(\n    {1,2,3,4,5},\n\
    \    {1,2,3,4,5,6}\n))", "    local index = 0\n    local score = 0\n    local\
    \ diff = 0\n    while index+1 <= #game do\n        score = game[index] or 0\n\
    \        diff = abs(guess - score)\n        if diff == 0 then\n            return\
    \ index\n        end\n        index = index + 1\n    end\n    return #game\nend",
  "    local result={}\n    local score={}\n    for i, score in ipairs(game) do\n\
    \        if guess[i]==score then -- The guess is correct\n            result[i]=0\n\
    \        else\n            result[i]=abs(guess[i]-score)\n        end\n    end\n\
    \    return result\nend", "  local result={}\n  local score={}\n  -- TODO: fill\
    \ in this function.\n  return result\nend", "    local correct = 0\n    for i=1,#game\
    \ do\n        if game[i] == guess then \n            correct = correct + 1\n \
    \       end\n    end\n    return correct\nend", "   local gameScore = game[1]\n\
    \   local gameGuess = game[2]\n   local guess = guess\n   local correct = 0\n\
    \   local totalGuesses = #gameGuess and #guess or 1\n   for i = 0, totalGuesses-1\
    \ do \n      if gameGuess[i] == guess[i] then\n         correct = correct + 1\n\
    \      end\n   end\n   return correct / #gameGuess\nend", "    local index = {}\n\
    \    local index2 = {}\n    local index3 = {}\n    local index4 = {}", "   assert(#game\
    \ == #guess, \"You passed me a vector of games and a vector of guesses that don't\
    \ match\")\n   local scores = {}\n   for idx = 1, #game do\n      table.insert(scores,\
    \ abs(game[idx] - guess[idx]))\n   end\n   return scores\nend", "  local score\
    \ = 0\n  local guesses = { \n    math.abs(game[1]-guess[1]),\n    math.abs(game[2]-guess[2]),\n\
    \    math.abs(game[3]-guess[3]),\n    math.abs(game[4]-guess[4]),\n    math.abs(game[5]-guess[5]),\n\
    \    math.abs(game[6]-guess[6]),\n    math.abs(game[7]-guess[7]),\n    math.abs(game[8]-guess[8]),\n\
    \    math.abs(game[9]-guess[9]),\n    math.abs(game[10]-guess[10])\n  }\n  return\
    \ guesses\nend", "    local result = {}\n    for i = 1, #game do\n        local\
    \ score = game[i]\n        local guess = guess[i]\n        result[i] = math.abs(guess\
    \ - score)\n    end\n    return result\nend", "  -- Write your code here\n  return\
    \ 0\nend", "    local scores = {\n        10, 15, 10, 20, 10, 10, 10\n    }",
  "    local scores = {}\n    for i = 1, #game do scores[i] = game[i] end\n    for\
    \ i = 1, #guess do scores[i] = scores[i] + guess[i] end\n    return scores\nend",
  "\tlocal score = {0,0,0,0,0,0,0,0,0,0,0}\n\tlocal results = {0,0,0,0,0,0,0,0,0,0,0}\n\
    \tfor i = 1, #game do\n\t\tlocal score = game[i]\n\t\tlocal guess = guess[i]\n\
    \t\tif score > guess then\n\t\t\tresults[#results+1] = -1\n\t\telseif score <\
    \ guess then\n\t\t\tresults[#results+1] = 1\n\t\telse\n\t\t\tresults[#results+1]\
    \ = 0\n\t\tend\n\tend\n\treturn results\nend", "    return game:index(guess, game:n())\
    \ -- get index of guess from our table of scores\nend", "    local score = {1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10}\n    local guess = {1, 2, 3, 4, 5, 6, 7, 8, 10}\n\
    \    local scores = {}\n    local guesses = {}\n    for i = 1, 10 do\n       \
    \ scores[i] = abs(game[i] - guess[i]) -- absolute difference\n        guesses[i]\
    \ = abs(game[i] - guess[i])\n    end\n    return scores\nend", "\tlocal arr1 =\
    \ game:keys()\n\tlocal arr2 = guess:keys()\n\tlocal results = {}\n\tfor i,v in\
    \ ipairs(arr1) do\n\t\tif arr2[i] == 1 then\n\t\t\ttable.insert(results, 0)\n\t\
    \telseif arr2[i] == 0 then\n\t\t\ttable.insert(results, math.abs(v-arr1[i]))\n\
    \t\telse\n\t\t\ttable.insert(results, v)\n\t\tend\n\tend\n\treturn results\nend",
  "    local score = { 7, 9, 5, 3, 8, 2, 6, 5, 9, 0, 7, 0, 7, 8, 7, 9, 7, 0, 6, 2,\
    \ 7, 1, 7, 7, 8, 7, 9, 1, 8, 1, 7, 9, 7, 8 }\n    local guesses = { 8, 7, 9, 1,\
    \ 8, 5, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7 }", "    local score1 = game[1]\n    local score2 = game[2]\n   \
    \ local guesses = game[3]\n    local matches = 0\n    \n    for i=1,#score1 do\
    \ -- Go through both scores\n        matches = 0\n        for j=1,#score2 do --\
    \ Go through each guess and see if there is a match\n            if guesses[i,j]\
    \ == true and score1[i,j] == score2[i,j] then -- If there is a match, increment\
    \ matches\n                matches = matches + 1\n                break\n    \
    \        end\n        end\n        if matches > 0 then -- If there are matches,\
    \ return how far off we are from correct\n            if matches == 1 then\n \
    \               return 0\n            else\n                return (abs(guesses[i,1]\
    \ - score1[i,1]) - (abs(guesses[i,1] - score2[i,1])))\n            end\n     \
    \   end\n    end\n    return 0 -- If we made it here, we know that there are no\
    \ matches\nend", "    local function compareScore(score, guess)\n        local\
    \ scoreVector = {}\n        for i = 1, #score do\n            scoreVector[i] =\
    \ abs(score[i] - guess[i])\n        end\n        return scoreVector\n    end",
  "  local score = game[1]\n  local guesses = game[2]\n  -- We will assume that the\
    \ guess list has the same length as the score list\n  -- We will denote as score\
    \ what the score is for a given match\n  local guessed_scores = { }\n  -- Our\
    \ array that will contain the final results\n  local results = {}\n  -- We will\
    \ iterate over both lists in parallel and compare each value\n  for i = 0, #score\
    \ do -- We will iterate over each value in parallel\n    -- We want to know if\
    \ the score at index i matches the guess at index i\n    -- We want to know if\
    \ the guess at index i is correct\n    local score = score[i]\n    local guess\
    \ = guesses[i]\n    -- We want to know if the guess at index i is correct\n  \
    \  local correct = guess == score\n    -- If the guess is correct and we haven't\
    \ already processed this guess\n    -- We want to update the results and update\
    \ the guessed scores array\n    if correct and not guessed_scores[i] then\n  \
    \    guessed_scores[i] = score\n      -- If all our other scores are correct and\
    \ correct score is the highest score so far\n      if #guessed_scores == #score\
    \ then\n        -- We have already processed all of the scores and we have found\
    \ the highest score\n        -- Let's update the results array with our guesses\n\
    \        results[i] = guess\n      -- If all our other scores are correct but\
    \ incorrect score is the highest score so far\n      elseif correct and #guessed_scores\
    \ > #score then\n        -- We have already processed all of the scores and we\
    \ have found the highest score\n        -- Let's update the results array with\
    \ our guesses\n        results[i] = guess\n      -- If the guess is incorrect\
    \ and the highest score so far is the correct score\n      elseif correct and\
    \ #guessed_scores == #score then\n        -- We have already processed all scores\
    \ and the guessed score is the highest score so far\n        -- Let's update the\
    \ results array with our guesses\n        results[i] = guess\n      -- If the\
    \ guess is incorrect and the highest score so far is not the correct score\n \
    \     elseif correct and #guessed_scores < #score then\n        -- We have already\
    \ processed all of the scores but the guessed score is the highest score so far\n\
    \        -- Let's update the results array with our guesses\n        results[i]\
    \ = guess\n      -- If the guessed score is the highest score so far and the score\
    \ is correct\n      elseif correct and #guessed_scores == #score and score ==\
    \ guessed_scores[i] then\n        -- We have already processed all scores and\
    \ we have found the highest score\n        -- Let's update the results array with\
    \ our guesses\n        results[i] = guess\n      -- If the guessed score is the\
    \ highest score so far and the score is incorrect ", "   -- Return the correct\
    \ number of points needed to get to 'guess' from 'game'\n   -- The returned array\
    \ should be the same length as 'guess', but may be shortened if necessary\n  \
    \ local points = 0\n   for i=1,#guess do -- loop over each guess index\n     \
    \ -- The loop will terminate as soon as a guess is found where 'guess' >= score\n\
    \      -- If the score is greater than 'guess', the score is subtracted from it,\
    \ and a 'lost' point is added to the score\n      -- If the score is less than\
    \ or equal to 'guess', then the 'lost' point is not added to the score\n     \
    \ if game[i] <= guess[i] then\n         points = points + 1\n         game[i]\
    \ = game[i] - guess[i]\n      elseif game[i] >= guess[i] then\n         points\
    \ = points + abs(game[i] - guess[i])\n      else\n         points = points + abs(game[i]\
    \ - guess[i]) + 1 -- game is better than guess\n      end\n   end\n   return points\n\
    end", "    local result = {}\n    for j = 1, #game do\n       result[j] = abs(guess\
    \ - game[j])\n    end\n    return result\nend", "  -- your code here\nend", " \
    \   local compare = {[0]=0 -- The array for comparison\n    local index = 0}\n\
    \    local score = {}\n    local difference = {}", "    local scores = {\n   \
    \     {score=1, guess=100},\n        {score=2, guess=101},\n        {score=3,\
    \ guess=100},\n        {score=4, guess=101},\n        {score=5, guess=101},\n\
    \        {score=6, guess=100},\n        {score=7, guess=101},\n        {score=8,\
    \ guess=101},\n    }\n    local guesses = {\n        {guess=10},\n        {guess=11},\n\
    \        {guess=10},\n        {guess=10},\n        {guess=11},\n        {guess=10},\n\
    \        {guess=11},\n        {guess=10},\n    }\n    return compare(scores, guesses,\
    \ 3)\nend\nprint(compare({score=1, guess=100}, {guess=10}, {score=1, guess=100}))\n\
    print(compare({score=1, guess=100}, {guess=11}, {score=1, guess=100}))\nprint(compare({score=1,\
    \ guess=100}, {guess=10}, {score=1, guess=100}))\nprint(compare({score=1, guess=100},\
    \ {guess=10}, {score=1, guess=100}))\nprint(compare({score=1, guess=100}, {guess=10},\
    \ {score=1, guess=100}))\nprint(compare({score=1, guess=100}, {guess=10}, {score=1,\
    \ guess=100}))", "  local scores = {1,4,3,5,2,6,1}\n  local guesses = {2,2,2,2,4,4,4}\n\
    \  -- Your code here\nend", "  -- write your code here\n  -- Return an array of\
    \ length 2, where element 0 is \"guess was too low\", element 1 is \"guess was\
    \ too high\"\nend", "\tlocal score = {}\n\tlocal correct = {}\n\tlocal off = {}\n\
    \tlocal n = 0\n\tfor _, score in pairs(game) do\n\t\tn = n + 1\n\t\toff[n] = 0\n\
    \t\tif guess[n] == score then\n\t\t\tcorrect[n] = 0\n\t\telse\n\t\t\tcorrect[n]\
    \ = guess[n] - score\n\t\tend\n\tend\n\treturn off\nend", "    local scores =\
    \ {}\n    local guesses = {}\n    for _, score in pairs(game) do\n        scores[_]\
    \ = score\n    end\n    for _, guess in pairs(guess) do\n        guesses[_] =\
    \ guess\n    end\n    for _, guess in pairs(guesses) do\n        guess = math.abs(guess\
    \ - scores[guess])\n    end\n    return guesses\nend", "    local correct = 0\n\
    \    local distances = {}\n    for i = 1, #game do\n        distances[i] = math.abs(game[i]\
    \ - guess[i])\n        if game[i] == guess[i] then\n            correct = correct\
    \ + 1\n        end\n    end\n    return distances\nend", "    local function score(a,\
    \ b)\n        return b - a\n    end\n    local function score2(scores, guesses)\n\
    \        local score = 0\n        local maxScore = scores[1]\n        for i =\
    \ 2, #scores do\n            local score = score2(scores[i], guesses[i])\n   \
    \         if score > maxScore then\n                maxScore = score\n       \
    \     end\n        end\n        return maxScore\n    end\n    \n    local guesses\
    \ = {}\n    for i = 1, #guess do\n        guesses[i] = guess[i]\n    end\n   \
    \ \n    local scores = game:scores()\n    return score2(scores, guesses)\nend",
  "  local gameScores = {}\n  local guessScores = {}\n  for i=1, #game do\n    table.insert(gameScores,\
    \ game[i])\n    table.insert(guessScores, guess[i])\n  end\n  local diffScores\
    \ = {}\n  for i=1, #guess do\n    local diff = abs(guessScores[i] - gameScores[i])\n\
    \    table.insert(diffScores, diff)\n  end\n  return diffScores\nend", "  local\
    \ scoreArray = {}\n  for i,v in ipairs(game) do\n    scoreArray[i] = v\n  end\n\
    \  scoreArray = scoreArray:sort()\n  for i,v in ipairs(guess) do\n    guess[i]\
    \ = v\n  end\n  guess = guess:sort()\n  local score = 0\n  for i,v in ipairs(guess)\
    \ do\n    local diff = abs(scoreArray[i] - v)\n    if diff/scoreArray[i] ~= 0\
    \ then\n      score = diff / scoreArray[i]\n    end\n  end\n  return score\nend",
  "  local results = {}\n  for i = 0, #game do\n    local diff = math.abs(guess -\
    \ game[i])\n    local incorrect = diff > 1\n    if incorrect then\n      results[i]\
    \ = diff or 0\n    end\n  end\n  return results\nend", "    local results = {}\n\
    \    for i = 1, #game do\n        if guess[i] > game[i] then\n            results[i]\
    \ = abs(game[i] - guess[i])\n        else\n            results[i] = abs(game[i]\
    \ - guess[i])\n        end\n    end\n    return results\nend", "\t-- Write your\
    \ function here!\nend", "    local gameScores = {}\n    local guessScores = {}\n\
    \    for _, score in pairs(game) do \n        table.insert(gameScores, math.abs(score\
    \ - guess[#guess]))\n        table.insert(guessScores, math.abs(guess - score))\n\
    \    end\n    return gameScores\nend", "    local scores = {1, 2, 3, 4, 5}\n \
    \   local guesses = {1, 2, 2, 4}", "    local correct = { [0]=1 }\n    local offset\
    \ = { [0]=0 }\n    for i=1,#game do\n        local score = game[i]\n        local\
    \ guess = guess[i]\n        for j = 1,#correct do correct[j] = 0; end\n      \
    \  for j = 1,#guess do guess[j] = 0; end\n        local correctIndex = #correct\n\
    \        local guessIndex = #guess\n        local totalGuesses = guessIndex -\
    \ correctIndex\n        for j=1,#guessIndex do\n            local difference =\
    \ abs(guess - score)\n            if difference > 0 then\n                correct[guessIndex\
    \ + j] = guess\n                guess[correctIndex + j] = score\n            \
    \    guess[guessIndex + j] = difference\n            end\n        end\n    end\n\
    \    return correct, offset\nend", "  local scores = game:getScores()\n  local\
    \ guesses = game:getGuesses()\n  local result = {}\n  -- Initialize result with\
    \ the first guess and score\n  result[1] = guess[1]\n  result[2] = scores[1]\n\
    \  -- For each remaining guess try to guess it further away from our current score\n\
    \  for i=2,#guess do\n    -- If the guess is close enough we should continue with\
    \ the next guess\n    if (result[1] < scores[i]) and (result[1] > scores[i-1])\
    \ then\n      result[i] = guess[i]\n    else\n      -- If it is too close to the\
    \ current score, we're already at the point where the guess is too far away\n\
    \      if result[1] > scores[i-1] then\n        -- If we're too far from the last\
    \ result, just use the current result\n        -- Otherwise use the previous result\n\
    \        result[i] = result[i-1] or result[i]\n      else\n        -- Otherwise\
    \ just use the current result\n        result[i] = result[1]\n      end\n    end\n\
    \  end\n  -- Finally return the result\n  return result\nend", "\t-- TODO: return\
    \ the correct value\n\t-- local game = [[5, 2, 5], [2, 5, 7], [3, 6, 2]]\n\t--\
    \ local guess = [5, 3, 2]\n\t-- return [1, 1, 3]\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
